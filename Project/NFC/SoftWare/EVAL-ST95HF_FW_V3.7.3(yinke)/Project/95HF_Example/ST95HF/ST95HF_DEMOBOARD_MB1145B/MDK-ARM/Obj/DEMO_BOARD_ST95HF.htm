<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\DEMO_BOARD_ST95HF.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\DEMO_BOARD_ST95HF.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Mar 18 11:27:21 2021
<BR><P>
<H3>Maximum Stack Usage =       2984 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EP3_OUT_Callback &rArr; HID_Data_Out &rArr; HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[19f]">NDEF_IdentifySPRecord</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">NDEF_ParseRecordHeader</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4a]">ADC1_2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[67]">ADC3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[32]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4d]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4e]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[25]">COMPOSITE_Data_Setup</a> from usb_prop.o(i.COMPOSITE_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[29]">COMPOSITE_GetConfigDescriptor</a> from usb_prop.o(i.COMPOSITE_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[28]">COMPOSITE_GetDeviceDescriptor</a> from usb_prop.o(i.COMPOSITE_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[2a]">COMPOSITE_GetStringDescriptor</a> from usb_prop.o(i.COMPOSITE_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[27]">COMPOSITE_Get_Interface_Setting</a> from usb_prop.o(i.COMPOSITE_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[26]">COMPOSITE_NoData_Setup</a> from usb_prop.o(i.COMPOSITE_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[22]">COMPOSITE_Reset</a> from usb_prop.o(i.COMPOSITE_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[23]">COMPOSITE_Status_In</a> from usb_prop.o(i.COMPOSITE_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[24]">COMPOSITE_Status_Out</a> from usb_prop.o(i.COMPOSITE_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[21]">COMPOSITE_init</a> from usb_prop.o(i.COMPOSITE_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[78]">CardEmul</a> from menu_cardemul.o(i.CardEmul) referenced from menu_cardemul.o(i.CardEmul14443A)
 <LI><a href="#[1a]">CardEmul14443A</a> from menu_cardemul.o(i.CardEmul14443A) referenced 2 times from menu.o(.data)
 <LI><a href="#[83]">CheckForUserAction</a> from proprietary_p2p.o(i.CheckForUserAction) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigClient)
 <LI><a href="#[2c]">Composite_Device_ClearFeature</a> from usb_prop.o(i.Composite_Device_ClearFeature) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[2b]">Composite_Device_SetConfiguration</a> from usb_prop.o(i.Composite_Device_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[2d]">Composite_Device_SetDeviceAddress</a> from usb_prop.o(i.Composite_Device_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[46]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[47]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[48]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[49]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[70]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[71]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[72]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[73]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[35]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1b]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1c]">EP2_IN_Callback</a> from usb_endp.o(i.EP2_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1f]">EP2_OUT_Callback</a> from usb_endp.o(i.EP2_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1d]">EP3_IN_Callback</a> from usb_endp.o(i.EP3_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[20]">EP3_OUT_Callback</a> from usb_endp.o(i.EP3_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[3e]">EXTI0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[60]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3f]">EXTI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[40]">EXTI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[41]">EXTI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[42]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4f]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3c]">FLASH_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[68]">FSMC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[77]">HID_Report</a> from usb_prop.o(i.HID_Report) referenced from usb_prop.o(i.COMPOSITE_Data_Setup)
 <LI><a href="#[30]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[58]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[57]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5a]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[59]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1]">IdleFunc</a> from menu.o(i.IdleFunc) referenced 92 times from menu.o(.data)
 <LI><a href="#[87]">InitiatorCheckForUserAction</a> from proprietary_p2p.o(i.InitiatorCheckForUserAction) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigServer)
 <LI><a href="#[84]">LastCmdAcknowledged</a> from proprietary_p2p.o(i.LastCmdAcknowledged) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigServer)
 <LI><a href="#[31]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2f]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1e]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 30 times from usb_istr.o(.data)
 <LI><a href="#[39]">PVD_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[36]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7d]">PongCheckForUserAction</a> from pongexample.o(i.PongCheckForUserAction) referenced from pongexample.o(i.PongConfigClient)
 <LI><a href="#[16]">PongConfigClient</a> from pongexample.o(i.PongConfigClient) referenced 2 times from menu.o(.data)
 <LI><a href="#[17]">PongConfigServer</a> from pongexample.o(i.PongConfigServer) referenced 2 times from menu.o(.data)
 <LI><a href="#[7c]">PongTarget_ReceiveRequestSendResponse</a> from pongexample.o(i.PongTarget_ReceiveRequestSendResponse) referenced from pongexample.o(i.PongConfigClient)
 <LI><a href="#[81]">PopDataCommand</a> from proprietary_p2p.o(i.PopDataCommand) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigClient)
 <LI><a href="#[18]">ProprietaryP2PConfigClient</a> from proprietary_p2p.o(i.ProprietaryP2PConfigClient) referenced 2 times from menu.o(.data)
 <LI><a href="#[19]">ProprietaryP2PConfigServer</a> from proprietary_p2p.o(i.ProprietaryP2PConfigServer) referenced 2 times from menu.o(.data)
 <LI><a href="#[3d]">RCC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[61]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3b]">RTC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2e]">Reset_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7]">ReturnFunc</a> from menu.o(i.ReturnFunc) referenced 14 times from menu.o(.data)
 <LI><a href="#[69]">SDIO_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5b]">SPI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5c]">SPI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6b]">SPI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[34]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7a]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[7b]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[79]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[37]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[75]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[3a]">TAMPER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[50]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[53]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[52]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[51]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[54]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[55]">TIM3_IRQHandler</a> from drv_interrupt.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[56]">TIM4_IRQHandler</a> from drv_interrupt.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6a]">TIM5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6e]">TIM6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6f]">TIM7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[63]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[66]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[65]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[64]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[d]">TagDetectWakeUp</a> from menu_reader.o(i.TagDetectWakeUp) referenced 2 times from menu.o(.data)
 <LI><a href="#[b]">TagEmulT2</a> from menu_tagemul.o(i.TagEmulT2) referenced 2 times from menu.o(.data)
 <LI><a href="#[8]">TagEmulT2GEO</a> from menu_tagemul.o(i.TagEmulT2GEO) referenced 2 times from menu.o(.data)
 <LI><a href="#[a]">TagEmulT2SMS</a> from menu_tagemul.o(i.TagEmulT2SMS) referenced 2 times from menu.o(.data)
 <LI><a href="#[9]">TagEmulT2URI</a> from menu_tagemul.o(i.TagEmulT2URI) referenced 2 times from menu.o(.data)
 <LI><a href="#[6]">TagEmulT4A</a> from menu_tagemul.o(i.TagEmulT4A) referenced 2 times from menu.o(.data)
 <LI><a href="#[4]">TagEmulT4AEMAIL</a> from menu_tagemul.o(i.TagEmulT4AEMAIL) referenced 2 times from menu.o(.data)
 <LI><a href="#[0]">TagEmulT4AGEO</a> from menu_tagemul.o(i.TagEmulT4AGEO) referenced 2 times from menu.o(.data)
 <LI><a href="#[3]">TagEmulT4ASMS</a> from menu_tagemul.o(i.TagEmulT4ASMS) referenced 2 times from menu.o(.data)
 <LI><a href="#[2]">TagEmulT4AURI</a> from menu_tagemul.o(i.TagEmulT4AURI) referenced 2 times from menu.o(.data)
 <LI><a href="#[5]">TagEmulT4AVCARD</a> from menu_tagemul.o(i.TagEmulT4AVCARD) referenced 2 times from menu.o(.data)
 <LI><a href="#[c]">TagHunting</a> from menu_reader.o(i.TagHunting) referenced 2 times from menu.o(.data)
 <LI><a href="#[e]">TagReading</a> from menu_reader.o(i.TagReading) referenced 2 times from menu.o(.data)
 <LI><a href="#[14]">TagWriteEMAIL</a> from menu_writer.o(i.TagWriteEMAIL) referenced 2 times from menu.o(.data)
 <LI><a href="#[11]">TagWriteGEO</a> from menu_writer.o(i.TagWriteGEO) referenced 2 times from menu.o(.data)
 <LI><a href="#[13]">TagWriteSMS</a> from menu_writer.o(i.TagWriteSMS) referenced 2 times from menu.o(.data)
 <LI><a href="#[10]">TagWriteText</a> from menu_writer.o(i.TagWriteText) referenced 2 times from menu.o(.data)
 <LI><a href="#[12]">TagWriteURI</a> from menu_writer.o(i.TagWriteURI) referenced 2 times from menu.o(.data)
 <LI><a href="#[15]">TagWriteVCARD</a> from menu_writer.o(i.TagWriteVCARD) referenced 2 times from menu.o(.data)
 <LI><a href="#[6c]">UART4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6d]">UART5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5d]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5e]">USART2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5f]">USART3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[f]">USBRemoteControl</a> from menu.o(i.USBRemoteControl) referenced 2 times from menu.o(.data)
 <LI><a href="#[62]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4b]">USB_HP_CAN1_TX_IRQHandler</a> from stm32f10x_it.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4c]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[33]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[38]">WWDG_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[76]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[89]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[88]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[7f]">handleCommand</a> from proprietary_p2p.o(i.handleCommand) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigClient)
 <LI><a href="#[85]">handleCommandFromWOD</a> from proprietary_p2p.o(i.handleCommandFromWOD) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigServer)
 <LI><a href="#[80]">handleData</a> from proprietary_p2p.o(i.handleData) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigClient)
 <LI><a href="#[86]">handleDataFromWOD</a> from proprietary_p2p.o(i.handleDataFromWOD) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigServer)
 <LI><a href="#[7e]">isCommunicationTokenRequested</a> from proprietary_p2p.o(i.isCommunicationTokenRequested) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigClient)
 <LI><a href="#[82]">isLastCmdAcknoledge</a> from proprietary_p2p.o(i.isLastCmdAcknoledge) referenced from proprietary_p2p.o(i.ProprietaryP2PConfigClient)
 <LI><a href="#[74]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[29a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[92]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[29c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[29d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[29e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[29f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSetKey
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2a1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendDATA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendCMD
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_AddAAR
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopDataCommand
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendBUF
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashNDEF
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadNDEF
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadNDEF
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_ReadNDEF
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_ReadNDEF
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadSMS
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadGeo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadEmail
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul14443A
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_TagSave
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleTagData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_CompleteStruture
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagPart2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SendReceiveAPDU
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteBytes_TagData
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_UpdateBinary
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SelectFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteNDEF
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteMessage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteAttribInfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadMessage
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_WriteNDEF
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareGeoMessage
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillGeoStruct
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareEmailMessage
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillEmailStruct
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFFromFlash
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextFrame
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientFillDAT
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientFillCMD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_Server
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_WriteRegister
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_ReceiveFile
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_ReleaseCommunicationToken
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetNACK
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetBuf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendBuffer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_UpdateBinary
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_AcFilter
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareURIMessage
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_Parse_WellKnowType
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareSMSMessage
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillSMSStruct
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunMultiTagHunting
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunInventoty16slots
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Run15693Anticollision
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MultiTagResPart2
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetHardwareVersion
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedCommand
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Dep
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Atr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Write_Step2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Read
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshTxDataInfo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshRxDataInfo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshScreen
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommandFromWOD
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_GetCommandId
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ConfigureTypeBPrime
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_WriteNDEF
</UL>

<P><STRONG><a name="[2a3]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopDataCommand
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2a5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_InitStructure
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCopyToRawBuffer
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteMessage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteAttribInfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadMessage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
</UL>

<P><STRONG><a name="[2a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[196]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_AddAAR
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareGeoMessage
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareEmailMessage
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareURIMessage
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareSMSMessage
</UL>

<P><STRONG><a name="[199]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillGeoStruct
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillEmailStruct
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseURI
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseMediaType
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseForumExternalType
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUriType
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillSMSStruct
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Atr
</UL>

<P><STRONG><a name="[fe]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagURI
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagSMS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagGEO
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagEMAIL
</UL>

<P><STRONG><a name="[206]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_GetCommandId
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2a8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[23a]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[25]"></a>COMPOSITE_Data_Setup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usb_prop.o(i.COMPOSITE_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMPOSITE_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>COMPOSITE_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMPOSITE_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>COMPOSITE_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMPOSITE_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>COMPOSITE_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(i.COMPOSITE_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COMPOSITE_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>COMPOSITE_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>COMPOSITE_NoData_Setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>COMPOSITE_Reset</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = COMPOSITE_Reset &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>COMPOSITE_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>COMPOSITE_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>COMPOSITE_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMPOSITE_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[277]"></a>CRC_CalcCRC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_CalcCRC))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_CRC
</UL>

<P><STRONG><a name="[276]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_crc.o(i.CRC_ResetDR))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_CRC
</UL>

<P><STRONG><a name="[25c]"></a>CTR_HP</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, usb_int.o(i.CTR_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTR_HP
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[78]"></a>CardEmul</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, menu_cardemul.o(i.CardEmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CardEmul &rArr; file_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_CRC
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_cardemul.o(i.CardEmul14443A)
</UL>
<P><STRONG><a name="[1a]"></a>CardEmul14443A</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, menu_cardemul.o(i.CardEmul14443A))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = CardEmul14443A &rArr; NDEF_AddAAR &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteNDEF
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_AddAAR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_CardEmulation
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplicationInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplicationClose
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>CheckForUserAction</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, proprietary_p2p.o(i.CheckForUserAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CheckForUserAction &rArr; refreshScreen &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPendingStreamToSend
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshScreen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigClient)
</UL>
<P><STRONG><a name="[23f]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[23e]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[9c]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[2c]"></a>Composite_Device_ClearFeature</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.Composite_Device_ClearFeature))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>Composite_Device_SetConfiguration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_prop.o(i.Composite_Device_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>Composite_Device_SetDeviceAddress</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.Composite_Device_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>ConfigManager_CardEmulation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib_configmanager.o(i.ConfigManager_CardEmulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ConfigManager_CardEmulation &rArr; PICCEmul_ManagePICCEmulation &rArr; PICCEmul_ReceiveCommand &rArr; PICCNFCT4_ReplyCommand &rArr; PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitPICCEmulation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul14443A
</UL>

<P><STRONG><a name="[b6]"></a>ConfigManager_HWInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lib_configmanager.o(i.ConfigManager_HWInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ConfigManager_HWInit &rArr; ConfigManager_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_IDN
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>ConfigManager_P2PP</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lib_configmanager.o(i.ConfigManager_P2PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = ConfigManager_P2PP &rArr; ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAppliTimeOut
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitPICCEmulation
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
</UL>

<P><STRONG><a name="[c3]"></a>ConfigManager_P2PPInitiator</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lib_configmanager.o(i.ConfigManager_P2PPInitiator))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ConfigManager_P2PPInitiator &rArr; PP2P_Server &rArr; PP2P_SendReceive &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_ServerInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_Server
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
</UL>

<P><STRONG><a name="[ca]"></a>ConfigManager_PP2PTarget</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lib_configmanager.o(i.ConfigManager_PP2PTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ConfigManager_PP2PTarget &rArr; PICCEmul_ManagePICCEmulation &rArr; PICCEmul_ReceiveCommand &rArr; PICCNFCT4_ReplyCommand &rArr; PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_TargetInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
</UL>

<P><STRONG><a name="[a9]"></a>ConfigManager_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_configmanager.o(i.ConfigManager_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PP2PTarget
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PPInitiator
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiatorCheckForUserAction
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserAction
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongCheckForUserAction
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[cc]"></a>ConfigManager_TagEmulation</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lib_configmanager.o(i.ConfigManager_TagEmulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = ConfigManager_TagEmulation &rArr; PICCEmul_ManagePICCEmulation &rArr; PICCEmul_ReceiveCommand &rArr; PICCNFCT4_ReplyCommand &rArr; PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAppliTimeOut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAppliTimeOut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitPICCEmulation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>

<P><STRONG><a name="[c2]"></a>ConfigManager_TagHunting</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, lib_configmanager.o(i.ConfigManager_TagHunting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Initialization
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_IsPresent
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Anticollision
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOPAZ_ID
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareTest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
</UL>

<P><STRONG><a name="[35]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>DisplayIcons</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, menu.o(i.DisplayIcons))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DisplayIcons &rArr; LCD_WriteBMP_FAT &rArr; LCD_WindowModeDisable &rArr; LCD_SetDisplayWindow &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[e2]"></a>DisplayMenu</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, menu.o(i.DisplayMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRotateOnOffConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelFunc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFunc
</UL>

<P><STRONG><a name="[e8]"></a>DownFunc</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, menu.o(i.DownFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DownFunc &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>EP1_IN_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>EP2_IN_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(i.EP2_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>EP2_OUT_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(i.EP2_OUT_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>EP3_IN_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP3_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EP3_IN_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>EP3_OUT_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP3_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2984<LI>Call Chain = EP3_OUT_Callback &rArr; HID_Data_Out &rArr; HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI4_IRQHandler &rArr; LCD_Rotate &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rotate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXTI9_5_IRQHandler &rArr; UpFunc &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRotateOnOffConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRotateOnOffConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_Reply_IRQ
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_RFEvent_IRQ
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Disable_95HF_IRQ
</UL>

<P><STRONG><a name="[16d]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRotateOnOffConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>

<P><STRONG><a name="[d4]"></a>FELICA_Initialization</STRONG> (Thumb, 18 bytes, Stack size 536 bytes, lib_iso18092pcd.o(i.FELICA_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[d5]"></a>FELICA_IsPresent</STRONG> (Thumb, 82 bytes, Stack size 536 bytes, lib_iso18092pcd.o(i.FELICA_IsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = FELICA_IsPresent &rArr; FELICA_REQC &rArr; PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_REQC
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[297]"></a>FLASH_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
</UL>

<P><STRONG><a name="[f6]"></a>FLASH_ErasePage</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastBank2Operation
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
</UL>

<P><STRONG><a name="[fb]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[fc]"></a>FLASH_GetBank2Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank2Status))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
</UL>

<P><STRONG><a name="[299]"></a>FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
</UL>

<P><STRONG><a name="[298]"></a>FLASH_PagesMask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, common.o(i.FLASH_PagesMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_PagesMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
</UL>

<P><STRONG><a name="[f9]"></a>FLASH_ProgramWord</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank2Operation
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
</UL>

<P><STRONG><a name="[296]"></a>FLASH_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
</UL>

<P><STRONG><a name="[f7]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastBank1Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastBank1Operation
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[f8]"></a>FLASH_WaitForLastBank2Operation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastBank2Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastBank2Operation
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank2Status
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[fa]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>

<P><STRONG><a name="[fd]"></a>FillTagEMAIL</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(i.FillTagEMAIL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FillTagEMAIL
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteEMAIL
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AEMAIL
</UL>

<P><STRONG><a name="[ff]"></a>FillTagGEO</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menu.o(i.FillTagGEO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FillTagGEO
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteGEO
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AGEO
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2GEO
</UL>

<P><STRONG><a name="[100]"></a>FillTagSMS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, menu.o(i.FillTagSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FillTagSMS
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteSMS
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4ASMS
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2SMS
</UL>

<P><STRONG><a name="[101]"></a>FillTagURI</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, menu.o(i.FillTagURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FillTagURI
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteURI
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AURI
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2URI
</UL>

<P><STRONG><a name="[12a]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
</UL>

<P><STRONG><a name="[127]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect_Config
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigSPI
</UL>

<P><STRONG><a name="[10d]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIRQOutState
</UL>

<P><STRONG><a name="[1f2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetInterfacePinState
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Listen
</UL>

<P><STRONG><a name="[173]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ChipSelect
</UL>

<P><STRONG><a name="[174]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigSPI
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ChipSelect
</UL>

<P><STRONG><a name="[128]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Close
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesWrite
</UL>

<P><STRONG><a name="[dd]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[25e]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[da]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[e9]"></a>HID_Data_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_hid.o(i.HID_Data_In))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_IN_Callback
</UL>

<P><STRONG><a name="[ea]"></a>HID_Data_Out</STRONG> (Thumb, 206 bytes, Stack size 600 bytes, usb_hid.o(i.HID_Data_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976<LI>Call Chain = HID_Data_Out &rArr; HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[77]"></a>HID_Report</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.HID_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_Report &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.COMPOSITE_Data_Setup)
</UL>
<P><STRONG><a name="[30]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[249]"></a>Hex2Char</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, menu.o(i.Hex2Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hex2Char
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
</UL>

<P><STRONG><a name="[125]"></a>IRQOut_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_interrupt.o(i.IRQOut_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IRQOut_Config &rArr; IRQOut_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
</UL>

<P><STRONG><a name="[d2]"></a>ISO14443A_Anticollision</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ISO14443A_Anticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforRATS
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDT
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[132]"></a>ISO14443A_ConfigFDT</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lib_iso14443apcd.o(i.ISO14443A_ConfigFDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SendReceiveAPDU
</UL>

<P><STRONG><a name="[133]"></a>ISO14443A_ConfigFDTforAnticollision</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lib_iso14443apcd.o(i.ISO14443A_ConfigFDTforAnticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443A_ConfigFDTforAnticollision &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
</UL>

<P><STRONG><a name="[130]"></a>ISO14443A_ConfigFDTforRATS</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lib_iso14443apcd.o(i.ISO14443A_ConfigFDTforRATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443A_ConfigFDTforRATS &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
</UL>

<P><STRONG><a name="[cf]"></a>ISO14443A_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib_iso14443apcd.o(i.ISO14443A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ISO14443A_Init &rArr; ISO14443A_ConfigFDTforAnticollision &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforAnticollision
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_InitStructure
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[d0]"></a>ISO14443A_IsPresent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_IsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443A_IsPresent &rArr; ISO14443A_REQA &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_REQA
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
</UL>

<P><STRONG><a name="[120]"></a>ISO14443A_MultiTagHunting</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_MultiTagHunting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = ISO14443A_MultiTagHunting &rArr; ISO14443A_MultiAnticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_InitStructure
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunMultiTagHunting
</UL>

<P><STRONG><a name="[118]"></a>ISO14443A_MultiTagPart2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_MultiTagPart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO14443A_MultiTagPart2 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MultiTagResPart2
</UL>

<P><STRONG><a name="[d7]"></a>ISO14443B_Anticollision</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443B_Anticollision &rArr; ISO14443B_AttriB &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_AttriB
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[13e]"></a>ISO14443B_AttriB</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lib_iso14443bpcd.o(i.ISO14443B_AttriB))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443B_AttriB &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsCRCOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Anticollision
</UL>

<P><STRONG><a name="[140]"></a>ISO14443B_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lib_iso14443bpcd.o(i.ISO14443B_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = ISO14443B_Init &rArr; ISO14443B_WriteAndCheckARConfigB &rArr; ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteAndCheckARConfigB
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_InitStructure
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_IsPresent
</UL>

<P><STRONG><a name="[d6]"></a>ISO14443B_IsPresent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_IsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ISO14443B_IsPresent &rArr; ISO14443B_Init &rArr; ISO14443B_WriteAndCheckARConfigB &rArr; ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_ReqB
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[143]"></a>ISO14443B_ReqB</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_ReqB))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ISO14443B_ReqB &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_CompleteStruture
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_IsPresent
</UL>

<P><STRONG><a name="[14b]"></a>ISO15693_GetSystemInfo</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_GetSystemInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ISO15693_GetSystemInfo &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetAddressOrNbSlotsFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_WriteNDEF
</UL>

<P><STRONG><a name="[d8]"></a>ISO15693_GetUID</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, lib_iso15693pcd.o(i.ISO15693_GetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = ISO15693_GetUID &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_CreateRequestFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[14c]"></a>ISO15693_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lib_iso15693pcd.o(i.ISO15693_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO15693_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
</UL>

<P><STRONG><a name="[157]"></a>ISO15693_ReadBytesTagData</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_ReadBytesTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ISO15693_ReadBytesTagData &rArr; ISO15693_ReadMultipleTagData &rArr; ISO15693_ReadMultipleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleTagData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleTagData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_ReadNDEF
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_WriteNDEF
</UL>

<P><STRONG><a name="[11c]"></a>ISO15693_RunAntiCollision</STRONG> (Thumb, 506 bytes, Stack size 1128 bytes, lib_iso15693pcd.o(i.ISO15693_RunAntiCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SplitInventoryResponse
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_StayQuiet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsATagInTheField
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_InventoryOneSlot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Run15693Anticollision
</UL>

<P><STRONG><a name="[11e]"></a>ISO15693_RunInventory16slots</STRONG> (Thumb, 188 bytes, Stack size 584 bytes, lib_iso15693pcd.o(i.ISO15693_RunInventory16slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = ISO15693_RunInventory16slots &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SplitInventoryResponse
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunInventoty16slots
</UL>

<P><STRONG><a name="[15e]"></a>ISO15693_SplitInventoryResponse</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_SplitInventoryResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ISO15693_SplitInventoryResponse &rArr; ISO15693_IsCorrectCRC16Residue &rArr; ISO15693_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsCorrectCRC16Residue
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[163]"></a>ISO15693_WriteBytes_TagData</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lib_iso15693pcd.o(i.ISO15693_WriteBytes_TagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteTagData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_TagSave
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_WriteNDEF
</UL>

<P><STRONG><a name="[166]"></a>ISO7816_ReadBinary</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lib_iso7816pcd.o(i.ISO7816_ReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ISO7816_ReadBinary &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SendReceiveAPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadBinary
</UL>

<P><STRONG><a name="[168]"></a>ISO7816_SelectFile</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lib_iso7816pcd.o(i.ISO7816_SelectFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ISO7816_SelectFile &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SendReceiveAPDU
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectNDEFfile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectCCfile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectApplication
</UL>

<P><STRONG><a name="[169]"></a>ISO7816_UpdateBinary</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lib_iso7816pcd.o(i.ISO7816_UpdateBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ISO7816_UpdateBinary &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SendReceiveAPDU
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_UpdateBinary
</UL>

<P><STRONG><a name="[1]"></a>IdleFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.IdleFunc))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[87]"></a>InitiatorCheckForUserAction</STRONG> (Thumb, 294 bytes, Stack size 264 bytes, proprietary_p2p.o(i.InitiatorCheckForUserAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = InitiatorCheckForUserAction &rArr; PP2P_SendDATA &rArr; PP2P_SendReceive &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendDATA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendCMD
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigServer)
</UL>
<P><STRONG><a name="[94]"></a>IntExtOnOffConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, menu.o(i.IntExtOnOffConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IntExtOnOffConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplicationClose
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[e7]"></a>IntRotateOnOffConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, menu.o(i.IntRotateOnOffConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IntRotateOnOffConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
</UL>

<P><STRONG><a name="[16f]"></a>Interrupts_Config</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, hw_config.o(i.Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>LCD_ChipSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_ChipSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_ChipSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>

<P><STRONG><a name="[e6]"></a>LCD_Clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_lcdspi_ili9341.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Clear &rArr; LCD_SetDisplayWindow &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Close
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
</UL>

<P><STRONG><a name="[179]"></a>LCD_ClearLine</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_lcdspi_ili9341.o(i.LCD_ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_ClearLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
</UL>

<P><STRONG><a name="[17b]"></a>LCD_CtrlLinesWrite</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_lcdspi_ili9341.o(i.LCD_CtrlLinesWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[17a]"></a>LCD_DisplayChar</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_lcdspi_ili9341.o(i.LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongRefreshScreen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
</UL>

<P><STRONG><a name="[af]"></a>LCD_DisplayStringLine</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, drv_lcdspi_ili9341.o(i.LCD_DisplayStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshTxDataInfo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshRxDataInfo
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiatorCheckForUserAction
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserAction
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshScreen
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommandFromWOD
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
</UL>

<P><STRONG><a name="[17c]"></a>LCD_DrawChar</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, drv_lcdspi_ili9341.o(i.LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[17e]"></a>LCD_DrawLine</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, drv_lcdspi_ili9341.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DrawLine &rArr; LCD_SetCursor_onwindows &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor_onwindows
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongRefreshScreen
</UL>

<P><STRONG><a name="[180]"></a>LCD_DrawRect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_lcdspi_ili9341.o(i.LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_DrawRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor_onwindows &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongRefreshScreen
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[ed]"></a>LCD_Rotate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_Rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Rotate &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongRefreshScreen
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>LCD_SetBackColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_SetBackColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetBackColor
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
</UL>

<P><STRONG><a name="[17d]"></a>LCD_SetCursor</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drv_lcdspi_ili9341.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[17f]"></a>LCD_SetCursor_onwindows</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, drv_lcdspi_ili9341.o(i.LCD_SetCursor_onwindows))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_SetCursor_onwindows &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[175]"></a>LCD_SetDisplayWindow</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_lcdspi_ili9341.o(i.LCD_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_SetDisplayWindow &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
</UL>

<P><STRONG><a name="[e5]"></a>LCD_SetTextColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetTextColor
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongRefreshScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
</UL>

<P><STRONG><a name="[184]"></a>LCD_WindowModeDisable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_WindowModeDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_WindowModeDisable &rArr; LCD_SetDisplayWindow &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[e1]"></a>LCD_WriteBMP_FAT</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, drv_lcdspi_ili9341.o(i.LCD_WriteBMP_FAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_WriteBMP_FAT &rArr; LCD_WindowModeDisable &rArr; LCD_SetDisplayWindow &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Close
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIcons
</UL>

<P><STRONG><a name="[185]"></a>LCD_WriteBMP_FAT_size</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, drv_lcdspi_ili9341.o(i.LCD_WriteBMP_FAT_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_WriteBMP_FAT_size &rArr; LCD_WindowModeDisable &rArr; LCD_SetDisplayWindow &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Close
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[181]"></a>LCD_WriteCommand</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WriteCommand &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rotate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor_onwindows
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[182]"></a>LCD_WriteData</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rotate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor_onwindows
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[177]"></a>LCD_WriteRAM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_WriteRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WriteRAM &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[178]"></a>LCD_WriteRAM_Close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_WriteRAM_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WriteRAM_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
</UL>

<P><STRONG><a name="[176]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WriteRAM_Prepare &rArr; LCD_WriteCommand &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[188]"></a>LCD_nCS_StartByte</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_lcdspi_ili9341.o(i.LCD_nCS_StartByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_nCS_StartByte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>

<P><STRONG><a name="[e3]"></a>LED_AllOff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_led.o(i.LED_AllOff))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
</UL>

<P><STRONG><a name="[227]"></a>LED_Off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_led.o(i.LED_Off))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPP2PContext
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommand
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongInitiator_SendRequestReceiveResponse
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AVCARD
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AURI
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4ASMS
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AGEO
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AEMAIL
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4A
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2URI
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2SMS
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2GEO
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2
</UL>

<P><STRONG><a name="[226]"></a>LED_On</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_led.o(i.LED_On))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommand
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigClient
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongInitiator_SendRequestReceiveResponse
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AVCARD
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AURI
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4ASMS
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AGEO
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AEMAIL
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4A
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2URI
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2SMS
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2GEO
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2
</UL>

<P><STRONG><a name="[24a]"></a>LED_Troggle</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, drv_led.o(i.LED_Troggle))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
</UL>

<P><STRONG><a name="[189]"></a>M1_ACK</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib_nfcm1picc.o(i.M1_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = M1_ACK &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Write_Step2
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Write_Step1
</UL>

<P><STRONG><a name="[18b]"></a>M1_NACK</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib_nfcm1picc.o(i.M1_NACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = M1_NACK &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Write_Step1
</UL>

<P><STRONG><a name="[31]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[23c]"></a>Menu_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu.o(i.Menu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[18c]"></a>MifareAuthentication</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mcc.o(i.MifareAuthentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = MifareAuthentication &rArr; mccAuthenticateStep2 &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareTest
</UL>

<P><STRONG><a name="[18f]"></a>MifareHalt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mcc.o(i.MifareHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = MifareHalt &rArr; mccSendRequest &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareTest
</UL>

<P><STRONG><a name="[192]"></a>MifareRead</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, mcc.o(i.MifareRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MifareRead &rArr; mccSendRequest &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareTest
</UL>

<P><STRONG><a name="[d3]"></a>MifareTest</STRONG> (Thumb, 110 bytes, Stack size 296 bytes, mcc.o(i.MifareTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = MifareTest &rArr; MifareWrite &rArr; mccSendRequest &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccInitialize
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareWrite
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareRead
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareHalt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareAuthentication
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[194]"></a>MifareWrite</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mcc.o(i.MifareWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MifareWrite &rArr; mccSendRequest &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareTest
</UL>

<P><STRONG><a name="[ac]"></a>NDEF_AddAAR</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lib_ndef_aar.o(i.NDEF_AddAAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = NDEF_AddAAR &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul14443A
</UL>

<P><STRONG><a name="[19c]"></a>NDEF_IdentifyNDEF</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, lib_ndef.o(i.NDEF_IdentifyNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NDEF_IdentifyNDEF &rArr; NDEF_ParseRecordHeader &rArr; NDEF_ParseWellKnownType &rArr; NDEF_ParseSP &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IsNDEFPresent
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1a6]"></a>NDEF_PrepareEmailMessage</STRONG> (Thumb, 666 bytes, Stack size 40 bytes, lib_ndef_email.o(i.NDEF_PrepareEmailMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NDEF_PrepareEmailMessage &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteEmail
</UL>

<P><STRONG><a name="[1a7]"></a>NDEF_PrepareGeoMessage</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, lib_ndef_geo.o(i.NDEF_PrepareGeoMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NDEF_PrepareGeoMessage &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteGeo
</UL>

<P><STRONG><a name="[1a8]"></a>NDEF_PrepareSMSMessage</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, lib_ndef_sms.o(i.NDEF_PrepareSMSMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NDEF_PrepareSMSMessage &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteSMS
</UL>

<P><STRONG><a name="[1a9]"></a>NDEF_PrepareURIMessage</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, lib_ndef_uri.o(i.NDEF_PrepareURIMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NDEF_PrepareURIMessage &rArr; getUriType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUriType
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
</UL>

<P><STRONG><a name="[1ab]"></a>NDEF_ReadEmail</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lib_ndef_email.o(i.NDEF_ReadEmail))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NDEF_ReadEmail &rArr; NDEF_ReadURI_Email &rArr; NDEF_FillEmailStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI_Email
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1ad]"></a>NDEF_ReadGeo</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lib_ndef_geo.o(i.NDEF_ReadGeo))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = NDEF_ReadGeo &rArr; NDEF_ReadURI_Geo &rArr; NDEF_FillGeoStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI_Geo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1af]"></a>NDEF_ReadSMS</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lib_ndef_sms.o(i.NDEF_ReadSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = NDEF_ReadSMS &rArr; NDEF_ReadURI_SMS &rArr; NDEF_FillSMSStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI_SMS
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1b1]"></a>NDEF_ReadURI</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lib_ndef_uri.o(i.NDEF_ReadURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NDEF_ReadURI &rArr; NDEF_Parse_WellKnowType &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_Parse_WellKnowType
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1b2]"></a>NDEF_WriteEmail</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib_ndef_email.o(i.NDEF_WriteEmail))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = NDEF_WriteEmail &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareEmailMessage
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>

<P><STRONG><a name="[1b3]"></a>NDEF_WriteGeo</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib_ndef_geo.o(i.NDEF_WriteGeo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = NDEF_WriteGeo &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareGeoMessage
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>

<P><STRONG><a name="[aa]"></a>NDEF_WriteNDEF</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_WriteNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul14443A
</UL>

<P><STRONG><a name="[1b4]"></a>NDEF_WriteSMS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib_ndef_sms.o(i.NDEF_WriteSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = NDEF_WriteSMS &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareSMSMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>

<P><STRONG><a name="[1b5]"></a>NDEF_WriteURI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib_ndef_uri.o(i.NDEF_WriteURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareURIMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>

<P><STRONG><a name="[2f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_prop.o(.data)
<LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[171]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupts_Config
</UL>

<P><STRONG><a name="[170]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupts_Config
</UL>

<P><STRONG><a name="[27c]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[278]"></a>P2P_SendACK</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_proprietaryp2p.o(i.P2P_SendACK))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommandFromWOD
</UL>

<P><STRONG><a name="[1bd]"></a>PCDNFCT1_ReadNDEF</STRONG> (Thumb, 188 bytes, Stack size 144 bytes, lib_nfctype1pcd.o(i.PCDNFCT1_ReadNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = PCDNFCT1_ReadNDEF &rArr; PCDNFCT1_ReadAll &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_ReadAll
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1bf]"></a>PCDNFCT1_WriteNDEF</STRONG> (Thumb, 234 bytes, Stack size 144 bytes, lib_nfctype1pcd.o(i.PCDNFCT1_WriteNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = PCDNFCT1_WriteNDEF &rArr; PCDNFCT1_WriteErase &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_WriteErase
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_ReadAll
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[1c1]"></a>PCDNFCT2_ReadNDEF</STRONG> (Thumb, 384 bytes, Stack size 560 bytes, lib_nfctype2pcd.o(i.PCDNFCT2_ReadNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = PCDNFCT2_ReadNDEF &rArr; PCDNFCT2_SectorSelect &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_SectorSelect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1c4]"></a>PCDNFCT2_WriteNDEF</STRONG> (Thumb, 518 bytes, Stack size 568 bytes, lib_nfctype2pcd.o(i.PCDNFCT2_WriteNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = PCDNFCT2_WriteNDEF &rArr; PCDNFCT2_Write &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_Write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_SectorSelect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[1c7]"></a>PCDNFCT3_ReadNDEF</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, lib_nfctype3pcd.o(i.PCDNFCT3_ReadNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = PCDNFCT3_ReadNDEF &rArr; PCDNFCT3_ReadMessage &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadMessage
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadAttribInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1ca]"></a>PCDNFCT3_WriteNDEF</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, lib_nfctype3pcd.o(i.PCDNFCT3_WriteNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = PCDNFCT3_WriteNDEF &rArr; PCDNFCT3_WriteMessage &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteMessage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteAttribInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_UpdateCheckSum
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadAttribInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[1cd]"></a>PCDNFCT4_ReadNDEF</STRONG> (Thumb, 340 bytes, Stack size 296 bytes, lib_nfctype4pcd.o(i.PCDNFCT4_ReadNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = PCDNFCT4_ReadNDEF &rArr; PCDNFCT4_SelectNDEFfile &rArr; ISO7816_SelectFile &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectNDEFfile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectCCfile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectApplication
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadBinary
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1d2]"></a>PCDNFCT4_WriteNDEF</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, lib_nfctype4pcd.o(i.PCDNFCT4_WriteNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = PCDNFCT4_WriteNDEF &rArr; PCDNFCT4_UpdateBinary &rArr; ISO7816_UpdateBinary &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_UpdateBinary
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectNDEFfile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectCCfile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_SelectApplication
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[1d3]"></a>PCDNFCT5_ExtendedGetSystemInfo</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lib_nfctype5pcd.o(i.PCDNFCT5_ExtendedGetSystemInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = PCDNFCT5_ExtendedGetSystemInfo &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_WriteNDEF
</UL>

<P><STRONG><a name="[1d4]"></a>PCDNFCT5_ReadNDEF</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, lib_nfctype5pcd.o(i.PCDNFCT5_ReadNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = PCDNFCT5_ReadNDEF &rArr; ISO15693_ReadBytesTagData &rArr; ISO15693_ReadMultipleTagData &rArr; ISO15693_ReadMultipleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadBytesTagData
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
</UL>

<P><STRONG><a name="[1d5]"></a>PCDNFCT5_WriteNDEF</STRONG> (Thumb, 500 bytes, Stack size 216 bytes, lib_nfctype5pcd.o(i.PCDNFCT5_WriteNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteBytes_TagData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadBytesTagData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetSystemInfo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_ExtendedGetSystemInfo
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[f5]"></a>PCD_CheckSendReceive</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib_pcd.o(i.PCD_CheckSendReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_REQC
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOPAZ_ID
</UL>

<P><STRONG><a name="[110]"></a>PCD_Echo</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_pcd.o(i.PCD_Echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[c6]"></a>PCD_FieldOff</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lib_pcd.o(i.PCD_FieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = PCD_FieldOff &rArr; PCD_ProtocolSelect &rArr; PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PPInitiator
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagHunting
</UL>

<P><STRONG><a name="[111]"></a>PCD_Idle</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lib_pcd.o(i.PCD_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[139]"></a>PCD_IsCRCOk</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, lib_pcd.o(i.PCD_IsCRCOk))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_AttriB
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
</UL>

<P><STRONG><a name="[137]"></a>PCD_IsReaderResultCodeOk</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, lib_pcd.o(i.PCD_IsReaderResultCodeOk))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleBlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleBlock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadSingleBlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadMultipleBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetSystemInfo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_ExtendedGetSystemInfo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
</UL>

<P><STRONG><a name="[11a]"></a>PCD_PORsequence</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lib_pcd.o(i.PCD_PORsequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Reset95HF
</UL>

<P><STRONG><a name="[f0]"></a>PCD_ProtocolSelect</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lib_pcd.o(i.PCD_ProtocolSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PCD_ProtocolSelect &rArr; PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnAvailableProtocol
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Anticollision
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforRATS
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforAnticollision
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDT
</UL>

<P><STRONG><a name="[13d]"></a>PCD_ReadRegister</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lib_pcd.o(i.PCD_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PCD_ReadRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443BReadARConfigB
</UL>

<P><STRONG><a name="[160]"></a>PCD_SendEOF</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_pcd.o(i.PCD_SendEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_SendEOF &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
</UL>

<P><STRONG><a name="[12c]"></a>PCD_SendRecv</STRONG> (Thumb, 98 bytes, Stack size 280 bytes, lib_pcd.o(i.PCD_SendRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendBUF
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_TagSave
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_StayQuiet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleBlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleBlock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadSingleBlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadMultipleBlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_ReqB
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_AttriB
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_REQA
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_HLTA
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SendReceiveAPDU
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetSystemInfo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_ExtendedGetSystemInfo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteMessage
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteAttribInfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadMessage
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadAttribInfo
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_Write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_SectorSelect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_Read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_WriteErase
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_ReadAll
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendReceive
</UL>

<P><STRONG><a name="[1d9]"></a>PCD_TagDetectCalibration</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, lib_pcd.o(i.PCD_TagDetectCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PCD_TagDetectCalibration &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
</UL>

<P><STRONG><a name="[1da]"></a>PCD_WaitforTagDetection</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lib_pcd.o(i.PCD_WaitforTagDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PCD_WaitforTagDetection &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDetectWakeUp
</UL>

<P><STRONG><a name="[f1]"></a>PCD_WriteRegister</STRONG> (Thumb, 62 bytes, Stack size 288 bytes, lib_pcd.o(i.PCD_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteARConfigB
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443BReadARConfigB
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforRATS
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforAnticollision
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDT
</UL>

<P><STRONG><a name="[1db]"></a>PICC14A_PPS</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lib_iso14443apicc.o(i.PICC14A_PPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = PICC14A_PPS &rArr; PICC_ProtocolSelect &rArr; PICC_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[1dd]"></a>PICC14A_RATS</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lib_iso14443apicc.o(i.PICC14A_RATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICC14A_RATS &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[1de]"></a>PICC7816_ACK</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lib_iso7816picc.o(i.PICC7816_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PICC7816_ACK &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[1df]"></a>PICC7816_Deselect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lib_iso7816picc.o(i.PICC7816_Deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PICC7816_Deselect &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[1e0]"></a>PICC7816_SendAStatusCode</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lib_iso7816picc.o(i.PICC7816_SendAStatusCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICC7816_SendAStatusCode &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_ReceiveFile
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_UpdateBinary
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_SelectNDEFfile
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_SelectCCfile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_SelectApplication
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReadBinary
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Select
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[1e1]"></a>PICC7816_SendBuffer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lib_iso7816picc.o(i.PICC7816_SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_ReceiveFile
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_UpdateBinary
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReadBinary
</UL>

<P><STRONG><a name="[b5]"></a>PICCEmul_DisablePICCEmulation</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lib_piccemulator.o(i.PICCEmul_DisablePICCEmulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = PICCEmul_DisablePICCEmulation &rArr; PICC_ProtocolSelect &rArr; PICC_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PollData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Enable_Interrupt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Echo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Disable_Interrupt
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_AcFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PP2PTarget
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_CardEmulation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagEmulation
</UL>

<P><STRONG><a name="[b3]"></a>PICCEmul_InitPICCEmulation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lib_piccemulator.o(i.PICCEmul_InitPICCEmulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PICCEmul_InitPICCEmulation &rArr; PICC_Enable_Interrupt &rArr; delay_ms &rArr; TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Enable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_CardEmulation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagEmulation
</UL>

<P><STRONG><a name="[b4]"></a>PICCEmul_ManagePICCEmulation</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lib_piccemulator.o(i.PICCEmul_ManagePICCEmulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PICCEmul_ManagePICCEmulation &rArr; PICCEmul_ReceiveCommand &rArr; PICCNFCT4_ReplyCommand &rArr; PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ReceiveCommand
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_RFField_CutOff
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitializeProtocol
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_CheckForPCD
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PP2PTarget
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_CardEmulation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagEmulation
</UL>

<P><STRONG><a name="[1f9]"></a>PICCNFCDEP_Atr</STRONG> (Thumb, 474 bytes, Stack size 72 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_Atr))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = PICCNFCDEP_Atr &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_LLCPPaxCallBack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReplyCommand
</UL>

<P><STRONG><a name="[1fc]"></a>PICCNFCDEP_CallBack</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PICCNFCDEP_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Dep
</UL>

<P><STRONG><a name="[1fb]"></a>PICCNFCDEP_Dep</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_Dep))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PICCNFCDEP_Dep &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_CallBack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReplyCommand
</UL>

<P><STRONG><a name="[1fd]"></a>PICCNFCDEP_Dsl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_Dsl))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICCNFCDEP_Dsl &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReplyCommand
</UL>

<P><STRONG><a name="[1ec]"></a>PICCNFCDEP_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PICCNFCDEP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init
</UL>

<P><STRONG><a name="[1fa]"></a>PICCNFCDEP_LLCPPaxCallBack</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_LLCPPaxCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PICCNFCDEP_LLCPPaxCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Atr
</UL>

<P><STRONG><a name="[1fe]"></a>PICCNFCDEP_Psl</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_Psl))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = PICCNFCDEP_Psl &rArr; PICC_ProtocolSelect &rArr; PICC_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReplyCommand
</UL>

<P><STRONG><a name="[1f8]"></a>PICCNFCDEP_ReplyCommand</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_ReplyCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = PICCNFCDEP_ReplyCommand &rArr; PICCNFCDEP_Atr &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Rls
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReqC
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Psl
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Dsl
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Dep
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Atr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ReceiveCommand
</UL>

<P><STRONG><a name="[1ff]"></a>PICCNFCDEP_ReqC</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_ReqC))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICCNFCDEP_ReqC &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReplyCommand
</UL>

<P><STRONG><a name="[200]"></a>PICCNFCDEP_Rls</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lib_nfcdeptarget.o(i.PICCNFCDEP_Rls))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICCNFCDEP_Rls &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReplyCommand
</UL>

<P><STRONG><a name="[201]"></a>PICCNFCM1_ATQA</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib_nfcm1picc.o(i.PICCNFCM1_ATQA))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PICCNFCM1_ATQA &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_ReplyCommand
</UL>

<P><STRONG><a name="[202]"></a>PICCNFCM1_Read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lib_nfcm1picc.o(i.PICCNFCM1_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PICCNFCM1_Read &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_ReplyCommand
</UL>

<P><STRONG><a name="[1f6]"></a>PICCNFCM1_ReplyCommand</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lib_nfcm1picc.o(i.PICCNFCM1_ReplyCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PICCNFCM1_ReplyCommand &rArr; PICCNFCM1_Write_Step2 &rArr; M1_ACK &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Write_Step2
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Write_Step1
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Read
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_ATQA
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ReceiveCommand
</UL>

<P><STRONG><a name="[204]"></a>PICCNFCM1_Write_Step1</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib_nfcm1picc.o(i.PICCNFCM1_Write_Step1))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICCNFCM1_Write_Step1 &rArr; M1_NACK &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_NACK
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_ReplyCommand
</UL>

<P><STRONG><a name="[203]"></a>PICCNFCM1_Write_Step2</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lib_nfcm1picc.o(i.PICCNFCM1_Write_Step2))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICCNFCM1_Write_Step2 &rArr; M1_ACK &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_ACK
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_ReplyCommand
</UL>

<P><STRONG><a name="[1ea]"></a>PICCNFCT2_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_nfctype2picc.o(i.PICCNFCT2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init
</UL>

<P><STRONG><a name="[1f5]"></a>PICCNFCT4_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib_nfctype4picc.o(i.PICCNFCT4_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_RFField_CutOff
</UL>

<P><STRONG><a name="[1eb]"></a>PICCNFCT4_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib_nfctype4picc.o(i.PICCNFCT4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PICCNFCT4_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init
</UL>

<P><STRONG><a name="[207]"></a>PICCNFCT4_ReadBinary</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lib_nfctype4picc.o(i.PICCNFCT4_ReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = PICCNFCT4_ReadBinary &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_IsReadWriteParametersOk
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[1f7]"></a>PICCNFCT4_ReplyCommand</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, lib_nfctype4picc.o(i.PICCNFCT4_ReplyCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = PICCNFCT4_ReplyCommand &rArr; PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_OperationFeedback
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_ReleaseCommunicationToken
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetSYM
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetPreemptionToken
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetNACK
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetCMD
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetBuf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetACK
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_Deselect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_ACK
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC14A_RATS
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC14A_PPS
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_UpdateBinary
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReadBinary
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Select
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_AcFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ReceiveCommand
</UL>

<P><STRONG><a name="[214]"></a>PICCNFCT4_SelectApplication</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib_nfctype4picc.o(i.PICCNFCT4_SelectApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PICCNFCT4_SelectApplication &rArr; PICC7816_SendAStatusCode &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Select
</UL>

<P><STRONG><a name="[215]"></a>PICCNFCT4_SelectCCfile</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib_nfctype4picc.o(i.PICCNFCT4_SelectCCfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PICCNFCT4_SelectCCfile &rArr; PICC7816_SendAStatusCode &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Select
</UL>

<P><STRONG><a name="[216]"></a>PICCNFCT4_SelectNDEFfile</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib_nfctype4picc.o(i.PICCNFCT4_SelectNDEFfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PICCNFCT4_SelectNDEFfile &rArr; PICC7816_SendAStatusCode &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Select
</UL>

<P><STRONG><a name="[212]"></a>PICCNFCT4_UpdateBinary</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, lib_nfctype4picc.o(i.PICCNFCT4_UpdateBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_ReceiveFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_IsReadWriteParametersOk
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[1e8]"></a>PICC_AcFilter</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lib_picc.o(i.PICC_AcFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PICC_AcFilter &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsResultCodeOk
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_RFField_CutOff
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init14443APicc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>

<P><STRONG><a name="[1e5]"></a>PICC_Disable_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lib_picc.o(i.PICC_Disable_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PICC_Disable_Interrupt &rArr; drv95HF_DisableInterrupt &rArr; drvInt_Disable_95HF_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>

<P><STRONG><a name="[1e6]"></a>PICC_Echo</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lib_picc.o(i.PICC_Echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PICC_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Listen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>

<P><STRONG><a name="[1e7]"></a>PICC_Enable_Interrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib_picc.o(i.PICC_Enable_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PICC_Enable_Interrupt &rArr; delay_ms &rArr; TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitPICCEmulation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>

<P><STRONG><a name="[21b]"></a>PICC_GetBackscatteringLoad</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lib_picc.o(i.PICC_GetBackscatteringLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICC_GetBackscatteringLoad &rArr; PICC_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_WriteRegister
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_SetBackscatteringLoad
</UL>

<P><STRONG><a name="[219]"></a>PICC_IsResultCodeOk</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, lib_picc.o(i.PICC_IsResultCodeOk))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ReadRegister
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Listen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_AcFilter
</UL>

<P><STRONG><a name="[1f1]"></a>PICC_Listen</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lib_picc.o(i.PICC_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PICC_Listen &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Listen
</UL>

<P><STRONG><a name="[1f0]"></a>PICC_PORsequence</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib_picc.o(i.PICC_PORsequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PICC_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Listen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
</UL>

<P><STRONG><a name="[1e4]"></a>PICC_PollData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib_picc.o(i.PICC_PollData))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = PICC_PollData &rArr; drv95HF_PoolingReading &rArr; drv95HF_ReceiveSPIResponse &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ReceiveCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
</UL>

<P><STRONG><a name="[1dc]"></a>PICC_ProtocolSelect</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lib_picc.o(i.PICC_ProtocolSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PICC_ProtocolSelect &rArr; PICC_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsResultCodeOk
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnAvailableProtocol
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PORsequence
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Echo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_RFField_CutOff
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init14443APicc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC14A_PPS
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_DisablePICCEmulation
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Psl
</UL>

<P><STRONG><a name="[21d]"></a>PICC_ReadRegister</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lib_picc.o(i.PICC_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PICC_ReadRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_GetBackscatteringLoad
</UL>

<P><STRONG><a name="[18a]"></a>PICC_Send</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lib_picc.o(i.PICC_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsResultCodeOk
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_SelectApplication
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_OperationFeedback
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetSYM
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetNACK
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetBuf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetACK
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_Deselect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_ACK
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC14A_RATS
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC14A_PPS
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Rls
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReqC
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Psl
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Dsl
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Dep
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Atr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Read
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_ATQA
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_NACK
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_ACK
</UL>

<P><STRONG><a name="[1ee]"></a>PICC_SetBackscatteringLoad</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lib_picc.o(i.PICC_SetBackscatteringLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = PICC_SetBackscatteringLoad &rArr; PICC_GetBackscatteringLoad &rArr; PICC_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_WriteRegister
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_GetBackscatteringLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init14443APicc
</UL>

<P><STRONG><a name="[21c]"></a>PICC_WriteRegister</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lib_picc.o(i.PICC_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PICC_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_GetBackscatteringLoad
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_SetBackscatteringLoad
</UL>

<P><STRONG><a name="[de]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[210]"></a>PP2P_GetACK</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.PP2P_GetACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PP2P_GetACK &rArr; PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextFrame
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[20c]"></a>PP2P_GetBuf</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.PP2P_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PP2P_GetBuf &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[20a]"></a>PP2P_GetCMD</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lib_proprietaryp2p.o(i.PP2P_GetCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PP2P_GetCMD &rArr; PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientFillCMD
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[20b]"></a>PP2P_GetData</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lib_proprietaryp2p.o(i.PP2P_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PP2P_GetData &rArr; PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clientFillDAT
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[211]"></a>PP2P_GetNACK</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lib_proprietaryp2p.o(i.PP2P_GetNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PP2P_GetNACK &rArr; PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[20d]"></a>PP2P_GetPreemptionToken</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lib_proprietaryp2p.o(i.PP2P_GetPreemptionToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PP2P_GetPreemptionToken &rArr; PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[20e]"></a>PP2P_GetSYM</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.PP2P_GetSYM))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PP2P_GetSYM &rArr; PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextFrame
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[20f]"></a>PP2P_ReleaseCommunicationToken</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lib_proprietaryp2p.o(i.PP2P_ReleaseCommunicationToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PP2P_ReleaseCommunicationToken &rArr; PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2PT_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[223]"></a>PP2P_SendBUF</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.PP2P_SendBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = PP2P_SendBUF &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongInitiator_SendRequestReceiveResponse
</UL>

<P><STRONG><a name="[16b]"></a>PP2P_SendCMD</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.PP2P_SendCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = PP2P_SendCMD &rArr; PP2P_SendReceive &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiatorCheckForUserAction
</UL>

<P><STRONG><a name="[16c]"></a>PP2P_SendDATA</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.PP2P_SendDATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = PP2P_SendDATA &rArr; PP2P_SendReceive &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiatorCheckForUserAction
</UL>

<P><STRONG><a name="[c5]"></a>PP2P_Server</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, lib_proprietaryp2p.o(i.PP2P_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = PP2P_Server &rArr; PP2P_SendReceive &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PPInitiator
</UL>

<P><STRONG><a name="[c4]"></a>PP2P_ServerInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_proprietaryp2p.o(i.PP2P_ServerInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PPInitiator
</UL>

<P><STRONG><a name="[cb]"></a>PP2P_TargetInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_proprietaryp2p.o(i.PP2P_TargetInit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PP2PTarget
</UL>

<P><STRONG><a name="[36]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PongCheckForUserAction</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pongexample.o(i.PongCheckForUserAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PongCheckForUserAction &rArr; PongRefreshScreen &rArr; LCD_DrawRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor_onwindows &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongRefreshScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pongexample.o(i.PongConfigClient)
</UL>
<P><STRONG><a name="[16]"></a>PongConfigClient</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, pongexample.o(i.PongConfigClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = PongConfigClient &rArr; ConfigManager_CardEmulation &rArr; PICCEmul_ManagePICCEmulation &rArr; PICCEmul_ReceiveCommand &rArr; PICCNFCT4_ReplyCommand &rArr; PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rotate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_CardEmulation
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>PongConfigServer</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, pongexample.o(i.PongConfigServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = PongConfigServer &rArr; ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rotate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongRefreshScreen
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongInitiator_SendRequestReceiveResponse
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[16a]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[a1]"></a>PowerOn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_init
</UL>

<P><STRONG><a name="[18]"></a>ProprietaryP2PConfigClient</STRONG> (Thumb, 254 bytes, Stack size 96 bytes, proprietary_p2p.o(i.ProprietaryP2PConfigClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = ProprietaryP2PConfigClient &rArr; NDEF_AddAAR &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteNDEF
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_AddAAR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PP2PTarget
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPP2PContext
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>ProprietaryP2PConfigServer</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, proprietary_p2p.o(i.ProprietaryP2PConfigServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = ProprietaryP2PConfigServer &rArr; ConfigManager_P2PP &rArr; ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PPInitiator
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPP2PContext
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[23d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[239]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RCC_Config
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigSPI
</UL>

<P><STRONG><a name="[230]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[129]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect_Config
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigSPI
</UL>

<P><STRONG><a name="[22f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[25a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[209]"></a>RFT_OperationFeedback</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, lib_cardemul.o(i.RFT_OperationFeedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = RFT_OperationFeedback &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[218]"></a>RFT_ReceiveFile</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, lib_cardemul.o(i.RFT_ReceiveFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_UpdateBinary
</UL>

<P><STRONG><a name="[217]"></a>RFT_SelectApplication</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib_cardemul.o(i.RFT_SelectApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = RFT_SelectApplication &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Select
</UL>

<P><STRONG><a name="[195]"></a>ReadData</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, lib_95hf_wrapper.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_AddAAR
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IsNDEFPresent
</UL>

<P><STRONG><a name="[22c]"></a>ReadKey</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, menu.o(i.ReadKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDebounce
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[7]"></a>ReturnFunc</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, menu.o(i.ReturnFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReturnFunc &rArr; ShowMenuIcons &rArr; SelFunc &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[275]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
</UL>

<P><STRONG><a name="[183]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_DataSizeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nCS_StartByte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor_onwindows
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[22e]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[187]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>

<P><STRONG><a name="[233]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>

<P><STRONG><a name="[186]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>

<P><STRONG><a name="[274]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
</UL>

<P><STRONG><a name="[231]"></a>SPI_SendReceiveBuffer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_spi.o(i.SPI_SendReceiveBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
</UL>

<P><STRONG><a name="[232]"></a>SPI_SendReceiveByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_spi.o(i.SPI_SendReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveBuffer
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPIResetByte
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>

<P><STRONG><a name="[273]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
</UL>

<P><STRONG><a name="[34]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[234]"></a>SelFunc</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, menu.o(i.SelFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SelFunc &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[121]"></a>SendSPINSSPulse</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_interrupt.o(i.SendSPINSSPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendSPINSSPulse &rArr; delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[96]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[a0]"></a>SetDeviceAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[99]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[9a]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[9f]"></a>SetEPRxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[9d]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[9b]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[9e]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[98]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[97]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[237]"></a>Set_System</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_config.o(i.Set_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_System &rArr; USB_Disconnect_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[22d]"></a>ShowMenuIcons</STRONG> (Thumb, 766 bytes, Stack size 16 bytes, menu.o(i.ShowMenuIcons))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ShowMenuIcons &rArr; SelFunc &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP_FAT_size
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDebounce
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelFunc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFunc
</UL>

<P><STRONG><a name="[1b9]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[7a]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[95]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Report
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_GetStringDescriptor
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_GetDeviceDescriptor
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_GetConfigDescriptor
</UL>

<P><STRONG><a name="[7b]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[79]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[1b7]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1b8]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1bb]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1ba]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[c1]"></a>StartAppliTimeOut</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_interrupt.o(i.StartAppliTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartAppliTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagEmulation
</UL>

<P><STRONG><a name="[242]"></a>StartTimeOut</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_interrupt.o(i.StartTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>

<P><STRONG><a name="[cd]"></a>StopAppliTimeOut</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_interrupt.o(i.StopAppliTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopAppliTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagEmulation
</UL>

<P><STRONG><a name="[243]"></a>StopTimeOut</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_interrupt.o(i.StopTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>

<P><STRONG><a name="[37]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_interrupt.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_interrupt.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[244]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[241]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAppliTimeOut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAppliTimeOut
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimeOut
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimeOut
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>

<P><STRONG><a name="[250]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>

<P><STRONG><a name="[240]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAppliTimeOut
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimeOut
</UL>

<P><STRONG><a name="[24e]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>

<P><STRONG><a name="[24f]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_UpdateRequestConfig))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>

<P><STRONG><a name="[d1]"></a>TOPAZ_ID</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.TOPAZ_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = TOPAZ_ID &rArr; PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[d]"></a>TagDetectWakeUp</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, menu_reader.o(i.TagDetectWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = TagDetectWakeUp &rArr; PCD_TagDetectCalibration &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WaitforTagDetection
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TagDetectCalibration
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[246]"></a>TagEmul</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteNDEF
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashNDEF
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manageFlashNDEF
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteSMS
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteGeo
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteEmail
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagEmulation
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AVCARD
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AURI
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4ASMS
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AGEO
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4AEMAIL
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT4A
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2URI
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2SMS
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2GEO
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmulT2
</UL>

<P><STRONG><a name="[b]"></a>TagEmulT2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT2 &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>TagEmulT2GEO</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT2GEO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT2GEO &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagGEO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>TagEmulT2SMS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT2SMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT2SMS &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagSMS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>TagEmulT2URI</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT2URI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT2URI &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagURI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>TagEmulT4A</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT4A))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT4A &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>TagEmulT4AEMAIL</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT4AEMAIL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT4AEMAIL &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagEMAIL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>TagEmulT4AGEO</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT4AGEO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT4AGEO &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagGEO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>TagEmulT4ASMS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT4ASMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT4ASMS &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagSMS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>TagEmulT4AURI</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT4AURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT4AURI &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagURI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>TagEmulT4AVCARD</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu_tagemul.o(i.TagEmulT4AVCARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = TagEmulT4AVCARD &rArr; TagEmul &rArr; NDEF_WriteNDEF &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>TagHunting</STRONG> (Thumb, 682 bytes, Stack size 104 bytes, menu_reader.o(i.TagHunting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = TagHunting &rArr; ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRotateOnOffConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Char
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>TagReading</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, menu_reader.o(i.TagReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = TagReading &rArr; readNDEFfromTAG &rArr; PCDNFCT2_ReadNDEF &rArr; PCDNFCT2_SectorSelect &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Troggle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>TagWriteEMAIL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_writer.o(i.TagWriteEMAIL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = TagWriteEMAIL &rArr; TagWriting &rArr; NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagEMAIL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>TagWriteGEO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_writer.o(i.TagWriteGEO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = TagWriteGEO &rArr; TagWriting &rArr; NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagGEO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>TagWriteSMS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_writer.o(i.TagWriteSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = TagWriteSMS &rArr; TagWriting &rArr; NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagSMS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>TagWriteText</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_writer.o(i.TagWriteText))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = TagWriteText &rArr; TagWriting &rArr; NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>TagWriteURI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_writer.o(i.TagWriteURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = TagWriteURI &rArr; TagWriting &rArr; NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTagURI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>TagWriteVCARD</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_writer.o(i.TagWriteVCARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = TagWriteVCARD &rArr; TagWriting &rArr; NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[24c]"></a>TagWriting</STRONG> (Thumb, 520 bytes, Stack size 56 bytes, menu_writer.o(i.TagWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = TagWriting &rArr; NDEF_WriteURI &rArr; WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteVCARD
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteURI
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteText
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteSMS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteGEO
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriteEMAIL
</UL>

<P><STRONG><a name="[252]"></a>Timer_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.Timer_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Timer_Config &rArr; Timer_Structure_Config &rArr; drvInt_TimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RCC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253]"></a>Timer_RCC_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.Timer_RCC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_RCC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
</UL>

<P><STRONG><a name="[254]"></a>Timer_Structure_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hw_config.o(i.Timer_Structure_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer_Structure_Config &rArr; drvInt_TimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
</UL>

<P><STRONG><a name="[5d]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[295]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[257]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[294]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[259]"></a>USART_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[258]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f]"></a>USBRemoteControl</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, menu.o(i.USBRemoteControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBRemoteControl &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRotateOnOffConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[25b]"></a>USB_Cable_Config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Cable_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRemoteControl
</UL>

<P><STRONG><a name="[238]"></a>USB_Disconnect_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hw_config.o(i.USB_Disconnect_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_Disconnect_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[4b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; CTR_HP
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_HP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[25d]"></a>USB_Istr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_init
</UL>

<P><STRONG><a name="[108]"></a>USB_SIL_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[10a]"></a>USB_SIL_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[ee]"></a>UpFunc</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, menu.o(i.UpFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UpFunc &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[23b]"></a>WaitDebounce</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.WaitDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitDebounce &rArr; ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[197]"></a>WriteData</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, lib_95hf_wrapper.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = WriteData &rArr; PCDNFCT5_WriteNDEF &rArr; ISO15693_WriteBytes_TagData &rArr; ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_WriteNDEF
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_WriteNDEF
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteNDEF
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_WriteNDEF
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_WriteNDEF
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteNDEF
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_AddAAR
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteURI
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteSMS
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteGeo
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_WriteEmail
</UL>

<P><STRONG><a name="[25f]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2ab]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[ba]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFfromTAG
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagWriting
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_Write_Step2
</UL>

<P><STRONG><a name="[261]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2ac]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[a7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshTxDataInfo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshRxDataInfo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshScreen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSetKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccResetCipher
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccInitialize
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[2ad]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2ae]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[221]"></a>clientFillCMD</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.clientFillCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clientFillCMD &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetCMD
</UL>

<P><STRONG><a name="[222]"></a>clientFillDAT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib_proprietaryp2p.o(i.clientFillDAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clientFillDAT &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetData
</UL>

<P><STRONG><a name="[245]"></a>decrement_delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_config.o(i.decrement_delay))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>delayHighPriority_ms</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hw_config.o(i.delayHighPriority_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
</UL>

<P><STRONG><a name="[ce]"></a>delay_ms</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hw_config.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay_ms &rArr; TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_WriteNDEF
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Enable_Interrupt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
</UL>

<P><STRONG><a name="[f2]"></a>delay_us</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_config.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay_us &rArr; TimerDelay_us_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_StayQuiet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleBlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleBlock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadSingleBlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadMultipleBlock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetSystemInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC14A_RATS
</UL>

<P><STRONG><a name="[21a]"></a>drv95HF_DisableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_DisableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv95HF_DisableInterrupt &rArr; drvInt_Disable_95HF_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Disable_95HF_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Disable_Interrupt
</UL>

<P><STRONG><a name="[bd]"></a>drv95HF_EnableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv95HF_EnableInterrupt &rArr; drvInt_Enable_Reply_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_Reply_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Enable_Interrupt
</UL>

<P><STRONG><a name="[10f]"></a>drv95HF_GetInterfacePinState</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_GetInterfacePinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv95HF_GetInterfacePinState
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetInterfaceBus
</UL>

<P><STRONG><a name="[c8]"></a>drv95HF_GetSerialInterface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_95hf.o(i.drv95HF_GetSerialInterface))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PORsequence
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[bc]"></a>drv95HF_InitConfigStructure</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_95hf.o(i.drv95HF_InitConfigStructure))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
</UL>

<P><STRONG><a name="[be]"></a>drv95HF_InitilizeSerialInterface</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_InitilizeSerialInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv95HF_InitilizeSerialInterface &rArr; drv95HF_InitializeSPI &rArr; drv95HF_StructureConfigSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_Config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
</UL>

<P><STRONG><a name="[112]"></a>drv95HF_PoolingReading</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_PoolingReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = drv95HF_PoolingReading &rArr; drv95HF_ReceiveSPIResponse &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PollData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[270]"></a>drv95HF_ReceiveSPIResponse</STRONG> (Thumb, 166 bytes, Stack size 544 bytes, drv_95hf.o(i.drv95HF_ReceiveSPIResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = drv95HF_ReceiveSPIResponse &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
</UL>

<P><STRONG><a name="[c9]"></a>drv95HF_ResetSPI</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_ResetSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv95HF_ResetSPI &rArr; drv95HF_SendIRQINPulse &rArr; delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPIResetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PORsequence
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[c7]"></a>drv95HF_SendIRQINPulse</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_SendIRQINPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv95HF_SendIRQINPulse &rArr; delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[bb]"></a>drv95HF_SendReceive</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, drv_95hf.o(i.drv95HF_SendReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_Reply_IRQ
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_RFEvent_IRQ
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WaitforTagDetection
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TagDetectCalibration
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendEOF
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_IDN
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_WriteRegister
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ReadRegister
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PORsequence
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Listen
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Echo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_AcFilter
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ConfigureTypeBPrime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedCommand
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[1d7]"></a>drv95HF_SendSPICommand</STRONG> (Thumb, 104 bytes, Stack size 544 bytes, drv_95hf.o(i.drv95HF_SendSPICommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
</UL>

<P><STRONG><a name="[256]"></a>drvInt_AppliTimeoutTimerConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_AppliTimeoutTimerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_AppliTimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
</UL>

<P><STRONG><a name="[269]"></a>drvInt_Disable_95HF_IRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_Disable_95HF_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_Disable_95HF_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_DisableInterrupt
</UL>

<P><STRONG><a name="[272]"></a>drvInt_Enable_RFEvent_IRQ</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_Enable_RFEvent_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_Enable_RFEvent_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>

<P><STRONG><a name="[26a]"></a>drvInt_Enable_Reply_IRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_Enable_Reply_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_Enable_Reply_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_EnableInterrupt
</UL>

<P><STRONG><a name="[255]"></a>drvInt_TimeoutTimerConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_TimeoutTimerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_TimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
</UL>

<P><STRONG><a name="[a8]"></a>file_CRC</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, firmware_saving.o(i.file_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = file_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul
</UL>

<P><STRONG><a name="[88]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[220]"></a>getNextFrame</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lib_proprietaryp2p.o(i.getNextFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getNextFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetSYM
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetACK
</UL>

<P><STRONG><a name="[1aa]"></a>getUriType</STRONG> (Thumb, 568 bytes, Stack size 8 bytes, lib_ndef_uri.o(i.getUriType))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getUriType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_PrepareURIMessage
</UL>

<P><STRONG><a name="[247]"></a>initFlashNDEF</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lib_flash_ndef.o(i.initFlashNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = initFlashNDEF &rArr; writeNDEFToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNDEFFromFlash
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>

<P><STRONG><a name="[22b]"></a>initPP2PContext</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, proprietary_p2p.o(i.initPP2PContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initPP2PContext
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigServer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProprietaryP2PConfigClient
</UL>

<P><STRONG><a name="[b0]"></a>isPendingStreamToSend</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, proprietary_p2p.o(i.isPendingStreamToSend))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserAction
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = main &rArr; TagReading &rArr; readNDEFfromTAG &rArr; PCDNFCT2_ReadNDEF &rArr; PCDNFCT2_SectorSelect &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupts_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[248]"></a>manageFlashNDEF</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lib_flash_ndef.o(i.manageFlashNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = manageFlashNDEF &rArr; writeNDEFToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNDEFToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEmul
</UL>

<P><STRONG><a name="[18d]"></a>mccAuthenticateStep1</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, mcc.o(i.mccAuthenticateStep1))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mccAuthenticateStep1 &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoTranscode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoReset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoIsActive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep1
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSetKey
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccResetCipher
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachParityInformation
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareAuthentication
</UL>

<P><STRONG><a name="[18e]"></a>mccAuthenticateStep2</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, mcc.o(i.mccAuthenticateStep2))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = mccAuthenticateStep2 &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccParityOdd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoSetActive
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoIsActive
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep3
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep2
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccResetCipher
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareAuthentication
</UL>

<P><STRONG><a name="[288]"></a>mccCryptoAuthInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mcc_crypto.o(i.mccCryptoAuthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mccCryptoAuthInit &rArr; mccLfsrUpdate &rArr; mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep1
</UL>

<P><STRONG><a name="[283]"></a>mccCryptoAuthReaderStep1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mcc_crypto_reader.o(i.mccCryptoAuthReaderStep1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mccCryptoAuthReaderStep1 &rArr; mccCryptoAuthReinit &rArr; mccLfsrUpdate &rArr; mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReinit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[284]"></a>mccCryptoAuthReaderStep2</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, mcc_crypto_reader.o(i.mccCryptoAuthReaderStep2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mccCryptoAuthReaderStep2 &rArr; mccCryptoTranscode &rArr; mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccParityOdd
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoTranscode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccPrng
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateByte
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
</UL>

<P><STRONG><a name="[285]"></a>mccCryptoAuthReaderStep3</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mcc_crypto_reader.o(i.mccCryptoAuthReaderStep3))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mccCryptoAuthReaderStep3 &rArr; mccLfsrUpdate &rArr; mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdate
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccPrng
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
</UL>

<P><STRONG><a name="[28a]"></a>mccCryptoAuthReinit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mcc_crypto.o(i.mccCryptoAuthReinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mccCryptoAuthReinit &rArr; mccLfsrUpdate &rArr; mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep1
</UL>

<P><STRONG><a name="[28d]"></a>mccCryptoInit</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, mcc_crypto.o(i.mccCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mccCryptoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSetKey
</UL>

<P><STRONG><a name="[27e]"></a>mccCryptoIsActive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcc_crypto.o(i.mccCryptoIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[191]"></a>mccCryptoReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcc_crypto.o(i.mccCryptoReset))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccResetCipher
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareHalt
</UL>

<P><STRONG><a name="[286]"></a>mccCryptoSetActive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcc_crypto.o(i.mccCryptoSetActive))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
</UL>

<P><STRONG><a name="[27f]"></a>mccCryptoTranscode</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mcc_crypto.o(i.mccCryptoTranscode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mccCryptoTranscode &rArr; mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateByte
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateBit
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[193]"></a>mccInitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mcc.o(i.mccInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mccInitialize &rArr; mccResetCipher &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccResetCipher
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareTest
</UL>

<P><STRONG><a name="[289]"></a>mccLfsrUpdate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, mcc_crypto.o(i.mccLfsrUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mccLfsrUpdate &rArr; mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReinit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthInit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep3
</UL>

<P><STRONG><a name="[28e]"></a>mccLfsrUpdateBit</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mcc_crypto.o(i.mccLfsrUpdateBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctLfsrValues
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccParityEven
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoTranscode
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateByte
</UL>

<P><STRONG><a name="[28b]"></a>mccLfsrUpdateByte</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mcc_crypto.o(i.mccLfsrUpdateByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mccLfsrUpdateByte &rArr; mccLfsrUpdateBit
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateBit
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdate
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoTranscode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep2
</UL>

<P><STRONG><a name="[28f]"></a>mccParityEven</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcc_macros.o(i.mccParityEven))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateBit
</UL>

<P><STRONG><a name="[265]"></a>mccParityOdd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcc_macros.o(i.mccParityOdd))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachParityInformationOld
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachParityInformation
</UL>

<P><STRONG><a name="[28c]"></a>mccPrng</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mcc_crypto.o(i.mccPrng))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mccPrng
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccReverse
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep3
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoAuthReaderStep2
</UL>

<P><STRONG><a name="[281]"></a>mccResetCipher</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mcc.o(i.mccResetCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mccResetCipher &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoReset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccInitialize
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[291]"></a>mccReverse</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mcc_macros.o(i.mccReverse))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccPrng
</UL>

<P><STRONG><a name="[280]"></a>mccSendRawRequest</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mcc_raw_request.o(i.mccSendRawRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccExtractMessage
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCopyToRawBuffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[190]"></a>mccSendRequest</STRONG> (Thumb, 382 bytes, Stack size 80 bytes, mcc.o(i.mccSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mccSendRequest &rArr; mccSendRawRequest &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoTranscode
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoIsActive
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachParityInformationOld
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareWrite
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareRead
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareHalt
</UL>

<P><STRONG><a name="[282]"></a>mccSetKey</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mcc.o(i.mccSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mccSetKey &rArr; mccCryptoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccCryptoInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[c0]"></a>random</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common.o(i.random))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = random
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
</UL>

<P><STRONG><a name="[27a]"></a>readNDEFFromFlash</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lib_flash_ndef.o(i.readNDEFFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readNDEFFromFlash &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashNDEF
</UL>

<P><STRONG><a name="[24b]"></a>readNDEFfromTAG</STRONG> (Thumb, 382 bytes, Stack size 560 bytes, menu_reader.o(i.readNDEFfromTAG))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = readNDEFfromTAG &rArr; PCDNFCT2_ReadNDEF &rArr; PCDNFCT2_SectorSelect &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT5_ReadNDEF
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadNDEF
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadNDEF
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_ReadNDEF
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_ReadNDEF
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadSMS
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadGeo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadEmail
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagReading
</UL>

<P><STRONG><a name="[279]"></a>refreshRxDataInfo</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, proprietary_p2p.o(i.refreshRxDataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = refreshRxDataInfo &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleData
</UL>

<P><STRONG><a name="[22a]"></a>refreshTxCMDInfo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proprietary_p2p.o(i.refreshTxCMDInfo))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopDataCommand
</UL>

<P><STRONG><a name="[229]"></a>refreshTxDataInfo</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, proprietary_p2p.o(i.refreshTxDataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = refreshTxDataInfo &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopDataCommand
</UL>

<P><STRONG><a name="[268]"></a>rfalCrcCalculateCcitt</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rfal_crc.o(i.rfalCrcCalculateCcitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcUpdateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildCommand
</UL>

<P><STRONG><a name="[27d]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27b]"></a>writeNDEFToFlash</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, lib_flash_ndef.o(i.writeNDEFToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = writeNDEFToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PagesMask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashNDEF
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manageFlashNDEF
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[228]"></a>PongInitiator_SendRequestReceiveResponse</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, pongexample.o(i.PongInitiator_SendRequestReceiveResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = PongInitiator_SendRequestReceiveResponse &rArr; PP2P_SendBUF &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendBUF
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
</UL>

<P><STRONG><a name="[225]"></a>PongRefreshScreen</STRONG> (Thumb, 1668 bytes, Stack size 8 bytes, pongexample.o(i.PongRefreshScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PongRefreshScreen &rArr; LCD_DrawRect &rArr; LCD_DrawLine &rArr; LCD_SetCursor_onwindows &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rotate
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongConfigServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PongCheckForUserAction
</UL>

<P><STRONG><a name="[7c]"></a>PongTarget_ReceiveRequestSendResponse</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pongexample.o(i.PongTarget_ReceiveRequestSendResponse))
<BR>[Address Reference Count : 1]<UL><LI> pongexample.o(i.PongConfigClient)
</UL>
<P><STRONG><a name="[84]"></a>LastCmdAcknowledged</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, proprietary_p2p.o(i.LastCmdAcknowledged))
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigServer)
</UL>
<P><STRONG><a name="[81]"></a>PopDataCommand</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, proprietary_p2p.o(i.PopDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PopDataCommand &rArr; refreshTxDataInfo &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshTxDataInfo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshTxCMDInfo
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigClient)
</UL>
<P><STRONG><a name="[7f]"></a>handleCommand</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, proprietary_p2p.o(i.handleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = handleCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigClient)
</UL>
<P><STRONG><a name="[85]"></a>handleCommandFromWOD</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, proprietary_p2p.o(i.handleCommandFromWOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handleCommandFromWOD &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SendACK
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigServer)
</UL>
<P><STRONG><a name="[80]"></a>handleData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, proprietary_p2p.o(i.handleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = handleData &rArr; refreshRxDataInfo &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshRxDataInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigClient)
</UL>
<P><STRONG><a name="[86]"></a>handleDataFromWOD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proprietary_p2p.o(i.handleDataFromWOD))
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigServer)
</UL>
<P><STRONG><a name="[7e]"></a>isCommunicationTokenRequested</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, proprietary_p2p.o(i.isCommunicationTokenRequested))
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigClient)
</UL>
<P><STRONG><a name="[82]"></a>isLastCmdAcknoledge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, proprietary_p2p.o(i.isLastCmdAcknoledge))
<BR>[Address Reference Count : 1]<UL><LI> proprietary_p2p.o(i.ProprietaryP2PConfigClient)
</UL>
<P><STRONG><a name="[b1]"></a>refreshScreen</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, proprietary_p2p.o(i.refreshScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = refreshScreen &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor &rArr; LCD_WriteData &rArr; LCD_CtrlLinesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserAction
</UL>

<P><STRONG><a name="[24d]"></a>TimerDelay_ms_Config</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_config.o(i.TimerDelay_ms_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[251]"></a>TimerDelay_us_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hw_config.o(i.TimerDelay_us_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimerDelay_us_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[93]"></a>ApplicationClose</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_cardemul.o(i.ApplicationClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ApplicationClose &rArr; IntExtOnOffConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul14443A
</UL>

<P><STRONG><a name="[ad]"></a>ApplicationInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, menu_cardemul.o(i.ApplicationInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardEmul14443A
</UL>

<P><STRONG><a name="[26b]"></a>drv95HF_GPIOConfigSPI</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_GPIOConfigSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv95HF_GPIOConfigSPI &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[26c]"></a>drv95HF_InitializeSPI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_InitializeSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = drv95HF_InitializeSPI &rArr; drv95HF_StructureConfigSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigSPI
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
</UL>

<P><STRONG><a name="[26d]"></a>drv95HF_RCCConfigSPI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_RCCConfigSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv95HF_RCCConfigSPI
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[26f]"></a>drv95HF_SPIPollingCommand</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_SPIPollingCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = drv95HF_SPIPollingCommand &rArr; delay_ms &rArr; TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimeOut
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimeOut
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
</UL>

<P><STRONG><a name="[271]"></a>drv95HF_SendSPIResetByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_SendSPIResetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv95HF_SendSPIResetByte &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
</UL>

<P><STRONG><a name="[26e]"></a>drv95HF_StructureConfigSPI</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_95hf.o(i.drv95HF_StructureConfigSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv95HF_StructureConfigSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[126]"></a>IRQOut_GPIO_Config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, drv_interrupt.o(i.IRQOut_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IRQOut_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_Config
</UL>

<P><STRONG><a name="[1bc]"></a>PCDNFCT1_ReadAll</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib_nfctype1pcd.o(i.PCDNFCT1_ReadAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = PCDNFCT1_ReadAll &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_ReadNDEF
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_WriteNDEF
</UL>

<P><STRONG><a name="[1be]"></a>PCDNFCT1_WriteErase</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, lib_nfctype1pcd.o(i.PCDNFCT1_WriteErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = PCDNFCT1_WriteErase &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT1_WriteNDEF
</UL>

<P><STRONG><a name="[1c0]"></a>PCDNFCT2_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lib_nfctype2pcd.o(i.PCDNFCT2_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = PCDNFCT2_Read &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_ReadNDEF
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_WriteNDEF
</UL>

<P><STRONG><a name="[1c2]"></a>PCDNFCT2_SectorSelect</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, lib_nfctype2pcd.o(i.PCDNFCT2_SectorSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = PCDNFCT2_SectorSelect &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_ReadNDEF
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_WriteNDEF
</UL>

<P><STRONG><a name="[1c3]"></a>PCDNFCT2_Write</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, lib_nfctype2pcd.o(i.PCDNFCT2_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = PCDNFCT2_Write &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT2_WriteNDEF
</UL>

<P><STRONG><a name="[1c5]"></a>PCDNFCT3_ReadAttribInfo</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lib_nfctype3pcd.o(i.PCDNFCT3_ReadAttribInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = PCDNFCT3_ReadAttribInfo &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadNDEF
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteNDEF
</UL>

<P><STRONG><a name="[1c6]"></a>PCDNFCT3_ReadMessage</STRONG> (Thumb, 244 bytes, Stack size 360 bytes, lib_nfctype3pcd.o(i.PCDNFCT3_ReadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = PCDNFCT3_ReadMessage &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_ReadNDEF
</UL>

<P><STRONG><a name="[1cb]"></a>PCDNFCT3_UpdateCheckSum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib_nfctype3pcd.o(i.PCDNFCT3_UpdateCheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteNDEF
</UL>

<P><STRONG><a name="[1c8]"></a>PCDNFCT3_WriteAttribInfo</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, lib_nfctype3pcd.o(i.PCDNFCT3_WriteAttribInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = PCDNFCT3_WriteAttribInfo &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteNDEF
</UL>

<P><STRONG><a name="[1c9]"></a>PCDNFCT3_WriteMessage</STRONG> (Thumb, 308 bytes, Stack size 328 bytes, lib_nfctype3pcd.o(i.PCDNFCT3_WriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = PCDNFCT3_WriteMessage &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT3_WriteNDEF
</UL>

<P><STRONG><a name="[1cc]"></a>PCDNFCT4_ReadBinary</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lib_nfctype4pcd.o(i.PCDNFCT4_ReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = PCDNFCT4_ReadBinary &rArr; ISO7816_ReadBinary &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadNDEF
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_WriteNDEF
</UL>

<P><STRONG><a name="[1ce]"></a>PCDNFCT4_SelectApplication</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lib_nfctype4pcd.o(i.PCDNFCT4_SelectApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = PCDNFCT4_SelectApplication &rArr; ISO7816_SelectFile &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SelectFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadNDEF
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_WriteNDEF
</UL>

<P><STRONG><a name="[1cf]"></a>PCDNFCT4_SelectCCfile</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lib_nfctype4pcd.o(i.PCDNFCT4_SelectCCfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = PCDNFCT4_SelectCCfile &rArr; ISO7816_SelectFile &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SelectFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadNDEF
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_WriteNDEF
</UL>

<P><STRONG><a name="[1d0]"></a>PCDNFCT4_SelectNDEFfile</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lib_nfctype4pcd.o(i.PCDNFCT4_SelectNDEFfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = PCDNFCT4_SelectNDEFfile &rArr; ISO7816_SelectFile &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SelectFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_ReadNDEF
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_WriteNDEF
</UL>

<P><STRONG><a name="[1d1]"></a>PCDNFCT4_UpdateBinary</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lib_nfctype4pcd.o(i.PCDNFCT4_UpdateBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = PCDNFCT4_UpdateBinary &rArr; ISO7816_UpdateBinary &rArr; ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_UpdateBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCDNFCT4_WriteNDEF
</UL>

<P><STRONG><a name="[167]"></a>ISO7816_SendReceiveAPDU</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, lib_iso7816pcd.o(i.ISO7816_SendReceiveAPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ISO7816_SendReceiveAPDU &rArr; ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_UpdateBinary
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_SelectFile
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_ReadBinary
</UL>

<P><STRONG><a name="[13a]"></a>FSCIToFSC</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lib_iso14443apcd.o(i.FSCIToFSC))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
</UL>

<P><STRONG><a name="[12b]"></a>ISO14443A_AC</STRONG> (Thumb, 688 bytes, Stack size 64 bytes, lib_iso14443apcd.o(i.ISO14443A_AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
</UL>

<P><STRONG><a name="[12d]"></a>ISO14443A_ACLevel1</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_ACLevel1))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ISO14443A_ACLevel1 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[12e]"></a>ISO14443A_ACLevel2</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_ACLevel2))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ISO14443A_ACLevel2 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[12f]"></a>ISO14443A_ACLevel3</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_ACLevel3))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[13b]"></a>ISO14443A_CompleteStructure</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lib_iso14443apcd.o(i.ISO14443A_CompleteStructure))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_REQA
</UL>

<P><STRONG><a name="[134]"></a>ISO14443A_HLTA</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_HLTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ISO14443A_HLTA &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[135]"></a>ISO14443A_InitStructure</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib_iso14443apcd.o(i.ISO14443A_InitStructure))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
</UL>

<P><STRONG><a name="[138]"></a>ISO14443A_MultiAnticollision</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_MultiAnticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ISO14443A_MultiAnticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_HLTA
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
</UL>

<P><STRONG><a name="[131]"></a>ISO14443A_RATS</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_RATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ISO14443A_RATS &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsCRCOk
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSCIToFSC
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
</UL>

<P><STRONG><a name="[136]"></a>ISO14443A_REQA</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_REQA))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ISO14443A_REQA &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_CompleteStructure
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
</UL>

<P><STRONG><a name="[13c]"></a>ISO14443BReadARConfigB</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lib_iso14443bpcd.o(i.ISO14443BReadARConfigB))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443BReadARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteAndCheckARConfigB
</UL>

<P><STRONG><a name="[13f]"></a>ISO14443B_CompleteStruture</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_iso14443bpcd.o(i.ISO14443B_CompleteStruture))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISO14443B_CompleteStruture &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_ReqB
</UL>

<P><STRONG><a name="[141]"></a>ISO14443B_InitStructure</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_iso14443bpcd.o(i.ISO14443B_InitStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISO14443B_InitStructure
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
</UL>

<P><STRONG><a name="[144]"></a>ISO14443B_WriteARConfigB</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lib_iso14443bpcd.o(i.ISO14443B_WriteARConfigB))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteAndCheckARConfigB
</UL>

<P><STRONG><a name="[142]"></a>ISO14443B_WriteAndCheckARConfigB</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_WriteAndCheckARConfigB))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443B_WriteAndCheckARConfigB &rArr; ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteARConfigB
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443BReadARConfigB
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
</UL>

<P><STRONG><a name="[156]"></a>ISO15693_CRC16</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lib_iso15693pcd.o(i.ISO15693_CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ISO15693_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsCorrectCRC16Residue
</UL>

<P><STRONG><a name="[14d]"></a>ISO15693_CreateRequestFlag</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, lib_iso15693pcd.o(i.ISO15693_CreateRequestFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ISO15693_CreateRequestFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
</UL>

<P><STRONG><a name="[145]"></a>ISO15693_ExtendedReadMultipleBlock</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, lib_iso15693pcd.o(i.ISO15693_ExtendedReadMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO15693_ExtendedReadMultipleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetAddressOrNbSlotsFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleTagData
</UL>

<P><STRONG><a name="[147]"></a>ISO15693_ExtendedReadSingleBlock</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_ExtendedReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ISO15693_ExtendedReadSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetAddressOrNbSlotsFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleTagData
</UL>

<P><STRONG><a name="[148]"></a>ISO15693_ExtendedWriteSingleBlock</STRONG> (Thumb, 192 bytes, Stack size 560 bytes, lib_iso15693pcd.o(i.ISO15693_ExtendedWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = ISO15693_ExtendedWriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetOptionFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetAddressOrNbSlotsFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteTagData
</UL>

<P><STRONG><a name="[146]"></a>ISO15693_GetAddressOrNbSlotsFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_GetAddressOrNbSlotsFlag))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleBlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleBlock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadSingleBlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadMultipleBlock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetSystemInfo
</UL>

<P><STRONG><a name="[149]"></a>ISO15693_GetOptionFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_GetOptionFlag))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
</UL>

<P><STRONG><a name="[15b]"></a>ISO15693_GetProtocolExtensionFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_GetProtocolExtensionFlag))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleBlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleBlock
</UL>

<P><STRONG><a name="[150]"></a>ISO15693_GetSelectOrAFIFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_GetSelectOrAFIFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
</UL>

<P><STRONG><a name="[14e]"></a>ISO15693_Inventory</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, lib_iso15693pcd.o(i.ISO15693_Inventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsInventoryFlag
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetSelectOrAFIFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_InventoryOneSlot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
</UL>

<P><STRONG><a name="[151]"></a>ISO15693_Inventory16Slots</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, lib_iso15693pcd.o(i.ISO15693_Inventory16Slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsCollisionDetected
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[154]"></a>ISO15693_InventoryOneSlot</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_InventoryOneSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ISO15693_InventoryOneSlot &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[15d]"></a>ISO15693_IsATagInTheField</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsATagInTheField))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[161]"></a>ISO15693_IsAddressOrNbSlotsFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsAddressOrNbSlotsFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_StayQuiet
</UL>

<P><STRONG><a name="[152]"></a>ISO15693_IsCollisionDetected</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsCollisionDetected))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
</UL>

<P><STRONG><a name="[155]"></a>ISO15693_IsCorrectCRC16Residue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lib_iso15693pcd.o(i.ISO15693_IsCorrectCRC16Residue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ISO15693_IsCorrectCRC16Residue &rArr; ISO15693_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SplitInventoryResponse
</UL>

<P><STRONG><a name="[14f]"></a>ISO15693_IsInventoryFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsInventoryFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
</UL>

<P><STRONG><a name="[15a]"></a>ISO15693_ReadMultipleBlock</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, lib_iso15693pcd.o(i.ISO15693_ReadMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO15693_ReadMultipleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetProtocolExtensionFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetAddressOrNbSlotsFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleTagData
</UL>

<P><STRONG><a name="[159]"></a>ISO15693_ReadMultipleTagData</STRONG> (Thumb, 162 bytes, Stack size 184 bytes, lib_iso15693pcd.o(i.ISO15693_ReadMultipleTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ISO15693_ReadMultipleTagData &rArr; ISO15693_ReadMultipleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadMultipleBlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadMultipleBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadBytesTagData
</UL>

<P><STRONG><a name="[15c]"></a>ISO15693_ReadSingleBlock</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_ReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ISO15693_ReadSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetProtocolExtensionFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetAddressOrNbSlotsFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleTagData
</UL>

<P><STRONG><a name="[158]"></a>ISO15693_ReadSingleTagData</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, lib_iso15693pcd.o(i.ISO15693_ReadSingleTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ISO15693_ReadSingleTagData &rArr; ISO15693_ReadSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadSingleBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ReadBytesTagData
</UL>

<P><STRONG><a name="[14a]"></a>ISO15693_SendEOF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lib_iso15693pcd.o(i.ISO15693_SendEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ISO15693_SendEOF &rArr; PCD_SendEOF &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendEOF
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
</UL>

<P><STRONG><a name="[15f]"></a>ISO15693_StayQuiet</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_StayQuiet))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ISO15693_StayQuiet &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsAddressOrNbSlotsFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[162]"></a>ISO15693_TagSave</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, lib_iso15693pcd.o(i.ISO15693_TagSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = ISO15693_TagSave &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteBytes_TagData
</UL>

<P><STRONG><a name="[165]"></a>ISO15693_WriteSingleBlock</STRONG> (Thumb, 214 bytes, Stack size 560 bytes, lib_iso15693pcd.o(i.ISO15693_WriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetProtocolExtensionFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetOptionFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetAddressOrNbSlotsFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteTagData
</UL>

<P><STRONG><a name="[164]"></a>ISO15693_WriteTagData</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, lib_iso15693pcd.o(i.ISO15693_WriteTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = ISO15693_WriteTagData &rArr; ISO15693_WriteSingleBlock &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteSingleBlock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_ExtendedWriteSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_WriteBytes_TagData
</UL>

<P><STRONG><a name="[ef]"></a>FELICA_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lib_iso18092pcd.o(i.FELICA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Initialization
</UL>

<P><STRONG><a name="[f4]"></a>FELICA_REQC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_iso18092pcd.o(i.FELICA_REQC))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = FELICA_REQC &rArr; PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
</UL>

<P><STRONG><a name="[1d8]"></a>IsAnAvailableProtocol</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lib_pcd.o(i.IsAnAvailableProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>

<P><STRONG><a name="[1e2]"></a>PICCEmul_CheckForPCD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib_piccemulator.o(i.PICCEmul_CheckForPCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PICCEmul_CheckForPCD &rArr; PICCEmul_Listen &rArr; PICC_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Listen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitializeProtocol
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
</UL>

<P><STRONG><a name="[1e9]"></a>PICCEmul_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lib_piccemulator.o(i.PICCEmul_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PICCEmul_Init &rArr; PICCNFCT4_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT2_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitializeProtocol
</UL>

<P><STRONG><a name="[1ed]"></a>PICCEmul_Init14443APicc</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lib_piccemulator.o(i.PICCEmul_Init14443APicc))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = PICCEmul_Init14443APicc &rArr; PICC_SetBackscatteringLoad &rArr; PICC_GetBackscatteringLoad &rArr; PICC_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_SetBackscatteringLoad
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_AcFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_RFField_CutOff
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_InitializeProtocol
</UL>

<P><STRONG><a name="[1ef]"></a>PICCEmul_InitializeProtocol</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lib_piccemulator.o(i.PICCEmul_InitializeProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = PICCEmul_InitializeProtocol &rArr; PICCEmul_Init14443APicc &rArr; PICC_SetBackscatteringLoad &rArr; PICC_GetBackscatteringLoad &rArr; PICC_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init14443APicc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_CheckForPCD
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
</UL>

<P><STRONG><a name="[1e3]"></a>PICCEmul_Listen</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lib_piccemulator.o(i.PICCEmul_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = PICCEmul_Listen &rArr; PICC_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PORsequence
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Listen
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Echo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ReceiveCommand
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_CheckForPCD
</UL>

<P><STRONG><a name="[1f3]"></a>PICCEmul_RFField_CutOff</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lib_piccemulator.o(i.PICCEmul_RFField_CutOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = PICCEmul_RFField_CutOff &rArr; PICCEmul_Init14443APicc &rArr; PICC_SetBackscatteringLoad &rArr; PICC_GetBackscatteringLoad &rArr; PICC_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Init14443APicc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_AcFilter
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
</UL>

<P><STRONG><a name="[1f4]"></a>PICCEmul_ReceiveCommand</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lib_piccemulator.o(i.PICCEmul_ReceiveCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = PICCEmul_ReceiveCommand &rArr; PICCNFCT4_ReplyCommand &rArr; PICCNFCT4_UpdateBinary &rArr; RFT_ReceiveFile &rArr; PICC7816_SendBuffer &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_Listen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_PollData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCM1_ReplyCommand
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCDEP_ReplyCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCEmul_ManagePICCEmulation
</UL>

<P><STRONG><a name="[205]"></a>PICCNFCT4_GetCommandId</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lib_nfctype4picc.o(i.PICCNFCT4_GetCommandId))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PICCNFCT4_GetCommandId &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_Select
</UL>

<P><STRONG><a name="[208]"></a>PICCNFCT4_IsReadWriteParametersOk</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lib_nfctype4picc.o(i.PICCNFCT4_IsReadWriteParametersOk))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_UpdateBinary
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReadBinary
</UL>

<P><STRONG><a name="[213]"></a>PICCNFCT4_Select</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lib_nfctype4picc.o(i.PICCNFCT4_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PICCNFCT4_Select &rArr; PICCNFCT4_SelectNDEFfile &rArr; PICC7816_SendAStatusCode &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFT_SelectApplication
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC7816_SendAStatusCode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_SelectNDEFfile
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_SelectCCfile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_SelectApplication
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_GetCommandId
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICCNFCT4_ReplyCommand
</UL>

<P><STRONG><a name="[21e]"></a>IsAnAvailableProtocol</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lib_picc.o(i.IsAnAvailableProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ProtocolSelect
</UL>

<P><STRONG><a name="[21f]"></a>PP2PT_Send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lib_proprietaryp2p.o(i.PP2PT_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PP2PT_Send &rArr; PICC_Send &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_ReleaseCommunicationToken
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetSYM
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetPreemptionToken
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetNACK
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetCMD
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_GetACK
</UL>

<P><STRONG><a name="[224]"></a>PP2P_SendReceive</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lib_proprietaryp2p.o(i.PP2P_SendReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = PP2P_SendReceive &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendDATA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_SendCMD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PP2P_Server
</UL>

<P><STRONG><a name="[b9]"></a>ConfigManager_IDN</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_configmanager.o(i.ConfigManager_IDN))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ConfigManager_IDN &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
</UL>

<P><STRONG><a name="[b7]"></a>ConfigManager_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib_configmanager.o(i.ConfigManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ConfigManager_Init &rArr; drv95HF_InitilizeSerialInterface &rArr; drv95HF_InitializeSPI &rArr; drv95HF_StructureConfigSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitConfigStructure
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
</UL>

<P><STRONG><a name="[b8]"></a>ConfigManager_PORsequence</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lib_configmanager.o(i.ConfigManager_PORsequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ConfigManager_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
</UL>

<P><STRONG><a name="[b2]"></a>ConfigManager_Start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_configmanager.o(i.ConfigManager_Start))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_P2PP
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_CardEmulation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagEmulation
</UL>

<P><STRONG><a name="[19f]"></a>NDEF_IdentifySPRecord</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, lib_ndef.o(i.NDEF_IdentifySPRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseSP
</UL>

<P><STRONG><a name="[19d]"></a>NDEF_IsNDEFPresent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_IsNDEFPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NDEF_IsNDEFPresent &rArr; ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
</UL>

<P><STRONG><a name="[1a0]"></a>NDEF_ParseForumExternalType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lib_ndef.o(i.NDEF_ParseForumExternalType))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NDEF_ParseForumExternalType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[1a1]"></a>NDEF_ParseMediaType</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lib_ndef.o(i.NDEF_ParseMediaType))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NDEF_ParseMediaType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[19e]"></a>NDEF_ParseRecordHeader</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseRecordHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NDEF_ParseRecordHeader &rArr; NDEF_ParseWellKnownType &rArr; NDEF_ParseSP &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseMediaType
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseForumExternalType
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
</UL>

<P><STRONG><a name="[1a3]"></a>NDEF_ParseSP</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lib_ndef.o(i.NDEF_ParseSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NDEF_ParseSP &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
</UL>

<P><STRONG><a name="[1a4]"></a>NDEF_ParseURI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NDEF_ParseURI &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
</UL>

<P><STRONG><a name="[1a2]"></a>NDEF_ParseWellKnownType</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseWellKnownType))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NDEF_ParseWellKnownType &rArr; NDEF_ParseSP &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseURI
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseSP
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[198]"></a>NDEF_FillEmailStruct</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lib_ndef_email.o(i.NDEF_FillEmailStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NDEF_FillEmailStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI_Email
</UL>

<P><STRONG><a name="[1ac]"></a>NDEF_ReadURI_Email</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lib_ndef_email.o(i.NDEF_ReadURI_Email))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NDEF_ReadURI_Email &rArr; NDEF_FillEmailStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillEmailStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadEmail
</UL>

<P><STRONG><a name="[19a]"></a>NDEF_FillGeoStruct</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lib_ndef_geo.o(i.NDEF_FillGeoStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NDEF_FillGeoStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI_Geo
</UL>

<P><STRONG><a name="[1ae]"></a>NDEF_ReadURI_Geo</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lib_ndef_geo.o(i.NDEF_ReadURI_Geo))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = NDEF_ReadURI_Geo &rArr; NDEF_FillGeoStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillGeoStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadGeo
</UL>

<P><STRONG><a name="[19b]"></a>NDEF_FillSMSStruct</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lib_ndef_sms.o(i.NDEF_FillSMSStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NDEF_FillSMSStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI_SMS
</UL>

<P><STRONG><a name="[1b0]"></a>NDEF_ReadURI_SMS</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lib_ndef_sms.o(i.NDEF_ReadURI_SMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = NDEF_ReadURI_SMS &rArr; NDEF_FillSMSStruct &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_FillSMSStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadSMS
</UL>

<P><STRONG><a name="[1a5]"></a>NDEF_Parse_WellKnowType</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, lib_ndef_uri.o(i.NDEF_Parse_WellKnowType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NDEF_Parse_WellKnowType &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadURI
</UL>

<P><STRONG><a name="[d9]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[dc]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[df]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[1b6]"></a>NoData_Setup0</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[102]"></a>HID_Allow512bytesBuffer</STRONG> (Thumb, 38 bytes, Stack size 248 bytes, usb_hid.o(i.HID_Allow512bytesBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = HID_Allow512bytesBuffer &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[104]"></a>HID_CalibrateTagDetection</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_hid.o(i.HID_CalibrateTagDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = HID_CalibrateTagDetection &rArr; HID_GetTagDetectionRefValue &rArr; PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[106]"></a>HID_ChainedCommand</STRONG> (Thumb, 270 bytes, Stack size 544 bytes, usb_hid.o(i.HID_ChainedCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = HID_ChainedCommand &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[124]"></a>HID_ChainedResponse</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, usb_hid.o(i.HID_ChainedResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_ChainedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[107]"></a>HID_ConfigureTypeBPrime</STRONG> (Thumb, 30 bytes, Stack size 248 bytes, usb_hid.o(i.HID_ConfigureTypeBPrime))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = HID_ConfigureTypeBPrime &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[10b]"></a>HID_GetHardwareVersion</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usb_hid.o(i.HID_GetHardwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HID_GetHardwareVersion &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[10c]"></a>HID_GetIRQOutState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_hid.o(i.HID_GetIRQOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_GetIRQOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUp
</UL>

<P><STRONG><a name="[10e]"></a>HID_GetInterfaceBus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hid.o(i.HID_GetInterfaceBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetInterfaceBus &rArr; drv95HF_GetInterfacePinState
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetInterfacePinState
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[122]"></a>HID_GetMCUversion</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_hid.o(i.HID_GetMCUversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_GetMCUversion
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[105]"></a>HID_GetTagDetectionRefValue</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, usb_hid.o(i.HID_GetTagDetectionRefValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = HID_GetTagDetectionRefValue &rArr; PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUpByTimeOut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUpByTagDetecting
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CalibrateTagDetection
</UL>

<P><STRONG><a name="[115]"></a>HID_GotoTagDetectingState</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usb_hid.o(i.HID_GotoTagDetectingState))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = HID_GotoTagDetectingState &rArr; PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[116]"></a>HID_IsWakeUp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_hid.o(i.HID_IsWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HID_IsWakeUp &rArr; HID_GetIRQOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIRQOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[113]"></a>HID_IsWakeUpByTagDetecting</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_hid.o(i.HID_IsWakeUpByTagDetecting))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[114]"></a>HID_IsWakeUpByTimeOut</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_hid.o(i.HID_IsWakeUpByTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[117]"></a>HID_MultiTagResPart2</STRONG> (Thumb, 80 bytes, Stack size 128 bytes, usb_hid.o(i.HID_MultiTagResPart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HID_MultiTagResPart2 &rArr; ISO14443A_MultiTagPart2 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagPart2
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[119]"></a>HID_Reset95HF</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_hid.o(i.HID_Reset95HF))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = HID_Reset95HF &rArr; PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[11b]"></a>HID_Run15693Anticollision</STRONG> (Thumb, 124 bytes, Stack size 208 bytes, usb_hid.o(i.HID_Run15693Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[11d]"></a>HID_RunInventoty16slots</STRONG> (Thumb, 120 bytes, Stack size 208 bytes, usb_hid.o(i.HID_RunInventoty16slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = HID_RunInventoty16slots &rArr; ISO15693_RunInventory16slots &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[11f]"></a>HID_RunMultiTagHunting</STRONG> (Thumb, 110 bytes, Stack size 240 bytes, usb_hid.o(i.HID_RunMultiTagHunting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = HID_RunMultiTagHunting &rArr; ISO14443A_MultiTagHunting &rArr; ISO14443A_MultiAnticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[109]"></a>HID_SendCustomCommand</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_hid.o(i.HID_SendCustomCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_StartTagTraking
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunMultiTagHunting
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunInventoty16slots
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Run15693Anticollision
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Reset95HF
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MultiTagResPart2
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetMCUversion
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetInterfaceBus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetHardwareVersion
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ConfigureTypeBPrime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedResponse
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CalibrateTagDetection
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[123]"></a>HID_StartTagTraking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_hid.o(i.HID_StartTagTraking))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[235]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[236]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[264]"></a>attachParityInformation</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mcc.o(i.attachParityInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attachParityInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccParityOdd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[266]"></a>attachParityInformationOld</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mcc.o(i.attachParityInformationOld))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attachParityInformationOld
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccParityOdd
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRequest
</UL>

<P><STRONG><a name="[267]"></a>buildCommand</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mcc.o(i.buildCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = buildCommand &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccAuthenticateStep1
</UL>

<P><STRONG><a name="[290]"></a>correctLfsrValues</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mcc_crypto.o(i.correctLfsrValues))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccLfsrUpdateBit
</UL>

<P><STRONG><a name="[287]"></a>mccCopyToRawBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mcc_raw_request.o(i.mccCopyToRawBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mccCopyToRawBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
</UL>

<P><STRONG><a name="[292]"></a>mccExtractMessage</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, mcc_raw_request.o(i.mccExtractMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mccExtractMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mccSendRawRequest
</UL>

<P><STRONG><a name="[293]"></a>rfalCrcUpdateCcitt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_crc.o(i.rfalCrcUpdateCcitt))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>

<P><STRONG><a name="[260]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[263]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[262]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
