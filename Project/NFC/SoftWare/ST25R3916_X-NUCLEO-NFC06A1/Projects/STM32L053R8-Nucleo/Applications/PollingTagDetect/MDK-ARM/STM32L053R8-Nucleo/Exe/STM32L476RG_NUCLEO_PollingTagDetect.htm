<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L053R8-Nucleo\Exe\STM32L476RG_NUCLEO_PollingTagDetect.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L053R8-Nucleo\Exe\STM32L476RG_NUCLEO_PollingTagDetect.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Feb 02 14:18:14 2021
<BR><P>
<H3>Maximum Stack Usage =       1632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; demoCycle &rArr; demoP2P &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[7f]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[2f]">BSP_SPI1_IRQ_Callback</a> from nucleo_l053r8_bus.o(i.BSP_SPI1_IRQ_Callback) referenced from nucleo_l053r8_bus.o(i.SPI1_MspInit)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[2d]">HAL_SPI_AbortCpltCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_AbortCpltCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[2c]">HAL_SPI_ErrorCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_ErrorCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[2e]">HAL_SPI_MspInit</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_MspInit) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[27]">HAL_SPI_RxCpltCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_RxCpltCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[2a]">HAL_SPI_RxHalfCpltCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[26]">HAL_SPI_TxCpltCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_TxCpltCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[29]">HAL_SPI_TxHalfCpltCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[28]">HAL_SPI_TxRxCpltCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[2b]">HAL_SPI_TxRxHalfCpltCallback</a> from stm32l0xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1f]">LCD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1e]">RNG_LPUART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[25]">SPI1_MspDeInit</a> from nucleo_l053r8_bus.o(i.SPI1_MspDeInit) referenced from nucleo_l053r8_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
 <LI><a href="#[24]">SPI1_MspInit</a> from nucleo_l053r8_bus.o(i.SPI1_MspInit) referenced from nucleo_l053r8_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[16]">TIM21_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[17]">TIM22_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[15]">TIM6_DAC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[30]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[31]">demoNotif</a> from demo_polling.o(i.demoNotif) referenced from demo_polling.o(i.demoIni)
 <LI><a href="#[32]">iso15693PhyVCDCode1Of256</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
 <LI><a href="#[33]">iso15693PhyVCDCode1Of4</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
 <LI><a href="#[21]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[34]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[48]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[182]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[183]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[184]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[185]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[186]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureVoltage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeFilter
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[189]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepIsAtrReq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartATTRIB
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartSingleCollisionResolution
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ad]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[14f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[190]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[191]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[40]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[35]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[193]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>BSP_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nucleo_l053r8_bus.o(i.BSP_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>

<P><STRONG><a name="[4b]"></a>BSP_PB_Init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32l0xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>BSP_SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nucleo_l053r8_bus.o(i.BSP_SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[2f]"></a>BSP_SPI1_IRQ_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nucleo_l053r8_bus.o(i.BSP_SPI1_IRQ_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = BSP_SPI1_IRQ_Callback &rArr; st25r3916Isr &rArr; st25r3916CheckForReceivedInterrupts &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nucleo_l053r8_bus.o(i.SPI1_MspInit)
</UL>
<P><STRONG><a name="[52]"></a>BSP_SPI1_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nucleo_l053r8_bus.o(i.BSP_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_SPI1_Init &rArr; BSP_SPI1_RegisterDefaultMspCallbacks &rArr; HAL_SPI_RegisterCallback &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_RegisterDefaultMspCallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>BSP_SPI1_RegisterDefaultMspCallbacks</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nucleo_l053r8_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_SPI1_RegisterDefaultMspCallbacks &rArr; HAL_SPI_RegisterCallback &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[58]"></a>BSP_SPI1_SendRecv</STRONG> (Thumb, 66 bytes, Stack size 536 bytes, nucleo_l053r8_bus.o(i.BSP_SPI1_SendRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>

<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler &rArr; BSP_SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[5c]"></a>HAL_EXTI_GetHandle</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_exti.o(i.HAL_EXTI_GetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EXTI_GetHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
</UL>

<P><STRONG><a name="[50]"></a>HAL_EXTI_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l0xx_hal_exti.o(i.HAL_EXTI_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>HAL_EXTI_RegisterCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_exti.o(i.HAL_EXTI_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
</UL>

<P><STRONG><a name="[5e]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspDeInit
</UL>

<P><STRONG><a name="[4c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[5f]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
</UL>

<P><STRONG><a name="[60]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Toggle
</UL>

<P><STRONG><a name="[61]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_OFF
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrReg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtIrq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledInit
</UL>

<P><STRONG><a name="[4a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[7b]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[62]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>HAL_InitTick</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[64]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[66]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspDeInit
</UL>

<P><STRONG><a name="[4e]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[4d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MspInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[68]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 698 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[69]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 546 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[55]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[6a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[6b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1692 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2d]"></a>HAL_SPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_AbortCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[2c]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[53]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[6c]"></a>HAL_SPI_Init</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[2e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[57]"></a>HAL_SPI_RegisterCallback</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_RegisterCallback &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_RegisterDefaultMspCallbacks
</UL>

<P><STRONG><a name="[27]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[2a]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[5a]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>

<P><STRONG><a name="[26]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[29]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[28]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[2b]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Init)
</UL>
<P><STRONG><a name="[65]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[6f]"></a>HAL_UART_Init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
</UL>

<P><STRONG><a name="[70]"></a>HAL_UART_MspInit</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, stm32l0xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[74]"></a>HAL_UART_Transmit</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>MX_SPI1_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nucleo_l053r8_bus.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
</UL>

<P><STRONG><a name="[76]"></a>NFC06A1_LED_Init</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, nfc06a1.o(i.NFC06A1_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NFC06A1_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>NFC06A1_LED_OFF</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nfc06a1.o(i.NFC06A1_LED_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NFC06A1_LED_OFF &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>NFC06A1_LED_Toggle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nfc06a1.o(i.NFC06A1_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NFC06A1_LED_Toggle &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SystemClock_Config</STRONG> (Thumb, 150 bytes, Stack size 128 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[73]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[71]"></a>UART_SetConfig</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[75]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[7f]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[80]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[194]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[195]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[196]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[ac]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[45]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, demo_polling.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RegisterCallback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[197]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[198]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[199]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5d]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetHandle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>

<P><STRONG><a name="[8a]"></a>demoCycle</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, demo_polling.o(i.demoCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = demoCycle &rArr; demoP2P &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetActiveDevice
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>demoIni</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, demo_polling.o(i.demoIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = demoIni &rArr; rfalNfcDeactivate &rArr; rfalNfcDeactivation &rArr; rfalNfcDepRLS &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>demoTransceiveBlocking</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, demo_polling.o(i.demoTransceiveBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
</UL>

<P><STRONG><a name="[88]"></a>hex2Str</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, logger.o(i.hex2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
</UL>

<P><STRONG><a name="[15b]"></a>iso15693PhyConfigure</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfal_iso15693_2.o(i.iso15693PhyConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iso15693PhyConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[9a]"></a>iso15693VCDCode</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, rfal_iso15693_2.o(i.iso15693VCDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = iso15693VCDCode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[9c]"></a>iso15693VICCDecode</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, rfal_iso15693_2.o(i.iso15693VICCDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = iso15693VICCDecode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[89]"></a>logUsart</STRONG> (Thumb, 48 bytes, Stack size 280 bytes, logger.o(i.logUsart))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = logUsart &rArr; logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNotif
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
</UL>

<P><STRONG><a name="[af]"></a>logUsartInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, logger.o(i.logUsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = logUsartInit &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>logUsartTx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logger.o(i.logUsartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = main &rArr; demoCycle &rArr; demoP2P &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Toggle
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_OFF
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC06A1_LED_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[126]"></a>rfalAnalogConfigInitialize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_analogconfig.o(i.rfalAnalogConfigInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[be]"></a>rfalCalibrate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rfalCalibrate &rArr; st25r3916AdjustRegulators &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[c1]"></a>rfalChipChangeRegBits</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rfal_rfst25r3916.o(i.rfalChipChangeRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916IsRegValid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[c4]"></a>rfalChipChangeTestRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalChipChangeTestRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rfalChipChangeTestRegBits &rArr; st25r3916ChangeTestRegisterBits &rArr; st25r3916WriteTestRegister &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[9b]"></a>rfalCrcCalculateCcitt</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, rfal_crc.o(i.rfalCrcCalculateCcitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[d0]"></a>rfalFeliCaPoll</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, rfal_rfst25r3916.o(i.rfalFeliCaPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
</UL>

<P><STRONG><a name="[d3]"></a>rfalFieldOff</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalFieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rfalFieldOff &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[d5]"></a>rfalFieldOnAndStartGT</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rfal_rfst25r3916.o(i.rfalFieldOnAndStartGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalFieldOnAndStartGT &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[120]"></a>rfalGetBitRate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalGetBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[fb]"></a>rfalGetFDTPoll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalGetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[9f]"></a>rfalGetTransceiveStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalGetTransceiveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetRATSStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetPPSSTatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetATTRIBStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[d8]"></a>rfalISO14443ATransceiveAnticollisionFrame</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, rfal_rfst25r3916.o(i.rfalISO14443ATransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
</UL>

<P><STRONG><a name="[de]"></a>rfalISO14443ATransceiveShortFrame</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rfal_rfst25r3916.o(i.rfalISO14443ATransceiveShortFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>

<P><STRONG><a name="[e5]"></a>rfalISO15693TransceiveAnticollisionFrame</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, rfal_rfst25r3916.o(i.rfalISO15693TransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>

<P><STRONG><a name="[e6]"></a>rfalISO15693TransceiveEOF</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rfal_rfst25r3916.o(i.rfalISO15693TransceiveEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalISO15693TransceiveEOF &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[e8]"></a>rfalISO15693TransceiveEOFAnticollision</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfal_rfst25r3916.o(i.rfalISO15693TransceiveEOFAnticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rfalISO15693TransceiveEOFAnticollision &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[e9]"></a>rfalInitialize</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalInitialize &rArr; st25r3916Initialize &rArr; st25r3916MeasureVoltage &rArr; st25r3916MeasurePowerSupply &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[ec]"></a>rfalIsExtFieldOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalIsExtFieldOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rfalIsExtFieldOn &rArr; st25r3916CheckReg &rArr; st25r3916ReadRegister &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[df]"></a>rfalIsGTExpired</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalIsGTExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsGTExpired &rArr; timerIsExpired &rArr; BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[a7]"></a>rfalIsTransceiveInRx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalIsTransceiveInRx))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[164]"></a>rfalIsTransceiveInTx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalIsTransceiveInTx))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[ef]"></a>rfalIsoDepDeselect</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = rfalIsoDepDeselect &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[f1]"></a>rfalIsoDepFSxI2FSx</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, rfal_isodep.o(i.rfalIsoDepFSxI2FSx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfalIsoDepFSxI2FSx &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetRATSStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetATTRIBStatus
</UL>

<P><STRONG><a name="[a6]"></a>rfalIsoDepFWI2FWT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFWI2FWT))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[f3]"></a>rfalIsoDepGetApduTransceiveStatus</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, rfal_isodep.o(i.rfalIsoDepGetApduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[ee]"></a>rfalIsoDepGetMaxInfLen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetMaxInfLen))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
</UL>

<P><STRONG><a name="[f4]"></a>rfalIsoDepGetTransceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rfal_isodep.o(i.rfalIsoDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[a1]"></a>rfalIsoDepInitialize</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rfal_isodep.o(i.rfalIsoDepInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfalIsoDepInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[12a]"></a>rfalIsoDepIsRats</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepIsRats))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[f8]"></a>rfalIsoDepListenGetActivationStatus</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepListenGetActivationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rfalIsoDepListenGetActivationStatus &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[f9]"></a>rfalIsoDepListenStartActivation</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepListenStartActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rfalIsoDepListenStartActivation &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[fa]"></a>rfalIsoDepPollAGetActivationStatus</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, rfal_isodep.o(i.rfalIsoDepPollAGetActivationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = rfalIsoDepPollAGetActivationStatus &rArr; rfalIsoDepDeselect &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetFDTPoll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartRATS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartPPS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetRATSStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetPPSSTatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[101]"></a>rfalIsoDepPollAStartActivation</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepPollAStartActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rfalIsoDepPollAStartActivation &rArr; rfalIsoDepStartRATS &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartRATS
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[102]"></a>rfalIsoDepPollBGetActivationStatus</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rfal_isodep.o(i.rfalIsoDepPollBGetActivationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = rfalIsoDepPollBGetActivationStatus &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetATTRIBStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[103]"></a>rfalIsoDepPollBStartActivation</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, rfal_isodep.o(i.rfalIsoDepPollBStartActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rfalIsoDepPollBStartActivation &rArr; rfalIsoDepStartATTRIB &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbTR2ToFDT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartATTRIB
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[107]"></a>rfalIsoDepStartApduTransceive</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, rfal_isodep.o(i.rfalIsoDepStartApduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rfalIsoDepStartApduTransceive &rArr; rfalIsoDepStartTransceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[f5]"></a>rfalIsoDepStartTransceive</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalIsoDepStartTransceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[128]"></a>rfalListenGetState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalListenGetState))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[108]"></a>rfalListenSetState</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, rfal_rfst25r3916.o(i.rfalListenSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[10c]"></a>rfalListenSleepStart</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, rfal_rfst25r3916.o(i.rfalListenSleepStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rfalListenSleepStart &rArr; rfalListenStop &rArr; rfalFieldOff &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[10e]"></a>rfalListenStart</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, rfal_rfst25r3916.o(i.rfalListenStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = rfalListenStart &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[10d]"></a>rfalListenStop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalListenStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalListenStop &rArr; rfalFieldOff &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[99]"></a>rfalNfcDataExchangeGetStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDataExchangeGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = rfalNfcDataExchangeGetStatus &rArr; rfalNfcDepGetPduTransceiveStatus &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>

<P><STRONG><a name="[98]"></a>rfalNfcDataExchangeStart</STRONG> (Thumb, 410 bytes, Stack size 120 bytes, rfal_nfc.o(i.rfalNfcDataExchangeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rfalNfcDataExchangeStart &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>

<P><STRONG><a name="[8e]"></a>rfalNfcDeactivate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = rfalNfcDeactivate &rArr; rfalNfcDeactivation &rArr; rfalNfcDepRLS &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[119]"></a>rfalNfcDepATR</STRONG> (Thumb, 224 bytes, Stack size 256 bytes, rfal_nfcdep.o(i.rfalNfcDepATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[11f]"></a>rfalNfcDepCalculateRWT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepCalculateRWT))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[116]"></a>rfalNfcDepDSL</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepDSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = rfalNfcDepDSL &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[113]"></a>rfalNfcDepGetPduTransceiveStatus</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, rfal_nfcdep.o(i.rfalNfcDepGetPduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = rfalNfcDepGetPduTransceiveStatus &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPdu2BLockParam
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[11b]"></a>rfalNfcDepGetTransceiveStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.rfalNfcDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[11a]"></a>rfalNfcDepInitialize</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.rfalNfcDepInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalNfcDepInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[11e]"></a>rfalNfcDepInitiatorHandleActivation</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, rfal_nfcdep.o(i.rfalNfcDepInitiatorHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepCalculateRWT
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[123]"></a>rfalNfcDepIsAtrReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.rfalNfcDepIsAtrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfalNfcDepIsAtrReq &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[124]"></a>rfalNfcDepListenGetActivationStatus</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.rfalNfcDepListenGetActivationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rfalNfcDepListenGetActivationStatus &rArr; nfcipTargetHandleActivation &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[125]"></a>rfalNfcDepListenStartActivation</STRONG> (Thumb, 300 bytes, Stack size 128 bytes, rfal_nfcdep.o(i.rfalNfcDepListenStartActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = rfalNfcDepListenStartActivation &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepIsAtrReq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[121]"></a>rfalNfcDepPSL</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepPSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = rfalNfcDepPSL &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[117]"></a>rfalNfcDepRLS</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepRLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = rfalNfcDepRLS &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[114]"></a>rfalNfcDepStartPduTransceive</STRONG> (Thumb, 68 bytes, Stack size 88 bytes, rfal_nfcdep.o(i.rfalNfcDepStartPduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rfalNfcDepStartPduTransceive &rArr; rfalNfcDepStartTransceive &rArr; nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPdu2BLockParam
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[11d]"></a>rfalNfcDepStartTransceive</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfalNfcDepStartTransceive &rArr; nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[8f]"></a>rfalNfcDiscover</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfalNfcDiscover &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[8d]"></a>rfalNfcGetActiveDevice</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcGetActiveDevice))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[96]"></a>rfalNfcGetDevicesFound</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcGetDevicesFound))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNotif
</UL>

<P><STRONG><a name="[8c]"></a>rfalNfcGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcGetState))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[94]"></a>rfalNfcInitialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalNfcInitialize &rArr; rfalInitialize &rArr; st25r3916Initialize &rArr; st25r3916MeasureVoltage &rArr; st25r3916MeasurePowerSupply &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigInitialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
</UL>

<P><STRONG><a name="[97]"></a>rfalNfcSelect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcSelect))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNotif
</UL>

<P><STRONG><a name="[8b]"></a>rfalNfcWorker</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, rfal_nfc.o(i.rfalNfcWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeHasWoke
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenGetState
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[129]"></a>rfalNfcaListenerIsSleepReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_nfca.o(i.rfalNfcaListenerIsSleepReq))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[12f]"></a>rfalNfcaPollerCheckPresence</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rfal_nfca.o(i.rfalNfcaPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rfalNfcaPollerCheckPresence &rArr; rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[135]"></a>rfalNfcaPollerGetFullCollisionResolutionStatus</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rfal_nfca.o(i.rfalNfcaPollerGetFullCollisionResolutionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rfalNfcaPollerGetFullCollisionResolutionStatus &rArr; rfalNfcaPollerGetSingleCollisionResolutionStatus &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartSingleCollisionResolution
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[12e]"></a>rfalNfcaPollerInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalNfcaPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[12d]"></a>rfalNfcaPollerSelect</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, rfal_nfca.o(i.rfalNfcaPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rfalNfcaPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[145]"></a>rfalNfcaPollerSleep</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rfal_nfca.o(i.rfalNfcaPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
</UL>

<P><STRONG><a name="[136]"></a>rfalNfcaPollerStartFullCollisionResolution</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, rfal_nfca.o(i.rfalNfcaPollerStartFullCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rfalNfcaPollerStartFullCollisionResolution &rArr; rfalT1TPollerRid &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartSingleCollisionResolution
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[13d]"></a>rfalNfcaPollerTechnologyDetection</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rfalNfcaPollerTechnologyDetection &rArr; rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[130]"></a>rfalNfcbPollerCheckPresence</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, rfal_nfcb.o(i.rfalNfcbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[137]"></a>rfalNfcbPollerCollisionResolution</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, rfal_nfcb.o(i.rfalNfcbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = rfalNfcbPollerCollisionResolution &rArr; rfalNfcbPollerSlottedCollisionResolution &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[131]"></a>rfalNfcbPollerInitialize</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rfal_nfcb.o(i.rfalNfcbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[14c]"></a>rfalNfcbPollerSleep</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rfalNfcbPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>

<P><STRONG><a name="[14d]"></a>rfalNfcbPollerSlotMarker</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rfalNfcbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>

<P><STRONG><a name="[14b]"></a>rfalNfcbPollerSlottedCollisionResolution</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlottedCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = rfalNfcbPollerSlottedCollisionResolution &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
</UL>

<P><STRONG><a name="[13e]"></a>rfalNfcbPollerTechnologyDetection</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rfal_nfcb.o(i.rfalNfcbPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rfalNfcbPollerTechnologyDetection &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[104]"></a>rfalNfcbTR2ToFDT</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, rfal_nfcb.o(i.rfalNfcbTR2ToFDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfalNfcbTR2ToFDT
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
</UL>

<P><STRONG><a name="[95]"></a>rfalNfcfPollerCheck</STRONG> (Thumb, 276 bytes, Stack size 136 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
</UL>

<P><STRONG><a name="[13f]"></a>rfalNfcfPollerCheckPresence</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rfalNfcfPollerCheckPresence &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[138]"></a>rfalNfcfPollerCollisionResolution</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, rfal_nfcf.o(i.rfalNfcfPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = rfalNfcfPollerCollisionResolution &rArr; rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[122]"></a>rfalNfcfPollerInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rfal_nfcf.o(i.rfalNfcfPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalNfcfPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[150]"></a>rfalNfcfPollerPoll</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, rfal_nfcf.o(i.rfalNfcfPollerPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[140]"></a>rfalNfcvPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfal_nfcv.o(i.rfalNfcvPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rfalNfcvPollerCheckPresence &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[139]"></a>rfalNfcvPollerCollisionResolution</STRONG> (Thumb, 368 bytes, Stack size 208 bytes, rfal_nfcv.o(i.rfalNfcvPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[132]"></a>rfalNfcvPollerInitialize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rfal_nfcv.o(i.rfalNfcvPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalNfcvPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[151]"></a>rfalNfcvPollerInventory</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, rfal_nfcv.o(i.rfalNfcvPollerInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
</UL>

<P><STRONG><a name="[92]"></a>rfalNfcvPollerReadSingleBlock</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, rfal_nfcv.o(i.rfalNfcvPollerReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rfalNfcvPollerReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalISO15693TransceiveEOF &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[152]"></a>rfalNfcvPollerTransceiveReq</STRONG> (Thumb, 306 bytes, Stack size 104 bytes, rfal_nfcv.o(i.rfalNfcvPollerTransceiveReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = rfalNfcvPollerTransceiveReq &rArr; rfalISO15693TransceiveEOF &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
</UL>

<P><STRONG><a name="[d4]"></a>rfalSetAnalogConfig</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, rfal_analogconfig.o(i.rfalSetAnalogConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[bc]"></a>rfalSetBitRate</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, rfal_rfst25r3916.o(i.rfalSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916StreamConfigure
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693PhyConfigure
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[d1]"></a>rfalSetErrorHandling</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalSetErrorHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rfalSetErrorHandling &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAStartActivation
</UL>

<P><STRONG><a name="[13c]"></a>rfalSetFDTListen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetFDTListen))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[105]"></a>rfalSetFDTPoll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
</UL>

<P><STRONG><a name="[fc]"></a>rfalSetGT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalSetGT))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[10b]"></a>rfalSetMode</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, rfal_rfst25r3916.o(i.rfalSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[141]"></a>rfalSt25tbPollerCheckPresence</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rfalSt25tbPollerCheckPresence &rArr; rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[13a]"></a>rfalSt25tbPollerCollisionResolution</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = rfalSt25tbPollerCollisionResolution &rArr; rfalSt25tbPollerDoCollisionResolution &rArr; rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[160]"></a>rfalSt25tbPollerGetUID</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerGetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalSt25tbPollerGetUID &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[133]"></a>rfalSt25tbPollerInitialize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rfalSt25tbPollerInitialize &rArr; rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[15e]"></a>rfalSt25tbPollerInitiate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
</UL>

<P><STRONG><a name="[163]"></a>rfalSt25tbPollerPcall</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerPcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalSt25tbPollerPcall &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[15f]"></a>rfalSt25tbPollerSelect</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[162]"></a>rfalSt25tbPollerSlotMarker</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalSt25tbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[ab]"></a>rfalStartTransceive</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, rfal_rfst25r3916.o(i.rfalStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartRATS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartPPS
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartATTRIB
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[148]"></a>rfalT1TPollerInitialize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rfal_t1t.o(i.rfalT1TPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalT1TPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
</UL>

<P><STRONG><a name="[149]"></a>rfalT1TPollerRid</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, rfal_t1t.o(i.rfalT1TPollerRid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = rfalT1TPollerRid &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
</UL>

<P><STRONG><a name="[b5]"></a>rfalTransceiveBlockingRx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalTransceiveBlockingRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[a8]"></a>rfalTransceiveBlockingTx</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, rfal_rfst25r3916.o(i.rfalTransceiveBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[e7]"></a>rfalTransceiveBlockingTxRx</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, rfal_rfst25r3916.o(i.rfalTransceiveBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[143]"></a>rfalWakeUpModeHasWoke</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeHasWoke))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[142]"></a>rfalWakeUpModeStart</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalWakeUpModeStart &rArr; st25r3916CalibrateCapacitiveSensor &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePhase
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureCapacitance
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureAmplitude
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CalibrateCapacitiveSensor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[118]"></a>rfalWakeUpModeStop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rfalWakeUpModeStop &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[f0]"></a>rfalWorker</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInTx
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[c0]"></a>st25r3916AdjustRegulators</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, st25r3916.o(i.st25r3916AdjustRegulators))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = st25r3916AdjustRegulators &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[169]"></a>st25r3916CalibrateCapacitiveSensor</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, st25r3916.o(i.st25r3916CalibrateCapacitiveSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = st25r3916CalibrateCapacitiveSensor &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[c3]"></a>st25r3916ChangeRegisterBits</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916ChangeRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916StreamConfigure
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePowerSupply
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[c5]"></a>st25r3916ChangeTestRegisterBits</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, st25r3916_com.o(i.st25r3916ChangeTestRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916ChangeTestRegisterBits &rArr; st25r3916WriteTestRegister &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
</UL>

<P><STRONG><a name="[16d]"></a>st25r3916CheckChipID</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25r3916.o(i.st25r3916CheckChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916CheckChipID &rArr; st25r3916ReadRegister &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[16e]"></a>st25r3916CheckForReceivedInterrupts</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, st25r3916_irq.o(i.st25r3916CheckForReceivedInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916CheckForReceivedInterrupts &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtIrq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Isr
</UL>

<P><STRONG><a name="[bf]"></a>st25r3916CheckReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916CheckReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916CheckReg &rArr; st25r3916ReadRegister &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[109]"></a>st25r3916ClearAndEnableInterrupts</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25r3916_irq.o(i.st25r3916ClearAndEnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = st25r3916ClearAndEnableInterrupts &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[eb]"></a>st25r3916ClearInterrupts</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, st25r3916_irq.o(i.st25r3916ClearInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3916ClearInterrupts &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[c7]"></a>st25r3916ClrRegisterBits</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916ClrRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916ClrRegisterBits &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CalibrateCapacitiveSensor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>

<P><STRONG><a name="[dd]"></a>st25r3916DisableInterrupts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, st25r3916_irq.o(i.st25r3916DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = st25r3916DisableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[da]"></a>st25r3916EnableInterrupts</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st25r3916_irq.o(i.st25r3916EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[d2]"></a>st25r3916ExecuteCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = st25r3916ExecuteCommand &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtCmd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[16b]"></a>st25r3916ExecuteCommandAndGetResult</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, st25r3916.o(i.st25r3916ExecuteCommandAndGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePowerSupply
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePhase
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureCapacitance
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureAmplitude
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CalibrateCapacitiveSensor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
</UL>

<P><STRONG><a name="[d9]"></a>st25r3916GetInterrupt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, st25r3916_irq.o(i.st25r3916GetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25r3916GetInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearAndEnableInterrupts
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[155]"></a>st25r3916GetNumFIFOBytes</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st25r3916.o(i.st25r3916GetNumFIFOBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916GetNumFIFOBytes &rArr; st25r3916ReadRegister &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[177]"></a>st25r3916InitInterrupts</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, st25r3916_irq.o(i.st25r3916InitInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[ea]"></a>st25r3916Initialize</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = st25r3916Initialize &rArr; st25r3916MeasureVoltage &rArr; st25r3916MeasurePowerSupply &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916InitInterrupts
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureVoltage
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckChipID
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[c2]"></a>st25r3916IsRegValid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3916_com.o(i.st25r3916IsRegValid))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
</UL>

<P><STRONG><a name="[51]"></a>st25r3916Isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st25r3916_irq.o(i.st25r3916Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = st25r3916Isr &rArr; st25r3916CheckForReceivedInterrupts &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_IRQ_Callback
</UL>

<P><STRONG><a name="[157]"></a>st25r3916MeasureAmplitude</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916MeasureAmplitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = st25r3916MeasureAmplitude &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
</UL>

<P><STRONG><a name="[16a]"></a>st25r3916MeasureCapacitance</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916MeasureCapacitance))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = st25r3916MeasureCapacitance &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[159]"></a>st25r3916MeasurePhase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916MeasurePhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = st25r3916MeasurePhase &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
</UL>

<P><STRONG><a name="[17a]"></a>st25r3916MeasurePowerSupply</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916MeasurePowerSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = st25r3916MeasurePowerSupply &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureVoltage
</UL>

<P><STRONG><a name="[179]"></a>st25r3916MeasureVoltage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916MeasureVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = st25r3916MeasureVoltage &rArr; st25r3916MeasurePowerSupply &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePowerSupply
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[172]"></a>st25r3916ModifyInterrupts</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, st25r3916_irq.o(i.st25r3916ModifyInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
</UL>

<P><STRONG><a name="[15d]"></a>st25r3916ModifyRegister</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, st25r3916_com.o(i.st25r3916ModifyRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>

<P><STRONG><a name="[112]"></a>st25r3916OscOn</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916OscOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = st25r3916OscOn &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
</UL>

<P><STRONG><a name="[d7]"></a>st25r3916PerformCollisionAvoidance</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, st25r3916.o(i.st25r3916PerformCollisionAvoidance))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = st25r3916PerformCollisionAvoidance &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[cc]"></a>st25r3916ReadFifo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916ReadFifo &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[cf]"></a>st25r3916ReadMultipleRegisters</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916ReadMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>

<P><STRONG><a name="[dc]"></a>st25r3916ReadRegister</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3916ReadRegister &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetNumFIFOBytes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckChipID
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[16c]"></a>st25r3916ReadTestRegister</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916ReadTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916ReadTestRegister &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
</UL>

<P><STRONG><a name="[10a]"></a>st25r3916SetBitrate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, st25r3916.o(i.st25r3916SetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916SetBitrate &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[17c]"></a>st25r3916SetGPTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916SetGPTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3916SetGPTime &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
</UL>

<P><STRONG><a name="[e0]"></a>st25r3916SetNoResponseTime</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, st25r3916.o(i.st25r3916SetNoResponseTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = st25r3916SetNoResponseTime &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[167]"></a>st25r3916SetNumTxBits</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916SetNumTxBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3916SetNumTxBits &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[c8]"></a>st25r3916SetRegisterBits</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916SetRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3916SetRegisterBits &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916AdjustRegulators
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>

<P><STRONG><a name="[e1]"></a>st25r3916SetStartGPTimer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916SetStartGPTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetGPTime
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[15c]"></a>st25r3916StreamConfigure</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, st25r3916.o(i.st25r3916StreamConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = st25r3916StreamConfigure &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[e4]"></a>st25r3916WaitForInterruptsTimed</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, st25r3916_irq.o(i.st25r3916WaitForInterruptsTimed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = st25r3916WaitForInterruptsTimed &rArr; timerIsExpired &rArr; BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916PerformCollisionAvoidance
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916OscOn
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommandAndGetResult
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[168]"></a>st25r3916WriteFifo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916WriteFifo &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[17e]"></a>st25r3916WriteMultipleRegisters</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916WriteMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrMultiReg
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteRegister
</UL>

<P><STRONG><a name="[10f]"></a>st25r3916WritePTMem</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916WritePTMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916WritePTMem &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
</UL>

<P><STRONG><a name="[110]"></a>st25r3916WritePTMemF</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916WritePTMemF))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916WritePTMemF &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
</UL>

<P><STRONG><a name="[111]"></a>st25r3916WritePTMemTSN</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916WritePTMemTSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916WritePTMemTSN &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
</UL>

<P><STRONG><a name="[d6]"></a>st25r3916WriteRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyInterrupts
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ModifyRegister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916StreamConfigure
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNumTxBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNoResponseTime
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetGPTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetBitrate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[e3]"></a>st25r3916WriteTestRegister</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916WriteTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3916WriteTestRegister &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comStart
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeTestRegisterBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
</UL>

<P><STRONG><a name="[176]"></a>st25r3916ledEvtCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st25r3916_led.o(i.st25r3916ledEvtCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = st25r3916ledEvtCmd &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[171]"></a>st25r3916ledEvtIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st25r3916_led.o(i.st25r3916ledEvtIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st25r3916ledEvtIrq &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
</UL>

<P><STRONG><a name="[17f]"></a>st25r3916ledEvtWrMultiReg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, st25r3916_led.o(i.st25r3916ledEvtWrMultiReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st25r3916ledEvtWrMultiReg &rArr; st25r3916ledEvtWrReg &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
</UL>

<P><STRONG><a name="[180]"></a>st25r3916ledEvtWrReg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st25r3916_led.o(i.st25r3916ledEvtWrReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st25r3916ledEvtWrReg &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ledEvtWrMultiReg
</UL>

<P><STRONG><a name="[178]"></a>st25r3916ledInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st25r3916_led.o(i.st25r3916ledInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st25r3916ledInit &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916Initialize
</UL>

<P><STRONG><a name="[a9]"></a>timerCalculateTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.timerCalculateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerCalculateTimer &rArr; BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[a5]"></a>timerIsExpired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.timerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerIsExpired &rArr; BSP_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[86]"></a>demoAPDU</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, demo_polling.o(i.demoAPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = demoAPDU &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[91]"></a>demoNfcf</STRONG> (Thumb, 84 bytes, Stack size 104 bytes, demo_polling.o(i.demoNfcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = demoNfcf &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[31]"></a>demoNotif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, demo_polling.o(i.demoNotif))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = demoNotif &rArr; logUsart &rArr; logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcSelect
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetDevicesFound
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_polling.o(i.demoIni)
</UL>
<P><STRONG><a name="[90]"></a>demoP2P</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, demo_polling.o(i.demoP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = demoP2P &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[25]"></a>SPI1_MspDeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nucleo_l053r8_bus.o(i.SPI1_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nucleo_l053r8_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_MspInit</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, nucleo_l053r8_bus.o(i.SPI1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_RegisterCallback
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetHandle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nucleo_l053r8_bus.o(i.BSP_SPI1_RegisterDefaultMspCallbacks)
</UL>
<P><STRONG><a name="[17b]"></a>st25r3916comRx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st25r3916_com.o(i.st25r3916comRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3916comRx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
</UL>

<P><STRONG><a name="[173]"></a>st25r3916comStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916comStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st25r3916comStart &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[175]"></a>st25r3916comStop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916comStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st25r3916comStop &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[17d]"></a>st25r3916comTx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916comTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTxByte
</UL>

<P><STRONG><a name="[174]"></a>st25r3916comTxByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st25r3916_com.o(i.st25r3916comTxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916comTx
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemTSN
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMemF
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WritePTMem
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteMultipleRegisters
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadTestRegister
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
</UL>

<P><STRONG><a name="[16f]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, st25r3916_irq.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
</UL>

<P><STRONG><a name="[170]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, st25r3916_irq.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckForReceivedInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WaitForInterruptsTimed
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClearInterrupts
</UL>

<P><STRONG><a name="[67]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[6e]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[7a]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[15a]"></a>rfalAnalogConfigSearch</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, rfal_analogconfig.o(i.rfalAnalogConfigSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rfalAnalogConfigSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[32]"></a>iso15693PhyVCDCode1Of256</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iso15693PhyVCDCode1Of256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[33]"></a>iso15693PhyVCDCode1Of4</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iso15693PhyVCDCode1Of4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[a2]"></a>isoDepClearCounters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[9d]"></a>isoDepDataExchangePCD</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepDataExchangePCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[a4]"></a>isoDepDataExchangePICC</STRONG> (Thumb, 756 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepDataExchangePICC))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = isoDepDataExchangePICC &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[a0]"></a>isoDepHandleControlMsg</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepHandleControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[aa]"></a>isoDepReSendControlMsg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rfal_isodep.o(i.isoDepReSendControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[9e]"></a>isoDepTx</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, rfal_isodep.o(i.isoDepTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = isoDepTx &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[ed]"></a>rfalIsoDepApdu2IBLockParam</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepApdu2IBLockParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepApdu2IBLockParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetMaxInfLen
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[fe]"></a>rfalIsoDepCalcBitRate</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, rfal_isodep.o(i.rfalIsoDepCalcBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[f2]"></a>rfalIsoDepGetATTRIBStatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rfal_isodep.o(i.rfalIsoDepGetATTRIBStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rfalIsoDepGetATTRIBStatus &rArr; rfalIsoDepFSxI2FSx &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
</UL>

<P><STRONG><a name="[f6]"></a>rfalIsoDepGetPPSSTatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rfal_isodep.o(i.rfalIsoDepGetPPSSTatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalIsoDepGetPPSSTatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[f7]"></a>rfalIsoDepGetRATSStatus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rfal_isodep.o(i.rfalIsoDepGetRATSStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rfalIsoDepGetRATSStatus &rArr; rfalIsoDepFSxI2FSx &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[ff]"></a>rfalIsoDepSFGI2SFGT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfal_isodep.o(i.rfalIsoDepSFGI2SFGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rfalIsoDepSFGI2SFGT &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[106]"></a>rfalIsoDepStartATTRIB</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, rfal_isodep.o(i.rfalIsoDepStartATTRIB))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = rfalIsoDepStartATTRIB &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
</UL>

<P><STRONG><a name="[100]"></a>rfalIsoDepStartPPS</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepStartPPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalIsoDepStartPPS &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[fd]"></a>rfalIsoDepStartRATS</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepStartRATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalIsoDepStartRATS &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAStartActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
</UL>

<P><STRONG><a name="[115]"></a>rfalNfcDeactivation</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDeactivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = rfalNfcDeactivation &rArr; rfalNfcDepRLS &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepDSL
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenStop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
</UL>

<P><STRONG><a name="[127]"></a>rfalNfcListenActivation</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, rfal_nfc.o(i.rfalNfcListenActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = rfalNfcListenActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaListenerIsSleepReq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepIsAtrReq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenGetState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenStartActivation
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepListenGetActivationStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepIsRats
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[12b]"></a>rfalNfcNfcDepActivate</STRONG> (Thumb, 222 bytes, Stack size 144 bytes, rfal_nfc.o(i.rfalNfcNfcDepActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcListenActivation
</UL>

<P><STRONG><a name="[12c]"></a>rfalNfcPollActivation</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, rfal_nfc.o(i.rfalNfcPollActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBStartActivation
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBGetActivationStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAStartActivation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAGetActivationStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[134]"></a>rfalNfcPollCollResolution</STRONG> (Thumb, 788 bytes, Stack size 120 bytes, rfal_nfc.o(i.rfalNfcPollCollResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = rfalNfcPollCollResolution &rArr; rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[13b]"></a>rfalNfcPollTechDetetection</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, rfal_nfc.o(i.rfalNfcPollTechDetetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = rfalNfcPollTechDetetection &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[147]"></a>rfalNfcaCalculateBcc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaCalculateBcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalNfcaCalculateBcc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetSingleCollisionResolutionStatus
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
</UL>

<P><STRONG><a name="[144]"></a>rfalNfcaPollerGetSingleCollisionResolutionStatus</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, rfal_nfca.o(i.rfalNfcaPollerGetSingleCollisionResolutionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = rfalNfcaPollerGetSingleCollisionResolutionStatus &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
</UL>

<P><STRONG><a name="[146]"></a>rfalNfcaPollerStartSingleCollisionResolution</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, rfal_nfca.o(i.rfalNfcaPollerStartSingleCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rfalNfcaPollerStartSingleCollisionResolution
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerStartFullCollisionResolution
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerGetFullCollisionResolutionStatus
</UL>

<P><STRONG><a name="[14a]"></a>rfalNfcbCheckSensbRes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbCheckSensbRes))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>

<P><STRONG><a name="[b7]"></a>nfcipClearCounters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
</UL>

<P><STRONG><a name="[b0]"></a>nfcipConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nfcipConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
</UL>

<P><STRONG><a name="[b2]"></a>nfcipDEPControlMsg</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.nfcipDEPControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[b4]"></a>nfcipDataRx</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipDataRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = nfcipDataRx &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[b6]"></a>nfcipInitiatorHandleDEP</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.nfcipInitiatorHandleDEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = nfcipInitiatorHandleDEP &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[b8]"></a>nfcipRun</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, rfal_nfcdep.o(i.nfcipRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[ba]"></a>nfcipSetDEPParams</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipSetDEPParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
</UL>

<P><STRONG><a name="[bb]"></a>nfcipTargetHandleActivation</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.nfcipTargetHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = nfcipTargetHandleActivation &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenGetActivationStatus
</UL>

<P><STRONG><a name="[b9]"></a>nfcipTargetHandleRX</STRONG> (Thumb, 798 bytes, Stack size 88 bytes, rfal_nfcdep.o(i.nfcipTargetHandleRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[b3]"></a>nfcipTx</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, rfal_nfcdep.o(i.nfcipTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleActivation
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepListenStartActivation
</UL>

<P><STRONG><a name="[bd]"></a>nfcipTxRx</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.nfcipTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepDSL
</UL>

<P><STRONG><a name="[11c]"></a>rfalNfcDepPdu2BLockParam</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rfal_nfcdep.o(i.rfalNfcDepPdu2BLockParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalNfcDepPdu2BLockParam
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[14e]"></a>rfalNfcfComputeValidSENF</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, rfal_nfcf.o(i.rfalNfcfComputeValidSENF))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rfalNfcfComputeValidSENF &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[153]"></a>rfalNfcvParseError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvParseError))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[161]"></a>rfalSt25tbPollerDoCollisionResolution</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerDoCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rfalSt25tbPollerDoCollisionResolution &rArr; rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[c6]"></a>rfalCleanupTransceive</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalCleanupTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rfalCleanupTransceive &rArr; st25r3916SetRegisterBits &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[c9]"></a>rfalErrorHandling</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rfal_rfst25r3916.o(i.rfalErrorHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rfalErrorHandling &rArr; rfalFIFOStatusIsIncompleteByte &rArr; rfalFIFOStatusUpdate &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[cd]"></a>rfalFIFOGetNumIncompleteBits</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalFIFOGetNumIncompleteBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalFIFOGetNumIncompleteBits &rArr; rfalFIFOStatusUpdate &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[ca]"></a>rfalFIFOStatusGetNumBytes</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalFIFOStatusGetNumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalFIFOStatusGetNumBytes &rArr; rfalFIFOStatusUpdate &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[cb]"></a>rfalFIFOStatusIsIncompleteByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalFIFOStatusIsIncompleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalFIFOStatusIsIncompleteByte &rArr; rfalFIFOStatusUpdate &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[ce]"></a>rfalFIFOStatusUpdate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalFIFOStatusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = rfalFIFOStatusUpdate &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>

<P><STRONG><a name="[e2]"></a>rfalPrepareTransceive</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, rfal_rfst25r3916.o(i.rfalPrepareTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetRegisterBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916EnableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetStartGPTimer
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[154]"></a>rfalRunListenModeWorker</STRONG> (Thumb, 796 bytes, Stack size 32 bytes, rfal_rfst25r3916.o(i.rfalRunListenModeWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916DisableInterrupts
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ClrRegisterBits
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetNumFIFOBytes
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSleepStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[156]"></a>rfalRunWakeUpModeWorker</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, rfal_rfst25r3916.o(i.rfalRunWakeUpModeWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalRunWakeUpModeWorker &rArr; st25r3916MeasurePhase &rArr; st25r3916ExecuteCommandAndGetResult &rArr; st25r3916EnableInterrupts &rArr; st25r3916ModifyInterrupts &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadRegister
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ChangeRegisterBits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasurePhase
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916MeasureAmplitude
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[db]"></a>rfalTransceiveRunBlockingTx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_rfst25r3916.o(i.rfalTransceiveRunBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalRunListenModeWorker &rArr; rfalListenSetState &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInTx
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[165]"></a>rfalTransceiveRx</STRONG> (Thumb, 934 bytes, Stack size 40 bytes, rfal_rfst25r3916.o(i.rfalTransceiveRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = rfalTransceiveRx &rArr; rfalErrorHandling &rArr; rfalFIFOStatusIsIncompleteByte &rArr; rfalFIFOStatusUpdate &rArr; st25r3916ReadMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ReadFifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[166]"></a>rfalTransceiveTx</STRONG> (Thumb, 638 bytes, Stack size 72 bytes, rfal_rfst25r3916.o(i.rfalTransceiveTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3916SetStartGPTimer &rArr; st25r3916ChangeRegisterBits &rArr; st25r3916ModifyRegister &rArr; st25r3916WriteRegister &rArr; st25r3916WriteMultipleRegisters &rArr; st25r3916comTxByte &rArr; st25r3916comTx &rArr; BSP_SPI1_SendRecv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteTestRegister
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916WriteFifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916GetInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916ExecuteCommand
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916CheckReg
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3916SetNumTxBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[158]"></a>rfalWakeUpModeFilter</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rfal_rfst25r3916.o(i.rfalWakeUpModeFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rfalWakeUpModeFilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunWakeUpModeWorker
</UL>

<P><STRONG><a name="[82]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[85]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[84]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
