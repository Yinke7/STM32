
TestZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cba8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ca0  0801cd8c  0801cd8c  0002cd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ea2c  0801ea2c  000301b0  2**0
                  CONTENTS
  4 .ARM          00000000  0801ea2c  0801ea2c  000301b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801ea2c  0801ea2c  000301b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ea2c  0801ea2c  0002ea2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ea30  0801ea30  0002ea30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  0801ea34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b34  200001b0  0801ebe4  000301b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ce4  0801ebe4  00033ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e3eb  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008e19  00000000  00000000  0007e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec0  00000000  00000000  000873e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000287e0  00000000  00000000  000892a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033b04  00000000  00000000  000b1a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b973e  00000000  00000000  000e5584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0019ecc2  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b78  00000000  00000000  0019ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082cc  00000000  00000000  001a0890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001b0 	.word	0x200001b0
 8000200:	00000000 	.word	0x00000000
 8000204:	0801cd74 	.word	0x0801cd74

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001b4 	.word	0x200001b4
 8000220:	0801cd74 	.word	0x0801cd74

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <hex2Str>:
uint8_t hexStrIdx = 0;
#endif /* #if USE_LOGGER == LOGGER_ON */


char* hex2Str(unsigned char * data, size_t dataLen)
{
 8000234:	b480      	push	{r7}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 8000242:	4b36      	ldr	r3, [pc, #216]	; (800031c <hex2Str+0xe8>)
 8000244:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 8000246:	4b36      	ldr	r3, [pc, #216]	; (8000320 <hex2Str+0xec>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	01db      	lsls	r3, r3, #7
 800024c:	4a35      	ldr	r2, [pc, #212]	; (8000324 <hex2Str+0xf0>)
 800024e:	4413      	add	r3, r2
 8000250:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 8000256:	4b32      	ldr	r3, [pc, #200]	; (8000320 <hex2Str+0xec>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	73fb      	strb	r3, [r7, #15]

    if( dataLen > (MAX_HEX_STR_LENGTH/2) )
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	2b40      	cmp	r3, #64	; 0x40
 8000260:	d901      	bls.n	8000266 <hex2Str+0x32>
    {
      dataLen = (MAX_HEX_STR_LENGTH/2);
 8000262:	2340      	movs	r3, #64	; 0x40
 8000264:	603b      	str	r3, [r7, #0]
    }

    if(dataLen == 0)
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d120      	bne.n	80002ae <hex2Str+0x7a>
    {
      pout[0] = 0;
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
 8000272:	e03c      	b.n	80002ee <hex2Str+0xba>
    }
    else
    {
      for(; i < dataLen - 1; ++i)
      {
          *pout++ = hex[(*pin>>4)&0xF];
 8000274:	69fb      	ldr	r3, [r7, #28]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	091b      	lsrs	r3, r3, #4
 800027a:	b2db      	uxtb	r3, r3
 800027c:	f003 030f 	and.w	r3, r3, #15
 8000280:	693a      	ldr	r2, [r7, #16]
 8000282:	441a      	add	r2, r3
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	1c59      	adds	r1, r3, #1
 8000288:	61b9      	str	r1, [r7, #24]
 800028a:	7812      	ldrb	r2, [r2, #0]
 800028c:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	1c5a      	adds	r2, r3, #1
 8000292:	61fa      	str	r2, [r7, #28]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	441a      	add	r2, r3
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1c59      	adds	r1, r3, #1
 80002a2:	61b9      	str	r1, [r7, #24]
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	701a      	strb	r2, [r3, #0]
      for(; i < dataLen - 1; ++i)
 80002a8:	7dfb      	ldrb	r3, [r7, #23]
 80002aa:	3301      	adds	r3, #1
 80002ac:	75fb      	strb	r3, [r7, #23]
 80002ae:	7dfa      	ldrb	r2, [r7, #23]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d3dd      	bcc.n	8000274 <hex2Str+0x40>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	091b      	lsrs	r3, r3, #4
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	693a      	ldr	r2, [r7, #16]
 80002c6:	441a      	add	r2, r3
 80002c8:	69bb      	ldr	r3, [r7, #24]
 80002ca:	1c59      	adds	r1, r3, #1
 80002cc:	61b9      	str	r1, [r7, #24]
 80002ce:	7812      	ldrb	r2, [r2, #0]
 80002d0:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	f003 030f 	and.w	r3, r3, #15
 80002da:	693a      	ldr	r2, [r7, #16]
 80002dc:	441a      	add	r2, r3
 80002de:	69bb      	ldr	r3, [r7, #24]
 80002e0:	1c59      	adds	r1, r3, #1
 80002e2:	61b9      	str	r1, [r7, #24]
 80002e4:	7812      	ldrb	r2, [r2, #0]
 80002e6:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]
    }

    hexStrIdx++;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <hex2Str+0xec>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	3301      	adds	r3, #1
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <hex2Str+0xec>)
 80002f8:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <hex2Str+0xec>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f003 0303 	and.w	r3, r3, #3
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <hex2Str+0xec>)
 8000306:	701a      	strb	r2, [r3, #0]

    return hexStr[idx];
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	01db      	lsls	r3, r3, #7
 800030c:	4a05      	ldr	r2, [pc, #20]	; (8000324 <hex2Str+0xf0>)
 800030e:	4413      	add	r3, r2
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8000310:	4618      	mov	r0, r3
 8000312:	3724      	adds	r7, #36	; 0x24
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	0801cd8c 	.word	0x0801cd8c
 8000320:	200001cc 	.word	0x200001cc
 8000324:	20003a38 	.word	0x20003a38

08000328 <checkUserButton>:
 *  This function check whethe the user button has been pressed
 *****************************************************************************
 */

static void checkUserButton(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    /* Check if USER button is pressed */
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 800032c:	2110      	movs	r1, #16
 800032e:	481e      	ldr	r0, [pc, #120]	; (80003a8 <checkUserButton+0x80>)
 8000330:	f003 fa0e 	bl	8003750 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d033      	beq.n	80003a2 <checkUserButton+0x7a>
//add yinke
//	if(buttonflag)
//end add
    {
        ndefDemoFeature++;
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <checkUserButton+0x84>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	3301      	adds	r3, #1
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <checkUserButton+0x84>)
 8000344:	701a      	strb	r2, [r3, #0]
        ndefDemoFeature %= NDEF_DEMO_MAX_FEATURES;
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <checkUserButton+0x84>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	f003 0303 	and.w	r3, r3, #3
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <checkUserButton+0x84>)
 8000352:	701a      	strb	r2, [r3, #0]

        ndefDemoPrevFeature = ndefDemoFeature;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <checkUserButton+0x84>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <checkUserButton+0x88>)
 800035a:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <checkUserButton+0x84>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <checkUserButton+0x8c>)
 8000364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000368:	4619      	mov	r1, r3
 800036a:	4813      	ldr	r0, [pc, #76]	; (80003b8 <checkUserButton+0x90>)
 800036c:	f01b fcd0 	bl	801bd10 <iprintf>
        /* Debounce button */
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 8000370:	bf00      	nop
 8000372:	2110      	movs	r1, #16
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <checkUserButton+0x80>)
 8000376:	f003 f9eb 	bl	8003750 <HAL_GPIO_ReadPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b01      	cmp	r3, #1
 800037e:	d1f8      	bne.n	8000372 <checkUserButton+0x4a>
//add yinke
//        buttonflag = false;
//end add
        if( ndefDemoFeature != NDEF_DEMO_READ )
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <checkUserButton+0x84>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d00c      	beq.n	80003a2 <checkUserButton+0x7a>
        {
            timer = platformTimerCreate(NDEF_WRITE_FORMAT_TIMEOUT);
 8000388:	f242 7010 	movw	r0, #10000	; 0x2710
 800038c:	f01b fc34 	bl	801bbf8 <timerCalculateTimer>
 8000390:	4603      	mov	r3, r0
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <checkUserButton+0x94>)
 8000394:	6013      	str	r3, [r2, #0]
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000396:	20fa      	movs	r0, #250	; 0xfa
 8000398:	f01b fc2e 	bl	801bbf8 <timerCalculateTimer>
 800039c:	4603      	mov	r3, r0
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <checkUserButton+0x98>)
 80003a0:	6013      	str	r3, [r2, #0]
        }
    }
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40011800 	.word	0x40011800
 80003ac:	20000938 	.word	0x20000938
 80003b0:	200000a3 	.word	0x200000a3
 80003b4:	20000054 	.word	0x20000054
 80003b8:	0801ce84 	.word	0x0801ce84
 80003bc:	2000293c 	.word	0x2000293c
 80003c0:	20002940 	.word	0x20002940

080003c4 <ndefShowDemoUsage>:
 *
 *  This function displays usage information
 *****************************************************************************
 */
static void ndefShowDemoUsage()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
#if NDEF_FEATURE_ALL
    uint32_t i;
    
    platformLog("Use the User button to cycle among the different modes:\r\n");
 80003ca:	480e      	ldr	r0, [pc, #56]	; (8000404 <ndefShowDemoUsage+0x40>)
 80003cc:	f01b fd3a 	bl	801be44 <puts>
    for (i = 0; i < SIZEOF_ARRAY(ndefDemoFeatureDescription); i++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	e00a      	b.n	80003ec <ndefShowDemoUsage+0x28>
    {
        platformLog("%s\r\n", ndefDemoFeatureDescription[i]);
 80003d6:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <ndefShowDemoUsage+0x44>)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003de:	4619      	mov	r1, r3
 80003e0:	480a      	ldr	r0, [pc, #40]	; (800040c <ndefShowDemoUsage+0x48>)
 80003e2:	f01b fc95 	bl	801bd10 <iprintf>
    for (i = 0; i < SIZEOF_ARRAY(ndefDemoFeatureDescription); i++)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3301      	adds	r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	d9f1      	bls.n	80003d6 <ndefShowDemoUsage+0x12>
    }
    platformLog("In Write or Format mode (menu 2, 3 or 4), the demo returns to Read mode (menu 1) if no tag detected after %d seconds\r\n\n", NDEF_WRITE_FORMAT_TIMEOUT/1000);
 80003f2:	210a      	movs	r1, #10
 80003f4:	4806      	ldr	r0, [pc, #24]	; (8000410 <ndefShowDemoUsage+0x4c>)
 80003f6:	f01b fc8b 	bl	801bd10 <iprintf>
#endif /* NDEF_FEATURE_ALL */
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	0801ce8c 	.word	0x0801ce8c
 8000408:	20000054 	.word	0x20000054
 800040c:	0801ce84 	.word	0x0801ce84
 8000410:	0801cec8 	.word	0x0801cec8

08000414 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8000414:	b5b0      	push	{r4, r5, r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
    ReturnCode err;
//add yinke 注释
//#if defined(STM32L476xx)
//    if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
//    {
    verbose = true;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <demoIni+0xa4>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
//add yinke 注释
//    }
//#endif
    ndefShowDemoUsage();
 8000420:	f7ff ffd0 	bl	80003c4 <ndefShowDemoUsage>
    
    err = rfalNfcInitialize();
 8000424:	f00e ff1a 	bl	800f25c <rfalNfcInitialize>
 8000428:	4603      	mov	r3, r0
 800042a:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 800042c:	88fb      	ldrh	r3, [r7, #6]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d13d      	bne.n	80004ae <demoIni+0x9a>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <demoIni+0xa8>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000438:	4b20      	ldr	r3, [pc, #128]	; (80004bc <demoIni+0xa8>)
 800043a:	2201      	movs	r2, #1
 800043c:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 800043e:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <demoIni+0xa8>)
 8000440:	2201      	movs	r2, #1
 8000442:	721a      	strb	r2, [r3, #8]
        discParam.ap2pBR        = RFAL_BR_424;
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <demoIni+0xa8>)
 8000446:	2202      	movs	r2, #2
 8000448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <demoIni+0xa8>)
 800044e:	491c      	ldr	r1, [pc, #112]	; (80004c0 <demoIni+0xac>)
 8000450:	f103 0209 	add.w	r2, r3, #9
 8000454:	460b      	mov	r3, r1
 8000456:	cb03      	ldmia	r3!, {r0, r1}
 8000458:	6010      	str	r0, [r2, #0]
 800045a:	6051      	str	r1, [r2, #4]
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	8113      	strh	r3, [r2, #8]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000460:	4b16      	ldr	r3, [pc, #88]	; (80004bc <demoIni+0xa8>)
 8000462:	4a18      	ldr	r2, [pc, #96]	; (80004c4 <demoIni+0xb0>)
 8000464:	f103 0513 	add.w	r5, r3, #19
 8000468:	4614      	mov	r4, r2
 800046a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800046c:	6028      	str	r0, [r5, #0]
 800046e:	6069      	str	r1, [r5, #4]
 8000470:	60aa      	str	r2, [r5, #8]
 8000472:	60eb      	str	r3, [r5, #12]
 8000474:	6820      	ldr	r0, [r4, #0]
 8000476:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <demoIni+0xa8>)
 800047a:	2214      	movs	r2, #20
 800047c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        discParam.notifyCb             = NULL;
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <demoIni+0xa8>)
 8000482:	2200      	movs	r2, #0
 8000484:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <demoIni+0xa8>)
 8000488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800048c:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = false;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <demoIni+0xa8>)
 8000490:	2200      	movs	r2, #0
 8000492:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <demoIni+0xa8>)
 8000498:	2201      	movs	r2, #1
 800049a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB );
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <demoIni+0xa8>)
 80004a0:	222f      	movs	r2, #47	; 0x2f
 80004a2:	805a      	strh	r2, [r3, #2]
      
      discParam.techs2Find |= ( RFAL_NFC_LISTEN_TECH_A | RFAL_NFC_LISTEN_TECH_F );
      
#endif /* ST25R3916 */

        state = DEMO_ST_START_DISCOVERY;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <demoIni+0xb4>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
        return true;
 80004aa:	2301      	movs	r3, #1
 80004ac:	e000      	b.n	80004b0 <demoIni+0x9c>
    }
    return false;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bdb0      	pop	{r4, r5, r7, pc}
 80004b8:	20000939 	.word	0x20000939
 80004bc:	200002d4 	.word	0x200002d4
 80004c0:	20000000 	.word	0x20000000
 80004c4:	2000000c 	.word	0x2000000c
 80004c8:	20000360 	.word	0x20000360

080004cc <demoCycle>:
 *  This function executes the demo state machine. 
 *  It must be called periodically
 *****************************************************************************
 */
void demoCycle( void )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09a      	sub	sp, #104	; 0x68
 80004d0:	af02      	add	r7, sp, #8
    rfalNfcaSelRes        selRes;
    
    rfalNfcbSensbRes      sensbRes;
    uint8_t               sensbResLen;
    
    uint8_t               devCnt = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    rfalFeliCaPollRes     cardList[1];
    uint8_t               collisions = 0U;
 80004d8:	2300      	movs	r3, #0
 80004da:	77fb      	strb	r3, [r7, #31]
    rfalNfcfSensfRes*     sensfRes;

    rfalNfcvInventoryRes  invRes;
    uint16_t              rcvdLen;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 80004dc:	f00e ffc8 	bl	800f470 <rfalNfcWorker>
    
    if( (ndefDemoFeature != NDEF_DEMO_READ) && (platformTimerIsExpired(timer)) )
 80004e0:	4ba8      	ldr	r3, [pc, #672]	; (8000784 <demoCycle+0x2b8>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00d      	beq.n	8000504 <demoCycle+0x38>
 80004e8:	4ba7      	ldr	r3, [pc, #668]	; (8000788 <demoCycle+0x2bc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f01b fb91 	bl	801bc14 <timerIsExpired>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d005      	beq.n	8000504 <demoCycle+0x38>
    {
        platformLog("Timer expired, back to Read mode...\r\n");
 80004f8:	48a4      	ldr	r0, [pc, #656]	; (800078c <demoCycle+0x2c0>)
 80004fa:	f01b fca3 	bl	801be44 <puts>
        ndefDemoFeature = NDEF_DEMO_READ;
 80004fe:	4ba1      	ldr	r3, [pc, #644]	; (8000784 <demoCycle+0x2b8>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
    }
    
    if( ndefDemoFeature != ndefDemoPrevFeature )
 8000504:	4b9f      	ldr	r3, [pc, #636]	; (8000784 <demoCycle+0x2b8>)
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4ba1      	ldr	r3, [pc, #644]	; (8000790 <demoCycle+0x2c4>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d00f      	beq.n	8000530 <demoCycle+0x64>
    {
        ndefDemoPrevFeature = ndefDemoFeature;
 8000510:	4b9c      	ldr	r3, [pc, #624]	; (8000784 <demoCycle+0x2b8>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b9e      	ldr	r3, [pc, #632]	; (8000790 <demoCycle+0x2c4>)
 8000516:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8000518:	4b9a      	ldr	r3, [pc, #616]	; (8000784 <demoCycle+0x2b8>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b9d      	ldr	r3, [pc, #628]	; (8000794 <demoCycle+0x2c8>)
 8000520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000524:	4619      	mov	r1, r3
 8000526:	489c      	ldr	r0, [pc, #624]	; (8000798 <demoCycle+0x2cc>)
 8000528:	f01b fbf2 	bl	801bd10 <iprintf>
        ledsOff();
 800052c:	f001 fa78 	bl	8001a20 <ledsOff>
    }
    
    if( ndefDemoFeature != NDEF_DEMO_READ )
 8000530:	4b94      	ldr	r3, [pc, #592]	; (8000784 <demoCycle+0x2b8>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d025      	beq.n	8000584 <demoCycle+0xb8>
    {
        if( platformTimerIsExpired(timerLed) )
 8000538:	4b98      	ldr	r3, [pc, #608]	; (800079c <demoCycle+0x2d0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f01b fb69 	bl	801bc14 <timerIsExpired>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d014      	beq.n	8000572 <demoCycle+0xa6>
        {
            timerLed = platformTimerCreate(NDEF_LED_BLINK_DURATION);
 8000548:	20fa      	movs	r0, #250	; 0xfa
 800054a:	f01b fb55 	bl	801bbf8 <timerCalculateTimer>
 800054e:	4603      	mov	r3, r0
 8000550:	4a92      	ldr	r2, [pc, #584]	; (800079c <demoCycle+0x2d0>)
 8000552:	6013      	str	r3, [r2, #0]
            ledOn = !ledOn;
 8000554:	4b92      	ldr	r3, [pc, #584]	; (80007a0 <demoCycle+0x2d4>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	bf14      	ite	ne
 800055c:	2301      	movne	r3, #1
 800055e:	2300      	moveq	r3, #0
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f083 0301 	eor.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b8c      	ldr	r3, [pc, #560]	; (80007a0 <demoCycle+0x2d4>)
 8000570:	701a      	strb	r2, [r3, #0]
        }
        if( ledOn )
 8000572:	4b8b      	ldr	r3, [pc, #556]	; (80007a0 <demoCycle+0x2d4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <demoCycle+0xb4>
        {
            ledsOn();
 800057a:	f001 fa25 	bl	80019c8 <ledsOn>
 800057e:	e001      	b.n	8000584 <demoCycle+0xb8>
        }
        else
        {
            ledsOff();
 8000580:	f001 fa4e 	bl	8001a20 <ledsOff>
        }
    }
    
    checkUserButton();
 8000584:	f7ff fed0 	bl	8000328 <checkUserButton>
    
    /*******************************************************************************/
    /* Check if USER button is pressed */
    if( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN))
 8000588:	2110      	movs	r1, #16
 800058a:	4886      	ldr	r0, [pc, #536]	; (80007a4 <demoCycle+0x2d8>)
 800058c:	f003 f8e0 	bl	8003750 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	d01b      	beq.n	80005ce <demoCycle+0x102>
//add yinke
//    if(wakeupflag)
//end add
    {
        discParam.wakeupEnabled = !discParam.wakeupEnabled;    /* enable/disable wakeup */
 8000596:	4b84      	ldr	r3, [pc, #528]	; (80007a8 <demoCycle+0x2dc>)
 8000598:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f083 0301 	eor.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b7d      	ldr	r3, [pc, #500]	; (80007a8 <demoCycle+0x2dc>)
 80005b4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        state = DEMO_ST_START_DISCOVERY;                       /* restart loop          */
 80005b8:	4b7c      	ldr	r3, [pc, #496]	; (80007ac <demoCycle+0x2e0>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]

        /* Debounce button */
        while( platformGpioIsLow(PLATFORM_USER_BUTTON_PORT, PLATFORM_USER_BUTTON_PIN) );
 80005be:	bf00      	nop
 80005c0:	2110      	movs	r1, #16
 80005c2:	4878      	ldr	r0, [pc, #480]	; (80007a4 <demoCycle+0x2d8>)
 80005c4:	f003 f8c4 	bl	8003750 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d1f8      	bne.n	80005c0 <demoCycle+0xf4>
//add yinke
//        wakeupflag = false;
//end add
    }
    
    switch( state )
 80005ce:	4b77      	ldr	r3, [pc, #476]	; (80007ac <demoCycle+0x2e0>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d002      	beq.n	80005dc <demoCycle+0x110>
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d00c      	beq.n	80005f4 <demoCycle+0x128>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 80005da:	e23a      	b.n	8000a52 <demoCycle+0x586>
            ledsOff();
 80005dc:	f001 fa20 	bl	8001a20 <ledsOff>
            rfalNfcDeactivate( false );
 80005e0:	2000      	movs	r0, #0
 80005e2:	f00e feef 	bl	800f3c4 <rfalNfcDeactivate>
            rfalNfcDiscover( &discParam );
 80005e6:	4870      	ldr	r0, [pc, #448]	; (80007a8 <demoCycle+0x2dc>)
 80005e8:	f00e fe54 	bl	800f294 <rfalNfcDiscover>
            state = DEMO_ST_DISCOVERY;
 80005ec:	4b6f      	ldr	r3, [pc, #444]	; (80007ac <demoCycle+0x2e0>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	701a      	strb	r2, [r3, #0]
            break;
 80005f2:	e22e      	b.n	8000a52 <demoCycle+0x586>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 80005f4:	f00e ff0c 	bl	800f410 <rfalNfcGetState>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b1d      	cmp	r3, #29
 80005fc:	f240 8228 	bls.w	8000a50 <demoCycle+0x584>
 8000600:	f00e ff06 	bl	800f410 <rfalNfcGetState>
 8000604:	4603      	mov	r3, r0
 8000606:	2b21      	cmp	r3, #33	; 0x21
 8000608:	f200 8222 	bhi.w	8000a50 <demoCycle+0x584>
                rfalNfcGetActiveDevice( &nfcDevice );
 800060c:	4868      	ldr	r0, [pc, #416]	; (80007b0 <demoCycle+0x2e4>)
 800060e:	f00e ff09 	bl	800f424 <rfalNfcGetActiveDevice>
                ledsOff();
 8000612:	f001 fa05 	bl	8001a20 <ledsOff>
                platformDelay(50);
 8000616:	2032      	movs	r0, #50	; 0x32
 8000618:	f002 fcb2 	bl	8002f80 <HAL_Delay>
                ndefDemoPrevFeature = 0xFF; /* Force the display of the prompt */
 800061c:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <demoCycle+0x2c4>)
 800061e:	22ff      	movs	r2, #255	; 0xff
 8000620:	701a      	strb	r2, [r3, #0]
                switch( nfcDevice->type )
 8000622:	4b63      	ldr	r3, [pc, #396]	; (80007b0 <demoCycle+0x2e4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b05      	cmp	r3, #5
 800062a:	f200 8204 	bhi.w	8000a36 <demoCycle+0x56a>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <demoCycle+0x168>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	0800064d 	.word	0x0800064d
 8000638:	080007cd 	.word	0x080007cd
 800063c:	08000871 	.word	0x08000871
 8000640:	0800093b 	.word	0x0800093b
 8000644:	080009dd 	.word	0x080009dd
 8000648:	08000a09 	.word	0x08000a09
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4858      	ldr	r0, [pc, #352]	; (80007b4 <demoCycle+0x2e8>)
 8000654:	f003 f893 	bl	800377e <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8000658:	4b55      	ldr	r3, [pc, #340]	; (80007b0 <demoCycle+0x2e4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b60      	cmp	r3, #96	; 0x60
 8000660:	d033      	beq.n	80006ca <demoCycle+0x1fe>
 8000662:	2b60      	cmp	r3, #96	; 0x60
 8000664:	dc43      	bgt.n	80006ee <demoCycle+0x222>
 8000666:	2b40      	cmp	r3, #64	; 0x40
 8000668:	d02f      	beq.n	80006ca <demoCycle+0x1fe>
 800066a:	2b40      	cmp	r3, #64	; 0x40
 800066c:	dc3f      	bgt.n	80006ee <demoCycle+0x222>
 800066e:	2b01      	cmp	r3, #1
 8000670:	d002      	beq.n	8000678 <demoCycle+0x1ac>
 8000672:	2b20      	cmp	r3, #32
 8000674:	d012      	beq.n	800069c <demoCycle+0x1d0>
 8000676:	e03a      	b.n	80006ee <demoCycle+0x222>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000678:	4b4d      	ldr	r3, [pc, #308]	; (80007b0 <demoCycle+0x2e4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <demoCycle+0x2e4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	7f1b      	ldrb	r3, [r3, #28]
 8000684:	4619      	mov	r1, r3
 8000686:	4610      	mov	r0, r2
 8000688:	f7ff fdd4 	bl	8000234 <hex2Str>
 800068c:	4603      	mov	r3, r0
 800068e:	4619      	mov	r1, r3
 8000690:	4849      	ldr	r0, [pc, #292]	; (80007b8 <demoCycle+0x2ec>)
 8000692:	f01b fb3d 	bl	801bd10 <iprintf>
                                rfalNfcaPollerSleep();
 8000696:	f013 ff03 	bl	80144a0 <rfalNfcaPollerSleep>
                                break;
 800069a:	e03f      	b.n	800071c <demoCycle+0x250>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800069c:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <demoCycle+0x2e4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	699a      	ldr	r2, [r3, #24]
 80006a2:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <demoCycle+0x2e4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	7f1b      	ldrb	r3, [r3, #28]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4610      	mov	r0, r2
 80006ac:	f7ff fdc2 	bl	8000234 <hex2Str>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4619      	mov	r1, r3
 80006b4:	4841      	ldr	r0, [pc, #260]	; (80007bc <demoCycle+0x2f0>)
 80006b6:	f01b fb2b 	bl	801bd10 <iprintf>
                                demoNdef(nfcDevice);
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <demoCycle+0x2e4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 faf2 	bl	8000ca8 <demoNdef>
                                rfalIsoDepDeselect(); 
 80006c4:	f00c fe5c 	bl	800d380 <rfalIsoDepDeselect>
                                break;
 80006c8:	e028      	b.n	800071c <demoCycle+0x250>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80006ca:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <demoCycle+0x2e4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <demoCycle+0x2e4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	7f1b      	ldrb	r3, [r3, #28]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4610      	mov	r0, r2
 80006da:	f7ff fdab 	bl	8000234 <hex2Str>
 80006de:	4603      	mov	r3, r0
 80006e0:	4619      	mov	r1, r3
 80006e2:	4837      	ldr	r0, [pc, #220]	; (80007c0 <demoCycle+0x2f4>)
 80006e4:	f01b fb14 	bl	801bd10 <iprintf>
                                demoP2P();
 80006e8:	f000 f9d0 	bl	8000a8c <demoP2P>
                                break;
 80006ec:	e016      	b.n	800071c <demoCycle+0x250>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <demoCycle+0x2e4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <demoCycle+0x2e4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7f1b      	ldrb	r3, [r3, #28]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4610      	mov	r0, r2
 80006fe:	f7ff fd99 	bl	8000234 <hex2Str>
 8000702:	4603      	mov	r3, r0
 8000704:	4619      	mov	r1, r3
 8000706:	482f      	ldr	r0, [pc, #188]	; (80007c4 <demoCycle+0x2f8>)
 8000708:	f01b fb02 	bl	801bd10 <iprintf>
                                demoNdef(nfcDevice);
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <demoCycle+0x2e4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fac9 	bl	8000ca8 <demoNdef>
                                rfalNfcaPollerSleep();
 8000716:	f013 fec3 	bl	80144a0 <rfalNfcaPollerSleep>
                                break;
 800071a:	bf00      	nop
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 800071c:	482a      	ldr	r0, [pc, #168]	; (80007c8 <demoCycle+0x2fc>)
 800071e:	f01b fb91 	bl	801be44 <puts>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8000722:	e024      	b.n	800076e <demoCycle+0x2a2>
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <demoCycle+0x2e4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d106      	bne.n	800073c <demoCycle+0x270>
 800072e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	2b0c      	cmp	r3, #12
 8000738:	f040 817f 	bne.w	8000a3a <demoCycle+0x56e>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <demoCycle+0x2e4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	785b      	ldrb	r3, [r3, #1]
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8000742:	2b01      	cmp	r3, #1
 8000744:	d00e      	beq.n	8000764 <demoCycle+0x298>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <demoCycle+0x2e4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1d98      	adds	r0, r3, #6
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <demoCycle+0x2e4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000756:	4619      	mov	r1, r3
 8000758:	f013 fe30 	bl	80143bc <rfalNfcaPollerSelect>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	f040 816b 	bne.w	8000a3a <demoCycle+0x56e>
                            rfalNfcaPollerSleep();
 8000764:	f013 fe9c 	bl	80144a0 <rfalNfcaPollerSleep>
                            platformDelay(130);
 8000768:	2082      	movs	r0, #130	; 0x82
 800076a:	f002 fc09 	bl	8002f80 <HAL_Delay>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 800076e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000772:	4619      	mov	r1, r3
 8000774:	2052      	movs	r0, #82	; 0x52
 8000776:	f013 fc5b 	bl	8014030 <rfalNfcaPollerCheckPresence>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0d1      	beq.n	8000724 <demoCycle+0x258>
                        break;
 8000780:	e15b      	b.n	8000a3a <demoCycle+0x56e>
 8000782:	bf00      	nop
 8000784:	20000938 	.word	0x20000938
 8000788:	2000293c 	.word	0x2000293c
 800078c:	0801cf40 	.word	0x0801cf40
 8000790:	200000a3 	.word	0x200000a3
 8000794:	20000054 	.word	0x20000054
 8000798:	0801ce84 	.word	0x0801ce84
 800079c:	20002940 	.word	0x20002940
 80007a0:	20002944 	.word	0x20002944
 80007a4:	40011800 	.word	0x40011800
 80007a8:	200002d4 	.word	0x200002d4
 80007ac:	20000360 	.word	0x20000360
 80007b0:	20002948 	.word	0x20002948
 80007b4:	40011400 	.word	0x40011400
 80007b8:	0801cf68 	.word	0x0801cf68
 80007bc:	0801cf9c 	.word	0x0801cf9c
 80007c0:	0801cfcc 	.word	0x0801cfcc
 80007c4:	0801cff8 	.word	0x0801cff8
 80007c8:	0801d020 	.word	0x0801d020
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80007cc:	4ba3      	ldr	r3, [pc, #652]	; (8000a5c <demoCycle+0x590>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	699a      	ldr	r2, [r3, #24]
 80007d2:	4ba2      	ldr	r3, [pc, #648]	; (8000a5c <demoCycle+0x590>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	7f1b      	ldrb	r3, [r3, #28]
 80007d8:	4619      	mov	r1, r3
 80007da:	4610      	mov	r0, r2
 80007dc:	f7ff fd2a 	bl	8000234 <hex2Str>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4619      	mov	r1, r3
 80007e4:	489e      	ldr	r0, [pc, #632]	; (8000a60 <demoCycle+0x594>)
 80007e6:	f01b fa93 	bl	801bd10 <iprintf>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f0:	489c      	ldr	r0, [pc, #624]	; (8000a64 <demoCycle+0x598>)
 80007f2:	f002 ffc4 	bl	800377e <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 80007f6:	4b99      	ldr	r3, [pc, #612]	; (8000a5c <demoCycle+0x590>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	7b1b      	ldrb	r3, [r3, #12]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d007      	beq.n	8000814 <demoCycle+0x348>
                            demoNdef(nfcDevice);
 8000804:	4b95      	ldr	r3, [pc, #596]	; (8000a5c <demoCycle+0x590>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fa4d 	bl	8000ca8 <demoNdef>
                            rfalIsoDepDeselect();
 800080e:	f00c fdb7 	bl	800d380 <rfalIsoDepDeselect>
 8000812:	e005      	b.n	8000820 <demoCycle+0x354>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8000814:	4b91      	ldr	r3, [pc, #580]	; (8000a5c <demoCycle+0x590>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3303      	adds	r3, #3
 800081a:	4618      	mov	r0, r3
 800081c:	f013 ff26 	bl	801466c <rfalNfcbPollerSleep>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 8000820:	4891      	ldr	r0, [pc, #580]	; (8000a68 <demoCycle+0x59c>)
 8000822:	f01b fb0f 	bl	801be44 <puts>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8000826:	e015      	b.n	8000854 <demoCycle+0x388>
                            if( ST_BYTECMP(sensbRes.nfcid0, nfcDevice->dev.nfcb.sensbRes.nfcid0, RFAL_NFCB_NFCID0_LEN) != 0 )
 8000828:	4b8c      	ldr	r3, [pc, #560]	; (8000a5c <demoCycle+0x590>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1cd9      	adds	r1, r3, #3
 800082e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000832:	3301      	adds	r3, #1
 8000834:	2204      	movs	r2, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f01b fa2c 	bl	801bc94 <memcmp>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d114      	bne.n	800086c <demoCycle+0x3a0>
                            rfalNfcbPollerSleep(nfcDevice->dev.nfcb.sensbRes.nfcid0);
 8000842:	4b86      	ldr	r3, [pc, #536]	; (8000a5c <demoCycle+0x590>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3303      	adds	r3, #3
 8000848:	4618      	mov	r0, r3
 800084a:	f013 ff0f 	bl	801466c <rfalNfcbPollerSleep>
                            platformDelay(130);
 800084e:	2082      	movs	r0, #130	; 0x82
 8000850:	f002 fb96 	bl	8002f80 <HAL_Delay>
                        while( rfalNfcbPollerCheckPresence(RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen) == ERR_NONE )
 8000854:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000858:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800085c:	2100      	movs	r1, #0
 800085e:	2008      	movs	r0, #8
 8000860:	f013 fe9e 	bl	80145a0 <rfalNfcbPollerCheckPresence>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0de      	beq.n	8000828 <demoCycle+0x35c>
                        break;
 800086a:	e0e7      	b.n	8000a3c <demoCycle+0x570>
                                break;
 800086c:	bf00      	nop
                        break;
 800086e:	e0e5      	b.n	8000a3c <demoCycle+0x570>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 8000870:	4b7a      	ldr	r3, [pc, #488]	; (8000a5c <demoCycle+0x590>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	78db      	ldrb	r3, [r3, #3]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d116      	bne.n	80008a8 <demoCycle+0x3dc>
 800087a:	4b78      	ldr	r3, [pc, #480]	; (8000a5c <demoCycle+0x590>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	2bfe      	cmp	r3, #254	; 0xfe
 8000882:	d111      	bne.n	80008a8 <demoCycle+0x3dc>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8000884:	4b75      	ldr	r3, [pc, #468]	; (8000a5c <demoCycle+0x590>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	699a      	ldr	r2, [r3, #24]
 800088a:	4b74      	ldr	r3, [pc, #464]	; (8000a5c <demoCycle+0x590>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	7f1b      	ldrb	r3, [r3, #28]
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f7ff fcce 	bl	8000234 <hex2Str>
 8000898:	4603      	mov	r3, r0
 800089a:	4619      	mov	r1, r3
 800089c:	4873      	ldr	r0, [pc, #460]	; (8000a6c <demoCycle+0x5a0>)
 800089e:	f01b fa37 	bl	801bd10 <iprintf>
                            demoP2P();
 80008a2:	f000 f8f3 	bl	8000a8c <demoP2P>
 80008a6:	e013      	b.n	80008d0 <demoCycle+0x404>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 80008a8:	4b6c      	ldr	r3, [pc, #432]	; (8000a5c <demoCycle+0x590>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	4b6b      	ldr	r3, [pc, #428]	; (8000a5c <demoCycle+0x590>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	7f1b      	ldrb	r3, [r3, #28]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4610      	mov	r0, r2
 80008b8:	f7ff fcbc 	bl	8000234 <hex2Str>
 80008bc:	4603      	mov	r3, r0
 80008be:	4619      	mov	r1, r3
 80008c0:	486b      	ldr	r0, [pc, #428]	; (8000a70 <demoCycle+0x5a4>)
 80008c2:	f01b fa25 	bl	801bd10 <iprintf>
                            demoNdef(nfcDevice);
 80008c6:	4b65      	ldr	r3, [pc, #404]	; (8000a5c <demoCycle+0x590>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f9ec 	bl	8000ca8 <demoNdef>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d6:	4867      	ldr	r0, [pc, #412]	; (8000a74 <demoCycle+0x5a8>)
 80008d8:	f002 ff51 	bl	800377e <HAL_GPIO_WritePin>
                        platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 80008dc:	4862      	ldr	r0, [pc, #392]	; (8000a68 <demoCycle+0x59c>)
 80008de:	f01b fab1 	bl	801be44 <puts>
                        devCnt = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 80008e8:	e012      	b.n	8000910 <demoCycle+0x444>
                            sensfRes = (rfalNfcfSensfRes*)&((uint8_t *)cardList)[1];
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	3301      	adds	r3, #1
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
                            if( ST_BYTECMP(sensfRes->NFCID2, nfcDevice->dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN) != 0 )
 80008f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008f4:	1c58      	adds	r0, r3, #1
 80008f6:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <demoCycle+0x590>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3303      	adds	r3, #3
 80008fc:	2208      	movs	r2, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	f01b f9c8 	bl	801bc94 <memcmp>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d115      	bne.n	8000936 <demoCycle+0x46a>
                            platformDelay(130);
 800090a:	2082      	movs	r0, #130	; 0x82
 800090c:	f002 fb38 	bl	8002f80 <HAL_Delay>
                        while (rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, cardList, &devCnt, &collisions ) == ERR_NONE)
 8000910:	f107 0220 	add.w	r2, r7, #32
 8000914:	f107 031f 	add.w	r3, r7, #31
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	4613      	mov	r3, r2
 8000922:	2200      	movs	r2, #0
 8000924:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000928:	2000      	movs	r0, #0
 800092a:	f014 fa11 	bl	8014d50 <rfalNfcfPollerPoll>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0da      	beq.n	80008ea <demoCycle+0x41e>
                        break;
 8000934:	e082      	b.n	8000a3c <demoCycle+0x570>
                                break;
 8000936:	bf00      	nop
                        break;
 8000938:	e080      	b.n	8000a3c <demoCycle+0x570>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 800093a:	4b48      	ldr	r3, [pc, #288]	; (8000a5c <demoCycle+0x590>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6999      	ldr	r1, [r3, #24]
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <demoCycle+0x590>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	7f1b      	ldrb	r3, [r3, #28]
 8000946:	461a      	mov	r2, r3
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f01b f9b0 	bl	801bcb0 <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	3307      	adds	r3, #7
 8000958:	65bb      	str	r3, [r7, #88]	; 0x58
 800095a:	e00f      	b.n	800097c <demoCycle+0x4b0>
 800095c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	65fa      	str	r2, [r7, #92]	; 0x5c
 800096a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	65ba      	str	r2, [r7, #88]	; 0x58
 8000976:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	429a      	cmp	r2, r3
 8000982:	d3eb      	bcc.n	800095c <demoCycle+0x490>
                            platformLog("ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2108      	movs	r1, #8
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc53 	bl	8000234 <hex2Str>
 800098e:	4603      	mov	r3, r0
 8000990:	4619      	mov	r1, r3
 8000992:	4839      	ldr	r0, [pc, #228]	; (8000a78 <demoCycle+0x5ac>)
 8000994:	f01b f9bc 	bl	801bd10 <iprintf>
                            platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8000998:	2201      	movs	r2, #1
 800099a:	2108      	movs	r1, #8
 800099c:	4837      	ldr	r0, [pc, #220]	; (8000a7c <demoCycle+0x5b0>)
 800099e:	f002 feee 	bl	800377e <HAL_GPIO_WritePin>
                            demoNdef(nfcDevice);
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <demoCycle+0x590>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f97e 	bl	8000ca8 <demoNdef>
                            platformLog("Operation completed\r\nTag can be removed from the field\r\n");
 80009ac:	482e      	ldr	r0, [pc, #184]	; (8000a68 <demoCycle+0x59c>)
 80009ae:	f01b fa49 	bl	801be44 <puts>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 80009b2:	e002      	b.n	80009ba <demoCycle+0x4ee>
                                platformDelay(130);
 80009b4:	2082      	movs	r0, #130	; 0x82
 80009b6:	f002 fae3 	bl	8002f80 <HAL_Delay>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <demoCycle+0x590>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1cda      	adds	r2, r3, #3
 80009c0:	f107 0110 	add.w	r1, r7, #16
 80009c4:	f107 030e 	add.w	r3, r7, #14
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	460b      	mov	r3, r1
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	2020      	movs	r0, #32
 80009d0:	f014 fd55 	bl	801547e <rfalNfcvPollerInventory>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0ec      	beq.n	80009b4 <demoCycle+0x4e8>
                        break;
 80009da:	e02f      	b.n	8000a3c <demoCycle+0x570>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <demoCycle+0x590>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	699a      	ldr	r2, [r3, #24]
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <demoCycle+0x590>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	7f1b      	ldrb	r3, [r3, #28]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4610      	mov	r0, r2
 80009ec:	f7ff fc22 	bl	8000234 <hex2Str>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4822      	ldr	r0, [pc, #136]	; (8000a80 <demoCycle+0x5b4>)
 80009f6:	f01b f98b 	bl	801bd10 <iprintf>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <demoCycle+0x598>)
 8000a02:	f002 febc 	bl	800377e <HAL_GPIO_WritePin>
                        break;
 8000a06:	e019      	b.n	8000a3c <demoCycle+0x570>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <demoCycle+0x590>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	699a      	ldr	r2, [r3, #24]
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <demoCycle+0x590>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7f1b      	ldrb	r3, [r3, #28]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4610      	mov	r0, r2
 8000a18:	f7ff fc0c 	bl	8000234 <hex2Str>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4818      	ldr	r0, [pc, #96]	; (8000a84 <demoCycle+0x5b8>)
 8000a22:	f01b f975 	bl	801bd10 <iprintf>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <demoCycle+0x5b0>)
 8000a2c:	f002 fea7 	bl	800377e <HAL_GPIO_WritePin>
                        demoP2P();
 8000a30:	f000 f82c 	bl	8000a8c <demoP2P>
                        break;
 8000a34:	e002      	b.n	8000a3c <demoCycle+0x570>
                        break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <demoCycle+0x570>
                        break;
 8000a3a:	bf00      	nop
                rfalNfcDeactivate( false );
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f00e fcc1 	bl	800f3c4 <rfalNfcDeactivate>
                platformDelay( 500 );
 8000a42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a46:	f002 fa9b 	bl	8002f80 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <demoCycle+0x5bc>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
            break;
 8000a50:	bf00      	nop
    }
}
 8000a52:	bf00      	nop
 8000a54:	3760      	adds	r7, #96	; 0x60
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20002948 	.word	0x20002948
 8000a60:	0801d058 	.word	0x0801d058
 8000a64:	40011400 	.word	0x40011400
 8000a68:	0801d020 	.word	0x0801d020
 8000a6c:	0801d080 	.word	0x0801d080
 8000a70:	0801d0ac 	.word	0x0801d0ac
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	0801d0d0 	.word	0x0801d0d0
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	0801d0f8 	.word	0x0801d0f8
 8000a84:	0801d118 	.word	0x0801d118
 8000a88:	20000360 	.word	0x20000360

08000a8c <demoP2P>:
 * 
 * 
 *****************************************************************************
 */
void demoP2P( void )
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b0d5      	sub	sp, #340	; 0x154
 8000a90:	af02      	add	r7, sp, #8
    ndefBuffer  bufPayload;
    ndefMessage message;
    ndefRecord  record;
    ndefType    uri;

    platformLog(" Initalize device .. ");
 8000a92:	4865      	ldr	r0, [pc, #404]	; (8000c28 <demoP2P+0x19c>)
 8000a94:	f01b f93c 	bl	801bd10 <iprintf>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 8000a98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a9c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	9100      	str	r1, [sp, #0]
 8000aa6:	211a      	movs	r1, #26
 8000aa8:	4860      	ldr	r0, [pc, #384]	; (8000c2c <demoP2P+0x1a0>)
 8000aaa:	f000 f8d9 	bl	8000c60 <demoTransceiveBlocking>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 8000ab4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <demoP2P+0x38>
    {
        platformLog("failed.");
 8000abc:	485c      	ldr	r0, [pc, #368]	; (8000c30 <demoP2P+0x1a4>)
 8000abe:	f01b f927 	bl	801bd10 <iprintf>
        return;
 8000ac2:	e0ac      	b.n	8000c1e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 8000ac4:	485b      	ldr	r0, [pc, #364]	; (8000c34 <demoP2P+0x1a8>)
 8000ac6:	f01b f9bd 	bl	801be44 <puts>
    
    err  = ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufURL);
 8000aca:	463b      	mov	r3, r7
 8000acc:	4a5a      	ldr	r2, [pc, #360]	; (8000c38 <demoP2P+0x1ac>)
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f006 fd47 	bl	8007564 <ndefRtdUri>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefRtdUriToRecord(&uri, &record);
 8000adc:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f006 fe2b 	bl	8007740 <ndefRtdUriToRecord>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000af2:	4313      	orrs	r3, r2
 8000af4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    err |= ndefMessageInit(&message);
 8000af8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 f9c1 	bl	8004e84 <ndefMessageInit>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    err |= ndefMessageAppend(&message, &record);  /* To get MB and ME bits set */
 8000b10:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000b14:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 fa00 	bl	8004f20 <ndefMessageAppend>
 8000b20:	4603      	mov	r3, r0
 8000b22:	461a      	mov	r2, r3
 8000b24:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* Build the SNEP buffer made of the prefix, the length byte and the record */
    ST_MEMCPY(ndefUriBuffer, ndefSnepPrefix, sizeof(ndefSnepPrefix));
 8000b2e:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <demoP2P+0x1b0>)
 8000b30:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <demoP2P+0x1b4>)
 8000b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b36:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Skip 1 byte for length byte */
    bufPayload.buffer = ndefUriBuffer + sizeof(ndefSnepPrefix) + 1;
 8000b3a:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <demoP2P+0x1b8>)
 8000b3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefUriBuffer) - sizeof(ndefSnepPrefix);
 8000b40:	23f7      	movs	r3, #247	; 0xf7
 8000b42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    err |= ndefMessageEncode(&message, &bufPayload);
 8000b46:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8000b4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 fa93 	bl	800507c <ndefMessageEncode>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    ndefUriBuffer[sizeof(ndefSnepPrefix)] = bufPayload.length;
 8000b64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <demoP2P+0x1b0>)
 8000b6c:	721a      	strb	r2, [r3, #8]

    bufPayload.buffer = ndefUriBuffer;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <demoP2P+0x1b0>)
 8000b70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    bufPayload.length = sizeof(ndefSnepPrefix) + 1 + bufPayload.length;
 8000b74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000b78:	3309      	adds	r3, #9
 8000b7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    if( err != ERR_NONE )
 8000b7e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <demoP2P+0x108>
    {
        platformLog("NDEF message creation failed (%d)\r\n", err);
 8000b86:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	482e      	ldr	r0, [pc, #184]	; (8000c48 <demoP2P+0x1bc>)
 8000b8e:	f01b f8bf 	bl	801bd10 <iprintf>
        return;
 8000b92:	e044      	b.n	8000c1e <demoP2P+0x192>
    }

    ndefBufferDump("URL converted to SNEP:\r\n", (ndefConstBuffer*)&bufPayload, true);
 8000b94:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	482b      	ldr	r0, [pc, #172]	; (8000c4c <demoP2P+0x1c0>)
 8000b9e:	f001 fc4b 	bl	8002438 <ndefBufferDump>

    platformLog(" Push NDEF Uri: www.st.com/st25-demo .. ");
 8000ba2:	482b      	ldr	r0, [pc, #172]	; (8000c50 <demoP2P+0x1c4>)
 8000ba4:	f01b f8b4 	bl	801bd10 <iprintf>
    err = demoTransceiveBlocking(bufPayload.buffer, bufPayload.length, &rxData, &rxLen, RFAL_FWT_NONE);
 8000ba8:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8000bac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000bb0:	b299      	uxth	r1, r3
 8000bb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bb6:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8000bba:	f04f 34ff 	mov.w	r4, #4294967295
 8000bbe:	9400      	str	r4, [sp, #0]
 8000bc0:	f000 f84e 	bl	8000c60 <demoTransceiveBlocking>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if( err != ERR_NONE )
 8000bca:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <demoP2P+0x14e>
    {
        platformLog("failed.");
 8000bd2:	4817      	ldr	r0, [pc, #92]	; (8000c30 <demoP2P+0x1a4>)
 8000bd4:	f01b f89c 	bl	801bd10 <iprintf>
        return;
 8000bd8:	e021      	b.n	8000c1e <demoP2P+0x192>
    }
    platformLog("succeeded.\r\n");
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <demoP2P+0x1a8>)
 8000bdc:	f01b f932 	bl	801be44 <puts>


    platformLog(" Device present, maintaining connection ");
 8000be0:	481c      	ldr	r0, [pc, #112]	; (8000c54 <demoP2P+0x1c8>)
 8000be2:	f01b f895 	bl	801bd10 <iprintf>
    while(err == ERR_NONE) 
 8000be6:	e013      	b.n	8000c10 <demoP2P+0x184>
    {
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 8000be8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bec:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	9100      	str	r1, [sp, #0]
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	4817      	ldr	r0, [pc, #92]	; (8000c58 <demoP2P+0x1cc>)
 8000bfa:	f000 f831 	bl	8000c60 <demoTransceiveBlocking>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
        platformLog(".");
 8000c04:	202e      	movs	r0, #46	; 0x2e
 8000c06:	f01b f89b 	bl	801bd40 <putchar>
        platformDelay(50);
 8000c0a:	2032      	movs	r0, #50	; 0x32
 8000c0c:	f002 f9b8 	bl	8002f80 <HAL_Delay>
    while(err == ERR_NONE) 
 8000c10:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0e7      	beq.n	8000be8 <demoP2P+0x15c>
    }
    platformLog("\r\n Device removed.\r\n");
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <demoP2P+0x1d0>)
 8000c1a:	f01b f913 	bl	801be44 <puts>
}
 8000c1e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0801d144 	.word	0x0801d144
 8000c2c:	20000020 	.word	0x20000020
 8000c30:	0801d15c 	.word	0x0801d15c
 8000c34:	0801d164 	.word	0x0801d164
 8000c38:	2000003c 	.word	0x2000003c
 8000c3c:	200001d4 	.word	0x200001d4
 8000c40:	0801e42c 	.word	0x0801e42c
 8000c44:	200001dd 	.word	0x200001dd
 8000c48:	0801d170 	.word	0x0801d170
 8000c4c:	0801d194 	.word	0x0801d194
 8000c50:	0801d1b0 	.word	0x0801d1b0
 8000c54:	0801d1dc 	.word	0x0801d1dc
 8000c58:	200001d0 	.word	0x200001d0
 8000c5c:	0801d208 	.word	0x0801d208

08000c60 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 * 
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	817b      	strh	r3, [r7, #10]
    ReturnCode err;
    
    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 8000c70:	8979      	ldrh	r1, [r7, #10]
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f00e fe0c 	bl	800f898 <rfalNfcDataExchangeStart>
 8000c80:	4603      	mov	r3, r0
 8000c82:	82fb      	strh	r3, [r7, #22]
    if( err == ERR_NONE )
 8000c84:	8afb      	ldrh	r3, [r7, #22]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d108      	bne.n	8000c9c <demoTransceiveBlocking+0x3c>
    {
        do{
            rfalNfcWorker();
 8000c8a:	f00e fbf1 	bl	800f470 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 8000c8e:	f00e ff4b 	bl	800fb28 <rfalNfcDataExchangeGetStatus>
 8000c92:	4603      	mov	r3, r0
 8000c94:	82fb      	strh	r3, [r7, #22]
        }
        while( err == ERR_BUSY );
 8000c96:	8afb      	ldrh	r3, [r7, #22]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d0f6      	beq.n	8000c8a <demoTransceiveBlocking+0x2a>
    }
    return err;
 8000c9c:	8afb      	ldrh	r3, [r7, #22]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <demoNdef>:

static void demoNdef(rfalNfcDevice *pNfcDevice)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	6018      	str	r0, [r3, #0]


    /*
     * Perform NDEF Context Initialization
     */
    err = ndefPollerContextInitialization(&ndefCtx, pNfcDevice);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	48b2      	ldr	r0, [pc, #712]	; (8000f84 <demoNdef+0x2dc>)
 8000cba:	f006 fe11 	bl	80078e0 <ndefPollerContextInitialization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8000cc4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <demoNdef+0x32>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerContextInitialization returns %d)\r\n", err);
 8000ccc:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	48ad      	ldr	r0, [pc, #692]	; (8000f88 <demoNdef+0x2e0>)
 8000cd4:	f01b f81c 	bl	801bd10 <iprintf>
        return;
 8000cd8:	e270      	b.n	80011bc <demoNdef+0x514>
    }
    
    if( verbose & (pNfcDevice->type == RFAL_NFC_LISTEN_TYPE_NFCV) )
 8000cda:	4bac      	ldr	r3, [pc, #688]	; (8000f8c <demoNdef+0x2e4>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	bf0c      	ite	eq
 8000cea:	2301      	moveq	r3, #1
 8000cec:	2300      	movne	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <demoNdef+0x54>
    {
        ndefDumpSysInfo(&ndefCtx);
 8000cf6:	48a3      	ldr	r0, [pc, #652]	; (8000f84 <demoNdef+0x2dc>)
 8000cf8:	f000 fc1e 	bl	8001538 <ndefDumpSysInfo>
    }

    /*
     * Perform NDEF Detect procedure
     */
    err = ndefPollerNdefDetect(&ndefCtx, &info);
 8000cfc:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000d00:	4619      	mov	r1, r3
 8000d02:	48a0      	ldr	r0, [pc, #640]	; (8000f84 <demoNdef+0x2dc>)
 8000d04:	f006 fe1a 	bl	800793c <ndefPollerNdefDetect>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    if( err != ERR_NONE )
 8000d0e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00a      	beq.n	8000d2c <demoNdef+0x84>
    {
        platformLog("NDEF NOT DETECTED (ndefPollerNdefDetect returns %d)\r\n", err);
 8000d16:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	489c      	ldr	r0, [pc, #624]	; (8000f90 <demoNdef+0x2e8>)
 8000d1e:	f01a fff7 	bl	801bd10 <iprintf>
        if( ndefDemoFeature != NDEF_DEMO_FORMAT_TAG)
 8000d22:	4b9c      	ldr	r3, [pc, #624]	; (8000f94 <demoNdef+0x2ec>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d021      	beq.n	8000d6e <demoNdef+0xc6>
        {
            return;
 8000d2a:	e247      	b.n	80011bc <demoNdef+0x514>
        }
    }
    else
    {
        platformLog("%s NDEF detected.\r\n", ndefStates[info.state]);
 8000d2c:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b99      	ldr	r3, [pc, #612]	; (8000f98 <demoNdef+0x2f0>)
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4898      	ldr	r0, [pc, #608]	; (8000f9c <demoNdef+0x2f4>)
 8000d3c:	f01a ffe8 	bl	801bd10 <iprintf>
        ndefCCDump(&ndefCtx);
 8000d40:	4890      	ldr	r0, [pc, #576]	; (8000f84 <demoNdef+0x2dc>)
 8000d42:	f000 fba7 	bl	8001494 <ndefCCDump>
//add yinke
        printf("verbose [%d]\r\n",verbose);
 8000d46:	4b91      	ldr	r3, [pc, #580]	; (8000f8c <demoNdef+0x2e4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4894      	ldr	r0, [pc, #592]	; (8000fa0 <demoNdef+0x2f8>)
 8000d4e:	f01a ffdf 	bl	801bd10 <iprintf>
//end add
        if( verbose )
 8000d52:	4b8e      	ldr	r3, [pc, #568]	; (8000f8c <demoNdef+0x2e4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d009      	beq.n	8000d6e <demoNdef+0xc6>
        {
            platformLog("NDEF Len: %d, Offset=%d\r\n", ndefCtx.messageLen, ndefCtx.messageOffset);
 8000d5a:	4b8a      	ldr	r3, [pc, #552]	; (8000f84 <demoNdef+0x2dc>)
 8000d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d60:	4a88      	ldr	r2, [pc, #544]	; (8000f84 <demoNdef+0x2dc>)
 8000d62:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000d66:	4619      	mov	r1, r3
 8000d68:	488e      	ldr	r0, [pc, #568]	; (8000fa4 <demoNdef+0x2fc>)
 8000d6a:	f01a ffd1 	bl	801bd10 <iprintf>
        }
    }

    switch( ndefDemoFeature )
 8000d6e:	4b89      	ldr	r3, [pc, #548]	; (8000f94 <demoNdef+0x2ec>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	f200 821b 	bhi.w	80011ae <demoNdef+0x506>
 8000d78:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <demoNdef+0xd8>)
 8000d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7e:	bf00      	nop
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000e55 	.word	0x08000e55
 8000d88:	08000fd5 	.word	0x08000fd5
 8000d8c:	08001157 	.word	0x08001157
    {
        /*
         * Demonstrate how to read the NDEF message from the Tag
         */
        case NDEF_DEMO_READ:
            if( info.state == NDEF_STATE_INITIALIZED )
 8000d90:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f000 8210 	beq.w	80011ba <demoNdef+0x512>
            {
                /* Nothing to read... */
                return;
            }
            err = ndefPollerReadRawMessage(&ndefCtx, rawMessageBuf, sizeof(rawMessageBuf), &rawMessageLen);
 8000d9a:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8000d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da2:	4981      	ldr	r1, [pc, #516]	; (8000fa8 <demoNdef+0x300>)
 8000da4:	4877      	ldr	r0, [pc, #476]	; (8000f84 <demoNdef+0x2dc>)
 8000da6:	f006 fde6 	bl	8007976 <ndefPollerReadRawMessage>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8000db0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <demoNdef+0x11e>
            {
                platformLog("NDEF message cannot be read (ndefPollerReadRawMessage returns %d)\r\n", err);
 8000db8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	487b      	ldr	r0, [pc, #492]	; (8000fac <demoNdef+0x304>)
 8000dc0:	f01a ffa6 	bl	801bd10 <iprintf>
                return;
 8000dc4:	e1fa      	b.n	80011bc <demoNdef+0x514>
            }
            if( verbose )
 8000dc6:	4b71      	ldr	r3, [pc, #452]	; (8000f8c <demoNdef+0x2e4>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00e      	beq.n	8000dec <demoNdef+0x144>
            {
                bufRawMessage.buffer = rawMessageBuf;
 8000dce:	4b76      	ldr	r3, [pc, #472]	; (8000fa8 <demoNdef+0x300>)
 8000dd0:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = rawMessageLen;
 8000dd4:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000dd8:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                ndefBufferDump(" NDEF Content", (ndefConstBuffer*)&bufRawMessage, verbose);
 8000ddc:	4b6b      	ldr	r3, [pc, #428]	; (8000f8c <demoNdef+0x2e4>)
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8000de4:	4619      	mov	r1, r3
 8000de6:	4872      	ldr	r0, [pc, #456]	; (8000fb0 <demoNdef+0x308>)
 8000de8:	f001 fb26 	bl	8002438 <ndefBufferDump>
            }
            bufConstRawMessage.buffer = rawMessageBuf;
 8000dec:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <demoNdef+0x300>)
 8000dee:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
            bufConstRawMessage.length = rawMessageLen;
 8000df2:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000df6:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
            err = ndefMessageDecode(&bufConstRawMessage, &message);
 8000dfa:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000dfe:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 f8e0 	bl	8004fca <ndefMessageDecode>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8000e10:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <demoNdef+0x17e>
            {
                platformLog("NDEF message cannot be decoded (ndefMessageDecode  returns %d)\r\n", err);
 8000e18:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4865      	ldr	r0, [pc, #404]	; (8000fb4 <demoNdef+0x30c>)
 8000e20:	f01a ff76 	bl	801bd10 <iprintf>
                return;
 8000e24:	e1ca      	b.n	80011bc <demoNdef+0x514>
            }
            err = ndefMessageDump(&message, verbose);
 8000e26:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <demoNdef+0x2e4>)
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 ff2f 	bl	8001c94 <ndefMessageDump>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8000e3c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 81b8 	beq.w	80011b6 <demoNdef+0x50e>
            {
                platformLog("NDEF message cannot be displayed (ndefMessageDump returns %d)\r\n", err);
 8000e46:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	485a      	ldr	r0, [pc, #360]	; (8000fb8 <demoNdef+0x310>)
 8000e4e:	f01a ff5f 	bl	801bd10 <iprintf>
                return;
 8000e52:	e1b3      	b.n	80011bc <demoNdef+0x514>
#if NDEF_FEATURE_ALL 
        /*
         * Demonstrate how to encode a text record and write the message to the tag
         */
        case NDEF_DEMO_WRITE_MSG1:
            ndefDemoFeature = NDEF_DEMO_READ; /* returns to READ mode after write */
 8000e54:	4b4f      	ldr	r3, [pc, #316]	; (8000f94 <demoNdef+0x2ec>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message); /* Initialize message structure */
 8000e5a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 f810 	bl	8004e84 <ndefMessageInit>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufTextLangCode.buffer = ndefTextLangCode;
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4a53      	ldr	r2, [pc, #332]	; (8000fbc <demoNdef+0x314>)
 8000e70:	601a      	str	r2, [r3, #0]
            bufTextLangCode.length = strlen((char *)ndefTextLangCode);
 8000e72:	4852      	ldr	r0, [pc, #328]	; (8000fbc <demoNdef+0x314>)
 8000e74:	f7ff f9d6 	bl	8000224 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	711a      	strb	r2, [r3, #4]

            bufTextLangText.buffer = ndefTEXT;
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4a4e      	ldr	r2, [pc, #312]	; (8000fc0 <demoNdef+0x318>)
 8000e88:	601a      	str	r2, [r3, #0]
            bufTextLangText.length = strlen((char *)ndefTEXT);
 8000e8a:	484d      	ldr	r0, [pc, #308]	; (8000fc0 <demoNdef+0x318>)
 8000e8c:	f7ff f9ca 	bl	8000224 <strlen>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	605a      	str	r2, [r3, #4]

            err |= ndefRtdText(&text, TEXT_ENCODING_UTF8, &bufTextLangCode, &bufTextLangText); /* Initialize Text type structure */
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000ea0:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	f006 f95f 	bl	8007168 <ndefRtdText>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdTextToRecord(&text, &record1); /* Encode Text Record */
 8000eb8:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8000ebc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f006 fa74 	bl	80073b0 <ndefRtdTextToRecord>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record1); /* Append Text record to message */
 8000ed6:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8000eda:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 f81d 	bl	8004f20 <ndefMessageAppend>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8000ef4:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <demoNdef+0x262>
            {
                platformLog("Message creation failed\r\n", err);
 8000efc:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000f00:	4619      	mov	r1, r3
 8000f02:	4830      	ldr	r0, [pc, #192]	; (8000fc4 <demoNdef+0x31c>)
 8000f04:	f01a ff04 	bl	801bd10 <iprintf>
                return;
 8000f08:	e158      	b.n	80011bc <demoNdef+0x514>
            }
            err = ndefPollerWriteMessage(&ndefCtx, &message); /* Write message */
 8000f0a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <demoNdef+0x2dc>)
 8000f12:	f006 fe07 	bl	8007b24 <ndefPollerWriteMessage>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 8000f1c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <demoNdef+0x28a>
            {
                platformLog("Message cannot be written (ndefPollerWriteMessage return %d)\r\n", err);
 8000f24:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <demoNdef+0x320>)
 8000f2c:	f01a fef0 	bl	801bd10 <iprintf>
                return;
 8000f30:	e144      	b.n	80011bc <demoNdef+0x514>
            }
            platformLog("Wrote 1 record to the Tag\r\n");
 8000f32:	4826      	ldr	r0, [pc, #152]	; (8000fcc <demoNdef+0x324>)
 8000f34:	f01a ff86 	bl	801be44 <puts>
            if( verbose )
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <demoNdef+0x2e4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d01d      	beq.n	8000f7c <demoNdef+0x2d4>
            {
                /* Dump raw message */
                bufRawMessage.buffer = rawMessageBuf;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <demoNdef+0x300>)
 8000f42:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
                bufRawMessage.length = sizeof(rawMessageBuf);
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
                err = ndefMessageEncode(&message, &bufRawMessage);
 8000f4e:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8000f52:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f88f 	bl	800507c <ndefMessageEncode>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
                if( err == ERR_NONE )
 8000f64:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d107      	bne.n	8000f7c <demoNdef+0x2d4>
                {
                    ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <demoNdef+0x2e4>)
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8000f74:	4619      	mov	r1, r3
 8000f76:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <demoNdef+0x328>)
 8000f78:	f001 fa5e 	bl	8002438 <ndefBufferDump>
                }
            }
            LedNotificationWriteDone();
 8000f7c:	f000 fd08 	bl	8001990 <LedNotificationWriteDone>
            break;
 8000f80:	e11a      	b.n	80011b8 <demoNdef+0x510>
 8000f82:	bf00      	nop
 8000f84:	20000364 	.word	0x20000364
 8000f88:	0801d21c 	.word	0x0801d21c
 8000f8c:	20000939 	.word	0x20000939
 8000f90:	0801d260 	.word	0x0801d260
 8000f94:	20000938 	.word	0x20000938
 8000f98:	20000044 	.word	0x20000044
 8000f9c:	0801d298 	.word	0x0801d298
 8000fa0:	0801d2ac 	.word	0x0801d2ac
 8000fa4:	0801d2bc 	.word	0x0801d2bc
 8000fa8:	2000093c 	.word	0x2000093c
 8000fac:	0801d2d8 	.word	0x0801d2d8
 8000fb0:	0801d31c 	.word	0x0801d31c
 8000fb4:	0801d32c 	.word	0x0801d32c
 8000fb8:	0801d370 	.word	0x0801d370
 8000fbc:	20000090 	.word	0x20000090
 8000fc0:	20000078 	.word	0x20000078
 8000fc4:	0801d3b0 	.word	0x0801d3b0
 8000fc8:	0801d3cc 	.word	0x0801d3cc
 8000fcc:	0801d40c 	.word	0x0801d40c
 8000fd0:	0801d428 	.word	0x0801d428

        /*
         * Demonstrate how to encode a URI record and a AAR record, how to encode the message to a raw buffer and then how to write the raw buffer
         */
        case NDEF_DEMO_WRITE_MSG2:
            ndefDemoFeature = NDEF_DEMO_READ;  /* returns to READ mode after write */
 8000fd4:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <demoNdef+0x51c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
            err  = ndefMessageInit(&message);  /* Initialize message structure */
 8000fda:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 ff50 	bl	8004e84 <ndefMessageInit>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            bufUri.buffer = ndefURI;
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4a76      	ldr	r2, [pc, #472]	; (80011c8 <demoNdef+0x520>)
 8000ff0:	601a      	str	r2, [r3, #0]
            bufUri.length = strlen((char *)ndefURI);
 8000ff2:	4875      	ldr	r0, [pc, #468]	; (80011c8 <demoNdef+0x520>)
 8000ff4:	f7ff f916 	bl	8000224 <strlen>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	605a      	str	r2, [r3, #4]
            err |= ndefRtdUri(&uri, NDEF_URI_PREFIX_HTTP_WWW, &bufUri); /* Initialize URI type structure */
 8001000:	f107 0214 	add.w	r2, r7, #20
 8001004:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001008:	2101      	movs	r1, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f006 faaa 	bl	8007564 <ndefRtdUri>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001018:	4313      	orrs	r3, r2
 800101a:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdUriToRecord(&uri, &record1); /* Encode URI Record */
 800101e:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8001022:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fb89 	bl	8007740 <ndefRtdUriToRecord>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001036:	4313      	orrs	r3, r2
 8001038:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufAndroidPackName.buffer = ndefAndroidPackName;
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4a62      	ldr	r2, [pc, #392]	; (80011cc <demoNdef+0x524>)
 8001042:	601a      	str	r2, [r3, #0]
            bufAndroidPackName.length = sizeof(ndefAndroidPackName) - 1U;
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	220e      	movs	r2, #14
 800104a:	605a      	str	r2, [r3, #4]
            err |= ndefRtdAar(&aar, &bufAndroidPackName); /* Initialize AAR type structure */
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fb96 	bl	8007788 <ndefRtdAar>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001064:	4313      	orrs	r3, r2
 8001066:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefRtdAarToRecord(&aar, &record2); /* Encode AAR record */
 800106a:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800106e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f006 fc09 	bl	800788c <ndefRtdAarToRecord>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001082:	4313      	orrs	r3, r2
 8001084:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            err |= ndefMessageAppend(&message, &record1); /* Append URI to message */
 8001088:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 800108c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f003 ff44 	bl	8004f20 <ndefMessageAppend>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80010a0:	4313      	orrs	r3, r2
 80010a2:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            err |= ndefMessageAppend(&message, &record2); /* Append AAR to message (record #2 is an example of preformatted record) */
 80010a6:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80010aa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 ff35 	bl	8004f20 <ndefMessageAppend>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80010be:	4313      	orrs	r3, r2
 80010c0:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be

            bufRawMessage.buffer = rawMessageBuf;
 80010c4:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <demoNdef+0x528>)
 80010c6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
            bufRawMessage.length = sizeof(rawMessageBuf);
 80010ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ce:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
            err |= ndefMessageEncode(&message, &bufRawMessage); /* Encode the message to the raw buffer */
 80010d2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80010d6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 ffcd 	bl	800507c <ndefMessageEncode>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80010ea:	4313      	orrs	r3, r2
 80010ec:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 80010f0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <demoNdef+0x45e>
            {
                platformLog("Raw message creation failed (%d)\r\n", err);
 80010f8:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 80010fc:	4619      	mov	r1, r3
 80010fe:	4835      	ldr	r0, [pc, #212]	; (80011d4 <demoNdef+0x52c>)
 8001100:	f01a fe06 	bl	801bd10 <iprintf>
                return;
 8001104:	e05a      	b.n	80011bc <demoNdef+0x514>
            }
            err = ndefPollerWriteRawMessage(&ndefCtx, bufRawMessage.buffer, bufRawMessage.length);
 8001106:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800110a:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 800110e:	4619      	mov	r1, r3
 8001110:	4831      	ldr	r0, [pc, #196]	; (80011d8 <demoNdef+0x530>)
 8001112:	f006 fc51 	bl	80079b8 <ndefPollerWriteRawMessage>
 8001116:	4603      	mov	r3, r0
 8001118:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800111c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <demoNdef+0x48a>
            {
                platformLog("Message cannot be written (ndefPollerWriteRawMessage return %d)\r\n", err);
 8001124:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001128:	4619      	mov	r1, r3
 800112a:	482c      	ldr	r0, [pc, #176]	; (80011dc <demoNdef+0x534>)
 800112c:	f01a fdf0 	bl	801bd10 <iprintf>
                return;
 8001130:	e044      	b.n	80011bc <demoNdef+0x514>
            }
            platformLog("Wrote 2 records to the Tag\r\n");
 8001132:	482b      	ldr	r0, [pc, #172]	; (80011e0 <demoNdef+0x538>)
 8001134:	f01a fe86 	bl	801be44 <puts>
            if( verbose )
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <demoNdef+0x53c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <demoNdef+0x4a8>
            {
                /* Dump raw message */
                ndefBufferDump("Raw message", (ndefConstBuffer*)&bufRawMessage, verbose);
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <demoNdef+0x53c>)
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001148:	4619      	mov	r1, r3
 800114a:	4827      	ldr	r0, [pc, #156]	; (80011e8 <demoNdef+0x540>)
 800114c:	f001 f974 	bl	8002438 <ndefBufferDump>
            }
            LedNotificationWriteDone();
 8001150:	f000 fc1e 	bl	8001990 <LedNotificationWriteDone>
            break;
 8001154:	e030      	b.n	80011b8 <demoNdef+0x510>

        /*
         * Demonstrate how to format a Tag
         */
        case NDEF_DEMO_FORMAT_TAG:
            ndefDemoFeature = NDEF_DEMO_READ;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <demoNdef+0x51c>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
            if( !ndefIsSTTag(&ndefCtx) )
 800115c:	481e      	ldr	r0, [pc, #120]	; (80011d8 <demoNdef+0x530>)
 800115e:	f000 fbdf 	bl	8001920 <ndefIsSTTag>
 8001162:	4603      	mov	r3, r0
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <demoNdef+0x4ce>
            {
                platformLog("Manufacturer ID not found or not an ST tag. Format aborted \r\n");
 800116e:	481f      	ldr	r0, [pc, #124]	; (80011ec <demoNdef+0x544>)
 8001170:	f01a fe68 	bl	801be44 <puts>
                return;
 8001174:	e022      	b.n	80011bc <demoNdef+0x514>
            }
            platformLog("Formatting Tag...\r\n");
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <demoNdef+0x548>)
 8001178:	f01a fe64 	bl	801be44 <puts>
            /* Format Tag */
            err = ndefPollerTagFormat(&ndefCtx, NULL, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	4815      	ldr	r0, [pc, #84]	; (80011d8 <demoNdef+0x530>)
 8001182:	f006 fc38 	bl	80079f6 <ndefPollerTagFormat>
 8001186:	4603      	mov	r3, r0
 8001188:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
            if( err != ERR_NONE )
 800118c:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <demoNdef+0x4fa>
            {
                platformLog("Tag cannot be formatted (ndefPollerTagFormat returns %d)\r\n", err);
 8001194:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8001198:	4619      	mov	r1, r3
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <demoNdef+0x54c>)
 800119c:	f01a fdb8 	bl	801bd10 <iprintf>
                return;
 80011a0:	e00c      	b.n	80011bc <demoNdef+0x514>
            }
            platformLog("Tag formatted\r\n");
 80011a2:	4815      	ldr	r0, [pc, #84]	; (80011f8 <demoNdef+0x550>)
 80011a4:	f01a fe4e 	bl	801be44 <puts>
            LedNotificationWriteDone();
 80011a8:	f000 fbf2 	bl	8001990 <LedNotificationWriteDone>
            break;
 80011ac:	e004      	b.n	80011b8 <demoNdef+0x510>
#endif /* NDEF_FEATURE_ALL */

        default:
            ndefDemoFeature = NDEF_DEMO_READ;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <demoNdef+0x51c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
            break;     
 80011b4:	e000      	b.n	80011b8 <demoNdef+0x510>
            break;
 80011b6:	bf00      	nop
    }
    return;
 80011b8:	e000      	b.n	80011bc <demoNdef+0x514>
                return;
 80011ba:	bf00      	nop
}
 80011bc:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000938 	.word	0x20000938
 80011c8:	20000064 	.word	0x20000064
 80011cc:	20000094 	.word	0x20000094
 80011d0:	2000093c 	.word	0x2000093c
 80011d4:	0801d434 	.word	0x0801d434
 80011d8:	20000364 	.word	0x20000364
 80011dc:	0801d458 	.word	0x0801d458
 80011e0:	0801d49c 	.word	0x0801d49c
 80011e4:	20000939 	.word	0x20000939
 80011e8:	0801d428 	.word	0x0801d428
 80011ec:	0801d4b8 	.word	0x0801d4b8
 80011f0:	0801d4f8 	.word	0x0801d4f8
 80011f4:	0801d50c 	.word	0x0801d50c
 80011f8:	0801d548 	.word	0x0801d548

080011fc <ndefT2TCCDump>:

static void ndefT2TCCDump(ndefContext *ctx)
{
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af04      	add	r7, sp, #16
 8001202:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Magic: %2.2Xh Version: %d.%d Size: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t2t.magicNumber, ctx->cc.t2t.majorVersion, ctx->cc.t2t.minorVersion, ctx->cc.t2t.size, ctx->cc.t2t.size * 8U, ctx->cc.t2t.readAccess, ctx->cc.t2t.writeAccess);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800120a:	461c      	mov	r4, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001212:	461d      	mov	r5, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800121a:	461e      	mov	r6, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8001232:	4610      	mov	r0, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 800123a:	9203      	str	r2, [sp, #12]
 800123c:	9002      	str	r0, [sp, #8]
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9100      	str	r1, [sp, #0]
 8001242:	4633      	mov	r3, r6
 8001244:	462a      	mov	r2, r5
 8001246:	4621      	mov	r1, r4
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <ndefT2TCCDump+0x74>)
 800124a:	f01a fd61 	bl	801bd10 <iprintf>
    bufCcBuf.buffer = ctx->ccBuf;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	339c      	adds	r3, #156	; 0x9c
 8001252:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 4;
 8001254:	2304      	movs	r3, #4
 8001256:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <ndefT2TCCDump+0x78>)
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <ndefT2TCCDump+0x7c>)
 8001264:	f001 f8e8 	bl	8002438 <ndefBufferDump>
  
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001270:	0801d558 	.word	0x0801d558
 8001274:	20000939 	.word	0x20000939
 8001278:	0801d5bc 	.word	0x0801d5bc

0800127c <ndefT3TAIBDump>:

static void ndefT3TAIBDump(ndefContext *ctx)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af06      	add	r7, sp, #24
 8001282:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;

    platformLog(" * Version: %d.%d Size: %d (%d bytes) NbR: %d NbW: %d\r\n * WriteFlag: %2.2xh RWFlag: %2.2xh \r\n", ctx->cc.t3t.majorVersion, ctx->cc.t3t.minorVersion, ctx->cc.t3t.nMaxB, ctx->cc.t3t.nMaxB * 16U, ctx->cc.t3t.nbR, ctx->cc.t3t.nbW, ctx->cc.t3t.writeFlag, ctx->cc.t3t.rwFlag);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800128a:	461d      	mov	r5, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001292:	461e      	mov	r6, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800129a:	469c      	mov	ip, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 80012aa:	4611      	mov	r1, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80012b2:	4610      	mov	r0, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 80012ba:	4614      	mov	r4, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 80012c2:	9204      	str	r2, [sp, #16]
 80012c4:	9403      	str	r4, [sp, #12]
 80012c6:	9002      	str	r0, [sp, #8]
 80012c8:	9101      	str	r1, [sp, #4]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4663      	mov	r3, ip
 80012ce:	4632      	mov	r2, r6
 80012d0:	4629      	mov	r1, r5
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <ndefT3TAIBDump+0x80>)
 80012d4:	f01a fd1c 	bl	801bd10 <iprintf>
    bufCcBuf.buffer = ctx->ccBuf;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	339c      	adds	r3, #156	; 0x9c
 80012dc:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = 16;
 80012de:	2310      	movs	r3, #16
 80012e0:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <ndefT3TAIBDump+0x84>)
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <ndefT3TAIBDump+0x88>)
 80012ee:	f001 f8a3 	bl	8002438 <ndefBufferDump>
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	0801d5cc 	.word	0x0801d5cc
 8001300:	20000939 	.word	0x20000939
 8001304:	0801d5bc 	.word	0x0801d5bc

08001308 <ndefT4TCCDump>:

static void ndefT4TCCDump(ndefContext *ctx)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b08b      	sub	sp, #44	; 0x2c
 800130c:	af06      	add	r7, sp, #24
 800130e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * CCLEN: %d T4T_VNo: %xh MLe: %d MLc: %d FileId: %2.2x%2.2xh FileSize: %d\r\n * readAccess: %2.2xh writeAccess: %2.2xh\r\n", ctx->cc.t4t.ccLen, ctx->cc.t4t.vNo, ctx->cc.t4t.mLe, ctx->cc.t4t.mLc, ctx->cc.t4t.fileId[0], ctx->cc.t4t.fileId[1],ctx->cc.t4t.fileSize, ctx->cc.t4t.readAccess, ctx->cc.t4t.writeAccess);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001316:	461e      	mov	r6, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800131e:	469c      	mov	ip, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001326:	469e      	mov	lr, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800132e:	4619      	mov	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001336:	4618      	mov	r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800133e:	461c      	mov	r4, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800134c:	4615      	mov	r5, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 8001354:	9205      	str	r2, [sp, #20]
 8001356:	9504      	str	r5, [sp, #16]
 8001358:	9303      	str	r3, [sp, #12]
 800135a:	9402      	str	r4, [sp, #8]
 800135c:	9001      	str	r0, [sp, #4]
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4673      	mov	r3, lr
 8001362:	4662      	mov	r2, ip
 8001364:	4631      	mov	r1, r6
 8001366:	480b      	ldr	r0, [pc, #44]	; (8001394 <ndefT4TCCDump+0x8c>)
 8001368:	f01a fcd2 	bl	801bd10 <iprintf>
    bufCcBuf.buffer = ctx->ccBuf;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	339c      	adds	r3, #156	; 0x9c
 8001370:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t4t.ccLen;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001378:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC File Raw Data", &bufCcBuf, verbose);
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <ndefT4TCCDump+0x90>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <ndefT4TCCDump+0x94>)
 8001386:	f001 f857 	bl	8002438 <ndefBufferDump>
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001392:	bf00      	nop
 8001394:	0801d62c 	.word	0x0801d62c
 8001398:	20000939 	.word	0x20000939
 800139c:	0801d6a4 	.word	0x0801d6a4

080013a0 <ndefT5TCCDump>:

static void ndefT5TCCDump(ndefContext *ctx)
{
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b08b      	sub	sp, #44	; 0x2c
 80013a4:	af06      	add	r7, sp, #24
 80013a6:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufCcBuf;
    
    platformLog(" * Block Length: %d\r\n", ctx->subCtx.t5t.blockLen);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80013ae:	4619      	mov	r1, r3
 80013b0:	4831      	ldr	r0, [pc, #196]	; (8001478 <ndefT5TCCDump+0xd8>)
 80013b2:	f01a fcad 	bl	801bd10 <iprintf>
    platformLog(" * %d bytes CC\r\n * Magic: %2.2Xh Version: %d.%d MLEN: %d (%d bytes) \r\n * readAccess: %2.2xh writeAccess: %2.2xh \r\n", ctx->cc.t5t.ccLen, ctx->cc.t5t.magicNumber, ctx->cc.t5t.majorVersion, ctx->cc.t5t.minorVersion, ctx->cc.t5t.memoryLen, ctx->cc.t5t.memoryLen * 8U, ctx->cc.t5t.readAccess, ctx->cc.t5t.writeAccess);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80013bc:	461d      	mov	r5, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80013c4:	461e      	mov	r6, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80013cc:	469c      	mov	ip, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013d4:	4619      	mov	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80013dc:	4618      	mov	r0, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 80013ec:	4614      	mov	r4, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 80013f4:	9204      	str	r2, [sp, #16]
 80013f6:	9403      	str	r4, [sp, #12]
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	9001      	str	r0, [sp, #4]
 80013fc:	9100      	str	r1, [sp, #0]
 80013fe:	4663      	mov	r3, ip
 8001400:	4632      	mov	r2, r6
 8001402:	4629      	mov	r1, r5
 8001404:	481d      	ldr	r0, [pc, #116]	; (800147c <ndefT5TCCDump+0xdc>)
 8001406:	f01a fc83 	bl	801bd10 <iprintf>
    platformLog(" * [%c] Special Frame\r\n",       ctx->cc.t5t.specialFrame ?      'X' : ' ');
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <ndefT5TCCDump+0x78>
 8001414:	2358      	movs	r3, #88	; 0x58
 8001416:	e000      	b.n	800141a <ndefT5TCCDump+0x7a>
 8001418:	2320      	movs	r3, #32
 800141a:	4619      	mov	r1, r3
 800141c:	4818      	ldr	r0, [pc, #96]	; (8001480 <ndefT5TCCDump+0xe0>)
 800141e:	f01a fc77 	bl	801bd10 <iprintf>
    platformLog(" * [%c] Multiple block Read\r\n", ctx->cc.t5t.multipleBlockRead ? 'X' : ' ');
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <ndefT5TCCDump+0x90>
 800142c:	2358      	movs	r3, #88	; 0x58
 800142e:	e000      	b.n	8001432 <ndefT5TCCDump+0x92>
 8001430:	2320      	movs	r3, #32
 8001432:	4619      	mov	r1, r3
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <ndefT5TCCDump+0xe4>)
 8001436:	f01a fc6b 	bl	801bd10 <iprintf>
    platformLog(" * [%c] Lock Block\r\n",          ctx->cc.t5t.lockBlock ?         'X' : ' ');
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <ndefT5TCCDump+0xa8>
 8001444:	2358      	movs	r3, #88	; 0x58
 8001446:	e000      	b.n	800144a <ndefT5TCCDump+0xaa>
 8001448:	2320      	movs	r3, #32
 800144a:	4619      	mov	r1, r3
 800144c:	480e      	ldr	r0, [pc, #56]	; (8001488 <ndefT5TCCDump+0xe8>)
 800144e:	f01a fc5f 	bl	801bd10 <iprintf>
    bufCcBuf.buffer = ctx->ccBuf;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	339c      	adds	r3, #156	; 0x9c
 8001456:	60bb      	str	r3, [r7, #8]
    bufCcBuf.length = ctx->cc.t5t.ccLen;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800145e:	60fb      	str	r3, [r7, #12]
    ndefBufferDump(" CC Raw Data", &bufCcBuf, verbose);
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <ndefT5TCCDump+0xec>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4619      	mov	r1, r3
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <ndefT5TCCDump+0xf0>)
 800146c:	f000 ffe4 	bl	8002438 <ndefBufferDump>
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001478:	0801d6b8 	.word	0x0801d6b8
 800147c:	0801d6d0 	.word	0x0801d6d0
 8001480:	0801d744 	.word	0x0801d744
 8001484:	0801d75c 	.word	0x0801d75c
 8001488:	0801d77c 	.word	0x0801d77c
 800148c:	20000939 	.word	0x20000939
 8001490:	0801d5bc 	.word	0x0801d5bc

08001494 <ndefCCDump>:

static void ndefCCDump(ndefContext *ctx)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    if( (ctx == NULL) || !verbose)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d03c      	beq.n	800151c <ndefCCDump+0x88>
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <ndefCCDump+0x94>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	f083 0301 	eor.w	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d135      	bne.n	800151c <ndefCCDump+0x88>
    {
        return;
    }
    platformLog("%s", (ctx->device.type ==  RFAL_NFC_LISTEN_TYPE_NFCF) ? "NDEF Attribute Information Block\r\n" : "NDEF Capability Container\r\n");
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d101      	bne.n	80014bc <ndefCCDump+0x28>
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <ndefCCDump+0x98>)
 80014ba:	e000      	b.n	80014be <ndefCCDump+0x2a>
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <ndefCCDump+0x9c>)
 80014be:	4619      	mov	r1, r3
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <ndefCCDump+0xa0>)
 80014c2:	f01a fc25 	bl	801bd10 <iprintf>
    switch( ctx->device.type )
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d828      	bhi.n	8001520 <ndefCCDump+0x8c>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <ndefCCDump+0x40>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	08001505 	.word	0x08001505
 80014dc:	0800150d 	.word	0x0800150d
 80014e0:	08001515 	.word	0x08001515
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( ctx->device.dev.nfca.type )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <ndefCCDump+0x5e>
 80014ec:	2b20      	cmp	r3, #32
 80014ee:	d004      	beq.n	80014fa <ndefCCDump+0x66>
                    break;
                case RFAL_NFCA_T4T:
                    ndefT4TCCDump(ctx);
                    break;
                default:
                    break;
 80014f0:	e007      	b.n	8001502 <ndefCCDump+0x6e>
                    ndefT2TCCDump(ctx);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe82 	bl	80011fc <ndefT2TCCDump>
                    break;
 80014f8:	e003      	b.n	8001502 <ndefCCDump+0x6e>
                    ndefT4TCCDump(ctx);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff04 	bl	8001308 <ndefT4TCCDump>
                    break;
 8001500:	bf00      	nop
            }
            break;
 8001502:	e00e      	b.n	8001522 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            ndefT4TCCDump(ctx);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff feff 	bl	8001308 <ndefT4TCCDump>
            break;
 800150a:	e00a      	b.n	8001522 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            ndefT3TAIBDump(ctx);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff feb5 	bl	800127c <ndefT3TAIBDump>
            break;
 8001512:	e006      	b.n	8001522 <ndefCCDump+0x8e>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            ndefT5TCCDump(ctx);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff43 	bl	80013a0 <ndefT5TCCDump>
            break;
 800151a:	e002      	b.n	8001522 <ndefCCDump+0x8e>
        return;
 800151c:	bf00      	nop
 800151e:	e000      	b.n	8001522 <ndefCCDump+0x8e>
        default:
            break;
 8001520:	bf00      	nop
    }
}
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000939 	.word	0x20000939
 800152c:	0801d794 	.word	0x0801d794
 8001530:	0801d7b8 	.word	0x0801d7b8
 8001534:	0801d7d4 	.word	0x0801d7d4

08001538 <ndefDumpSysInfo>:

static void ndefDumpSysInfo(ndefContext *ctx)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    ndefSystemInformation *sysInfo;

    if( (ctx == NULL) || !verbose)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 81da 	beq.w	80018fc <ndefDumpSysInfo+0x3c4>
 8001548:	4bb3      	ldr	r3, [pc, #716]	; (8001818 <ndefDumpSysInfo+0x2e0>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	f083 0301 	eor.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 81d2 	bne.w	80018fc <ndefDumpSysInfo+0x3c4>
    {
        return;
    }
    
    if( !ctx->subCtx.t5t.sysInfoSupported )
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 81cb 	bne.w	8001900 <ndefDumpSysInfo+0x3c8>
    {
        return;
    }
    
    sysInfo = &ctx->subCtx.t5t.sysInfo;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	33be      	adds	r3, #190	; 0xbe
 800156e:	60fb      	str	r3, [r7, #12]
    platformLog("System Information\r\n");
 8001570:	48aa      	ldr	r0, [pc, #680]	; (800181c <ndefDumpSysInfo+0x2e4>)
 8001572:	f01a fc67 	bl	801be44 <puts>
    platformLog(" * %d byte(s) memory addressing\r\n", ndefT5TSysInfoMOIValue(sysInfo->infoFlags) + 1);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	7b9b      	ldrb	r3, [r3, #14]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	3301      	adds	r3, #1
 8001584:	4619      	mov	r1, r3
 8001586:	48a6      	ldr	r0, [pc, #664]	; (8001820 <ndefDumpSysInfo+0x2e8>)
 8001588:	f01a fbc2 	bl	801bd10 <iprintf>
    if( ndefT5TSysInfoDFSIDPresent(sysInfo->infoFlags) )
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7b9b      	ldrb	r3, [r3, #14]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <ndefDumpSysInfo+0x6c>
    {
        platformLog(" * DFSID=%2.2Xh\r\n", sysInfo->DFSID);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	7bdb      	ldrb	r3, [r3, #15]
 800159c:	4619      	mov	r1, r3
 800159e:	48a1      	ldr	r0, [pc, #644]	; (8001824 <ndefDumpSysInfo+0x2ec>)
 80015a0:	f01a fbb6 	bl	801bd10 <iprintf>
    }
    if( ndefT5TSysInfoAFIPresent(sysInfo->infoFlags) )
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	7b9b      	ldrb	r3, [r3, #14]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <ndefDumpSysInfo+0x88>
    {
        platformLog(" * AFI=%2.2Xh\r\n", sysInfo->AFI);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	7c1b      	ldrb	r3, [r3, #16]
 80015b8:	4619      	mov	r1, r3
 80015ba:	489b      	ldr	r0, [pc, #620]	; (8001828 <ndefDumpSysInfo+0x2f0>)
 80015bc:	f01a fba8 	bl	801bd10 <iprintf>
    }
    if( ndefT5TSysInfoMemSizePresent(sysInfo->infoFlags) )
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	7b9b      	ldrb	r3, [r3, #14]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <ndefDumpSysInfo+0xaa>
    {
        platformLog(" * %d blocks, %d bytes per block\r\n", sysInfo->numberOfBlock, sysInfo->blockSize);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	7c5b      	ldrb	r3, [r3, #17]
 80015da:	461a      	mov	r2, r3
 80015dc:	4893      	ldr	r0, [pc, #588]	; (800182c <ndefDumpSysInfo+0x2f4>)
 80015de:	f01a fb97 	bl	801bd10 <iprintf>
    }
    if( ndefT5TSysInfoICRefPresent(sysInfo->infoFlags) )
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	7b9b      	ldrb	r3, [r3, #14]
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <ndefDumpSysInfo+0xc6>
    {
        platformLog(" * ICRef=%2.2xh\r\n", sysInfo->ICRef);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	7c9b      	ldrb	r3, [r3, #18]
 80015f6:	4619      	mov	r1, r3
 80015f8:	488d      	ldr	r0, [pc, #564]	; (8001830 <ndefDumpSysInfo+0x2f8>)
 80015fa:	f01a fb89 	bl	801bd10 <iprintf>
    }
    if( ndefT5TSysInfoCmdListPresent(sysInfo->infoFlags) )
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	7b9b      	ldrb	r3, [r3, #14]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 817a 	beq.w	8001904 <ndefDumpSysInfo+0x3cc>
    {
        platformLog(" * [%c] ReadSingleBlock                \r\n", ndefT5TSysInfoReadSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');               
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	7a9b      	ldrb	r3, [r3, #10]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <ndefDumpSysInfo+0xe8>
 800161c:	2358      	movs	r3, #88	; 0x58
 800161e:	e000      	b.n	8001622 <ndefDumpSysInfo+0xea>
 8001620:	2320      	movs	r3, #32
 8001622:	4619      	mov	r1, r3
 8001624:	4883      	ldr	r0, [pc, #524]	; (8001834 <ndefDumpSysInfo+0x2fc>)
 8001626:	f01a fb73 	bl	801bd10 <iprintf>
        platformLog(" * [%c] WriteSingleBlock               \r\n", ndefT5TSysInfoWriteSingleBlockSupported(sysInfo->supportedCmd)                ? 'X' : ' ');
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	7a9b      	ldrb	r3, [r3, #10]
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <ndefDumpSysInfo+0x106>
 800163a:	2358      	movs	r3, #88	; 0x58
 800163c:	e000      	b.n	8001640 <ndefDumpSysInfo+0x108>
 800163e:	2320      	movs	r3, #32
 8001640:	4619      	mov	r1, r3
 8001642:	487d      	ldr	r0, [pc, #500]	; (8001838 <ndefDumpSysInfo+0x300>)
 8001644:	f01a fb64 	bl	801bd10 <iprintf>
        platformLog(" * [%c] LockSingleBlock                \r\n", ndefT5TSysInfoLockSingleBlockSupported(sysInfo->supportedCmd)                 ? 'X' : ' ');
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	7a9b      	ldrb	r3, [r3, #10]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <ndefDumpSysInfo+0x124>
 8001658:	2358      	movs	r3, #88	; 0x58
 800165a:	e000      	b.n	800165e <ndefDumpSysInfo+0x126>
 800165c:	2320      	movs	r3, #32
 800165e:	4619      	mov	r1, r3
 8001660:	4876      	ldr	r0, [pc, #472]	; (800183c <ndefDumpSysInfo+0x304>)
 8001662:	f01a fb55 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ReadMultipleBlocks             \r\n", ndefT5TSysInfoReadMultipleBlocksSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	7a9b      	ldrb	r3, [r3, #10]
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <ndefDumpSysInfo+0x142>
 8001676:	2358      	movs	r3, #88	; 0x58
 8001678:	e000      	b.n	800167c <ndefDumpSysInfo+0x144>
 800167a:	2320      	movs	r3, #32
 800167c:	4619      	mov	r1, r3
 800167e:	4870      	ldr	r0, [pc, #448]	; (8001840 <ndefDumpSysInfo+0x308>)
 8001680:	f01a fb46 	bl	801bd10 <iprintf>
        platformLog(" * [%c] WriteMultipleBlocks            \r\n", ndefT5TSysInfoWriteMultipleBlocksSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	7a9b      	ldrb	r3, [r3, #10]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <ndefDumpSysInfo+0x160>
 8001694:	2358      	movs	r3, #88	; 0x58
 8001696:	e000      	b.n	800169a <ndefDumpSysInfo+0x162>
 8001698:	2320      	movs	r3, #32
 800169a:	4619      	mov	r1, r3
 800169c:	4869      	ldr	r0, [pc, #420]	; (8001844 <ndefDumpSysInfo+0x30c>)
 800169e:	f01a fb37 	bl	801bd10 <iprintf>
        platformLog(" * [%c] Select                         \r\n", ndefT5TSysInfoSelectSupported(sysInfo->supportedCmd)                          ? 'X' : ' ');
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	7a9b      	ldrb	r3, [r3, #10]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <ndefDumpSysInfo+0x17e>
 80016b2:	2358      	movs	r3, #88	; 0x58
 80016b4:	e000      	b.n	80016b8 <ndefDumpSysInfo+0x180>
 80016b6:	2320      	movs	r3, #32
 80016b8:	4619      	mov	r1, r3
 80016ba:	4863      	ldr	r0, [pc, #396]	; (8001848 <ndefDumpSysInfo+0x310>)
 80016bc:	f01a fb28 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ResetToReady                   \r\n", ndefT5TSysInfoResetToReadySupported(sysInfo->supportedCmd)                    ? 'X' : ' ');
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	7a9b      	ldrb	r3, [r3, #10]
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <ndefDumpSysInfo+0x19c>
 80016d0:	2358      	movs	r3, #88	; 0x58
 80016d2:	e000      	b.n	80016d6 <ndefDumpSysInfo+0x19e>
 80016d4:	2320      	movs	r3, #32
 80016d6:	4619      	mov	r1, r3
 80016d8:	485c      	ldr	r0, [pc, #368]	; (800184c <ndefDumpSysInfo+0x314>)
 80016da:	f01a fb19 	bl	801bd10 <iprintf>
        platformLog(" * [%c] GetMultipleBlockSecStatus      \r\n", ndefT5TSysInfoGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)       ? 'X' : ' ');
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	7a9b      	ldrb	r3, [r3, #10]
 80016e2:	09db      	lsrs	r3, r3, #7
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <ndefDumpSysInfo+0x1ba>
 80016ee:	2358      	movs	r3, #88	; 0x58
 80016f0:	e000      	b.n	80016f4 <ndefDumpSysInfo+0x1bc>
 80016f2:	2320      	movs	r3, #32
 80016f4:	4619      	mov	r1, r3
 80016f6:	4856      	ldr	r0, [pc, #344]	; (8001850 <ndefDumpSysInfo+0x318>)
 80016f8:	f01a fb0a 	bl	801bd10 <iprintf>
        platformLog(" * [%c] WriteAFI                       \r\n", ndefT5TSysInfoWriteAFISupported(sysInfo->supportedCmd)                        ? 'X' : ' ');
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	7adb      	ldrb	r3, [r3, #11]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <ndefDumpSysInfo+0x1d4>
 8001708:	2358      	movs	r3, #88	; 0x58
 800170a:	e000      	b.n	800170e <ndefDumpSysInfo+0x1d6>
 800170c:	2320      	movs	r3, #32
 800170e:	4619      	mov	r1, r3
 8001710:	4850      	ldr	r0, [pc, #320]	; (8001854 <ndefDumpSysInfo+0x31c>)
 8001712:	f01a fafd 	bl	801bd10 <iprintf>
        platformLog(" * [%c] LockAFI                        \r\n", ndefT5TSysInfoLockAFISupported(sysInfo->supportedCmd)                         ? 'X' : ' ');
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	7adb      	ldrb	r3, [r3, #11]
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <ndefDumpSysInfo+0x1f2>
 8001726:	2358      	movs	r3, #88	; 0x58
 8001728:	e000      	b.n	800172c <ndefDumpSysInfo+0x1f4>
 800172a:	2320      	movs	r3, #32
 800172c:	4619      	mov	r1, r3
 800172e:	484a      	ldr	r0, [pc, #296]	; (8001858 <ndefDumpSysInfo+0x320>)
 8001730:	f01a faee 	bl	801bd10 <iprintf>
        platformLog(" * [%c] WriteDSFID                     \r\n", ndefT5TSysInfoWriteDSFIDSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	7adb      	ldrb	r3, [r3, #11]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <ndefDumpSysInfo+0x210>
 8001744:	2358      	movs	r3, #88	; 0x58
 8001746:	e000      	b.n	800174a <ndefDumpSysInfo+0x212>
 8001748:	2320      	movs	r3, #32
 800174a:	4619      	mov	r1, r3
 800174c:	4843      	ldr	r0, [pc, #268]	; (800185c <ndefDumpSysInfo+0x324>)
 800174e:	f01a fadf 	bl	801bd10 <iprintf>
        platformLog(" * [%c] LockDSFID                      \r\n", ndefT5TSysInfoLockDSFIDSupported(sysInfo->supportedCmd)                       ? 'X' : ' ');
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	7adb      	ldrb	r3, [r3, #11]
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <ndefDumpSysInfo+0x22e>
 8001762:	2358      	movs	r3, #88	; 0x58
 8001764:	e000      	b.n	8001768 <ndefDumpSysInfo+0x230>
 8001766:	2320      	movs	r3, #32
 8001768:	4619      	mov	r1, r3
 800176a:	483d      	ldr	r0, [pc, #244]	; (8001860 <ndefDumpSysInfo+0x328>)
 800176c:	f01a fad0 	bl	801bd10 <iprintf>
        platformLog(" * [%c] GetSystemInformation           \r\n", ndefT5TSysInfoGetSystemInformationSupported(sysInfo->supportedCmd)            ? 'X' : ' ');
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	7adb      	ldrb	r3, [r3, #11]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <ndefDumpSysInfo+0x24c>
 8001780:	2358      	movs	r3, #88	; 0x58
 8001782:	e000      	b.n	8001786 <ndefDumpSysInfo+0x24e>
 8001784:	2320      	movs	r3, #32
 8001786:	4619      	mov	r1, r3
 8001788:	4836      	ldr	r0, [pc, #216]	; (8001864 <ndefDumpSysInfo+0x32c>)
 800178a:	f01a fac1 	bl	801bd10 <iprintf>
        platformLog(" * [%c] CustomCmds                     \r\n", ndefT5TSysInfoCustomCmdsSupported(sysInfo->supportedCmd)                      ? 'X' : ' ');
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	7adb      	ldrb	r3, [r3, #11]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <ndefDumpSysInfo+0x26a>
 800179e:	2358      	movs	r3, #88	; 0x58
 80017a0:	e000      	b.n	80017a4 <ndefDumpSysInfo+0x26c>
 80017a2:	2320      	movs	r3, #32
 80017a4:	4619      	mov	r1, r3
 80017a6:	4830      	ldr	r0, [pc, #192]	; (8001868 <ndefDumpSysInfo+0x330>)
 80017a8:	f01a fab2 	bl	801bd10 <iprintf>
        platformLog(" * [%c] FastReadMultipleBlocks         \r\n", ndefT5TSysInfoFastReadMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	7adb      	ldrb	r3, [r3, #11]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <ndefDumpSysInfo+0x288>
 80017bc:	2358      	movs	r3, #88	; 0x58
 80017be:	e000      	b.n	80017c2 <ndefDumpSysInfo+0x28a>
 80017c0:	2320      	movs	r3, #32
 80017c2:	4619      	mov	r1, r3
 80017c4:	4829      	ldr	r0, [pc, #164]	; (800186c <ndefDumpSysInfo+0x334>)
 80017c6:	f01a faa3 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ExtReadSingleBlock             \r\n", ndefT5TSysInfoExtReadSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' '); 
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	7b1b      	ldrb	r3, [r3, #12]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <ndefDumpSysInfo+0x2a2>
 80017d6:	2358      	movs	r3, #88	; 0x58
 80017d8:	e000      	b.n	80017dc <ndefDumpSysInfo+0x2a4>
 80017da:	2320      	movs	r3, #32
 80017dc:	4619      	mov	r1, r3
 80017de:	4824      	ldr	r0, [pc, #144]	; (8001870 <ndefDumpSysInfo+0x338>)
 80017e0:	f01a fa96 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ExtWriteSingleBlock            \r\n", ndefT5TSysInfoExtWriteSingleBlockSupported(sysInfo->supportedCmd)             ? 'X' : ' ');
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <ndefDumpSysInfo+0x2c0>
 80017f4:	2358      	movs	r3, #88	; 0x58
 80017f6:	e000      	b.n	80017fa <ndefDumpSysInfo+0x2c2>
 80017f8:	2320      	movs	r3, #32
 80017fa:	4619      	mov	r1, r3
 80017fc:	481d      	ldr	r0, [pc, #116]	; (8001874 <ndefDumpSysInfo+0x33c>)
 80017fe:	f01a fa87 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ExtLockSingleBlock             \r\n", ndefT5TSysInfoExtLockSingleBlockSupported(sysInfo->supportedCmd)              ? 'X' : ' ');
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	7b1b      	ldrb	r3, [r3, #12]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d032      	beq.n	8001878 <ndefDumpSysInfo+0x340>
 8001812:	2358      	movs	r3, #88	; 0x58
 8001814:	e031      	b.n	800187a <ndefDumpSysInfo+0x342>
 8001816:	bf00      	nop
 8001818:	20000939 	.word	0x20000939
 800181c:	0801d7d8 	.word	0x0801d7d8
 8001820:	0801d7ec 	.word	0x0801d7ec
 8001824:	0801d810 	.word	0x0801d810
 8001828:	0801d824 	.word	0x0801d824
 800182c:	0801d834 	.word	0x0801d834
 8001830:	0801d858 	.word	0x0801d858
 8001834:	0801d86c 	.word	0x0801d86c
 8001838:	0801d898 	.word	0x0801d898
 800183c:	0801d8c4 	.word	0x0801d8c4
 8001840:	0801d8f0 	.word	0x0801d8f0
 8001844:	0801d91c 	.word	0x0801d91c
 8001848:	0801d948 	.word	0x0801d948
 800184c:	0801d974 	.word	0x0801d974
 8001850:	0801d9a0 	.word	0x0801d9a0
 8001854:	0801d9cc 	.word	0x0801d9cc
 8001858:	0801d9f8 	.word	0x0801d9f8
 800185c:	0801da24 	.word	0x0801da24
 8001860:	0801da50 	.word	0x0801da50
 8001864:	0801da7c 	.word	0x0801da7c
 8001868:	0801daa8 	.word	0x0801daa8
 800186c:	0801dad4 	.word	0x0801dad4
 8001870:	0801db00 	.word	0x0801db00
 8001874:	0801db2c 	.word	0x0801db2c
 8001878:	2320      	movs	r3, #32
 800187a:	4619      	mov	r1, r3
 800187c:	4823      	ldr	r0, [pc, #140]	; (800190c <ndefDumpSysInfo+0x3d4>)
 800187e:	f01a fa47 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ExtReadMultipleBlocks          \r\n", ndefT5TSysInfoExtReadMultipleBlocksSupported(sysInfo->supportedCmd)           ? 'X' : ' ');
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	7b1b      	ldrb	r3, [r3, #12]
 8001886:	08db      	lsrs	r3, r3, #3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <ndefDumpSysInfo+0x35e>
 8001892:	2358      	movs	r3, #88	; 0x58
 8001894:	e000      	b.n	8001898 <ndefDumpSysInfo+0x360>
 8001896:	2320      	movs	r3, #32
 8001898:	4619      	mov	r1, r3
 800189a:	481d      	ldr	r0, [pc, #116]	; (8001910 <ndefDumpSysInfo+0x3d8>)
 800189c:	f01a fa38 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ExtWriteMultipleBlocks         \r\n", ndefT5TSysInfoExtWriteMultipleBlocksSupported(sysInfo->supportedCmd)          ? 'X' : ' ');
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	7b1b      	ldrb	r3, [r3, #12]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <ndefDumpSysInfo+0x37c>
 80018b0:	2358      	movs	r3, #88	; 0x58
 80018b2:	e000      	b.n	80018b6 <ndefDumpSysInfo+0x37e>
 80018b4:	2320      	movs	r3, #32
 80018b6:	4619      	mov	r1, r3
 80018b8:	4816      	ldr	r0, [pc, #88]	; (8001914 <ndefDumpSysInfo+0x3dc>)
 80018ba:	f01a fa29 	bl	801bd10 <iprintf>
        platformLog(" * [%c] ExtGetMultipleBlockSecStatus   \r\n", ndefT5TSysInfoExtGetMultipleBlockSecStatusSupported(sysInfo->supportedCmd)    ? 'X' : ' ');
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	7b1b      	ldrb	r3, [r3, #12]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <ndefDumpSysInfo+0x39a>
 80018ce:	2358      	movs	r3, #88	; 0x58
 80018d0:	e000      	b.n	80018d4 <ndefDumpSysInfo+0x39c>
 80018d2:	2320      	movs	r3, #32
 80018d4:	4619      	mov	r1, r3
 80018d6:	4810      	ldr	r0, [pc, #64]	; (8001918 <ndefDumpSysInfo+0x3e0>)
 80018d8:	f01a fa1a 	bl	801bd10 <iprintf>
        platformLog(" * [%c] FastExtendedReadMultipleBlocks \r\n", ndefT5TSysInfoFastExtendedReadMultipleBlocksSupported(sysInfo->supportedCmd)  ? 'X' : ' ');
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <ndefDumpSysInfo+0x3b8>
 80018ec:	2358      	movs	r3, #88	; 0x58
 80018ee:	e000      	b.n	80018f2 <ndefDumpSysInfo+0x3ba>
 80018f0:	2320      	movs	r3, #32
 80018f2:	4619      	mov	r1, r3
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <ndefDumpSysInfo+0x3e4>)
 80018f6:	f01a fa0b 	bl	801bd10 <iprintf>
    }
    return;
 80018fa:	e003      	b.n	8001904 <ndefDumpSysInfo+0x3cc>
        return;
 80018fc:	bf00      	nop
 80018fe:	e002      	b.n	8001906 <ndefDumpSysInfo+0x3ce>
        return;
 8001900:	bf00      	nop
 8001902:	e000      	b.n	8001906 <ndefDumpSysInfo+0x3ce>
    return;
 8001904:	bf00      	nop
}
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	0801db58 	.word	0x0801db58
 8001910:	0801db84 	.word	0x0801db84
 8001914:	0801dbb0 	.word	0x0801dbb0
 8001918:	0801dbdc 	.word	0x0801dbdc
 800191c:	0801dc08 	.word	0x0801dc08

08001920 <ndefIsSTTag>:

#if NDEF_FEATURE_ALL
static bool ndefIsSTTag(ndefContext *ctx)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    bool ret = false;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]
  if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
  {
    ret = true;
  }
#endif
    if( ctx == NULL )
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <ndefIsSTTag+0x16>
    {   
        return ret;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	e026      	b.n	8001984 <ndefIsSTTag+0x64>
    }
    switch (ctx->device.type)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d81c      	bhi.n	8001978 <ndefIsSTTag+0x58>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <ndefIsSTTag+0x24>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	08001979 	.word	0x08001979
 800194c:	08001979 	.word	0x08001979
 8001950:	0800196b 	.word	0x0800196b
    {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            if( (ctx->device.dev.nfca.nfcId1Len != 4) && (ctx->device.dev.nfca.nfcId1[0] == 0x02 ) )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	795b      	ldrb	r3, [r3, #5]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d00f      	beq.n	800197c <ndefIsSTTag+0x5c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	799b      	ldrb	r3, [r3, #6]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d10b      	bne.n	800197c <ndefIsSTTag+0x5c>
            {  
                ret = true;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001968:	e008      	b.n	800197c <ndefIsSTTag+0x5c>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            break;
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            if( ctx->device.dev.nfcv.InvRes.UID[6] == 0x02 )
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7a5b      	ldrb	r3, [r3, #9]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d106      	bne.n	8001980 <ndefIsSTTag+0x60>
            {  
                ret = true;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001976:	e003      	b.n	8001980 <ndefIsSTTag+0x60>
        default:
            break;
 8001978:	bf00      	nop
 800197a:	e002      	b.n	8001982 <ndefIsSTTag+0x62>
            break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <ndefIsSTTag+0x62>
            break;
 8001980:	bf00      	nop
    }
    return (ret);
 8001982:	7bfb      	ldrb	r3, [r7, #15]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <LedNotificationWriteDone>:
#endif /* NDEF_FEATURE_ALL */

#if NDEF_FEATURE_ALL
static void LedNotificationWriteDone(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 3; i++)
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e00c      	b.n	80019b6 <LedNotificationWriteDone+0x26>
    {
        ledsOn();
 800199c:	f000 f814 	bl	80019c8 <ledsOn>
        platformDelay(100);
 80019a0:	2064      	movs	r0, #100	; 0x64
 80019a2:	f001 faed 	bl	8002f80 <HAL_Delay>

        ledsOff();
 80019a6:	f000 f83b 	bl	8001a20 <ledsOff>
        platformDelay(100);
 80019aa:	2064      	movs	r0, #100	; 0x64
 80019ac:	f001 fae8 	bl	8002f80 <HAL_Delay>
    for (i = 0; i < 3; i++)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d9ef      	bls.n	800199c <LedNotificationWriteDone+0xc>
    }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <ledsOn>:

static void ledsOn(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
    platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d2:	4810      	ldr	r0, [pc, #64]	; (8001a14 <ledsOn+0x4c>)
 80019d4:	f001 fed3 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <ledsOn+0x4c>)
 80019e0:	f001 fecd 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ea:	480b      	ldr	r0, [pc, #44]	; (8001a18 <ledsOn+0x50>)
 80019ec:	f001 fec7 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2108      	movs	r1, #8
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <ledsOn+0x54>)
 80019f6:	f001 fec2 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2120      	movs	r1, #32
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <ledsOn+0x54>)
 8001a00:	f001 febd 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOn(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <ledsOn+0x54>)
 8001a0a:	f001 feb8 	bl	800377e <HAL_GPIO_WritePin>
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40011400 	.word	0x40011400
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	40012000 	.word	0x40012000

08001a20 <ledsOff>:

static void ledsOff(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2a:	4810      	ldr	r0, [pc, #64]	; (8001a6c <ledsOff+0x4c>)
 8001a2c:	f001 fea7 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <ledsOff+0x4c>)
 8001a38:	f001 fea1 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <ledsOff+0x50>)
 8001a44:	f001 fe9b 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	4809      	ldr	r0, [pc, #36]	; (8001a74 <ledsOff+0x54>)
 8001a4e:	f001 fe96 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2120      	movs	r1, #32
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <ledsOff+0x54>)
 8001a58:	f001 fe91 	bl	800377e <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <ledsOff+0x54>)
 8001a62:	f001 fe8c 	bl	800377e <HAL_GPIO_WritePin>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40012000 	.word	0x40012000

08001a78 <isPrintableASCII>:
 */


/*****************************************************************************/
static bool isPrintableASCII(const uint8_t* str, uint32_t strLen)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    uint32_t i;
    
    if ((str == NULL) || (strLen == 0))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <isPrintableASCII+0x16>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <isPrintableASCII+0x1a>
    {
        return false;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e018      	b.n	8001ac4 <isPrintableASCII+0x4c>
    }

    for (i = 0; i < strLen; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e010      	b.n	8001aba <isPrintableASCII+0x42>
    {
        if ((str[i] < 0x20) || (str[i] > 0x7E))
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b1f      	cmp	r3, #31
 8001aa2:	d905      	bls.n	8001ab0 <isPrintableASCII+0x38>
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b7e      	cmp	r3, #126	; 0x7e
 8001aae:	d901      	bls.n	8001ab4 <isPrintableASCII+0x3c>
        {
            return false;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e007      	b.n	8001ac4 <isPrintableASCII+0x4c>
    for (i = 0; i < strLen; i++)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3ea      	bcc.n	8001a98 <isPrintableASCII+0x20>
        }
    }

    return true;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <ndefRecordDump>:


/*****************************************************************************/
ReturnCode ndefRecordDump(const ndefRecord* record, bool verbose)
{
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b098      	sub	sp, #96	; 0x60
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
    static uint32_t index;
    const uint8_t *ndefTNFNames[] =
 8001adc:	4b5e      	ldr	r3, [pc, #376]	; (8001c58 <ndefRecordDump+0x188>)
 8001ade:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        (uint8_t *)"NFC Forum external type [NFC RTD]",
        (uint8_t *)"Unknown",
        (uint8_t *)"Unchanged",
        (uint8_t *)"Reserved"
    };
    uint8_t* headerSR = (uint8_t*)"";
 8001af0:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <ndefRecordDump+0x18c>)
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
    ReturnCode err;

    if (record == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d104      	bne.n	8001b04 <ndefRecordDump+0x34>
    {
        platformLog("No record\r\n");
 8001afa:	4859      	ldr	r0, [pc, #356]	; (8001c60 <ndefRecordDump+0x190>)
 8001afc:	f01a f9a2 	bl	801be44 <puts>
        return ERR_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e0a5      	b.n	8001c50 <ndefRecordDump+0x180>
    }

    if (ndefHeaderIsSetMB(record))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	09db      	lsrs	r3, r3, #7
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d103      	bne.n	8001b18 <ndefRecordDump+0x48>
    {
        index = 1U;
 8001b10:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <ndefRecordDump+0x194>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e004      	b.n	8001b22 <ndefRecordDump+0x52>
    }
    else
    {
        index++;
 8001b18:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <ndefRecordDump+0x194>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a51      	ldr	r2, [pc, #324]	; (8001c64 <ndefRecordDump+0x194>)
 8001b20:	6013      	str	r3, [r2, #0]
    }

    if (verbose == true)
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <ndefRecordDump+0x6c>
    {
        headerSR = (uint8_t*)(ndefHeaderIsSetSR(record) ? " - Short Record" : " - Standard Record");
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <ndefRecordDump+0x68>
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <ndefRecordDump+0x198>)
 8001b36:	e000      	b.n	8001b3a <ndefRecordDump+0x6a>
 8001b38:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <ndefRecordDump+0x19c>)
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    platformLog("Record #%d%s\r\n", index, headerSR);
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <ndefRecordDump+0x194>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b42:	4619      	mov	r1, r3
 8001b44:	484a      	ldr	r0, [pc, #296]	; (8001c70 <ndefRecordDump+0x1a0>)
 8001b46:	f01a f8e3 	bl	801bd10 <iprintf>

    /* Well-known type dump */
    err = ndefRecordDumpType(record);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fbae 	bl	80022ac <ndefRecordDumpType>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (verbose == true)
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d028      	beq.n	8001bae <ndefRecordDump+0xde>
    {
        /* Raw dump */
        //platformLog(" MB:%d ME:%d CF:%d SR:%d IL:%d TNF:%d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
        platformLog(" MB ME CF SR IL TNF\r\n");
 8001b5c:	4845      	ldr	r0, [pc, #276]	; (8001c74 <ndefRecordDump+0x1a4>)
 8001b5e:	f01a f971 	bl	801be44 <puts>
        platformLog("  %d  %d  %d  %d  %d   %d\r\n", ndefHeaderMB(record), ndefHeaderME(record), ndefHeaderCF(record), ndefHeaderSR(record), ndefHeaderIL(record), ndefHeaderTNF(record));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	09db      	lsrs	r3, r3, #7
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	f003 0001 	and.w	r0, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	f003 0401 	and.w	r4, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	08d2      	lsrs	r2, r2, #3
 8001b90:	f002 0201 	and.w	r2, r2, #1
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	7809      	ldrb	r1, [r1, #0]
 8001b98:	f001 0107 	and.w	r1, r1, #7
 8001b9c:	9102      	str	r1, [sp, #8]
 8001b9e:	9201      	str	r2, [sp, #4]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4833      	ldr	r0, [pc, #204]	; (8001c78 <ndefRecordDump+0x1a8>)
 8001baa:	f01a f8b1 	bl	801bd10 <iprintf>
    }
    if ( (err != ERR_NONE) || (verbose == true) )
 8001bae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <ndefRecordDump+0xec>
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d048      	beq.n	8001c4e <ndefRecordDump+0x17e>
    {
        platformLog(" Type Name Format: %s\r\n", ndefTNFNames[ndefHeaderTNF(record)]);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001bca:	4413      	add	r3, r2
 8001bcc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	482a      	ldr	r0, [pc, #168]	; (8001c7c <ndefRecordDump+0x1ac>)
 8001bd4:	f01a f89c 	bl	801bd10 <iprintf>

        uint8_t tnf;
        ndefConstBuffer8 bufRecordType;
        ndefRecordGetType(record, &tnf, &bufRecordType);
 8001bd8:	f107 021c 	add.w	r2, r7, #28
 8001bdc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f003 fb60 	bl	80052a8 <ndefRecordGetType>
        if ( (tnf == NDEF_TNF_EMPTY) && (bufRecordType.length == 0U) )
 8001be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d107      	bne.n	8001c00 <ndefRecordDump+0x130>
 8001bf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d103      	bne.n	8001c00 <ndefRecordDump+0x130>
        {
            platformLog(" Empty NDEF record\r\n");
 8001bf8:	4821      	ldr	r0, [pc, #132]	; (8001c80 <ndefRecordDump+0x1b0>)
 8001bfa:	f01a f923 	bl	801be44 <puts>
 8001bfe:	e006      	b.n	8001c0e <ndefRecordDump+0x13e>
        }
        else
        {
            ndefBuffer8Print(" Type: \"", &bufRecordType, "\"\r\n");
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <ndefRecordDump+0x1b4>)
 8001c06:	4619      	mov	r1, r3
 8001c08:	481f      	ldr	r0, [pc, #124]	; (8001c88 <ndefRecordDump+0x1b8>)
 8001c0a:	f000 fcb1 	bl	8002570 <ndefBuffer8Print>
        }

        if (ndefHeaderIsSetIL(record))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <ndefRecordDump+0x164>
        {
            /* ID Length bit set */
            ndefConstBuffer8 bufRecordId;
            ndefRecordGetId(record, &bufRecordId);
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f003 fbcc 	bl	80053be <ndefRecordGetId>
            ndefBuffer8Print(" ID: \"", &bufRecordId, "\"\r\n");
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <ndefRecordDump+0x1b4>)
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4817      	ldr	r0, [pc, #92]	; (8001c8c <ndefRecordDump+0x1bc>)
 8001c30:	f000 fc9e 	bl	8002570 <ndefBuffer8Print>
        }

        ndefConstBuffer bufRecordPayload;
        ndefRecordGetPayload(record, &bufRecordPayload);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f003 fc11 	bl	8005462 <ndefRecordGetPayload>
        ndefBufferDump(" Payload:", &bufRecordPayload, verbose);
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4811      	ldr	r0, [pc, #68]	; (8001c90 <ndefRecordDump+0x1c0>)
 8001c4a:	f000 fbf5 	bl	8002438 <ndefBufferDump>
    }

    return ERR_NONE;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3750      	adds	r7, #80	; 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}
 8001c58:	0801de64 	.word	0x0801de64
 8001c5c:	0801dd9c 	.word	0x0801dd9c
 8001c60:	0801dda0 	.word	0x0801dda0
 8001c64:	2000294c 	.word	0x2000294c
 8001c68:	0801ddac 	.word	0x0801ddac
 8001c6c:	0801ddbc 	.word	0x0801ddbc
 8001c70:	0801ddd0 	.word	0x0801ddd0
 8001c74:	0801dde0 	.word	0x0801dde0
 8001c78:	0801ddf8 	.word	0x0801ddf8
 8001c7c:	0801de14 	.word	0x0801de14
 8001c80:	0801de2c 	.word	0x0801de2c
 8001c84:	0801de40 	.word	0x0801de40
 8001c88:	0801de44 	.word	0x0801de44
 8001c8c:	0801de50 	.word	0x0801de50
 8001c90:	0801de58 	.word	0x0801de58

08001c94 <ndefMessageDump>:


/*****************************************************************************/
ReturnCode ndefMessageDump(const ndefMessage* message, bool verbose)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
    ReturnCode  err;
    ndefRecord* record;

    if (message == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <ndefMessageDump+0x1c>
    {
        platformLog("Empty NDEF message\r\n");
 8001ca6:	4816      	ldr	r0, [pc, #88]	; (8001d00 <ndefMessageDump+0x6c>)
 8001ca8:	f01a f8cc 	bl	801be44 <puts>
        return ERR_NONE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e023      	b.n	8001cf8 <ndefMessageDump+0x64>
    }
    else
    {
        platformLog("Decoding NDEF message\r\n");
 8001cb0:	4814      	ldr	r0, [pc, #80]	; (8001d04 <ndefMessageDump+0x70>)
 8001cb2:	f01a f8c7 	bl	801be44 <puts>
    }

    record = ndefMessageGetFirstRecord(message);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <ndefMessageDump+0x2e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	e000      	b.n	8001cc4 <ndefMessageDump+0x30>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]

    while (record != NULL)
 8001cc6:	e013      	b.n	8001cf0 <ndefMessageDump+0x5c>
    {
        err = ndefRecordDump(record, verbose);
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff feff 	bl	8001ad0 <ndefRecordDump>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	817b      	strh	r3, [r7, #10]
        if (err != ERR_NONE)
 8001cd6:	897b      	ldrh	r3, [r7, #10]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <ndefMessageDump+0x4c>
        {
            return err;
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	e00b      	b.n	8001cf8 <ndefMessageDump+0x64>
        }
        record = ndefMessageGetNextRecord(record);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <ndefMessageDump+0x58>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	e000      	b.n	8001cee <ndefMessageDump+0x5a>
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
    while (record != NULL)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1e8      	bne.n	8001cc8 <ndefMessageDump+0x34>
    }

    return ERR_NONE;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	0801de84 	.word	0x0801de84
 8001d04:	0801de98 	.word	0x0801de98

08001d08 <ndefEmptyTypeDump>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeDump(const ndefType* empty)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <ndefEmptyTypeDump+0x12>
    {
        return ERR_PARAM;
 8001d16:	2307      	movs	r3, #7
 8001d18:	e009      	b.n	8001d2e <ndefEmptyTypeDump+0x26>
    }

    if (empty->id != NDEF_TYPE_EMPTY)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <ndefEmptyTypeDump+0x1e>
    {
        return ERR_PARAM;
 8001d22:	2307      	movs	r3, #7
 8001d24:	e003      	b.n	8001d2e <ndefEmptyTypeDump+0x26>
    }

    platformLog(" Empty record\r\n");
 8001d26:	4804      	ldr	r0, [pc, #16]	; (8001d38 <ndefEmptyTypeDump+0x30>)
 8001d28:	f01a f88c 	bl	801be44 <puts>

    return ERR_NONE;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	0801deb0 	.word	0x0801deb0

08001d3c <ndefRtdDeviceInfoDump>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoDump(const ndefType* devInfo)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b094      	sub	sp, #80	; 0x50
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
    ndefTypeRtdDeviceInfo devInfoData;
    uint32_t type;
    uint32_t i;

    const uint8_t* ndefDeviceInfoName[] =
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <ndefRtdDeviceInfoDump+0x118>)
 8001d46:	f107 040c 	add.w	r4, r7, #12
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	6023      	str	r3, [r4, #0]
        (uint8_t*)"Device",
        (uint8_t*)"UUID",
        (uint8_t*)"Firmware version",
    };

    if (devInfo == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <ndefRtdDeviceInfoDump+0x22>
    {
        return ERR_PARAM;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	e076      	b.n	8001e4c <ndefRtdDeviceInfoDump+0x110>
    }

    if (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d001      	beq.n	8001d6a <ndefRtdDeviceInfoDump+0x2e>
    {
        return ERR_PARAM;
 8001d66:	2307      	movs	r3, #7
 8001d68:	e070      	b.n	8001e4c <ndefRtdDeviceInfoDump+0x110>
    }

    ndefGetRtdDeviceInfo(devInfo, &devInfoData);
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f005 f82b 	bl	8006dcc <ndefGetRtdDeviceInfo>

    platformLog(" Device Information:\r\n");
 8001d76:	4838      	ldr	r0, [pc, #224]	; (8001e58 <ndefRtdDeviceInfoDump+0x11c>)
 8001d78:	f01a f864 	bl	801be44 <puts>

    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d80:	e060      	b.n	8001e44 <ndefRtdDeviceInfoDump+0x108>
    {
        if (devInfoData.devInfo[type].buffer != NULL)
 8001d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d054      	beq.n	8001e3e <ndefRtdDeviceInfoDump+0x102>
        {
            platformLog(" - %s: ", ndefDeviceInfoName[devInfoData.devInfo[type].type]);
 8001d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001da8:	4413      	add	r3, r2
 8001daa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001dae:	4619      	mov	r1, r3
 8001db0:	482a      	ldr	r0, [pc, #168]	; (8001e5c <ndefRtdDeviceInfoDump+0x120>)
 8001db2:	f019 ffad 	bl	801bd10 <iprintf>

            if (type != NDEF_DEVICE_INFO_UUID)
 8001db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d01e      	beq.n	8001dfa <ndefRtdDeviceInfoDump+0xbe>
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dc0:	e00f      	b.n	8001de2 <ndefRtdDeviceInfoDump+0xa6>
                {
                    platformLog("%c", devInfoData.devInfo[type].buffer[i]); /* character */
 8001dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001dca:	4413      	add	r3, r2
 8001dcc:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f019 ffb2 	bl	801bd40 <putchar>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8001ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dde:	3301      	adds	r3, #1
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001dea:	4413      	add	r3, r2
 8001dec:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8001df0:	461a      	mov	r2, r3
 8001df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d3e4      	bcc.n	8001dc2 <ndefRtdDeviceInfoDump+0x86>
 8001df8:	e01e      	b.n	8001e38 <ndefRtdDeviceInfoDump+0xfc>
                }
            }
            else
            {
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dfe:	e010      	b.n	8001e22 <ndefRtdDeviceInfoDump+0xe6>
                {
                    platformLog("%.2X", devInfoData.devInfo[type].buffer[i]); /* hex number */
 8001e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e08:	4413      	add	r3, r2
 8001e0a:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e10:	4413      	add	r3, r2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4812      	ldr	r0, [pc, #72]	; (8001e60 <ndefRtdDeviceInfoDump+0x124>)
 8001e18:	f019 ff7a 	bl	801bd10 <iprintf>
                for (i = 0; i < devInfoData.devInfo[type].length; i++)
 8001e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1e:	3301      	adds	r3, #1
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8001e30:	461a      	mov	r2, r3
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d3e3      	bcc.n	8001e00 <ndefRtdDeviceInfoDump+0xc4>
                }
            }
            platformLog("\r\n");
 8001e38:	480a      	ldr	r0, [pc, #40]	; (8001e64 <ndefRtdDeviceInfoDump+0x128>)
 8001e3a:	f01a f803 	bl	801be44 <puts>
    for (type = 0; type < NDEF_DEVICE_INFO_TYPE_COUNT; type++)
 8001e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e40:	3301      	adds	r3, #1
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d99b      	bls.n	8001d82 <ndefRtdDeviceInfoDump+0x46>
        }
    }

    return ERR_NONE;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3750      	adds	r7, #80	; 0x50
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdb0      	pop	{r4, r5, r7, pc}
 8001e54:	0801deec 	.word	0x0801deec
 8001e58:	0801dec0 	.word	0x0801dec0
 8001e5c:	0801ded8 	.word	0x0801ded8
 8001e60:	0801dee0 	.word	0x0801dee0
 8001e64:	0801dee8 	.word	0x0801dee8

08001e68 <ndefRtdTextDump>:


/*****************************************************************************/
ReturnCode ndefRtdTextDump(const ndefType* text)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    uint8_t utfEncoding;
    ndefConstBuffer8 bufLanguageCode;
    ndefConstBuffer  bufSentence;

    if (text == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <ndefRtdTextDump+0x12>
    {
        return ERR_PARAM;
 8001e76:	2307      	movs	r3, #7
 8001e78:	e027      	b.n	8001eca <ndefRtdTextDump+0x62>
    }

    if (text->id != NDEF_TYPE_RTD_TEXT)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d001      	beq.n	8001e86 <ndefRtdTextDump+0x1e>
    {
        return ERR_PARAM;
 8001e82:	2307      	movs	r3, #7
 8001e84:	e021      	b.n	8001eca <ndefRtdTextDump+0x62>
    }

    ndefGetRtdText(text, &utfEncoding, &bufLanguageCode, &bufSentence);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	f107 0214 	add.w	r2, r7, #20
 8001e8e:	f107 011f 	add.w	r1, r7, #31
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f005 f9cc 	bl	8007230 <ndefGetRtdText>

    ndefBufferPrint(" Text: \"", &bufSentence, "");
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <ndefRtdTextDump+0x6c>)
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <ndefRtdTextDump+0x70>)
 8001ea2:	f000 fb2d 	bl	8002500 <ndefBufferPrint>

    platformLog("\" (%s,", utfEncoding == TEXT_ENCODING_UTF8 ? "UTF8" : "UTF16");
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <ndefRtdTextDump+0x48>
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <ndefRtdTextDump+0x74>)
 8001eae:	e000      	b.n	8001eb2 <ndefRtdTextDump+0x4a>
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <ndefRtdTextDump+0x78>)
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <ndefRtdTextDump+0x7c>)
 8001eb6:	f019 ff2b 	bl	801bd10 <iprintf>

    ndefBuffer8Print(" language code \"", &bufLanguageCode, "\")\r\n");
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <ndefRtdTextDump+0x80>)
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480a      	ldr	r0, [pc, #40]	; (8001eec <ndefRtdTextDump+0x84>)
 8001ec4:	f000 fb54 	bl	8002570 <ndefBuffer8Print>

    return ERR_NONE;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	0801dd9c 	.word	0x0801dd9c
 8001ed8:	0801df00 	.word	0x0801df00
 8001edc:	0801df0c 	.word	0x0801df0c
 8001ee0:	0801df14 	.word	0x0801df14
 8001ee4:	0801df1c 	.word	0x0801df1c
 8001ee8:	0801df24 	.word	0x0801df24
 8001eec:	0801df2c 	.word	0x0801df2c

08001ef0 <ndefRtdUriDump>:


/*****************************************************************************/
ReturnCode ndefRtdUriDump(const ndefType* uri)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufProtocol;
    ndefConstBuffer bufUriString;

    if (uri == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <ndefRtdUriDump+0x12>
    {
        return ERR_PARAM;
 8001efe:	2307      	movs	r3, #7
 8001f00:	e01c      	b.n	8001f3c <ndefRtdUriDump+0x4c>
    }

    if (uri->id != NDEF_TYPE_RTD_URI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d001      	beq.n	8001f0e <ndefRtdUriDump+0x1e>
    {
        return ERR_PARAM;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e016      	b.n	8001f3c <ndefRtdUriDump+0x4c>
    }

    ndefGetRtdUri(uri, &bufProtocol, &bufUriString);
 8001f0e:	f107 0208 	add.w	r2, r7, #8
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f005 fb6f 	bl	80075fc <ndefGetRtdUri>

    ndefBufferPrint("URI: (", &bufProtocol, ")");
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <ndefRtdUriDump+0x54>)
 8001f24:	4619      	mov	r1, r3
 8001f26:	4808      	ldr	r0, [pc, #32]	; (8001f48 <ndefRtdUriDump+0x58>)
 8001f28:	f000 faea 	bl	8002500 <ndefBufferPrint>
    ndefBufferPrint("", &bufUriString, "\r\n");
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <ndefRtdUriDump+0x5c>)
 8001f32:	4619      	mov	r1, r3
 8001f34:	4806      	ldr	r0, [pc, #24]	; (8001f50 <ndefRtdUriDump+0x60>)
 8001f36:	f000 fae3 	bl	8002500 <ndefBufferPrint>

    return ERR_NONE;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0801df40 	.word	0x0801df40
 8001f48:	0801df44 	.word	0x0801df44
 8001f4c:	0801df4c 	.word	0x0801df4c
 8001f50:	0801dd9c 	.word	0x0801dd9c

08001f54 <ndefRtdAarDump>:


/*****************************************************************************/
ReturnCode ndefRtdAarDump(const ndefType* aar)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufAarString;

    if (aar == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <ndefRtdAarDump+0x12>
    {
        return ERR_PARAM;
 8001f62:	2307      	movs	r3, #7
 8001f64:	e013      	b.n	8001f8e <ndefRtdAarDump+0x3a>
    }

    if (aar->id != NDEF_TYPE_RTD_AAR)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d001      	beq.n	8001f72 <ndefRtdAarDump+0x1e>
    {
        return ERR_PARAM;
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e00d      	b.n	8001f8e <ndefRtdAarDump+0x3a>
    }

    ndefGetRtdAar(aar, &bufAarString);
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f005 fc3d 	bl	80077f8 <ndefGetRtdAar>

    ndefBufferPrint(" AAR Package: ", &bufAarString, "\r\n");
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <ndefRtdAarDump+0x44>)
 8001f84:	4619      	mov	r1, r3
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <ndefRtdAarDump+0x48>)
 8001f88:	f000 faba 	bl	8002500 <ndefBufferPrint>

    return ERR_NONE;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	0801df4c 	.word	0x0801df4c
 8001f9c:	0801df50 	.word	0x0801df50

08001fa0 <ndefMediaVCardTranslate>:
}


/*****************************************************************************/
static ReturnCode ndefMediaVCardTranslate(const ndefConstBuffer* bufText, ndefConstBuffer* bufTranslation)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b096      	sub	sp, #88	; 0x58
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    typedef struct {
        uint8_t* vCardString;
        uint8_t* english;
    } ndefTranslate;

    const ndefTranslate translate[] =
 8001faa:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <ndefMediaVCardTranslate+0xc0>)
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	2248      	movs	r2, #72	; 0x48
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f019 fe7b 	bl	801bcb0 <memcpy>
        { (uint8_t*)"PHOTO"        , (uint8_t*)"Photo"          },
    };

    uint32_t i;

    if ( (bufText == NULL) || (bufTranslation == NULL) )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <ndefMediaVCardTranslate+0x26>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <ndefMediaVCardTranslate+0x2a>
    {
        return ERR_PROTO;
 8001fc6:	230b      	movs	r3, #11
 8001fc8:	e045      	b.n	8002056 <ndefMediaVCardTranslate+0xb6>
    }

    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8001fce:	e036      	b.n	800203e <ndefMediaVCardTranslate+0x9e>
    {
        if (ST_BYTECMP(bufText->buffer, translate[i].vCardString, strlen((char*)translate[i].vCardString)) == 0)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681c      	ldr	r4, [r3, #0]
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001fdc:	4413      	add	r3, r2
 8001fde:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001fea:	4413      	add	r3, r2
 8001fec:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe f917 	bl	8000224 <strlen>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f019 fe49 	bl	801bc94 <memcmp>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d117      	bne.n	8002038 <ndefMediaVCardTranslate+0x98>
        {
            bufTranslation->buffer = translate[i].english;
 8002008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002010:	4413      	add	r3, r2
 8002012:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	601a      	str	r2, [r3, #0]
            bufTranslation->length = strlen((char*)translate[i].english);
 800201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002022:	4413      	add	r3, r2
 8002024:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f8fb 	bl	8000224 <strlen>
 800202e:	4602      	mov	r2, r0
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	605a      	str	r2, [r3, #4]

            return ERR_NONE;
 8002034:	2300      	movs	r3, #0
 8002036:	e00e      	b.n	8002056 <ndefMediaVCardTranslate+0xb6>
    for (i = 0; i < SIZEOF_ARRAY(translate); i++)
 8002038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203a:	3301      	adds	r3, #1
 800203c:	657b      	str	r3, [r7, #84]	; 0x54
 800203e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002040:	2b08      	cmp	r3, #8
 8002042:	d9c5      	bls.n	8001fd0 <ndefMediaVCardTranslate+0x30>
        }
    }

    bufTranslation->buffer = bufText->buffer;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	601a      	str	r2, [r3, #0]
    bufTranslation->length = bufText->length;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3758      	adds	r7, #88	; 0x58
 800205a:	46bd      	mov	sp, r7
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	bf00      	nop
 8002060:	0801df7c 	.word	0x0801df7c

08002064 <ndefMediaVCardDump>:


/*****************************************************************************/
ReturnCode ndefMediaVCardDump(const ndefType* vCard)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0a6      	sub	sp, #152	; 0x98
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    ndefConstBuffer bufTypeN     = { (uint8_t*)"N",     strlen((char*)"N")     };
 800206c:	4a5e      	ldr	r2, [pc, #376]	; (80021e8 <ndefMediaVCardDump+0x184>)
 800206e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002076:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeFN    = { (uint8_t*)"FN",    strlen((char*)"FN")    };
 800207a:	4a5c      	ldr	r2, [pc, #368]	; (80021ec <ndefMediaVCardDump+0x188>)
 800207c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002084:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeADR   = { (uint8_t*)"ADR",   strlen((char*)"ADR")   };
 8002088:	4a59      	ldr	r2, [pc, #356]	; (80021f0 <ndefMediaVCardDump+0x18c>)
 800208a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800208e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002092:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTEL   = { (uint8_t*)"TEL",   strlen((char*)"TEL")   };
 8002096:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <ndefMediaVCardDump+0x190>)
 8002098:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800209c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a0:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeEMAIL = { (uint8_t*)"EMAIL", strlen((char*)"EMAIL") };
 80020a4:	4a54      	ldr	r2, [pc, #336]	; (80021f8 <ndefMediaVCardDump+0x194>)
 80020a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ae:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeTITLE = { (uint8_t*)"TITLE", strlen((char*)"TITLE") };
 80020b2:	4a52      	ldr	r2, [pc, #328]	; (80021fc <ndefMediaVCardDump+0x198>)
 80020b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020bc:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeORG   = { (uint8_t*)"ORG",   strlen((char*)"ORG")   };
 80020c0:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <ndefMediaVCardDump+0x19c>)
 80020c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ca:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypeURL   = { (uint8_t*)"URL",   strlen((char*)"URL")   };
 80020ce:	4a4d      	ldr	r2, [pc, #308]	; (8002204 <ndefMediaVCardDump+0x1a0>)
 80020d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d8:	e883 0003 	stmia.w	r3, {r0, r1}
    ndefConstBuffer bufTypePHOTO = { (uint8_t*)"PHOTO", strlen((char*)"PHOTO") };
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <ndefMediaVCardDump+0x1a4>)
 80020de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020e6:	e883 0003 	stmia.w	r3, {r0, r1}

    const ndefConstBuffer* bufVCardField[] = {
 80020ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
 8002102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
 8002108:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
 800210e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002114:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002118:	643b      	str	r3, [r7, #64]	; 0x40
 800211a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    const ndefConstBuffer* bufType;
    ndefConstBuffer        bufSubType;
    ndefConstBuffer        bufValue;

    if (vCard == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <ndefMediaVCardDump+0xc6>
    {
        return ERR_PARAM;
 8002126:	2307      	movs	r3, #7
 8002128:	e05a      	b.n	80021e0 <ndefMediaVCardDump+0x17c>
    }

    if (vCard->id != NDEF_TYPE_MEDIA_VCARD)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d001      	beq.n	8002136 <ndefMediaVCardDump+0xd2>
    {
        return ERR_PARAM;
 8002132:	2307      	movs	r3, #7
 8002134:	e054      	b.n	80021e0 <ndefMediaVCardDump+0x17c>
    }

    platformLog(" vCard decoded: \r\n");
 8002136:	4835      	ldr	r0, [pc, #212]	; (800220c <ndefMediaVCardDump+0x1a8>)
 8002138:	f019 fe84 	bl	801be44 <puts>

    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002142:	e048      	b.n	80021d6 <ndefMediaVCardDump+0x172>
    {
        /* Requesting vCard field */
        bufType = bufVCardField[i];
 8002144:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800214e:	4413      	add	r3, r2
 8002150:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* Get information from vCard */
        ndefGetVCard(vCard, bufType, &bufSubType, &bufValue);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	f107 021c 	add.w	r2, r7, #28
 8002160:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f004 fa1d 	bl	80065a4 <ndefGetVCard>

        if (bufValue.buffer != NULL)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02d      	beq.n	80021cc <ndefMediaVCardDump+0x168>
        {
            ndefConstBuffer bufTypeTranslate;
            ndefMediaVCardTranslate(bufType, &bufTypeTranslate);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4619      	mov	r1, r3
 8002176:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800217a:	f7ff ff11 	bl	8001fa0 <ndefMediaVCardTranslate>

            /* Type */
            ndefBufferPrint(" ", &bufTypeTranslate, "");
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4a23      	ldr	r2, [pc, #140]	; (8002210 <ndefMediaVCardDump+0x1ac>)
 8002184:	4619      	mov	r1, r3
 8002186:	4823      	ldr	r0, [pc, #140]	; (8002214 <ndefMediaVCardDump+0x1b0>)
 8002188:	f000 f9ba 	bl	8002500 <ndefBufferPrint>

            /* Subtype, if any */
            if (bufSubType.buffer != NULL)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <ndefMediaVCardDump+0x13c>
            {
                ndefBufferPrint(" (", &bufSubType, ")");
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4a20      	ldr	r2, [pc, #128]	; (8002218 <ndefMediaVCardDump+0x1b4>)
 8002198:	4619      	mov	r1, r3
 800219a:	4820      	ldr	r0, [pc, #128]	; (800221c <ndefMediaVCardDump+0x1b8>)
 800219c:	f000 f9b0 	bl	8002500 <ndefBufferPrint>
            }

            /* Value */
            if (ST_BYTECMP(bufType->buffer, bufTypePHOTO.buffer, bufTypePHOTO.length) != 0)
 80021a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021aa:	4618      	mov	r0, r3
 80021ac:	f019 fd72 	bl	801bc94 <memcmp>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <ndefMediaVCardDump+0x162>
            {
                ndefBufferPrint(": ", &bufValue, "\r\n");
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <ndefMediaVCardDump+0x1bc>)
 80021bc:	4619      	mov	r1, r3
 80021be:	4819      	ldr	r0, [pc, #100]	; (8002224 <ndefMediaVCardDump+0x1c0>)
 80021c0:	f000 f99e 	bl	8002500 <ndefBufferPrint>
 80021c4:	e002      	b.n	80021cc <ndefMediaVCardDump+0x168>
            }
            else
            {
                platformLog("Photo: <Not displayed>\r\n");
 80021c6:	4818      	ldr	r0, [pc, #96]	; (8002228 <ndefMediaVCardDump+0x1c4>)
 80021c8:	f019 fe3c 	bl	801be44 <puts>
    for (i = 0; i < SIZEOF_ARRAY(bufVCardField); i++)
 80021cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021d0:	3301      	adds	r3, #1
 80021d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d9b2      	bls.n	8002144 <ndefMediaVCardDump+0xe0>
            }
        }
    }

    return ERR_NONE;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3798      	adds	r7, #152	; 0x98
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	0801dffc 	.word	0x0801dffc
 80021ec:	0801e004 	.word	0x0801e004
 80021f0:	0801e00c 	.word	0x0801e00c
 80021f4:	0801e014 	.word	0x0801e014
 80021f8:	0801e01c 	.word	0x0801e01c
 80021fc:	0801e024 	.word	0x0801e024
 8002200:	0801e02c 	.word	0x0801e02c
 8002204:	0801e034 	.word	0x0801e034
 8002208:	0801e03c 	.word	0x0801e03c
 800220c:	0801dfc4 	.word	0x0801dfc4
 8002210:	0801dd9c 	.word	0x0801dd9c
 8002214:	0801dfd8 	.word	0x0801dfd8
 8002218:	0801df40 	.word	0x0801df40
 800221c:	0801dfdc 	.word	0x0801dfdc
 8002220:	0801df4c 	.word	0x0801df4c
 8002224:	0801dfe0 	.word	0x0801dfe0
 8002228:	0801dfe4 	.word	0x0801dfe4

0800222c <ndefMediaWifiDump>:


/*****************************************************************************/
ReturnCode ndefMediaWifiDump(const ndefType* wifi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    ndefTypeWifi wifiConfig;

    if (wifi == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <ndefMediaWifiDump+0x12>
    {
        return ERR_PARAM;
 800223a:	2307      	movs	r3, #7
 800223c:	e028      	b.n	8002290 <ndefMediaWifiDump+0x64>
    }

    if (wifi->id != NDEF_TYPE_MEDIA_WIFI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b07      	cmp	r3, #7
 8002244:	d001      	beq.n	800224a <ndefMediaWifiDump+0x1e>
    {
        return ERR_PARAM;
 8002246:	2307      	movs	r3, #7
 8002248:	e022      	b.n	8002290 <ndefMediaWifiDump+0x64>
    }

    ndefGetWifi(wifi, &wifiConfig);
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f003 fcfb 	bl	8005c4c <ndefGetWifi>

    platformLog(" Wifi config: \r\n");
 8002256:	4810      	ldr	r0, [pc, #64]	; (8002298 <ndefMediaWifiDump+0x6c>)
 8002258:	f019 fdf4 	bl	801be44 <puts>
    ndefBufferDump(" Network SSID:",       &wifiConfig.bufNetworkSSID, false);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <ndefMediaWifiDump+0x70>)
 8002266:	f000 f8e7 	bl	8002438 <ndefBufferDump>
    ndefBufferDump(" Network Key:",        &wifiConfig.bufNetworkKey, false);
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	3308      	adds	r3, #8
 8002270:	2200      	movs	r2, #0
 8002272:	4619      	mov	r1, r3
 8002274:	480a      	ldr	r0, [pc, #40]	; (80022a0 <ndefMediaWifiDump+0x74>)
 8002276:	f000 f8df 	bl	8002438 <ndefBufferDump>
    platformLog(" Authentication: %d\r\n",  wifiConfig.authentication);
 800227a:	7f3b      	ldrb	r3, [r7, #28]
 800227c:	4619      	mov	r1, r3
 800227e:	4809      	ldr	r0, [pc, #36]	; (80022a4 <ndefMediaWifiDump+0x78>)
 8002280:	f019 fd46 	bl	801bd10 <iprintf>
    platformLog(" Encryption: %d\r\n",      wifiConfig.encryption);
 8002284:	7f7b      	ldrb	r3, [r7, #29]
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <ndefMediaWifiDump+0x7c>)
 800228a:	f019 fd41 	bl	801bd10 <iprintf>

    return ERR_NONE;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	0801e044 	.word	0x0801e044
 800229c:	0801e054 	.word	0x0801e054
 80022a0:	0801e064 	.word	0x0801e064
 80022a4:	0801e074 	.word	0x0801e074
 80022a8:	0801e08c 	.word	0x0801e08c

080022ac <ndefRecordDumpType>:


/*****************************************************************************/
ReturnCode ndefRecordDumpType(const ndefRecord* record)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0c8      	sub	sp, #288	; 0x120
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	6018      	str	r0, [r3, #0]
    ReturnCode err;
    ndefType   type;
    uint32_t i;

    err = ndefRecordToType(record, &type);
 80022b6:	f107 020c 	add.w	r2, r7, #12
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	4611      	mov	r1, r2
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	f003 fe96 	bl	8005ff0 <ndefRecordToType>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    if (err != ERR_NONE)
 80022ca:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <ndefRecordDumpType+0x2c>
    {
        return err;
 80022d2:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80022d6:	e02b      	b.n	8002330 <ndefRecordDumpType+0x84>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022de:	e022      	b.n	8002326 <ndefRecordDumpType+0x7a>
    {
        if (type.id == typeDumpTable[i].typeId)
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	4915      	ldr	r1, [pc, #84]	; (800233c <ndefRecordDumpType+0x90>)
 80022e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022ec:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d113      	bne.n	800231c <ndefRecordDumpType+0x70>
        {
            /* Call the appropriate function to the matching record type */
            if (typeDumpTable[i].dump != NULL)
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <ndefRecordDumpType+0x90>)
 80022f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <ndefRecordDumpType+0x70>
            {
                return typeDumpTable[i].dump(&type);
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <ndefRecordDumpType+0x90>)
 8002306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f107 020c 	add.w	r2, r7, #12
 8002314:	4610      	mov	r0, r2
 8002316:	4798      	blx	r3
 8002318:	4603      	mov	r3, r0
 800231a:	e009      	b.n	8002330 <ndefRecordDumpType+0x84>
    for (i = 0; i < SIZEOF_ARRAY(typeDumpTable); i++)
 800231c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002320:	3301      	adds	r3, #1
 8002322:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002326:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800232a:	2b06      	cmp	r3, #6
 800232c:	d9d8      	bls.n	80022e0 <ndefRecordDumpType+0x34>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 800232e:	230f      	movs	r3, #15
}
 8002330:	4618      	mov	r0, r3
 8002332:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	0801e448 	.word	0x0801e448

08002340 <ndefBufferDumpLine>:


/*****************************************************************************/
static ReturnCode ndefBufferDumpLine(const uint8_t* buffer, const uint32_t offset, uint32_t lineLength, uint32_t remaining)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
    uint32_t j;

    if (buffer == NULL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <ndefBufferDumpLine+0x18>
    {
        return ERR_PARAM;
 8002354:	2307      	movs	r3, #7
 8002356:	e05e      	b.n	8002416 <ndefBufferDumpLine+0xd6>
    }

    platformLog(" [%.4X] ", offset);
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	4831      	ldr	r0, [pc, #196]	; (8002420 <ndefBufferDumpLine+0xe0>)
 800235c:	f019 fcd8 	bl	801bd10 <iprintf>

    /* Dump hex data */
    for (j = 0; j < remaining; j++)
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e00c      	b.n	8002380 <ndefBufferDumpLine+0x40>
    {
        platformLog("%.2X ", buffer[offset + j]);
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	4413      	add	r3, r2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	482b      	ldr	r0, [pc, #172]	; (8002424 <ndefBufferDumpLine+0xe4>)
 8002376:	f019 fccb 	bl	801bd10 <iprintf>
    for (j = 0; j < remaining; j++)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3ee      	bcc.n	8002366 <ndefBufferDumpLine+0x26>
    }
    /* Fill hex section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e005      	b.n	800239a <ndefBufferDumpLine+0x5a>
    {
        platformLog("   ");
 800238e:	4826      	ldr	r0, [pc, #152]	; (8002428 <ndefBufferDumpLine+0xe8>)
 8002390:	f019 fcbe 	bl	801bd10 <iprintf>
    for (j = 0; j < lineLength - remaining; j++)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3f3      	bcc.n	800238e <ndefBufferDumpLine+0x4e>
    }

    /* Dump characters */
    platformLog("|");
 80023a6:	207c      	movs	r0, #124	; 0x7c
 80023a8:	f019 fcca 	bl	801bd40 <putchar>
    for (j = 0; j < remaining; j++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e01a      	b.n	80023e8 <ndefBufferDumpLine+0xa8>
    {
        /* Dump only ASCII characters, otherwise replace with a '.' */
        platformLog("%2c", isPrintableASCII(&buffer[offset + j], 1) ? buffer[offset + j] : '.');
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	4413      	add	r3, r2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fb5a 	bl	8001a78 <isPrintableASCII>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <ndefBufferDumpLine+0x98>
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4413      	add	r3, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	e000      	b.n	80023da <ndefBufferDumpLine+0x9a>
 80023d8:	232e      	movs	r3, #46	; 0x2e
 80023da:	4619      	mov	r1, r3
 80023dc:	4813      	ldr	r0, [pc, #76]	; (800242c <ndefBufferDumpLine+0xec>)
 80023de:	f019 fc97 	bl	801bd10 <iprintf>
    for (j = 0; j < remaining; j++)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3e0      	bcc.n	80023b2 <ndefBufferDumpLine+0x72>
    }
    /* Fill ASCII section if needed */
    for (j = 0; j < lineLength - remaining; j++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e005      	b.n	8002402 <ndefBufferDumpLine+0xc2>
    {
        platformLog("  ");
 80023f6:	480e      	ldr	r0, [pc, #56]	; (8002430 <ndefBufferDumpLine+0xf0>)
 80023f8:	f019 fc8a 	bl	801bd10 <iprintf>
    for (j = 0; j < lineLength - remaining; j++)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3f3      	bcc.n	80023f6 <ndefBufferDumpLine+0xb6>
    }
    platformLog(" |\r\n");
 800240e:	4809      	ldr	r0, [pc, #36]	; (8002434 <ndefBufferDumpLine+0xf4>)
 8002410:	f019 fd18 	bl	801be44 <puts>

    return ERR_NONE;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	0801e0a0 	.word	0x0801e0a0
 8002424:	0801e0ac 	.word	0x0801e0ac
 8002428:	0801e0b4 	.word	0x0801e0b4
 800242c:	0801e0b8 	.word	0x0801e0b8
 8002430:	0801e0bc 	.word	0x0801e0bc
 8002434:	0801e0c0 	.word	0x0801e0c0

08002438 <ndefBufferDump>:


/*****************************************************************************/
ReturnCode ndefBufferDump(const char* string, const ndefConstBuffer* bufPayload, bool verbose)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	71fb      	strb	r3, [r7, #7]
    uint32_t bufferLengthMax = 32;
 8002446:	2320      	movs	r3, #32
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t lineLength = 8;
 800244a:	2308      	movs	r3, #8
 800244c:	617b      	str	r3, [r7, #20]
    uint32_t displayed;
    uint32_t remaining;
    uint32_t offset;

    if ( (string == NULL) || (bufPayload == NULL) )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <ndefBufferDump+0x22>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <ndefBufferDump+0x26>
    {
        return ERR_PARAM;
 800245a:	2307      	movs	r3, #7
 800245c:	e045      	b.n	80024ea <ndefBufferDump+0xb2>
    }

    displayed = bufPayload->length;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	623b      	str	r3, [r7, #32]
    remaining = bufPayload->length;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61fb      	str	r3, [r7, #28]

    platformLog("%s (length %d)\r\n", string, bufPayload->length);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	461a      	mov	r2, r3
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	4820      	ldr	r0, [pc, #128]	; (80024f4 <ndefBufferDump+0xbc>)
 8002474:	f019 fc4c 	bl	801bd10 <iprintf>
    if (bufPayload->buffer == NULL)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d104      	bne.n	800248a <ndefBufferDump+0x52>
    {
        platformLog(" <No chunk payload buffer>\r\n");
 8002480:	481d      	ldr	r0, [pc, #116]	; (80024f8 <ndefBufferDump+0xc0>)
 8002482:	f019 fcdf 	bl	801be44 <puts>
        return ERR_NONE;
 8002486:	2300      	movs	r3, #0
 8002488:	e02f      	b.n	80024ea <ndefBufferDump+0xb2>
    }

    if (verbose == true)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <ndefBufferDump+0x5e>
    {
        bufferLengthMax = 256;
 8002490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (bufPayload->length > bufferLengthMax)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	429a      	cmp	r2, r3
 800249e:	d201      	bcs.n	80024a4 <ndefBufferDump+0x6c>
    {
        /* Truncate output */
        displayed = bufferLengthMax;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	623b      	str	r3, [r7, #32]
    }

    for (offset = 0; offset < displayed; offset += lineLength)
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e012      	b.n	80024d0 <ndefBufferDump+0x98>
    {
        ndefBufferDumpLine(bufPayload->buffer, offset, lineLength, remaining > lineLength ? lineLength : remaining);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4293      	cmp	r3, r2
 80024b4:	bf28      	it	cs
 80024b6:	4613      	movcs	r3, r2
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f7ff ff40 	bl	8002340 <ndefBufferDumpLine>
        remaining -= lineLength;
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	61fb      	str	r3, [r7, #28]
    for (offset = 0; offset < displayed; offset += lineLength)
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4413      	add	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3e8      	bcc.n	80024aa <ndefBufferDump+0x72>
    }

    if (displayed < bufPayload->length)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d202      	bcs.n	80024e8 <ndefBufferDump+0xb0>
    {
        platformLog(" ... (truncated)\r\n");
 80024e2:	4806      	ldr	r0, [pc, #24]	; (80024fc <ndefBufferDump+0xc4>)
 80024e4:	f019 fcae 	bl	801be44 <puts>
    }

    return ERR_NONE;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	0801e0c4 	.word	0x0801e0c4
 80024f8:	0801e0d8 	.word	0x0801e0d8
 80024fc:	0801e0f4 	.word	0x0801e0f4

08002500 <ndefBufferPrint>:


/*****************************************************************************/
ReturnCode ndefBufferPrint(const char* prefix, const ndefConstBuffer* bufString, const char* suffix)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
    uint32_t i;

    if ( (prefix == NULL) || (bufString == NULL) || (bufString->buffer == NULL) || (suffix  == NULL))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <ndefBufferPrint+0x26>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <ndefBufferPrint+0x26>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <ndefBufferPrint+0x26>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <ndefBufferPrint+0x2a>
    {
        return ERR_PARAM;
 8002526:	2307      	movs	r3, #7
 8002528:	e01b      	b.n	8002562 <ndefBufferPrint+0x62>
    }

    platformLog("%s", prefix);
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	480f      	ldr	r0, [pc, #60]	; (800256c <ndefBufferPrint+0x6c>)
 800252e:	f019 fbef 	bl	801bd10 <iprintf>
    for (i = 0; i < bufString->length; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e00a      	b.n	800254e <ndefBufferPrint+0x4e>
    {
        platformLog("%c", bufString->buffer[i]);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f019 fbfc 	bl	801bd40 <putchar>
    for (i = 0; i < bufString->length; i++)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3ef      	bcc.n	8002538 <ndefBufferPrint+0x38>
    }
    platformLog("%s", suffix);
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4804      	ldr	r0, [pc, #16]	; (800256c <ndefBufferPrint+0x6c>)
 800255c:	f019 fbd8 	bl	801bd10 <iprintf>

    return ERR_NONE;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	0801e108 	.word	0x0801e108

08002570 <ndefBuffer8Print>:


/*****************************************************************************/
ReturnCode ndefBuffer8Print(const char* prefix, const ndefConstBuffer8* bufString, const char* suffix)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
    ndefConstBuffer buf;

    if (bufString == NULL)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <ndefBuffer8Print+0x16>
    {
        return ERR_PARAM;
 8002582:	2307      	movs	r3, #7
 8002584:	e00d      	b.n	80025a2 <ndefBuffer8Print+0x32>
    }

    buf.buffer = bufString->buffer;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
    buf.length = bufString->length;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	617b      	str	r3, [r7, #20]

    return ndefBufferPrint(prefix, &buf, suffix);
 8002592:	f107 0310 	add.w	r3, r7, #16
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4619      	mov	r1, r3
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff ffb0 	bl	8002500 <ndefBufferPrint>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c0:	4b67      	ldr	r3, [pc, #412]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a66      	ldr	r2, [pc, #408]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b64      	ldr	r3, [pc, #400]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b61      	ldr	r3, [pc, #388]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a60      	ldr	r2, [pc, #384]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f0:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b58      	ldr	r3, [pc, #352]	; (8002760 <MX_GPIO_Init+0x1b4>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002608:	4b55      	ldr	r3, [pc, #340]	; (8002760 <MX_GPIO_Init+0x1b4>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a54      	ldr	r2, [pc, #336]	; (8002760 <MX_GPIO_Init+0x1b4>)
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b52      	ldr	r3, [pc, #328]	; (8002760 <MX_GPIO_Init+0x1b4>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <MX_GPIO_Init+0x1b4>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <MX_GPIO_Init+0x1b4>)
 8002626:	f043 0320 	orr.w	r3, r3, #32
 800262a:	6193      	str	r3, [r2, #24]
 800262c:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <MX_GPIO_Init+0x1b4>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002638:	4b49      	ldr	r3, [pc, #292]	; (8002760 <MX_GPIO_Init+0x1b4>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a48      	ldr	r2, [pc, #288]	; (8002760 <MX_GPIO_Init+0x1b4>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <MX_GPIO_Init+0x1b4>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	2120      	movs	r1, #32
 8002654:	4843      	ldr	r0, [pc, #268]	; (8002764 <MX_GPIO_Init+0x1b8>)
 8002656:	f001 f892 	bl	800377e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	2110      	movs	r1, #16
 800265e:	4842      	ldr	r0, [pc, #264]	; (8002768 <MX_GPIO_Init+0x1bc>)
 8002660:	f001 f88d 	bl	800377e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266a:	4840      	ldr	r0, [pc, #256]	; (800276c <MX_GPIO_Init+0x1c0>)
 800266c:	f001 f887 	bl	800377e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8002676:	483e      	ldr	r0, [pc, #248]	; (8002770 <MX_GPIO_Init+0x1c4>)
 8002678:	f001 f881 	bl	800377e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED4_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 800267c:	2200      	movs	r2, #0
 800267e:	21a8      	movs	r1, #168	; 0xa8
 8002680:	483c      	ldr	r0, [pc, #240]	; (8002774 <MX_GPIO_Init+0x1c8>)
 8002682:	f001 f87c 	bl	800377e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8002686:	2310      	movs	r3, #16
 8002688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800268e:	2301      	movs	r3, #1
 8002690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 0318 	add.w	r3, r7, #24
 8002696:	4619      	mov	r1, r3
 8002698:	4832      	ldr	r0, [pc, #200]	; (8002764 <MX_GPIO_Init+0x1b8>)
 800269a:	f000 fec5 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800269e:	2320      	movs	r3, #32
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a6:	2301      	movs	r3, #1
 80026a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 0318 	add.w	r3, r7, #24
 80026b2:	4619      	mov	r1, r3
 80026b4:	482b      	ldr	r0, [pc, #172]	; (8002764 <MX_GPIO_Init+0x1b8>)
 80026b6:	f000 feb7 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80026ba:	2310      	movs	r3, #16
 80026bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0318 	add.w	r3, r7, #24
 80026ce:	4619      	mov	r1, r3
 80026d0:	4825      	ldr	r0, [pc, #148]	; (8002768 <MX_GPIO_Init+0x1bc>)
 80026d2:	f000 fea9 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_IRQ_Pin;
 80026d6:	2310      	movs	r3, #16
 80026d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <MX_GPIO_Init+0x1cc>)
 80026dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026de:	2302      	movs	r3, #2
 80026e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_IRQ_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0318 	add.w	r3, r7, #24
 80026e6:	4619      	mov	r1, r3
 80026e8:	4824      	ldr	r0, [pc, #144]	; (800277c <MX_GPIO_Init+0x1d0>)
 80026ea:	f000 fe9d 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80026ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f4:	2301      	movs	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026f8:	2302      	movs	r3, #2
 80026fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 0318 	add.w	r3, r7, #24
 8002704:	4619      	mov	r1, r3
 8002706:	4819      	ldr	r0, [pc, #100]	; (800276c <MX_GPIO_Init+0x1c0>)
 8002708:	f000 fe8e 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 800270c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002716:	2302      	movs	r3, #2
 8002718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271e:	f107 0318 	add.w	r3, r7, #24
 8002722:	4619      	mov	r1, r3
 8002724:	4812      	ldr	r0, [pc, #72]	; (8002770 <MX_GPIO_Init+0x1c4>)
 8002726:	f000 fe7f 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin;
 800272a:	23a8      	movs	r3, #168	; 0xa8
 800272c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	2301      	movs	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002732:	2302      	movs	r3, #2
 8002734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800273a:	f107 0318 	add.w	r3, r7, #24
 800273e:	4619      	mov	r1, r3
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <MX_GPIO_Init+0x1c8>)
 8002742:	f000 fe71 	bl	8003428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2101      	movs	r1, #1
 800274a:	200a      	movs	r0, #10
 800274c:	f000 fd29 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002750:	200a      	movs	r0, #10
 8002752:	f000 fd42 	bl	80031da <HAL_NVIC_EnableIRQ>

}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	; 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	40011800 	.word	0x40011800
 8002768:	40010800 	.word	0x40010800
 800276c:	40010c00 	.word	0x40010c00
 8002770:	40011400 	.word	0x40011400
 8002774:	40012000 	.word	0x40012000
 8002778:	10110000 	.word	0x10110000
 800277c:	40011000 	.word	0x40011000

08002780 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8002788:	1d39      	adds	r1, r7, #4
 800278a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800278e:	2201      	movs	r2, #1
 8002790:	4803      	ldr	r0, [pc, #12]	; (80027a0 <__io_putchar+0x20>)
 8002792:	f001 ff70 	bl	8004676 <HAL_UART_Transmit>
 	return ch;
 8002796:	687b      	ldr	r3, [r7, #4]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20003c90 	.word	0x20003c90

080027a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0a0      	sub	sp, #128	; 0x80
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027aa:	f000 fb87 	bl	8002ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ae:	f000 f885 	bl	80028bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b2:	f7ff fefb 	bl	80025ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80027b6:	f000 fadd 	bl	8002d74 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80027ba:	f000 f8c9 	bl	8002950 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &uartrxdata, 1);
 80027be:	2201      	movs	r2, #1
 80027c0:	4936      	ldr	r1, [pc, #216]	; (800289c <main+0xf8>)
 80027c2:	4837      	ldr	r0, [pc, #220]	; (80028a0 <main+0xfc>)
 80027c4:	f001 ffe9 	bl	800479a <HAL_UART_Receive_IT>

  printf("Demo Start\r\n");
 80027c8:	4836      	ldr	r0, [pc, #216]	; (80028a4 <main+0x100>)
 80027ca:	f019 fb3b 	bl	801be44 <puts>

  if(!demoIni())
 80027ce:	f7fd fe21 	bl	8000414 <demoIni>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f083 0301 	eor.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d018      	beq.n	8002810 <main+0x6c>
  {
	  printf("st25r3916Init [ERROR]\r\n");
 80027de:	4832      	ldr	r0, [pc, #200]	; (80028a8 <main+0x104>)
 80027e0:	f019 fb30 	bl	801be44 <puts>
	  while(1)
	  	  {
	  		  NFC06A1_LED_Toggle( TX_LED );
 80027e4:	2005      	movs	r0, #5
 80027e6:	f018 f87b 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TA_LED );
 80027ea:	2002      	movs	r0, #2
 80027ec:	f018 f878 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TB_LED );
 80027f0:	2001      	movs	r0, #1
 80027f2:	f018 f875 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TF_LED );
 80027f6:	2000      	movs	r0, #0
 80027f8:	f018 f872 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TV_LED );
 80027fc:	2003      	movs	r0, #3
 80027fe:	f018 f86f 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( AP2P_LED );
 8002802:	2004      	movs	r0, #4
 8002804:	f018 f86c 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		  platformDelay(100);
 8002808:	2064      	movs	r0, #100	; 0x64
 800280a:	f000 fbb9 	bl	8002f80 <HAL_Delay>
	  		  NFC06A1_LED_Toggle( TX_LED );
 800280e:	e7e9      	b.n	80027e4 <main+0x40>
	  	  }
  }
  else
  {
	  printf("st25r3916Init [OK]\r\n");
 8002810:	4826      	ldr	r0, [pc, #152]	; (80028ac <main+0x108>)
 8002812:	f019 fb17 	bl	801be44 <puts>
	  for (int i = 0; i < 6; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800281a:	e017      	b.n	800284c <main+0xa8>
	  	{
	  		NFC06A1_LED_Toggle( TX_LED );
 800281c:	2005      	movs	r0, #5
 800281e:	f018 f85f 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TA_LED );
 8002822:	2002      	movs	r0, #2
 8002824:	f018 f85c 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TB_LED );
 8002828:	2001      	movs	r0, #1
 800282a:	f018 f859 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TF_LED );
 800282e:	2000      	movs	r0, #0
 8002830:	f018 f856 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TV_LED );
 8002834:	2003      	movs	r0, #3
 8002836:	f018 f853 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( AP2P_LED );
 800283a:	2004      	movs	r0, #4
 800283c:	f018 f850 	bl	801a8e0 <NFC06A1_LED_Toggle>
	  		platformDelay(200);
 8002840:	20c8      	movs	r0, #200	; 0xc8
 8002842:	f000 fb9d 	bl	8002f80 <HAL_Delay>
	  for (int i = 0; i < 6; i++)
 8002846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002848:	3301      	adds	r3, #1
 800284a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800284c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800284e:	2b05      	cmp	r3, #5
 8002850:	dde4      	ble.n	800281c <main+0x78>
	  	}

	  		NFC06A1_LED_OFF( TA_LED );
 8002852:	2002      	movs	r0, #2
 8002854:	f018 f82c 	bl	801a8b0 <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TB_LED );
 8002858:	2001      	movs	r0, #1
 800285a:	f018 f829 	bl	801a8b0 <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TF_LED );
 800285e:	2000      	movs	r0, #0
 8002860:	f018 f826 	bl	801a8b0 <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TV_LED );
 8002864:	2003      	movs	r0, #3
 8002866:	f018 f823 	bl	801a8b0 <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( AP2P_LED );
 800286a:	2004      	movs	r0, #4
 800286c:	f018 f820 	bl	801a8b0 <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TX_LED );
 8002870:	2005      	movs	r0, #5
 8002872:	f018 f81d 	bl	801a8b0 <NFC06A1_LED_OFF>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true)
  {
	  if (trogleLED)
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <main+0x10c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <main+0xf2>
	  {
		  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800287e:	2120      	movs	r1, #32
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <main+0x110>)
 8002882:	f000 ff94 	bl	80037ae <HAL_GPIO_TogglePin>
		  printf("TrogleLED\r\n");
 8002886:	480c      	ldr	r0, [pc, #48]	; (80028b8 <main+0x114>)
 8002888:	f019 fadc 	bl	801be44 <puts>
		  HAL_Delay(1000);
 800288c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002890:	f000 fb76 	bl	8002f80 <HAL_Delay>
 8002894:	e7ef      	b.n	8002876 <main+0xd2>
	  }
	  else
	  {
//		  demoCE(&nfcDev);
		  demoCycle();
 8002896:	f7fd fe19 	bl	80004cc <demoCycle>
	  if (trogleLED)
 800289a:	e7ec      	b.n	8002876 <main+0xd2>
 800289c:	20002951 	.word	0x20002951
 80028a0:	20003c90 	.word	0x20003c90
 80028a4:	0801e10c 	.word	0x0801e10c
 80028a8:	0801e118 	.word	0x0801e118
 80028ac:	0801e130 	.word	0x0801e130
 80028b0:	20002954 	.word	0x20002954
 80028b4:	40011800 	.word	0x40011800
 80028b8:	0801e144 	.word	0x0801e144

080028bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b090      	sub	sp, #64	; 0x40
 80028c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c2:	f107 0318 	add.w	r3, r7, #24
 80028c6:	2228      	movs	r2, #40	; 0x28
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f019 fa18 	bl	801bd00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	60da      	str	r2, [r3, #12]
 80028dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028de:	2301      	movs	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ec:	2301      	movs	r3, #1
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f0:	2302      	movs	r3, #2
 80028f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002900:	f107 0318 	add.w	r3, r7, #24
 8002904:	4618      	mov	r0, r3
 8002906:	f000 ff83 	bl	8003810 <HAL_RCC_OscConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002910:	f000 f819 	bl	8002946 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002914:	230f      	movs	r3, #15
 8002916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002918:	2302      	movs	r3, #2
 800291a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2102      	movs	r1, #2
 800292e:	4618      	mov	r0, r3
 8002930:	f001 f9ee 	bl	8003d10 <HAL_RCC_ClockConfig>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800293a:	f000 f804 	bl	8002946 <Error_Handler>
  }
}
 800293e:	bf00      	nop
 8002940:	3740      	adds	r7, #64	; 0x40
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800294a:	b672      	cpsid	i
}
 800294c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294e:	e7fe      	b.n	800294e <Error_Handler+0x8>

08002950 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002956:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <MX_SPI1_Init+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <MX_SPI1_Init+0x64>)
 800295c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <MX_SPI1_Init+0x64>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002976:	2201      	movs	r2, #1
 8002978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <MX_SPI1_Init+0x64>)
 800297c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002984:	2220      	movs	r2, #32
 8002986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <MX_SPI1_Init+0x64>)
 800298a:	2200      	movs	r2, #0
 800298c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002990:	2200      	movs	r2, #0
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002996:	2200      	movs	r2, #0
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <MX_SPI1_Init+0x64>)
 800299c:	220a      	movs	r2, #10
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <MX_SPI1_Init+0x64>)
 80029a2:	f001 fb4f 	bl	8004044 <HAL_SPI_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029ac:	f7ff ffcb 	bl	8002946 <Error_Handler>
  }

}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20003c38 	.word	0x20003c38
 80029b8:	40013000 	.word	0x40013000

080029bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <HAL_SPI_MspInit+0x88>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d12f      	bne.n	8002a3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_SPI_MspInit+0x8c>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_SPI_MspInit+0x8c>)
 80029e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_SPI_MspInit+0x8c>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_SPI_MspInit+0x8c>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <HAL_SPI_MspInit+0x8c>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6193      	str	r3, [r2, #24]
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_SPI_MspInit+0x8c>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a0c:	23a0      	movs	r3, #160	; 0xa0
 8002a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	480b      	ldr	r0, [pc, #44]	; (8002a4c <HAL_SPI_MspInit+0x90>)
 8002a20:	f000 fd02 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a24:	2340      	movs	r3, #64	; 0x40
 8002a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	4619      	mov	r1, r3
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_SPI_MspInit+0x90>)
 8002a38:	f000 fcf6 	bl	8003428 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40013000 	.word	0x40013000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010800 	.word	0x40010800

08002a50 <BSP_SPI_SendRecv>:

/* USER CODE BEGIN 1 */


int32_t BSP_SPI_SendRecv(const uint8_t * const pTxData, uint8_t * const pRxData, uint16_t Length)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8002a56:	af02      	add	r7, sp, #8
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	6018      	str	r0, [r3, #0]
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	6019      	str	r1, [r3, #0]
 8002a64:	1dbb      	adds	r3, r7, #6
 8002a66:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;
  uint8_t   tx[256];
  uint8_t   rx[256];

  if (pTxData != NULL)
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <BSP_SPI_SendRecv+0x34>
  {
    memcpy(tx, pTxData, Length);
 8002a72:	1dbb      	adds	r3, r7, #6
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	f019 f916 	bl	801bcb0 <memcpy>
  }

  status = HAL_SPI_TransmitReceive(&hspi1, tx, (pRxData != NULL) ? (uint8_t *)pRxData : rx, Length, 0xffff);
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <BSP_SPI_SendRecv+0x44>
 8002a8e:	f107 0214 	add.w	r2, r7, #20
 8002a92:	e002      	b.n	8002a9a <BSP_SPI_SendRecv+0x4a>
 8002a94:	f107 0308 	add.w	r3, r7, #8
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	1dbb      	adds	r3, r7, #6
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002aa2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002aa6:	9000      	str	r0, [sp, #0]
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <BSP_SPI_SendRecv+0x74>)
 8002aaa:	f001 fb4f 	bl	800414c <HAL_SPI_TransmitReceive>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  return status;
 8002ab4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20003c38 	.word	0x20003c38

08002ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_MspInit+0x60>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_MspInit+0x60>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6193      	str	r3, [r2, #24]
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_MspInit+0x60>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_MspInit+0x60>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_MspInit+0x60>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	61d3      	str	r3, [r2, #28]
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_MspInit+0x60>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002afe:	2005      	movs	r0, #5
 8002b00:	f000 fb44 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_MspInit+0x64>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_MspInit+0x64>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010000 	.word	0x40010000

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <NMI_Handler+0x4>

08002b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <HardFault_Handler+0x4>

08002b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <MemManage_Handler+0x4>

08002b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <BusFault_Handler+0x4>

08002b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <UsageFault_Handler+0x4>

08002b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b76:	f000 f9e7 	bl	8002f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002b82:	2010      	movs	r0, #16
 8002b84:	f000 fe2c 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <USART1_IRQHandler+0x10>)
 8002b92:	f001 fe57 	bl	8004844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20003c90 	.word	0x20003c90

08002ba0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

//	printf("uart int \r\n");
	if(uartrxdata == 0x31)
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_UART_RxCpltCallback+0x5c>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b31      	cmp	r3, #49	; 0x31
 8002bae:	d104      	bne.n	8002bba <HAL_UART_RxCpltCallback+0x1a>
	{
		printf("SystemReset\r\n");
 8002bb0:	4813      	ldr	r0, [pc, #76]	; (8002c00 <HAL_UART_RxCpltCallback+0x60>)
 8002bb2:	f019 f947 	bl	801be44 <puts>
		HAL_NVIC_SystemReset();
 8002bb6:	f000 fb1e 	bl	80031f6 <HAL_NVIC_SystemReset>
	}
	if(uartrxdata == 0x00)
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_UART_RxCpltCallback+0x5c>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_UART_RxCpltCallback+0x2a>
	{
//		printf("trogleLED\r\n");
		trogleLED = true;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_UART_RxCpltCallback+0x64>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e00e      	b.n	8002be8 <HAL_UART_RxCpltCallback+0x48>
	}
	else if(uartrxdata == 0x01)
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_UART_RxCpltCallback+0x5c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d103      	bne.n	8002bda <HAL_UART_RxCpltCallback+0x3a>
	{
//		printf("wakeupflag\r\n");
		wakeupflag = true;
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_UART_RxCpltCallback+0x68>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e006      	b.n	8002be8 <HAL_UART_RxCpltCallback+0x48>
	}
	else if (uartrxdata == 0x02)
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_UART_RxCpltCallback+0x5c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d102      	bne.n	8002be8 <HAL_UART_RxCpltCallback+0x48>
	{
//		printf("buttonflag\r\n");
		buttonflag = true;
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_UART_RxCpltCallback+0x6c>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, &uartrxdata, 1);
 8002be8:	2201      	movs	r2, #1
 8002bea:	4904      	ldr	r1, [pc, #16]	; (8002bfc <HAL_UART_RxCpltCallback+0x5c>)
 8002bec:	4808      	ldr	r0, [pc, #32]	; (8002c10 <HAL_UART_RxCpltCallback+0x70>)
 8002bee:	f001 fdd4 	bl	800479a <HAL_UART_Receive_IT>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20002951 	.word	0x20002951
 8002c00:	0801e150 	.word	0x0801e150
 8002c04:	20002954 	.word	0x20002954
 8002c08:	20002953 	.word	0x20002953
 8002c0c:	20002952 	.word	0x20002952
 8002c10:	20003c90 	.word	0x20003c90

08002c14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
//	printf("MCU_IRQ\r\n");
	st25r3916Isr();
 8002c1e:	f018 fdc9 	bl	801b7b4 <st25r3916Isr>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e00a      	b.n	8002c52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c3c:	f3af 8000 	nop.w
 8002c40:	4601      	mov	r1, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	60ba      	str	r2, [r7, #8]
 8002c48:	b2ca      	uxtb	r2, r1
 8002c4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dbf0      	blt.n	8002c3c <_read+0x12>
	}

return len;
 8002c5a:	687b      	ldr	r3, [r7, #4]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e009      	b.n	8002c8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	60ba      	str	r2, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fd7e 	bl	8002780 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3301      	adds	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	dbf1      	blt.n	8002c76 <_write+0x12>
	}
	return len;
 8002c92:	687b      	ldr	r3, [r7, #4]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_close>:

int _close(int file)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <_isatty>:

int _isatty(int file)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	return 1;
 8002cd8:	2301      	movs	r3, #1
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f018 ff88 	bl	801bc40 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20010000 	.word	0x20010000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	20002958 	.word	0x20002958
 8002d64:	20003ce8 	.word	0x20003ce8

08002d68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <MX_USART1_UART_Init+0x50>)
 8002d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002daa:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <MX_USART1_UART_Init+0x4c>)
 8002dac:	f001 fc16 	bl	80045dc <HAL_UART_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002db6:	f7ff fdc6 	bl	8002946 <Error_Handler>
  }

}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20003c90 	.word	0x20003c90
 8002dc4:	40013800 	.word	0x40013800

08002dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_UART_MspInit+0x9c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d139      	bne.n	8002e5c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_UART_MspInit+0xa0>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_UART_MspInit+0xa0>)
 8002dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_UART_MspInit+0xa0>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_UART_MspInit+0xa0>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_UART_MspInit+0xa0>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6193      	str	r3, [r2, #24]
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_UART_MspInit+0xa0>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480f      	ldr	r0, [pc, #60]	; (8002e6c <HAL_UART_MspInit+0xa4>)
 8002e2e:	f000 fafb 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4619      	mov	r1, r3
 8002e46:	4809      	ldr	r0, [pc, #36]	; (8002e6c <HAL_UART_MspInit+0xa4>)
 8002e48:	f000 faee 	bl	8003428 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2101      	movs	r1, #1
 8002e50:	2025      	movs	r0, #37	; 0x25
 8002e52:	f000 f9a6 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e56:	2025      	movs	r0, #37	; 0x25
 8002e58:	f000 f9bf 	bl	80031da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40010800 	.word	0x40010800

08002e70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e72:	e003      	b.n	8002e7c <LoopCopyDataInit>

08002e74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e7a:	3104      	adds	r1, #4

08002e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e7c:	480a      	ldr	r0, [pc, #40]	; (8002ea8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e84:	d3f6      	bcc.n	8002e74 <CopyDataInit>
  ldr r2, =_sbss
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e88:	e002      	b.n	8002e90 <LoopFillZerobss>

08002e8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e8c:	f842 3b04 	str.w	r3, [r2], #4

08002e90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e94:	d3f9      	bcc.n	8002e8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e96:	f7ff ff67 	bl	8002d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f018 fed7 	bl	801bc4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e9e:	f7ff fc81 	bl	80027a4 <main>
  bx lr
 8002ea2:	4770      	bx	lr
  ldr r3, =_sidata
 8002ea4:	0801ea34 	.word	0x0801ea34
  ldr r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002eac:	200001b0 	.word	0x200001b0
  ldr r2, =_sbss
 8002eb0:	200001b0 	.word	0x200001b0
  ldr r3, = _ebss
 8002eb4:	20003ce4 	.word	0x20003ce4

08002eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb8:	e7fe      	b.n	8002eb8 <ADC1_2_IRQHandler>
	...

08002ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_Init+0x28>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <HAL_Init+0x28>)
 8002ec6:	f043 0310 	orr.w	r3, r3, #16
 8002eca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ecc:	2003      	movs	r0, #3
 8002ece:	f000 f95d 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f000 f808 	bl	8002ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed8:	f7ff fdf6 	bl	8002ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000

08002ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_InitTick+0x54>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_InitTick+0x58>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f979 	bl	80031fe <HAL_SYSTICK_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00e      	b.n	8002f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b0f      	cmp	r3, #15
 8002f1a:	d80a      	bhi.n	8002f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f000 f93d 	bl	80031a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <HAL_InitTick+0x5c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200000a4 	.word	0x200000a4
 8002f40:	200000ac 	.word	0x200000ac
 8002f44:	200000a8 	.word	0x200000a8

08002f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_IncTick+0x1c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_IncTick+0x20>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <HAL_IncTick+0x20>)
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	200000ac 	.word	0x200000ac
 8002f68:	20003cd0 	.word	0x20003cd0

08002f6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <HAL_GetTick+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20003cd0 	.word	0x20003cd0

08002f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff fff0 	bl	8002f6c <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d005      	beq.n	8002fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_Delay+0x44>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fa6:	bf00      	nop
 8002fa8:	f7ff ffe0 	bl	8002f6c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f7      	bhi.n	8002fa8 <HAL_Delay+0x28>
  {
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200000ac 	.word	0x200000ac

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4906      	ldr	r1, [pc, #24]	; (8003060 <__NVIC_EnableIRQ+0x34>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100

08003064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db0a      	blt.n	800308e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	490c      	ldr	r1, [pc, #48]	; (80030b0 <__NVIC_SetPriority+0x4c>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	0112      	lsls	r2, r2, #4
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	440b      	add	r3, r1
 8003088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800308c:	e00a      	b.n	80030a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4908      	ldr	r1, [pc, #32]	; (80030b4 <__NVIC_SetPriority+0x50>)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	3b04      	subs	r3, #4
 800309c:	0112      	lsls	r2, r2, #4
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	440b      	add	r3, r1
 80030a2:	761a      	strb	r2, [r3, #24]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f1c3 0307 	rsb	r3, r3, #7
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf28      	it	cs
 80030d6:	2304      	movcs	r3, #4
 80030d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3304      	adds	r3, #4
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d902      	bls.n	80030e8 <NVIC_EncodePriority+0x30>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3b03      	subs	r3, #3
 80030e6:	e000      	b.n	80030ea <NVIC_EncodePriority+0x32>
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	401a      	ands	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003100:	f04f 31ff 	mov.w	r1, #4294967295
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43d9      	mvns	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	4313      	orrs	r3, r2
         );
}
 8003112:	4618      	mov	r0, r3
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003120:	f3bf 8f4f 	dsb	sy
}
 8003124:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <__NVIC_SystemReset+0x24>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <__NVIC_SystemReset+0x24>)
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_SystemReset+0x28>)
 8003132:	4313      	orrs	r3, r2
 8003134:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003136:	f3bf 8f4f 	dsb	sy
}
 800313a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <__NVIC_SystemReset+0x20>
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	05fa0004 	.word	0x05fa0004

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003158:	d301      	bcc.n	800315e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315a:	2301      	movs	r3, #1
 800315c:	e00f      	b.n	800317e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <SysTick_Config+0x40>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003166:	210f      	movs	r1, #15
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f7ff ff7a 	bl	8003064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SysTick_Config+0x40>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <SysTick_Config+0x40>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000e010 	.word	0xe000e010

0800318c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff17 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b4:	f7ff ff2c 	bl	8003010 <__NVIC_GetPriorityGrouping>
 80031b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff ff7a 	bl	80030b8 <NVIC_EncodePriority>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff49 	bl	8003064 <__NVIC_SetPriority>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff1f 	bl	800302c <__NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80031fa:	f7ff ff8f 	bl	800311c <__NVIC_SystemReset>

080031fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ff9e 	bl	8003148 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800322a:	2b02      	cmp	r3, #2
 800322c:	d005      	beq.n	800323a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e0d6      	b.n	80033e8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 020e 	bic.w	r2, r2, #14
 8003248:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_DMA_Abort_IT+0x1dc>)
 8003262:	429a      	cmp	r2, r3
 8003264:	d958      	bls.n	8003318 <HAL_DMA_Abort_IT+0x100>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a63      	ldr	r2, [pc, #396]	; (80033f8 <HAL_DMA_Abort_IT+0x1e0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d04f      	beq.n	8003310 <HAL_DMA_Abort_IT+0xf8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a61      	ldr	r2, [pc, #388]	; (80033fc <HAL_DMA_Abort_IT+0x1e4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d048      	beq.n	800330c <HAL_DMA_Abort_IT+0xf4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a60      	ldr	r2, [pc, #384]	; (8003400 <HAL_DMA_Abort_IT+0x1e8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d040      	beq.n	8003306 <HAL_DMA_Abort_IT+0xee>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5e      	ldr	r2, [pc, #376]	; (8003404 <HAL_DMA_Abort_IT+0x1ec>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d038      	beq.n	8003300 <HAL_DMA_Abort_IT+0xe8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5d      	ldr	r2, [pc, #372]	; (8003408 <HAL_DMA_Abort_IT+0x1f0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d030      	beq.n	80032fa <HAL_DMA_Abort_IT+0xe2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5b      	ldr	r2, [pc, #364]	; (800340c <HAL_DMA_Abort_IT+0x1f4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d028      	beq.n	80032f4 <HAL_DMA_Abort_IT+0xdc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a53      	ldr	r2, [pc, #332]	; (80033f4 <HAL_DMA_Abort_IT+0x1dc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d020      	beq.n	80032ee <HAL_DMA_Abort_IT+0xd6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_DMA_Abort_IT+0x1f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_DMA_Abort_IT+0xd2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_DMA_Abort_IT+0x1fc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d012      	beq.n	80032e6 <HAL_DMA_Abort_IT+0xce>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a54      	ldr	r2, [pc, #336]	; (8003418 <HAL_DMA_Abort_IT+0x200>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00a      	beq.n	80032e0 <HAL_DMA_Abort_IT+0xc8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a53      	ldr	r2, [pc, #332]	; (800341c <HAL_DMA_Abort_IT+0x204>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d102      	bne.n	80032da <HAL_DMA_Abort_IT+0xc2>
 80032d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d8:	e01b      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 80032da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032de:	e018      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 80032e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e4:	e015      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 80032e6:	2310      	movs	r3, #16
 80032e8:	e013      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e011      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 80032ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f2:	e00e      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 80032f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032f8:	e00b      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 80032fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032fe:	e008      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 8003300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003304:	e005      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 8003306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330a:	e002      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 800330c:	2310      	movs	r3, #16
 800330e:	e000      	b.n	8003312 <HAL_DMA_Abort_IT+0xfa>
 8003310:	2301      	movs	r3, #1
 8003312:	4a43      	ldr	r2, [pc, #268]	; (8003420 <HAL_DMA_Abort_IT+0x208>)
 8003314:	6053      	str	r3, [r2, #4]
 8003316:	e057      	b.n	80033c8 <HAL_DMA_Abort_IT+0x1b0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a36      	ldr	r2, [pc, #216]	; (80033f8 <HAL_DMA_Abort_IT+0x1e0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04f      	beq.n	80033c2 <HAL_DMA_Abort_IT+0x1aa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a35      	ldr	r2, [pc, #212]	; (80033fc <HAL_DMA_Abort_IT+0x1e4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d048      	beq.n	80033be <HAL_DMA_Abort_IT+0x1a6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a33      	ldr	r2, [pc, #204]	; (8003400 <HAL_DMA_Abort_IT+0x1e8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d040      	beq.n	80033b8 <HAL_DMA_Abort_IT+0x1a0>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a32      	ldr	r2, [pc, #200]	; (8003404 <HAL_DMA_Abort_IT+0x1ec>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d038      	beq.n	80033b2 <HAL_DMA_Abort_IT+0x19a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a30      	ldr	r2, [pc, #192]	; (8003408 <HAL_DMA_Abort_IT+0x1f0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d030      	beq.n	80033ac <HAL_DMA_Abort_IT+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2f      	ldr	r2, [pc, #188]	; (800340c <HAL_DMA_Abort_IT+0x1f4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d028      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x18e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_DMA_Abort_IT+0x1dc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d020      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x188>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <HAL_DMA_Abort_IT+0x1f8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d019      	beq.n	800339c <HAL_DMA_Abort_IT+0x184>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a29      	ldr	r2, [pc, #164]	; (8003414 <HAL_DMA_Abort_IT+0x1fc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d012      	beq.n	8003398 <HAL_DMA_Abort_IT+0x180>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a28      	ldr	r2, [pc, #160]	; (8003418 <HAL_DMA_Abort_IT+0x200>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00a      	beq.n	8003392 <HAL_DMA_Abort_IT+0x17a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <HAL_DMA_Abort_IT+0x204>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d102      	bne.n	800338c <HAL_DMA_Abort_IT+0x174>
 8003386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338a:	e01b      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 800338c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003390:	e018      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 8003392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003396:	e015      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 8003398:	2310      	movs	r3, #16
 800339a:	e013      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 800339c:	2301      	movs	r3, #1
 800339e:	e011      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 80033a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a4:	e00e      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 80033a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033aa:	e00b      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 80033ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033b0:	e008      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 80033b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b6:	e005      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 80033b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033bc:	e002      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 80033be:	2310      	movs	r3, #16
 80033c0:	e000      	b.n	80033c4 <HAL_DMA_Abort_IT+0x1ac>
 80033c2:	2301      	movs	r3, #1
 80033c4:	4a17      	ldr	r2, [pc, #92]	; (8003424 <HAL_DMA_Abort_IT+0x20c>)
 80033c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
    } 
  }
  return status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40020080 	.word	0x40020080
 80033f8:	40020008 	.word	0x40020008
 80033fc:	4002001c 	.word	0x4002001c
 8003400:	40020030 	.word	0x40020030
 8003404:	40020044 	.word	0x40020044
 8003408:	40020058 	.word	0x40020058
 800340c:	4002006c 	.word	0x4002006c
 8003410:	40020408 	.word	0x40020408
 8003414:	4002041c 	.word	0x4002041c
 8003418:	40020430 	.word	0x40020430
 800341c:	40020444 	.word	0x40020444
 8003420:	40020400 	.word	0x40020400
 8003424:	40020000 	.word	0x40020000

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b08b      	sub	sp, #44	; 0x2c
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343a:	e179      	b.n	8003730 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800343c:	2201      	movs	r2, #1
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 8168 	bne.w	800372a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4aa0      	ldr	r2, [pc, #640]	; (80036e0 <HAL_GPIO_Init+0x2b8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d05e      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003464:	4a9e      	ldr	r2, [pc, #632]	; (80036e0 <HAL_GPIO_Init+0x2b8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d875      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 800346a:	4a9e      	ldr	r2, [pc, #632]	; (80036e4 <HAL_GPIO_Init+0x2bc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d058      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003470:	4a9c      	ldr	r2, [pc, #624]	; (80036e4 <HAL_GPIO_Init+0x2bc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d86f      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 8003476:	4a9c      	ldr	r2, [pc, #624]	; (80036e8 <HAL_GPIO_Init+0x2c0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d052      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 800347c:	4a9a      	ldr	r2, [pc, #616]	; (80036e8 <HAL_GPIO_Init+0x2c0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d869      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 8003482:	4a9a      	ldr	r2, [pc, #616]	; (80036ec <HAL_GPIO_Init+0x2c4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d04c      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003488:	4a98      	ldr	r2, [pc, #608]	; (80036ec <HAL_GPIO_Init+0x2c4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d863      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 800348e:	4a98      	ldr	r2, [pc, #608]	; (80036f0 <HAL_GPIO_Init+0x2c8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d046      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
 8003494:	4a96      	ldr	r2, [pc, #600]	; (80036f0 <HAL_GPIO_Init+0x2c8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d85d      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 800349a:	2b12      	cmp	r3, #18
 800349c:	d82a      	bhi.n	80034f4 <HAL_GPIO_Init+0xcc>
 800349e:	2b12      	cmp	r3, #18
 80034a0:	d859      	bhi.n	8003556 <HAL_GPIO_Init+0x12e>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <HAL_GPIO_Init+0x80>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	08003523 	.word	0x08003523
 80034ac:	080034fd 	.word	0x080034fd
 80034b0:	0800350f 	.word	0x0800350f
 80034b4:	08003551 	.word	0x08003551
 80034b8:	08003557 	.word	0x08003557
 80034bc:	08003557 	.word	0x08003557
 80034c0:	08003557 	.word	0x08003557
 80034c4:	08003557 	.word	0x08003557
 80034c8:	08003557 	.word	0x08003557
 80034cc:	08003557 	.word	0x08003557
 80034d0:	08003557 	.word	0x08003557
 80034d4:	08003557 	.word	0x08003557
 80034d8:	08003557 	.word	0x08003557
 80034dc:	08003557 	.word	0x08003557
 80034e0:	08003557 	.word	0x08003557
 80034e4:	08003557 	.word	0x08003557
 80034e8:	08003557 	.word	0x08003557
 80034ec:	08003505 	.word	0x08003505
 80034f0:	08003519 	.word	0x08003519
 80034f4:	4a7f      	ldr	r2, [pc, #508]	; (80036f4 <HAL_GPIO_Init+0x2cc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034fa:	e02c      	b.n	8003556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	623b      	str	r3, [r7, #32]
          break;
 8003502:	e029      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	3304      	adds	r3, #4
 800350a:	623b      	str	r3, [r7, #32]
          break;
 800350c:	e024      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	3308      	adds	r3, #8
 8003514:	623b      	str	r3, [r7, #32]
          break;
 8003516:	e01f      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	330c      	adds	r3, #12
 800351e:	623b      	str	r3, [r7, #32]
          break;
 8003520:	e01a      	b.n	8003558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800352a:	2304      	movs	r3, #4
 800352c:	623b      	str	r3, [r7, #32]
          break;
 800352e:	e013      	b.n	8003558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003538:	2308      	movs	r3, #8
 800353a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	611a      	str	r2, [r3, #16]
          break;
 8003542:	e009      	b.n	8003558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003544:	2308      	movs	r3, #8
 8003546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	615a      	str	r2, [r3, #20]
          break;
 800354e:	e003      	b.n	8003558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
          break;
 8003554:	e000      	b.n	8003558 <HAL_GPIO_Init+0x130>
          break;
 8003556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2bff      	cmp	r3, #255	; 0xff
 800355c:	d801      	bhi.n	8003562 <HAL_GPIO_Init+0x13a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	e001      	b.n	8003566 <HAL_GPIO_Init+0x13e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2bff      	cmp	r3, #255	; 0xff
 800356c:	d802      	bhi.n	8003574 <HAL_GPIO_Init+0x14c>
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	e002      	b.n	800357a <HAL_GPIO_Init+0x152>
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	3b08      	subs	r3, #8
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	210f      	movs	r1, #15
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	6a39      	ldr	r1, [r7, #32]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	431a      	orrs	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80c1 	beq.w	800372a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_GPIO_Init+0x2d0>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_GPIO_Init+0x2d0>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_GPIO_Init+0x2d0>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035c0:	4a4e      	ldr	r2, [pc, #312]	; (80036fc <HAL_GPIO_Init+0x2d4>)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a46      	ldr	r2, [pc, #280]	; (8003700 <HAL_GPIO_Init+0x2d8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d01f      	beq.n	800362c <HAL_GPIO_Init+0x204>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a45      	ldr	r2, [pc, #276]	; (8003704 <HAL_GPIO_Init+0x2dc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d019      	beq.n	8003628 <HAL_GPIO_Init+0x200>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a44      	ldr	r2, [pc, #272]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_GPIO_Init+0x1fc>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a43      	ldr	r2, [pc, #268]	; (800370c <HAL_GPIO_Init+0x2e4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00d      	beq.n	8003620 <HAL_GPIO_Init+0x1f8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a42      	ldr	r2, [pc, #264]	; (8003710 <HAL_GPIO_Init+0x2e8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <HAL_GPIO_Init+0x1f4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a41      	ldr	r2, [pc, #260]	; (8003714 <HAL_GPIO_Init+0x2ec>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_GPIO_Init+0x1f0>
 8003614:	2305      	movs	r3, #5
 8003616:	e00a      	b.n	800362e <HAL_GPIO_Init+0x206>
 8003618:	2306      	movs	r3, #6
 800361a:	e008      	b.n	800362e <HAL_GPIO_Init+0x206>
 800361c:	2304      	movs	r3, #4
 800361e:	e006      	b.n	800362e <HAL_GPIO_Init+0x206>
 8003620:	2303      	movs	r3, #3
 8003622:	e004      	b.n	800362e <HAL_GPIO_Init+0x206>
 8003624:	2302      	movs	r3, #2
 8003626:	e002      	b.n	800362e <HAL_GPIO_Init+0x206>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_GPIO_Init+0x206>
 800362c:	2300      	movs	r3, #0
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	f002 0203 	and.w	r2, r2, #3
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	4093      	lsls	r3, r2
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800363e:	492f      	ldr	r1, [pc, #188]	; (80036fc <HAL_GPIO_Init+0x2d4>)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003658:	4b2f      	ldr	r3, [pc, #188]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	492e      	ldr	r1, [pc, #184]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003666:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	43db      	mvns	r3, r3
 800366e:	492a      	ldr	r1, [pc, #168]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 8003670:	4013      	ands	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	4924      	ldr	r1, [pc, #144]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	43db      	mvns	r3, r3
 8003696:	4920      	ldr	r1, [pc, #128]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 8003698:	4013      	ands	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	491a      	ldr	r1, [pc, #104]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	43db      	mvns	r3, r3
 80036be:	4916      	ldr	r1, [pc, #88]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d025      	beq.n	800371c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4910      	ldr	r1, [pc, #64]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60cb      	str	r3, [r1, #12]
 80036dc:	e025      	b.n	800372a <HAL_GPIO_Init+0x302>
 80036de:	bf00      	nop
 80036e0:	10320000 	.word	0x10320000
 80036e4:	10310000 	.word	0x10310000
 80036e8:	10220000 	.word	0x10220000
 80036ec:	10210000 	.word	0x10210000
 80036f0:	10120000 	.word	0x10120000
 80036f4:	10110000 	.word	0x10110000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010800 	.word	0x40010800
 8003704:	40010c00 	.word	0x40010c00
 8003708:	40011000 	.word	0x40011000
 800370c:	40011400 	.word	0x40011400
 8003710:	40011800 	.word	0x40011800
 8003714:	40011c00 	.word	0x40011c00
 8003718:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_GPIO_Init+0x324>)
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	43db      	mvns	r3, r3
 8003724:	4909      	ldr	r1, [pc, #36]	; (800374c <HAL_GPIO_Init+0x324>)
 8003726:	4013      	ands	r3, r2
 8003728:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	3301      	adds	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	f47f ae7e 	bne.w	800343c <HAL_GPIO_Init+0x14>
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	372c      	adds	r7, #44	; 0x2c
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e001      	b.n	8003772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	807b      	strh	r3, [r7, #2]
 800378a:	4613      	mov	r3, r2
 800378c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800378e:	787b      	ldrb	r3, [r7, #1]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003794:	887a      	ldrh	r2, [r7, #2]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800379a:	e003      	b.n	80037a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	041a      	lsls	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	611a      	str	r2, [r3, #16]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4013      	ands	r3, r2
 80037c6:	041a      	lsls	r2, r3, #16
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	400b      	ands	r3, r1
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	611a      	str	r2, [r3, #16]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fa08 	bl	8002c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40010400 	.word	0x40010400

08003810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e26c      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8087 	beq.w	800393e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003830:	4b92      	ldr	r3, [pc, #584]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b04      	cmp	r3, #4
 800383a:	d00c      	beq.n	8003856 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800383c:	4b8f      	ldr	r3, [pc, #572]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d112      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
 8003848:	4b8c      	ldr	r3, [pc, #560]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d10b      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003856:	4b89      	ldr	r3, [pc, #548]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d06c      	beq.n	800393c <HAL_RCC_OscConfig+0x12c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d168      	bne.n	800393c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e246      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x76>
 8003878:	4b80      	ldr	r3, [pc, #512]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7f      	ldr	r2, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e02e      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7a      	ldr	r2, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a77      	ldr	r2, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0xbc>
 80038b2:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a71      	ldr	r2, [pc, #452]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6e      	ldr	r2, [pc, #440]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038cc:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7ff fb3e 	bl	8002f6c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7ff fb3a 	bl	8002f6c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1fa      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe4>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7ff fb2a 	bl	8002f6c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7ff fb26 	bl	8002f6c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1e6      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x10c>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
 8003962:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1ba      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4939      	ldr	r1, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7ff fadf 	bl	8002f6c <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b2:	f7ff fadb 	bl	8002f6c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e19b      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4927      	ldr	r1, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7ff fabe 	bl	8002f6c <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7ff faba 	bl	8002f6c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e17a      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03a      	beq.n	8003a94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d019      	beq.n	8003a5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7ff fa9e 	bl	8002f6c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7ff fa9a 	bl	8002f6c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e15a      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f000 fad8 	bl	8004008 <RCC_Delay>
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7ff fa84 	bl	8002f6c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7ff fa80 	bl	8002f6c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d908      	bls.n	8003a88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e140      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	42420000 	.word	0x42420000
 8003a84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b9e      	ldr	r3, [pc, #632]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e9      	bne.n	8003a68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a6 	beq.w	8003bee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4b97      	ldr	r3, [pc, #604]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b94      	ldr	r3, [pc, #592]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4a93      	ldr	r2, [pc, #588]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	61d3      	str	r3, [r2, #28]
 8003abe:	4b91      	ldr	r3, [pc, #580]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b8e      	ldr	r3, [pc, #568]	; (8003d08 <HAL_RCC_OscConfig+0x4f8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b8b      	ldr	r3, [pc, #556]	; (8003d08 <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a8a      	ldr	r2, [pc, #552]	; (8003d08 <HAL_RCC_OscConfig+0x4f8>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7ff fa41 	bl	8002f6c <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7ff fa3d 	bl	8002f6c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0fd      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b81      	ldr	r3, [pc, #516]	; (8003d08 <HAL_RCC_OscConfig+0x4f8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b14:	4b7b      	ldr	r3, [pc, #492]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a7a      	ldr	r2, [pc, #488]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	e02d      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x334>
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6213      	str	r3, [r2, #32]
 8003b36:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a72      	ldr	r2, [pc, #456]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	e01c      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x356>
 8003b4c:	4b6d      	ldr	r3, [pc, #436]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4a6c      	ldr	r2, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a69      	ldr	r2, [pc, #420]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b66:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	4b64      	ldr	r3, [pc, #400]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a63      	ldr	r2, [pc, #396]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7ff f9f1 	bl	8002f6c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7ff f9ed 	bl	8002f6c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0ab      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	4b57      	ldr	r3, [pc, #348]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x37e>
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7ff f9db 	bl	8002f6c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7ff f9d7 	bl	8002f6c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e095      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a47      	ldr	r2, [pc, #284]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8081 	beq.w	8003cfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf8:	4b42      	ldr	r3, [pc, #264]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d061      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d146      	bne.n	8003c9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b3f      	ldr	r3, [pc, #252]	; (8003d0c <HAL_RCC_OscConfig+0x4fc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7ff f9ab 	bl	8002f6c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7ff f9a7 	bl	8002f6c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e067      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2c:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c42:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	492d      	ldr	r1, [pc, #180]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a19      	ldr	r1, [r3, #32]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	430b      	orrs	r3, r1
 8003c66:	4927      	ldr	r1, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <HAL_RCC_OscConfig+0x4fc>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7ff f97b 	bl	8002f6c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7ff f977 	bl	8002f6c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e037      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
 8003c98:	e02f      	b.n	8003cfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_RCC_OscConfig+0x4fc>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7ff f964 	bl	8002f6c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7ff f960 	bl	8002f6c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e020      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x498>
 8003cc6:	e018      	b.n	8003cfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e013      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_OscConfig+0x4f4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d001      	beq.n	8003cfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42420060 	.word	0x42420060

08003d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0d0      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d910      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0207 	bic.w	r2, r3, #7
 8003d3a:	4965      	ldr	r1, [pc, #404]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b63      	ldr	r3, [pc, #396]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0b8      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b59      	ldr	r3, [pc, #356]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d84:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a52      	ldr	r2, [pc, #328]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494d      	ldr	r1, [pc, #308]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d040      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d115      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e073      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06b      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b39      	ldr	r3, [pc, #228]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4936      	ldr	r1, [pc, #216]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7ff f8b4 	bl	8002f6c <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7ff f8b0 	bl	8002f6c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e053      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d210      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	4922      	ldr	r1, [pc, #136]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e032      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4916      	ldr	r1, [pc, #88]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9e:	f000 f821 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490a      	ldr	r1, [pc, #40]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x1cc>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f812 	bl	8002ee8 <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	0801e480 	.word	0x0801e480
 8003edc:	200000a4 	.word	0x200000a4
 8003ee0:	200000a8 	.word	0x200000a8

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b490      	push	{r4, r7}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003eea:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003eec:	1d3c      	adds	r4, r7, #4
 8003eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ef4:	f240 2301 	movw	r3, #513	; 0x201
 8003ef8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d002      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x40>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x46>
 8003f22:	e02d      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f26:	623b      	str	r3, [r7, #32]
      break;
 8003f28:	e02d      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	0c9b      	lsrs	r3, r3, #18
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f36:	4413      	add	r3, r2
 8003f38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	0c5b      	lsrs	r3, r3, #17
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f56:	4413      	add	r3, r2
 8003f58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f62:	fb02 f203 	mul.w	r2, r2, r3
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	e004      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	623b      	str	r3, [r7, #32]
      break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f82:	623b      	str	r3, [r7, #32]
      break;
 8003f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc90      	pop	{r4, r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	0801e160 	.word	0x0801e160
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	007a1200 	.word	0x007a1200
 8003fa0:	003d0900 	.word	0x003d0900

08003fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa8:	4b02      	ldr	r3, [pc, #8]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	200000a4 	.word	0x200000a4

08003fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fbc:	f7ff fff2 	bl	8003fa4 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	0801e490 	.word	0x0801e490

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fe4:	f7ff ffde 	bl	8003fa4 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	0adb      	lsrs	r3, r3, #11
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	0801e490 	.word	0x0801e490

08004008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <RCC_Delay+0x34>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <RCC_Delay+0x38>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0a5b      	lsrs	r3, r3, #9
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004024:	bf00      	nop
  }
  while (Delay --);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e5a      	subs	r2, r3, #1
 800402a:	60fa      	str	r2, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f9      	bne.n	8004024 <RCC_Delay+0x1c>
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	200000a4 	.word	0x200000a4
 8004040:	10624dd3 	.word	0x10624dd3

08004044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e076      	b.n	8004144 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004066:	d009      	beq.n	800407c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	61da      	str	r2, [r3, #28]
 800406e:	e005      	b.n	800407c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe fc90 	bl	80029bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	ea42 0103 	orr.w	r1, r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	0c1a      	lsrs	r2, r3, #16
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f002 0204 	and.w	r2, r2, #4
 8004122:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	; 0x30
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800415a:	2301      	movs	r3, #1
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x26>
 800416e:	2302      	movs	r3, #2
 8004170:	e18a      	b.n	8004488 <HAL_SPI_TransmitReceive+0x33c>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417a:	f7fe fef7 	bl	8002f6c <HAL_GetTick>
 800417e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004190:	887b      	ldrh	r3, [r7, #2]
 8004192:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004198:	2b01      	cmp	r3, #1
 800419a:	d00f      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x70>
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a2:	d107      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x68>
 80041ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d003      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041ba:	e15b      	b.n	8004474 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x82>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x82>
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041d4:	e14e      	b.n	8004474 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d003      	beq.n	80041ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2205      	movs	r2, #5
 80041e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	887a      	ldrh	r2, [r7, #2]
 80041fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	887a      	ldrh	r2, [r7, #2]
 8004212:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d007      	beq.n	800423e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d178      	bne.n	800433a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x10a>
 8004250:	8b7b      	ldrh	r3, [r7, #26]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d166      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427a:	e053      	b.n	8004324 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d11b      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x176>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d016      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x176>
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b01      	cmp	r3, #1
 8004298:	d113      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	1c9a      	adds	r2, r3, #2
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d119      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x1b8>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d014      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	b292      	uxth	r2, r2
 80042e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	1c9a      	adds	r2, r3, #2
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004300:	2301      	movs	r3, #1
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004304:	f7fe fe32 	bl	8002f6c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004310:	429a      	cmp	r2, r3
 8004312:	d807      	bhi.n	8004324 <HAL_SPI_TransmitReceive+0x1d8>
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d003      	beq.n	8004324 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004322:	e0a7      	b.n	8004474 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1a6      	bne.n	800427c <HAL_SPI_TransmitReceive+0x130>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1a1      	bne.n	800427c <HAL_SPI_TransmitReceive+0x130>
 8004338:	e07c      	b.n	8004434 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x1fc>
 8004342:	8b7b      	ldrh	r3, [r7, #26]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d16b      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	7812      	ldrb	r2, [r2, #0]
 8004354:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436e:	e057      	b.n	8004420 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d11c      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x26c>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d017      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x26c>
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d114      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d119      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x2ae>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d014      	beq.n	80043fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043f6:	2301      	movs	r3, #1
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043fa:	f7fe fdb7 	bl	8002f6c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004406:	429a      	cmp	r2, r3
 8004408:	d803      	bhi.n	8004412 <HAL_SPI_TransmitReceive+0x2c6>
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d102      	bne.n	8004418 <HAL_SPI_TransmitReceive+0x2cc>
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800441e:	e029      	b.n	8004474 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1a2      	bne.n	8004370 <HAL_SPI_TransmitReceive+0x224>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d19d      	bne.n	8004370 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f8b1 	bl	80045a0 <SPI_EndRxTxTransaction>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004450:	e010      	b.n	8004474 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	e000      	b.n	8004474 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004488:	4618      	mov	r0, r3
 800448a:	3730      	adds	r7, #48	; 0x30
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044a0:	f7fe fd64 	bl	8002f6c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	4413      	add	r3, r2
 80044ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044b0:	f7fe fd5c 	bl	8002f6c <HAL_GetTick>
 80044b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044b6:	4b39      	ldr	r3, [pc, #228]	; (800459c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	015b      	lsls	r3, r3, #5
 80044bc:	0d1b      	lsrs	r3, r3, #20
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044c6:	e054      	b.n	8004572 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d050      	beq.n	8004572 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044d0:	f7fe fd4c 	bl	8002f6c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d902      	bls.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d13d      	bne.n	8004562 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d111      	bne.n	8004524 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004508:	d004      	beq.n	8004514 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004512:	d107      	bne.n	8004524 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452c:	d10f      	bne.n	800454e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800454c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e017      	b.n	8004592 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3b01      	subs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	429a      	cmp	r2, r3
 800458e:	d19b      	bne.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200000a4 	.word	0x200000a4

080045a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff ff6a 	bl	8004490 <SPI_WaitFlagStateUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e000      	b.n	80045d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e03f      	b.n	800466e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fe fbe0 	bl	8002dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fb83 	bl	8004d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b08a      	sub	sp, #40	; 0x28
 800467a:	af02      	add	r7, sp, #8
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b20      	cmp	r3, #32
 8004694:	d17c      	bne.n	8004790 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_UART_Transmit+0x2c>
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e075      	b.n	8004792 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x3e>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e06e      	b.n	8004792 <HAL_UART_Transmit+0x11c>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2221      	movs	r2, #33	; 0x21
 80046c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046ca:	f7fe fc4f 	bl	8002f6c <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	d108      	bne.n	80046f8 <HAL_UART_Transmit+0x82>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e003      	b.n	8004700 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004708:	e02a      	b.n	8004760 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	; 0x80
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f9a7 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e036      	b.n	8004792 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3302      	adds	r3, #2
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	e007      	b.n	8004752 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3301      	adds	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1cf      	bne.n	800470a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2140      	movs	r1, #64	; 0x40
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f977 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d140      	bne.n	8004836 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Receive_IT+0x26>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e039      	b.n	8004838 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Receive_IT+0x38>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e032      	b.n	8004838 <HAL_UART_Receive_IT+0x9e>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2222      	movs	r2, #34	; 0x22
 80047f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004810:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0220 	orr.w	r2, r2, #32
 8004830:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
	...

08004844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_UART_IRQHandler+0x52>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9cc 	bl	8004c2c <UART_Receive_IT>
      return;
 8004894:	e0d0      	b.n	8004a38 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80b0 	beq.w	80049fe <HAL_UART_IRQHandler+0x1ba>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_UART_IRQHandler+0x70>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a5 	beq.w	80049fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_UART_IRQHandler+0x90>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_UART_IRQHandler+0xb0>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	f043 0202 	orr.w	r2, r3, #2
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_UART_IRQHandler+0xd0>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	f043 0204 	orr.w	r2, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00f      	beq.n	800493e <HAL_UART_IRQHandler+0xfa>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_UART_IRQHandler+0xee>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	f043 0208 	orr.w	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d077      	beq.n	8004a36 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_UART_IRQHandler+0x11c>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f966 	bl	8004c2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_UART_IRQHandler+0x144>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d031      	beq.n	80049ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8b7 	bl	8004afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d023      	beq.n	80049e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <HAL_UART_IRQHandler+0x1fc>)
 80049ba:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe fc29 	bl	8003218 <HAL_DMA_Abort_IT>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d016      	beq.n	80049fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d6:	4610      	mov	r0, r2
 80049d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049da:	e00e      	b.n	80049fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f83a 	bl	8004a56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e2:	e00a      	b.n	80049fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f836 	bl	8004a56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ea:	e006      	b.n	80049fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f832 	bl	8004a56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80049f8:	e01d      	b.n	8004a36 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fa:	bf00      	nop
    return;
 80049fc:	e01b      	b.n	8004a36 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1d6>
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8a3 	bl	8004b5e <UART_Transmit_IT>
    return;
 8004a18:	e00e      	b.n	8004a38 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_UART_IRQHandler+0x1f4>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8e4 	bl	8004bfc <UART_EndTransmit_IT>
    return;
 8004a34:	e000      	b.n	8004a38 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004a36:	bf00      	nop
  }
}
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	08004b37 	.word	0x08004b37

08004a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a78:	e02c      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d028      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a88:	f7fe fa70 	bl	8002f6c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d21d      	bcs.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aa6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e00f      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d0c3      	beq.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff ff80 	bl	8004a56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b21      	cmp	r3, #33	; 0x21
 8004b70:	d13e      	bne.n	8004bf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d114      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d110      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]
 8004ba4:	e008      	b.n	8004bb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6211      	str	r1, [r2, #32]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10f      	bne.n	8004bec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff11 	bl	8004a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b22      	cmp	r3, #34	; 0x22
 8004c3e:	d170      	bne.n	8004d22 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d117      	bne.n	8004c7a <UART_Receive_IT+0x4e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d113      	bne.n	8004c7a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
 8004c78:	e026      	b.n	8004cc8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8c:	d007      	beq.n	8004c9e <UART_Receive_IT+0x72>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <UART_Receive_IT+0x80>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e008      	b.n	8004cbe <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d120      	bne.n	8004d1e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0220 	bic.w	r2, r2, #32
 8004cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fd ff43 	bl	8002ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e002      	b.n	8004d24 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d66:	f023 030c 	bic.w	r3, r3, #12
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	430b      	orrs	r3, r1
 8004d72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <UART_SetConfig+0x114>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d94:	f7ff f924 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	e002      	b.n	8004da2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f7ff f90c 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 8004da0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009a      	lsls	r2, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <UART_SetConfig+0x118>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	0119      	lsls	r1, r3, #4
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009a      	lsls	r2, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <UART_SetConfig+0x118>)
 8004dda:	fba3 0302 	umull	r0, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	2064      	movs	r0, #100	; 0x64
 8004de2:	fb00 f303 	mul.w	r3, r0, r3
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	3332      	adds	r3, #50	; 0x32
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <UART_SetConfig+0x118>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df8:	4419      	add	r1, r3
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <UART_SetConfig+0x118>)
 8004e12:	fba3 0302 	umull	r0, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2064      	movs	r0, #100	; 0x64
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	3332      	adds	r3, #50	; 0x32
 8004e24:	4a07      	ldr	r2, [pc, #28]	; (8004e44 <UART_SetConfig+0x118>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	f003 020f 	and.w	r2, r3, #15
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	440a      	add	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40013800 	.word	0x40013800
 8004e44:	51eb851f 	.word	0x51eb851f

08004e48 <ndefAllocRecord>:
 */


/*****************************************************************************/
static ndefRecord* ndefAllocRecord(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
    static ndefRecord ndefRecordPool[NDEF_MAX_RECORD];

    if (ndefRecordPoolIndex >= NDEF_MAX_RECORD)
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <ndefAllocRecord+0x34>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b09      	cmp	r3, #9
 8004e52:	d901      	bls.n	8004e58 <ndefAllocRecord+0x10>
    {
        return NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e00c      	b.n	8004e72 <ndefAllocRecord+0x2a>
    }

    return &ndefRecordPool[ndefRecordPoolIndex++];
 8004e58:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <ndefAllocRecord+0x34>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	b2d1      	uxtb	r1, r2
 8004e60:	4a06      	ldr	r2, [pc, #24]	; (8004e7c <ndefAllocRecord+0x34>)
 8004e62:	7011      	strb	r1, [r2, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <ndefAllocRecord+0x38>)
 8004e70:	4413      	add	r3, r2
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	2000295c 	.word	0x2000295c
 8004e80:	20002960 	.word	0x20002960

08004e84 <ndefMessageInit>:
 */
/*****************************************************************************/


ReturnCode ndefMessageInit(ndefMessage* message)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
    if (message == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <ndefMessageInit+0x12>
    {
        return ERR_PARAM;
 8004e92:	2307      	movs	r3, #7
 8004e94:	e00c      	b.n	8004eb0 <ndefMessageInit+0x2c>
    }

    message->record           = NULL;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
    message->info.length      = 0;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	605a      	str	r2, [r3, #4]
    message->info.recordCount = 0;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	609a      	str	r2, [r3, #8]

    ndefRecordPoolIndex = 0;
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <ndefMessageInit+0x38>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	2000295c 	.word	0x2000295c

08004ec0 <ndefMessageGetInfo>:


/*****************************************************************************/
ReturnCode ndefMessageGetInfo(const ndefMessage* message, ndefMessageInfo* info)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
    ndefRecord* record;
    uint32_t    length      = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
    uint32_t    recordCount = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]

    if ( (message == NULL) || (info == NULL) )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <ndefMessageGetInfo+0x1e>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <ndefMessageGetInfo+0x22>
    {
        return ERR_PARAM;
 8004ede:	2307      	movs	r3, #7
 8004ee0:	e01a      	b.n	8004f18 <ndefMessageGetInfo+0x58>
    }

    record = message->record;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	617b      	str	r3, [r7, #20]

    while (record != NULL)
 8004ee8:	e00c      	b.n	8004f04 <ndefMessageGetInfo+0x44>
    {
        length += ndefRecordGetLength(record);
 8004eea:	6978      	ldr	r0, [r7, #20]
 8004eec:	f000 f994 	bl	8005218 <ndefRecordGetLength>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        recordCount++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]

        record = record->next;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	617b      	str	r3, [r7, #20]
    while (record != NULL)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ef      	bne.n	8004eea <ndefMessageGetInfo+0x2a>
    }

    info->length      = length;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	601a      	str	r2, [r3, #0]
    info->recordCount = recordCount;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <ndefMessageAppend>:
}


/*****************************************************************************/
ReturnCode ndefMessageAppend(ndefMessage* message, ndefRecord* record)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
    if ( (message == NULL) || (record == NULL) )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <ndefMessageAppend+0x16>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <ndefMessageAppend+0x1a>
    {
        return ERR_PARAM;
 8004f36:	2307      	movs	r3, #7
 8004f38:	e043      	b.n	8004fc2 <ndefMessageAppend+0xa2>
    }

    /* Clear the Message Begin bit */
    ndefHeaderClearMB(record);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	701a      	strb	r2, [r3, #0]

    /* Record is appended so it is the last in the list, set the Message End bit */
    ndefHeaderSetME(record);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	701a      	strb	r2, [r3, #0]

    record->next = NULL;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	619a      	str	r2, [r3, #24]

    if (message->record == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <ndefMessageAppend+0x5a>
    {
        /* Set the Message Begin bit for the first record only */
        ndefHeaderSetMB(record);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	701a      	strb	r2, [r3, #0]

        message->record = record;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e014      	b.n	8004fa4 <ndefMessageAppend+0x84>
    }
    else
    {
        ndefRecord* current = message->record;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]

        /* Go through the list of records */
        while (current->next != NULL)
 8004f80:	e002      	b.n	8004f88 <ndefMessageAppend+0x68>
        {
            current = current->next;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f8      	bne.n	8004f82 <ndefMessageAppend+0x62>
        }

        /* Clear the Message End bit to the record before the one being appended */
        ndefHeaderClearME(current);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	701a      	strb	r2, [r3, #0]

        /* Append to the last record */
        current->next = record;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	619a      	str	r2, [r3, #24]
    }

    message->info.length      += ndefRecordGetLength(record);
 8004fa4:	6838      	ldr	r0, [r7, #0]
 8004fa6:	f000 f937 	bl	8005218 <ndefRecordGetLength>
 8004faa:	4602      	mov	r2, r0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	605a      	str	r2, [r3, #4]
    message->info.recordCount += 1U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <ndefMessageDecode>:


/*****************************************************************************/
ReturnCode ndefMessageDecode(const ndefConstBuffer* bufPayload, ndefMessage* message)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b088      	sub	sp, #32
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (message == NULL) )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <ndefMessageDecode+0x1e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <ndefMessageDecode+0x1e>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <ndefMessageDecode+0x22>
    {
        return ERR_PARAM;
 8004fe8:	2307      	movs	r3, #7
 8004fea:	e043      	b.n	8005074 <ndefMessageDecode+0xaa>
    }

    err = ndefMessageInit(message);
 8004fec:	6838      	ldr	r0, [r7, #0]
 8004fee:	f7ff ff49 	bl	8004e84 <ndefMessageInit>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 8004ff6:	8b7b      	ldrh	r3, [r7, #26]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <ndefMessageDecode+0x36>
    {
        return err;
 8004ffc:	8b7b      	ldrh	r3, [r7, #26]
 8004ffe:	e039      	b.n	8005074 <ndefMessageDecode+0xaa>
    }

    offset = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
    while (offset < bufPayload->length)
 8005004:	e030      	b.n	8005068 <ndefMessageDecode+0x9e>
    {
        ndefConstBuffer bufRecord;
        ndefRecord* record = ndefAllocRecord();
 8005006:	f7ff ff1f 	bl	8004e48 <ndefAllocRecord>
 800500a:	6178      	str	r0, [r7, #20]
        if (record == NULL)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <ndefMessageDecode+0x4c>
        {
            return ERR_NOMEM;
 8005012:	2301      	movs	r3, #1
 8005014:	e02e      	b.n	8005074 <ndefMessageDecode+0xaa>
        }
        bufRecord.buffer = &bufPayload->buffer[offset];
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
        bufRecord.length =  bufPayload->length - offset;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	613b      	str	r3, [r7, #16]
        err = ndefRecordDecode(&bufRecord, record);
 800502a:	f107 030c 	add.w	r3, r7, #12
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fa32 	bl	800549a <ndefRecordDecode>
 8005036:	4603      	mov	r3, r0
 8005038:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800503a:	8b7b      	ldrh	r3, [r7, #26]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <ndefMessageDecode+0x7a>
        {
            return err;
 8005040:	8b7b      	ldrh	r3, [r7, #26]
 8005042:	e017      	b.n	8005074 <ndefMessageDecode+0xaa>
        }
        offset += ndefRecordGetLength(record);
 8005044:	6978      	ldr	r0, [r7, #20]
 8005046:	f000 f8e7 	bl	8005218 <ndefRecordGetLength>
 800504a:	4602      	mov	r2, r0
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	61fb      	str	r3, [r7, #28]

        err = ndefMessageAppend(message, record);
 8005052:	6979      	ldr	r1, [r7, #20]
 8005054:	6838      	ldr	r0, [r7, #0]
 8005056:	f7ff ff63 	bl	8004f20 <ndefMessageAppend>
 800505a:	4603      	mov	r3, r0
 800505c:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 800505e:	8b7b      	ldrh	r3, [r7, #26]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <ndefMessageDecode+0x9e>
        {
            return err;
 8005064:	8b7b      	ldrh	r3, [r7, #26]
 8005066:	e005      	b.n	8005074 <ndefMessageDecode+0xaa>
    while (offset < bufPayload->length)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3c9      	bcc.n	8005006 <ndefMessageDecode+0x3c>
        }
    }

    return ERR_NONE;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <ndefMessageEncode>:


/*****************************************************************************/
ReturnCode ndefMessageEncode(const ndefMessage* message, ndefBuffer* bufPayload)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
    ndefMessageInfo info;
    ndefRecord*     record;
    uint32_t        offset;
    uint32_t        remainingLength;

    if ( (message == NULL) || (bufPayload == NULL) || (bufPayload->buffer == NULL) )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d006      	beq.n	800509a <ndefMessageEncode+0x1e>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <ndefMessageEncode+0x1e>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <ndefMessageEncode+0x22>
    {
        return ERR_PARAM;
 800509a:	2307      	movs	r3, #7
 800509c:	e050      	b.n	8005140 <ndefMessageEncode+0xc4>
    }

    err = ndefMessageGetInfo(message, &info);
 800509e:	f107 0310 	add.w	r3, r7, #16
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ff0b 	bl	8004ec0 <ndefMessageGetInfo>
 80050aa:	4603      	mov	r3, r0
 80050ac:	837b      	strh	r3, [r7, #26]
    if ( (err != ERR_NONE) || (bufPayload->length < info.length) )
 80050ae:	8b7b      	ldrh	r3, [r7, #26]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <ndefMessageEncode+0x42>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d204      	bcs.n	80050c8 <ndefMessageEncode+0x4c>
    {
        bufPayload->length = info.length;
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e03b      	b.n	8005140 <ndefMessageEncode+0xc4>
    }

    /* Get the first record */
    record          = ndefMessageGetFirstRecord(message);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <ndefMessageEncode+0x58>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	e000      	b.n	80050d6 <ndefMessageEncode+0x5a>
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
    offset          = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	623b      	str	r3, [r7, #32]
    remainingLength = bufPayload->length;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	61fb      	str	r3, [r7, #28]

    while (record != NULL)
 80050e2:	e026      	b.n	8005132 <ndefMessageEncode+0xb6>
    {
        ndefBuffer bufRecord;
        bufRecord.buffer = &bufPayload->buffer[offset];
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	4413      	add	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]
        bufRecord.length = remainingLength;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	60fb      	str	r3, [r7, #12]
        err = ndefRecordEncode(record, &bufRecord);
 80050f2:	f107 0308 	add.w	r3, r7, #8
 80050f6:	4619      	mov	r1, r3
 80050f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050fa:	f000 fb91 	bl	8005820 <ndefRecordEncode>
 80050fe:	4603      	mov	r3, r0
 8005100:	837b      	strh	r3, [r7, #26]
        if (err != ERR_NONE)
 8005102:	8b7b      	ldrh	r3, [r7, #26]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <ndefMessageEncode+0x96>
        {
            bufPayload->length = info.length;
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	605a      	str	r2, [r3, #4]
            return err;
 800510e:	8b7b      	ldrh	r3, [r7, #26]
 8005110:	e016      	b.n	8005140 <ndefMessageEncode+0xc4>
        }
        offset          += bufRecord.length;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	4413      	add	r3, r2
 8005118:	623b      	str	r3, [r7, #32]
        remainingLength -= bufRecord.length;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	61fb      	str	r3, [r7, #28]

        record = ndefMessageGetNextRecord(record);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <ndefMessageEncode+0xb2>
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	e000      	b.n	8005130 <ndefMessageEncode+0xb4>
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
    while (record != NULL)
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1d5      	bne.n	80050e4 <ndefMessageEncode+0x68>
    }

    bufPayload->length = offset;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6a3a      	ldr	r2, [r7, #32]
 800513c:	605a      	str	r2, [r3, #4]
    return ERR_NONE;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <ndefRecordReset>:
 */


/*****************************************************************************/
ReturnCode ndefRecordReset(ndefRecord* record)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
    ndefConstBuffer8 bufEmpty        = { NULL, 0 };
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	2300      	movs	r3, #0
 8005156:	753b      	strb	r3, [r7, #20]
    ndefConstBuffer  bufEmptyPayload = { NULL, 0 };
 8005158:	2300      	movs	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

    if (record == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <ndefRecordReset+0x22>
    {
        return ERR_PARAM;
 8005166:	2307      	movs	r3, #7
 8005168:	e01c      	b.n	80051a4 <ndefRecordReset+0x5c>
    }

    record->header = ndefHeader(0U, 0U, 0U, 0U, 0U, NDEF_TNF_EMPTY);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]

    (void)ndefRecordSetType(record, NDEF_TNF_EMPTY, &bufEmpty);
 8005170:	f107 0310 	add.w	r3, r7, #16
 8005174:	461a      	mov	r2, r3
 8005176:	2100      	movs	r1, #0
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f866 	bl	800524a <ndefRecordSetType>

    (void)ndefRecordSetId(record, &bufEmpty);
 800517e:	f107 0310 	add.w	r3, r7, #16
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f8e4 	bl	8005352 <ndefRecordSetId>

    /* Set the SR bit */
    (void)ndefRecordSetPayload(record, &bufEmptyPayload);
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f92f 	bl	80053f4 <ndefRecordSetPayload>

    record->ndeftype = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	615a      	str	r2, [r3, #20]

    record->next = NULL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <ndefRecordGetHeaderLength>:
}


/*****************************************************************************/
uint32_t ndefRecordGetHeaderLength(const ndefRecord* record)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <ndefRecordGetHeaderLength+0x12>
    {
        return 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e027      	b.n	800520e <ndefRecordGetHeaderLength+0x62>
    }

    length  = sizeof(uint8_t);      /* header (MB:1 + ME:1 + CF:1 + SR:1 + IL:1 + TNF:3 => 8 bits) */
 80051be:	2301      	movs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
    length += sizeof(uint8_t);      /* Type length */
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
    if (ndefHeaderIsSetSR(record))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <ndefRecordGetHeaderLength+0x30>
    {
        length += sizeof(uint8_t);  /* Short record */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e002      	b.n	80051e2 <ndefRecordGetHeaderLength+0x36>
    }
    else
    {
        length += sizeof(uint32_t); /* Standard record */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3304      	adds	r3, #4
 80051e0:	60fb      	str	r3, [r7, #12]
    }
    if (ndefHeaderIsSetIL(record))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <ndefRecordGetHeaderLength+0x48>
    {
        length += sizeof(uint8_t);  /* Id length */
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
    }
    length += record->typeLength;   /* Type */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	461a      	mov	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
    length += record->idLength;     /* Id */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	789b      	ldrb	r3, [r3, #2]
 8005204:	461a      	mov	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

    return length;
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <ndefRecordGetLength>:


/*****************************************************************************/
uint32_t ndefRecordGetLength(const ndefRecord* record)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
    uint32_t length;

    if (record == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <ndefRecordGetLength+0x12>
    {
        return 0;
 8005226:	2300      	movs	r3, #0
 8005228:	e00b      	b.n	8005242 <ndefRecordGetLength+0x2a>
    }

    length  = ndefRecordGetHeaderLength(record);  /* Header */
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff ffbe 	bl	80051ac <ndefRecordGetHeaderLength>
 8005230:	60f8      	str	r0, [r7, #12]
    length += ndefRecordGetPayloadLength(record); /* Payload */
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fb75 	bl	8005922 <ndefRecordGetPayloadLength>
 8005238:	4602      	mov	r2, r0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

    return length;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <ndefRecordSetType>:


/*****************************************************************************/
ReturnCode ndefRecordSetType(ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	460b      	mov	r3, r1
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	72fb      	strb	r3, [r7, #11]
    if ( (record  == NULL) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <ndefRecordSetType+0x2a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <ndefRecordSetType+0x2a>
         (bufType == NULL) ||
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
         (bufType == NULL) ||
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <ndefRecordSetType+0x2e>
         ( (bufType->buffer == NULL) && (bufType->length != 0U) ) )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	791b      	ldrb	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <ndefRecordSetType+0x2e>
    {
        return ERR_PARAM;
 8005274:	2307      	movs	r3, #7
 8005276:	e012      	b.n	800529e <ndefRecordSetType+0x54>
    }

    ndefHeaderSetTNF(record, tnf);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	781a      	ldrb	r2, [r3, #0]
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	b2db      	uxtb	r3, r3
 8005284:	4313      	orrs	r3, r2
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	701a      	strb	r2, [r3, #0]

    record->typeLength = bufType->length;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	791a      	ldrb	r2, [r3, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	705a      	strb	r2, [r3, #1]
    record->type       = bufType->buffer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <ndefRecordGetType>:


/*****************************************************************************/
ReturnCode ndefRecordGetType(const ndefRecord* record, uint8_t* tnf, ndefConstBuffer8* bufType)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
    if ( (record == NULL) || (tnf == NULL) || (bufType == NULL) )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <ndefRecordGetType+0x1e>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <ndefRecordGetType+0x1e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <ndefRecordGetType+0x22>
    {
        return ERR_PARAM;
 80052c6:	2307      	movs	r3, #7
 80052c8:	e00f      	b.n	80052ea <ndefRecordGetType+0x42>
    }

    *tnf            = ndefHeaderTNF(record);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	701a      	strb	r2, [r3, #0]
    bufType->buffer = record->type;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
    bufType->length = record->typeLength;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	785a      	ldrb	r2, [r3, #1]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <ndefRecordTypeMatch>:


/*****************************************************************************/
bool ndefRecordTypeMatch(const ndefRecord* record, uint8_t tnf, const ndefConstBuffer8* bufType)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	460b      	mov	r3, r1
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	72fb      	strb	r3, [r7, #11]
    if ( (record == NULL) || (bufType == NULL) )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <ndefRecordTypeMatch+0x1a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <ndefRecordTypeMatch+0x1e>
    {
        return false;
 800530e:	2300      	movs	r3, #0
 8005310:	e01b      	b.n	800534a <ndefRecordTypeMatch+0x56>
    }

    if ( (ndefHeaderTNF(record) == tnf)             &&
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	f003 0207 	and.w	r2, r3, #7
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	429a      	cmp	r2, r3
 800531e:	d113      	bne.n	8005348 <ndefRecordTypeMatch+0x54>
         (record->typeLength    == bufType->length) &&
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	785a      	ldrb	r2, [r3, #1]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	791b      	ldrb	r3, [r3, #4]
    if ( (ndefHeaderTNF(record) == tnf)             &&
 8005328:	429a      	cmp	r2, r3
 800532a:	d10d      	bne.n	8005348 <ndefRecordTypeMatch+0x54>
         (ST_BYTECMP(record->type, bufType->buffer, bufType->length) == 0) )
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6858      	ldr	r0, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	791b      	ldrb	r3, [r3, #4]
 8005338:	461a      	mov	r2, r3
 800533a:	f016 fcab 	bl	801bc94 <memcmp>
 800533e:	4603      	mov	r3, r0
         (record->typeLength    == bufType->length) &&
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <ndefRecordTypeMatch+0x54>
    {
        return true;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <ndefRecordTypeMatch+0x56>
    }

     return false;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <ndefRecordSetId>:


/*****************************************************************************/
ReturnCode ndefRecordSetId(ndefRecord* record, const ndefConstBuffer8* bufId)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <ndefRecordSetId+0x26>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <ndefRecordSetId+0x26>
         (bufId  == NULL) ||
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
         (bufId  == NULL) ||
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <ndefRecordSetId+0x2a>
         ( (bufId->buffer == NULL) && (bufId->length != 0U) ) )
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	791b      	ldrb	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <ndefRecordSetId+0x2a>
    {
        return ERR_PARAM;
 8005378:	2307      	movs	r3, #7
 800537a:	e01b      	b.n	80053b4 <ndefRecordSetId+0x62>
    }

    if (bufId->buffer != NULL)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <ndefRecordSetId+0x42>
    {
        ndefHeaderSetIL(record);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	f043 0308 	orr.w	r3, r3, #8
 800538c:	b2da      	uxtb	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e006      	b.n	80053a2 <ndefRecordSetId+0x50>
    }
    else
    {
        ndefHeaderClearIL(record);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f023 0308 	bic.w	r3, r3, #8
 800539c:	b2da      	uxtb	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	701a      	strb	r2, [r3, #0]
    }

    record->id       = bufId->buffer;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	609a      	str	r2, [r3, #8]
    record->idLength = bufId->length;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	791a      	ldrb	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	709a      	strb	r2, [r3, #2]

    return ERR_NONE;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <ndefRecordGetId>:


/*****************************************************************************/
ReturnCode ndefRecordGetId(const ndefRecord* record, ndefConstBuffer8* bufId)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufId == NULL) )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <ndefRecordGetId+0x16>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <ndefRecordGetId+0x1a>
    {
        return ERR_PARAM;
 80053d4:	2307      	movs	r3, #7
 80053d6:	e008      	b.n	80053ea <ndefRecordGetId+0x2c>
    }

    bufId->buffer = record->id;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	601a      	str	r2, [r3, #0]
    bufId->length = record->idLength;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	789a      	ldrb	r2, [r3, #2]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	711a      	strb	r2, [r3, #4]

    return ERR_NONE;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <ndefRecordSetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordSetPayload(ndefRecord* record, const ndefConstBuffer* bufPayload)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
    if ( (record     == NULL) ||
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <ndefRecordSetPayload+0x26>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <ndefRecordSetPayload+0x26>
         (bufPayload == NULL) ||
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
         (bufPayload == NULL) ||
 800540e:	2b00      	cmp	r3, #0
 8005410:	d105      	bne.n	800541e <ndefRecordSetPayload+0x2a>
         ( (bufPayload->buffer == NULL) && (bufPayload->length != 0U) ) )
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <ndefRecordSetPayload+0x2a>
    {
        return ERR_PARAM;
 800541a:	2307      	movs	r3, #7
 800541c:	e01c      	b.n	8005458 <ndefRecordSetPayload+0x64>
    }

    ndefHeaderSetValueSR(record, (bufPayload->length <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	b2da      	uxtb	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	6852      	ldr	r2, [r2, #4]
 8005434:	2aff      	cmp	r2, #255	; 0xff
 8005436:	d801      	bhi.n	800543c <ndefRecordSetPayload+0x48>
 8005438:	2210      	movs	r2, #16
 800543a:	e000      	b.n	800543e <ndefRecordSetPayload+0x4a>
 800543c:	2200      	movs	r2, #0
 800543e:	4313      	orrs	r3, r2
 8005440:	b2da      	uxtb	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	701a      	strb	r2, [r3, #0]

    record->bufPayload.buffer = bufPayload->buffer;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]
    record->bufPayload.length = bufPayload->length;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <ndefRecordGetPayload>:


/*****************************************************************************/
ReturnCode ndefRecordGetPayload(const ndefRecord* record, ndefConstBuffer* bufPayload)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (bufPayload == NULL) )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <ndefRecordGetPayload+0x16>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <ndefRecordGetPayload+0x1a>
    {
        return ERR_PARAM;
 8005478:	2307      	movs	r3, #7
 800547a:	e00a      	b.n	8005492 <ndefRecordGetPayload+0x30>
    }

    bufPayload->buffer = record->bufPayload.buffer;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	601a      	str	r2, [r3, #0]
    bufPayload->length = ndefRecordGetPayloadLength(record);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fa4c 	bl	8005922 <ndefRecordGetPayloadLength>
 800548a:	4602      	mov	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <ndefRecordDecode>:


/*****************************************************************************/
ReturnCode ndefRecordDecode(const ndefConstBuffer* bufPayload, ndefRecord* record)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
    uint32_t offset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (record == NULL) )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <ndefRecordDecode+0x1e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <ndefRecordDecode+0x1e>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <ndefRecordDecode+0x22>
    {
        return ERR_PARAM;
 80054b8:	2307      	movs	r3, #7
 80054ba:	e0e7      	b.n	800568c <ndefRecordDecode+0x1f2>
    }

    if (ndefRecordReset(record) != ERR_NONE)
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f7ff fe43 	bl	8005148 <ndefRecordReset>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <ndefRecordDecode+0x32>
    {
        return ERR_INTERNAL;
 80054c8:	230c      	movs	r3, #12
 80054ca:	e0df      	b.n	800568c <ndefRecordDecode+0x1f2>
    }

    /* Get "header" byte */
    offset = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d901      	bls.n	80054e0 <ndefRecordDecode+0x46>
    {
        return ERR_PROTO;
 80054dc:	230b      	movs	r3, #11
 80054de:	e0d5      	b.n	800568c <ndefRecordDecode+0x1f2>
    }
    record->header = bufPayload->buffer[offset];
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	701a      	strb	r2, [r3, #0]
    offset++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]

    /* Get Type length */
    if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d901      	bls.n	8005504 <ndefRecordDecode+0x6a>
    {
        return ERR_PROTO;
 8005500:	230b      	movs	r3, #11
 8005502:	e0c3      	b.n	800568c <ndefRecordDecode+0x1f2>
    }
    record->typeLength = bufPayload->buffer[offset];
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	781a      	ldrb	r2, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	705a      	strb	r2, [r3, #1]
    offset++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]

    /* Decode Payload length */
    if (ndefHeaderIsSetSR(record))
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d013      	beq.n	800554c <ndefRecordDecode+0xb2>
    {
        /* Short record */
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d901      	bls.n	8005534 <ndefRecordDecode+0x9a>
        {
            return ERR_PROTO;
 8005530:	230b      	movs	r3, #11
 8005532:	e0ab      	b.n	800568c <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = bufPayload->buffer[offset]; /* length stored on a single byte for Short Record */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	611a      	str	r2, [r3, #16]
        offset++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e029      	b.n	80055a0 <ndefRecordDecode+0x106>
    }
    else
    {
        /* Standard record */
        if ((offset + sizeof(uint32_t)) > bufPayload->length)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d901      	bls.n	800555c <ndefRecordDecode+0xc2>
        {
            return ERR_PROTO;
 8005558:	230b      	movs	r3, #11
 800555a:	e097      	b.n	800568c <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.length = GETU32(&bufPayload->buffer[offset]);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	061a      	lsls	r2, r3, #24
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6819      	ldr	r1, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	440b      	add	r3, r1
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	041b      	lsls	r3, r3, #16
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3302      	adds	r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	4313      	orrs	r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6811      	ldr	r1, [r2, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	3203      	adds	r2, #3
 8005590:	440a      	add	r2, r1
 8005592:	7812      	ldrb	r2, [r2, #0]
 8005594:	431a      	orrs	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	611a      	str	r2, [r3, #16]
        offset += sizeof(uint32_t);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3304      	adds	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
    }

    /* Get Id length */
    if (ndefHeaderIsSetIL(record))
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d012      	beq.n	80055d2 <ndefRecordDecode+0x138>
    {
        if ((offset + sizeof(uint8_t)) > bufPayload->length)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d901      	bls.n	80055bc <ndefRecordDecode+0x122>
        {
            return ERR_PROTO;
 80055b8:	230b      	movs	r3, #11
 80055ba:	e067      	b.n	800568c <ndefRecordDecode+0x1f2>
        }
        record->idLength = bufPayload->buffer[offset];
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	709a      	strb	r2, [r3, #2]
        offset++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e002      	b.n	80055d8 <ndefRecordDecode+0x13e>
    }
    else
    {
        record->idLength = 0;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2200      	movs	r2, #0
 80055d6:	709a      	strb	r2, [r3, #2]
    }

    /* Get Type */
    if (record->typeLength > 0U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d017      	beq.n	8005610 <ndefRecordDecode+0x176>
    {
        if ((offset + record->typeLength) > bufPayload->length)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	461a      	mov	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d901      	bls.n	80055f6 <ndefRecordDecode+0x15c>
        {
            return ERR_PROTO;
 80055f2:	230b      	movs	r3, #11
 80055f4:	e04a      	b.n	800568c <ndefRecordDecode+0x1f2>
        }
        record->type = &bufPayload->buffer[offset];
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	441a      	add	r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	605a      	str	r2, [r3, #4]
        offset += record->typeLength;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	461a      	mov	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e002      	b.n	8005616 <ndefRecordDecode+0x17c>
    }
    else
    {
        record->type = NULL;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	605a      	str	r2, [r3, #4]
    }

    /* Get Id */
    if (record->idLength > 0U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	789b      	ldrb	r3, [r3, #2]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d017      	beq.n	800564e <ndefRecordDecode+0x1b4>
    {
        if ((offset + record->idLength) > bufPayload->length)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	789b      	ldrb	r3, [r3, #2]
 8005622:	461a      	mov	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	441a      	add	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d901      	bls.n	8005634 <ndefRecordDecode+0x19a>
        {
            return ERR_PROTO;
 8005630:	230b      	movs	r3, #11
 8005632:	e02b      	b.n	800568c <ndefRecordDecode+0x1f2>
        }
        record->id = &bufPayload->buffer[offset];
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	441a      	add	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	609a      	str	r2, [r3, #8]
        offset += record->idLength;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	789b      	ldrb	r3, [r3, #2]
 8005644:	461a      	mov	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e002      	b.n	8005654 <ndefRecordDecode+0x1ba>
    }
    else
    {
        record->id = NULL;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2200      	movs	r2, #0
 8005652:	609a      	str	r2, [r3, #8]
    }

    /* Get Payload */
    if (record->bufPayload.length > 0U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d010      	beq.n	800567e <ndefRecordDecode+0x1e4>
    {
        if ((offset + record->bufPayload.length) > bufPayload->length)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	441a      	add	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	429a      	cmp	r2, r3
 800566a:	d901      	bls.n	8005670 <ndefRecordDecode+0x1d6>
        {
            return ERR_PROTO;
 800566c:	230b      	movs	r3, #11
 800566e:	e00d      	b.n	800568c <ndefRecordDecode+0x1f2>
        }
        record->bufPayload.buffer = &bufPayload->buffer[offset];
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	441a      	add	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	e002      	b.n	8005684 <ndefRecordDecode+0x1ea>
    }
    else
    {
        record->bufPayload.buffer = NULL;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2200      	movs	r2, #0
 8005682:	60da      	str	r2, [r3, #12]
    }

    // Doesn't recognize WKT ...

    record->next = NULL;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	619a      	str	r2, [r3, #24]

    return ERR_NONE;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <ndefRecordEncodeHeader>:


/*****************************************************************************/
ReturnCode ndefRecordEncodeHeader(const ndefRecord* record, ndefBuffer* bufHeader)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t payloadLength;

    if ( (record == NULL) || (bufHeader == NULL) || (bufHeader->buffer == NULL) )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d006      	beq.n	80056b2 <ndefRecordEncodeHeader+0x1e>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <ndefRecordEncodeHeader+0x1e>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <ndefRecordEncodeHeader+0x22>
    {
        return ERR_PARAM;
 80056b2:	2307      	movs	r3, #7
 80056b4:	e06f      	b.n	8005796 <ndefRecordEncodeHeader+0x102>
    }

    if (bufHeader->length < NDEF_RECORD_HEADER_LEN)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d804      	bhi.n	80056c8 <ndefRecordEncodeHeader+0x34>
    {
        bufHeader->length = NDEF_RECORD_HEADER_LEN;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2207      	movs	r2, #7
 80056c2:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e066      	b.n	8005796 <ndefRecordEncodeHeader+0x102>
    }

    /* Start encoding the record */
    offset = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
    bufHeader->buffer[offset] = record->header;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	701a      	strb	r2, [r3, #0]
    offset++;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]

    /* Set Type length */
    bufHeader->buffer[offset] = record->typeLength;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	7852      	ldrb	r2, [r2, #1]
 80056ec:	701a      	strb	r2, [r3, #0]
    offset++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]

    /* Encode Payload length */
    payloadLength = ndefRecordGetPayloadLength(record);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f914 	bl	8005922 <ndefRecordGetPayloadLength>
 80056fa:	60b8      	str	r0, [r7, #8]

    if (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2bff      	cmp	r3, #255	; 0xff
 8005700:	d80a      	bhi.n	8005718 <ndefRecordEncodeHeader+0x84>
    {
        /* Short record */
        bufHeader->buffer[offset] = (uint8_t)payloadLength;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
        offset++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e02a      	b.n	800576e <ndefRecordEncodeHeader+0xda>
    }
    else
    {
        /* Standard record */
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 24);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	0e19      	lsrs	r1, r3, #24
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	b2ca      	uxtb	r2, r1
 8005726:	701a      	strb	r2, [r3, #0]
        offset++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 16);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	0c19      	lsrs	r1, r3, #16
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	b2ca      	uxtb	r2, r1
 800573c:	701a      	strb	r2, [r3, #0]
        offset++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength >> 8);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	0a19      	lsrs	r1, r3, #8
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	b2ca      	uxtb	r2, r1
 8005752:	701a      	strb	r2, [r3, #0]
        offset++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
        bufHeader->buffer[offset] = (uint8_t)(payloadLength);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
        offset++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
    }

    /* Encode Id length */
    if (ndefHeaderIsSetIL(record))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <ndefRecordEncodeHeader+0xfa>
    {
        bufHeader->buffer[offset] = record->idLength;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	7892      	ldrb	r2, [r2, #2]
 8005786:	701a      	strb	r2, [r3, #0]
        offset++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
    }

    bufHeader->length = offset;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <ndefRecordPayloadEncode>:


/*****************************************************************************/
static ReturnCode ndefRecordPayloadEncode(const ndefRecord* record, ndefBuffer* bufPayload)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b088      	sub	sp, #32
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;
    uint32_t offset;
    bool     begin;
    ndefConstBuffer bufPayloadItem;

    if ( (record == NULL) || (bufPayload == NULL) )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <ndefRecordPayloadEncode+0x16>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <ndefRecordPayloadEncode+0x1a>
    {
        return ERR_PROTO;
 80057b4:	230b      	movs	r3, #11
 80057b6:	e02f      	b.n	8005818 <ndefRecordPayloadEncode+0x7a>
    }

    payloadLength = ndefRecordGetPayloadLength(record);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8b2 	bl	8005922 <ndefRecordGetPayloadLength>
 80057be:	6178      	str	r0, [r7, #20]
    if (payloadLength > bufPayload->length)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d901      	bls.n	80057ce <ndefRecordPayloadEncode+0x30>
    {
        return ERR_NOMEM;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e024      	b.n	8005818 <ndefRecordPayloadEncode+0x7a>
    }

    begin  = true;
 80057ce:	2301      	movs	r3, #1
 80057d0:	76fb      	strb	r3, [r7, #27]
    offset = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 80057d6:	e011      	b.n	80057fc <ndefRecordPayloadEncode+0x5e>
    {
        begin = false;
 80057d8:	2300      	movs	r3, #0
 80057da:	76fb      	strb	r3, [r7, #27]
        if (bufPayloadItem.length > 0U)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <ndefRecordPayloadEncode+0x56>
        {
            ST_MEMCPY(&bufPayload->buffer[offset], bufPayloadItem.buffer, bufPayloadItem.length);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f016 fa5e 	bl	801bcb0 <memcpy>
        }
        offset += bufPayloadItem.length;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	61fb      	str	r3, [r7, #28]
    while (ndefRecordGetPayloadItem(record, &bufPayloadItem, begin) != NULL)
 80057fc:	7efa      	ldrb	r2, [r7, #27]
 80057fe:	f107 030c 	add.w	r3, r7, #12
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8af 	bl	8005968 <ndefRecordGetPayloadItem>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e3      	bne.n	80057d8 <ndefRecordPayloadEncode+0x3a>
    }

    bufPayload->length = offset;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <ndefRecordEncode>:


/*****************************************************************************/
ReturnCode ndefRecordEncode(const ndefRecord* record, ndefBuffer* bufRecord)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefBuffer bufHeader;
    ndefBuffer bufPayload;
    uint32_t   offset;

    if ( (record == NULL) || (bufRecord == NULL) || (bufRecord->buffer == NULL) )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <ndefRecordEncode+0x1e>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <ndefRecordEncode+0x1e>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <ndefRecordEncode+0x22>
    {
        return ERR_PARAM;
 800583e:	2307      	movs	r3, #7
 8005840:	e06b      	b.n	800591a <ndefRecordEncode+0xfa>
    }

    if (bufRecord->length < ndefRecordGetLength(record))
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685c      	ldr	r4, [r3, #4]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fce6 	bl	8005218 <ndefRecordGetLength>
 800584c:	4603      	mov	r3, r0
 800584e:	429c      	cmp	r4, r3
 8005850:	d207      	bcs.n	8005862 <ndefRecordEncode+0x42>
    {
        bufRecord->length = ndefRecordGetLength(record);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff fce0 	bl	8005218 <ndefRecordGetLength>
 8005858:	4602      	mov	r2, r0
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	605a      	str	r2, [r3, #4]
        return ERR_NOMEM;
 800585e:	2301      	movs	r3, #1
 8005860:	e05b      	b.n	800591a <ndefRecordEncode+0xfa>
    }

    /* Encode header at the begining of buffer provided */
    bufHeader.buffer = bufRecord->buffer;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	613b      	str	r3, [r7, #16]
    bufHeader.length = bufRecord->length;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	617b      	str	r3, [r7, #20]
    err = ndefRecordEncodeHeader(record, &bufHeader);
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ff0d 	bl	8005694 <ndefRecordEncodeHeader>
 800587a:	4603      	mov	r3, r0
 800587c:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 800587e:	8b7b      	ldrh	r3, [r7, #26]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <ndefRecordEncode+0x68>
    {
        return err;
 8005884:	8b7b      	ldrh	r3, [r7, #26]
 8005886:	e048      	b.n	800591a <ndefRecordEncode+0xfa>
    }

    offset = bufHeader.length;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	61fb      	str	r3, [r7, #28]

    /* Set Type */
    if (record->typeLength > 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d010      	beq.n	80058b6 <ndefRecordEncode+0x96>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->type, record->typeLength);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	18d0      	adds	r0, r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6859      	ldr	r1, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	461a      	mov	r2, r3
 80058a6:	f016 fa03 	bl	801bcb0 <memcpy>
        offset += record->typeLength;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	461a      	mov	r2, r3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	61fb      	str	r3, [r7, #28]
    }

    /* Set Id */
    if (record->idLength > 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	789b      	ldrb	r3, [r3, #2]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d010      	beq.n	80058e0 <ndefRecordEncode+0xc0>
    {
        (void)ST_MEMCPY(&bufRecord->buffer[offset], record->id, record->idLength);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	18d0      	adds	r0, r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6899      	ldr	r1, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	789b      	ldrb	r3, [r3, #2]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f016 f9ee 	bl	801bcb0 <memcpy>
        offset += record->idLength;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	789b      	ldrb	r3, [r3, #2]
 80058d8:	461a      	mov	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]
    }

    /* Set Payload */
    bufPayload.buffer = &bufRecord->buffer[offset];
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	60bb      	str	r3, [r7, #8]
    bufPayload.length =  bufRecord->length - offset;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	60fb      	str	r3, [r7, #12]
    err = ndefRecordPayloadEncode(record, &bufPayload);
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff ff4f 	bl	800579e <ndefRecordPayloadEncode>
 8005900:	4603      	mov	r3, r0
 8005902:	837b      	strh	r3, [r7, #26]
    if (err != ERR_NONE)
 8005904:	8b7b      	ldrh	r3, [r7, #26]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <ndefRecordEncode+0xee>
    {
        return err;
 800590a:	8b7b      	ldrh	r3, [r7, #26]
 800590c:	e005      	b.n	800591a <ndefRecordEncode+0xfa>
    }

    bufRecord->length = offset + bufPayload.length;
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	441a      	add	r2, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3724      	adds	r7, #36	; 0x24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd90      	pop	{r4, r7, pc}

08005922 <ndefRecordGetPayloadLength>:


/*****************************************************************************/
uint32_t ndefRecordGetPayloadLength(const ndefRecord* record)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
    uint32_t payloadLength;

    if (record == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <ndefRecordGetPayloadLength+0x12>
    {
        return 0;
 8005930:	2300      	movs	r3, #0
 8005932:	e015      	b.n	8005960 <ndefRecordGetPayloadLength+0x3e>
    }

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadLength != NULL) )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <ndefRecordGetPayloadLength+0x36>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <ndefRecordGetPayloadLength+0x36>
    {
        payloadLength = record->ndeftype->getPayloadLength(record->ndeftype);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6952      	ldr	r2, [r2, #20]
 8005950:	4610      	mov	r0, r2
 8005952:	4798      	blx	r3
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	e002      	b.n	800595e <ndefRecordGetPayloadLength+0x3c>
    }
    else
    {
        payloadLength = record->bufPayload.length;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	60fb      	str	r3, [r7, #12]
    }

    return payloadLength;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <ndefRecordGetPayloadItem>:


/*****************************************************************************/
const uint8_t* ndefRecordGetPayloadItem(const ndefRecord* record, ndefConstBuffer* bufPayloadItem, bool begin)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	71fb      	strb	r3, [r7, #7]
    if ( (record == NULL) || (bufPayloadItem == NULL) )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <ndefRecordGetPayloadItem+0x1a>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <ndefRecordGetPayloadItem+0x1e>
    {
        return NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	e020      	b.n	80059c8 <ndefRecordGetPayloadItem+0x60>
    }

    bufPayloadItem->buffer = NULL;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
    bufPayloadItem->length = 0;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	605a      	str	r2, [r3, #4]

    if ( (record->ndeftype != NULL) && (record->ndeftype->getPayloadItem != NULL) )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <ndefRecordGetPayloadItem+0x4e>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <ndefRecordGetPayloadItem+0x4e>
    {
        record->ndeftype->getPayloadItem(record->ndeftype, bufPayloadItem, begin);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	6950      	ldr	r0, [r2, #20]
 80059ae:	79fa      	ldrb	r2, [r7, #7]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	4798      	blx	r3
 80059b4:	e006      	b.n	80059c4 <ndefRecordGetPayloadItem+0x5c>
    }
    else
    {
        if (begin == true)
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <ndefRecordGetPayloadItem+0x5c>
        {
            (void)ndefRecordGetPayload(record, bufPayloadItem);
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fd4f 	bl	8005462 <ndefRecordGetPayload>
        }
    }

    return bufPayloadItem->buffer;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <ndefWifiPayloadGetLength>:
  */


/*****************************************************************************/
static uint32_t ndefWifiPayloadGetLength(const ndefType* wifi)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    const ndefTypeWifi* wifiData;
    uint32_t payloadLength;

    if ( (wifi == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <ndefWifiPayloadGetLength+0x16>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b07      	cmp	r3, #7
 80059e4:	d001      	beq.n	80059ea <ndefWifiPayloadGetLength+0x1a>
    {
        return 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e00a      	b.n	8005a00 <ndefWifiPayloadGetLength+0x30>
    }

    wifiData = &wifi->data.wifi;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	330c      	adds	r3, #12
 80059ee:	60fb      	str	r3, [r7, #12]

    payloadLength = sizeof(wifiConfigToken1)
                  + WIFI_SSID_TYPE_LENGTH    + wifiData->bufNetworkSSID.length
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685a      	ldr	r2, [r3, #4]
                  + sizeof(wifiConfigToken3)
                  + WIFI_SSID_KEY_TYPE_LENGTH + wifiData->bufNetworkKey.length
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4413      	add	r3, r2
    payloadLength = sizeof(wifiConfigToken1)
 80059fa:	3340      	adds	r3, #64	; 0x40
 80059fc:	60bb      	str	r3, [r7, #8]
                  + sizeof(wifiConfigToken5);

    return payloadLength;
 80059fe:	68bb      	ldr	r3, [r7, #8]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
	...

08005a0c <ndefWifiToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefWifiToPayloadItem(const ndefType* wifi, ndefConstBuffer* bufItem, bool begin)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b08b      	sub	sp, #44	; 0x2c
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeWifi* wifiData;
    uint16_t credentialLength;

    uint8_t defaultKey[4] = {0, 0, 0, 0};
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
    ndefConstBuffer8 bufDefaultNetworkKey = { defaultKey, sizeof(defaultKey) };
 8005a1e:	f107 0318 	add.w	r3, r7, #24
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	2304      	movs	r3, #4
 8005a26:	753b      	strb	r3, [r7, #20]

    const uint8_t CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX   =  7U;
 8005a28:	2307      	movs	r3, #7
 8005a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX =  5U;
 8005a2e:	2305      	movs	r3, #5
 8005a30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    const uint8_t CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX     = 11U;
 8005a34:	230b      	movs	r3, #11
 8005a36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    static uint8_t zero[] = { 0 };
    static ndefConstBuffer8 bufZero = { zero, sizeof(zero) };

    if ( (wifi    == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <ndefWifiToPayloadItem+0x42>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	d102      	bne.n	8005a4e <ndefWifiToPayloadItem+0x42>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <ndefWifiToPayloadItem+0x46>
         (bufItem == NULL) )
    {
        return NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e0b3      	b.n	8005bba <ndefWifiToPayloadItem+0x1ae>
    }

    wifiData = &wifi->data.wifi;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	330c      	adds	r3, #12
 8005a56:	623b      	str	r3, [r7, #32]

    if (begin == true)
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <ndefWifiToPayloadItem+0x58>
    {
        item = 0;
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <ndefWifiToPayloadItem+0x1b8>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	605a      	str	r2, [r3, #4]

    switch (item)
 8005a70:	4b54      	ldr	r3, [pc, #336]	; (8005bc4 <ndefWifiToPayloadItem+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	f200 8092 	bhi.w	8005b9e <ndefWifiToPayloadItem+0x192>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <ndefWifiToPayloadItem+0x74>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005aa5 	.word	0x08005aa5
 8005a84:	08005ae5 	.word	0x08005ae5
 8005a88:	08005af9 	.word	0x08005af9
 8005a8c:	08005b09 	.word	0x08005b09
 8005a90:	08005b1b 	.word	0x08005b1b
 8005a94:	08005b41 	.word	0x08005b41
 8005a98:	08005b55 	.word	0x08005b55
 8005a9c:	08005b67 	.word	0x08005b67
 8005aa0:	08005b91 	.word	0x08005b91

        /* Update Token1 with credential length */
        credentialLength = (uint16_t)(5U +                   /* Network index      */
                           2U +                              /* SSID type          */
                           2U +                              /* SSID key length    */
                           wifiData->bufNetworkSSID.length + /* SSID key           */
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	685b      	ldr	r3, [r3, #4]
                           sizeof(wifiConfigToken3) +        /* Token3 length      */
                           2U +                              /* Network key length */
 8005aa8:	b29a      	uxth	r2, r3
                           wifiData->bufNetworkKey.length +  /* Network key        */
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	68db      	ldr	r3, [r3, #12]
                           2U +                              /* Network key length */
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	b29b      	uxth	r3, r3
        credentialLength = (uint16_t)(5U +                   /* Network index      */
 8005ab4:	3337      	adds	r3, #55	; 0x37
 8005ab6:	83fb      	strh	r3, [r7, #30]
                           sizeof(wifiConfigToken5));        /* Token5 length      */

        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX]      = (uint8_t)(credentialLength >>    8U);
 8005ab8:	8bfb      	ldrh	r3, [r7, #30]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac2:	b2d1      	uxtb	r1, r2
 8005ac4:	4a40      	ldr	r2, [pc, #256]	; (8005bc8 <ndefWifiToPayloadItem+0x1bc>)
 8005ac6:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken1[CONFIG_TOKEN_1_CREDENTIAL_LENGTH_INDEX + 1U] = (uint8_t)(credentialLength  & 0xFFU);
 8005ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005acc:	3301      	adds	r3, #1
 8005ace:	8bfa      	ldrh	r2, [r7, #30]
 8005ad0:	b2d1      	uxtb	r1, r2
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <ndefWifiToPayloadItem+0x1bc>)
 8005ad4:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken1;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4a3b      	ldr	r2, [pc, #236]	; (8005bc8 <ndefWifiToPayloadItem+0x1bc>)
 8005ada:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken1);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2210      	movs	r2, #16
 8005ae0:	605a      	str	r2, [r3, #4]
        break;
 8005ae2:	e063      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 1:
        /* SSID Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 8005ae4:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <ndefWifiToPayloadItem+0x1c0>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 8005aec:	4b37      	ldr	r3, [pc, #220]	; (8005bcc <ndefWifiToPayloadItem+0x1c0>)
 8005aee:	791b      	ldrb	r3, [r3, #4]
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	605a      	str	r2, [r3, #4]
        break;
 8005af6:	e059      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 2:
        /* SSID Length (2nd byte) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkSSID.length;
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	1d1a      	adds	r2, r3, #4
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2201      	movs	r2, #1
 8005b04:	605a      	str	r2, [r3, #4]
        break;
 8005b06:	e051      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 3:
        /* SSID Value */
        bufItem->buffer = wifiData->bufNetworkSSID.buffer;
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	601a      	str	r2, [r3, #0]
        bufItem->length = wifiData->bufNetworkSSID.length;
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	605a      	str	r2, [r3, #4]
        break;
 8005b18:	e048      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 4:
        /* Config Token3 */

        /* Update Token3 with Autentication and Encryption Types */
        wifiConfigToken3[CONFIG_TOKEN_3_AUTHENTICATION_TYPE_INDEX] = wifiData->authentication;
 8005b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b1e:	6a3a      	ldr	r2, [r7, #32]
 8005b20:	7c11      	ldrb	r1, [r2, #16]
 8005b22:	4a2b      	ldr	r2, [pc, #172]	; (8005bd0 <ndefWifiToPayloadItem+0x1c4>)
 8005b24:	54d1      	strb	r1, [r2, r3]
        wifiConfigToken3[CONFIG_TOKEN_3_ENCRYPTION_TYPE_INDEX]     = wifiData->encryption;
 8005b26:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	7c51      	ldrb	r1, [r2, #17]
 8005b2e:	4a28      	ldr	r2, [pc, #160]	; (8005bd0 <ndefWifiToPayloadItem+0x1c4>)
 8005b30:	54d1      	strb	r1, [r2, r3]

        bufItem->buffer = wifiConfigToken3;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4a26      	ldr	r2, [pc, #152]	; (8005bd0 <ndefWifiToPayloadItem+0x1c4>)
 8005b36:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken3);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	220e      	movs	r2, #14
 8005b3c:	605a      	str	r2, [r3, #4]
        break;
 8005b3e:	e035      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 5:
        /* SSID Key Length (1st byte) */
        bufItem->buffer = bufZero.buffer;
 8005b40:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <ndefWifiToPayloadItem+0x1c0>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	601a      	str	r2, [r3, #0]
        bufItem->length = bufZero.length;
 8005b48:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <ndefWifiToPayloadItem+0x1c0>)
 8005b4a:	791b      	ldrb	r3, [r3, #4]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	605a      	str	r2, [r3, #4]
        break;
 8005b52:	e02b      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 6:
        /* SSID Key Length (2 bytes) */
        bufItem->buffer = (const uint8_t*)&wifiData->bufNetworkKey.length;
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	f103 020c 	add.w	r2, r3, #12
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	601a      	str	r2, [r3, #0]
        bufItem->length = 1U;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2201      	movs	r2, #1
 8005b62:	605a      	str	r2, [r3, #4]
        break;
 8005b64:	e022      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 7:
        /* SSID Key Value */
        if(wifiData->bufNetworkKey.length == 0U)
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d107      	bne.n	8005b7e <ndefWifiToPayloadItem+0x172>
        {
            /* Empty network key is not supported by Phones */
            bufItem->buffer = bufDefaultNetworkKey.buffer;
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDefaultNetworkKey.length;
 8005b74:	7d3b      	ldrb	r3, [r7, #20]
 8005b76:	461a      	mov	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	605a      	str	r2, [r3, #4]
        else
        {
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
            bufItem->length = wifiData->bufNetworkKey.length;
        }
        break;
 8005b7c:	e016      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>
            bufItem->buffer = wifiData->bufNetworkKey.buffer;
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	601a      	str	r2, [r3, #0]
            bufItem->length = wifiData->bufNetworkKey.length;
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	605a      	str	r2, [r3, #4]
        break;
 8005b8e:	e00d      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    case 8:
        /* Config Token5 */
        bufItem->buffer = wifiConfigToken5;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <ndefWifiToPayloadItem+0x1c8>)
 8005b94:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(wifiConfigToken5);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	221e      	movs	r2, #30
 8005b9a:	605a      	str	r2, [r3, #4]
        break;
 8005b9c:	e006      	b.n	8005bac <ndefWifiToPayloadItem+0x1a0>

    default:
        bufItem->buffer = NULL;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	605a      	str	r2, [r3, #4]
        break;
 8005baa:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <ndefWifiToPayloadItem+0x1b8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <ndefWifiToPayloadItem+0x1b8>)
 8005bb4:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	681b      	ldr	r3, [r3, #0]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	372c      	adds	r7, #44	; 0x2c
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	20002a78 	.word	0x20002a78
 8005bc8:	200000b0 	.word	0x200000b0
 8005bcc:	200000f0 	.word	0x200000f0
 8005bd0:	200000c0 	.word	0x200000c0
 8005bd4:	200000d0 	.word	0x200000d0

08005bd8 <ndefWifi>:


/*****************************************************************************/
ReturnCode ndefWifi(ndefType* wifi, const ndefTypeWifi* wifiConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
    ndefTypeWifi* wifiData;

    if ( (wifi == NULL) || (wifiConfig == NULL) )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <ndefWifi+0x16>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <ndefWifi+0x1a>
    {
        return ERR_PARAM;
 8005bee:	2307      	movs	r3, #7
 8005bf0:	e022      	b.n	8005c38 <ndefWifi+0x60>
    }

    wifi->id               = NDEF_TYPE_MEDIA_WIFI;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	701a      	strb	r2, [r3, #0]
    wifi->getPayloadLength = ndefWifiPayloadGetLength;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a12      	ldr	r2, [pc, #72]	; (8005c44 <ndefWifi+0x6c>)
 8005bfc:	605a      	str	r2, [r3, #4]
    wifi->getPayloadItem   = ndefWifiToPayloadItem;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <ndefWifi+0x70>)
 8005c02:	609a      	str	r2, [r3, #8]
    wifiData               = &wifi->data.wifi;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	330c      	adds	r3, #12
 8005c08:	60fb      	str	r3, [r7, #12]

    wifiData->bufNetworkSSID = wifiConfig->bufNetworkSSID;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c12:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->bufNetworkKey  = wifiConfig->bufNetworkKey;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	3208      	adds	r2, #8
 8005c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c22:	e883 0003 	stmia.w	r3, {r0, r1}
    wifiData->authentication = wifiConfig->authentication;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	7c1a      	ldrb	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	741a      	strb	r2, [r3, #16]
    wifiData->encryption     = wifiConfig->encryption;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	7c5a      	ldrb	r2, [r3, #17]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	080059d1 	.word	0x080059d1
 8005c48:	08005a0d 	.word	0x08005a0d

08005c4c <ndefGetWifi>:


/*****************************************************************************/
ReturnCode ndefGetWifi(const ndefType* wifi, ndefTypeWifi* wifiConfig)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
    const ndefTypeWifi* wifiData;

    if ( (wifi       == NULL) || (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d006      	beq.n	8005c6a <ndefGetWifi+0x1e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b07      	cmp	r3, #7
 8005c62:	d102      	bne.n	8005c6a <ndefGetWifi+0x1e>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <ndefGetWifi+0x22>
         (wifiConfig == NULL) )
    {
        return ERR_PARAM;
 8005c6a:	2307      	movs	r3, #7
 8005c6c:	e01b      	b.n	8005ca6 <ndefGetWifi+0x5a>
    }

    wifiData = &wifi->data.wifi;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	330c      	adds	r3, #12
 8005c72:	60fb      	str	r3, [r7, #12]

    wifiConfig->bufNetworkSSID.buffer = wifiData->bufNetworkSSID.buffer;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	601a      	str	r2, [r3, #0]
    wifiConfig->bufNetworkSSID.length = wifiData->bufNetworkSSID.length;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	605a      	str	r2, [r3, #4]
    wifiConfig->bufNetworkKey.buffer  = wifiData->bufNetworkKey.buffer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	609a      	str	r2, [r3, #8]
    wifiConfig->bufNetworkKey.length  = wifiData->bufNetworkKey.length;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	60da      	str	r2, [r3, #12]
    wifiConfig->authentication = wifiData->authentication;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	7c1a      	ldrb	r2, [r3, #16]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	741a      	strb	r2, [r3, #16]
    wifiConfig->encryption     = wifiData->encryption;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	7c5a      	ldrb	r2, [r3, #17]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	745a      	strb	r2, [r3, #17]

    return ERR_NONE;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <ndefPayloadToWifi>:


/*****************************************************************************/
static ReturnCode ndefPayloadToWifi(const ndefConstBuffer* bufPayload, ndefType* wifi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
    ndefTypeWifi wifiConfig;
    uint32_t offset;

    if ( (bufPayload == NULL) || (wifi == NULL) )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <ndefPayloadToWifi+0x16>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <ndefPayloadToWifi+0x1a>
    {
        return ERR_PARAM;
 8005cc6:	2307      	movs	r3, #7
 8005cc8:	e0a2      	b.n	8005e10 <ndefPayloadToWifi+0x160>
    }

    wifiConfig.bufNetworkSSID.buffer = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
    wifiConfig.bufNetworkSSID.length = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
    wifiConfig.bufNetworkKey.buffer  = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
    wifiConfig.bufNetworkKey.length  = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
    wifiConfig.authentication        = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	763b      	strb	r3, [r7, #24]
    wifiConfig.encryption            = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	767b      	strb	r3, [r7, #25]

    offset = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8005ce6:	e086      	b.n	8005df6 <ndefPayloadToWifi+0x146>
    {
        uint8_t attribute = bufPayload->buffer[offset];
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	4413      	add	r3, r2
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (attribute == NDEF_WIFI_ATTRIBUTE_ID_SSID_LSB)
 8005cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d178      	bne.n	8005df0 <ndefPayloadToWifi+0x140>
        {
            uint8_t data1   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_MSB_OFFSET];
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	3302      	adds	r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t data2   = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_LENGTH_LSB_OFFSET];
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	3303      	adds	r3, #3
 8005d16:	4413      	add	r3, r2
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            uint32_t length = ((uint32_t)data1 << 8U) | data2;
 8005d1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005d22:	021a      	lsls	r2, r3, #8
 8005d24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61fb      	str	r3, [r7, #28]

            switch (bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ID_OFFSET])
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	3301      	adds	r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b45      	cmp	r3, #69	; 0x45
 8005d3a:	d00a      	beq.n	8005d52 <ndefPayloadToWifi+0xa2>
 8005d3c:	2b45      	cmp	r3, #69	; 0x45
 8005d3e:	dc52      	bgt.n	8005de6 <ndefPayloadToWifi+0x136>
 8005d40:	2b27      	cmp	r3, #39	; 0x27
 8005d42:	d019      	beq.n	8005d78 <ndefPayloadToWifi+0xc8>
 8005d44:	2b27      	cmp	r3, #39	; 0x27
 8005d46:	dc4e      	bgt.n	8005de6 <ndefPayloadToWifi+0x136>
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d028      	beq.n	8005d9e <ndefPayloadToWifi+0xee>
 8005d4c:	2b0f      	cmp	r3, #15
 8005d4e:	d038      	beq.n	8005dc2 <ndefPayloadToWifi+0x112>
 8005d50:	e049      	b.n	8005de6 <ndefPayloadToWifi+0x136>
            {
            case NDEF_WIFI_ATTRIBUTE_ID_SSID_MSB:
                /* Network SSID */
                if (length > NDEF_WIFI_NETWORK_SSID_LENGTH)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d901      	bls.n	8005d5c <ndefPayloadToWifi+0xac>
                {
                    return ERR_PROTO;
 8005d58:	230b      	movs	r3, #11
 8005d5a:	e059      	b.n	8005e10 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkSSID.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	3304      	adds	r3, #4
 8005d64:	4413      	add	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
                wifiConfig.bufNetworkSSID.length = length;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	60fb      	str	r3, [r7, #12]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	4413      	add	r3, r2
 8005d72:	3304      	adds	r3, #4
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005d76:	e03e      	b.n	8005df6 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ID_NETWORK_MSB:
                /* Network key */
                if (length > NDEF_WIFI_NETWORK_KEY_LENGTH)
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d901      	bls.n	8005d82 <ndefPayloadToWifi+0xd2>
                {
                    return ERR_PROTO;
 8005d7e:	230b      	movs	r3, #11
 8005d80:	e046      	b.n	8005e10 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.bufNetworkKey.buffer = &bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_DATA_OFFSET];
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4413      	add	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
                wifiConfig.bufNetworkKey.length = length;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	617b      	str	r3, [r7, #20]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	4413      	add	r3, r2
 8005d98:	3304      	adds	r3, #4
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005d9c:	e02b      	b.n	8005df6 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_AUTHENTICATION:
                /* Authentication */
                if (length != NDEF_WIFI_AUTHENTICATION_TYPE_LENGTH)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d001      	beq.n	8005da8 <ndefPayloadToWifi+0xf8>
                {
                    return ERR_PROTO;
 8005da4:	230b      	movs	r3, #11
 8005da6:	e033      	b.n	8005e10 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.authentication = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_AUTHENTICATION_LSB_OFFSET];
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3305      	adds	r3, #5
 8005db0:	4413      	add	r3, r2
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	763b      	strb	r3, [r7, #24]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	4413      	add	r3, r2
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005dc0:	e019      	b.n	8005df6 <ndefPayloadToWifi+0x146>
            case NDEF_WIFI_ATTRIBUTE_ENCRYPTION:
                /* Encryption */
                if (length != NDEF_WIFI_ENCRYPTION_TYPE_LENGTH)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d001      	beq.n	8005dcc <ndefPayloadToWifi+0x11c>
                {
                    return ERR_PROTO;
 8005dc8:	230b      	movs	r3, #11
 8005dca:	e021      	b.n	8005e10 <ndefPayloadToWifi+0x160>
                }
                wifiConfig.encryption = bufPayload->buffer[offset + NDEF_WIFI_ATTRIBUTE_ENCRYPTION_LSB_OFFSET];
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	3305      	adds	r3, #5
 8005dd4:	4413      	add	r3, r2
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	767b      	strb	r3, [r7, #25]
                offset += (NDEF_WIFI_ATTRIBUTE_DATA_OFFSET + length);
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	4413      	add	r3, r2
 8005de0:	3304      	adds	r3, #4
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005de4:	e007      	b.n	8005df6 <ndefPayloadToWifi+0x146>
            default:
                offset++;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	3301      	adds	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8005dec:	bf00      	nop
 8005dee:	e002      	b.n	8005df6 <ndefPayloadToWifi+0x146>
            }
        }
        else
        {
            offset++;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	3301      	adds	r3, #1
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
    while (offset < bufPayload->length)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	f4ff af73 	bcc.w	8005ce8 <ndefPayloadToWifi+0x38>
        }
    }

    return ndefWifi(wifi, &wifiConfig);
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	4619      	mov	r1, r3
 8005e08:	6838      	ldr	r0, [r7, #0]
 8005e0a:	f7ff fee5 	bl	8005bd8 <ndefWifi>
 8005e0e:	4603      	mov	r3, r0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3728      	adds	r7, #40	; 0x28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <ndefRecordToWifi>:


/*****************************************************************************/
ReturnCode ndefRecordToWifi(const ndefRecord* record, ndefType* wifi)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (wifi == NULL) )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <ndefRecordToWifi+0x16>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <ndefRecordToWifi+0x1a>
    {
        return ERR_PARAM;
 8005e2e:	2307      	movs	r3, #7
 8005e30:	e022      	b.n	8005e78 <ndefRecordToWifi+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi)) /* "application/vnd.wfa.wsc" */
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <ndefRecordToWifi+0x68>)
 8005e34:	2102      	movs	r1, #2
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fa5c 	bl	80052f4 <ndefRecordTypeMatch>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f083 0301 	eor.w	r3, r3, #1
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <ndefRecordToWifi+0x34>
    {
        return ERR_PROTO;
 8005e48:	230b      	movs	r3, #11
 8005e4a:	e015      	b.n	8005e78 <ndefRecordToWifi+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f95d 	bl	800610c <ndefRecordGetNdefType>
 8005e52:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <ndefRecordToWifi+0x52>
    {
        (void)ST_MEMCPY(wifi, ndeftype, sizeof(ndefType));
 8005e5a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f015 ff25 	bl	801bcb0 <memcpy>
        return ERR_NONE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e006      	b.n	8005e78 <ndefRecordToWifi+0x60>
    }

    return ndefPayloadToWifi(&record->bufPayload, wifi);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff ff1d 	bl	8005cb0 <ndefPayloadToWifi>
 8005e76:	4603      	mov	r3, r0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	0801e4b0 	.word	0x0801e4b0

08005e84 <ndefWifiToRecord>:


/*****************************************************************************/
ReturnCode ndefWifiToRecord(const ndefType* wifi, ndefRecord* record)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
    if ( (wifi   == NULL) ||  (wifi->id != NDEF_TYPE_MEDIA_WIFI) ||
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <ndefWifiToRecord+0x1e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	d102      	bne.n	8005ea2 <ndefWifiToRecord+0x1e>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <ndefWifiToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8005ea2:	2307      	movs	r3, #7
 8005ea4:	e00c      	b.n	8005ec0 <ndefWifiToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f7ff f94e 	bl	8005148 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeWifi);
 8005eac:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <ndefWifiToRecord+0x44>)
 8005eae:	2102      	movs	r1, #2
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f7ff f9ca 	bl	800524a <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, wifi);
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	6838      	ldr	r0, [r7, #0]
 8005eba:	f000 f8ef 	bl	800609c <ndefRecordSetNdefType>

    return ERR_NONE;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	0801e4b0 	.word	0x0801e4b0

08005ecc <ndefTypeStringToTypeId>:
 */


/*****************************************************************************/
static ReturnCode ndefTypeStringToTypeId(uint8_t tnf, const ndefConstBuffer8* bufTypeString, ndefTypeId* typeId)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	73fb      	strb	r3, [r7, #15]
        { NDEF_TYPE_MEDIA_WIFI,      NDEF_TNF_MEDIA_TYPE,          &bufMediaTypeWifi          },
    };

    uint32_t i;

    if ( (bufTypeString == NULL) || (typeId == NULL) )
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <ndefTypeStringToTypeId+0x1a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <ndefTypeStringToTypeId+0x1e>
    {
        return ERR_PROTO;
 8005ee6:	230b      	movs	r3, #11
 8005ee8:	e03f      	b.n	8005f6a <ndefTypeStringToTypeId+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e038      	b.n	8005f62 <ndefTypeStringToTypeId+0x96>
    {
        /* Check TNF and length are the same, then compare the content */
        if (typeTable[i].tnf == tnf)
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <ndefTypeStringToTypeId+0xa8>)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	7bfa      	ldrb	r2, [r7, #15]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d12d      	bne.n	8005f5c <ndefTypeStringToTypeId+0x90>
        {
            if (bufTypeString->length == typeTable[i].bufTypeString->length)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	791a      	ldrb	r2, [r3, #4]
 8005f04:	491b      	ldr	r1, [pc, #108]	; (8005f74 <ndefTypeStringToTypeId+0xa8>)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	440b      	add	r3, r1
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	791b      	ldrb	r3, [r3, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d123      	bne.n	8005f5c <ndefTypeStringToTypeId+0x90>
            {
                if (bufTypeString->length == 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d107      	bne.n	8005f2c <ndefTypeStringToTypeId+0x60>
                {
                    /* Empty type */
                    *typeId = typeTable[i].typeId;
 8005f1c:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <ndefTypeStringToTypeId+0xa8>)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	701a      	strb	r2, [r3, #0]
                    return ERR_NONE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e01e      	b.n	8005f6a <ndefTypeStringToTypeId+0x9e>
                }
                else
                {
                    if (ST_BYTECMP(typeTable[i].bufTypeString->buffer, bufTypeString->buffer, bufTypeString->length) == 0)
 8005f2c:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <ndefTypeStringToTypeId+0xa8>)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6819      	ldr	r1, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	791b      	ldrb	r3, [r3, #4]
 8005f40:	461a      	mov	r2, r3
 8005f42:	f015 fea7 	bl	801bc94 <memcmp>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d107      	bne.n	8005f5c <ndefTypeStringToTypeId+0x90>
                    {
                        *typeId = typeTable[i].typeId;
 8005f4c:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <ndefTypeStringToTypeId+0xa8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	701a      	strb	r2, [r3, #0]
                        return ERR_NONE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e006      	b.n	8005f6a <ndefTypeStringToTypeId+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeTable); i++)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b06      	cmp	r3, #6
 8005f66:	d9c3      	bls.n	8005ef0 <ndefTypeStringToTypeId+0x24>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 8005f68:	2316      	movs	r3, #22
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	0801e50c 	.word	0x0801e50c

08005f78 <ndefRecordTypeStringToTypeId>:


/*****************************************************************************/
ReturnCode ndefRecordTypeStringToTypeId(const ndefRecord* record, ndefTypeId* typeId)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
    ReturnCode err;

    uint8_t          tnf;
    ndefConstBuffer8 bufRecordType;

    if ( (record == NULL) || (typeId == NULL) )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <ndefRecordTypeStringToTypeId+0x16>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <ndefRecordTypeStringToTypeId+0x1a>
    {
        return ERR_PARAM;
 8005f8e:	2307      	movs	r3, #7
 8005f90:	e029      	b.n	8005fe6 <ndefRecordTypeStringToTypeId+0x6e>
    }

    err = ndefRecordGetType(record, &tnf, &bufRecordType);
 8005f92:	f107 020c 	add.w	r2, r7, #12
 8005f96:	f107 0315 	add.w	r3, r7, #21
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff f983 	bl	80052a8 <ndefRecordGetType>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	82fb      	strh	r3, [r7, #22]
    if (err != ERR_NONE)
 8005fa6:	8afb      	ldrh	r3, [r7, #22]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <ndefRecordTypeStringToTypeId+0x38>
    {
        return err;
 8005fac:	8afb      	ldrh	r3, [r7, #22]
 8005fae:	e01a      	b.n	8005fe6 <ndefRecordTypeStringToTypeId+0x6e>
    }
    if (tnf >= NDEF_TNF_RESERVED)
 8005fb0:	7d7b      	ldrb	r3, [r7, #21]
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d901      	bls.n	8005fba <ndefRecordTypeStringToTypeId+0x42>
    {
        return ERR_INTERNAL;
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	e015      	b.n	8005fe6 <ndefRecordTypeStringToTypeId+0x6e>
    }

    switch (tnf)
 8005fba:	7d7b      	ldrb	r3, [r7, #21]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	dc02      	bgt.n	8005fc6 <ndefRecordTypeStringToTypeId+0x4e>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da02      	bge.n	8005fca <ndefRecordTypeStringToTypeId+0x52>
 8005fc4:	e00b      	b.n	8005fde <ndefRecordTypeStringToTypeId+0x66>
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d109      	bne.n	8005fde <ndefRecordTypeStringToTypeId+0x66>
    {
    case NDEF_TNF_EMPTY:               /* Fall through */
    case NDEF_TNF_RTD_WELL_KNOWN_TYPE: /* Fall through */
    case NDEF_TNF_RTD_EXTERNAL_TYPE:   /* Fall through */
    case NDEF_TNF_MEDIA_TYPE:          /* Fall through */
        err = ndefTypeStringToTypeId(tnf, &bufRecordType, typeId);
 8005fca:	7d7b      	ldrb	r3, [r7, #21]
 8005fcc:	f107 010c 	add.w	r1, r7, #12
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff ff7a 	bl	8005ecc <ndefTypeStringToTypeId>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	82fb      	strh	r3, [r7, #22]
        break;
 8005fdc:	e002      	b.n	8005fe4 <ndefRecordTypeStringToTypeId+0x6c>
    default:
        err = ERR_NOT_IMPLEMENTED;
 8005fde:	230f      	movs	r3, #15
 8005fe0:	82fb      	strh	r3, [r7, #22]
        break;
 8005fe2:	bf00      	nop
    }

    return err;
 8005fe4:	8afb      	ldrh	r3, [r7, #22]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <ndefRecordToType>:


/*****************************************************************************/
ReturnCode ndefRecordToType(const ndefRecord* record, ndefType* type)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;
    ReturnCode err;
    ndefTypeId typeId;
    uint32_t   i;

    ndeftype = ndefRecordGetNdefType(record);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f886 	bl	800610c <ndefRecordGetNdefType>
 8006000:	6138      	str	r0, [r7, #16]
    if (ndeftype != NULL)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <ndefRecordToType+0x28>
    {
        /* Return the well-known type contained in the record */
        (void)ST_MEMCPY(type, ndeftype, sizeof(ndefType));
 8006008:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800600c:	6939      	ldr	r1, [r7, #16]
 800600e:	6838      	ldr	r0, [r7, #0]
 8006010:	f015 fe4e 	bl	801bcb0 <memcpy>
        return ERR_NONE;
 8006014:	2300      	movs	r3, #0
 8006016:	e03a      	b.n	800608e <ndefRecordToType+0x9e>
    }

    err = ndefRecordTypeStringToTypeId(record, &typeId);
 8006018:	f107 030d 	add.w	r3, r7, #13
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff ffaa 	bl	8005f78 <ndefRecordTypeStringToTypeId>
 8006024:	4603      	mov	r3, r0
 8006026:	81fb      	strh	r3, [r7, #14]
    if (err != ERR_NONE)
 8006028:	89fb      	ldrh	r3, [r7, #14]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <ndefRecordToType+0x42>
    {
        return err;
 800602e:	89fb      	ldrh	r3, [r7, #14]
 8006030:	e02d      	b.n	800608e <ndefRecordToType+0x9e>
    }

    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	e026      	b.n	8006086 <ndefRecordToType+0x96>
    {
        if (typeId == typeConverterTable[i].typeId)
 8006038:	4917      	ldr	r1, [pc, #92]	; (8006098 <ndefRecordToType+0xa8>)
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4613      	mov	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	7b7b      	ldrb	r3, [r7, #13]
 800604a:	429a      	cmp	r2, r3
 800604c:	d118      	bne.n	8006080 <ndefRecordToType+0x90>
        {
            /* Call the appropriate function to the matching type */
            if (typeConverterTable[i].recordToType != NULL)
 800604e:	4912      	ldr	r1, [pc, #72]	; (8006098 <ndefRecordToType+0xa8>)
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4613      	mov	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3304      	adds	r3, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00d      	beq.n	8006080 <ndefRecordToType+0x90>
            {
                return typeConverterTable[i].recordToType(record, type);
 8006064:	490c      	ldr	r1, [pc, #48]	; (8006098 <ndefRecordToType+0xa8>)
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4613      	mov	r3, r2
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	3304      	adds	r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	4603      	mov	r3, r0
 800607e:	e006      	b.n	800608e <ndefRecordToType+0x9e>
    for (i = 0; i < SIZEOF_ARRAY(typeConverterTable); i++)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3301      	adds	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b06      	cmp	r3, #6
 800608a:	d9d5      	bls.n	8006038 <ndefRecordToType+0x48>
            }
        }
    }

    return ERR_NOT_IMPLEMENTED;
 800608c:	230f      	movs	r3, #15
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	0801e4b8 	.word	0x0801e4b8

0800609c <ndefRecordSetNdefType>:
}


/*****************************************************************************/
ReturnCode ndefRecordSetNdefType(ndefRecord* record, const ndefType* type)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
    uint32_t payloadLength;

    if ( (record == NULL) ||
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00e      	beq.n	80060ca <ndefRecordSetNdefType+0x2e>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <ndefRecordSetNdefType+0x2e>
         (type                   == NULL)               ||
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
         (type                   == NULL)               ||
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d807      	bhi.n	80060ca <ndefRecordSetNdefType+0x2e>
         (type->getPayloadLength == NULL)               ||
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
         (type->id                > NDEF_TYPE_ID_COUNT) ||
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <ndefRecordSetNdefType+0x2e>
         (type->getPayloadItem   == NULL) )
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
         (type->getPayloadLength == NULL)               ||
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <ndefRecordSetNdefType+0x32>
    {
        return ERR_PARAM;
 80060ca:	2307      	movs	r3, #7
 80060cc:	e01a      	b.n	8006104 <ndefRecordSetNdefType+0x68>
    }

    record->ndeftype = type;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	615a      	str	r2, [r3, #20]

    /* Set Short Record bit accordingly */
    payloadLength = ndefRecordGetPayloadLength(record);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff fc24 	bl	8005922 <ndefRecordGetPayloadLength>
 80060da:	60f8      	str	r0, [r7, #12]
    ndefHeaderSetValueSR(record, (payloadLength <= NDEF_SHORT_RECORD_LENGTH_MAX) ? 1 : 0);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f023 0310 	bic.w	r3, r3, #16
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	2aff      	cmp	r2, #255	; 0xff
 80060f2:	d801      	bhi.n	80060f8 <ndefRecordSetNdefType+0x5c>
 80060f4:	2210      	movs	r2, #16
 80060f6:	e000      	b.n	80060fa <ndefRecordSetNdefType+0x5e>
 80060f8:	2200      	movs	r2, #0
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	701a      	strb	r2, [r3, #0]

    return ERR_NONE;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <ndefRecordGetNdefType>:


/*****************************************************************************/
const ndefType* ndefRecordGetNdefType(const ndefRecord* record)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
    if (record == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <ndefRecordGetNdefType+0x12>
    {
        return NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	e016      	b.n	800614c <ndefRecordGetNdefType+0x40>
    }

    if (record->ndeftype != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d011      	beq.n	800614a <ndefRecordGetNdefType+0x3e>
    {
        /* Check whether it is a valid NDEF type */
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b07      	cmp	r3, #7
 800612e:	d80c      	bhi.n	800614a <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadItem   != NULL) &&
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	689b      	ldr	r3, [r3, #8]
        if ( (record->ndeftype->id                < NDEF_TYPE_ID_COUNT) &&
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <ndefRecordGetNdefType+0x3e>
             (record->ndeftype->getPayloadLength != NULL) )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	685b      	ldr	r3, [r3, #4]
             (record->ndeftype->getPayloadItem   != NULL) &&
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <ndefRecordGetNdefType+0x3e>
        {
            return record->ndeftype;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	e000      	b.n	800614c <ndefRecordGetNdefType+0x40>
        }
    }

    return NULL;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <ndefVCardPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefVCardPayloadGetLength(const ndefType* vCard)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
    const ndefTypeVCard* vCardData;
    uint32_t payloadLength = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (vCard == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <ndefVCardPayloadGetLength+0x1a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b06      	cmp	r3, #6
 800616e:	d001      	beq.n	8006174 <ndefVCardPayloadGetLength+0x1e>
    {
        return 0;
 8006170:	2300      	movs	r3, #0
 8006172:	e06e      	b.n	8006252 <ndefVCardPayloadGetLength+0xfc>
    }

    vCardData = &vCard->data.vCard;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	330c      	adds	r3, #12
 8006178:	60fb      	str	r3, [r7, #12]

    payloadLength += bufTypeBegin.length;
 800617a:	2205      	movs	r2, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 8006182:	2201      	movs	r2, #1
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 800618a:	2205      	movs	r2, #5
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	4413      	add	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 8006192:	2202      	movs	r2, #2
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4413      	add	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

    payloadLength += bufTypeVersion.length;
 800619a:	2207      	movs	r2, #7
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 80061a2:	2201      	movs	r2, #1
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    payloadLength += bufValue_2_1.length;
 80061aa:	2203      	movs	r2, #3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterNewLine.length;
 80061b2:	2202      	movs	r2, #2
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

    i = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 80061be:	e034      	b.n	800622a <ndefVCardPayloadGetLength+0xd4>
    {
        payloadLength += vCardData->entry[i].bufTypeLength;
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4413      	add	r3, r2
 80061c8:	330c      	adds	r3, #12
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]

        if (vCardData->entry[i].bufSubTypeBuffer != NULL)
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	4413      	add	r3, r2
 80061dc:	3304      	adds	r3, #4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <ndefVCardPayloadGetLength+0xaa>
        {
            payloadLength += bufDelimiterSemicolon.length;
 80061e4:	2201      	movs	r2, #1
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
            payloadLength += vCardData->entry[i].bufSubTypeLength;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	4413      	add	r3, r2
 80061f4:	330d      	adds	r3, #13
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
        }

        payloadLength += bufDelimiterColon.length;
 8006200:	2201      	movs	r2, #1
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

        payloadLength += vCardData->entry[i].bufValueLength;
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	4413      	add	r3, r2
 8006210:	330e      	adds	r3, #14
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
        payloadLength += bufDelimiterNewLine.length;
 800621c:	2202      	movs	r2, #2
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	4413      	add	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

        i++;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	3301      	adds	r3, #1
 8006228:	613b      	str	r3, [r7, #16]
    while (vCardData->entry[i].bufTypeBuffer != NULL)
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	4413      	add	r3, r2
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1c3      	bne.n	80061c0 <ndefVCardPayloadGetLength+0x6a>
    }

    payloadLength += bufTypeEnd.length;
 8006238:	2203      	movs	r2, #3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    payloadLength += bufDelimiterColon.length;
 8006240:	2201      	movs	r2, #1
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4413      	add	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
    payloadLength += bufValueVCard.length;
 8006248:	2205      	movs	r2, #5
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
    /* No New line after "END:VCARD" */

    return payloadLength;
 8006250:	697b      	ldr	r3, [r7, #20]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <ndefVCardToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefVCardToPayloadItem(const ndefType* vCard, ndefConstBuffer* bufItem, bool begin)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	71fb      	strb	r3, [r7, #7]
    static uint32_t item     = 0;
    static uint32_t userItem = 0;
    static uint32_t index    = 0;
    const ndefTypeVCard* vCardData;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d006      	beq.n	800627e <ndefVCardToPayloadItem+0x22>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b06      	cmp	r3, #6
 8006276:	d102      	bne.n	800627e <ndefVCardToPayloadItem+0x22>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <ndefVCardToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	e17f      	b.n	8006582 <ndefVCardToPayloadItem+0x326>
    }

    vCardData = &vCard->data.vCard;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	330c      	adds	r3, #12
 8006286:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <ndefVCardToPayloadItem+0x44>
    {
        item     = 0;
 800628e:	4b8c      	ldr	r3, [pc, #560]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
        userItem = 0;
 8006294:	4b8b      	ldr	r3, [pc, #556]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
        index    = 0;
 800629a:	4b8b      	ldr	r3, [pc, #556]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2200      	movs	r2, #0
 80062aa:	605a      	str	r2, [r3, #4]

    /* Check for for empty vCard */
    if (vCardData->entry[0].bufTypeBuffer == NULL)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <ndefVCardToPayloadItem+0x5c>
    {
        return NULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e164      	b.n	8006582 <ndefVCardToPayloadItem+0x326>
    }

    switch (item)
 80062b8:	4b81      	ldr	r3, [pc, #516]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b0a      	cmp	r3, #10
 80062be:	f200 8157 	bhi.w	8006570 <ndefVCardToPayloadItem+0x314>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <ndefVCardToPayloadItem+0x6c>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	0800630d 	.word	0x0800630d
 80062d0:	08006325 	.word	0x08006325
 80062d4:	0800633d 	.word	0x0800633d
 80062d8:	08006355 	.word	0x08006355
 80062dc:	0800636d 	.word	0x0800636d
 80062e0:	08006385 	.word	0x08006385
 80062e4:	0800639d 	.word	0x0800639d
 80062e8:	080063c1 	.word	0x080063c1
 80062ec:	08006541 	.word	0x08006541
 80062f0:	08006559 	.word	0x08006559
    {
    /* BEGIN:VCARD\r\n */
    case 0:
        bufItem->buffer = bufTypeBegin.buffer;
 80062f4:	4a75      	ldr	r2, [pc, #468]	; (80064cc <ndefVCardToPayloadItem+0x270>)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeBegin.length;
 80062fa:	2205      	movs	r2, #5
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006300:	4b6f      	ldr	r3, [pc, #444]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3301      	adds	r3, #1
 8006306:	4a6e      	ldr	r2, [pc, #440]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006308:	6013      	str	r3, [r2, #0]
        break;
 800630a:	e138      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 1:
        bufItem->buffer = bufDelimiterColon.buffer;
 800630c:	4a70      	ldr	r2, [pc, #448]	; (80064d0 <ndefVCardToPayloadItem+0x274>)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8006312:	2201      	movs	r2, #1
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006318:	4b69      	ldr	r3, [pc, #420]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	4a68      	ldr	r2, [pc, #416]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006320:	6013      	str	r3, [r2, #0]
        break;
 8006322:	e12c      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 2:
        bufItem->buffer = bufValueVCard.buffer;
 8006324:	4a6b      	ldr	r2, [pc, #428]	; (80064d4 <ndefVCardToPayloadItem+0x278>)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 800632a:	2205      	movs	r2, #5
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006330:	4b63      	ldr	r3, [pc, #396]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	4a62      	ldr	r2, [pc, #392]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006338:	6013      	str	r3, [r2, #0]
        break;
 800633a:	e120      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 3:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 800633c:	4a66      	ldr	r2, [pc, #408]	; (80064d8 <ndefVCardToPayloadItem+0x27c>)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 8006342:	2202      	movs	r2, #2
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006348:	4b5d      	ldr	r3, [pc, #372]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	4a5c      	ldr	r2, [pc, #368]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006350:	6013      	str	r3, [r2, #0]
        break;
 8006352:	e114      	b.n	800657e <ndefVCardToPayloadItem+0x322>

    /* VERSION:2.1\r\n */
    case 4:
        bufItem->buffer = bufTypeVersion.buffer;
 8006354:	4a61      	ldr	r2, [pc, #388]	; (80064dc <ndefVCardToPayloadItem+0x280>)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	601a      	str	r2, [r3, #0]
        bufItem->length = bufTypeVersion.length;
 800635a:	2207      	movs	r2, #7
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006360:	4b57      	ldr	r3, [pc, #348]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a56      	ldr	r2, [pc, #344]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006368:	6013      	str	r3, [r2, #0]
        break;
 800636a:	e108      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 5:
        bufItem->buffer = bufDelimiterColon.buffer;
 800636c:	4a58      	ldr	r2, [pc, #352]	; (80064d0 <ndefVCardToPayloadItem+0x274>)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8006372:	2201      	movs	r2, #1
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006378:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	4a50      	ldr	r2, [pc, #320]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006380:	6013      	str	r3, [r2, #0]
        break;
 8006382:	e0fc      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 6:
        bufItem->buffer = bufValue_2_1.buffer;
 8006384:	4a56      	ldr	r2, [pc, #344]	; (80064e0 <ndefVCardToPayloadItem+0x284>)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValue_2_1.length;
 800638a:	2203      	movs	r2, #3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006390:	4b4b      	ldr	r3, [pc, #300]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a4a      	ldr	r2, [pc, #296]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006398:	6013      	str	r3, [r2, #0]
        break;
 800639a:	e0f0      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 7:
        bufItem->buffer = bufDelimiterNewLine.buffer;
 800639c:	4a4e      	ldr	r2, [pc, #312]	; (80064d8 <ndefVCardToPayloadItem+0x27c>)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterNewLine.length;
 80063a2:	2202      	movs	r2, #2
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 80063a8:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	4a44      	ldr	r2, [pc, #272]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 80063b0:	6013      	str	r3, [r2, #0]
        userItem = 0;
 80063b2:	4b44      	ldr	r3, [pc, #272]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
        index    = 0;
 80063b8:	4b43      	ldr	r3, [pc, #268]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
        break;
 80063be:	e0de      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 8:
        /* User data */
        switch (userItem)
 80063c0:	4b40      	ldr	r3, [pc, #256]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b05      	cmp	r3, #5
 80063c6:	f200 80b9 	bhi.w	800653c <ndefVCardToPayloadItem+0x2e0>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <ndefVCardToPayloadItem+0x174>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063e9 	.word	0x080063e9
 80063d4:	0800645f 	.word	0x0800645f
 80063d8:	08006477 	.word	0x08006477
 80063dc:	080064a9 	.word	0x080064a9
 80063e0:	080064ed 	.word	0x080064ed
 80063e4:	0800651f 	.word	0x0800651f
        {
        case 0:
            /* Type */
            if (vCardData->entry[index].bufTypeBuffer == NULL)
 80063e8:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	4413      	add	r3, r2
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <ndefVCardToPayloadItem+0x1b4>
            {
                bufItem->buffer = bufTypeEnd.buffer;
 80063f8:	4a3a      	ldr	r2, [pc, #232]	; (80064e4 <ndefVCardToPayloadItem+0x288>)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	601a      	str	r2, [r3, #0]
                bufItem->length = bufTypeEnd.length;
 80063fe:	2203      	movs	r2, #3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	605a      	str	r2, [r3, #4]
                item++; /* Exit the user item loop */
 8006404:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a2d      	ldr	r2, [pc, #180]	; (80064c0 <ndefVCardToPayloadItem+0x264>)
 800640c:	6013      	str	r3, [r2, #0]
                break;
 800640e:	e096      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
            }
            bufItem->buffer = vCardData->entry[index].bufTypeBuffer;
 8006410:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	4413      	add	r3, r2
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufTypeLength;
 8006420:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	4413      	add	r3, r2
 800642a:	330c      	adds	r3, #12
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	605a      	str	r2, [r3, #4]

            if (vCardData->entry[index].bufSubTypeBuffer != NULL)
 8006434:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	4413      	add	r3, r2
 800643e:	3304      	adds	r3, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <ndefVCardToPayloadItem+0x1f6>
            {
                userItem++;
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 800644e:	6013      	str	r3, [r2, #0]
            }
            else
            {
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
            }
            break;
 8006450:	e075      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
                userItem += 3U; /* Skip sending semicolon and subtype, move to colon */
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3303      	adds	r3, #3
 8006458:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 800645a:	6013      	str	r3, [r2, #0]
            break;
 800645c:	e06f      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
        case 1:
            bufItem->buffer = bufDelimiterSemicolon.buffer;
 800645e:	4a22      	ldr	r2, [pc, #136]	; (80064e8 <ndefVCardToPayloadItem+0x28c>)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterSemicolon.length;
 8006464:	2201      	movs	r2, #1
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	605a      	str	r2, [r3, #4]
            userItem++;
 800646a:	4b16      	ldr	r3, [pc, #88]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 8006472:	6013      	str	r3, [r2, #0]
            break;
 8006474:	e063      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
        case 2:
            /* Subtype */
            bufItem->buffer = vCardData->entry[index].bufSubTypeBuffer;
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	4413      	add	r3, r2
 8006480:	3304      	adds	r3, #4
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufSubTypeLength;
 8006488:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <ndefVCardToPayloadItem+0x26c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	4413      	add	r3, r2
 8006492:	330d      	adds	r3, #13
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	605a      	str	r2, [r3, #4]
            userItem++;
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 80064a4:	6013      	str	r3, [r2, #0]
            break;
 80064a6:	e04a      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
        case 3:
            bufItem->buffer = bufDelimiterColon.buffer;
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <ndefVCardToPayloadItem+0x274>)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterColon.length;
 80064ae:	2201      	movs	r2, #1
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	605a      	str	r2, [r3, #4]
            userItem++;
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	4a02      	ldr	r2, [pc, #8]	; (80064c4 <ndefVCardToPayloadItem+0x268>)
 80064bc:	6013      	str	r3, [r2, #0]
            break;
 80064be:	e03e      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
 80064c0:	20002a80 	.word	0x20002a80
 80064c4:	20002a84 	.word	0x20002a84
 80064c8:	20002a88 	.word	0x20002a88
 80064cc:	0801e584 	.word	0x0801e584
 80064d0:	0801e560 	.word	0x0801e560
 80064d4:	0801e598 	.word	0x0801e598
 80064d8:	0801e568 	.word	0x0801e568
 80064dc:	0801e590 	.word	0x0801e590
 80064e0:	0801e5a0 	.word	0x0801e5a0
 80064e4:	0801e58c 	.word	0x0801e58c
 80064e8:	0801e564 	.word	0x0801e564
        case 4:
            /* Value */
            bufItem->buffer = vCardData->entry[index].bufValueBuffer;
 80064ec:	4b27      	ldr	r3, [pc, #156]	; (800658c <ndefVCardToPayloadItem+0x330>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4413      	add	r3, r2
 80064f6:	3308      	adds	r3, #8
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	601a      	str	r2, [r3, #0]
            bufItem->length = vCardData->entry[index].bufValueLength;
 80064fe:	4b23      	ldr	r3, [pc, #140]	; (800658c <ndefVCardToPayloadItem+0x330>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	4413      	add	r3, r2
 8006508:	330e      	adds	r3, #14
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	605a      	str	r2, [r3, #4]
            userItem++;
 8006512:	4b1f      	ldr	r3, [pc, #124]	; (8006590 <ndefVCardToPayloadItem+0x334>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <ndefVCardToPayloadItem+0x334>)
 800651a:	6013      	str	r3, [r2, #0]
            break;
 800651c:	e00f      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
        case 5:
            bufItem->buffer = bufDelimiterNewLine.buffer;
 800651e:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <ndefVCardToPayloadItem+0x338>)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	601a      	str	r2, [r3, #0]
            bufItem->length = bufDelimiterNewLine.length;
 8006524:	2202      	movs	r2, #2
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	605a      	str	r2, [r3, #4]
            index++;
 800652a:	4b18      	ldr	r3, [pc, #96]	; (800658c <ndefVCardToPayloadItem+0x330>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3301      	adds	r3, #1
 8006530:	4a16      	ldr	r2, [pc, #88]	; (800658c <ndefVCardToPayloadItem+0x330>)
 8006532:	6013      	str	r3, [r2, #0]
            userItem = 0; /* Looping to case 0 */
 8006534:	4b16      	ldr	r3, [pc, #88]	; (8006590 <ndefVCardToPayloadItem+0x334>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
            break;
 800653a:	e000      	b.n	800653e <ndefVCardToPayloadItem+0x2e2>
        default:
            /* MISRA 16.4: mandatory default statement */
            break;
 800653c:	bf00      	nop
        }
        break;
 800653e:	e01e      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 9:
        bufItem->buffer = bufDelimiterColon.buffer;
 8006540:	4a15      	ldr	r2, [pc, #84]	; (8006598 <ndefVCardToPayloadItem+0x33c>)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	601a      	str	r2, [r3, #0]
        bufItem->length = bufDelimiterColon.length;
 8006546:	2201      	movs	r2, #1
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 800654c:	4b13      	ldr	r3, [pc, #76]	; (800659c <ndefVCardToPayloadItem+0x340>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a12      	ldr	r2, [pc, #72]	; (800659c <ndefVCardToPayloadItem+0x340>)
 8006554:	6013      	str	r3, [r2, #0]
        break;
 8006556:	e012      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    case 10:
        bufItem->buffer = bufValueVCard.buffer;
 8006558:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <ndefVCardToPayloadItem+0x344>)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	601a      	str	r2, [r3, #0]
        bufItem->length = bufValueVCard.length;
 800655e:	2205      	movs	r2, #5
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	605a      	str	r2, [r3, #4]
        item++; /* Move to next item for next call */
 8006564:	4b0d      	ldr	r3, [pc, #52]	; (800659c <ndefVCardToPayloadItem+0x340>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	4a0c      	ldr	r2, [pc, #48]	; (800659c <ndefVCardToPayloadItem+0x340>)
 800656c:	6013      	str	r3, [r2, #0]
        break;
 800656e:	e006      	b.n	800657e <ndefVCardToPayloadItem+0x322>
    default:
        bufItem->buffer = NULL;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2200      	movs	r2, #0
 800657a:	605a      	str	r2, [r3, #4]
        break;
 800657c:	bf00      	nop
    }

    return bufItem->buffer;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	681b      	ldr	r3, [r3, #0]
}
 8006582:	4618      	mov	r0, r3
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	20002a88 	.word	0x20002a88
 8006590:	20002a84 	.word	0x20002a84
 8006594:	0801e568 	.word	0x0801e568
 8006598:	0801e560 	.word	0x0801e560
 800659c:	20002a80 	.word	0x20002a80
 80065a0:	0801e598 	.word	0x0801e598

080065a4 <ndefGetVCard>:
}


/*****************************************************************************/
ReturnCode ndefGetVCard(const ndefType* vCard, const ndefConstBuffer* bufType, ndefConstBuffer* bufSubType, ndefConstBuffer* bufValue)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
    const ndefTypeVCard* vCardData;
    uint32_t i;

    if ( (vCard   == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00c      	beq.n	80065d2 <ndefGetVCard+0x2e>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b06      	cmp	r3, #6
 80065be:	d108      	bne.n	80065d2 <ndefGetVCard+0x2e>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <ndefGetVCard+0x2e>
         (bufType == NULL) || (bufSubType == NULL) || (bufValue == NULL) )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <ndefGetVCard+0x2e>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <ndefGetVCard+0x32>
    {
        return ERR_PARAM;
 80065d2:	2307      	movs	r3, #7
 80065d4:	e062      	b.n	800669c <ndefGetVCard+0xf8>
    }

    vCardData = &vCard->data.vCard;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	330c      	adds	r3, #12
 80065da:	613b      	str	r3, [r7, #16]

    bufSubType->buffer = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
    bufSubType->length = 0;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	605a      	str	r2, [r3, #4]

    bufValue->buffer = NULL;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    bufValue->length = 0;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]

    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e04c      	b.n	8006694 <ndefGetVCard+0xf0>
    {
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	4413      	add	r3, r2
 8006602:	330c      	adds	r3, #12
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d041      	beq.n	800668e <ndefGetVCard+0xea>
             (vCardData->entry[i].bufTypeLength == bufType->length) )
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	4413      	add	r3, r2
 8006612:	330c      	adds	r3, #12
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	685b      	ldr	r3, [r3, #4]
        if ( (vCardData->entry[i].bufTypeLength != 0U) &&
 800661c:	429a      	cmp	r2, r3
 800661e:	d136      	bne.n	800668e <ndefGetVCard+0xea>
        {
            if (bufType->length > 0U)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d032      	beq.n	800668e <ndefGetVCard+0xea>
            {
                if (ST_BYTECMP(vCardData->entry[i].bufTypeBuffer, bufType->buffer, bufType->length) == 0)
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	4413      	add	r3, r2
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	6819      	ldr	r1, [r3, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	461a      	mov	r2, r3
 800663c:	f015 fb2a 	bl	801bc94 <memcmp>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d123      	bne.n	800668e <ndefGetVCard+0xea>
                {
                    bufSubType->buffer = vCardData->entry[i].bufSubTypeBuffer;
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	4413      	add	r3, r2
 800664e:	3304      	adds	r3, #4
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
                    bufSubType->length = vCardData->entry[i].bufSubTypeLength;
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	4413      	add	r3, r2
 800665e:	330d      	adds	r3, #13
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]

                    bufValue->buffer = vCardData->entry[i].bufValueBuffer;
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	4413      	add	r3, r2
 8006670:	3308      	adds	r3, #8
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	601a      	str	r2, [r3, #0]
                    bufValue->length = vCardData->entry[i].bufValueLength;
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	4413      	add	r3, r2
 8006680:	330e      	adds	r3, #14
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	605a      	str	r2, [r3, #4]

                    return ERR_NONE;
 800668a:	2300      	movs	r3, #0
 800668c:	e006      	b.n	800669c <ndefGetVCard+0xf8>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	3301      	adds	r3, #1
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d9af      	bls.n	80065fa <ndefGetVCard+0x56>
                }
            }
        }
    }

    return ERR_NOTFOUND;
 800669a:	2316      	movs	r3, #22
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <ndefVCardFindMarker>:


/*****************************************************************************/
static ReturnCode ndefVCardFindMarker(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, uint32_t* offset)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
    uint32_t tempOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <ndefVCardFindMarker+0x2e>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <ndefVCardFindMarker+0x2e>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <ndefVCardFindMarker+0x2e>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <ndefVCardFindMarker+0x2e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <ndefVCardFindMarker+0x32>
         (offset     == NULL) )
    {
        return ERR_PROTO;
 80066d2:	230b      	movs	r3, #11
 80066d4:	e025      	b.n	8006722 <ndefVCardFindMarker+0x7e>
    }

    tempOffset = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 80066da:	e019      	b.n	8006710 <ndefVCardFindMarker+0x6c>
    {
        if (bufMarker->length > 0U)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d012      	beq.n	800670a <ndefVCardFindMarker+0x66>
        {
            // TODO Convert To Upper to be case insensitive
            if (ST_BYTECMP(&bufPayload->buffer[tempOffset], bufMarker->buffer, bufMarker->length) == 0)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	18d0      	adds	r0, r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	461a      	mov	r2, r3
 80066f6:	f015 facd 	bl	801bc94 <memcmp>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d104      	bne.n	800670a <ndefVCardFindMarker+0x66>
            {
                *offset = tempOffset;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	601a      	str	r2, [r3, #0]
                return ERR_NONE;
 8006706:	2300      	movs	r3, #0
 8006708:	e00b      	b.n	8006722 <ndefVCardFindMarker+0x7e>
            }
        }
        tempOffset++;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3301      	adds	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
    while (tempOffset < (bufPayload->length - bufMarker->length))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	429a      	cmp	r2, r3
 800671e:	d3dd      	bcc.n	80066dc <ndefVCardFindMarker+0x38>
    }

    return ERR_NOTFOUND;
 8006720:	2316      	movs	r3, #22
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <ndefVCardExtractLine>:


/*****************************************************************************/
static ReturnCode ndefVCardExtractLine(const ndefConstBuffer* bufPayload, const ndefConstBuffer* bufMarker, ndefConstBuffer* bufLine)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
    ReturnCode err;
    uint32_t markerOffset;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) ||
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d011      	beq.n	8006760 <ndefVCardExtractLine+0x36>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00d      	beq.n	8006760 <ndefVCardExtractLine+0x36>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <ndefVCardExtractLine+0x36>
         (bufMarker  == NULL) || (bufMarker->buffer  == NULL) ||
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d006      	beq.n	8006760 <ndefVCardExtractLine+0x36>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <ndefVCardExtractLine+0x36>
         (bufLine    == NULL) || (bufLine->buffer    == NULL) )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <ndefVCardExtractLine+0x3a>
    {
        return ERR_PROTO;
 8006760:	230b      	movs	r3, #11
 8006762:	e01c      	b.n	800679e <ndefVCardExtractLine+0x74>
    }

    err = ndefVCardFindMarker(bufPayload, bufMarker, &markerOffset);
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	461a      	mov	r2, r3
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff ff99 	bl	80066a4 <ndefVCardFindMarker>
 8006772:	4603      	mov	r3, r0
 8006774:	82fb      	strh	r3, [r7, #22]
    if (err == ERR_NONE)
 8006776:	8afb      	ldrh	r3, [r7, #22]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d107      	bne.n	800678c <ndefVCardExtractLine+0x62>
    {
        /* Return up to the marker */
        bufLine->buffer = bufPayload->buffer;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
        bufLine->length = markerOffset;
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	e007      	b.n	800679c <ndefVCardExtractLine+0x72>
    }
    else
    {
        /* Return up to the end of the payload */
        bufLine->buffer = bufPayload->buffer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	601a      	str	r2, [r3, #0]
        bufLine->length = bufPayload->length;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	605a      	str	r2, [r3, #4]
    }

    return ERR_NONE;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <ndefVCardParseLine>:


/*****************************************************************************/
static ReturnCode ndefVCardParseLine(const ndefConstBuffer* bufLine, ndefVCardEntry* vCardEntry)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
    ReturnCode err;
    ndefConstBuffer bufKeyword;
    uint32_t semicolonOffset;
    uint32_t colonOffset;

    if ( (bufLine == NULL) || (bufLine->buffer == NULL) || (vCardEntry == NULL) )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d006      	beq.n	80067c6 <ndefVCardParseLine+0x1e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <ndefVCardParseLine+0x1e>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <ndefVCardParseLine+0x22>
    {
        return ERR_PROTO;
 80067c6:	230b      	movs	r3, #11
 80067c8:	e053      	b.n	8006872 <ndefVCardParseLine+0xca>
    }

    /* Look for the type delimiter colon ":" */
    err = ndefVCardFindMarker(bufLine, &bufDelimiterColon, &colonOffset);
 80067ca:	f107 030c 	add.w	r3, r7, #12
 80067ce:	461a      	mov	r2, r3
 80067d0:	492a      	ldr	r1, [pc, #168]	; (800687c <ndefVCardParseLine+0xd4>)
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ff66 	bl	80066a4 <ndefVCardFindMarker>
 80067d8:	4603      	mov	r3, r0
 80067da:	83fb      	strh	r3, [r7, #30]
    if (err != ERR_NONE)
 80067dc:	8bfb      	ldrh	r3, [r7, #30]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <ndefVCardParseLine+0x3e>
    {
        /* Invalid line */
        return err;
 80067e2:	8bfb      	ldrh	r3, [r7, #30]
 80067e4:	e045      	b.n	8006872 <ndefVCardParseLine+0xca>
    }

    /* Keyword is located at the begining of the line up to the delimiter colon */
    bufKeyword.buffer = bufLine->buffer;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	617b      	str	r3, [r7, #20]
    bufKeyword.length = colonOffset;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	61bb      	str	r3, [r7, #24]

    vCardEntry->bufTypeBuffer = bufLine->buffer;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	601a      	str	r2, [r3, #0]
    vCardEntry->bufTypeLength = (uint8_t)colonOffset;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	731a      	strb	r2, [r3, #12]

    /* Look for any subtype delimiter semicolon ";" */
    err = ndefVCardFindMarker(&bufKeyword, &bufDelimiterSemicolon, &semicolonOffset);
 8006800:	f107 0210 	add.w	r2, r7, #16
 8006804:	f107 0314 	add.w	r3, r7, #20
 8006808:	491d      	ldr	r1, [pc, #116]	; (8006880 <ndefVCardParseLine+0xd8>)
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff ff4a 	bl	80066a4 <ndefVCardFindMarker>
 8006810:	4603      	mov	r3, r0
 8006812:	83fb      	strh	r3, [r7, #30]
    if (err == ERR_NONE)
 8006814:	8bfb      	ldrh	r3, [r7, #30]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11a      	bne.n	8006850 <ndefVCardParseLine+0xa8>
    {
        /* Subtype found (remove the leading ";") */
        vCardEntry->bufSubTypeBuffer = &bufLine->buffer[semicolonOffset + 1U];
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3301      	adds	r3, #1
 8006822:	441a      	add	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	605a      	str	r2, [r3, #4]
        vCardEntry->bufSubTypeLength = (uint8_t)(colonOffset - semicolonOffset - 1U);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b2da      	uxtb	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	735a      	strb	r2, [r3, #13]

        /* Adjust the Type length */
        vCardEntry->bufTypeLength -= vCardEntry->bufSubTypeLength + 1U;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	7b1a      	ldrb	r2, [r3, #12]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	7b5b      	ldrb	r3, [r3, #13]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	b2db      	uxtb	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b2da      	uxtb	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	731a      	strb	r2, [r3, #12]
    }

    /* The value follows ":" until the end of the line */
    vCardEntry->bufValueBuffer = &bufLine->buffer[colonOffset + 1U];
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	441a      	add	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	609a      	str	r2, [r3, #8]
    vCardEntry->bufValueLength = (uint16_t)(bufLine->length - colonOffset);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	b29b      	uxth	r3, r3
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	b29a      	uxth	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	81da      	strh	r2, [r3, #14]

    return ERR_NONE;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	0801e56c 	.word	0x0801e56c
 8006880:	0801e574 	.word	0x0801e574

08006884 <ndefIsVCardTypeFound>:


/*****************************************************************************/
static bool ndefIsVCardTypeFound(const ndefTypeVCard* vCard, const uint8_t* typeString)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e01e      	b.n	80068d2 <ndefIsVCardTypeFound+0x4e>
    {
        if (vCard->entry[i].bufTypeLength > 0U)
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	4413      	add	r3, r2
 800689c:	330c      	adds	r3, #12
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d013      	beq.n	80068cc <ndefIsVCardTypeFound+0x48>
        {
            if (ST_BYTECMP(typeString, vCard->entry[i].bufTypeBuffer, vCard->entry[i].bufTypeLength) == 0)
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	4413      	add	r3, r2
 80068ac:	6819      	ldr	r1, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	4413      	add	r3, r2
 80068b6:	330c      	adds	r3, #12
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6838      	ldr	r0, [r7, #0]
 80068be:	f015 f9e9 	bl	801bc94 <memcmp>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <ndefIsVCardTypeFound+0x48>
            {
                return true;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e006      	b.n	80068da <ndefIsVCardTypeFound+0x56>
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d9dd      	bls.n	8006894 <ndefIsVCardTypeFound+0x10>
            }
        }
    }

    return false;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <ndefPayloadToVcard>:


/*****************************************************************************/
static ReturnCode ndefPayloadToVcard(const ndefConstBuffer* bufPayload, ndefType* vCard)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08c      	sub	sp, #48	; 0x30
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint32_t entry_count;
    ndefConstBuffer bufLinePayload;
    ndefConstBuffer bufLine;

    if ( (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) ||
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <ndefPayloadToVcard+0x26>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d006      	beq.n	800690a <ndefPayloadToVcard+0x26>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <ndefPayloadToVcard+0x26>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <ndefPayloadToVcard+0x2a>
         (vCard      == NULL) )
    {
        return ERR_PROTO;
 800690a:	230b      	movs	r3, #11
 800690c:	e09c      	b.n	8006a48 <ndefPayloadToVcard+0x164>
    }

    vCard->id               = NDEF_TYPE_MEDIA_VCARD;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2206      	movs	r2, #6
 8006912:	701a      	strb	r2, [r3, #0]
    vCard->getPayloadLength = ndefVCardPayloadGetLength;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	4a4e      	ldr	r2, [pc, #312]	; (8006a50 <ndefPayloadToVcard+0x16c>)
 8006918:	605a      	str	r2, [r3, #4]
    vCard->getPayloadItem   = ndefVCardToPayloadItem;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	4a4d      	ldr	r2, [pc, #308]	; (8006a54 <ndefPayloadToVcard+0x170>)
 800691e:	609a      	str	r2, [r3, #8]
    vCardData               = &vCard->data.vCard;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	623b      	str	r3, [r7, #32]

    /* Clear the vCard before parsing */
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 8006926:	2300      	movs	r3, #0
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800692a:	e02b      	b.n	8006984 <ndefPayloadToVcard+0xa0>
    {
        vCardData->entry[i].bufTypeBuffer    = NULL;
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	4413      	add	r3, r2
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufTypeLength    = 0;
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	4413      	add	r3, r2
 8006940:	330c      	adds	r3, #12
 8006942:	2200      	movs	r2, #0
 8006944:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeBuffer = NULL;
 8006946:	6a3a      	ldr	r2, [r7, #32]
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	4413      	add	r3, r2
 800694e:	3304      	adds	r3, #4
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufSubTypeLength = 0;
 8006954:	6a3a      	ldr	r2, [r7, #32]
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	4413      	add	r3, r2
 800695c:	330d      	adds	r3, #13
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
        vCardData->entry[i].bufValueBuffer   = NULL;
 8006962:	6a3a      	ldr	r2, [r7, #32]
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	4413      	add	r3, r2
 800696a:	3308      	adds	r3, #8
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
        vCardData->entry[i].bufValueLength   = 0;
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	4413      	add	r3, r2
 8006978:	330e      	adds	r3, #14
 800697a:	2200      	movs	r2, #0
 800697c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < NDEF_VCARD_ENTRY_MAX; i++)
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	3301      	adds	r3, #1
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	2b0f      	cmp	r3, #15
 8006988:	d9d0      	bls.n	800692c <ndefPayloadToVcard+0x48>
    }

    offset = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
    entry_count = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 8006992:	e029      	b.n	80069e8 <ndefPayloadToVcard+0x104>
    {
        /* Search an "end of line" or end of payload among the remaining to parse */
        bufLinePayload.buffer = &bufPayload->buffer[offset];
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	4413      	add	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
        bufLinePayload.length = bufPayload->length - offset;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	61bb      	str	r3, [r7, #24]

        (void)ndefVCardExtractLine(&bufLinePayload, &bufDelimiterNewLine, &bufLine);
 80069a8:	f107 020c 	add.w	r2, r7, #12
 80069ac:	f107 0314 	add.w	r3, r7, #20
 80069b0:	4929      	ldr	r1, [pc, #164]	; (8006a58 <ndefPayloadToVcard+0x174>)
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff feb9 	bl	800672a <ndefVCardExtractLine>

        /* Parse line and fill vCard entry */
        err = ndefVCardParseLine(&bufLine, &vCardData->entry[entry_count]);
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	441a      	add	r2, r3
 80069c0:	f107 030c 	add.w	r3, r7, #12
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff feee 	bl	80067a8 <ndefVCardParseLine>
 80069cc:	4603      	mov	r3, r0
 80069ce:	83fb      	strh	r3, [r7, #30]
        if (err == ERR_NONE)
 80069d0:	8bfb      	ldrh	r3, [r7, #30]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <ndefPayloadToVcard+0xf8>
        {
            entry_count++;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	3301      	adds	r3, #1
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Move to the next line */
        offset += bufLine.length + bufDelimiterNewLine.length;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2202      	movs	r2, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e4:	4413      	add	r3, r2
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
    while ( (offset < bufPayload->length) && (entry_count < NDEF_VCARD_ENTRY_MAX) )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d202      	bcs.n	80069f8 <ndefPayloadToVcard+0x114>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	2b0f      	cmp	r3, #15
 80069f6:	d9cd      	bls.n	8006994 <ndefPayloadToVcard+0xb0>
    }

    /* Check BEGIN, VERSION and END types exist */
    if (ndefIsVCardTypeFound(vCardData, bufTypeBegin.buffer) == false)
 80069f8:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <ndefPayloadToVcard+0x178>)
 80069fa:	4619      	mov	r1, r3
 80069fc:	6a38      	ldr	r0, [r7, #32]
 80069fe:	f7ff ff41 	bl	8006884 <ndefIsVCardTypeFound>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f083 0301 	eor.w	r3, r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <ndefPayloadToVcard+0x12e>
    {
        return ERR_SYNTAX;
 8006a0e:	2314      	movs	r3, #20
 8006a10:	e01a      	b.n	8006a48 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeVersion.buffer) == false)
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <ndefPayloadToVcard+0x17c>)
 8006a14:	4619      	mov	r1, r3
 8006a16:	6a38      	ldr	r0, [r7, #32]
 8006a18:	f7ff ff34 	bl	8006884 <ndefIsVCardTypeFound>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f083 0301 	eor.w	r3, r3, #1
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <ndefPayloadToVcard+0x148>
    {
        return ERR_SYNTAX;
 8006a28:	2314      	movs	r3, #20
 8006a2a:	e00d      	b.n	8006a48 <ndefPayloadToVcard+0x164>
    }
    else if (ndefIsVCardTypeFound(vCardData, bufTypeEnd.buffer) == false)
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <ndefPayloadToVcard+0x180>)
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6a38      	ldr	r0, [r7, #32]
 8006a32:	f7ff ff27 	bl	8006884 <ndefIsVCardTypeFound>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f083 0301 	eor.w	r3, r3, #1
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <ndefPayloadToVcard+0x162>
    {
        return ERR_SYNTAX;
 8006a42:	2314      	movs	r3, #20
 8006a44:	e000      	b.n	8006a48 <ndefPayloadToVcard+0x164>
    else
    {
        /* MISRA 15.7 - Empty else */
    }

    return ERR_NONE;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3730      	adds	r7, #48	; 0x30
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	08006157 	.word	0x08006157
 8006a54:	0800625d 	.word	0x0800625d
 8006a58:	0801e57c 	.word	0x0801e57c
 8006a5c:	0801e584 	.word	0x0801e584
 8006a60:	0801e590 	.word	0x0801e590
 8006a64:	0801e58c 	.word	0x0801e58c

08006a68 <ndefRecordToVCard>:


/*****************************************************************************/
ReturnCode ndefRecordToVCard(const ndefRecord* record, ndefType* vCard)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (vCard == NULL) )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <ndefRecordToVCard+0x16>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <ndefRecordToVCard+0x1a>
    {
        return ERR_PARAM;
 8006a7e:	2307      	movs	r3, #7
 8006a80:	e022      	b.n	8006ac8 <ndefRecordToVCard+0x60>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard)) /* "text/x-vCard" */
 8006a82:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <ndefRecordToVCard+0x68>)
 8006a84:	2102      	movs	r1, #2
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fe fc34 	bl	80052f4 <ndefRecordTypeMatch>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f083 0301 	eor.w	r3, r3, #1
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <ndefRecordToVCard+0x34>
    {
        return ERR_PROTO;
 8006a98:	230b      	movs	r3, #11
 8006a9a:	e015      	b.n	8006ac8 <ndefRecordToVCard+0x60>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff fb35 	bl	800610c <ndefRecordGetNdefType>
 8006aa2:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <ndefRecordToVCard+0x52>
    {
        (void)ST_MEMCPY(vCard, ndeftype, sizeof(ndefType));
 8006aaa:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	6838      	ldr	r0, [r7, #0]
 8006ab2:	f015 f8fd 	bl	801bcb0 <memcpy>
        return ERR_NONE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e006      	b.n	8006ac8 <ndefRecordToVCard+0x60>
    }

    return ndefPayloadToVcard(&record->bufPayload, vCard);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	330c      	adds	r3, #12
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff ff0f 	bl	80068e4 <ndefPayloadToVcard>
 8006ac6:	4603      	mov	r3, r0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	0801e558 	.word	0x0801e558

08006ad4 <ndefVCardToRecord>:


/*****************************************************************************/
ReturnCode ndefVCardToRecord(const ndefType* vCard, ndefRecord* record)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
    if ( (vCard  == NULL) || (vCard->id != NDEF_TYPE_MEDIA_VCARD) ||
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d006      	beq.n	8006af2 <ndefVCardToRecord+0x1e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b06      	cmp	r3, #6
 8006aea:	d102      	bne.n	8006af2 <ndefVCardToRecord+0x1e>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <ndefVCardToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8006af2:	2307      	movs	r3, #7
 8006af4:	e00c      	b.n	8006b10 <ndefVCardToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8006af6:	6838      	ldr	r0, [r7, #0]
 8006af8:	f7fe fb26 	bl	8005148 <ndefRecordReset>

    (void)ndefRecordSetType(record, NDEF_TNF_MEDIA_TYPE, &bufMediaTypeVCard);
 8006afc:	4a06      	ldr	r2, [pc, #24]	; (8006b18 <ndefVCardToRecord+0x44>)
 8006afe:	2102      	movs	r1, #2
 8006b00:	6838      	ldr	r0, [r7, #0]
 8006b02:	f7fe fba2 	bl	800524a <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, vCard);
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	6838      	ldr	r0, [r7, #0]
 8006b0a:	f7ff fac7 	bl	800609c <ndefRecordSetNdefType>

    return ERR_NONE;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	0801e558 	.word	0x0801e558

08006b1c <ndefEmptyTypePayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefEmptyTypePayloadGetLength(const ndefType* empty)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <ndefEmptyTypePayloadGetLength+0x16>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <ndefEmptyTypePayloadGetLength+0x1a>
    {
        return 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <ndefEmptyTypePayloadGetLength+0x1c>
    }

    return 0;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <ndefEmptyTypePayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefEmptyTypePayloadItem(const ndefType* empty, ndefConstBuffer* bufItem, bool begin)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b085      	sub	sp, #20
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	71fb      	strb	r3, [r7, #7]
    if ( (empty == NULL) || (empty->id != NDEF_TYPE_EMPTY) )
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <ndefEmptyTypePayloadItem+0x1c>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <ndefEmptyTypePayloadItem+0x20>
    {
        return NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e009      	b.n	8006b76 <ndefEmptyTypePayloadItem+0x34>
    }

    NO_WARNING(begin);

    if (bufItem != NULL)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <ndefEmptyTypePayloadItem+0x32>
    {
        bufItem->buffer = NULL;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2200      	movs	r2, #0
 8006b72:	605a      	str	r2, [r3, #4]
    }

    return NULL;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr

08006b80 <ndefEmptyType>:


/*****************************************************************************/
ReturnCode ndefEmptyType(ndefType* empty)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
    if (empty == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <ndefEmptyType+0x12>
    {
        return ERR_PARAM;
 8006b8e:	2307      	movs	r3, #7
 8006b90:	e009      	b.n	8006ba6 <ndefEmptyType+0x26>
    }

    empty->id               = NDEF_TYPE_EMPTY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
    empty->getPayloadLength = ndefEmptyTypePayloadGetLength;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a05      	ldr	r2, [pc, #20]	; (8006bb0 <ndefEmptyType+0x30>)
 8006b9c:	605a      	str	r2, [r3, #4]
    empty->getPayloadItem   = ndefEmptyTypePayloadItem;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a04      	ldr	r2, [pc, #16]	; (8006bb4 <ndefEmptyType+0x34>)
 8006ba2:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr
 8006bb0:	08006b1d 	.word	0x08006b1d
 8006bb4:	08006b43 	.word	0x08006b43

08006bb8 <ndefRecordToEmptyType>:


/*****************************************************************************/
ReturnCode ndefRecordToEmptyType(const ndefRecord* record, ndefType* empty)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
    ndefConstBuffer8 bufEmpty = { NULL, 0 };
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	733b      	strb	r3, [r7, #12]

    if ( (record == NULL) || (empty == NULL) )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <ndefRecordToEmptyType+0x1e>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <ndefRecordToEmptyType+0x22>
    {
        return ERR_PARAM;
 8006bd6:	2307      	movs	r3, #7
 8006bd8:	e024      	b.n	8006c24 <ndefRecordToEmptyType+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_EMPTY, &bufEmpty))
 8006bda:	f107 0308 	add.w	r3, r7, #8
 8006bde:	461a      	mov	r2, r3
 8006be0:	2100      	movs	r1, #0
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fe fb86 	bl	80052f4 <ndefRecordTypeMatch>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f083 0301 	eor.w	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <ndefRecordToEmptyType+0x40>
    {
        return ERR_PARAM;
 8006bf4:	2307      	movs	r3, #7
 8006bf6:	e015      	b.n	8006c24 <ndefRecordToEmptyType+0x6c>
    }

    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	789b      	ldrb	r3, [r3, #2]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10b      	bne.n	8006c18 <ndefRecordToEmptyType+0x60>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d107      	bne.n	8006c18 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
    if ( (record->idLength          != 0U) || (record->id                != NULL) ||
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d103      	bne.n	8006c18 <ndefRecordToEmptyType+0x60>
         (record->bufPayload.length != 0U) || (record->bufPayload.buffer != NULL) )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <ndefRecordToEmptyType+0x64>
    {
        return ERR_PARAM;
 8006c18:	2307      	movs	r3, #7
 8006c1a:	e003      	b.n	8006c24 <ndefRecordToEmptyType+0x6c>
    }

    return ndefEmptyType(empty);
 8006c1c:	6838      	ldr	r0, [r7, #0]
 8006c1e:	f7ff ffaf 	bl	8006b80 <ndefEmptyType>
 8006c22:	4603      	mov	r3, r0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <ndefEmptyTypeToRecord>:


/*****************************************************************************/
ReturnCode ndefEmptyTypeToRecord(const ndefType* empty, ndefRecord* record)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
    if ( (empty  == NULL) || (empty->id != NDEF_TYPE_EMPTY) ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d006      	beq.n	8006c4a <ndefEmptyTypeToRecord+0x1e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <ndefEmptyTypeToRecord+0x1e>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <ndefEmptyTypeToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 8006c4a:	2307      	movs	r3, #7
 8006c4c:	e007      	b.n	8006c5e <ndefEmptyTypeToRecord+0x32>
    }

    (void)ndefRecordReset(record);
 8006c4e:	6838      	ldr	r0, [r7, #0]
 8006c50:	f7fe fa7a 	bl	8005148 <ndefRecordReset>

    (void)ndefRecordSetNdefType(record, empty);
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f7ff fa20 	bl	800609c <ndefRecordSetNdefType>

    return ERR_NONE;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <ndefRtdDeviceInfoPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdDeviceInfoPayloadGetLength(const ndefType* devInfo)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b087      	sub	sp, #28
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t payloadLength = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
    uint32_t i;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <ndefRtdDeviceInfoPayloadGetLength+0x1a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d001      	beq.n	8006c84 <ndefRtdDeviceInfoPayloadGetLength+0x1e>
    {
        return 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	e01d      	b.n	8006cc0 <ndefRtdDeviceInfoPayloadGetLength+0x5a>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	330c      	adds	r3, #12
 8006c88:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	e013      	b.n	8006cb8 <ndefRtdDeviceInfoPayloadGetLength+0x52>
    {
        if (rtdDevInfo->devInfo[i].length != 0U)
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	4413      	add	r3, r2
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <ndefRtdDeviceInfoPayloadGetLength+0x4c>
        {
            payloadLength += sizeof(rtdDevInfo->devInfo[i].type) + sizeof(rtdDevInfo->devInfo[i].length) + (uint32_t)rtdDevInfo->devInfo[i].length;
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	3302      	adds	r3, #2
 8006cb0:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d9e8      	bls.n	8006c90 <ndefRtdDeviceInfoPayloadGetLength+0x2a>
        }
    }

    return payloadLength;
 8006cbe:	697b      	ldr	r3, [r7, #20]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
	...

08006ccc <ndefRtdDeviceInfoToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdDeviceInfoToPayloadItem(const ndefType* devInfo, ndefConstBuffer* bufItem, bool begin)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t index;

    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <ndefRtdDeviceInfoToPayloadItem+0x22>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d102      	bne.n	8006cee <ndefRtdDeviceInfoToPayloadItem+0x22>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <ndefRtdDeviceInfoToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e063      	b.n	8006dba <ndefRtdDeviceInfoToPayloadItem+0xee>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <ndefRtdDeviceInfoToPayloadItem+0x38>
    {
        item = 0;
 8006cfe:	4b31      	ldr	r3, [pc, #196]	; (8006dc4 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
    }

    bufItem->buffer = NULL;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
    bufItem->length = 0;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	605a      	str	r2, [r3, #4]

    index = item / 3U;
 8006d10:	4b2c      	ldr	r3, [pc, #176]	; (8006dc4 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2c      	ldr	r2, [pc, #176]	; (8006dc8 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	613b      	str	r3, [r7, #16]

    /* Stop streaming on first empty entry */
    if (rtdDevInfo->devInfo[index].length > 0U)
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d03e      	beq.n	8006daa <ndefRtdDeviceInfoToPayloadItem+0xde>
    {
        switch (item % 3U)
 8006d2c:	4b25      	ldr	r3, [pc, #148]	; (8006dc4 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <ndefRtdDeviceInfoToPayloadItem+0xfc>)
 8006d32:	fba3 2301 	umull	r2, r3, r3, r1
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	461a      	mov	r2, r3
 8006d3a:	0052      	lsls	r2, r2, #1
 8006d3c:	441a      	add	r2, r3
 8006d3e:	1a8b      	subs	r3, r1, r2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d01b      	beq.n	8006d7c <ndefRtdDeviceInfoToPayloadItem+0xb0>
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d829      	bhi.n	8006d9c <ndefRtdDeviceInfoToPayloadItem+0xd0>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <ndefRtdDeviceInfoToPayloadItem+0x86>
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d00a      	beq.n	8006d66 <ndefRtdDeviceInfoToPayloadItem+0x9a>
 8006d50:	e024      	b.n	8006d9c <ndefRtdDeviceInfoToPayloadItem+0xd0>
        {
        case 0:
            bufItem->buffer = &rtdDevInfo->devInfo[index].type;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	441a      	add	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].type);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2201      	movs	r2, #1
 8006d62:	605a      	str	r2, [r3, #4]
            break;
 8006d64:	e022      	b.n	8006dac <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 1:
            bufItem->buffer = &rtdDevInfo->devInfo[index].length;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	601a      	str	r2, [r3, #0]
            bufItem->length = sizeof(rtdDevInfo->devInfo[index].length);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2201      	movs	r2, #1
 8006d78:	605a      	str	r2, [r3, #4]
            break;
 8006d7a:	e017      	b.n	8006dac <ndefRtdDeviceInfoToPayloadItem+0xe0>
        case 2:
            bufItem->buffer = rtdDevInfo->devInfo[index].buffer;
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	4413      	add	r3, r2
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	601a      	str	r2, [r3, #0]
            bufItem->length = rtdDevInfo->devInfo[index].length;
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	461a      	mov	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	605a      	str	r2, [r3, #4]
            break;
 8006d9a:	e007      	b.n	8006dac <ndefRtdDeviceInfoToPayloadItem+0xe0>
        default:
            bufItem->buffer = NULL;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
            bufItem->length = 0;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	605a      	str	r2, [r3, #4]
            break;
 8006da8:	e000      	b.n	8006dac <ndefRtdDeviceInfoToPayloadItem+0xe0>
        }
    }
 8006daa:	bf00      	nop

    /* Move to next item for next call */
    item++;
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <ndefRtdDeviceInfoToPayloadItem+0xf8>)
 8006db4:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	681b      	ldr	r3, [r3, #0]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc80      	pop	{r7}
 8006dc2:	4770      	bx	lr
 8006dc4:	20002a8c 	.word	0x20002a8c
 8006dc8:	aaaaaaab 	.word	0xaaaaaaab

08006dcc <ndefGetRtdDeviceInfo>:
}


/*****************************************************************************/
ReturnCode ndefGetRtdDeviceInfo(const ndefType* devInfo, ndefTypeRtdDeviceInfo* devInfoData)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdDeviceInfo* rtdDevInfo;
    uint32_t i;

    if ( (devInfo     == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d006      	beq.n	8006dea <ndefGetRtdDeviceInfo+0x1e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d102      	bne.n	8006dea <ndefGetRtdDeviceInfo+0x1e>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <ndefGetRtdDeviceInfo+0x22>
         (devInfoData == NULL) )
    {
        return ERR_PARAM;
 8006dea:	2307      	movs	r3, #7
 8006dec:	e029      	b.n	8006e42 <ndefGetRtdDeviceInfo+0x76>
    }

    rtdDevInfo = &devInfo->data.deviceInfo;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	330c      	adds	r3, #12
 8006df2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	e01f      	b.n	8006e3a <ndefGetRtdDeviceInfo+0x6e>
    {
        devInfoData->devInfo[i].type   = rtdDevInfo->devInfo[i].type;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        devInfoData->devInfo[i].length = rtdDevInfo->devInfo[i].length;
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	7859      	ldrb	r1, [r3, #1]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	4413      	add	r3, r2
 8006e1c:	460a      	mov	r2, r1
 8006e1e:	705a      	strb	r2, [r3, #1]
        devInfoData->devInfo[i].buffer = rtdDevInfo->devInfo[i].buffer;
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4413      	add	r3, r2
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	440b      	add	r3, r1
 8006e32:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d9dc      	bls.n	8006dfa <ndefGetRtdDeviceInfo+0x2e>
    }

    return ERR_NONE;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <ndefPayloadToRtdDeviceInfo>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdDeviceInfo(const ndefConstBuffer* bufDevInfo, ndefType* devInfo)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b089      	sub	sp, #36	; 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
    uint32_t offset;
    uint8_t  count;
    uint8_t  manufacturerNameIndex;
    uint8_t  modelNameIndex;

    if ( (bufDevInfo == NULL) || (bufDevInfo->buffer == NULL) || (bufDevInfo->length == 0U) ||
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <ndefPayloadToRtdDeviceInfo+0x26>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d006      	beq.n	8006e72 <ndefPayloadToRtdDeviceInfo+0x26>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <ndefPayloadToRtdDeviceInfo+0x26>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <ndefPayloadToRtdDeviceInfo+0x2a>
         (devInfo    == NULL) )
    {
        return ERR_PARAM;
 8006e72:	2307      	movs	r3, #7
 8006e74:	e09d      	b.n	8006fb2 <ndefPayloadToRtdDeviceInfo+0x166>
    }

    devInfo->id               = NDEF_TYPE_RTD_DEVICE_INFO;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
    devInfo->getPayloadLength = ndefRtdDeviceInfoPayloadGetLength;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	4a4f      	ldr	r2, [pc, #316]	; (8006fbc <ndefPayloadToRtdDeviceInfo+0x170>)
 8006e80:	605a      	str	r2, [r3, #4]
    devInfo->getPayloadItem   = ndefRtdDeviceInfoToPayloadItem;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	4a4e      	ldr	r2, [pc, #312]	; (8006fc0 <ndefPayloadToRtdDeviceInfo+0x174>)
 8006e86:	609a      	str	r2, [r3, #8]
    rtdDevInfo                = &devInfo->data.deviceInfo;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	613b      	str	r3, [r7, #16]

    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d905      	bls.n	8006ea2 <ndefPayloadToRtdDeviceInfo+0x56>
         (bufDevInfo->length > NDEF_RTD_DEVICE_INFO_PAYLOAD_MAX) )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
    if ( (bufDevInfo->length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) ||
 8006e9a:	f240 4216 	movw	r2, #1046	; 0x416
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <ndefPayloadToRtdDeviceInfo+0x5a>
    {
        return ERR_PROTO;
 8006ea2:	230b      	movs	r3, #11
 8006ea4:	e085      	b.n	8006fb2 <ndefPayloadToRtdDeviceInfo+0x166>
    }

    /* Extract device information from the buffer */

    /* Clear the Device Information structure before parsing */
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	e013      	b.n	8006ed4 <ndefPayloadToRtdDeviceInfo+0x88>
    {
        rtdDevInfo->devInfo[i].type   = 0;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[i].length = 0;
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[i].buffer = NULL;
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4413      	add	r3, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NDEF_DEVICE_INFO_TYPE_COUNT; i++)
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d9e8      	bls.n	8006eac <ndefPayloadToRtdDeviceInfo+0x60>
    }

    /* Read Type, Length and Value fields */
    /* Not checking multiple occurences of a given field, use the last one */
    offset = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
    count = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]
    manufacturerNameIndex = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75bb      	strb	r3, [r7, #22]
    modelNameIndex = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	757b      	strb	r3, [r7, #21]

    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 8006eea:	e044      	b.n	8006f76 <ndefPayloadToRtdDeviceInfo+0x12a>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
    {
        uint8_t type   =  bufDevInfo->buffer[offset];
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	73fb      	strb	r3, [r7, #15]
        uint8_t length =  bufDevInfo->buffer[offset + 1U];
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	3301      	adds	r3, #1
 8006f00:	4413      	add	r3, r2
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	73bb      	strb	r3, [r7, #14]
        if ((type == NDEF_DEVICE_INFO_UUID) && (length != NDEF_UUID_LENGTH))
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d104      	bne.n	8006f16 <ndefPayloadToRtdDeviceInfo+0xca>
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d001      	beq.n	8006f16 <ndefPayloadToRtdDeviceInfo+0xca>
        {
            return ERR_PROTO;
 8006f12:	230b      	movs	r3, #11
 8006f14:	e04d      	b.n	8006fb2 <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if ( (type > NDEF_DEVICE_INFO_TYPE_COUNT) || (length == 0U) )
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	d802      	bhi.n	8006f22 <ndefPayloadToRtdDeviceInfo+0xd6>
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <ndefPayloadToRtdDeviceInfo+0xda>
        {
            return ERR_PROTO;
 8006f22:	230b      	movs	r3, #11
 8006f24:	e045      	b.n	8006fb2 <ndefPayloadToRtdDeviceInfo+0x166>
        }
        if (type == NDEF_DEVICE_INFO_MANUFACTURER_NAME)
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <ndefPayloadToRtdDeviceInfo+0xe6>
        {
            manufacturerNameIndex = count;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	75bb      	strb	r3, [r7, #22]
 8006f30:	e004      	b.n	8006f3c <ndefPayloadToRtdDeviceInfo+0xf0>
        }
        else
        {
            if (type == NDEF_DEVICE_INFO_MODEL_NAME)
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <ndefPayloadToRtdDeviceInfo+0xf0>
            {
                modelNameIndex = count;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	757b      	strb	r3, [r7, #21]
            }
        }

        rtdDevInfo->devInfo[count].type   = type;
 8006f3c:	7dfa      	ldrb	r2, [r7, #23]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	7bf9      	ldrb	r1, [r7, #15]
 8006f42:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        rtdDevInfo->devInfo[count].length = length;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	7bba      	ldrb	r2, [r7, #14]
 8006f50:	705a      	strb	r2, [r3, #1]
        rtdDevInfo->devInfo[count].buffer = &bufDevInfo->buffer[offset + 2U];
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6819      	ldr	r1, [r3, #0]
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	1c9a      	adds	r2, r3, #2
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	6939      	ldr	r1, [r7, #16]
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	440b      	add	r3, r1
 8006f64:	605a      	str	r2, [r3, #4]
        count++;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]

        /* Next entry */
        offset += sizeof(uint8_t) + sizeof(uint8_t) + (uint32_t)length;
 8006f6c:	7bba      	ldrb	r2, [r7, #14]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	4413      	add	r3, r2
 8006f72:	3302      	adds	r3, #2
 8006f74:	61bb      	str	r3, [r7, #24]
    while ( ((offset + NDEF_RTD_DEVICE_INFO_TLV_LENGTH_MIN) < bufDevInfo->length)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	1c9a      	adds	r2, r3, #2
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d202      	bcs.n	8006f88 <ndefPayloadToRtdDeviceInfo+0x13c>
            && (count < NDEF_DEVICE_INFO_TYPE_COUNT) )
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d9b1      	bls.n	8006eec <ndefPayloadToRtdDeviceInfo+0xa0>
    }

    /* Check both required fields are there */
    if ( (manufacturerNameIndex != modelNameIndex) &&
 8006f88:	7dba      	ldrb	r2, [r7, #22]
 8006f8a:	7d7b      	ldrb	r3, [r7, #21]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d00f      	beq.n	8006fb0 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 8006f90:	7dbb      	ldrb	r3, [r7, #22]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	4413      	add	r3, r2
 8006f98:	685b      	ldr	r3, [r3, #4]
    if ( (manufacturerNameIndex != modelNameIndex) &&
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d008      	beq.n	8006fb0 <ndefPayloadToRtdDeviceInfo+0x164>
         (rtdDevInfo->devInfo[modelNameIndex].buffer        != NULL) )
 8006f9e:	7d7b      	ldrb	r3, [r7, #21]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	685b      	ldr	r3, [r3, #4]
         (rtdDevInfo->devInfo[manufacturerNameIndex].buffer != NULL) &&
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <ndefPayloadToRtdDeviceInfo+0x164>
    {
        return ERR_NONE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e000      	b.n	8006fb2 <ndefPayloadToRtdDeviceInfo+0x166>
    }
    else
    {
        return ERR_PARAM;
 8006fb0:	2307      	movs	r3, #7
    }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3724      	adds	r7, #36	; 0x24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr
 8006fbc:	08006c67 	.word	0x08006c67
 8006fc0:	08006ccd 	.word	0x08006ccd

08006fc4 <ndefRecordToRtdDeviceInfo>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdDeviceInfo(const ndefRecord* record, ndefType* devInfo)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (devInfo == NULL) )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <ndefRecordToRtdDeviceInfo+0x16>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <ndefRecordToRtdDeviceInfo+0x1a>
    {
        return ERR_PARAM;
 8006fda:	2307      	movs	r3, #7
 8006fdc:	e028      	b.n	8007030 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo)) /* "Di" */
 8006fde:	4a16      	ldr	r2, [pc, #88]	; (8007038 <ndefRecordToRtdDeviceInfo+0x74>)
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fe f986 	bl	80052f4 <ndefRecordTypeMatch>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f083 0301 	eor.w	r3, r3, #1
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <ndefRecordToRtdDeviceInfo+0x34>
    {
        return ERR_PROTO;
 8006ff4:	230b      	movs	r3, #11
 8006ff6:	e01b      	b.n	8007030 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff f887 	bl	800610c <ndefRecordGetNdefType>
 8006ffe:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <ndefRecordToRtdDeviceInfo+0x52>
    {
        (void)ST_MEMCPY(devInfo, ndeftype, sizeof(ndefType));
 8007006:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800700a:	68f9      	ldr	r1, [r7, #12]
 800700c:	6838      	ldr	r0, [r7, #0]
 800700e:	f014 fe4f 	bl	801bcb0 <memcpy>
        return ERR_NONE;
 8007012:	2300      	movs	r3, #0
 8007014:	e00c      	b.n	8007030 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_DEVICE_INFO_PAYLOAD_MIN) /* Device Information Payload Min */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d801      	bhi.n	8007022 <ndefRecordToRtdDeviceInfo+0x5e>
    {
        return ERR_PROTO;
 800701e:	230b      	movs	r3, #11
 8007020:	e006      	b.n	8007030 <ndefRecordToRtdDeviceInfo+0x6c>
    }

    return ndefPayloadToRtdDeviceInfo(&record->bufPayload, devInfo);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	330c      	adds	r3, #12
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff0f 	bl	8006e4c <ndefPayloadToRtdDeviceInfo>
 800702e:	4603      	mov	r3, r0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	0801e5c0 	.word	0x0801e5c0

0800703c <ndefRtdDeviceInfoToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdDeviceInfoToRecord(const ndefType* devInfo, ndefRecord* record)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
    if ( (devInfo == NULL) || (devInfo->id != NDEF_TYPE_RTD_DEVICE_INFO) ||
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <ndefRtdDeviceInfoToRecord+0x1e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d102      	bne.n	800705a <ndefRtdDeviceInfoToRecord+0x1e>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <ndefRtdDeviceInfoToRecord+0x22>
         (record  == NULL) )
    {
        return ERR_PARAM;
 800705a:	2307      	movs	r3, #7
 800705c:	e00c      	b.n	8007078 <ndefRtdDeviceInfoToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 800705e:	6838      	ldr	r0, [r7, #0]
 8007060:	f7fe f872 	bl	8005148 <ndefRecordReset>

    /* "Di" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeDeviceInfo);
 8007064:	4a06      	ldr	r2, [pc, #24]	; (8007080 <ndefRtdDeviceInfoToRecord+0x44>)
 8007066:	2101      	movs	r1, #1
 8007068:	6838      	ldr	r0, [r7, #0]
 800706a:	f7fe f8ee 	bl	800524a <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, devInfo);
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	6838      	ldr	r0, [r7, #0]
 8007072:	f7ff f813 	bl	800609c <ndefRecordSetNdefType>

    return ERR_NONE;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	0801e5c0 	.word	0x0801e5c0

08007084 <ndefRtdTextPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdTextPayloadGetLength(const ndefType* text)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdText* rtdText;

    if ( (text == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <ndefRtdTextPayloadGetLength+0x16>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d001      	beq.n	800709e <ndefRtdTextPayloadGetLength+0x1a>
    {
        return 0;
 800709a:	2300      	movs	r3, #0
 800709c:	e009      	b.n	80070b2 <ndefRtdTextPayloadGetLength+0x2e>
    }

    rtdText = &text->data.text;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	330c      	adds	r3, #12
 80070a2:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdText->status) + rtdText->bufLanguageCode.length + rtdText->bufSentence.length;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	7a1b      	ldrb	r3, [r3, #8]
 80070a8:	461a      	mov	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	4413      	add	r3, r2
 80070b0:	3301      	adds	r3, #1
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <ndefRtdTextToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdTextToPayloadItem(const ndefType* text, ndefConstBuffer* bufItem, bool begin)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	4613      	mov	r3, r2
 80070c8:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdText* rtdText;

    if ( (text    == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d006      	beq.n	80070de <ndefRtdTextToPayloadItem+0x22>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d102      	bne.n	80070de <ndefRtdTextToPayloadItem+0x22>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <ndefRtdTextToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	e03b      	b.n	800715a <ndefRtdTextToPayloadItem+0x9e>
    }

    rtdText = &text->data.text;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	330c      	adds	r3, #12
 80070e6:	617b      	str	r3, [r7, #20]

    if (begin == true)
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <ndefRtdTextToPayloadItem+0x38>
    {
        item = 0;
 80070ee:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <ndefRtdTextToPayloadItem+0xa8>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 80070f4:	4b1b      	ldr	r3, [pc, #108]	; (8007164 <ndefRtdTextToPayloadItem+0xa8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d017      	beq.n	800712c <ndefRtdTextToPayloadItem+0x70>
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d81e      	bhi.n	800713e <ndefRtdTextToPayloadItem+0x82>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <ndefRtdTextToPayloadItem+0x4e>
 8007104:	2b01      	cmp	r3, #1
 8007106:	d007      	beq.n	8007118 <ndefRtdTextToPayloadItem+0x5c>
 8007108:	e019      	b.n	800713e <ndefRtdTextToPayloadItem+0x82>
    {
    case 0:
        /* Status byte */
        bufItem->buffer = &rtdText->status;
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdText->status);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2201      	movs	r2, #1
 8007114:	605a      	str	r2, [r3, #4]
        break;
 8007116:	e019      	b.n	800714c <ndefRtdTextToPayloadItem+0x90>

    case 1:
        /* Language Code */
        bufItem->buffer = rtdText->bufLanguageCode.buffer;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufLanguageCode.length;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	7a1b      	ldrb	r3, [r3, #8]
 8007124:	461a      	mov	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	605a      	str	r2, [r3, #4]
        break;
 800712a:	e00f      	b.n	800714c <ndefRtdTextToPayloadItem+0x90>

    case 2:
        /* Actual text */
        bufItem->buffer = rtdText->bufSentence.buffer;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdText->bufSentence.length;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	605a      	str	r2, [r3, #4]
        break;
 800713c:	e006      	b.n	800714c <ndefRtdTextToPayloadItem+0x90>

    default:
        bufItem->buffer = NULL;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	605a      	str	r2, [r3, #4]
        break;
 800714a:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <ndefRtdTextToPayloadItem+0xa8>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	4a04      	ldr	r2, [pc, #16]	; (8007164 <ndefRtdTextToPayloadItem+0xa8>)
 8007154:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	681b      	ldr	r3, [r3, #0]
}
 800715a:	4618      	mov	r0, r3
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr
 8007164:	20002a90 	.word	0x20002a90

08007168 <ndefRtdText>:


/*****************************************************************************/
ReturnCode ndefRtdText(ndefType* text, uint8_t utfEncoding, const ndefConstBuffer8* bufLanguageCode, const ndefConstBuffer* bufSentence)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	607a      	str	r2, [r7, #4]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	460b      	mov	r3, r1
 8007176:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdText* rtdText;

    if ( (text            == NULL) ||
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d015      	beq.n	80071aa <ndefRtdText+0x42>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d012      	beq.n	80071aa <ndefRtdText+0x42>
         (bufLanguageCode == NULL) || (bufLanguageCode->buffer == NULL) || (bufLanguageCode->length == 0U) ||
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <ndefRtdText+0x42>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	791b      	ldrb	r3, [r3, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <ndefRtdText+0x42>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <ndefRtdText+0x42>
         (bufSentence     == NULL) || (bufSentence->buffer     == NULL) || (bufSentence->length     == 0U) )
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <ndefRtdText+0x42>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <ndefRtdText+0x46>
    {
        return ERR_PARAM;
 80071aa:	2307      	movs	r3, #7
 80071ac:	e036      	b.n	800721c <ndefRtdText+0xb4>
    }

    if (bufLanguageCode->length > NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	791b      	ldrb	r3, [r3, #4]
 80071b2:	2b3f      	cmp	r3, #63	; 0x3f
 80071b4:	d901      	bls.n	80071ba <ndefRtdText+0x52>
    {
        return ERR_PROTO;
 80071b6:	230b      	movs	r3, #11
 80071b8:	e030      	b.n	800721c <ndefRtdText+0xb4>
    }

    if ( (utfEncoding != TEXT_ENCODING_UTF8) && (utfEncoding != TEXT_ENCODING_UTF16) )
 80071ba:	7afb      	ldrb	r3, [r7, #11]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <ndefRtdText+0x62>
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d001      	beq.n	80071ca <ndefRtdText+0x62>
    {
        return ERR_PARAM;
 80071c6:	2307      	movs	r3, #7
 80071c8:	e028      	b.n	800721c <ndefRtdText+0xb4>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2202      	movs	r2, #2
 80071ce:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <ndefRtdText+0xc0>)
 80071d4:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a14      	ldr	r2, [pc, #80]	; (800722c <ndefRtdText+0xc4>)
 80071da:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	330c      	adds	r3, #12
 80071e0:	617b      	str	r3, [r7, #20]

    rtdText->status = (utfEncoding << NDEF_RTD_TEXT_ENCODING_SHIFT) | (bufLanguageCode->length & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	01db      	lsls	r3, r3, #7
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	791b      	ldrb	r3, [r3, #4]
 80071ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4313      	orrs	r3, r2
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	701a      	strb	r2, [r3, #0]

    rtdText->bufLanguageCode.buffer = bufLanguageCode->buffer;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = bufLanguageCode->length;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	791a      	ldrb	r2, [r3, #4]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = bufSentence->buffer;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufSentence->length;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	08007085 	.word	0x08007085
 800722c:	080070bd 	.word	0x080070bd

08007230 <ndefGetRtdText>:


/*****************************************************************************/
ReturnCode ndefGetRtdText(const ndefType* text, uint8_t* utfEncoding, ndefConstBuffer8* bufLanguageCode, ndefConstBuffer* bufSentence)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
    const ndefTypeRtdText* rtdText;

    if ( (text        == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00c      	beq.n	800725e <ndefGetRtdText+0x2e>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d108      	bne.n	800725e <ndefGetRtdText+0x2e>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <ndefGetRtdText+0x2e>
         (utfEncoding == NULL) || (bufLanguageCode == NULL) || (bufSentence == NULL) )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <ndefGetRtdText+0x2e>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <ndefGetRtdText+0x32>
    {
        return ERR_PARAM;
 800725e:	2307      	movs	r3, #7
 8007260:	e019      	b.n	8007296 <ndefGetRtdText+0x66>
    }

    rtdText = &text->data.text;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	330c      	adds	r3, #12
 8007266:	617b      	str	r3, [r7, #20]

    *utfEncoding            = (rtdText->status >> NDEF_RTD_TEXT_ENCODING_SHIFT) & 1U;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	09db      	lsrs	r3, r3, #7
 800726e:	b2da      	uxtb	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	701a      	strb	r2, [r3, #0]

    bufLanguageCode->buffer = rtdText->bufLanguageCode.buffer;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	601a      	str	r2, [r3, #0]
    bufLanguageCode->length = rtdText->bufLanguageCode.length;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	7a1a      	ldrb	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	711a      	strb	r2, [r3, #4]

    bufSentence->buffer     = rtdText->bufSentence.buffer;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	601a      	str	r2, [r3, #0]
    bufSentence->length     = rtdText->bufSentence.length;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr

080072a0 <ndefPayloadToRtdText>:


/*****************************************************************************/
static ReturnCode ndefPayloadToRtdText(const ndefConstBuffer* bufText, ndefType* text)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
    ndefTypeRtdText* rtdText;
    uint8_t status;
    uint8_t languageCodeLength;

    if ( (bufText == NULL) || (bufText->buffer == NULL) || (bufText->length == 0U) ||
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <ndefPayloadToRtdText+0x26>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d006      	beq.n	80072c6 <ndefPayloadToRtdText+0x26>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <ndefPayloadToRtdText+0x26>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <ndefPayloadToRtdText+0x2a>
         (text    == NULL) )
    {
        return ERR_PARAM;
 80072c6:	2307      	movs	r3, #7
 80072c8:	e02d      	b.n	8007326 <ndefPayloadToRtdText+0x86>
    }

    text->id               = NDEF_TYPE_RTD_TEXT;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2202      	movs	r2, #2
 80072ce:	701a      	strb	r2, [r3, #0]
    text->getPayloadLength = ndefRtdTextPayloadGetLength;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	4a17      	ldr	r2, [pc, #92]	; (8007330 <ndefPayloadToRtdText+0x90>)
 80072d4:	605a      	str	r2, [r3, #4]
    text->getPayloadItem   = ndefRtdTextToPayloadItem;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	4a16      	ldr	r2, [pc, #88]	; (8007334 <ndefPayloadToRtdText+0x94>)
 80072da:	609a      	str	r2, [r3, #8]
    rtdText                = &text->data.text;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	330c      	adds	r3, #12
 80072e0:	60fb      	str	r3, [r7, #12]

    /* Extract info from the payload */
    status = bufText->buffer[NDEF_RTD_TEXT_STATUS_OFFSET];
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	72fb      	strb	r3, [r7, #11]

    rtdText->status = status;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	7afa      	ldrb	r2, [r7, #11]
 80072ee:	701a      	strb	r2, [r3, #0]

    /* Extract info from the status byte */
    //uint8_t textUtfEncoding          = (status & NDEF_RTD_TEXT_ENCODING_MASK) >> NDEF_RTD_TEXT_ENCODING_SHIFT;
    languageCodeLength = (status & NDEF_RTD_TEXT_LANGUAGE_CODE_LEN_MASK);
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072f6:	72bb      	strb	r3, [r7, #10]

    rtdText->bufLanguageCode.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET]);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	605a      	str	r2, [r3, #4]
    rtdText->bufLanguageCode.length = languageCodeLength;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	7aba      	ldrb	r2, [r7, #10]
 8007306:	721a      	strb	r2, [r3, #8]

    rtdText->bufSentence.buffer = &(bufText->buffer[NDEF_RTD_TEXT_LANGUAGE_OFFSET + languageCodeLength]);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	7abb      	ldrb	r3, [r7, #10]
 800730e:	3301      	adds	r3, #1
 8007310:	441a      	add	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	60da      	str	r2, [r3, #12]
    rtdText->bufSentence.length = bufText->length - sizeof(status) - languageCodeLength;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	7abb      	ldrb	r3, [r7, #10]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	1e5a      	subs	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	611a      	str	r2, [r3, #16]

    return ERR_NONE;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr
 8007330:	08007085 	.word	0x08007085
 8007334:	080070bd 	.word	0x080070bd

08007338 <ndefRecordToRtdText>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdText(const ndefRecord* record, ndefType* text)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (text == NULL) )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <ndefRecordToRtdText+0x16>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <ndefRecordToRtdText+0x1a>
    {
        return ERR_PARAM;
 800734e:	2307      	movs	r3, #7
 8007350:	e028      	b.n	80073a4 <ndefRecordToRtdText+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText)) /* "T" */
 8007352:	4a16      	ldr	r2, [pc, #88]	; (80073ac <ndefRecordToRtdText+0x74>)
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fd ffcc 	bl	80052f4 <ndefRecordTypeMatch>
 800735c:	4603      	mov	r3, r0
 800735e:	f083 0301 	eor.w	r3, r3, #1
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <ndefRecordToRtdText+0x34>
    {
        return ERR_PROTO;
 8007368:	230b      	movs	r3, #11
 800736a:	e01b      	b.n	80073a4 <ndefRecordToRtdText+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fe fecd 	bl	800610c <ndefRecordGetNdefType>
 8007372:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <ndefRecordToRtdText+0x52>
    {
        (void)ST_MEMCPY(text, ndeftype, sizeof(ndefType));
 800737a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	6838      	ldr	r0, [r7, #0]
 8007382:	f014 fc95 	bl	801bcb0 <memcpy>
        return ERR_NONE;
 8007386:	2300      	movs	r3, #0
 8007388:	e00c      	b.n	80073a4 <ndefRecordToRtdText+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_TEXT_PAYLOAD_LENGTH_MIN) /* Text Payload Min */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d801      	bhi.n	8007396 <ndefRecordToRtdText+0x5e>
    {
        return ERR_PROTO;
 8007392:	230b      	movs	r3, #11
 8007394:	e006      	b.n	80073a4 <ndefRecordToRtdText+0x6c>
    }

    return ndefPayloadToRtdText(&record->bufPayload, text);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	330c      	adds	r3, #12
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff ff7f 	bl	80072a0 <ndefPayloadToRtdText>
 80073a2:	4603      	mov	r3, r0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	0801e5c8 	.word	0x0801e5c8

080073b0 <ndefRtdTextToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdTextToRecord(const ndefType* text, ndefRecord* record)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
    if ( (text   == NULL) || (text->id != NDEF_TYPE_RTD_TEXT) ||
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <ndefRtdTextToRecord+0x1e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d102      	bne.n	80073ce <ndefRtdTextToRecord+0x1e>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <ndefRtdTextToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 80073ce:	2307      	movs	r3, #7
 80073d0:	e00c      	b.n	80073ec <ndefRtdTextToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 80073d2:	6838      	ldr	r0, [r7, #0]
 80073d4:	f7fd feb8 	bl	8005148 <ndefRecordReset>

    /* "T" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeText);
 80073d8:	4a06      	ldr	r2, [pc, #24]	; (80073f4 <ndefRtdTextToRecord+0x44>)
 80073da:	2101      	movs	r1, #1
 80073dc:	6838      	ldr	r0, [r7, #0]
 80073de:	f7fd ff34 	bl	800524a <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, text);
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	6838      	ldr	r0, [r7, #0]
 80073e6:	f7fe fe59 	bl	800609c <ndefRecordSetNdefType>

    return ERR_NONE;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	0801e5c8 	.word	0x0801e5c8

080073f8 <ndefRtdUriPayloadGetLength>:
 */


/*****************************************************************************/
static uint32_t ndefRtdUriPayloadGetLength(const ndefType* uri)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri == NULL) || (uri->id != NDEF_TYPE_RTD_URI) )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <ndefRtdUriPayloadGetLength+0x16>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d001      	beq.n	8007412 <ndefRtdUriPayloadGetLength+0x1a>
    {
        return 0;
 800740e:	2300      	movs	r3, #0
 8007410:	e005      	b.n	800741e <ndefRtdUriPayloadGetLength+0x26>
    }

    rtdUri = &uri->data.uri;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	330c      	adds	r3, #12
 8007416:	60fb      	str	r3, [r7, #12]

    return sizeof(rtdUri->protocol) + rtdUri->bufUriString.length;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	3301      	adds	r3, #1
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <ndefRtdUriToPayloadItem>:


/*****************************************************************************/
static const uint8_t* ndefRtdUriToPayloadItem(const ndefType* uri, ndefConstBuffer* bufItem, bool begin)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	71fb      	strb	r3, [r7, #7]
    static uint32_t item = 0;
    const ndefTypeRtdUri* rtdUri;

    if ( (uri     == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d006      	beq.n	800744a <ndefRtdUriToPayloadItem+0x22>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d102      	bne.n	800744a <ndefRtdUriToPayloadItem+0x22>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <ndefRtdUriToPayloadItem+0x26>
         (bufItem == NULL) )
    {
        return NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	e02d      	b.n	80074aa <ndefRtdUriToPayloadItem+0x82>
    }

    rtdUri = &uri->data.uri;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	330c      	adds	r3, #12
 8007452:	617b      	str	r3, [r7, #20]

    if (begin == true)
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <ndefRtdUriToPayloadItem+0x38>
    {
        item = 0;
 800745a:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <ndefRtdUriToPayloadItem+0x8c>)
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
    }

    switch (item)
 8007460:	4b14      	ldr	r3, [pc, #80]	; (80074b4 <ndefRtdUriToPayloadItem+0x8c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <ndefRtdUriToPayloadItem+0x46>
 8007468:	2b01      	cmp	r3, #1
 800746a:	d007      	beq.n	800747c <ndefRtdUriToPayloadItem+0x54>
 800746c:	e00f      	b.n	800748e <ndefRtdUriToPayloadItem+0x66>
    {
    case 0:
        /* Protocol byte */
        bufItem->buffer = &rtdUri->protocol;
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	601a      	str	r2, [r3, #0]
        bufItem->length = sizeof(rtdUri->protocol);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2201      	movs	r2, #1
 8007478:	605a      	str	r2, [r3, #4]
        break;
 800747a:	e00f      	b.n	800749c <ndefRtdUriToPayloadItem+0x74>

    case 1:
        /* URI string */
        bufItem->buffer = rtdUri->bufUriString.buffer;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	601a      	str	r2, [r3, #0]
        bufItem->length = rtdUri->bufUriString.length;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	605a      	str	r2, [r3, #4]
        break;
 800748c:	e006      	b.n	800749c <ndefRtdUriToPayloadItem+0x74>

    default:
        bufItem->buffer = NULL;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
        bufItem->length = 0;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
        break;
 800749a:	bf00      	nop
    }

    /* Move to next item for next call */
    item++;
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <ndefRtdUriToPayloadItem+0x8c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	4a04      	ldr	r2, [pc, #16]	; (80074b4 <ndefRtdUriToPayloadItem+0x8c>)
 80074a4:	6013      	str	r3, [r2, #0]

    return bufItem->buffer;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	681b      	ldr	r3, [r3, #0]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr
 80074b4:	20002a94 	.word	0x20002a94

080074b8 <ndefRtdUriProtocolAutodetect>:


/*****************************************************************************/
static ReturnCode ndefRtdUriProtocolAutodetect(uint8_t* protocol, ndefConstBuffer* bufUriString)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
    uint8_t i; /* Protocol fits in 1 byte */

    if ( (protocol  == NULL)                       ||
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d006      	beq.n	80074d6 <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	781b      	ldrb	r3, [r3, #0]
    if ( (protocol  == NULL)                       ||
 80074cc:	2b24      	cmp	r3, #36	; 0x24
 80074ce:	d102      	bne.n	80074d6 <ndefRtdUriProtocolAutodetect+0x1e>
         (*protocol != NDEF_URI_PREFIX_AUTODETECT) ||
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <ndefRtdUriProtocolAutodetect+0x22>
         (bufUriString == NULL) )
    {
        return ERR_PARAM;
 80074d6:	2307      	movs	r3, #7
 80074d8:	e03d      	b.n	8007556 <ndefRtdUriProtocolAutodetect+0x9e>
    }

    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
 80074de:	e033      	b.n	8007548 <ndefRtdUriProtocolAutodetect+0x90>
    {
        if (ndefUriPrefix[i].length > 0U)
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	4a1f      	ldr	r2, [pc, #124]	; (8007560 <ndefRtdUriProtocolAutodetect+0xa8>)
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	4413      	add	r3, r2
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d029      	beq.n	8007542 <ndefRtdUriProtocolAutodetect+0x8a>
        {
            if (ST_BYTECMP(bufUriString->buffer, ndefUriPrefix[i].buffer, ndefUriPrefix[i].length) == 0)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <ndefRtdUriProtocolAutodetect+0xa8>)
 80074f6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	4a18      	ldr	r2, [pc, #96]	; (8007560 <ndefRtdUriProtocolAutodetect+0xa8>)
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	4413      	add	r3, r2
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	461a      	mov	r2, r3
 8007506:	f014 fbc5 	bl	801bc94 <memcmp>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d118      	bne.n	8007542 <ndefRtdUriProtocolAutodetect+0x8a>
            {
                *protocol = i;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	7bfa      	ldrb	r2, [r7, #15]
 8007514:	701a      	strb	r2, [r3, #0]
                /* Move after the protocol string */
                bufUriString->buffer  = &bufUriString->buffer[ndefUriPrefix[i].length];
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	4910      	ldr	r1, [pc, #64]	; (8007560 <ndefRtdUriProtocolAutodetect+0xa8>)
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	440b      	add	r3, r1
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	441a      	add	r2, r3
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	601a      	str	r2, [r3, #0]
                bufUriString->length -= ndefUriPrefix[i].length;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	490b      	ldr	r1, [pc, #44]	; (8007560 <ndefRtdUriProtocolAutodetect+0xa8>)
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	440b      	add	r3, r1
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	1ad2      	subs	r2, r2, r3
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	605a      	str	r2, [r3, #4]
                return ERR_NONE;
 800753e:	2300      	movs	r3, #0
 8007540:	e009      	b.n	8007556 <ndefRtdUriProtocolAutodetect+0x9e>
    for (i = 0; i < NDEF_URI_PREFIX_COUNT; i++)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	3301      	adds	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b24      	cmp	r3, #36	; 0x24
 800754c:	d9c8      	bls.n	80074e0 <ndefRtdUriProtocolAutodetect+0x28>
            }
        }
    }

    *protocol = NDEF_URI_PREFIX_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]

    return ERR_NOTFOUND;
 8007554:	2316      	movs	r3, #22
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	0801e760 	.word	0x0801e760

08007564 <ndefRtdUri>:


/*****************************************************************************/
ReturnCode ndefRtdUri(ndefType* uri, uint8_t protocol, const ndefConstBuffer* bufUriString)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	460b      	mov	r3, r1
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	72fb      	strb	r3, [r7, #11]
    ndefTypeRtdUri* rtdUri;
    ndefConstBuffer bufUri;
    uint8_t protocolDetect;

    if ( (uri == NULL) || (protocol >= NDEF_URI_PREFIX_COUNT) ||
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00d      	beq.n	8007594 <ndefRtdUri+0x30>
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	2b24      	cmp	r3, #36	; 0x24
 800757c:	d80a      	bhi.n	8007594 <ndefRtdUri+0x30>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <ndefRtdUri+0x30>
         (bufUriString == NULL) || (bufUriString->buffer == NULL) || (bufUriString->length == 0U) )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <ndefRtdUri+0x30>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <ndefRtdUri+0x34>
    {
        return ERR_PARAM;
 8007594:	2307      	movs	r3, #7
 8007596:	e028      	b.n	80075ea <ndefRtdUri+0x86>
    }

    uri->id               = NDEF_TYPE_RTD_URI;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2203      	movs	r2, #3
 800759c:	701a      	strb	r2, [r3, #0]
    uri->getPayloadLength = ndefRtdUriPayloadGetLength;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a14      	ldr	r2, [pc, #80]	; (80075f4 <ndefRtdUri+0x90>)
 80075a2:	605a      	str	r2, [r3, #4]
    uri->getPayloadItem   = ndefRtdUriToPayloadItem;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4a14      	ldr	r2, [pc, #80]	; (80075f8 <ndefRtdUri+0x94>)
 80075a8:	609a      	str	r2, [r3, #8]
    rtdUri                = &uri->data.uri;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	330c      	adds	r3, #12
 80075ae:	61fb      	str	r3, [r7, #28]

    bufUri.buffer = bufUriString->buffer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	617b      	str	r3, [r7, #20]
    bufUri.length = bufUriString->length;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	61bb      	str	r3, [r7, #24]
    protocolDetect = protocol;
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	74fb      	strb	r3, [r7, #19]
    if (protocol == NDEF_URI_PREFIX_AUTODETECT)
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	2b24      	cmp	r3, #36	; 0x24
 80075c4:	d107      	bne.n	80075d6 <ndefRtdUri+0x72>
    {
        /* Update protocol and URI buffer */
        (void)ndefRtdUriProtocolAutodetect(&protocolDetect, &bufUri);
 80075c6:	f107 0214 	add.w	r2, r7, #20
 80075ca:	f107 0313 	add.w	r3, r7, #19
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ff71 	bl	80074b8 <ndefRtdUriProtocolAutodetect>
    }
    rtdUri->protocol = protocolDetect;
 80075d6:	7cfa      	ldrb	r2, [r7, #19]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	701a      	strb	r2, [r3, #0]

    rtdUri->bufUriString.buffer = bufUri.buffer;
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	605a      	str	r2, [r3, #4]
    rtdUri->bufUriString.length = bufUri.length;
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	609a      	str	r2, [r3, #8]

    return ERR_NONE;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	080073f9 	.word	0x080073f9
 80075f8:	08007429 	.word	0x08007429

080075fc <ndefGetRtdUri>:


/*****************************************************************************/
ReturnCode ndefGetRtdUri(const ndefType* uri, ndefConstBuffer* bufProtocol, ndefConstBuffer* bufUriString)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
    const ndefTypeRtdUri* rtdUri;

    if ( (uri         == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <ndefGetRtdUri+0x26>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d105      	bne.n	8007622 <ndefGetRtdUri+0x26>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <ndefGetRtdUri+0x26>
         (bufProtocol == NULL) || (bufUriString == NULL) )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <ndefGetRtdUri+0x2a>
    {
        return ERR_PARAM;
 8007622:	2307      	movs	r3, #7
 8007624:	e01b      	b.n	800765e <ndefGetRtdUri+0x62>
    }

    rtdUri = &uri->data.uri;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	330c      	adds	r3, #12
 800762a:	617b      	str	r3, [r7, #20]

    bufProtocol->buffer   = ndefUriPrefix[rtdUri->protocol].buffer;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <ndefGetRtdUri+0x6c>)
 8007634:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	601a      	str	r2, [r3, #0]
    bufProtocol->length   = ndefUriPrefix[rtdUri->protocol].length;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	4a09      	ldr	r2, [pc, #36]	; (8007668 <ndefGetRtdUri+0x6c>)
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	4413      	add	r3, r2
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	605a      	str	r2, [r3, #4]

    bufUriString->buffer = rtdUri->bufUriString.buffer;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	601a      	str	r2, [r3, #0]
    bufUriString->length = rtdUri->bufUriString.length;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr
 8007668:	0801e760 	.word	0x0801e760

0800766c <ndefPayloadToRtdUri>:

/*****************************************************************************/
static ReturnCode ndefPayloadToRtdUri(const ndefConstBuffer* bufUri, ndefType* uri)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
    uint8_t protocol;

    if ( (bufUri == NULL) || (bufUri->buffer == NULL) || (bufUri->length == 0U) ||
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <ndefPayloadToRtdUri+0x26>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <ndefPayloadToRtdUri+0x26>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <ndefPayloadToRtdUri+0x26>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <ndefPayloadToRtdUri+0x2a>
         (uri    == NULL) )
    {
        return ERR_PARAM;
 8007692:	2307      	movs	r3, #7
 8007694:	e013      	b.n	80076be <ndefPayloadToRtdUri+0x52>
    }

    /* Extract info from the payload */
    protocol = bufUri->buffer[NDEF_RTD_URI_ID_CODE_OFFSET];
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	75fb      	strb	r3, [r7, #23]

    ndefConstBuffer bufStringUri;
    bufStringUri.buffer = &bufUri->buffer[NDEF_RTD_URI_FIELD_OFFSET];
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
    bufStringUri.length =  bufUri->length - sizeof(protocol);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	613b      	str	r3, [r7, #16]

    return ndefRtdUri(uri, protocol, &bufStringUri);
 80076ae:	f107 020c 	add.w	r2, r7, #12
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6838      	ldr	r0, [r7, #0]
 80076b8:	f7ff ff54 	bl	8007564 <ndefRtdUri>
 80076bc:	4603      	mov	r3, r0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <ndefRecordToRtdUri>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdUri(const ndefRecord* record, ndefType* uri)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
    const ndefType* ndeftype;

    if ( (record == NULL) || (uri == NULL) )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <ndefRecordToRtdUri+0x16>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <ndefRecordToRtdUri+0x1a>
    {
        return ERR_PARAM;
 80076de:	2307      	movs	r3, #7
 80076e0:	e028      	b.n	8007734 <ndefRecordToRtdUri+0x6c>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri)) /* "U" */
 80076e2:	4a16      	ldr	r2, [pc, #88]	; (800773c <ndefRecordToRtdUri+0x74>)
 80076e4:	2101      	movs	r1, #1
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fd fe04 	bl	80052f4 <ndefRecordTypeMatch>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f083 0301 	eor.w	r3, r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <ndefRecordToRtdUri+0x34>
    {
        return ERR_PROTO;
 80076f8:	230b      	movs	r3, #11
 80076fa:	e01b      	b.n	8007734 <ndefRecordToRtdUri+0x6c>
    }

    ndeftype = ndefRecordGetNdefType(record);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fe fd05 	bl	800610c <ndefRecordGetNdefType>
 8007702:	60f8      	str	r0, [r7, #12]
    if (ndeftype != NULL)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <ndefRecordToRtdUri+0x52>
    {
        (void)ST_MEMCPY(uri, ndeftype, sizeof(ndefType));
 800770a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	6838      	ldr	r0, [r7, #0]
 8007712:	f014 facd 	bl	801bcb0 <memcpy>
        return ERR_NONE;
 8007716:	2300      	movs	r3, #0
 8007718:	e00c      	b.n	8007734 <ndefRecordToRtdUri+0x6c>
    }

    if (record->bufPayload.length < NDEF_RTD_URI_PAYLOAD_LENGTH_MIN)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d801      	bhi.n	8007726 <ndefRecordToRtdUri+0x5e>
    {
        return ERR_PROTO;
 8007722:	230b      	movs	r3, #11
 8007724:	e006      	b.n	8007734 <ndefRecordToRtdUri+0x6c>
    }

    return ndefPayloadToRtdUri(&record->bufPayload, uri);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	330c      	adds	r3, #12
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff ff9d 	bl	800766c <ndefPayloadToRtdUri>
 8007732:	4603      	mov	r3, r0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	0801e5d0 	.word	0x0801e5d0

08007740 <ndefRtdUriToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdUriToRecord(const ndefType* uri, ndefRecord* record)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
    if ( (uri    == NULL) || (uri->id != NDEF_TYPE_RTD_URI) ||
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d006      	beq.n	800775e <ndefRtdUriToRecord+0x1e>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b03      	cmp	r3, #3
 8007756:	d102      	bne.n	800775e <ndefRtdUriToRecord+0x1e>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <ndefRtdUriToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 800775e:	2307      	movs	r3, #7
 8007760:	e00c      	b.n	800777c <ndefRtdUriToRecord+0x3c>
    }

    (void)ndefRecordReset(record);
 8007762:	6838      	ldr	r0, [r7, #0]
 8007764:	f7fd fcf0 	bl	8005148 <ndefRecordReset>

    /* "U" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_WELL_KNOWN_TYPE, &bufRtdTypeUri);
 8007768:	4a06      	ldr	r2, [pc, #24]	; (8007784 <ndefRtdUriToRecord+0x44>)
 800776a:	2101      	movs	r1, #1
 800776c:	6838      	ldr	r0, [r7, #0]
 800776e:	f7fd fd6c 	bl	800524a <ndefRecordSetType>

    (void)ndefRecordSetNdefType(record, uri);
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	6838      	ldr	r0, [r7, #0]
 8007776:	f7fe fc91 	bl	800609c <ndefRecordSetNdefType>

    return ERR_NONE;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	0801e5d0 	.word	0x0801e5d0

08007788 <ndefRtdAar>:
 */


/*****************************************************************************/
ReturnCode ndefRtdAar(ndefType* aar, const ndefConstBuffer* bufPayload)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
    ndefTypeRtdAar* rtdAar;

    if ( (aar == NULL) ||
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00a      	beq.n	80077ae <ndefRtdAar+0x26>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <ndefRtdAar+0x26>
         (bufPayload == NULL) || (bufPayload->buffer == NULL) || (bufPayload->length == 0U) )
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <ndefRtdAar+0x26>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <ndefRtdAar+0x2a>
    {
        return ERR_PARAM;
 80077ae:	2307      	movs	r3, #7
 80077b0:	e01a      	b.n	80077e8 <ndefRtdAar+0x60>
    }

    aar->id               = NDEF_TYPE_RTD_AAR;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2204      	movs	r2, #4
 80077b6:	701a      	strb	r2, [r3, #0]
    aar->getPayloadLength = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	605a      	str	r2, [r3, #4]
    aar->getPayloadItem   = NULL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	609a      	str	r2, [r3, #8]
    rtdAar                = &aar->data.aar;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	330c      	adds	r3, #12
 80077c8:	60fb      	str	r3, [r7, #12]

    rtdAar->bufType.buffer    = bufRtdTypeAar.buffer;
 80077ca:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <ndefRtdAar+0x6c>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	601a      	str	r2, [r3, #0]
    rtdAar->bufType.length    = bufRtdTypeAar.length;
 80077d0:	220f      	movs	r2, #15
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	711a      	strb	r2, [r3, #4]
    rtdAar->bufPayload.buffer = bufPayload->buffer;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	609a      	str	r2, [r3, #8]
    rtdAar->bufPayload.length = bufPayload->length;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	60da      	str	r2, [r3, #12]

    return ERR_NONE;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	0801e5b0 	.word	0x0801e5b0

080077f8 <ndefGetRtdAar>:


/*****************************************************************************/
ReturnCode ndefGetRtdAar(const ndefType* aar, ndefConstBuffer* bufAarString)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar          == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <ndefGetRtdAar+0x1e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b04      	cmp	r3, #4
 800780e:	d102      	bne.n	8007816 <ndefGetRtdAar+0x1e>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <ndefGetRtdAar+0x22>
         (bufAarString == NULL) )
    {
        return ERR_PARAM;
 8007816:	2307      	movs	r3, #7
 8007818:	e00b      	b.n	8007832 <ndefGetRtdAar+0x3a>
    }

    rtdAar = &aar->data.aar;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	330c      	adds	r3, #12
 800781e:	60fb      	str	r3, [r7, #12]

    bufAarString->buffer = rtdAar->bufPayload.buffer;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	601a      	str	r2, [r3, #0]
    bufAarString->length = rtdAar->bufPayload.length;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	605a      	str	r2, [r3, #4]

    return ERR_NONE;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <ndefRecordToRtdAar>:


/*****************************************************************************/
ReturnCode ndefRecordToRtdAar(const ndefRecord* record, ndefType* aar)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
    if ( (record == NULL) || (aar == NULL) )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <ndefRecordToRtdAar+0x16>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <ndefRecordToRtdAar+0x1a>
    {
        return ERR_PARAM;
 8007852:	2307      	movs	r3, #7
 8007854:	e013      	b.n	800787e <ndefRecordToRtdAar+0x42>
    }

    if ( ! ndefRecordTypeMatch(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar)) /* "android.com:pkg" */
 8007856:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <ndefRecordToRtdAar+0x4c>)
 8007858:	2104      	movs	r1, #4
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fd fd4a 	bl	80052f4 <ndefRecordTypeMatch>
 8007860:	4603      	mov	r3, r0
 8007862:	f083 0301 	eor.w	r3, r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <ndefRecordToRtdAar+0x34>
    {
        return ERR_PROTO;
 800786c:	230b      	movs	r3, #11
 800786e:	e006      	b.n	800787e <ndefRecordToRtdAar+0x42>
    }

    /* No constraint on payload length */

    return ndefRtdAar(aar, &record->bufPayload);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	330c      	adds	r3, #12
 8007874:	4619      	mov	r1, r3
 8007876:	6838      	ldr	r0, [r7, #0]
 8007878:	f7ff ff86 	bl	8007788 <ndefRtdAar>
 800787c:	4603      	mov	r3, r0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	0801e5d8 	.word	0x0801e5d8

0800788c <ndefRtdAarToRecord>:


/*****************************************************************************/
ReturnCode ndefRtdAarToRecord(const ndefType* aar, ndefRecord* record)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
    const ndefTypeRtdAar* rtdAar;

    if ( (aar    == NULL) || (aar->id != NDEF_TYPE_RTD_AAR) ||
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d006      	beq.n	80078aa <ndefRtdAarToRecord+0x1e>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d102      	bne.n	80078aa <ndefRtdAarToRecord+0x1e>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <ndefRtdAarToRecord+0x22>
         (record == NULL) )
    {
        return ERR_PARAM;
 80078aa:	2307      	movs	r3, #7
 80078ac:	e011      	b.n	80078d2 <ndefRtdAarToRecord+0x46>
    }

    rtdAar = &aar->data.aar;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	330c      	adds	r3, #12
 80078b2:	60fb      	str	r3, [r7, #12]

    (void)ndefRecordReset(record);
 80078b4:	6838      	ldr	r0, [r7, #0]
 80078b6:	f7fd fc47 	bl	8005148 <ndefRecordReset>

    /* "android.com:pkg" */
    (void)ndefRecordSetType(record, NDEF_TNF_RTD_EXTERNAL_TYPE, &bufRtdTypeAar);
 80078ba:	4a08      	ldr	r2, [pc, #32]	; (80078dc <ndefRtdAarToRecord+0x50>)
 80078bc:	2104      	movs	r1, #4
 80078be:	6838      	ldr	r0, [r7, #0]
 80078c0:	f7fd fcc3 	bl	800524a <ndefRecordSetType>

    (void)ndefRecordSetPayload(record, &rtdAar->bufPayload);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3308      	adds	r3, #8
 80078c8:	4619      	mov	r1, r3
 80078ca:	6838      	ldr	r0, [r7, #0]
 80078cc:	f7fd fd92 	bl	80053f4 <ndefRecordSetPayload>

    return ERR_NONE;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	0801e5d8 	.word	0x0801e5d8

080078e0 <ndefPollerContextInitialization>:
 */


/*******************************************************************************/
ReturnCode ndefPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
#else
        NULL,
#endif
    };

    if( (ctx == NULL) || (dev == NULL) )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <ndefPollerContextInitialization+0x16>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <ndefPollerContextInitialization+0x1a>
    {
        return ERR_PARAM;
 80078f6:	2307      	movs	r3, #7
 80078f8:	e019      	b.n	800792e <ndefPollerContextInitialization+0x4e>
    }
    
    ctx->ndefPollWrapper = ndefPollerWrappers[ndefPollerGetDeviceType(dev)];
 80078fa:	6838      	ldr	r0, [r7, #0]
 80078fc:	f000 fa02 	bl	8007d04 <ndefPollerGetDeviceType>
 8007900:	4603      	mov	r3, r0
 8007902:	461a      	mov	r2, r3
 8007904:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <ndefPollerContextInitialization+0x58>)
 8007906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    
    /* ndefPollWrapper is NULL when support of a given tag type is not enabled */
    if( ctx->ndefPollWrapper == NULL )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <ndefPollerContextInitialization+0x3e>
    {
        return ERR_NOTSUPP;
 800791a:	2318      	movs	r3, #24
 800791c:	e007      	b.n	800792e <ndefPollerContextInitialization+0x4e>
    }
    
    return (ctx->ndefPollWrapper->pollerContextInitialization)(ctx, dev);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
 800792c:	4603      	mov	r3, r0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000100 	.word	0x20000100

0800793c <ndefPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <ndefPollerNdefDetect+0x14>
    {
        return ERR_PARAM;
 800794c:	2307      	movs	r3, #7
 800794e:	e00e      	b.n	800796e <ndefPollerNdefDetect+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <ndefPollerNdefDetect+0x22>
    { 
        return ERR_WRONG_STATE;
 800795a:	2321      	movs	r3, #33	; 0x21
 800795c:	e007      	b.n	800796e <ndefPollerNdefDetect+0x32>
    }
   
    return (ctx->ndefPollWrapper->pollerNdefDetect)(ctx, info);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	4798      	blx	r3
 800796c:	4603      	mov	r3, r0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <ndefPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 8007976:	b590      	push	{r4, r7, lr}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <ndefPollerReadRawMessage+0x18>
    {
        return ERR_PARAM;
 800798a:	2307      	movs	r3, #7
 800798c:	e010      	b.n	80079b0 <ndefPollerReadRawMessage+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <ndefPollerReadRawMessage+0x26>
    { 
        return ERR_WRONG_STATE;
 8007998:	2321      	movs	r3, #33	; 0x21
 800799a:	e009      	b.n	80079b0 <ndefPollerReadRawMessage+0x3a>
    }

    return (ctx->ndefPollWrapper->pollerReadRawMessage)(ctx, buf, bufLen, rcvdLen);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079a2:	68dc      	ldr	r4, [r3, #12]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	47a0      	blx	r4
 80079ae:	4603      	mov	r3, r0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd90      	pop	{r4, r7, pc}

080079b8 <ndefPollerWriteRawMessage>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <ndefPollerWriteRawMessage+0x16>
    {
        return ERR_PARAM;
 80079ca:	2307      	movs	r3, #7
 80079cc:	e00f      	b.n	80079ee <ndefPollerWriteRawMessage+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <ndefPollerWriteRawMessage+0x24>
    { 
        return ERR_WRONG_STATE;
 80079d8:	2321      	movs	r3, #33	; 0x21
 80079da:	e008      	b.n	80079ee <ndefPollerWriteRawMessage+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteRawMessage)(ctx, buf, bufLen);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	4798      	blx	r3
 80079ec:	4603      	mov	r3, r0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <ndefPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
    if( ctx == NULL )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <ndefPollerTagFormat+0x16>
    {
        return ERR_PARAM;
 8007a08:	2307      	movs	r3, #7
 8007a0a:	e00f      	b.n	8007a2c <ndefPollerTagFormat+0x36>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <ndefPollerTagFormat+0x24>
    { 
        return ERR_WRONG_STATE;
 8007a16:	2321      	movs	r3, #33	; 0x21
 8007a18:	e008      	b.n	8007a2c <ndefPollerTagFormat+0x36>
    }
  
    return (ctx->ndefPollWrapper->pollerTagFormat)(ctx, cc, options);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <ndefPollerWriteBytes>:
    return (ctx->ndefPollWrapper->pollerWriteRawMessageLen)(ctx, rawMessageLen);
}

/*******************************************************************************/
ReturnCode ndefPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 8007a34:	b590      	push	{r4, r7, lr}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
    if( ctx == NULL )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <ndefPollerWriteBytes+0x18>
    {
        return ERR_PARAM;
 8007a48:	2307      	movs	r3, #7
 8007a4a:	e010      	b.n	8007a6e <ndefPollerWriteBytes+0x3a>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <ndefPollerWriteBytes+0x26>
    { 
        return ERR_WRONG_STATE;
 8007a56:	2321      	movs	r3, #33	; 0x21
 8007a58:	e009      	b.n	8007a6e <ndefPollerWriteBytes+0x3a>
    }
  
    return (ctx->ndefPollWrapper->pollerWriteBytes)(ctx, offset, buf, len);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a60:	691c      	ldr	r4, [r3, #16]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	47a0      	blx	r4
 8007a6c:	4603      	mov	r3, r0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd90      	pop	{r4, r7, pc}

08007a76 <ndefPollerCheckAvailableSpace>:
    return (ctx->ndefPollWrapper->pollerCheckPresence)(ctx);
}

/*******************************************************************************/
ReturnCode ndefPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <ndefPollerCheckAvailableSpace+0x14>
    {
        return ERR_PARAM;
 8007a86:	2307      	movs	r3, #7
 8007a88:	e00e      	b.n	8007aa8 <ndefPollerCheckAvailableSpace+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <ndefPollerCheckAvailableSpace+0x22>
    { 
        return ERR_WRONG_STATE;
 8007a94:	2321      	movs	r3, #33	; 0x21
 8007a96:	e007      	b.n	8007aa8 <ndefPollerCheckAvailableSpace+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerCheckAvailableSpace)(ctx, messageLen);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <ndefPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <ndefPollerBeginWriteMessage+0x14>
    {
        return ERR_PARAM;
 8007ac0:	2307      	movs	r3, #7
 8007ac2:	e00e      	b.n	8007ae2 <ndefPollerBeginWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <ndefPollerBeginWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 8007ace:	2321      	movs	r3, #33	; 0x21
 8007ad0:	e007      	b.n	8007ae2 <ndefPollerBeginWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerBeginWriteMessage)(ctx, messageLen);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	4603      	mov	r3, r0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <ndefPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
    if( ctx == NULL )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <ndefPollerEndWriteMessage+0x14>
    {
        return ERR_PARAM;
 8007afa:	2307      	movs	r3, #7
 8007afc:	e00e      	b.n	8007b1c <ndefPollerEndWriteMessage+0x32>
    }
    
    if( ctx->ndefPollWrapper == NULL )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <ndefPollerEndWriteMessage+0x22>
    { 
        return ERR_WRONG_STATE;
 8007b08:	2321      	movs	r3, #33	; 0x21
 8007b0a:	e007      	b.n	8007b1c <ndefPollerEndWriteMessage+0x32>
    }
  
    return (ctx->ndefPollWrapper->pollerEndWriteMessage)(ctx, messageLen);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
 8007b1a:	4603      	mov	r3, r0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <ndefPollerWriteMessage>:

/*******************************************************************************/
ReturnCode ndefPollerWriteMessage(ndefContext *ctx, const ndefMessage* message)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
    ndefBuffer      bufHeader;
    ndefConstBuffer bufPayloadItem;
    uint32_t        offset;
    bool            firstPayloadItem;

    if ( (ctx == NULL) || (message == NULL) )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <ndefPollerWriteMessage+0x16>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <ndefPollerWriteMessage+0x1a>
    {
        return ERR_PARAM;
 8007b3a:	2307      	movs	r3, #7
 8007b3c:	e0de      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
    }

    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d006      	beq.n	8007b56 <ndefPollerWriteMessage+0x32>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d001      	beq.n	8007b56 <ndefPollerWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 8007b52:	2321      	movs	r3, #33	; 0x21
 8007b54:	e0d2      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
    }

    (void)ndefMessageGetInfo(message, &info);
 8007b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6838      	ldr	r0, [r7, #0]
 8007b5e:	f7fd f9af 	bl	8004ec0 <ndefMessageGetInfo>

    /* Verify length of the NDEF message */
    err = ndefPollerCheckAvailableSpace(ctx, info.length);
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff ff85 	bl	8007a76 <ndefPollerCheckAvailableSpace>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 8007b70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <ndefPollerWriteMessage+0x56>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 8007b76:	2307      	movs	r3, #7
 8007b78:	e0c0      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
    }

    /* Reset L-Field/NLEN field */
    err = ndefPollerBeginWriteMessage(ctx, info.length);
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff ff96 	bl	8007ab0 <ndefPollerBeginWriteMessage>
 8007b84:	4603      	mov	r3, r0
 8007b86:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (err != ERR_NONE)
 8007b88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <ndefPollerWriteMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return err;
 8007b96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b98:	e0b0      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
    }

    if (info.length != 0U)
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 80ac 	beq.w	8007cfa <ndefPollerWriteMessage+0x1d6>
    {
        offset = ctx->messageOffset;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba8:	633b      	str	r3, [r7, #48]	; 0x30
        record = ndefMessageGetFirstRecord(message);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <ndefPollerWriteMessage+0x92>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	e000      	b.n	8007bb8 <ndefPollerWriteMessage+0x94>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34

        while (record != NULL)
 8007bba:	e08a      	b.n	8007cd2 <ndefPollerWriteMessage+0x1ae>
        {
            bufHeader.buffer = recordHeaderBuf;
 8007bbc:	f107 031c 	add.w	r3, r7, #28
 8007bc0:	617b      	str	r3, [r7, #20]
            bufHeader.length = sizeof(recordHeaderBuf);
 8007bc2:	2307      	movs	r3, #7
 8007bc4:	61bb      	str	r3, [r7, #24]
            (void)ndefRecordEncodeHeader(record, &bufHeader);
 8007bc6:	f107 0314 	add.w	r3, r7, #20
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007bce:	f7fd fd61 	bl	8005694 <ndefRecordEncodeHeader>
            err = ndefPollerWriteBytes(ctx, offset, bufHeader.buffer, bufHeader.length);
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff ff2b 	bl	8007a34 <ndefPollerWriteBytes>
 8007bde:	4603      	mov	r3, r0
 8007be0:	85bb      	strh	r3, [r7, #44]	; 0x2c
            if (err != ERR_NONE)
 8007be2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <ndefPollerWriteMessage+0xc8>
            {
                return err;
 8007be8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bea:	e087      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
            }
            offset += bufHeader.length;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf0:	4413      	add	r3, r2
 8007bf2:	633b      	str	r3, [r7, #48]	; 0x30
            // TODO Use API to access record internal
            if (record->typeLength != 0U)
 8007bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d018      	beq.n	8007c2e <ndefPollerWriteMessage+0x10a>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->type, record->typeLength);
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff ff14 	bl	8007a34 <ndefPollerWriteBytes>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 8007c10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d005      	beq.n	8007c22 <ndefPollerWriteMessage+0xfe>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 8007c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c20:	e06c      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->typeLength;
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	461a      	mov	r2, r3
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	4413      	add	r3, r2
 8007c2c:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (record->idLength != 0U)
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c30:	789b      	ldrb	r3, [r3, #2]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d018      	beq.n	8007c68 <ndefPollerWriteMessage+0x144>
            {
                err = ndefPollerWriteBytes(ctx, offset, record->id, record->idLength);
 8007c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	789b      	ldrb	r3, [r3, #2]
 8007c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff fef7 	bl	8007a34 <ndefPollerWriteBytes>
 8007c46:	4603      	mov	r3, r0
 8007c48:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (err != ERR_NONE)
 8007c4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <ndefPollerWriteMessage+0x138>
                {
                    /* Conclude procedure */
                    ctx->state = NDEF_STATE_INVALID;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    return err;
 8007c58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c5a:	e04f      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
                }
                offset += record->idLength;
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	789b      	ldrb	r3, [r3, #2]
 8007c60:	461a      	mov	r2, r3
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	4413      	add	r3, r2
 8007c66:	633b      	str	r3, [r7, #48]	; 0x30
            }
            if (ndefRecordGetPayloadLength(record) != 0U)
 8007c68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c6a:	f7fd fe5a 	bl	8005922 <ndefRecordGetPayloadLength>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d026      	beq.n	8007cc2 <ndefPollerWriteMessage+0x19e>
            {
                firstPayloadItem = true;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 8007c7a:	e017      	b.n	8007cac <ndefPollerWriteMessage+0x188>
                {
                    firstPayloadItem = false;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    err = ndefPollerWriteBytes(ctx, offset, bufPayloadItem.buffer, bufPayloadItem.length);
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff fed3 	bl	8007a34 <ndefPollerWriteBytes>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    if (err != ERR_NONE)
 8007c92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <ndefPollerWriteMessage+0x180>
                    {
                        /* Conclude procedure */
                        ctx->state = NDEF_STATE_INVALID;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        return err;
 8007ca0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ca2:	e02b      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
                    }
                    offset += bufPayloadItem.length;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca8:	4413      	add	r3, r2
 8007caa:	633b      	str	r3, [r7, #48]	; 0x30
                while (ndefRecordGetPayloadItem(record, &bufPayloadItem, firstPayloadItem) != NULL)
 8007cac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cb8:	f7fd fe56 	bl	8005968 <ndefRecordGetPayloadItem>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1dc      	bne.n	8007c7c <ndefPollerWriteMessage+0x158>
                }
            }
            record = ndefMessageGetNextRecord(record);
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <ndefPollerWriteMessage+0x1aa>
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	e000      	b.n	8007cd0 <ndefPollerWriteMessage+0x1ac>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
        while (record != NULL)
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f47f af71 	bne.w	8007bbc <ndefPollerWriteMessage+0x98>
        }

        err = ndefPollerEndWriteMessage(ctx, info.length);
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff ff03 	bl	8007aea <ndefPollerEndWriteMessage>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (err != ERR_NONE)
 8007ce8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <ndefPollerWriteMessage+0x1d6>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return err;
 8007cf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007cf8:	e000      	b.n	8007cfc <ndefPollerWriteMessage+0x1d8>
        }
    }

    return ERR_NONE;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3738      	adds	r7, #56	; 0x38
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <ndefPollerGetDeviceType>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ndefDeviceType ndefPollerGetDeviceType(const rfalNfcDevice *dev)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
    ndefDeviceType type;
    
    if( dev == NULL )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <ndefPollerGetDeviceType+0x14>
    {
        type = NDEF_DEV_NONE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
 8007d16:	e032      	b.n	8007d7e <ndefPollerGetDeviceType+0x7a>
    }
    else
    {
        switch( dev->type )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d82b      	bhi.n	8007d78 <ndefPollerGetDeviceType+0x74>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <ndefPollerGetDeviceType+0x24>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d67 	.word	0x08007d67
 8007d30:	08007d6d 	.word	0x08007d6d
 8007d34:	08007d73 	.word	0x08007d73
        {
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            switch( dev->dev.nfca.type )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	d00b      	beq.n	8007d58 <ndefPollerGetDeviceType+0x54>
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	dc0c      	bgt.n	8007d5e <ndefPollerGetDeviceType+0x5a>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <ndefPollerGetDeviceType+0x4e>
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d108      	bne.n	8007d5e <ndefPollerGetDeviceType+0x5a>
            {
                case RFAL_NFCA_T1T:
                    type = NDEF_DEV_T1T;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
                    break; 
 8007d50:	e008      	b.n	8007d64 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T2T:
                    type = NDEF_DEV_T2T;
 8007d52:	2302      	movs	r3, #2
 8007d54:	73fb      	strb	r3, [r7, #15]
                    break;
 8007d56:	e005      	b.n	8007d64 <ndefPollerGetDeviceType+0x60>
                case RFAL_NFCA_T4T:
                    type = NDEF_DEV_T4T;
 8007d58:	2304      	movs	r3, #4
 8007d5a:	73fb      	strb	r3, [r7, #15]
                    break;
 8007d5c:	e002      	b.n	8007d64 <ndefPollerGetDeviceType+0x60>
                default:
                    type = NDEF_DEV_NONE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
                    break;
 8007d62:	bf00      	nop
            }
            break;
 8007d64:	e00b      	b.n	8007d7e <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            type = NDEF_DEV_T4T;
 8007d66:	2304      	movs	r3, #4
 8007d68:	73fb      	strb	r3, [r7, #15]
            break;
 8007d6a:	e008      	b.n	8007d7e <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            type = NDEF_DEV_T3T;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	73fb      	strb	r3, [r7, #15]
            break;
 8007d70:	e005      	b.n	8007d7e <ndefPollerGetDeviceType+0x7a>
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            type = NDEF_DEV_T5T;
 8007d72:	2305      	movs	r3, #5
 8007d74:	73fb      	strb	r3, [r7, #15]
            break;
 8007d76:	e002      	b.n	8007d7e <ndefPollerGetDeviceType+0x7a>
        default:
            type = NDEF_DEV_NONE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
            break;
 8007d7c:	bf00      	nop
        }
    }
    return type;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop

08007d8c <ndefT2TPollerReadBlock>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT2TPollerReadBlock(ndefContext *ctx, uint16_t blockAddr, uint8_t *buf)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	460b      	mov	r3, r1
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;
    uint16_t             rcvdLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <ndefT2TPollerReadBlock+0x2a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <ndefT2TPollerReadBlock+0x2a>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <ndefT2TPollerReadBlock+0x2a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <ndefT2TPollerReadBlock+0x2e>
    {
        return ERR_PARAM;
 8007db6:	2307      	movs	r3, #7
 8007db8:	e02c      	b.n	8007e14 <ndefT2TPollerReadBlock+0x88>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 8007dba:	897b      	ldrh	r3, [r7, #10]
 8007dbc:	0a1b      	lsrs	r3, r3, #8
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 8007dc2:	897b      	ldrh	r3, [r7, #10]
 8007dc4:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8007dcc:	7dfa      	ldrb	r2, [r7, #23]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d00e      	beq.n	8007df0 <ndefT2TPollerReadBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f012 fa53 	bl	801a280 <rfalT2TPollerSectorSelect>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 8007dde:	8abb      	ldrh	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <ndefT2TPollerReadBlock+0x5c>
        {
            return ret;
 8007de4:	8abb      	ldrh	r3, [r7, #20]
 8007de6:	e015      	b.n	8007e14 <ndefT2TPollerReadBlock+0x88>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	7dfa      	ldrb	r2, [r7, #23]
 8007dec:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerRead(blNo, buf, NDEF_T2T_READ_RESP_SIZE, &rcvdLen);
 8007df0:	f107 0312 	add.w	r3, r7, #18
 8007df4:	7db8      	ldrb	r0, [r7, #22]
 8007df6:	2210      	movs	r2, #16
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	f012 f9cd 	bl	801a198 <rfalT2TPollerRead>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	82bb      	strh	r3, [r7, #20]

    if( (ret == ERR_NONE) && (rcvdLen != NDEF_T2T_READ_RESP_SIZE) )
 8007e02:	8abb      	ldrh	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <ndefT2TPollerReadBlock+0x86>
 8007e08:	8a7b      	ldrh	r3, [r7, #18]
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d001      	beq.n	8007e12 <ndefT2TPollerReadBlock+0x86>
    {
        return ERR_PROTO;
 8007e0e:	230b      	movs	r3, #11
 8007e10:	e000      	b.n	8007e14 <ndefT2TPollerReadBlock+0x88>
    }

    return ret;
 8007e12:	8abb      	ldrh	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <ndefT2TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	61bb      	str	r3, [r7, #24]
    uint16_t             blockAddr;
    uint8_t              byteNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) || (offset > NDEF_T2T_MAX_OFFSET) )
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00e      	beq.n	8007e5a <ndefT2TPollerReadBytes+0x3e>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <ndefT2TPollerReadBytes+0x3e>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <ndefT2TPollerReadBytes+0x3e>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <ndefT2TPollerReadBytes+0x3e>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f5b3 3f7f 	cmp.w	r3, #261120	; 0x3fc00
 8007e58:	d901      	bls.n	8007e5e <ndefT2TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 8007e5a:	2307      	movs	r3, #7
 8007e5c:	e0a7      	b.n	8007fae <ndefT2TPollerReadBytes+0x192>
    }

    if( (offset >= ctx->subCtx.t2t.cacheAddr) && (offset < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) && ((offset + len) < (ctx->subCtx.t2t.cacheAddr + NDEF_T2T_READ_RESP_SIZE)) )
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d31e      	bcc.n	8007ea8 <ndefT2TPollerReadBytes+0x8c>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007e70:	3310      	adds	r3, #16
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d217      	bcs.n	8007ea8 <ndefT2TPollerReadBytes+0x8c>
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	441a      	add	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007e84:	3310      	adds	r3, #16
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d20e      	bcs.n	8007ea8 <ndefT2TPollerReadBytes+0x8c>
    {
        /* data in cache buffer */
        (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[offset - ctx->subCtx.t2t.cacheAddr], len);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	33b0      	adds	r3, #176	; 0xb0
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3305      	adds	r3, #5
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	69b8      	ldr	r0, [r7, #24]
 8007ea2:	f013 ff05 	bl	801bcb0 <memcpy>
 8007ea6:	e07b      	b.n	8007fa0 <ndefT2TPollerReadBytes+0x184>
    }
    else
    {
        do {
            blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	82fb      	strh	r3, [r7, #22]
            byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	757b      	strb	r3, [r7, #21]
            le = (lvLen < NDEF_T2T_READ_RESP_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_READ_RESP_SIZE;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b0f      	cmp	r3, #15
 8007ebc:	d802      	bhi.n	8007ec4 <ndefT2TPollerReadBytes+0xa8>
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	e000      	b.n	8007ec6 <ndefT2TPollerReadBytes+0xaa>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( (byteNo != 0U ) || (lvLen < NDEF_T2T_READ_RESP_SIZE) )
 8007eca:	7d7b      	ldrb	r3, [r7, #21]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d102      	bne.n	8007ed6 <ndefT2TPollerReadBytes+0xba>
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	d834      	bhi.n	8007f40 <ndefT2TPollerReadBytes+0x124>
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 8007edc:	8afb      	ldrh	r3, [r7, #22]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff ff53 	bl	8007d8c <ndefT2TPollerReadBlock>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 8007eea:	8a7b      	ldrh	r3, [r7, #18]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <ndefT2TPollerReadBytes+0xe2>
                {
                    ndefT2TInvalidateCache(ctx);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                    return ret;
 8007efa:	8a7b      	ldrh	r3, [r7, #18]
 8007efc:	e057      	b.n	8007fae <ndefT2TPollerReadBytes+0x192>
                }
                ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 8007efe:	8afb      	ldrh	r3, [r7, #22]
 8007f00:	009a      	lsls	r2, r3, #2
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                if( (NDEF_T2T_READ_RESP_SIZE - byteNo) < le )
 8007f08:	7d7b      	ldrb	r3, [r7, #21]
 8007f0a:	f1c3 0210 	rsb	r2, r3, #16
 8007f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d204      	bcs.n	8007f20 <ndefT2TPollerReadBytes+0x104>
                {
                    le = NDEF_T2T_READ_RESP_SIZE - byteNo;
 8007f16:	7d7b      	ldrb	r3, [r7, #21]
 8007f18:	f1c3 0310 	rsb	r3, r3, #16
 8007f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                if( le > 0U)
 8007f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d029      	beq.n	8007f7c <ndefT2TPollerReadBytes+0x160>
                {
                    (void)ST_MEMCPY(lvBuf, &ctx->subCtx.t2t.cacheBuf[byteNo], le);
 8007f28:	7d7b      	ldrb	r3, [r7, #21]
 8007f2a:	33b0      	adds	r3, #176	; 0xb0
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	3305      	adds	r3, #5
 8007f32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f36:	4619      	mov	r1, r3
 8007f38:	69b8      	ldr	r0, [r7, #24]
 8007f3a:	f013 feb9 	bl	801bcb0 <memcpy>
                if( le > 0U)
 8007f3e:	e01d      	b.n	8007f7c <ndefT2TPollerReadBytes+0x160>
                }
            }
            else
            {
                ret = ndefT2TPollerReadBlock(ctx, blockAddr, lvBuf);
 8007f40:	8afb      	ldrh	r3, [r7, #22]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4619      	mov	r1, r3
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff ff20 	bl	8007d8c <ndefT2TPollerReadBlock>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	827b      	strh	r3, [r7, #18]
                if( ret != ERR_NONE )
 8007f50:	8a7b      	ldrh	r3, [r7, #18]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <ndefT2TPollerReadBytes+0x13e>
                {
                    return ret;
 8007f56:	8a7b      	ldrh	r3, [r7, #18]
 8007f58:	e029      	b.n	8007fae <ndefT2TPollerReadBytes+0x192>
                }
                if( lvLen == le )
 8007f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d10b      	bne.n	8007f7c <ndefT2TPollerReadBytes+0x160>
                {
                    /* cache the last read block */
                    (void)ST_MEMCPY(&ctx->subCtx.t2t.cacheBuf[0], lvBuf, NDEF_T2T_READ_RESP_SIZE);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	33b5      	adds	r3, #181	; 0xb5
 8007f68:	2210      	movs	r2, #16
 8007f6a:	69b9      	ldr	r1, [r7, #24]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f013 fe9f 	bl	801bcb0 <memcpy>
                    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 8007f72:	8afb      	ldrh	r3, [r7, #22]
 8007f74:	009a      	lsls	r2, r3, #2
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                }
            }
            lvBuf     = &lvBuf[le];
 8007f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4413      	add	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
            lvOffset += le;
 8007f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f8a:	6a3a      	ldr	r2, [r7, #32]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	623b      	str	r3, [r7, #32]
            lvLen    -= le;
 8007f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	61fb      	str	r3, [r7, #28]

        } while( lvLen != 0U );
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d183      	bne.n	8007ea8 <ndefT2TPollerReadBytes+0x8c>
    }

    if( rcvdLen != NULL )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <ndefT2TPollerReadBytes+0x190>
    {
        *rcvdLen = len;
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	601a      	str	r2, [r3, #0]
    }
    return ERR_NONE;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3728      	adds	r7, #40	; 0x28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <ndefT2TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT2TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT2TisT2TDevice(dev) )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <ndefT2TPollerContextInitialization+0x26>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <ndefT2TPollerContextInitialization+0x26>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <ndefT2TPollerContextInitialization+0x26>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <ndefT2TPollerContextInitialization+0x2a>
    {
        return ERR_PARAM;
 8007fdc:	2307      	movs	r3, #7
 8007fde:	e013      	b.n	8008008 <ndefT2TPollerContextInitialization+0x52>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2278      	movs	r2, #120	; 0x78
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f013 fe62 	bl	801bcb0 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t2t.currentSecNo = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ndefT2TInvalidateCache(ctx);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8008002:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   return ERR_NONE;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <ndefT2TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT2TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af02      	add	r7, sp, #8
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
    uint8_t              data[2];
    uint32_t             offset;
    uint16_t             lenTLV;
    uint8_t              typeTLV;

    if( info != NULL )
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d011      	beq.n	8008044 <ndefT2TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2200      	movs	r2, #0
 8008030:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2200      	movs	r2, #0
 8008036:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <ndefT2TPollerNdefDetect+0x4a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d103      	bne.n	800805a <ndefT2TPollerNdefDetect+0x4a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <ndefT2TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 800805a:	2307      	movs	r3, #7
 800805c:	e134      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
    }

    ctx->state = NDEF_STATE_INVALID;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Read CC TS T2T v1.0 7.5.1.1 */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	339c      	adds	r3, #156	; 0x9c
 800806a:	2200      	movs	r2, #0
 800806c:	9200      	str	r2, [sp, #0]
 800806e:	2204      	movs	r2, #4
 8008070:	210c      	movs	r1, #12
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fed2 	bl	8007e1c <ndefT2TPollerReadBytes>
 8008078:	4603      	mov	r3, r0
 800807a:	823b      	strh	r3, [r7, #16]
    if( ret != ERR_NONE )
 800807c:	8a3b      	ldrh	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <ndefT2TPollerNdefDetect+0x76>
    {
        /* Conclude procedure */
        return ret;
 8008082:	8a3b      	ldrh	r3, [r7, #16]
 8008084:	e120      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
    }
    ctx->cc.t2t.magicNumber  = ctx->ccBuf[NDEF_T2T_CC_0];
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t2t.majorVersion = ndefMajorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008098:	091b      	lsrs	r3, r3, #4
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t2t.minorVersion = ndefMinorVersion(ctx->ccBuf[NDEF_T2T_CC_1]);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t2t.size         = ctx->ccBuf[NDEF_T2T_CC_2];
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t2t.readAccess   = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] >> 4U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80080c6:	091b      	lsrs	r3, r3, #4
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    ctx->cc.t2t.writeAccess  = (uint8_t)(ctx->ccBuf[NDEF_T2T_CC_3] & 0xFU);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    ctx->areaLen = (uint32_t)ctx->cc.t2t.size * NDEF_T2T_SIZE_DIVIDER;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80080e8:	00da      	lsls	r2, r3, #3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    /* Check version number TS T2T v1.0 7.5.1.2 */
    if( (ctx->cc.t2t.magicNumber != NDEF_T2T_MAGIC) || (ctx->cc.t2t.majorVersion > ndefMajorVersion(NDEF_T2T_VERSION_1_0)) )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80080f6:	2be1      	cmp	r3, #225	; 0xe1
 80080f8:	d104      	bne.n	8008104 <ndefT2TPollerNdefDetect+0xf4>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008100:	2b01      	cmp	r3, #1
 8008102:	d901      	bls.n	8008108 <ndefT2TPollerNdefDetect+0xf8>
    {
        /* Conclude procedure TS T2T v1.0 7.5.1.2 */
        return ERR_REQUEST;
 8008104:	2305      	movs	r3, #5
 8008106:	e0df      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
    }
    /* Search for NDEF message TLV TS T2T v1.0 7.5.1.3 */
    offset = NDEF_T2T_AREA_OFFSET;
 8008108:	2310      	movs	r3, #16
 800810a:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 800810c:	e0d1      	b.n	80082b2 <ndefT2TPollerNdefDetect+0x2a2>
    {
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 800810e:	f107 030c 	add.w	r3, r7, #12
 8008112:	2200      	movs	r2, #0
 8008114:	9200      	str	r2, [sp, #0]
 8008116:	2201      	movs	r2, #1
 8008118:	6979      	ldr	r1, [r7, #20]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fe7e 	bl	8007e1c <ndefT2TPollerReadBytes>
 8008120:	4603      	mov	r3, r0
 8008122:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 8008124:	8a3b      	ldrh	r3, [r7, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <ndefT2TPollerNdefDetect+0x11e>
        {
            /* Conclude procedure */
            return ret;
 800812a:	8a3b      	ldrh	r3, [r7, #16]
 800812c:	e0cc      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
        }
        typeTLV = data[0];
 800812e:	7b3b      	ldrb	r3, [r7, #12]
 8008130:	73fb      	strb	r3, [r7, #15]
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b03      	cmp	r3, #3
 8008136:	d103      	bne.n	8008140 <ndefT2TPollerNdefDetect+0x130>
        {
            ctx->subCtx.t2t.offsetNdefTLV = offset;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        }
        offset++;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	3301      	adds	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
        if( typeTLV == NDEF_T2T_TLV_TERMINATOR )
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	2bfe      	cmp	r3, #254	; 0xfe
 800814a:	f000 80bb 	beq.w	80082c4 <ndefT2TPollerNdefDetect+0x2b4>
        {
            break;
        }
        if( typeTLV == NDEF_T2T_TLV_NULL )
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d100      	bne.n	8008156 <ndefT2TPollerNdefDetect+0x146>
        {
            continue;
 8008154:	e0ad      	b.n	80082b2 <ndefT2TPollerNdefDetect+0x2a2>
        }
        /* read TLV Len */
        ret = ndefT2TPollerReadBytes(ctx, offset, 1, data, NULL);
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	2200      	movs	r2, #0
 800815c:	9200      	str	r2, [sp, #0]
 800815e:	2201      	movs	r2, #1
 8008160:	6979      	ldr	r1, [r7, #20]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fe5a 	bl	8007e1c <ndefT2TPollerReadBytes>
 8008168:	4603      	mov	r3, r0
 800816a:	823b      	strh	r3, [r7, #16]
        if( ret != ERR_NONE )
 800816c:	8a3b      	ldrh	r3, [r7, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <ndefT2TPollerNdefDetect+0x166>
        {
            /* Conclude procedure */
            return ret;
 8008172:	8a3b      	ldrh	r3, [r7, #16]
 8008174:	e0a8      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset++;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	3301      	adds	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
        lenTLV = data[0];
 800817c:	7b3b      	ldrb	r3, [r7, #12]
 800817e:	827b      	strh	r3, [r7, #18]
        if( lenTLV == NDEF_T2T_3_BYTES_TLV_LEN )
 8008180:	8a7b      	ldrh	r3, [r7, #18]
 8008182:	2bff      	cmp	r3, #255	; 0xff
 8008184:	d11d      	bne.n	80081c2 <ndefT2TPollerNdefDetect+0x1b2>
        {
            ret = ndefT2TPollerReadBytes(ctx, offset, 2, data, NULL);
 8008186:	f107 030c 	add.w	r3, r7, #12
 800818a:	2200      	movs	r2, #0
 800818c:	9200      	str	r2, [sp, #0]
 800818e:	2202      	movs	r2, #2
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff fe42 	bl	8007e1c <ndefT2TPollerReadBytes>
 8008198:	4603      	mov	r3, r0
 800819a:	823b      	strh	r3, [r7, #16]
            if( ret != ERR_NONE )
 800819c:	8a3b      	ldrh	r3, [r7, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <ndefT2TPollerNdefDetect+0x196>
            {
                /* Conclude procedure */
                return ret;
 80081a2:	8a3b      	ldrh	r3, [r7, #16]
 80081a4:	e090      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
            }
            offset += 2U;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	3302      	adds	r3, #2
 80081aa:	617b      	str	r3, [r7, #20]
            lenTLV = GETU16(&data[0]);
 80081ac:	7b3b      	ldrb	r3, [r7, #12]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	b21a      	sxth	r2, r3
 80081b2:	f107 030c 	add.w	r3, r7, #12
 80081b6:	3301      	adds	r3, #1
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b21b      	sxth	r3, r3
 80081bc:	4313      	orrs	r3, r2
 80081be:	b21b      	sxth	r3, r3
 80081c0:	827b      	strh	r3, [r7, #18]
        }

        if( (typeTLV == NDEF_T2T_TLV_LOCK_CTRL) || (typeTLV == NDEF_T2T_TLV_MEMORY_CTRL) )
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d002      	beq.n	80081ce <ndefT2TPollerNdefDetect+0x1be>
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d101      	bne.n	80081d2 <ndefT2TPollerNdefDetect+0x1c2>
        {
            /* No support of Lock control or Memory control in this version */
            return ERR_REQUEST;
 80081ce:	2305      	movs	r3, #5
 80081d0:	e07a      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
        }
        /* NDEF message present TLV TS T2T v1.0 7.5.1.4 */
        if( typeTLV == NDEF_T2T_TLV_NDEF_MESSAGE )
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d168      	bne.n	80082aa <ndefT2TPollerNdefDetect+0x29a>
        {
            /* Read length TS T2T v1.0 7.5.1.5 */
            ctx->messageLen    = lenTLV;
 80081d8:	8a7a      	ldrh	r2, [r7, #18]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            ctx->messageOffset = offset;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            if( ctx->messageLen == 0U )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d110      	bne.n	8008214 <ndefT2TPollerNdefDetect+0x204>
            {
                if( !(ndefT2TIsReadWriteAccessGranted(ctx)) )
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <ndefT2TPollerNdefDetect+0x1f6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <ndefT2TPollerNdefDetect+0x1fa>
                {
                    /* Conclude procedure  */
                    return ERR_REQUEST;
 8008206:	2305      	movs	r3, #5
 8008208:	e05e      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
                }
                 /* Empty message found TS T2T v1.0 7.5.1.6 & TS T2T v1.0 7.4.2.1 */
                ctx->state = NDEF_STATE_INITIALIZED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8008212:	e01e      	b.n	8008252 <ndefT2TPollerNdefDetect+0x242>
            }
            else
            {
                if( (ndefT2TIsReadWriteAccessGranted(ctx)) )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <ndefT2TPollerNdefDetect+0x222>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <ndefT2TPollerNdefDetect+0x222>
                {
                    /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.3.1 */
                    ctx->state = NDEF_STATE_READWRITE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8008230:	e00f      	b.n	8008252 <ndefT2TPollerNdefDetect+0x242>
                }
                else
                {
                    if( !(ndefT2TIsReadOnlyAccessGranted(ctx)) )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008238:	2b00      	cmp	r3, #0
 800823a:	d104      	bne.n	8008246 <ndefT2TPollerNdefDetect+0x236>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008242:	2b0f      	cmp	r3, #15
 8008244:	d001      	beq.n	800824a <ndefT2TPollerNdefDetect+0x23a>
                    {
                        /* Conclude procedure  */
                        return ERR_REQUEST;
 8008246:	2305      	movs	r3, #5
 8008248:	e03e      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
                    }
                     /* Empty message found TS T2T v1.0 7.5.1.7 & TS T2T v1.0 7.4.4.1 */
                    ctx->state = NDEF_STATE_READONLY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2203      	movs	r2, #3
 800824e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                }
            }
            if( info != NULL )
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d026      	beq.n	80082a6 <ndefT2TPollerNdefDetect+0x296>
            {
                info->state                = ctx->state;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	741a      	strb	r2, [r3, #16]
                info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8008268:	091b      	lsrs	r3, r3, #4
 800826a:	b2da      	uxtb	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	701a      	strb	r2, [r3, #0]
                info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	705a      	strb	r2, [r3, #1]
                info->areaLen              = ctx->areaLen;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	605a      	str	r2, [r3, #4]
                info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008296:	1ad2      	subs	r2, r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	609a      	str	r2, [r3, #8]
                info->messageLen           = ctx->messageLen;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	60da      	str	r2, [r3, #12]
            }
            return ERR_NONE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e00e      	b.n	80082c8 <ndefT2TPollerNdefDetect+0x2b8>
        }
        offset += lenTLV;
 80082aa:	8a7b      	ldrh	r3, [r7, #18]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4413      	add	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]
    while ( (offset < (NDEF_T2T_AREA_OFFSET + ctx->areaLen)) )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082b8:	3310      	adds	r3, #16
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	429a      	cmp	r2, r3
 80082be:	f4ff af26 	bcc.w	800810e <ndefT2TPollerNdefDetect+0xfe>
 80082c2:	e000      	b.n	80082c6 <ndefT2TPollerNdefDetect+0x2b6>
            break;
 80082c4:	bf00      	nop
    }
    return ERR_REQUEST;
 80082c6:	2305      	movs	r3, #5
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <ndefT2TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <ndefT2TPollerReadRawMessage+0x2a>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <ndefT2TPollerReadRawMessage+0x2a>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <ndefT2TPollerReadRawMessage+0x2a>
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <ndefT2TPollerReadRawMessage+0x2e>
    {
        return ERR_PARAM;
 80082fa:	2307      	movs	r3, #7
 80082fc:	e024      	b.n	8008348 <ndefT2TPollerReadRawMessage+0x78>

    /* TS T2T v1.0 7.5.2.1: T2T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T2T v1.0 7.5.2.3: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008304:	2b01      	cmp	r3, #1
 8008306:	d801      	bhi.n	800830c <ndefT2TPollerReadRawMessage+0x3c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 8008308:	2321      	movs	r3, #33	; 0x21
 800830a:	e01d      	b.n	8008348 <ndefT2TPollerReadRawMessage+0x78>
    }

    if( ctx->messageLen > bufLen )
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d201      	bcs.n	800831c <ndefT2TPollerReadRawMessage+0x4c>
    {
        return ERR_NOMEM;
 8008318:	2301      	movs	r3, #1
 800831a:	e015      	b.n	8008348 <ndefT2TPollerReadRawMessage+0x78>
    }

    /* Current implementation does not support Rsvd_area */
    ret = ndefT2TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fd74 	bl	8007e1c <ndefT2TPollerReadBytes>
 8008334:	4603      	mov	r3, r0
 8008336:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8008338:	8afb      	ldrh	r3, [r7, #22]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <ndefT2TPollerReadRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 8008346:	8afb      	ldrh	r3, [r7, #22]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <ndefT2TPollerWriteBlock>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT2TPollerWriteBlock(ndefContext *ctx, uint16_t blockAddr, const uint8_t *buf)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	460b      	mov	r3, r1
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	817b      	strh	r3, [r7, #10]
    ReturnCode           ret;
    uint8_t              secNo;
    uint8_t              blNo;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (buf == NULL) )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <ndefT2TPollerWriteBlock+0x2a>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d106      	bne.n	800837a <ndefT2TPollerWriteBlock+0x2a>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <ndefT2TPollerWriteBlock+0x2a>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <ndefT2TPollerWriteBlock+0x2e>
    {
        return ERR_PARAM;
 800837a:	2307      	movs	r3, #7
 800837c:	e022      	b.n	80083c4 <ndefT2TPollerWriteBlock+0x74>
    }

    secNo = (uint8_t)(blockAddr >> 8U);
 800837e:	897b      	ldrh	r3, [r7, #10]
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	b29b      	uxth	r3, r3
 8008384:	75fb      	strb	r3, [r7, #23]
    blNo  = (uint8_t)blockAddr;
 8008386:	897b      	ldrh	r3, [r7, #10]
 8008388:	75bb      	strb	r3, [r7, #22]

    if( secNo != ctx->subCtx.t2t.currentSecNo )
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8008390:	7dfa      	ldrb	r2, [r7, #23]
 8008392:	429a      	cmp	r2, r3
 8008394:	d00e      	beq.n	80083b4 <ndefT2TPollerWriteBlock+0x64>
    {
        ret = rfalT2TPollerSectorSelect(secNo);
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	4618      	mov	r0, r3
 800839a:	f011 ff71 	bl	801a280 <rfalT2TPollerSectorSelect>
 800839e:	4603      	mov	r3, r0
 80083a0:	82bb      	strh	r3, [r7, #20]
        if( ret != ERR_NONE )
 80083a2:	8abb      	ldrh	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <ndefT2TPollerWriteBlock+0x5c>
        {
            return ret;
 80083a8:	8abb      	ldrh	r3, [r7, #20]
 80083aa:	e00b      	b.n	80083c4 <ndefT2TPollerWriteBlock+0x74>
        }
        ctx->subCtx.t2t.currentSecNo = secNo;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	7dfa      	ldrb	r2, [r7, #23]
 80083b0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    ret = rfalT2TPollerWrite(blNo, buf);
 80083b4:	7dbb      	ldrb	r3, [r7, #22]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f011 ff29 	bl	801a210 <rfalT2TPollerWrite>
 80083be:	4603      	mov	r3, r0
 80083c0:	82bb      	strh	r3, [r7, #20]

    return ret;
 80083c2:	8abb      	ldrh	r3, [r7, #20]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <ndefT2TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08e      	sub	sp, #56	; 0x38
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint32_t             lvOffset = offset;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t             lvLen    = len;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	633b      	str	r3, [r7, #48]	; 0x30
    const uint8_t *      lvBuf    = buf;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t             blockAddr;
    uint8_t              byteNo;
    uint8_t              le;
    uint8_t              tempBuf[NDEF_T2T_READ_RESP_SIZE];

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || (lvLen == 0U) )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <ndefT2TPollerWriteBytes+0x36>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <ndefT2TPollerWriteBytes+0x36>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <ndefT2TPollerWriteBytes+0x36>
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <ndefT2TPollerWriteBytes+0x3a>
    {
        return ERR_PARAM;
 8008402:	2307      	movs	r3, #7
 8008404:	e076      	b.n	80084f4 <ndefT2TPollerWriteBytes+0x128>
    }

    ndefT2TInvalidateCache(ctx);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    do
    {
        blockAddr = (uint16_t)(lvOffset / NDEF_T2T_BLOCK_SIZE);
 8008410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008412:	089b      	lsrs	r3, r3, #2
 8008414:	853b      	strh	r3, [r7, #40]	; 0x28
        byteNo    =  (uint8_t)(lvOffset % NDEF_T2T_BLOCK_SIZE);
 8008416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 0303 	and.w	r3, r3, #3
 800841e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        le = (lvLen < NDEF_T2T_BLOCK_SIZE) ? (uint8_t)lvLen : (uint8_t)NDEF_T2T_BLOCK_SIZE;
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	2b03      	cmp	r3, #3
 8008426:	d802      	bhi.n	800842e <ndefT2TPollerWriteBytes+0x62>
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	b2db      	uxtb	r3, r3
 800842c:	e000      	b.n	8008430 <ndefT2TPollerWriteBytes+0x64>
 800842e:	2304      	movs	r3, #4
 8008430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if( (byteNo != 0U ) || (lvLen < NDEF_T2T_BLOCK_SIZE) )
 8008434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <ndefT2TPollerWriteBytes+0x76>
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	2b03      	cmp	r3, #3
 8008440:	d838      	bhi.n	80084b4 <ndefT2TPollerWriteBytes+0xe8>
        {
            ret = ndefT2TPollerReadBlock(ctx, blockAddr, tempBuf);
 8008442:	f107 0214 	add.w	r2, r7, #20
 8008446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008448:	4619      	mov	r1, r3
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fc9e 	bl	8007d8c <ndefT2TPollerReadBlock>
 8008450:	4603      	mov	r3, r0
 8008452:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 8008454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <ndefT2TPollerWriteBytes+0x92>
            {
                return ret;
 800845a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800845c:	e04a      	b.n	80084f4 <ndefT2TPollerWriteBytes+0x128>
            }
            if( (NDEF_T2T_BLOCK_SIZE - byteNo) < le )
 800845e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008462:	f1c3 0204 	rsb	r2, r3, #4
 8008466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800846a:	429a      	cmp	r2, r3
 800846c:	d205      	bcs.n	800847a <ndefT2TPollerWriteBytes+0xae>
            {
                le = NDEF_T2T_BLOCK_SIZE - byteNo;
 800846e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008472:	f1c3 0304 	rsb	r3, r3, #4
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }
            if( le > 0U )
 800847a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <ndefT2TPollerWriteBytes+0xcc>
            {
                (void)ST_MEMCPY(&tempBuf[byteNo], lvBuf, le);
 8008482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008486:	f107 0214 	add.w	r2, r7, #20
 800848a:	4413      	add	r3, r2
 800848c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008492:	4618      	mov	r0, r3
 8008494:	f013 fc0c 	bl	801bcb0 <memcpy>
            }
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, tempBuf);
 8008498:	f107 0214 	add.w	r2, r7, #20
 800849c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800849e:	4619      	mov	r1, r3
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff ff55 	bl	8008350 <ndefT2TPollerWriteBlock>
 80084a6:	4603      	mov	r3, r0
 80084a8:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 80084aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00e      	beq.n	80084ce <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 80084b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084b2:	e01f      	b.n	80084f4 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        else
        {
            ret = ndefT2TPollerWriteBlock(ctx, blockAddr, lvBuf);
 80084b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b8:	4619      	mov	r1, r3
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff ff48 	bl	8008350 <ndefT2TPollerWriteBlock>
 80084c0:	4603      	mov	r3, r0
 80084c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret != ERR_NONE )
 80084c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <ndefT2TPollerWriteBytes+0x102>
            {
                return ret;
 80084ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084cc:	e012      	b.n	80084f4 <ndefT2TPollerWriteBytes+0x128>
            }
        }
        lvBuf     = &lvBuf[le];
 80084ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084d4:	4413      	add	r3, r2
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        lvOffset += le;
 80084d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084de:	4413      	add	r3, r2
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
        lvLen    -= le;
 80084e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	633b      	str	r3, [r7, #48]	; 0x30

    } while( lvLen != 0U );
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d18e      	bne.n	8008410 <ndefT2TPollerWriteBytes+0x44>

    return ERR_NONE;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3738      	adds	r7, #56	; 0x38
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <ndefT2TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T2T_BLOCK_SIZE];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d007      	beq.n	800851c <ndefT2TPollerWriteRawMessageLen+0x20>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d103      	bne.n	800851c <ndefT2TPollerWriteRawMessageLen+0x20>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <ndefT2TPollerWriteRawMessageLen+0x24>
    {
        return ERR_PARAM;
 800851c:	2307      	movs	r3, #7
 800851e:	e07d      	b.n	800861c <ndefT2TPollerWriteRawMessageLen+0x120>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008526:	2b01      	cmp	r3, #1
 8008528:	d006      	beq.n	8008538 <ndefT2TPollerWriteRawMessageLen+0x3c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008530:	2b02      	cmp	r3, #2
 8008532:	d001      	beq.n	8008538 <ndefT2TPollerWriteRawMessageLen+0x3c>
    {
        return ERR_WRONG_STATE;
 8008534:	2321      	movs	r3, #33	; 0x21
 8008536:	e071      	b.n	800861c <ndefT2TPollerWriteRawMessageLen+0x120>
    }
    dataIt = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
    buf[dataIt] = NDEF_T2T_TLV_NDEF_MESSAGE;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	f107 0210 	add.w	r2, r7, #16
 8008542:	4413      	add	r3, r2
 8008544:	2203      	movs	r2, #3
 8008546:	f803 2c08 	strb.w	r2, [r3, #-8]
    dataIt++;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	3301      	adds	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
    if( rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN )
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2bfe      	cmp	r3, #254	; 0xfe
 8008554:	d80b      	bhi.n	800856e <ndefT2TPollerWriteRawMessageLen+0x72>
    {
        buf[dataIt] = (uint8_t) rawMessageLen;
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	f107 0110 	add.w	r1, r7, #16
 8008560:	440b      	add	r3, r1
 8008562:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	3301      	adds	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
 800856c:	e016      	b.n	800859c <ndefT2TPollerWriteRawMessageLen+0xa0>
    }
    else
    {
        buf[dataIt] = (uint8_t) (rawMessageLen >> 8U);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	0a1a      	lsrs	r2, r3, #8
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	b2d2      	uxtb	r2, r2
 8008576:	f107 0110 	add.w	r1, r7, #16
 800857a:	440b      	add	r3, r1
 800857c:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	3301      	adds	r3, #1
 8008584:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t) rawMessageLen;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	f107 0110 	add.w	r1, r7, #16
 8008590:	440b      	add	r3, r1
 8008592:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	3301      	adds	r3, #1
 800859a:	73fb      	strb	r3, [r7, #15]
    }
    if( rawMessageLen == 0U )
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <ndefT2TPollerWriteRawMessageLen+0xba>
    {
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	f107 0210 	add.w	r2, r7, #16
 80085a8:	4413      	add	r3, r2
 80085aa:	22fe      	movs	r2, #254	; 0xfe
 80085ac:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	3301      	adds	r3, #1
 80085b4:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT2TPollerWriteBytes(ctx, ctx->subCtx.t2t.offsetNdefTLV, buf, dataIt);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	f107 0208 	add.w	r2, r7, #8
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff ff02 	bl	80083cc <ndefT2TPollerWriteBytes>
 80085c8:	4603      	mov	r3, r0
 80085ca:	81bb      	strh	r3, [r7, #12]
    if( (ret != ERR_NONE) && (rawMessageLen != 0U) && ((ctx->messageOffset + rawMessageLen) < ctx->areaLen) )
 80085cc:	89bb      	ldrh	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d023      	beq.n	800861a <ndefT2TPollerWriteRawMessageLen+0x11e>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d020      	beq.n	800861a <ndefT2TPollerWriteRawMessageLen+0x11e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	441a      	add	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d216      	bcs.n	800861a <ndefT2TPollerWriteRawMessageLen+0x11e>
    {
        /* Write Terminator TLV */
        dataIt = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = NDEF_T2T_TLV_TERMINATOR;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	f107 0210 	add.w	r2, r7, #16
 80085f6:	4413      	add	r3, r2
 80085f8:	22fe      	movs	r2, #254	; 0xfe
 80085fa:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	3301      	adds	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
        (void)ndefT2TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, buf, dataIt );
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	18d1      	adds	r1, r2, r3
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	f107 0208 	add.w	r2, r7, #8
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff fed9 	bl	80083cc <ndefT2TPollerWriteBytes>
    }

    return ret;
 800861a:	89bb      	ldrh	r3, [r7, #12]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <ndefT2TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00d      	beq.n	8008652 <ndefT2TPollerWriteRawMessage+0x2e>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <ndefT2TPollerWriteRawMessage+0x2e>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d105      	bne.n	8008652 <ndefT2TPollerWriteRawMessage+0x2e>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <ndefT2TPollerWriteRawMessage+0x32>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <ndefT2TPollerWriteRawMessage+0x32>
    {
        return ERR_PARAM;
 8008652:	2307      	movs	r3, #7
 8008654:	e04b      	b.n	80086ee <ndefT2TPollerWriteRawMessage+0xca>

    /* TS T2T v1.0 7.5.3.1/2: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T2T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800865c:	2b01      	cmp	r3, #1
 800865e:	d006      	beq.n	800866e <ndefT2TPollerWriteRawMessage+0x4a>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008666:	2b02      	cmp	r3, #2
 8008668:	d001      	beq.n	800866e <ndefT2TPollerWriteRawMessage+0x4a>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800866a:	2321      	movs	r3, #33	; 0x21
 800866c:	e03f      	b.n	80086ee <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.3: verify available space */
    ret = ndefT2TPollerCheckAvailableSpace(ctx, bufLen);
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f92c 	bl	80088ce <ndefT2TPollerCheckAvailableSpace>
 8008676:	4603      	mov	r3, r0
 8008678:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800867a:	8afb      	ldrh	r3, [r7, #22]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <ndefT2TPollerWriteRawMessage+0x60>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 8008680:	2307      	movs	r3, #7
 8008682:	e034      	b.n	80086ee <ndefT2TPollerWriteRawMessage+0xca>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0                */
    /* and update ctx->messageOffset according to L-field len */
    ret = ndefT2TPollerBeginWriteMessage(ctx, bufLen);
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f957 	bl	800893a <ndefT2TPollerBeginWriteMessage>
 800868c:	4603      	mov	r3, r0
 800868e:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8008690:	8afb      	ldrh	r3, [r7, #22]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <ndefT2TPollerWriteRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800869e:	8afb      	ldrh	r3, [r7, #22]
 80086a0:	e025      	b.n	80086ee <ndefT2TPollerWriteRawMessage+0xca>
    }

    if( bufLen != 0U )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d021      	beq.n	80086ec <ndefT2TPollerWriteRawMessage+0xc8>
    {
       /* TS T2T v1.0 7.5.3.5: write new NDEF message */
        ret = ndefT2TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7ff fe8a 	bl	80083cc <ndefT2TPollerWriteBytes>
 80086b8:	4603      	mov	r3, r0
 80086ba:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 80086bc:	8afb      	ldrh	r3, [r7, #22]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <ndefT2TPollerWriteRawMessage+0xaa>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 80086ca:	8afb      	ldrh	r3, [r7, #22]
 80086cc:	e00f      	b.n	80086ee <ndefT2TPollerWriteRawMessage+0xca>
        }

        /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
        ret = ndefT2TPollerEndWriteMessage(ctx, bufLen);
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f984 	bl	80089de <ndefT2TPollerEndWriteMessage>
 80086d6:	4603      	mov	r3, r0
 80086d8:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 80086da:	8afb      	ldrh	r3, [r7, #22]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <ndefT2TPollerWriteRawMessage+0xc8>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 80086e8:	8afb      	ldrh	r3, [r7, #22]
 80086ea:	e000      	b.n	80086ee <ndefT2TPollerWriteRawMessage+0xca>
        }
    }

    return ret;
 80086ec:	8afb      	ldrh	r3, [r7, #22]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <ndefT2TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT2TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
    uint8_t              dataIt;
    static const uint8_t emptyNdef[] = {NDEF_T2T_TLV_NDEF_MESSAGE, 0x00U, NDEF_T2T_TLV_TERMINATOR, 0x00U};

    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <ndefT2TPollerTagFormat+0x22>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d103      	bne.n	800871a <ndefT2TPollerTagFormat+0x22>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <ndefT2TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 800871a:	2307      	movs	r3, #7
 800871c:	e0a0      	b.n	8008860 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Read CC area
     */
    ret = ndefT2TPollerReadBytes(ctx, NDEF_T2T_CC_OFFSET, NDEF_T2T_CC_LEN, ctx->ccBuf, NULL);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	339c      	adds	r3, #156	; 0x9c
 8008722:	2200      	movs	r2, #0
 8008724:	9200      	str	r2, [sp, #0]
 8008726:	2204      	movs	r2, #4
 8008728:	210c      	movs	r1, #12
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fb76 	bl	8007e1c <ndefT2TPollerReadBytes>
 8008730:	4603      	mov	r3, r0
 8008732:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8008734:	8afb      	ldrh	r3, [r7, #22]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <ndefT2TPollerTagFormat+0x46>
    {
        return ret;
 800873a:	8afb      	ldrh	r3, [r7, #22]
 800873c:	e090      	b.n	8008860 <ndefT2TPollerTagFormat+0x168>
    }

    ndefT2TInvalidateCache(ctx);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f04f 32ff 	mov.w	r2, #4294967295
 8008744:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /*
     * Write CC only in case of virgin CC area
     */
    if( (ctx->ccBuf[NDEF_T2T_CC_0] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_1] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_2] == 0U) && (ctx->ccBuf[NDEF_T2T_CC_3] == 0U) )
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d17e      	bne.n	8008850 <ndefT2TPollerTagFormat+0x158>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008758:	2b00      	cmp	r3, #0
 800875a:	d179      	bne.n	8008850 <ndefT2TPollerTagFormat+0x158>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8008762:	2b00      	cmp	r3, #0
 8008764:	d174      	bne.n	8008850 <ndefT2TPollerTagFormat+0x158>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800876c:	2b00      	cmp	r3, #0
 800876e:	d16f      	bne.n	8008850 <ndefT2TPollerTagFormat+0x158>
    {
        dataIt = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	757b      	strb	r3, [r7, #21]
        if( cc == NULL )
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d124      	bne.n	80087c4 <ndefT2TPollerTagFormat+0xcc>
        {
            /* Use default values if no cc provided */
            ctx->ccBuf[dataIt] = NDEF_T2T_MAGIC;
 800877a:	7d7b      	ldrb	r3, [r7, #21]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	22e1      	movs	r2, #225	; 0xe1
 8008782:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 8008786:	7d7b      	ldrb	r3, [r7, #21]
 8008788:	3301      	adds	r3, #1
 800878a:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_VERSION_1_0;
 800878c:	7d7b      	ldrb	r3, [r7, #21]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	2210      	movs	r2, #16
 8008794:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 8008798:	7d7b      	ldrb	r3, [r7, #21]
 800879a:	3301      	adds	r3, #1
 800879c:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = NDEF_T2T_STATIC_MEM_SIZE / NDEF_T2T_SIZE_DIVIDER;
 800879e:	7d7b      	ldrb	r3, [r7, #21]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	2206      	movs	r2, #6
 80087a6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80087aa:	7d7b      	ldrb	r3, [r7, #21]
 80087ac:	3301      	adds	r3, #1
 80087ae:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = 0x00U;
 80087b0:	7d7b      	ldrb	r3, [r7, #21]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80087bc:	7d7b      	ldrb	r3, [r7, #21]
 80087be:	3301      	adds	r3, #1
 80087c0:	757b      	strb	r3, [r7, #21]
 80087c2:	e037      	b.n	8008834 <ndefT2TPollerTagFormat+0x13c>
        }
        else
        {
            ctx->ccBuf[dataIt] = cc->t2t.magicNumber;
 80087c4:	7d7b      	ldrb	r3, [r7, #21]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	7811      	ldrb	r1, [r2, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4413      	add	r3, r2
 80087ce:	460a      	mov	r2, r1
 80087d0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80087d4:	7d7b      	ldrb	r3, [r7, #21]
 80087d6:	3301      	adds	r3, #1
 80087d8:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.majorVersion << 4U) | cc->t2t.minorVersion;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	b2d9      	uxtb	r1, r3
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	789a      	ldrb	r2, [r3, #2]
 80087e6:	7d7b      	ldrb	r3, [r7, #21]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	b2d1      	uxtb	r1, r2
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	460a      	mov	r2, r1
 80087f2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 80087f6:	7d7b      	ldrb	r3, [r7, #21]
 80087f8:	3301      	adds	r3, #1
 80087fa:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = cc->t2t.size;
 80087fc:	7d7b      	ldrb	r3, [r7, #21]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	78d1      	ldrb	r1, [r2, #3]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	460a      	mov	r2, r1
 8008808:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800880c:	7d7b      	ldrb	r3, [r7, #21]
 800880e:	3301      	adds	r3, #1
 8008810:	757b      	strb	r3, [r7, #21]
            ctx->ccBuf[dataIt] = (uint8_t)(cc->t2t.readAccess << 4U) | cc->t2t.writeAccess;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	791b      	ldrb	r3, [r3, #4]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	b2d9      	uxtb	r1, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	795a      	ldrb	r2, [r3, #5]
 800881e:	7d7b      	ldrb	r3, [r7, #21]
 8008820:	430a      	orrs	r2, r1
 8008822:	b2d1      	uxtb	r1, r2
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4413      	add	r3, r2
 8008828:	460a      	mov	r2, r1
 800882a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            dataIt++;
 800882e:	7d7b      	ldrb	r3, [r7, #21]
 8008830:	3301      	adds	r3, #1
 8008832:	757b      	strb	r3, [r7, #21]
        }
        ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_CC_OFFSET/NDEF_T2T_BLOCK_SIZE, ctx->ccBuf);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	339c      	adds	r3, #156	; 0x9c
 8008838:	461a      	mov	r2, r3
 800883a:	2103      	movs	r1, #3
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fd87 	bl	8008350 <ndefT2TPollerWriteBlock>
 8008842:	4603      	mov	r3, r0
 8008844:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 8008846:	8afb      	ldrh	r3, [r7, #22]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <ndefT2TPollerTagFormat+0x158>
        {
            return ret;
 800884c:	8afb      	ldrh	r3, [r7, #22]
 800884e:	e007      	b.n	8008860 <ndefT2TPollerTagFormat+0x168>
    }

    /*
     * Write NDEF place holder
     */
    ret = ndefT2TPollerWriteBlock(ctx, NDEF_T2T_AREA_OFFSET/NDEF_T2T_BLOCK_SIZE, emptyNdef);
 8008850:	4a05      	ldr	r2, [pc, #20]	; (8008868 <ndefT2TPollerTagFormat+0x170>)
 8008852:	2104      	movs	r1, #4
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff fd7b 	bl	8008350 <ndefT2TPollerWriteBlock>
 800885a:	4603      	mov	r3, r0
 800885c:	82fb      	strh	r3, [r7, #22]

    return ret;
 800885e:	8afb      	ldrh	r3, [r7, #22]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	0801e978 	.word	0x0801e978

0800886c <ndefT2TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckPresence(ndefContext *ctx)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
    ReturnCode           ret;
    uint16_t             blockAddr;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <ndefT2TPollerCheckPresence+0x1e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <ndefT2TPollerCheckPresence+0x1e>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <ndefT2TPollerCheckPresence+0x22>
    {
        return ERR_PARAM;
 800888a:	2307      	movs	r3, #7
 800888c:	e01b      	b.n	80088c6 <ndefT2TPollerCheckPresence+0x5a>
    }

    blockAddr = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	81fb      	strh	r3, [r7, #14]
    ret = ndefT2TPollerReadBlock(ctx, blockAddr, ctx->subCtx.t2t.cacheBuf);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 8008898:	89fb      	ldrh	r3, [r7, #14]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff fa75 	bl	8007d8c <ndefT2TPollerReadBlock>
 80088a2:	4603      	mov	r3, r0
 80088a4:	81bb      	strh	r3, [r7, #12]
    if( ret != ERR_NONE )
 80088a6:	89bb      	ldrh	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d006      	beq.n	80088ba <ndefT2TPollerCheckPresence+0x4e>
    {
        ndefT2TInvalidateCache(ctx);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f04f 32ff 	mov.w	r2, #4294967295
 80088b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        return ret;
 80088b6:	89bb      	ldrh	r3, [r7, #12]
 80088b8:	e005      	b.n	80088c6 <ndefT2TPollerCheckPresence+0x5a>
    }
    ctx->subCtx.t2t.cacheAddr = (uint32_t)blockAddr * NDEF_T2T_BLOCK_SIZE;
 80088ba:	89fb      	ldrh	r3, [r7, #14]
 80088bc:	009a      	lsls	r2, r3, #2
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    return ERR_NONE;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <ndefT2TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT2TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b085      	sub	sp, #20
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	6039      	str	r1, [r7, #0]
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <ndefT2TPollerCheckAvailableSpace+0x20>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d103      	bne.n	80088ee <ndefT2TPollerCheckAvailableSpace+0x20>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <ndefT2TPollerCheckAvailableSpace+0x24>
    {
        return ERR_PARAM;
 80088ee:	2307      	movs	r3, #7
 80088f0:	e01e      	b.n	8008930 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <ndefT2TPollerCheckAvailableSpace+0x32>
    {
        return ERR_WRONG_STATE;
 80088fc:	2321      	movs	r3, #33	; 0x21
 80088fe:	e017      	b.n	8008930 <ndefT2TPollerCheckAvailableSpace+0x62>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2bfe      	cmp	r3, #254	; 0xfe
 8008904:	d901      	bls.n	800890a <ndefT2TPollerCheckAvailableSpace+0x3c>
 8008906:	2303      	movs	r3, #3
 8008908:	e000      	b.n	800890c <ndefT2TPollerCheckAvailableSpace+0x3e>
 800890a:	2301      	movs	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t2t.offsetNdefTLV + NDEF_T2T_TLV_T_LEN + lLen) > (ctx->areaLen + NDEF_T2T_AREA_OFFSET) )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	441a      	add	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008924:	3310      	adds	r3, #16
 8008926:	429a      	cmp	r2, r3
 8008928:	d901      	bls.n	800892e <ndefT2TPollerCheckAvailableSpace+0x60>
    {
        return ERR_NOMEM;
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <ndefT2TPollerCheckAvailableSpace+0x62>
    }
    return ERR_NONE;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr

0800893a <ndefT2TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <ndefT2TPollerBeginWriteMessage+0x20>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d103      	bne.n	800895a <ndefT2TPollerBeginWriteMessage+0x20>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <ndefT2TPollerBeginWriteMessage+0x24>
    {
        return ERR_PARAM;
 800895a:	2307      	movs	r3, #7
 800895c:	e03b      	b.n	80089d6 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008964:	2b01      	cmp	r3, #1
 8008966:	d006      	beq.n	8008976 <ndefT2TPollerBeginWriteMessage+0x3c>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800896e:	2b02      	cmp	r3, #2
 8008970:	d001      	beq.n	8008976 <ndefT2TPollerBeginWriteMessage+0x3c>
    {
        return ERR_WRONG_STATE;
 8008972:	2321      	movs	r3, #33	; 0x21
 8008974:	e02f      	b.n	80089d6 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    /* TS T2T v1.0 7.5.3.4: reset L_Field to 0 */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, 0U);
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fdbf 	bl	80084fc <ndefT2TPollerWriteRawMessageLen>
 800897e:	4603      	mov	r3, r0
 8008980:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8008982:	89fb      	ldrh	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <ndefT2TPollerBeginWriteMessage+0x5a>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8008990:	89fb      	ldrh	r3, [r7, #14]
 8008992:	e020      	b.n	80089d6 <ndefT2TPollerBeginWriteMessage+0x9c>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T2T_TLV_L_3_BYTES_LEN : NDEF_T2T_TLV_L_1_BYTES_LEN;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2bfe      	cmp	r3, #254	; 0xfe
 8008998:	d901      	bls.n	800899e <ndefT2TPollerBeginWriteMessage+0x64>
 800899a:	2303      	movs	r3, #3
 800899c:	e000      	b.n	80089a0 <ndefT2TPollerBeginWriteMessage+0x66>
 800899e:	2301      	movs	r3, #1
 80089a0:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t2t.offsetNdefTLV;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T2T_TLV_T_LEN; /* T Len */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	441a      	add	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    ctx->state = NDEF_STATE_INITIALIZED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <ndefT2TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT2TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT2TisT2TDevice(&ctx->device) )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d007      	beq.n	80089fe <ndefT2TPollerEndWriteMessage+0x20>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d103      	bne.n	80089fe <ndefT2TPollerEndWriteMessage+0x20>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <ndefT2TPollerEndWriteMessage+0x24>
    {
        return ERR_PARAM;
 80089fe:	2307      	movs	r3, #7
 8008a00:	e025      	b.n	8008a4e <ndefT2TPollerEndWriteMessage+0x70>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d001      	beq.n	8008a10 <ndefT2TPollerEndWriteMessage+0x32>
    {
        return ERR_WRONG_STATE;
 8008a0c:	2321      	movs	r3, #33	; 0x21
 8008a0e:	e01e      	b.n	8008a4e <ndefT2TPollerEndWriteMessage+0x70>
    }

    /* TS T2T v1.0 7.5.3.6 & 7.5.3.7: update L_Field and write Terminator TLV */
    ret = ndefT2TPollerWriteRawMessageLen(ctx, messageLen);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff fd72 	bl	80084fc <ndefT2TPollerWriteRawMessageLen>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8008a1c:	89fb      	ldrh	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <ndefT2TPollerEndWriteMessage+0x50>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8008a2a:	89fb      	ldrh	r3, [r7, #14]
 8008a2c:	e00f      	b.n	8008a4e <ndefT2TPollerEndWriteMessage+0x70>
    }
    ctx->messageLen = messageLen;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <ndefT2TPollerEndWriteMessage+0x66>
 8008a40:	2201      	movs	r2, #1
 8008a42:	e000      	b.n	8008a46 <ndefT2TPollerEndWriteMessage+0x68>
 8008a44:	2202      	movs	r2, #2
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <ndefT3TPollerReadBlocks>:
 ******************************************************************************
 */

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadBlocks( ndefContext *ctx, uint16_t blockNum, uint8_t nbBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b08e      	sub	sp, #56	; 0x38
 8008a5a:	af02      	add	r7, sp, #8
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	607b      	str	r3, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	817b      	strh	r3, [r7, #10]
 8008a64:	4613      	mov	r3, r2
 8008a66:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    uint16_t                   requestedDataSize;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem *    listBlocks;
    uint8_t                    index;
    uint16_t                   rcvdLen = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	827b      	strh	r3, [r7, #18]
    rfalNfcfServ               serviceCodeLst = 0x000BU; /* serviceCodeLst */
 8008a6c:	230b      	movs	r3, #11
 8008a6e:	823b      	strh	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <ndefT3TPollerReadBlocks+0x28>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d001      	beq.n	8008a82 <ndefT3TPollerReadBlocks+0x2c>
    {
        return ERR_PARAM;
 8008a7e:	2307      	movs	r3, #7
 8008a80:	e065      	b.n	8008b4e <ndefT3TPollerReadBlocks+0xf8>
    }

    requestedDataSize = (uint16_t)nbBlocks * NDEF_T3T_BLOCK_SIZE;
 8008a82:	7a7b      	ldrb	r3, [r7, #9]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if( rxBufLen < requestedDataSize )
 8008a8a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008a8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d201      	bcs.n	8008a96 <ndefT3TPollerReadBlocks+0x40>
    {
        return ERR_PARAM;
 8008a92:	2307      	movs	r3, #7
 8008a94:	e05b      	b.n	8008b4e <ndefT3TPollerReadBlocks+0xf8>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++ )
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008aa4:	e017      	b.n	8008ad6 <ndefT3TPollerReadBlocks+0x80>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 8008aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aae:	4413      	add	r3, r2
 8008ab0:	2280      	movs	r2, #128	; 0x80
 8008ab2:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 8008ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ab8:	b299      	uxth	r1, r3
 8008aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac2:	4413      	add	r3, r2
 8008ac4:	897a      	ldrh	r2, [r7, #10]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	b292      	uxth	r2, r2
 8008aca:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++ )
 8008acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ad6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008ada:	7a7b      	ldrb	r3, [r7, #9]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d3e2      	bcc.n	8008aa6 <ndefT3TPollerReadBlocks+0x50>
    }

    servBlock.numServ   = 1U;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 8008ae4:	f107 0310 	add.w	r3, r7, #16
 8008ae8:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 8008aea:	7a7b      	ldrb	r3, [r7, #9]
 8008aec:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerCheck(ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf), &rcvdLen);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1cd8      	adds	r0, r3, #3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8008afc:	f107 0114 	add.w	r1, r7, #20
 8008b00:	f107 0312 	add.w	r3, r7, #18
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	2350      	movs	r3, #80	; 0x50
 8008b08:	f00c f9d0 	bl	8014eac <rfalNfcfPollerCheck>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (ret != ERR_NONE)
 8008b10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <ndefT3TPollerReadBlocks+0xc4>
    {
        return ret;
 8008b16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b18:	e019      	b.n	8008b4e <ndefT3TPollerReadBlocks+0xf8>
    }
    if( rcvdLen != (uint16_t)(NDEF_T3T_CHECK_NB_BLOCKS_LEN + requestedDataSize) )
 8008b1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	8a7b      	ldrh	r3, [r7, #18]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d001      	beq.n	8008b2a <ndefT3TPollerReadBlocks+0xd4>
    {
        return ERR_REQUEST;
 8008b26:	2305      	movs	r3, #5
 8008b28:	e011      	b.n	8008b4e <ndefT3TPollerReadBlocks+0xf8>
    }
    if( requestedDataSize > 0U )
 8008b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00d      	beq.n	8008b4c <ndefT3TPollerReadBlocks+0xf6>
    {
        (void)ST_MEMCPY( rxBuf, &ctx->subCtx.t3t.rxbuf[NDEF_T3T_CHECK_NB_BLOCKS_LEN], requestedDataSize );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f203 1305 	addw	r3, r3, #261	; 0x105
 8008b36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f013 f8b8 	bl	801bcb0 <memcpy>
        if (rcvLen != NULL)
 8008b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <ndefT3TPollerReadBlocks+0xf6>
        {
            *rcvLen = requestedDataSize;
 8008b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b48:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b4a:	801a      	strh	r2, [r3, #0]
        }
    }
    return ERR_NONE;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3730      	adds	r7, #48	; 0x30
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <ndefT3TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 8008b56:	b590      	push	{r4, r7, lr}
 8008b58:	b08f      	sub	sp, #60	; 0x3c
 8008b5a:	af02      	add	r7, sp, #8
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    ReturnCode      result     = ERR_NONE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t        currentLen = len;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t        lvRcvLen   = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint16_t  blockLen   = (uint16_t) NDEF_T3T_BLOCKLEN;
 8008b70:	2310      	movs	r3, #16
 8008b72:	83fb      	strh	r3, [r7, #30]
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 8008b74:	8bfb      	ldrh	r3, [r7, #30]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7c:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 8008b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b80:	8bfa      	ldrh	r2, [r7, #30]
 8008b82:	fb02 f303 	mul.w	r3, r2, r3
 8008b86:	83bb      	strh	r3, [r7, #28]
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	8bbb      	ldrh	r3, [r7, #28]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	837b      	strh	r3, [r7, #26]
    uint16_t        nbBlocks   = (uint16_t) NDEF_T3T_NBBLOCKSMAX;
 8008b92:	2304      	movs	r3, #4
 8008b94:	843b      	strh	r3, [r7, #32]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d006      	beq.n	8008baa <ndefT3TPollerReadBytes+0x54>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d102      	bne.n	8008baa <ndefT3TPollerReadBytes+0x54>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <ndefT3TPollerReadBytes+0x58>
    {
        return ERR_PARAM;
 8008baa:	2307      	movs	r3, #7
 8008bac:	e0e3      	b.n	8008d76 <ndefT3TPollerReadBytes+0x220>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <ndefT3TPollerReadBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbR;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8008bbe:	843b      	strh	r3, [r7, #32]
    }

    if ( startOffset != 0U )
 8008bc0:	8b7b      	ldrh	r3, [r7, #26]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 808e 	beq.w	8008ce4 <ndefT3TPollerReadBytes+0x18e>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */ , ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8008bce:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8008bd0:	f107 0316 	add.w	r3, r7, #22
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	8bfb      	ldrh	r3, [r7, #30]
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	2201      	movs	r2, #1
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7ff ff39 	bl	8008a56 <ndefT3TPollerReadBlocks>
 8008be4:	4603      	mov	r3, r0
 8008be6:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8008be8:	8b3b      	ldrh	r3, [r7, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <ndefT3TPollerReadBytes+0x9e>
        {
            /* Check result */
            result = res;
 8008bee:	8b3b      	ldrh	r3, [r7, #24]
 8008bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008bf2:	e077      	b.n	8008ce4 <ndefT3TPollerReadBytes+0x18e>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 8008bf4:	8afb      	ldrh	r3, [r7, #22]
 8008bf6:	2b10      	cmp	r3, #16
 8008bf8:	d002      	beq.n	8008c00 <ndefT3TPollerReadBytes+0xaa>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 8008bfa:	230e      	movs	r3, #14
 8008bfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008bfe:	e071      	b.n	8008ce4 <ndefT3TPollerReadBytes+0x18e>
        }
        else
        {
            nbRead = (uint16_t) (nbRead - (uint16_t)startOffset);
 8008c00:	8afa      	ldrh	r2, [r7, #22]
 8008c02:	8b7b      	ldrh	r3, [r7, #26]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	82fb      	strh	r3, [r7, #22]
            if ((uint32_t) nbRead > currentLen)
 8008c0a:	8afb      	ldrh	r3, [r7, #22]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d202      	bcs.n	8008c1a <ndefT3TPollerReadBytes+0xc4>
            {
                nbRead = (uint16_t) currentLen;
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	82fb      	strh	r3, [r7, #22]
            }
            if (nbRead > 0U)
 8008c1a:	8afb      	ldrh	r3, [r7, #22]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <ndefT3TPollerReadBytes+0xe0>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t3t.rxbuf[offset], (uint32_t)nbRead);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	4413      	add	r3, r2
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	8afa      	ldrh	r2, [r7, #22]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6838      	ldr	r0, [r7, #0]
 8008c32:	f013 f83d 	bl	801bcb0 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 8008c36:	8afb      	ldrh	r3, [r7, #22]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	4413      	add	r3, r2
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) nbRead;
 8008c40:	8afb      	ldrh	r3, [r7, #22]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	1a9b      	subs	r3, r3, r2
 8008c48:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock++;
 8008c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	847b      	strh	r3, [r7, #34]	; 0x22
        }
    }

    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 8008c50:	e048      	b.n	8008ce4 <ndefT3TPollerReadBytes+0x18e>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 8008c52:	8bfb      	ldrh	r3, [r7, #30]
 8008c54:	8c3a      	ldrh	r2, [r7, #32]
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
 8008c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d204      	bcs.n	8008c6a <ndefT3TPollerReadBytes+0x114>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks =  (uint16_t) (currentLen / blockLen);
 8008c60:	8bfb      	ldrh	r3, [r7, #30]
 8008c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c68:	843b      	strh	r3, [r7, #32]
        }
        res = ndefT3TPollerReadBlocks(ctx, startBlock, (uint8_t)nbBlocks, ctx->subCtx.t3t.rxbuf, blockLen * nbBlocks, &nbRead);
 8008c6a:	8c3b      	ldrh	r3, [r7, #32]
 8008c6c:	b2d8      	uxtb	r0, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8008c74:	8bfb      	ldrh	r3, [r7, #30]
 8008c76:	8c3a      	ldrh	r2, [r7, #32]
 8008c78:	fb02 f303 	mul.w	r3, r2, r3
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8008c80:	f107 0216 	add.w	r2, r7, #22
 8008c84:	9201      	str	r2, [sp, #4]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4623      	mov	r3, r4
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff fee2 	bl	8008a56 <ndefT3TPollerReadBlocks>
 8008c92:	4603      	mov	r3, r0
 8008c94:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8008c96:	8b3b      	ldrh	r3, [r7, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <ndefT3TPollerReadBytes+0x14a>
        {
            /* Check result */
            return res;
 8008c9c:	8b3b      	ldrh	r3, [r7, #24]
 8008c9e:	e06a      	b.n	8008d76 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != (blockLen * nbBlocks))
 8008ca0:	8afb      	ldrh	r3, [r7, #22]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	8bfb      	ldrh	r3, [r7, #30]
 8008ca6:	8c3a      	ldrh	r2, [r7, #32]
 8008ca8:	fb02 f303 	mul.w	r3, r2, r3
 8008cac:	4299      	cmp	r1, r3
 8008cae:	d001      	beq.n	8008cb4 <ndefT3TPollerReadBytes+0x15e>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 8008cb0:	230e      	movs	r3, #14
 8008cb2:	e060      	b.n	8008d76 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	18d0      	adds	r0, r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	f012 fff4 	bl	801bcb0 <memcpy>
            lvRcvLen   += nbRead;
 8008cc8:	8afb      	ldrh	r3, [r7, #22]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	4413      	add	r3, r2
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= nbRead;
 8008cd2:	8afb      	ldrh	r3, [r7, #22]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
            startBlock += nbBlocks;
 8008cdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008cde:	8c3b      	ldrh	r3, [r7, #32]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	847b      	strh	r3, [r7, #34]	; 0x22
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 8008ce4:	8bfb      	ldrh	r3, [r7, #30]
 8008ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d302      	bcc.n	8008cf2 <ndefT3TPollerReadBytes+0x19c>
 8008cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0af      	beq.n	8008c52 <ndefT3TPollerReadBytes+0xfc>
        }
    }
    if  ( (currentLen > 0U) && (result == ERR_NONE) )
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d02f      	beq.n	8008d58 <ndefT3TPollerReadBytes+0x202>
 8008cf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d12c      	bne.n	8008d58 <ndefT3TPollerReadBytes+0x202>
    {
        /* Unaligned read, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, ctx->subCtx.t3t.rxbuf, blockLen, &nbRead);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8008d04:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8008d06:	f107 0316 	add.w	r3, r7, #22
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	8bfb      	ldrh	r3, [r7, #30]
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	2201      	movs	r2, #1
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff fe9e 	bl	8008a56 <ndefT3TPollerReadBlocks>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	833b      	strh	r3, [r7, #24]
        if (res != ERR_NONE)
 8008d1e:	8b3b      	ldrh	r3, [r7, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <ndefT3TPollerReadBytes+0x1d2>
        {
            /* Check result */
            return res;
 8008d24:	8b3b      	ldrh	r3, [r7, #24]
 8008d26:	e026      	b.n	8008d76 <ndefT3TPollerReadBytes+0x220>
        }
        else if (nbRead != NDEF_T3T_BLOCKLEN)
 8008d28:	8afb      	ldrh	r3, [r7, #22]
 8008d2a:	2b10      	cmp	r3, #16
 8008d2c:	d001      	beq.n	8008d32 <ndefT3TPollerReadBytes+0x1dc>
        {
            /* Check len */
            return ERR_MEM_CORRUPT;
 8008d2e:	230e      	movs	r3, #14
 8008d30:	e021      	b.n	8008d76 <ndefT3TPollerReadBytes+0x220>
        }
        else
        {
            if (currentLen > 0U)
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <ndefT3TPollerReadBytes+0x1f6>
            {
                (void)ST_MEMCPY(&buf[lvRcvLen], ctx->subCtx.t3t.rxbuf, (uint32_t)currentLen);
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	18d0      	adds	r0, r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d46:	4619      	mov	r1, r3
 8008d48:	f012 ffb2 	bl	801bcb0 <memcpy>
            }
            lvRcvLen   += (uint32_t) currentLen;
 8008d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	4413      	add	r3, r2
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
            currentLen -= (uint32_t) currentLen;
 8008d54:	2300      	movs	r3, #0
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <ndefT3TPollerReadBytes+0x212>
 8008d5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <ndefT3TPollerReadBytes+0x212>
    {
        result = ERR_NONE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if( rcvdLen != NULL )
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <ndefT3TPollerReadBytes+0x21e>
    {
        *rcvdLen = lvRcvLen;
 8008d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d72:	601a      	str	r2, [r3, #0]
    }
    return result;
 8008d74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3734      	adds	r7, #52	; 0x34
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd90      	pop	{r4, r7, pc}

08008d7e <ndefT3TPollerReadAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerReadAttributeInformationBlock( ndefContext * ctx)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b088      	sub	sp, #32
 8008d82:	af02      	add	r7, sp, #8
 8008d84:	6078      	str	r0, [r7, #4]
    /* Follow 7.4.1 NDEF Detection Procedure */
    ReturnCode   retcode;
    uint8_t    * rxbuf;
    uint16_t     checksum_received;
    uint16_t     checksum_computed = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	82fb      	strh	r3, [r7, #22]
    uint16_t     rcvLen            = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	817b      	strh	r3, [r7, #10]
    uint8_t      i;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <ndefT3TPollerReadAttributeInformationBlock+0x1e>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d001      	beq.n	8008da0 <ndefT3TPollerReadAttributeInformationBlock+0x22>
    {
        return ERR_PARAM;
 8008d9c:	2307      	movs	r3, #7
 8008d9e:	e07d      	b.n	8008e9c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    rxbuf   = ctx->ccBuf;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	339c      	adds	r3, #156	; 0x9c
 8008da4:	613b      	str	r3, [r7, #16]
    retcode = ndefT3TPollerReadBlocks( ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, rxbuf, NDEF_T3T_BLOCK_SIZE, &rcvLen );
 8008da6:	f107 030a 	add.w	r3, r7, #10
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	2310      	movs	r3, #16
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2201      	movs	r2, #1
 8008db4:	2100      	movs	r1, #0
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff fe4d 	bl	8008a56 <ndefT3TPollerReadBlocks>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	81fb      	strh	r3, [r7, #14]
    if ( (retcode != ERR_NONE) && (rcvLen != NDEF_T3T_BLOCK_SIZE) )
 8008dc0:	89fb      	ldrh	r3, [r7, #14]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <ndefT3TPollerReadAttributeInformationBlock+0x52>
 8008dc6:	897b      	ldrh	r3, [r7, #10]
 8008dc8:	2b10      	cmp	r3, #16
 8008dca:	d001      	beq.n	8008dd0 <ndefT3TPollerReadAttributeInformationBlock+0x52>
    {
        return retcode;
 8008dcc:	89fb      	ldrh	r3, [r7, #14]
 8008dce:	e065      	b.n	8008e9c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }
    /* Now compute checksum */
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	757b      	strb	r3, [r7, #21]
 8008dd4:	e00a      	b.n	8008dec <ndefT3TPollerReadAttributeInformationBlock+0x6e>
    {
        checksum_computed += (uint16_t) rxbuf[i];
 8008dd6:	7d7b      	ldrb	r3, [r7, #21]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4413      	add	r3, r2
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	8afb      	ldrh	r3, [r7, #22]
 8008de2:	4413      	add	r3, r2
 8008de4:	82fb      	strh	r3, [r7, #22]
    for (i = 0U; i < NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN; i++)
 8008de6:	7d7b      	ldrb	r3, [r7, #21]
 8008de8:	3301      	adds	r3, #1
 8008dea:	757b      	strb	r3, [r7, #21]
 8008dec:	7d7b      	ldrb	r3, [r7, #21]
 8008dee:	2b0d      	cmp	r3, #13
 8008df0:	d9f1      	bls.n	8008dd6 <ndefT3TPollerReadAttributeInformationBlock+0x58>
    }
    checksum_received = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_CHECKSUM_LEN+ 1U];
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	330e      	adds	r3, #14
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	330f      	adds	r3, #15
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	4413      	add	r3, r2
 8008e08:	81bb      	strh	r3, [r7, #12]
    if (checksum_received !=  checksum_computed)
 8008e0a:	89ba      	ldrh	r2, [r7, #12]
 8008e0c:	8afb      	ldrh	r3, [r7, #22]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d001      	beq.n	8008e16 <ndefT3TPollerReadAttributeInformationBlock+0x98>
    {
        return ERR_REQUEST;
 8008e12:	2305      	movs	r3, #5
 8008e14:	e042      	b.n	8008e9c <ndefT3TPollerReadAttributeInformationBlock+0x11e>
    }

    /* Now copy the attribute struct */
    ctx->cc.t3t.majorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] >> 4U);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	091b      	lsrs	r3, r3, #4
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t3t.minorVersion  = ( rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_VERSION] & 0xFU);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	f003 030f 	and.w	r3, r3, #15
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    ctx->cc.t3t.nbR           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBR];
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	785a      	ldrb	r2, [r3, #1]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    ctx->cc.t3t.nbW           = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_NBW];
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	789a      	ldrb	r2, [r3, #2]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    ctx->cc.t3t.nMaxB         = ((uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB] << 8U) + (uint16_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_MAXB + 1U];
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	3303      	adds	r3, #3
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	3304      	adds	r3, #4
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	4413      	add	r3, r2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    ctx->cc.t3t.writeFlag     = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_W];
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	7a5a      	ldrb	r2, [r3, #9]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.rwFlag        = rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_RW];
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	7a9a      	ldrb	r2, [r3, #10]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	330b      	adds	r3, #11
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	041a      	lsls	r2, r3, #16
                                | ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 1U] << 0x8U)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	330c      	adds	r3, #12
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	021b      	lsls	r3, r3, #8
 8008e8a:	4313      	orrs	r3, r2
                                |  (uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 2U];
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	320d      	adds	r2, #13
 8008e90:	7812      	ldrb	r2, [r2, #0]
 8008e92:	431a      	orrs	r2, r3
    ctx->cc.t3t.Ln            =   ((uint32_t)rxbuf[NDEF_T3T_ATTRIB_INFO_OFFSET_FLAG_LN + 0U] << 0x10U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     return ERR_NONE;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <ndefT3TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT3TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT3TisT3TDevice(dev) )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d006      	beq.n	8008ec2 <ndefT3TPollerContextInitialization+0x1e>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <ndefT3TPollerContextInitialization+0x1e>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d001      	beq.n	8008ec6 <ndefT3TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 8008ec2:	2307      	movs	r3, #7
 8008ec4:	e00a      	b.n	8008edc <ndefT3TPollerContextInitialization+0x38>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2278      	movs	r2, #120	; 0x78
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f012 feef 	bl	801bcb0 <memcpy>

    ctx->state                   = NDEF_STATE_INVALID;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <ndefT3TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT3TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08c      	sub	sp, #48	; 0x30
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
    ReturnCode        retcode;
    rfalFeliCaPollRes pollRes[NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	73fb      	strb	r3, [r7, #15]
    uint8_t           collisions = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73bb      	strb	r3, [r7, #14]

    if( info != NULL )
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d011      	beq.n	8008f20 <ndefT3TPollerNdefDetect+0x3c>
    {
        info->state                = NDEF_STATE_INVALID;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2200      	movs	r2, #0
 8008f00:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2200      	movs	r2, #0
 8008f12:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2200      	movs	r2, #0
 8008f18:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <ndefT3TPollerNdefDetect+0x4a>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d001      	beq.n	8008f32 <ndefT3TPollerNdefDetect+0x4e>
    {
        return ERR_PARAM;
 8008f2e:	2307      	movs	r3, #7
 8008f30:	e087      	b.n	8009042 <ndefT3TPollerNdefDetect+0x15e>
    }
    ctx->state = NDEF_STATE_INVALID;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* TS T3T v1.0 7.4.1.1 the Reader/Writer SHALL send a SENSF_REQ Command with System Code set to 12FCh. */
    retcode = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, pollRes, &devCnt, &collisions );
 8008f3a:	f107 0210 	add.w	r2, r7, #16
 8008f3e:	f107 030e 	add.w	r3, r7, #14
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	f107 030f 	add.w	r3, r7, #15
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f241 21fc 	movw	r1, #4860	; 0x12fc
 8008f52:	2000      	movs	r0, #0
 8008f54:	f00b fefc 	bl	8014d50 <rfalNfcfPollerPoll>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 8008f5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <ndefT3TPollerNdefDetect+0x82>
    {
        /* TS T3T v1.0 7.4.1.2 Conclude procedure. */
        return retcode;
 8008f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f64:	e06d      	b.n	8009042 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* Check if UID of the first card is the same */
    if( ST_BYTECMP(&(pollRes[0U][NDEF_T3T_SENSFRES_NFCID2]), ctx->device.dev.nfcf.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) != 0 )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	1cd9      	adds	r1, r3, #3
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	3302      	adds	r3, #2
 8008f70:	2208      	movs	r2, #8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f012 fe8e 	bl	801bc94 <memcmp>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <ndefT3TPollerNdefDetect+0x9e>
    {
        return ERR_REQUEST; /* Wrong UID */
 8008f7e:	2305      	movs	r3, #5
 8008f80:	e05f      	b.n	8009042 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.3 The Reader/Writer SHALL read the Attribute Information Block using the CHECK Command. */
    /* TS T3T v1.0 7.4.1.4 The Reader/Writer SHALL verify the value of Checksum of the Attribute Information Block. */
    retcode = ndefT3TPollerReadAttributeInformationBlock(ctx);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7ff fefb 	bl	8008d7e <ndefT3TPollerReadAttributeInformationBlock>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if( retcode != ERR_NONE )
 8008f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <ndefT3TPollerNdefDetect+0xb2>
    {
        return retcode;
 8008f92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f94:	e055      	b.n	8009042 <ndefT3TPollerNdefDetect+0x15e>
    }

    /* TS T3T v1.0 7.4.1.6 The Reader/Writer SHALL check if it supports the NDEF mapping version number based on the rules given in Section 7.3. */
    if( ctx->cc.t3t.majorVersion != ndefMajorVersion(NDEF_T3T_ATTRIB_INFO_VERSION_1_0) )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d001      	beq.n	8008fa4 <ndefT3TPollerNdefDetect+0xc0>
    {
        return ERR_REQUEST;
 8008fa0:	2305      	movs	r3, #5
 8008fa2:	e04e      	b.n	8009042 <ndefT3TPollerNdefDetect+0x15e>
    }

    ctx->messageLen     = ctx->cc.t3t.Ln;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset  = NDEF_T3T_AREA_OFFSET;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2210      	movs	r2, #16
 8008fb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen        = (uint32_t)ctx->cc.t3t.nMaxB * NDEF_T3T_BLOCK_SIZE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008fbe:	011a      	lsls	r2, r3, #4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    ctx->state          = NDEF_STATE_INITIALIZED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    if (ctx->messageLen > 0U)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d012      	beq.n	8008ffe <ndefT3TPollerNdefDetect+0x11a>
    {
        if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RW)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d104      	bne.n	8008fec <ndefT3TPollerNdefDetect+0x108>
        {
            ctx->state = NDEF_STATE_READWRITE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8008fea:	e008      	b.n	8008ffe <ndefT3TPollerNdefDetect+0x11a>
        }
        else
        {
            if (ctx->cc.t3t.rwFlag == NDEF_T3T_FLAG_RO)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d103      	bne.n	8008ffe <ndefT3TPollerNdefDetect+0x11a>
            {
                ctx->state = NDEF_STATE_READONLY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
        }
    }

    if( info != NULL )
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01d      	beq.n	8009040 <ndefT3TPollerNdefDetect+0x15c>
    {
        info->state                = ctx->state;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t3t.majorVersion;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t3t.minorVersion;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3728      	adds	r7, #40	; 0x28
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <ndefT3TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b088      	sub	sp, #32
 800904e:	af02      	add	r7, sp, #8
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	603b      	str	r3, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (buf == NULL) )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d006      	beq.n	800906c <ndefT3TPollerReadRawMessage+0x22>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d102      	bne.n	800906c <ndefT3TPollerReadRawMessage+0x22>
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <ndefT3TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800906c:	2307      	movs	r3, #7
 800906e:	e02b      	b.n	80090c8 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /* TS T3T v1.0 7.4.2: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure. */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009076:	2b01      	cmp	r3, #1
 8009078:	d801      	bhi.n	800907e <ndefT3TPollerReadRawMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800907a:	2321      	movs	r3, #33	; 0x21
 800907c:	e024      	b.n	80090c8 <ndefT3TPollerReadRawMessage+0x7e>
    }
    /* TS T3T v1.0 7.4.2.1: If the WriteFlag remembered during the NDEF detection procedure is set to ON, the NDEF data may be inconsistent ...*/
    if( ndefT3TIsWriteFlagON(ctx->cc.t3t.writeFlag) )
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009084:	2b0f      	cmp	r3, #15
 8009086:	d101      	bne.n	800908c <ndefT3TPollerReadRawMessage+0x42>
    {
        /*  TS T3T v1.0 7.4.2.1: ... the Reader/Writer SHALL conclude the NDEF read procedure*/
        return ERR_WRONG_STATE;
 8009088:	2321      	movs	r3, #33	; 0x21
 800908a:	e01d      	b.n	80090c8 <ndefT3TPollerReadRawMessage+0x7e>
    }

    if( ctx->messageLen > bufLen )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	429a      	cmp	r2, r3
 8009096:	d201      	bcs.n	800909c <ndefT3TPollerReadRawMessage+0x52>
    {
        return ERR_NOMEM;
 8009098:	2301      	movs	r3, #1
 800909a:	e015      	b.n	80090c8 <ndefT3TPollerReadRawMessage+0x7e>
    }

    /*  TS T3T v1.0 7.4.2.2: Read NDEF data */
    ret = ndefT3TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7ff fd51 	bl	8008b56 <ndefT3TPollerReadBytes>
 80090b4:	4603      	mov	r3, r0
 80090b6:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 80090b8:	8afb      	ldrh	r3, [r7, #22]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <ndefT3TPollerReadRawMessage+0x7c>
    {
        ctx->state = NDEF_STATE_INVALID;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return ret;
 80090c6:	8afb      	ldrh	r3, [r7, #22]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <ndefT3TPollerWriteBlocks>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteBlocks( ndefContext * ctx, uint16_t blockNum, uint8_t nbBlocks, const uint8_t* dataBlocks)
{
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b091      	sub	sp, #68	; 0x44
 80090d4:	af04      	add	r7, sp, #16
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	607b      	str	r3, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	817b      	strh	r3, [r7, #10]
 80090de:	4613      	mov	r3, r2
 80090e0:	727b      	strb	r3, [r7, #9]
    ReturnCode                 ret;
    rfalNfcfServBlockListParam servBlock;
    rfalNfcfBlockListElem  *   listBlocks;
    uint8_t                    index;
    rfalNfcfServ               serviceCodeLst = 0x0009U;
 80090e2:	2309      	movs	r3, #9
 80090e4:	827b      	strh	r3, [r7, #18]

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <ndefT3TPollerWriteBlocks+0x24>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d001      	beq.n	80090f8 <ndefT3TPollerWriteBlocks+0x28>
    {
        return ERR_PARAM;
 80090f4:	2307      	movs	r3, #7
 80090f6:	e042      	b.n	800917e <ndefT3TPollerWriteBlocks+0xae>
    }

    listBlocks = ctx->subCtx.t3t.listBlocks;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090fe:	62bb      	str	r3, [r7, #40]	; 0x28

    for (index = 0U; index < nbBlocks; index++)
 8009100:	2300      	movs	r3, #0
 8009102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009106:	e017      	b.n	8009138 <ndefT3TPollerWriteBlocks+0x68>
    {
        /* Write each block number (16 bits per block address) */
        listBlocks[index].conf     = (uint8_t) NDEF_T3T_BLOCKNB_CONF;
 8009108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009110:	4413      	add	r3, r2
 8009112:	2280      	movs	r2, #128	; 0x80
 8009114:	701a      	strb	r2, [r3, #0]
        listBlocks[index].blockNum = (uint16_t)( blockNum + (uint16_t) index);
 8009116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800911a:	b299      	uxth	r1, r3
 800911c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009124:	4413      	add	r3, r2
 8009126:	897a      	ldrh	r2, [r7, #10]
 8009128:	440a      	add	r2, r1
 800912a:	b292      	uxth	r2, r2
 800912c:	805a      	strh	r2, [r3, #2]
    for (index = 0U; index < nbBlocks; index++)
 800912e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009132:	3301      	adds	r3, #1
 8009134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009138:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800913c:	7a7b      	ldrb	r3, [r7, #9]
 800913e:	429a      	cmp	r2, r3
 8009140:	d3e2      	bcc.n	8009108 <ndefT3TPollerWriteBlocks+0x38>
    }
    servBlock.numServ   = 1U;
 8009142:	2301      	movs	r3, #1
 8009144:	753b      	strb	r3, [r7, #20]
    servBlock.servList  = &serviceCodeLst;
 8009146:	f107 0312 	add.w	r3, r7, #18
 800914a:	61bb      	str	r3, [r7, #24]
    servBlock.numBlock  = nbBlocks;
 800914c:	7a7b      	ldrb	r3, [r7, #9]
 800914e:	773b      	strb	r3, [r7, #28]
    servBlock.blockList = listBlocks;
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	623b      	str	r3, [r7, #32]

    ret = rfalNfcfPollerUpdate( ctx->device.dev.nfcf.sensfRes.NFCID2, &servBlock, ctx->subCtx.t3t.txbuf, (uint16_t)sizeof(ctx->subCtx.t3t.txbuf), dataBlocks, ctx->subCtx.t3t.rxbuf, (uint16_t)sizeof(ctx->subCtx.t3t.rxbuf));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	1cd8      	adds	r0, r3, #3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009164:	f107 0114 	add.w	r1, r7, #20
 8009168:	2450      	movs	r4, #80	; 0x50
 800916a:	9402      	str	r4, [sp, #8]
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	2350      	movs	r3, #80	; 0x50
 8009174:	f00b ffde 	bl	8015134 <rfalNfcfPollerUpdate>
 8009178:	4603      	mov	r3, r0
 800917a:	84fb      	strh	r3, [r7, #38]	; 0x26

    return ret;
 800917c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800917e:	4618      	mov	r0, r3
 8009180:	3734      	adds	r7, #52	; 0x34
 8009182:	46bd      	mov	sp, r7
 8009184:	bd90      	pop	{r4, r7, pc}

08009186 <ndefT3TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b092      	sub	sp, #72	; 0x48
 800918a:	af02      	add	r7, sp, #8
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	603b      	str	r3, [r7, #0]
    uint16_t        nbRead;
    uint16_t        nbWrite;
    uint16_t        res;
    ReturnCode      result     = ERR_NONE;
 8009194:	2300      	movs	r3, #0
 8009196:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint32_t        currentLen = len;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t        txtLen     = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
    const uint16_t  blockLen   = (uint16_t )NDEF_T3T_BLOCKLEN;
 80091a0:	2310      	movs	r3, #16
 80091a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t        nbBlocks   = (uint16_t ) NDEF_T3T_NBBLOCKSMAX;
 80091a4:	2304      	movs	r3, #4
 80091a6:	867b      	strh	r3, [r7, #50]	; 0x32
    uint16_t        startBlock = (uint16_t) (offset / blockLen);
 80091a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	863b      	strh	r3, [r7, #48]	; 0x30
    uint16_t        startAddr  = (uint16_t) (startBlock * blockLen);
 80091b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80091b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
 80091ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t        startOffset= (uint16_t) (offset -  (uint32_t) startAddr);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	b29a      	uxth	r2, r3
 80091c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t         tmpBuf[NDEF_T3T_BLOCKLEN];

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || (len == 0U) )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d006      	beq.n	80091da <ndefT3TPollerWriteBytes+0x54>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d102      	bne.n	80091da <ndefT3TPollerWriteBytes+0x54>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <ndefT3TPollerWriteBytes+0x58>
    {
        return ERR_PARAM;
 80091da:	2307      	movs	r3, #7
 80091dc:	e0d0      	b.n	8009380 <ndefT3TPollerWriteBytes+0x1fa>
    }
    if (ctx->state != NDEF_STATE_INVALID)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <ndefT3TPollerWriteBytes+0x6a>
    {
        nbBlocks = ctx->cc.t3t.nbW;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80091ee:	867b      	strh	r3, [r7, #50]	; 0x32
    }

    if ( startOffset != 0U )
 80091f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d078      	beq.n	80092e8 <ndefT3TPollerWriteBytes+0x162>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1, tmpBuf, blockLen, &nbRead);
 80091f6:	f107 0214 	add.w	r2, r7, #20
 80091fa:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80091fc:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4613      	mov	r3, r2
 8009208:	2201      	movs	r2, #1
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f7ff fc23 	bl	8008a56 <ndefT3TPollerReadBlocks>
 8009210:	4603      	mov	r3, r0
 8009212:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 8009214:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <ndefT3TPollerWriteBytes+0x9a>
        {
            /* Check result */
            result = res;
 800921a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800921c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800921e:	e063      	b.n	80092e8 <ndefT3TPollerWriteBytes+0x162>
        }
        else if (nbRead != blockLen)
 8009220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009222:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009224:	429a      	cmp	r2, r3
 8009226:	d002      	beq.n	800922e <ndefT3TPollerWriteBytes+0xa8>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 8009228:	230e      	movs	r3, #14
 800922a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800922c:	e05c      	b.n	80092e8 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            /* Fill the rest of the buffer with user data */
            nbWrite =  NDEF_T3T_BLOCKLEN - startOffset;
 800922e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009230:	f1c3 0310 	rsb	r3, r3, #16
 8009234:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (nbWrite >  len)
 8009236:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d201      	bcs.n	8009242 <ndefT3TPollerWriteBytes+0xbc>
            {
                 nbWrite = (uint16_t) len;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            (void)ST_MEMCPY(&tmpBuf[startOffset], buf, nbWrite);
 8009242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009244:	f107 0214 	add.w	r2, r7, #20
 8009248:	4413      	add	r3, r2
 800924a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800924c:	6879      	ldr	r1, [r7, #4]
 800924e:	4618      	mov	r0, r3
 8009250:	f012 fd2e 	bl	801bcb0 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800925a:	2201      	movs	r2, #1
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7ff ff37 	bl	80090d0 <ndefT3TPollerWriteBlocks>
 8009262:	4603      	mov	r3, r0
 8009264:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 8009266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <ndefT3TPollerWriteBytes+0xfe>
            {
                txtLen     += (uint32_t) nbWrite;
 800926c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800926e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009270:	4413      	add	r3, r2
 8009272:	637b      	str	r3, [r7, #52]	; 0x34
                currentLen -= (uint32_t) nbWrite;
 8009274:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	63bb      	str	r3, [r7, #56]	; 0x38
                startBlock++;
 800927c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800927e:	3301      	adds	r3, #1
 8009280:	863b      	strh	r3, [r7, #48]	; 0x30
 8009282:	e031      	b.n	80092e8 <ndefT3TPollerWriteBytes+0x162>
            }
            else
            {
                result = res; /* Copy the error code */
 8009284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009286:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 8009288:	e02e      	b.n	80092e8 <ndefT3TPollerWriteBytes+0x162>
    {
        if ( currentLen <  ((uint32_t)blockLen * nbBlocks) )
 800928a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800928c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009294:	429a      	cmp	r2, r3
 8009296:	d204      	bcs.n	80092a2 <ndefT3TPollerWriteBytes+0x11c>
        {
              /* Reduce the nb of blocks to read */
              nbBlocks = (uint16_t) (currentLen / blockLen);
 8009298:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800929a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800929c:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a0:	867b      	strh	r3, [r7, #50]	; 0x32
        }
        nbWrite = blockLen * nbBlocks;
 80092a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092a4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80092a6:	fb02 f303 	mul.w	r3, r2, r3
 80092aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        res     = ndefT3TPollerWriteBlocks(ctx, startBlock, (uint8_t) nbBlocks, &buf[txtLen]);
 80092ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80092ae:	b2d8      	uxtb	r0, r3
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	4413      	add	r3, r2
 80092b6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80092b8:	4602      	mov	r2, r0
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7ff ff08 	bl	80090d0 <ndefT3TPollerWriteBlocks>
 80092c0:	4603      	mov	r3, r0
 80092c2:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 80092c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <ndefT3TPollerWriteBytes+0x14a>
        {
            /* Check result */
            result = res;
 80092ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80092ce:	e00b      	b.n	80092e8 <ndefT3TPollerWriteBytes+0x162>
        }
        else
        {
            txtLen     += nbWrite;
 80092d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092d4:	4413      	add	r3, r2
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
            currentLen -= nbWrite;
 80092d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	63bb      	str	r3, [r7, #56]	; 0x38
            startBlock += nbBlocks;
 80092e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80092e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80092e4:	4413      	add	r3, r2
 80092e6:	863b      	strh	r3, [r7, #48]	; 0x30
    while ( (currentLen >= (uint32_t)blockLen) && (result == ERR_NONE) )
 80092e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d302      	bcc.n	80092f6 <ndefT3TPollerWriteBytes+0x170>
 80092f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0c9      	beq.n	800928a <ndefT3TPollerWriteBytes+0x104>
        }
    }
    if ( (currentLen > 0U) && (result == ERR_NONE) )
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d038      	beq.n	800936e <ndefT3TPollerWriteBytes+0x1e8>
 80092fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d135      	bne.n	800936e <ndefT3TPollerWriteBytes+0x1e8>
    {
        /* Unaligned write, need to use a tmp buffer */
        res = ndefT3TPollerReadBlocks(ctx, startBlock, 1U /* One block */, tmpBuf, blockLen, &nbRead);
 8009302:	f107 0214 	add.w	r2, r7, #20
 8009306:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8009308:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	4613      	mov	r3, r2
 8009314:	2201      	movs	r2, #1
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff fb9d 	bl	8008a56 <ndefT3TPollerReadBlocks>
 800931c:	4603      	mov	r3, r0
 800931e:	853b      	strh	r3, [r7, #40]	; 0x28
        if (res != ERR_NONE)
 8009320:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <ndefT3TPollerWriteBytes+0x1a6>
        {
            /* Check result */
            result = res;
 8009326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009328:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800932a:	e020      	b.n	800936e <ndefT3TPollerWriteBytes+0x1e8>
        }
        else if (nbRead != blockLen)
 800932c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800932e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009330:	429a      	cmp	r2, r3
 8009332:	d002      	beq.n	800933a <ndefT3TPollerWriteBytes+0x1b4>
        {
            /* Check len */
            result = ERR_MEM_CORRUPT;
 8009334:	230e      	movs	r3, #14
 8009336:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009338:	e019      	b.n	800936e <ndefT3TPollerWriteBytes+0x1e8>
        }
        else
        {
            /* Fill the beginning of the buffer with user data */
            (void)ST_MEMCPY( tmpBuf, &buf[txtLen], currentLen);
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933e:	18d1      	adds	r1, r2, r3
 8009340:	f107 0314 	add.w	r3, r7, #20
 8009344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009346:	4618      	mov	r0, r3
 8009348:	f012 fcb2 	bl	801bcb0 <memcpy>
            res = ndefT3TPollerWriteBlocks(ctx, startBlock, 1U /* One block */, tmpBuf);
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8009352:	2201      	movs	r2, #1
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7ff febb 	bl	80090d0 <ndefT3TPollerWriteBlocks>
 800935a:	4603      	mov	r3, r0
 800935c:	853b      	strh	r3, [r7, #40]	; 0x28
            if (res == ERR_NONE)
 800935e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <ndefT3TPollerWriteBytes+0x1e4>
            {
                currentLen = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	63bb      	str	r3, [r7, #56]	; 0x38
 8009368:	e001      	b.n	800936e <ndefT3TPollerWriteBytes+0x1e8>
            }
            else
            {
                result = res; /* Copy the error code */
 800936a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800936c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }
    }
    if ( (currentLen == 0U) && (result == ERR_NONE) )
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <ndefT3TPollerWriteBytes+0x1f8>
 8009374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <ndefT3TPollerWriteBytes+0x1f8>
    {
        result = ERR_NONE;
 800937a:	2300      	movs	r3, #0
 800937c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    return result;
 800937e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
}
 8009380:	4618      	mov	r0, r3
 8009382:	3740      	adds	r7, #64	; 0x40
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <ndefT3TPollerWriteAttributeInformationBlock>:

/*******************************************************************************/
static ReturnCode ndefT3TPollerWriteAttributeInformationBlock(ndefContext * ctx)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
    uint8_t    dataIt;
    uint16_t   checksum;
    uint8_t *  buf;
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <ndefT3TPollerWriteAttributeInformationBlock+0x16>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b02      	cmp	r3, #2
 800939c:	d001      	beq.n	80093a2 <ndefT3TPollerWriteAttributeInformationBlock+0x1a>
    {
        return ERR_PARAM;
 800939e:	2307      	movs	r3, #7
 80093a0:	e10e      	b.n	80095c0 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    if ( ctx->state < NDEF_STATE_INITIALIZED )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <ndefT3TPollerWriteAttributeInformationBlock+0x28>
    {
        return ERR_WRONG_STATE;
 80093ac:	2321      	movs	r3, #33	; 0x21
 80093ae:	e107      	b.n	80095c0 <ndefT3TPollerWriteAttributeInformationBlock+0x238>
    }
    dataIt        = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	75fb      	strb	r3, [r7, #23]
    buf           = ctx->ccBuf;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	339c      	adds	r3, #156	; 0x9c
 80093b8:	613b      	str	r3, [r7, #16]
    checksum      = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	81fb      	strh	r3, [r7, #14]
    buf[dataIt]   = ((uint8_t)(ctx->cc.t3t.majorVersion << 4U)) |  ctx->cc.t3t.minorVersion; /* Byte  0 Ver          */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	b2d9      	uxtb	r1, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	6938      	ldr	r0, [r7, #16]
 80093d2:	4403      	add	r3, r0
 80093d4:	430a      	orrs	r2, r1
 80093d6:	b2d2      	uxtb	r2, r2
 80093d8:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	4413      	add	r3, r2
 80093e8:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	3301      	adds	r3, #1
 80093ee:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbR;                                                         /* Byte  1 Nbr          */
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	4413      	add	r3, r2
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 80093fc:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	b29a      	uxth	r2, r3
 8009408:	89fb      	ldrh	r3, [r7, #14]
 800940a:	4413      	add	r3, r2
 800940c:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	3301      	adds	r3, #1
 8009412:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.nbW;                                                         /* Byte  2 Nbw          */
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	4413      	add	r3, r2
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8009420:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4413      	add	r3, r2
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	b29a      	uxth	r2, r3
 800942c:	89fb      	ldrh	r3, [r7, #14]
 800942e:	4413      	add	r3, r2
 8009430:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	3301      	adds	r3, #1
 8009436:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 8U);                                      /* Byte  3 NmaxB  (MSB) */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800943e:	0a1b      	lsrs	r3, r3, #8
 8009440:	b299      	uxth	r1, r3
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	4413      	add	r3, r2
 8009448:	b2ca      	uxtb	r2, r1
 800944a:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	4413      	add	r3, r2
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b29a      	uxth	r2, r3
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	4413      	add	r3, r2
 800945a:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	3301      	adds	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.nMaxB >> 0U);                                      /* Byte  4 NmaxB  (LSB) */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4413      	add	r3, r2
 800946e:	b2ca      	uxtb	r2, r1
 8009470:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4413      	add	r3, r2
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	b29a      	uxth	r2, r3
 800947c:	89fb      	ldrh	r3, [r7, #14]
 800947e:	4413      	add	r3, r2
 8009480:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	3301      	adds	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  5 RFU          */
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4413      	add	r3, r2
 800948e:	2200      	movs	r2, #0
 8009490:	701a      	strb	r2, [r3, #0]
    dataIt++;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	3301      	adds	r3, #1
 8009496:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  6 RFU          */
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4413      	add	r3, r2
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
    dataIt++;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	3301      	adds	r3, #1
 80094a6:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  7 RFU          */
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4413      	add	r3, r2
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
    dataIt++;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	3301      	adds	r3, #1
 80094b6:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = 0U;                                                                        /* Byte  8 RFU          */
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	4413      	add	r3, r2
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]
    dataIt++;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	3301      	adds	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.writeFlag;                                                   /* Byte  9 WriteFlag    */
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 80094d4:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	b29a      	uxth	r2, r3
 80094e0:	89fb      	ldrh	r3, [r7, #14]
 80094e2:	4413      	add	r3, r2
 80094e4:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	3301      	adds	r3, #1
 80094ea:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = ctx->cc.t3t.rwFlag;                                                      /* Byte 10 RWFlag       */
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4413      	add	r3, r2
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 80094f8:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4413      	add	r3, r2
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	b29a      	uxth	r2, r3
 8009504:	89fb      	ldrh	r3, [r7, #14]
 8009506:	4413      	add	r3, r2
 8009508:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800950a:	7dfb      	ldrb	r3, [r7, #23]
 800950c:	3301      	adds	r3, #1
 800950e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >> 16U);                                        /* Byte 11 Ln (MSB)     */
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009516:	0c19      	lsrs	r1, r3, #16
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	4413      	add	r3, r2
 800951e:	b2ca      	uxtb	r2, r1
 8009520:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	4413      	add	r3, r2
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b29a      	uxth	r2, r3
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	4413      	add	r3, r2
 8009530:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	3301      	adds	r3, #1
 8009536:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  8U);                                        /* Byte 12 Ln (middle)  */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953e:	0a19      	lsrs	r1, r3, #8
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	4413      	add	r3, r2
 8009546:	b2ca      	uxtb	r2, r1
 8009548:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	4413      	add	r3, r2
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	b29a      	uxth	r2, r3
 8009554:	89fb      	ldrh	r3, [r7, #14]
 8009556:	4413      	add	r3, r2
 8009558:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	3301      	adds	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]
    buf[dataIt]   = (uint8_t)(ctx->cc.t3t.Ln >>  0U);                                        /* Byte 13 Ln (LSB)     */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4413      	add	r3, r2
 800956c:	b2ca      	uxtb	r2, r1
 800956e:	701a      	strb	r2, [r3, #0]
    checksum     += buf[dataIt];
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	4413      	add	r3, r2
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b29a      	uxth	r2, r3
 800957a:	89fb      	ldrh	r3, [r7, #14]
 800957c:	4413      	add	r3, r2
 800957e:	81fb      	strh	r3, [r7, #14]
    dataIt++;
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	3301      	adds	r3, #1
 8009584:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 8U);                                                 /* Byte 14 checksum MSB */
 8009586:	89fb      	ldrh	r3, [r7, #14]
 8009588:	0a1b      	lsrs	r3, r3, #8
 800958a:	b299      	uxth	r1, r3
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4413      	add	r3, r2
 8009592:	b2ca      	uxtb	r2, r1
 8009594:	701a      	strb	r2, [r3, #0]
    dataIt++;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	3301      	adds	r3, #1
 800959a:	75fb      	strb	r3, [r7, #23]
    buf[dataIt] = (uint8_t)(checksum >> 0U);                                                 /* Byte 15 checksum LSB */
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4413      	add	r3, r2
 80095a2:	89fa      	ldrh	r2, [r7, #14]
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	701a      	strb	r2, [r3, #0]
    dataIt++;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	3301      	adds	r3, #1
 80095ac:	75fb      	strb	r3, [r7, #23]

    ret = ndefT3TPollerWriteBlocks(ctx, NDEF_T3T_ATTRIB_INFO_BLOCK_NB, 1U /* One block */, buf);
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2201      	movs	r2, #1
 80095b2:	2100      	movs	r1, #0
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff fd8b 	bl	80090d0 <ndefT3TPollerWriteBlocks>
 80095ba:	4603      	mov	r3, r0
 80095bc:	81bb      	strh	r3, [r7, #12]
    return ret;
 80095be:	89bb      	ldrh	r3, [r7, #12]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <ndefT3TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <ndefT3TPollerWriteRawMessage+0x26>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d105      	bne.n	80095ee <ndefT3TPollerWriteRawMessage+0x26>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d104      	bne.n	80095f2 <ndefT3TPollerWriteRawMessage+0x2a>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <ndefT3TPollerWriteRawMessage+0x2a>
    {
        return ERR_PARAM;
 80095ee:	2307      	movs	r3, #7
 80095f0:	e04b      	b.n	800968a <ndefT3TPollerWriteRawMessage+0xc2>
    }
    /* TS T3T v1.0 7.4.3: This procedure assumes that the Reader/Writer has successfully performed the NDEF detection procedure... */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T3T v1.0 7.4.3: ... and that the RWFlag in the Attribute Information Block is set to 01h. */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d006      	beq.n	800960a <ndefT3TPollerWriteRawMessage+0x42>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009602:	2b02      	cmp	r3, #2
 8009604:	d001      	beq.n	800960a <ndefT3TPollerWriteRawMessage+0x42>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 8009606:	2321      	movs	r3, #33	; 0x21
 8009608:	e03f      	b.n	800968a <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.2: verify available space */
    ret = ndefT3TPollerCheckAvailableSpace(ctx, bufLen);
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f8cb 	bl	80097a8 <ndefT3TPollerCheckAvailableSpace>
 8009612:	4603      	mov	r3, r0
 8009614:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8009616:	8afb      	ldrh	r3, [r7, #22]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <ndefT3TPollerWriteRawMessage+0x58>
    {
        /* Conclude procedure */
        return ERR_PARAM;
 800961c:	2307      	movs	r3, #7
 800961e:	e034      	b.n	800968a <ndefT3TPollerWriteRawMessage+0xc2>
    }

    /* TS T3T v1.0 7.4.3.3: update WriteFlag */
    ret = ndefT3TPollerBeginWriteMessage(ctx, bufLen);
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 f8e3 	bl	80097ee <ndefT3TPollerBeginWriteMessage>
 8009628:	4603      	mov	r3, r0
 800962a:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800962c:	8afb      	ldrh	r3, [r7, #22]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d005      	beq.n	800963e <ndefT3TPollerWriteRawMessage+0x76>
    {
        ctx->state = NDEF_STATE_INVALID;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return ret;
 800963a:	8afb      	ldrh	r3, [r7, #22]
 800963c:	e025      	b.n	800968a <ndefT3TPollerWriteRawMessage+0xc2>
    }

    if( bufLen != 0U )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d012      	beq.n	800966a <ndefT3TPollerWriteRawMessage+0xa2>
    {
       /* TS T3T v1.0 7.4.3.4: write new NDEF message */
        ret = ndefT3TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fd99 	bl	8009186 <ndefT3TPollerWriteBytes>
 8009654:	4603      	mov	r3, r0
 8009656:	82fb      	strh	r3, [r7, #22]
        if  (ret != ERR_NONE)
 8009658:	8afb      	ldrh	r3, [r7, #22]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <ndefT3TPollerWriteRawMessage+0xa2>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 8009666:	8afb      	ldrh	r3, [r7, #22]
 8009668:	e00f      	b.n	800968a <ndefT3TPollerWriteRawMessage+0xc2>
        }
    }
    /* TS T3T v1.0 7.4.3.5: update Ln value and set WriteFlag to OFF */
    ret = ndefT3TPollerEndWriteMessage(ctx, bufLen);
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 f8f3 	bl	8009858 <ndefT3TPollerEndWriteMessage>
 8009672:	4603      	mov	r3, r0
 8009674:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8009676:	8afb      	ldrh	r3, [r7, #22]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <ndefT3TPollerWriteRawMessage+0xc0>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8009684:	8afb      	ldrh	r3, [r7, #22]
 8009686:	e000      	b.n	800968a <ndefT3TPollerWriteRawMessage+0xc2>
    }
    return ret;
 8009688:	8afb      	ldrh	r3, [r7, #22]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <ndefT3TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT3TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer * cc, uint32_t options)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b08e      	sub	sp, #56	; 0x38
 8009696:	af02      	add	r7, sp, #8
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
    ReturnCode        res;
    rfalFeliCaPollRes buffOut [NDEF_T3T_MAX_DEVICE];
    uint8_t           devCnt     = NDEF_T3T_MAX_DEVICE;
 800969e:	2301      	movs	r3, #1
 80096a0:	75fb      	strb	r3, [r7, #23]
    uint8_t           collisions = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	75bb      	strb	r3, [r7, #22]
    NO_WARNING(options); /* options not used in T3T */

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <ndefT3TPollerTagFormat+0x22>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d001      	beq.n	80096b8 <ndefT3TPollerTagFormat+0x26>
    {
        return ERR_PARAM;
 80096b4:	2307      	movs	r3, #7
 80096b6:	e051      	b.n	800975c <ndefT3TPollerTagFormat+0xca>
    }
    if ( cc == NULL)
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d109      	bne.n	80096d2 <ndefT3TPollerTagFormat+0x40>
    {
        /* No default CC found so have to analyse the tag */
        res = ndefT3TPollerReadAttributeInformationBlock(ctx);  /* Read current cc */
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff fb5d 	bl	8008d7e <ndefT3TPollerReadAttributeInformationBlock>
 80096c4:	4603      	mov	r3, r0
 80096c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if (res != ERR_NONE)
 80096c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d008      	beq.n	80096e0 <ndefT3TPollerTagFormat+0x4e>
        {
            return res;
 80096ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096d0:	e044      	b.n	800975c <ndefT3TPollerTagFormat+0xca>
        }
    }
    else
    {
        /* Nothing to do */
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	337c      	adds	r3, #124	; 0x7c
 80096d6:	2214      	movs	r2, #20
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	4618      	mov	r0, r3
 80096dc:	f012 fae8 	bl	801bcb0 <memcpy>
    }

    /* 4.3.3 System Definition Information for SystemCode = 0x12FC (NDEF) */
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_NO_REQUEST, buffOut, &devCnt, &collisions );
 80096e0:	f107 0218 	add.w	r2, r7, #24
 80096e4:	f107 0316 	add.w	r3, r7, #22
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f107 0317 	add.w	r3, r7, #23
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	4613      	mov	r3, r2
 80096f2:	2200      	movs	r2, #0
 80096f4:	f241 21fc 	movw	r1, #4860	; 0x12fc
 80096f8:	2000      	movs	r0, #0
 80096fa:	f00b fb29 	bl	8014d50 <rfalNfcfPollerPoll>
 80096fe:	4603      	mov	r3, r0
 8009700:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 8009702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <ndefT3TPollerTagFormat+0x7a>
    {
        return res;
 8009708:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800970a:	e027      	b.n	800975c <ndefT3TPollerTagFormat+0xca>
    }
    res = rfalNfcfPollerPoll( RFAL_FELICA_1_SLOT, NDEF_T3T_SYSTEMCODE, (uint8_t)RFAL_FELICA_POLL_RC_SYSTEM_CODE, buffOut, &devCnt, &collisions );
 800970c:	f107 0218 	add.w	r2, r7, #24
 8009710:	f107 0316 	add.w	r3, r7, #22
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	f107 0317 	add.w	r3, r7, #23
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	4613      	mov	r3, r2
 800971e:	2201      	movs	r2, #1
 8009720:	f241 21fc 	movw	r1, #4860	; 0x12fc
 8009724:	2000      	movs	r0, #0
 8009726:	f00b fb13 	bl	8014d50 <rfalNfcfPollerPoll>
 800972a:	4603      	mov	r3, r0
 800972c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (res != ERR_NONE)
 800972e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <ndefT3TPollerTagFormat+0xa6>
    {
        return res;
 8009734:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009736:	e011      	b.n	800975c <ndefT3TPollerTagFormat+0xca>
    }
    ctx->state            = NDEF_STATE_INITIALIZED; /* to be sure that the block will be written */
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t3t.Ln        = 0U; /* Force actual stored NDEF size to 0 */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ctx->cc.t3t.writeFlag = 0U; /* Force WriteFlag to 0 */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    res = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f7ff fe19 	bl	8009388 <ndefT3TPollerWriteAttributeInformationBlock>
 8009756:	4603      	mov	r3, r0
 8009758:	85fb      	strh	r3, [r7, #46]	; 0x2e
    return res;
 800975a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800975c:	4618      	mov	r0, r3
 800975e:	3730      	adds	r7, #48	; 0x30
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <ndefT3TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckPresence(ndefContext *ctx)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af02      	add	r7, sp, #8
 800976a:	6078      	str	r0, [r7, #4]
    ReturnCode        retcode;
    uint16_t          nbRead;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <ndefT3TPollerCheckPresence+0x16>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b02      	cmp	r3, #2
 8009778:	d001      	beq.n	800977e <ndefT3TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800977a:	2307      	movs	r3, #7
 800977c:	e010      	b.n	80097a0 <ndefT3TPollerCheckPresence+0x3c>
    }
    /* Perform a simple readblock */
    retcode = ndefT3TPollerReadBlocks(ctx, 0U /* First block */, 1U /* One Block */, ctx->subCtx.t3t.rxbuf, NDEF_T3T_BLOCKLEN, &nbRead);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009784:	f107 030c 	add.w	r3, r7, #12
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	2310      	movs	r3, #16
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	4613      	mov	r3, r2
 8009790:	2201      	movs	r2, #1
 8009792:	2100      	movs	r1, #0
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff f95e 	bl	8008a56 <ndefT3TPollerReadBlocks>
 800979a:	4603      	mov	r3, r0
 800979c:	81fb      	strh	r3, [r7, #14]
    return retcode;
 800979e:	89fb      	ldrh	r3, [r7, #14]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <ndefT3TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT3TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <ndefT3TPollerCheckAvailableSpace+0x18>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d001      	beq.n	80097c4 <ndefT3TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 80097c0:	2307      	movs	r3, #7
 80097c2:	e00f      	b.n	80097e4 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <ndefT3TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 80097ce:	2321      	movs	r3, #33	; 0x21
 80097d0:	e008      	b.n	80097e4 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    if( messageLen  > ctx->areaLen )
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d901      	bls.n	80097e2 <ndefT3TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_NOMEM;
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <ndefT3TPollerCheckAvailableSpace+0x3c>
    }
    return ERR_NONE;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bc80      	pop	{r7}
 80097ec:	4770      	bx	lr

080097ee <ndefT3TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <ndefT3TPollerBeginWriteMessage+0x18>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d001      	beq.n	800980a <ndefT3TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 8009806:	2307      	movs	r3, #7
 8009808:	e022      	b.n	8009850 <ndefT3TPollerBeginWriteMessage+0x62>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009810:	2b01      	cmp	r3, #1
 8009812:	d006      	beq.n	8009822 <ndefT3TPollerBeginWriteMessage+0x34>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800981a:	2b02      	cmp	r3, #2
 800981c:	d001      	beq.n	8009822 <ndefT3TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800981e:	2321      	movs	r3, #33	; 0x21
 8009820:	e016      	b.n	8009850 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    /* Update WriteFlag */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_ON;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	220f      	movs	r2, #15
 8009826:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff fdac 	bl	8009388 <ndefT3TPollerWriteAttributeInformationBlock>
 8009830:	4603      	mov	r3, r0
 8009832:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8009834:	89fb      	ldrh	r3, [r7, #14]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d005      	beq.n	8009846 <ndefT3TPollerBeginWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 8009842:	89fb      	ldrh	r3, [r7, #14]
 8009844:	e004      	b.n	8009850 <ndefT3TPollerBeginWriteMessage+0x62>
    }
    ctx->state = NDEF_STATE_INITIALIZED;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <ndefT3TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT3TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
    ReturnCode ret;

    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <ndefT3TPollerEndWriteMessage+0x18>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d001      	beq.n	8009874 <ndefT3TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 8009870:	2307      	movs	r3, #7
 8009872:	e02c      	b.n	80098ce <ndefT3TPollerEndWriteMessage+0x76>
    }
    if( ctx->state != NDEF_STATE_INITIALIZED )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800987a:	2b01      	cmp	r3, #1
 800987c:	d001      	beq.n	8009882 <ndefT3TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800987e:	2321      	movs	r3, #33	; 0x21
 8009880:	e025      	b.n	80098ce <ndefT3TPollerEndWriteMessage+0x76>
    }
    /* TS T3T v1.0 7.4.3.5 Update Attribute Information Block */
    ctx->cc.t3t.writeFlag = NDEF_T3T_WRITEFLAG_OFF;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    ctx->cc.t3t.Ln        = messageLen;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ret                   = ndefT3TPollerWriteAttributeInformationBlock(ctx);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fd78 	bl	8009388 <ndefT3TPollerWriteAttributeInformationBlock>
 8009898:	4603      	mov	r3, r0
 800989a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800989c:	89fb      	ldrh	r3, [r7, #14]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d005      	beq.n	80098ae <ndefT3TPollerEndWriteMessage+0x56>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 80098aa:	89fb      	ldrh	r3, [r7, #14]
 80098ac:	e00f      	b.n	80098ce <ndefT3TPollerEndWriteMessage+0x76>
    }
    ctx->messageLen = messageLen;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <ndefT3TPollerEndWriteMessage+0x6c>
 80098c0:	2201      	movs	r2, #1
 80098c2:	e000      	b.n	80098c6 <ndefT3TPollerEndWriteMessage+0x6e>
 80098c4:	2202      	movs	r2, #2
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <ndefT3TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT3TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || !ndefT3TisT3TDevice(&ctx->device) )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <ndefT3TPollerWriteRawMessageLen+0x18>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d001      	beq.n	80098f2 <ndefT3TPollerWriteRawMessageLen+0x1c>
    {
        return ERR_PARAM;
 80098ee:	2307      	movs	r3, #7
 80098f0:	e010      	b.n	8009914 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d006      	beq.n	800990a <ndefT3TPollerWriteRawMessageLen+0x34>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009902:	2b02      	cmp	r3, #2
 8009904:	d001      	beq.n	800990a <ndefT3TPollerWriteRawMessageLen+0x34>
    {
        return ERR_WRONG_STATE;
 8009906:	2321      	movs	r3, #33	; 0x21
 8009908:	e004      	b.n	8009914 <ndefT3TPollerWriteRawMessageLen+0x3e>
    }
    return ndefT3TPollerEndWriteMessage(ctx, rawMessageLen);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff ffa3 	bl	8009858 <ndefT3TPollerEndWriteMessage>
 8009912:	4603      	mov	r3, r0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <ndefT4TInitializeIsoDepTxRxParam>:
 ******************************************************************************
 */

/*******************************************************************************/
static void ndefT4TInitializeIsoDepTxRxParam(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
    /* Initialize the ISO-DEP protocol transceive context */
    isoDepAPDU->txBuf        = &ctx->subCtx.t4t.cApduBuf;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f103 02b7 	add.w	r2, r3, #183	; 0xb7
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	601a      	str	r2, [r3, #0]
    isoDepAPDU->DID          = ctx->device.proto.isoDep.info.DID;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	f883 2020 	strb.w	r2, [r3, #32]
    isoDepAPDU->FWT          = ctx->device.proto.isoDep.info.FWT;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	615a      	str	r2, [r3, #20]
    isoDepAPDU->dFWT         = ctx->device.proto.isoDep.info.dFWT;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	619a      	str	r2, [r3, #24]
    isoDepAPDU->FSx          = ctx->device.proto.isoDep.info.FSx;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	839a      	strh	r2, [r3, #28]
    isoDepAPDU->ourFSx       = RFAL_ISODEP_FSX_KEEP;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	22ff      	movs	r2, #255	; 0xff
 800995a:	83da      	strh	r2, [r3, #30]
    isoDepAPDU->rxBuf        = &ctx->subCtx.t4t.rApduBuf;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f203 22ba 	addw	r2, r3, #698	; 0x2ba
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	609a      	str	r2, [r3, #8]
    isoDepAPDU->tmpBuf       = &ctx->subCtx.t4t.tmpBuf;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	611a      	str	r2, [r3, #16]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	bc80      	pop	{r7}
 8009978:	4770      	bx	lr

0800997a <ndefT4TTransceiveTxRx>:

/*******************************************************************************/
static ReturnCode ndefT4TTransceiveTxRx(ndefContext *ctx, rfalIsoDepApduTxRxParam *isoDepAPDU)
{
 800997a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800997c:	b08b      	sub	sp, #44	; 0x2c
 800997e:	af06      	add	r7, sp, #24
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f203 22ba 	addw	r2, r3, #698	; 0x2ba
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
    isoDepAPDU->rxLen                 = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f203 42c4 	addw	r2, r3, #1220	; 0x4c4
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	60da      	str	r2, [r3, #12]

    ret = rfalIsoDepStartApduTransceive(*isoDepAPDU);
 800999a:	683e      	ldr	r6, [r7, #0]
 800999c:	466d      	mov	r5, sp
 800999e:	f106 0410 	add.w	r4, r6, #16
 80099a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80099ae:	f005 fb51 	bl	800f054 <rfalIsoDepStartApduTransceive>
 80099b2:	4603      	mov	r3, r0
 80099b4:	81fb      	strh	r3, [r7, #14]
    if( ret == ERR_NONE )
 80099b6:	89fb      	ldrh	r3, [r7, #14]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d108      	bne.n	80099ce <ndefT4TTransceiveTxRx+0x54>
    {
        do {
            /* Blocking implementation, T4T may define rather long timeouts */
            rfalWorker();
 80099bc:	f00d fa7a 	bl	8016eb4 <rfalWorker>
            ret = rfalIsoDepGetApduTransceiveStatus();
 80099c0:	f005 fb9e 	bl	800f100 <rfalIsoDepGetApduTransceiveStatus>
 80099c4:	4603      	mov	r3, r0
 80099c6:	81fb      	strh	r3, [r7, #14]
        } while (ret == ERR_BUSY);
 80099c8:	89fb      	ldrh	r3, [r7, #14]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d0f6      	beq.n	80099bc <ndefT4TTransceiveTxRx+0x42>
    }
    
    if (ret != ERR_NONE)
 80099ce:	89fb      	ldrh	r3, [r7, #14]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <ndefT4TTransceiveTxRx+0x5e>
    {
        return ret;
 80099d4:	89fb      	ldrh	r3, [r7, #14]
 80099d6:	e00e      	b.n	80099f6 <ndefT4TTransceiveTxRx+0x7c>
    }

    ret = rfalT4TPollerParseRAPDU(&ctx->subCtx.t4t.respAPDU);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80099de:	4618      	mov	r0, r3
 80099e0:	f010 fd47 	bl	801a472 <rfalT4TPollerParseRAPDU>
 80099e4:	4603      	mov	r3, r0
 80099e6:	81fb      	strh	r3, [r7, #14]
    ctx->subCtx.t4t.rApduBodyLen = ctx->subCtx.t4t.respAPDU.rApduBodyLen;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 24c6 	ldrh.w	r2, [r3, #1222]	; 0x4c6
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8a3 25d0 	strh.w	r2, [r3, #1488]	; 0x5d0
    
    return ret;
 80099f4:	89fb      	ldrh	r3, [r7, #14]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009a00 <ndefT4TReadAndParseCCFile>:

/*******************************************************************************/
static ReturnCode ndefT4TReadAndParseCCFile(ndefContext *ctx)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
    
    ReturnCode           ret;
    uint8_t              dataIt;
    
    /* Select CCFILE TS T4T v1.0 7.2.1.3 */
    ret =  ndefT4TPollerSelectFile(ctx, RFAL_T4T_FID_CC);
 8009a08:	49a0      	ldr	r1, [pc, #640]	; (8009c8c <ndefT4TReadAndParseCCFile+0x28c>)
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f9e6 	bl	8009ddc <ndefT4TPollerSelectFile>
 8009a10:	4603      	mov	r3, r0
 8009a12:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8009a14:	89fb      	ldrh	r3, [r7, #14]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <ndefT4TReadAndParseCCFile+0x1e>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.4 */
        return ret;
 8009a1a:	89fb      	ldrh	r3, [r7, #14]
 8009a1c:	e180      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
    }

    /* Read CCFILE TS T4T v1.0 7.2.1.5 */
    /* read CCFILE assuming at least 15 bytes are available. If V3 found will read the extra bytes in a second step */
    ret = ndefT4TPollerReadBinary(ctx, 0U, NDEF_T4T_CCFILEV2_LEN);
 8009a1e:	220f      	movs	r2, #15
 8009a20:	2100      	movs	r1, #0
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa19 	bl	8009e5a <ndefT4TPollerReadBinary>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 8009a2c:	89fb      	ldrh	r3, [r7, #14]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <ndefT4TReadAndParseCCFile+0x36>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.6 */
        return ret;
 8009a32:	89fb      	ldrh	r3, [r7, #14]
 8009a34:	e174      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
    }
    (void)ST_MEMCPY(ctx->ccBuf, ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV2_LEN);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8009a42:	220f      	movs	r2, #15
 8009a44:	4619      	mov	r1, r3
 8009a46:	f012 f933 	bl	801bcb0 <memcpy>
    dataIt = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.ccLen = GETU16(&ctx->ccBuf[dataIt]);
 8009a4e:	7b7b      	ldrb	r3, [r7, #13]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	4413      	add	r3, r2
 8009a54:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	b21a      	sxth	r2, r3
 8009a5c:	7b7b      	ldrb	r3, [r7, #13]
 8009a5e:	3398      	adds	r3, #152	; 0x98
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	440b      	add	r3, r1
 8009a64:	3304      	adds	r3, #4
 8009a66:	3301      	adds	r3, #1
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	b21b      	sxth	r3, r3
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	b21b      	sxth	r3, r3
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    dataIt += (uint8_t)sizeof(uint16_t);
 8009a78:	7b7b      	ldrb	r3, [r7, #13]
 8009a7a:	3302      	adds	r3, #2
 8009a7c:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.vNo   = ctx->ccBuf[dataIt];
 8009a7e:	7b7b      	ldrb	r3, [r7, #13]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    dataIt++;
 8009a8e:	7b7b      	ldrb	r3, [r7, #13]
 8009a90:	3301      	adds	r3, #1
 8009a92:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLe   = GETU16(&ctx->ccBuf[dataIt]);
 8009a94:	7b7b      	ldrb	r3, [r7, #13]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	b21a      	sxth	r2, r3
 8009aa2:	7b7b      	ldrb	r3, [r7, #13]
 8009aa4:	3398      	adds	r3, #152	; 0x98
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	440b      	add	r3, r1
 8009aaa:	3304      	adds	r3, #4
 8009aac:	3301      	adds	r3, #1
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	b21b      	sxth	r3, r3
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	b21b      	sxth	r3, r3
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    dataIt += (uint8_t)sizeof(uint16_t);
 8009abe:	7b7b      	ldrb	r3, [r7, #13]
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	737b      	strb	r3, [r7, #13]
    ctx->cc.t4t.mLc   = GETU16(&ctx->ccBuf[dataIt]);
 8009ac4:	7b7b      	ldrb	r3, [r7, #13]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	b21a      	sxth	r2, r3
 8009ad2:	7b7b      	ldrb	r3, [r7, #13]
 8009ad4:	3398      	adds	r3, #152	; 0x98
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	440b      	add	r3, r1
 8009ada:	3304      	adds	r3, #4
 8009adc:	3301      	adds	r3, #1
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	b21b      	sxth	r3, r3
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	b21b      	sxth	r3, r3
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    dataIt += (uint8_t)sizeof(uint16_t);
 8009aee:	7b7b      	ldrb	r3, [r7, #13]
 8009af0:	3302      	adds	r3, #2
 8009af2:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify MLe and MLc are within the valid range */
    if( (ctx->cc.t4t.mLe < NDEF_T4T_MIN_VALID_MLE) || (ctx->cc.t4t.mLc < NDEF_T4T_MIN_VALID_MLC) )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8009afa:	2b0e      	cmp	r3, #14
 8009afc:	d904      	bls.n	8009b08 <ndefT4TReadAndParseCCFile+0x108>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8009b04:	2b0c      	cmp	r3, #12
 8009b06:	d801      	bhi.n	8009b0c <ndefT4TReadAndParseCCFile+0x10c>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 8009b08:	2305      	movs	r3, #5
 8009b0a:	e109      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
    }

    ctx->subCtx.t4t.curMLe   = (uint8_t)MIN(ctx->cc.t4t.mLe, NDEF_T4T_MAX_MLE); /* Only short field codind supported */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8009b12:	2bfe      	cmp	r3, #254	; 0xfe
 8009b14:	d804      	bhi.n	8009b20 <ndefT4TReadAndParseCCFile+0x120>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	e000      	b.n	8009b22 <ndefT4TReadAndParseCCFile+0x122>
 8009b20:	22ff      	movs	r2, #255	; 0xff
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t4t.curMLc   = (uint8_t)MIN(ctx->cc.t4t.mLc, NDEF_T4T_MAX_MLC); /* Only short field codind supported */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8009b2e:	2bfe      	cmp	r3, #254	; 0xfe
 8009b30:	d804      	bhi.n	8009b3c <ndefT4TReadAndParseCCFile+0x13c>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	e000      	b.n	8009b3e <ndefT4TReadAndParseCCFile+0x13e>
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    /* TS T4T v1.0 7.2.1.7 and 4.3.2.4 verify support of mapping version */
    if( ndefMajorVersion(ctx->cc.t4t.vNo) > ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009b4a:	091b      	lsrs	r3, r3, #4
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d901      	bls.n	8009b56 <ndefT4TReadAndParseCCFile+0x156>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 8009b52:	2305      	movs	r3, #5
 8009b54:	e0e4      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
    }
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8009b5c:	091b      	lsrs	r3, r3, #4
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d17e      	bne.n	8009c62 <ndefT4TReadAndParseCCFile+0x262>
    {
        /* V3 found: read remainng bytes */
        ret = ndefT4TPollerReadBinary(ctx, NDEF_T4T_CCFILEV2_LEN, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 8009b64:	2202      	movs	r2, #2
 8009b66:	210f      	movs	r1, #15
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f976 	bl	8009e5a <ndefT4TPollerReadBinary>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	81fb      	strh	r3, [r7, #14]
        if( ret != ERR_NONE )
 8009b72:	89fb      	ldrh	r3, [r7, #14]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <ndefT4TReadAndParseCCFile+0x17c>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.6 */
            return ret;
 8009b78:	89fb      	ldrh	r3, [r7, #14]
 8009b7a:	e0d1      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
        }
        (void)ST_MEMCPY(&ctx->ccBuf[NDEF_T4T_CCFILEV2_LEN], ctx->subCtx.t4t.rApduBuf.apdu, NDEF_T4T_CCFILEV3_LEN - NDEF_T4T_CCFILEV2_LEN);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	33ab      	adds	r3, #171	; 0xab
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	f202 22bd 	addw	r2, r2, #701	; 0x2bd
 8009b86:	8812      	ldrh	r2, [r2, #0]
 8009b88:	b292      	uxth	r2, r2
 8009b8a:	801a      	strh	r2, [r3, #0]
                
        /* TS T4T v1.0 7.2.1.7 verify coding as in table 5 */
        if( ctx->ccBuf[dataIt] != NDEF_T4T_ENDEF_CTLV_T )
 8009b8c:	7b7b      	ldrb	r3, [r7, #13]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	4413      	add	r3, r2
 8009b92:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009b96:	2b06      	cmp	r3, #6
 8009b98:	d001      	beq.n	8009b9e <ndefT4TReadAndParseCCFile+0x19e>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 8009b9a:	2305      	movs	r3, #5
 8009b9c:	e0c0      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 8009b9e:	7b7b      	ldrb	r3, [r7, #13]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_ENDEF_CTLV_L )
 8009ba4:	7b7b      	ldrb	r3, [r7, #13]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4413      	add	r3, r2
 8009baa:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009bae:	2b07      	cmp	r3, #7
 8009bb0:	d801      	bhi.n	8009bb6 <ndefT4TReadAndParseCCFile+0x1b6>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.8 */
            return ERR_REQUEST;
 8009bb2:	2305      	movs	r3, #5
 8009bb4:	e0b4      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 8009bb6:	7b7b      	ldrb	r3, [r7, #13]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 8009bbc:	7b7b      	ldrb	r3, [r7, #13]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 8009bcc:	7b7b      	ldrb	r3, [r7, #13]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 8009bd2:	7b7b      	ldrb	r3, [r7, #13]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 8009be2:	7b7b      	ldrb	r3, [r7, #13]
 8009be4:	3301      	adds	r3, #1
 8009be6:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = GETU32(&ctx->ccBuf[dataIt]);
 8009be8:	7b7b      	ldrb	r3, [r7, #13]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009bf2:	061a      	lsls	r2, r3, #24
 8009bf4:	7b7b      	ldrb	r3, [r7, #13]
 8009bf6:	3398      	adds	r3, #152	; 0x98
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	3301      	adds	r3, #1
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	431a      	orrs	r2, r3
 8009c06:	7b7b      	ldrb	r3, [r7, #13]
 8009c08:	3398      	adds	r3, #152	; 0x98
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3304      	adds	r3, #4
 8009c10:	3302      	adds	r3, #2
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	021b      	lsls	r3, r3, #8
 8009c16:	4313      	orrs	r3, r2
 8009c18:	7b7a      	ldrb	r2, [r7, #13]
 8009c1a:	3298      	adds	r2, #152	; 0x98
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	440a      	add	r2, r1
 8009c20:	3204      	adds	r2, #4
 8009c22:	3203      	adds	r2, #3
 8009c24:	7812      	ldrb	r2, [r2, #0]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint32_t);
 8009c2e:	7b7b      	ldrb	r3, [r7, #13]
 8009c30:	3304      	adds	r3, #4
 8009c32:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 8009c34:	7b7b      	ldrb	r3, [r7, #13]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 8009c44:	7b7b      	ldrb	r3, [r7, #13]
 8009c46:	3301      	adds	r3, #1
 8009c48:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 8009c4a:	7b7b      	ldrb	r3, [r7, #13]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 8009c5a:	7b7b      	ldrb	r3, [r7, #13]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	737b      	strb	r3, [r7, #13]
 8009c60:	e05d      	b.n	8009d1e <ndefT4TReadAndParseCCFile+0x31e>
    }
    else
    {
        if( ctx->ccBuf[dataIt] != NDEF_T4T_NDEF_CTLV_T )
 8009c62:	7b7b      	ldrb	r3, [r7, #13]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	4413      	add	r3, r2
 8009c68:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d001      	beq.n	8009c74 <ndefT4TReadAndParseCCFile+0x274>
        {
            return ERR_REQUEST;
 8009c70:	2305      	movs	r3, #5
 8009c72:	e055      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
        }
        dataIt++;
 8009c74:	7b7b      	ldrb	r3, [r7, #13]
 8009c76:	3301      	adds	r3, #1
 8009c78:	737b      	strb	r3, [r7, #13]
        if( ctx->ccBuf[dataIt] < NDEF_T4T_NDEF_CTLV_L )
 8009c7a:	7b7b      	ldrb	r3, [r7, #13]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009c84:	2b05      	cmp	r3, #5
 8009c86:	d803      	bhi.n	8009c90 <ndefT4TReadAndParseCCFile+0x290>
        {
            return ERR_REQUEST;
 8009c88:	2305      	movs	r3, #5
 8009c8a:	e049      	b.n	8009d20 <ndefT4TReadAndParseCCFile+0x320>
 8009c8c:	0801e97c 	.word	0x0801e97c
        }
        dataIt++;
 8009c90:	7b7b      	ldrb	r3, [r7, #13]
 8009c92:	3301      	adds	r3, #1
 8009c94:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[0U]   = ctx->ccBuf[dataIt];
 8009c96:	7b7b      	ldrb	r3, [r7, #13]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        dataIt++;
 8009ca6:	7b7b      	ldrb	r3, [r7, #13]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileId[1U]   = ctx->ccBuf[dataIt];
 8009cac:	7b7b      	ldrb	r3, [r7, #13]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        dataIt++;
 8009cbc:	7b7b      	ldrb	r3, [r7, #13]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.fileSize    = ndefBytes2Uint16(ctx->ccBuf[dataIt], ctx->ccBuf[dataIt + 1U]);
 8009cc2:	7b7b      	ldrb	r3, [r7, #13]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	7b7b      	ldrb	r3, [r7, #13]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	440b      	add	r3, r1
 8009cda:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        dataIt += (uint8_t)sizeof(uint16_t);
 8009cec:	7b7b      	ldrb	r3, [r7, #13]
 8009cee:	3302      	adds	r3, #2
 8009cf0:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.readAccess  = ctx->ccBuf[dataIt];
 8009cf2:	7b7b      	ldrb	r3, [r7, #13]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        dataIt++;
 8009d02:	7b7b      	ldrb	r3, [r7, #13]
 8009d04:	3301      	adds	r3, #1
 8009d06:	737b      	strb	r3, [r7, #13]
        ctx->cc.t4t.writeAccess = ctx->ccBuf[dataIt];
 8009d08:	7b7b      	ldrb	r3, [r7, #13]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        dataIt++;
 8009d18:	7b7b      	ldrb	r3, [r7, #13]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	737b      	strb	r3, [r7, #13]
    }
    return ERR_NONE;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <ndefT4TPollerSelectNdefTagApplication>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectNdefTagApplication(ndefContext *ctx)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08c      	sub	sp, #48	; 0x30
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    static const uint8_t NDEF_T4T_AID_NDEF[]    = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};  /*!< AID_NDEF v2.0 or higher   T4T 1.0  4.3.3 */
    static const uint8_t NDEF_T4T_AID_NDEF_V1[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x00};  /*!< AID_NDEF v1.0             T4T 1.0  4.3.3 */

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <ndefT4TPollerSelectNdefTagApplication+0x26>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <ndefT4TPollerSelectNdefTagApplication+0x1e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	d005      	beq.n	8009d52 <ndefT4TPollerSelectNdefTagApplication+0x2a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d001      	beq.n	8009d52 <ndefT4TPollerSelectNdefTagApplication+0x2a>
    {
        return ERR_PARAM;
 8009d4e:	2307      	movs	r3, #7
 8009d50:	e03b      	b.n	8009dca <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 8009d52:	f107 0308 	add.w	r3, r7, #8
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff fddf 	bl	800991c <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF, (uint8_t)sizeof(NDEF_T4T_AID_NDEF), &isoDepAPDU.txBufLen);
 8009d5e:	68b8      	ldr	r0, [r7, #8]
 8009d60:	f107 0308 	add.w	r3, r7, #8
 8009d64:	3304      	adds	r3, #4
 8009d66:	2207      	movs	r2, #7
 8009d68:	491a      	ldr	r1, [pc, #104]	; (8009dd4 <ndefT4TPollerSelectNdefTagApplication+0xac>)
 8009d6a:	f010 fbbe 	bl	801a4ea <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 8009d6e:	f107 0308 	add.w	r3, r7, #8
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff fe00 	bl	800997a <ndefT4TTransceiveTxRx>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 8009d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d105      	bne.n	8009d90 <ndefT4TPollerSelectNdefTagApplication+0x68>
    {
        /* application v2 or higher found */
        ctx->subCtx.t4t.mv1Flag = false;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        return ret;
 8009d8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d8e:	e01c      	b.n	8009dca <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }
    
    if( ret != ERR_REQUEST )
 8009d90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d92:	2b05      	cmp	r3, #5
 8009d94:	d001      	beq.n	8009d9a <ndefT4TPollerSelectNdefTagApplication+0x72>
    {
        return ret;
 8009d96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d98:	e017      	b.n	8009dca <ndefT4TPollerSelectNdefTagApplication+0xa2>
    }

    /* if v2 application not found, try v1 */
    (void)rfalT4TPollerComposeSelectAppl(isoDepAPDU.txBuf, NDEF_T4T_AID_NDEF_V1, (uint8_t)sizeof(NDEF_T4T_AID_NDEF_V1), &isoDepAPDU.txBufLen);
 8009d9a:	68b8      	ldr	r0, [r7, #8]
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	3304      	adds	r3, #4
 8009da2:	2207      	movs	r2, #7
 8009da4:	490c      	ldr	r1, [pc, #48]	; (8009dd8 <ndefT4TPollerSelectNdefTagApplication+0xb0>)
 8009da6:	f010 fba0 	bl	801a4ea <rfalT4TPollerComposeSelectAppl>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff fde2 	bl	800997a <ndefT4TTransceiveTxRx>
 8009db6:	4603      	mov	r3, r0
 8009db8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    if( ret == ERR_NONE )
 8009dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d103      	bne.n	8009dc8 <ndefT4TPollerSelectNdefTagApplication+0xa0>
    {
        /* application v1 found */
        ctx->subCtx.t4t.mv1Flag = true;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    }
    return ret;
 8009dc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3730      	adds	r7, #48	; 0x30
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	0801e980 	.word	0x0801e980
 8009dd8:	0801e988 	.word	0x0801e988

08009ddc <ndefT4TPollerSelectFile>:

/*******************************************************************************/
ReturnCode ndefT4TPollerSelectFile(ndefContext *ctx, const uint8_t *fileId)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08c      	sub	sp, #48	; 0x30
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00b      	beq.n	8009e04 <ndefT4TPollerSelectFile+0x28>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d103      	bne.n	8009dfc <ndefT4TPollerSelectFile+0x20>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	d005      	beq.n	8009e08 <ndefT4TPollerSelectFile+0x2c>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d001      	beq.n	8009e08 <ndefT4TPollerSelectFile+0x2c>
    {
        return ERR_PARAM;
 8009e04:	2307      	movs	r3, #7
 8009e06:	e024      	b.n	8009e52 <ndefT4TPollerSelectFile+0x76>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 8009e08:	f107 0308 	add.w	r3, r7, #8
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fd84 	bl	800991c <ndefT4TInitializeIsoDepTxRxParam>

    if (ctx->subCtx.t4t.mv1Flag)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d008      	beq.n	8009e30 <ndefT4TPollerSelectFile+0x54>
    {
        (void)rfalT4TPollerComposeSelectFileV1Mapping(isoDepAPDU.txBuf, fileId, (uint8_t)sizeof(fileId), &isoDepAPDU.txBufLen);
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	f107 0308 	add.w	r3, r7, #8
 8009e24:	3304      	adds	r3, #4
 8009e26:	2204      	movs	r2, #4
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	f010 fbbe 	bl	801a5aa <rfalT4TPollerComposeSelectFileV1Mapping>
 8009e2e:	e007      	b.n	8009e40 <ndefT4TPollerSelectFile+0x64>
    }
    else
    {
        (void)rfalT4TPollerComposeSelectFile(isoDepAPDU.txBuf, fileId, NDEF_T4T_FID_SIZE, &isoDepAPDU.txBufLen);
 8009e30:	68b8      	ldr	r0, [r7, #8]
 8009e32:	f107 0308 	add.w	r3, r7, #8
 8009e36:	3304      	adds	r3, #4
 8009e38:	2202      	movs	r2, #2
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	f010 fb85 	bl	801a54a <rfalT4TPollerComposeSelectFile>
    }
       
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff fd97 	bl	800997a <ndefT4TTransceiveTxRx>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    return ret;
 8009e50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3730      	adds	r7, #48	; 0x30
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <ndefT4TPollerReadBinary>:


/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinary(ndefContext *ctx, uint16_t offset, uint8_t len)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b08c      	sub	sp, #48	; 0x30
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	807b      	strh	r3, [r7, #2]
 8009e66:	4613      	mov	r3, r2
 8009e68:	707b      	strb	r3, [r7, #1]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe) || (offset > NDEF_T4T_OFFSET_MAX) )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d015      	beq.n	8009e9c <ndefT4TPollerReadBinary+0x42>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d103      	bne.n	8009e80 <ndefT4TPollerReadBinary+0x26>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d003      	beq.n	8009e88 <ndefT4TPollerReadBinary+0x2e>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d109      	bne.n	8009e9c <ndefT4TPollerReadBinary+0x42>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009e8e:	787a      	ldrb	r2, [r7, #1]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d803      	bhi.n	8009e9c <ndefT4TPollerReadBinary+0x42>
 8009e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	da01      	bge.n	8009ea0 <ndefT4TPollerReadBinary+0x46>
    {
        return ERR_PARAM;
 8009e9c:	2307      	movs	r3, #7
 8009e9e:	e016      	b.n	8009ece <ndefT4TPollerReadBinary+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 8009ea0:	f107 0308 	add.w	r3, r7, #8
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fd38 	bl	800991c <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 8009eac:	68b8      	ldr	r0, [r7, #8]
 8009eae:	f107 0308 	add.w	r3, r7, #8
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	787a      	ldrb	r2, [r7, #1]
 8009eb6:	8879      	ldrh	r1, [r7, #2]
 8009eb8:	f010 fba7 	bl	801a60a <rfalT4TPollerComposeReadData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 8009ebc:	f107 0308 	add.w	r3, r7, #8
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff fd59 	bl	800997a <ndefT4TTransceiveTxRx>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	85fb      	strh	r3, [r7, #46]	; 0x2e
   
    return ret;
 8009ecc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3730      	adds	r7, #48	; 0x30
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <ndefT4TPollerReadBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBinaryODO(ndefContext *ctx, uint32_t offset, uint8_t len)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b08e      	sub	sp, #56	; 0x38
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	71fb      	strb	r3, [r7, #7]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLe)  || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d016      	beq.n	8009f18 <ndefT4TPollerReadBinaryODO+0x42>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d103      	bne.n	8009efa <ndefT4TPollerReadBinaryODO+0x24>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	d003      	beq.n	8009f02 <ndefT4TPollerReadBinaryODO+0x2c>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d10a      	bne.n	8009f18 <ndefT4TPollerReadBinaryODO+0x42>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009f08:	79fa      	ldrb	r2, [r7, #7]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d804      	bhi.n	8009f18 <ndefT4TPollerReadBinaryODO+0x42>
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d301      	bcc.n	8009f1c <ndefT4TPollerReadBinaryODO+0x46>
    {
        return ERR_PARAM;
 8009f18:	2307      	movs	r3, #7
 8009f1a:	e016      	b.n	8009f4a <ndefT4TPollerReadBinaryODO+0x74>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 8009f1c:	f107 0310 	add.w	r3, r7, #16
 8009f20:	4619      	mov	r1, r3
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f7ff fcfa 	bl	800991c <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadDataODO(isoDepAPDU.txBuf, offset, len, &isoDepAPDU.txBufLen);
 8009f28:	6938      	ldr	r0, [r7, #16]
 8009f2a:	f107 0310 	add.w	r3, r7, #16
 8009f2e:	3304      	adds	r3, #4
 8009f30:	79fa      	ldrb	r2, [r7, #7]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	f010 fb92 	bl	801a65c <rfalT4TPollerComposeReadDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 8009f38:	f107 0310 	add.w	r3, r7, #16
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7ff fd1b 	bl	800997a <ndefT4TTransceiveTxRx>
 8009f44:	4603      	mov	r3, r0
 8009f46:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 8009f48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 }
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3738      	adds	r7, #56	; 0x38
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <ndefT4TPollerReadBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadBytes(ndefContext *ctx, uint32_t offset, uint32_t len, uint8_t *buf, uint32_t *rcvdLen)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b08a      	sub	sp, #40	; 0x28
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	607a      	str	r2, [r7, #4]
 8009f5e:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              le;
    uint32_t             lvOffset = offset;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	623b      	str	r3, [r7, #32]
    uint32_t             lvLen    = len;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	61fb      	str	r3, [r7, #28]
    uint8_t *            lvBuf    = buf;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	61bb      	str	r3, [r7, #24]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <ndefT4TPollerReadBytes+0x3e>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <ndefT4TPollerReadBytes+0x30>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	2b20      	cmp	r3, #32
 8009f80:	d003      	beq.n	8009f8a <ndefT4TPollerReadBytes+0x38>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d102      	bne.n	8009f90 <ndefT4TPollerReadBytes+0x3e>
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <ndefT4TPollerReadBytes+0x42>
    {
        return ERR_PARAM;
 8009f90:	2307      	movs	r3, #7
 8009f92:	e06c      	b.n	800a06e <ndefT4TPollerReadBytes+0x11c>
    }
    if( rcvdLen != NULL )
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <ndefT4TPollerReadBytes+0x4e>
    {
        *rcvdLen = 0U;
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
    }

    do {
        le = ( lvLen > ctx->subCtx.t4t.curMLe ) ? ctx->subCtx.t4t.curMLe : (uint8_t)lvLen;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d903      	bls.n	8009fb6 <ndefT4TPollerReadBytes+0x64>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009fb4:	e001      	b.n	8009fba <ndefT4TPollerReadBytes+0x68>
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	75fb      	strb	r3, [r7, #23]
        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fc2:	d308      	bcc.n	8009fd6 <ndefT4TPollerReadBytes+0x84>
        {
            ret = ndefT4TPollerReadBinaryODO(ctx, lvOffset, le);
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6a39      	ldr	r1, [r7, #32]
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff ff83 	bl	8009ed6 <ndefT4TPollerReadBinaryODO>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009fd4:	e008      	b.n	8009fe8 <ndefT4TPollerReadBytes+0x96>
        }
        else
        {
            ret = ndefT4TPollerReadBinary(ctx, (uint16_t)lvOffset, le);
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	7dfa      	ldrb	r2, [r7, #23]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff ff3b 	bl	8009e5a <ndefT4TPollerReadBinary>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if( ret != ERR_NONE )
 8009fe8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <ndefT4TPollerReadBytes+0xa0>
        {
            return ret;
 8009fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ff0:	e03d      	b.n	800a06e <ndefT4TPollerReadBytes+0x11c>
        }
        if( ctx->subCtx.t4t.rApduBodyLen == 0U )
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f8b3 35d0 	ldrh.w	r3, [r3, #1488]	; 0x5d0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d036      	beq.n	800a06a <ndefT4TPollerReadBytes+0x118>
        {
            break; /* no more to read */
        }
        if( ctx->subCtx.t4t.rApduBodyLen >  lvLen )
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8b3 35d0 	ldrh.w	r3, [r3, #1488]	; 0x5d0
 800a002:	461a      	mov	r2, r3
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	4293      	cmp	r3, r2
 800a008:	d201      	bcs.n	800a00e <ndefT4TPollerReadBytes+0xbc>
        {
            return ERR_SYSTEM;
 800a00a:	2308      	movs	r3, #8
 800a00c:	e02f      	b.n	800a06e <ndefT4TPollerReadBytes+0x11c>
        }
        (void)ST_MEMCPY(lvBuf, ctx->subCtx.t4t.rApduBuf.apdu, ctx->subCtx.t4t.rApduBodyLen);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f203 21bd 	addw	r1, r3, #701	; 0x2bd
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8b3 35d0 	ldrh.w	r3, [r3, #1488]	; 0x5d0
 800a01a:	461a      	mov	r2, r3
 800a01c:	69b8      	ldr	r0, [r7, #24]
 800a01e:	f011 fe47 	bl	801bcb0 <memcpy>
        lvBuf     = &lvBuf[ctx->subCtx.t4t.rApduBodyLen];
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8b3 35d0 	ldrh.w	r3, [r3, #1488]	; 0x5d0
 800a028:	461a      	mov	r2, r3
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	4413      	add	r3, r2
 800a02e:	61bb      	str	r3, [r7, #24]
        lvOffset += ctx->subCtx.t4t.rApduBodyLen;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8b3 35d0 	ldrh.w	r3, [r3, #1488]	; 0x5d0
 800a036:	461a      	mov	r2, r3
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	4413      	add	r3, r2
 800a03c:	623b      	str	r3, [r7, #32]
        lvLen    -= ctx->subCtx.t4t.rApduBodyLen;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8b3 35d0 	ldrh.w	r3, [r3, #1488]	; 0x5d0
 800a044:	461a      	mov	r2, r3
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	1a9b      	subs	r3, r3, r2
 800a04a:	61fb      	str	r3, [r7, #28]
        if( rcvdLen != NULL )
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <ndefT4TPollerReadBytes+0x110>
        {
            *rcvdLen += ctx->subCtx.t4t.rApduBodyLen;
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	f8b2 25d0 	ldrh.w	r2, [r2, #1488]	; 0x5d0
 800a05c:	441a      	add	r2, r3
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	601a      	str	r2, [r3, #0]
        }
    } while( lvLen != 0U );
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d19b      	bne.n	8009fa0 <ndefT4TPollerReadBytes+0x4e>
 800a068:	e000      	b.n	800a06c <ndefT4TPollerReadBytes+0x11a>
            break; /* no more to read */
 800a06a:	bf00      	nop

    return ERR_NONE;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3728      	adds	r7, #40	; 0x28
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <ndefT4TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT4TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
    if( (ctx == NULL) || (dev == NULL) || !ndefT4TisT4TDevice(dev) )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00e      	beq.n	800a0a4 <ndefT4TPollerContextInitialization+0x2e>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <ndefT4TPollerContextInitialization+0x2e>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <ndefT4TPollerContextInitialization+0x26>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	2b20      	cmp	r3, #32
 800a09a:	d005      	beq.n	800a0a8 <ndefT4TPollerContextInitialization+0x32>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d001      	beq.n	800a0a8 <ndefT4TPollerContextInitialization+0x32>
    {
        return ERR_PARAM;
 800a0a4:	2307      	movs	r3, #7
 800a0a6:	e012      	b.n	800a0ce <ndefT4TPollerContextInitialization+0x58>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2278      	movs	r2, #120	; 0x78
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f011 fdfe 	bl	801bcb0 <memcpy>

    ctx->state             = NDEF_STATE_INVALID;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->subCtx.t4t.curMLc = NDEF_T4T_DEFAULT_MLC;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	220d      	movs	r2, #13
 800a0c0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    ctx->subCtx.t4t.curMLe = NDEF_T4T_DEFAULT_MLE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	220f      	movs	r2, #15
 800a0c8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    return ERR_NONE;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <ndefT4TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT4TPollerNdefDetect(ndefContext *ctx, ndefInfo *info)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t*             nLen;
    uint8_t              nlenLen;

    if( info != NULL )
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d011      	beq.n	800a10a <ndefT4TPollerNdefDetect+0x34>
    {
        info->state                = NDEF_STATE_INVALID;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2200      	movs	r2, #0
 800a108:	60da      	str	r2, [r3, #12]
    }

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <ndefT4TPollerNdefDetect+0x52>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d103      	bne.n	800a120 <ndefT4TPollerNdefDetect+0x4a>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b20      	cmp	r3, #32
 800a11e:	d005      	beq.n	800a12c <ndefT4TPollerNdefDetect+0x56>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d001      	beq.n	800a12c <ndefT4TPollerNdefDetect+0x56>
    {
        return ERR_PARAM;
 800a128:	2307      	movs	r3, #7
 800a12a:	e0fa      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }

    ctx->state = NDEF_STATE_INVALID;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Select NDEF Tag application TS T4T v1.0 7.2.1.1 */
    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fdf7 	bl	8009d28 <ndefT4TPollerSelectNdefTagApplication>
 800a13a:	4603      	mov	r3, r0
 800a13c:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a13e:	89fb      	ldrh	r3, [r7, #14]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <ndefT4TPollerNdefDetect+0x72>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.2 */
        return ret; 
 800a144:	89fb      	ldrh	r3, [r7, #14]
 800a146:	e0ec      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    /* TS T4T v1.0 7.2.1.3 and following */
    ret = ndefT4TReadAndParseCCFile(ctx);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fc59 	bl	8009a00 <ndefT4TReadAndParseCCFile>
 800a14e:	4603      	mov	r3, r0
 800a150:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a152:	89fb      	ldrh	r3, [r7, #14]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <ndefT4TPollerNdefDetect+0x86>
    {
        return ret;
 800a158:	89fb      	ldrh	r3, [r7, #14]
 800a15a:	e0e2      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }
    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a162:	091b      	lsrs	r3, r3, #4
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b03      	cmp	r3, #3
 800a168:	d101      	bne.n	800a16e <ndefT4TPollerNdefDetect+0x98>
 800a16a:	2304      	movs	r3, #4
 800a16c:	e000      	b.n	800a170 <ndefT4TPollerNdefDetect+0x9a>
 800a16e:	2302      	movs	r3, #2
 800a170:	737b      	strb	r3, [r7, #13]
    
    /* TS T4T v1.0 7.2.1.7 verify file READ access */
    if( !(ndefT4TIsReadAccessGranted(ctx->cc.t4t.readAccess)) )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00c      	beq.n	800a196 <ndefT4TPollerNdefDetect+0xc0>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a182:	b25b      	sxtb	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	da04      	bge.n	800a192 <ndefT4TPollerNdefDetect+0xbc>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a18e:	2bff      	cmp	r3, #255	; 0xff
 800a190:	d101      	bne.n	800a196 <ndefT4TPollerNdefDetect+0xc0>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.8 */
        return ERR_REQUEST;
 800a192:	2305      	movs	r3, #5
 800a194:	e0c5      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* File size need at least be enough to store NLEN or ENLEN */
    if( ctx->cc.t4t.fileSize < nlenLen)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a19c:	7b7b      	ldrb	r3, [r7, #13]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d201      	bcs.n	800a1a6 <ndefT4TPollerNdefDetect+0xd0>
    {
        return ERR_REQUEST;
 800a1a2:	2305      	movs	r3, #5
 800a1a4:	e0bd      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }

    /* Select NDEF File TS T4T v1.0 7.2.1.9 */
    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3384      	adds	r3, #132	; 0x84
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff fe15 	bl	8009ddc <ndefT4TPollerSelectFile>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a1b6:	89fb      	ldrh	r3, [r7, #14]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <ndefT4TPollerNdefDetect+0xea>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.10 */
        return ret;
 800a1bc:	89fb      	ldrh	r3, [r7, #14]
 800a1be:	e0b0      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }
    /* Read NLEN/ENLEN TS T4T v1.0 7.2.1.11 */
    ret = ndefT4TPollerReadBinary(ctx, 0U, nlenLen);
 800a1c0:	7b7b      	ldrb	r3, [r7, #13]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff fe47 	bl	8009e5a <ndefT4TPollerReadBinary>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a1d0:	89fb      	ldrh	r3, [r7, #14]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <ndefT4TPollerNdefDetect+0x104>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ret;
 800a1d6:	89fb      	ldrh	r3, [r7, #14]
 800a1d8:	e0a3      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }
    nLen = ctx->subCtx.t4t.rApduBuf.apdu;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800a1e0:	60bb      	str	r3, [r7, #8]
    ctx->messageLen    = (nlenLen == NDEF_T4T_ENLEN_LEN) ?  GETU32(&nLen[0]) : (uint32_t)ndefBytes2Uint16(nLen[0], nLen[1]);
 800a1e2:	7b7b      	ldrb	r3, [r7, #13]
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d111      	bne.n	800a20c <ndefT4TPollerNdefDetect+0x136>
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	061a      	lsls	r2, r3, #24
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	041b      	lsls	r3, r3, #16
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	3302      	adds	r3, #2
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	021b      	lsls	r3, r3, #8
 800a200:	4313      	orrs	r3, r2
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	3203      	adds	r2, #3
 800a206:	7812      	ldrb	r2, [r2, #0]
 800a208:	4313      	orrs	r3, r2
 800a20a:	e00a      	b.n	800a222 <ndefT4TPollerNdefDetect+0x14c>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	b29a      	uxth	r2, r3
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	3301      	adds	r3, #1
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	4313      	orrs	r3, r2
 800a220:	b29b      	uxth	r3, r3
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ctx->messageOffset = nlenLen;
 800a228:	7b7a      	ldrb	r2, [r7, #13]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->areaLen       = ctx->cc.t4t.fileSize;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    if ( (ctx->messageLen > (ctx->cc.t4t.fileSize - nlenLen)) || ((ctx->messageLen > 0U) && (ctx->messageLen < NDEF_T4T_MIN_NLEN)) )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800a248:	7b7b      	ldrb	r3, [r7, #13]
 800a24a:	1acb      	subs	r3, r1, r3
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d809      	bhi.n	800a264 <ndefT4TPollerNdefDetect+0x18e>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a256:	2b00      	cmp	r3, #0
 800a258:	d006      	beq.n	800a268 <ndefT4TPollerNdefDetect+0x192>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a260:	2b02      	cmp	r3, #2
 800a262:	d801      	bhi.n	800a268 <ndefT4TPollerNdefDetect+0x192>
    {
        /* Conclude procedure TS T4T v1.0 7.2.1.11 */
        return ERR_REQUEST;
 800a264:	2305      	movs	r3, #5
 800a266:	e05c      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
    }
    
    if( ctx->messageLen == 0U ) 
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d116      	bne.n	800a2a0 <ndefT4TPollerNdefDetect+0x1ca>
    {
        if( !(ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) )
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00c      	beq.n	800a296 <ndefT4TPollerNdefDetect+0x1c0>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a282:	b25b      	sxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	da04      	bge.n	800a292 <ndefT4TPollerNdefDetect+0x1bc>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a28e:	2bff      	cmp	r3, #255	; 0xff
 800a290:	d101      	bne.n	800a296 <ndefT4TPollerNdefDetect+0x1c0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.1.11 */
            return ERR_REQUEST;
 800a292:	2305      	movs	r3, #5
 800a294:	e045      	b.n	800a322 <ndefT4TPollerNdefDetect+0x24c>
        }
        ctx->state = NDEF_STATE_INITIALIZED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800a29e:	e015      	b.n	800a2cc <ndefT4TPollerNdefDetect+0x1f6>
    }
    else
    {
        ctx->state = (ndefT4TIsWriteAccessGranted(ctx->cc.t4t.writeAccess)) ? NDEF_STATE_READWRITE : NDEF_STATE_READONLY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <ndefT4TPollerNdefDetect+0x1ea>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a2b0:	b25b      	sxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	da06      	bge.n	800a2c4 <ndefT4TPollerNdefDetect+0x1ee>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a2bc:	2bff      	cmp	r3, #255	; 0xff
 800a2be:	d001      	beq.n	800a2c4 <ndefT4TPollerNdefDetect+0x1ee>
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	e000      	b.n	800a2c6 <ndefT4TPollerNdefDetect+0x1f0>
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    if( info != NULL )
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d026      	beq.n	800a320 <ndefT4TPollerNdefDetect+0x24a>
    {
        info->state                = ctx->state; 
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ndefMajorVersion(ctx->cc.t4t.vNo);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a2e2:	091b      	lsrs	r3, r3, #4
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ndefMinorVersion(ctx->cc.t4t.vNo);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a2f0:	f003 030f 	and.w	r3, r3, #15
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = ctx->areaLen - ctx->messageOffset;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a310:	1ad2      	subs	r2, r2, r3
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	60da      	str	r2, [r3, #12]
    }

    return ERR_NONE;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <ndefT4TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b088      	sub	sp, #32
 800a32e:	af02      	add	r7, sp, #8
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (buf == NULL) )
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00e      	beq.n	800a35c <ndefT4TPollerReadRawMessage+0x32>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d103      	bne.n	800a34e <ndefT4TPollerReadRawMessage+0x24>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d003      	beq.n	800a356 <ndefT4TPollerReadRawMessage+0x2c>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d102      	bne.n	800a35c <ndefT4TPollerReadRawMessage+0x32>
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <ndefT4TPollerReadRawMessage+0x36>
    {
        return ERR_PARAM;
 800a35c:	2307      	movs	r3, #7
 800a35e:	e024      	b.n	800a3aa <ndefT4TPollerReadRawMessage+0x80>
    }
    /* TS T4T v1.0 7.2.2.1: T4T NDEF Detect should have been called before NDEF read procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF read procedure*/

    /* TS T4T v1.0 7.3.3.2: check presence of NDEF message */
    if ( ctx->state <= NDEF_STATE_INITIALIZED )
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a366:	2b01      	cmp	r3, #1
 800a368:	d801      	bhi.n	800a36e <ndefT4TPollerReadRawMessage+0x44>
    {
        /* Conclude procedure TS T4T v1.0 7.2.2.2 */
        return ERR_WRONG_STATE;
 800a36a:	2321      	movs	r3, #33	; 0x21
 800a36c:	e01d      	b.n	800a3aa <ndefT4TPollerReadRawMessage+0x80>
    }

    if( ctx->messageLen > bufLen )
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	429a      	cmp	r2, r3
 800a378:	d201      	bcs.n	800a37e <ndefT4TPollerReadRawMessage+0x54>
    {
        return ERR_NOMEM;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e015      	b.n	800a3aa <ndefT4TPollerReadRawMessage+0x80>
    }

    /* TS T4T v1.0 7.3.3.3: read the NDEF message */
    ret = ndefT4TPollerReadBytes(ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f7ff fdde 	bl	8009f52 <ndefT4TPollerReadBytes>
 800a396:	4603      	mov	r3, r0
 800a398:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a39a:	8afb      	ldrh	r3, [r7, #22]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <ndefT4TPollerReadRawMessage+0x7e>
    {
        ctx->state = NDEF_STATE_INVALID;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }

    return ret;
 800a3a8:	8afb      	ldrh	r3, [r7, #22]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <ndefT4TPollerWriteBinary>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinary(ndefContext *ctx, uint16_t offset, const uint8_t *data, uint8_t len)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b090      	sub	sp, #64	; 0x40
 800a3b6:	af02      	add	r7, sp, #8
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	460b      	mov	r3, r1
 800a3c0:	817b      	strh	r3, [r7, #10]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	727b      	strb	r3, [r7, #9]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_OFFSET_MAX) )
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d015      	beq.n	800a3f8 <ndefT4TPollerWriteBinary+0x46>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <ndefT4TPollerWriteBinary+0x2a>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	2b20      	cmp	r3, #32
 800a3da:	d003      	beq.n	800a3e4 <ndefT4TPollerWriteBinary+0x32>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d109      	bne.n	800a3f8 <ndefT4TPollerWriteBinary+0x46>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a3ea:	7a7a      	ldrb	r2, [r7, #9]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d803      	bhi.n	800a3f8 <ndefT4TPollerWriteBinary+0x46>
 800a3f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	da01      	bge.n	800a3fc <ndefT4TPollerWriteBinary+0x4a>
    {
        return ERR_PARAM;
 800a3f8:	2307      	movs	r3, #7
 800a3fa:	e019      	b.n	800a430 <ndefT4TPollerWriteBinary+0x7e>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800a3fc:	f107 0310 	add.w	r3, r7, #16
 800a400:	4619      	mov	r1, r3
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7ff fa8a 	bl	800991c <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteData(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800a408:	6938      	ldr	r0, [r7, #16]
 800a40a:	7a7a      	ldrb	r2, [r7, #9]
 800a40c:	8979      	ldrh	r1, [r7, #10]
 800a40e:	f107 0310 	add.w	r3, r7, #16
 800a412:	3304      	adds	r3, #4
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	4613      	mov	r3, r2
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	f010 f980 	bl	801a71e <rfalT4TPollerComposeWriteData>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800a41e:	f107 0310 	add.w	r3, r7, #16
 800a422:	4619      	mov	r1, r3
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7ff faa8 	bl	800997a <ndefT4TTransceiveTxRx>
 800a42a:	4603      	mov	r3, r0
 800a42c:	86fb      	strh	r3, [r7, #54]	; 0x36
   
    return ret;
 800a42e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800a430:	4618      	mov	r0, r3
 800a432:	3738      	adds	r7, #56	; 0x38
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <ndefT4TPollerWriteBinaryODO>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBinaryODO(ndefContext *ctx, uint32_t offset, const uint8_t *data, uint8_t len)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b090      	sub	sp, #64	; 0x40
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	70fb      	strb	r3, [r7, #3]
    ReturnCode               ret;
    rfalIsoDepApduTxRxParam  isoDepAPDU;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (len >  ctx->subCtx.t4t.curMLc) || (offset > NDEF_T4T_ODO_OFFSET_MAX) )
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d016      	beq.n	800a47a <ndefT4TPollerWriteBinaryODO+0x42>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <ndefT4TPollerWriteBinaryODO+0x24>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	785b      	ldrb	r3, [r3, #1]
 800a458:	2b20      	cmp	r3, #32
 800a45a:	d003      	beq.n	800a464 <ndefT4TPollerWriteBinaryODO+0x2c>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d10a      	bne.n	800a47a <ndefT4TPollerWriteBinaryODO+0x42>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d804      	bhi.n	800a47a <ndefT4TPollerWriteBinaryODO+0x42>
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800a476:	4293      	cmp	r3, r2
 800a478:	d301      	bcc.n	800a47e <ndefT4TPollerWriteBinaryODO+0x46>
    {
        return ERR_PARAM;
 800a47a:	2307      	movs	r3, #7
 800a47c:	e019      	b.n	800a4b2 <ndefT4TPollerWriteBinaryODO+0x7a>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800a47e:	f107 0310 	add.w	r3, r7, #16
 800a482:	4619      	mov	r1, r3
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fa49 	bl	800991c <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeWriteDataODO(isoDepAPDU.txBuf, offset, data, len, &isoDepAPDU.txBufLen);
 800a48a:	6938      	ldr	r0, [r7, #16]
 800a48c:	78fa      	ldrb	r2, [r7, #3]
 800a48e:	f107 0310 	add.w	r3, r7, #16
 800a492:	3304      	adds	r3, #4
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	4613      	mov	r3, r2
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	f010 f973 	bl	801a786 <rfalT4TPollerComposeWriteDataODO>
    ret = ndefT4TTransceiveTxRx(ctx, &isoDepAPDU);
 800a4a0:	f107 0310 	add.w	r3, r7, #16
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff fa67 	bl	800997a <ndefT4TTransceiveTxRx>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	86fb      	strh	r3, [r7, #54]	; 0x36

    return ret;
 800a4b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3738      	adds	r7, #56	; 0x38
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <ndefT4TPollerWriteBytes>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t *buf, uint32_t len)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b088      	sub	sp, #32
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	603b      	str	r3, [r7, #0]
    ReturnCode           ret;
    uint8_t              lc;
    uint32_t             lvOffset = offset;
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	61bb      	str	r3, [r7, #24]
    uint32_t             lvLen    = len;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	617b      	str	r3, [r7, #20]
    const uint8_t *      lvBuf    = buf;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	613b      	str	r3, [r7, #16]

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || (lvLen == 0U) )
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00e      	beq.n	800a4f8 <ndefT4TPollerWriteBytes+0x3e>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d103      	bne.n	800a4ea <ndefT4TPollerWriteBytes+0x30>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	785b      	ldrb	r3, [r3, #1]
 800a4e6:	2b20      	cmp	r3, #32
 800a4e8:	d003      	beq.n	800a4f2 <ndefT4TPollerWriteBytes+0x38>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d102      	bne.n	800a4f8 <ndefT4TPollerWriteBytes+0x3e>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <ndefT4TPollerWriteBytes+0x42>
    {
        return ERR_PARAM;
 800a4f8:	2307      	movs	r3, #7
 800a4fa:	e048      	b.n	800a58e <ndefT4TPollerWriteBytes+0xd4>
    }

    do {

        if( lvOffset > NDEF_T4T_MV2_MAX_OFSSET )
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a502:	d318      	bcc.n	800a536 <ndefT4TPollerWriteBytes+0x7c>
        {
            lc = ( lvLen > ((uint32_t)ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) ) ? (uint8_t)(ctx->subCtx.t4t.curMLc - NDEF_T4T_WRITE_ODO_PREFIX_SIZE) : (uint8_t)lvLen;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a50a:	3b07      	subs	r3, #7
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d905      	bls.n	800a51e <ndefT4TPollerWriteBytes+0x64>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a518:	3b07      	subs	r3, #7
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	e001      	b.n	800a522 <ndefT4TPollerWriteBytes+0x68>
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinaryODO(ctx, lvOffset, lvBuf, lc);
 800a524:	7f7b      	ldrb	r3, [r7, #29]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	69b9      	ldr	r1, [r7, #24]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7ff ff84 	bl	800a438 <ndefT4TPollerWriteBinaryODO>
 800a530:	4603      	mov	r3, r0
 800a532:	83fb      	strh	r3, [r7, #30]
 800a534:	e016      	b.n	800a564 <ndefT4TPollerWriteBytes+0xaa>
        }
        else
        {
            lc = ( lvLen > ctx->subCtx.t4t.curMLc ) ? ctx->subCtx.t4t.curMLc : (uint8_t)lvLen;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a53c:	461a      	mov	r2, r3
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	4293      	cmp	r3, r2
 800a542:	d903      	bls.n	800a54c <ndefT4TPollerWriteBytes+0x92>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a54a:	e001      	b.n	800a550 <ndefT4TPollerWriteBytes+0x96>
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	777b      	strb	r3, [r7, #29]
            ret = ndefT4TPollerWriteBinary(ctx, (uint16_t)lvOffset, lvBuf, lc);
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	b299      	uxth	r1, r3
 800a556:	7f7b      	ldrb	r3, [r7, #29]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff ff29 	bl	800a3b2 <ndefT4TPollerWriteBinary>
 800a560:	4603      	mov	r3, r0
 800a562:	83fb      	strh	r3, [r7, #30]
        }
        if( ret != ERR_NONE )
 800a564:	8bfb      	ldrh	r3, [r7, #30]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <ndefT4TPollerWriteBytes+0xb4>
        {
            return ret;
 800a56a:	8bfb      	ldrh	r3, [r7, #30]
 800a56c:	e00f      	b.n	800a58e <ndefT4TPollerWriteBytes+0xd4>
        }
        lvBuf     = &lvBuf[lc];
 800a56e:	7f7b      	ldrb	r3, [r7, #29]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	4413      	add	r3, r2
 800a574:	613b      	str	r3, [r7, #16]
        lvOffset += lc;
 800a576:	7f7b      	ldrb	r3, [r7, #29]
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	4413      	add	r3, r2
 800a57c:	61bb      	str	r3, [r7, #24]
        lvLen    -= lc; 
 800a57e:	7f7b      	ldrb	r3, [r7, #29]
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	617b      	str	r3, [r7, #20]
    } while( lvLen != 0U );
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1b7      	bne.n	800a4fc <ndefT4TPollerWriteBytes+0x42>

    return ERR_NONE;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3720      	adds	r7, #32
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <ndefT4TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];
    uint8_t              dataIt;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00b      	beq.n	800a5be <ndefT4TPollerWriteRawMessageLen+0x28>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d103      	bne.n	800a5b6 <ndefT4TPollerWriteRawMessageLen+0x20>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	d005      	beq.n	800a5c2 <ndefT4TPollerWriteRawMessageLen+0x2c>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d001      	beq.n	800a5c2 <ndefT4TPollerWriteRawMessageLen+0x2c>
    {
        return ERR_PARAM;
 800a5be:	2307      	movs	r3, #7
 800a5c0:	e065      	b.n	800a68e <ndefT4TPollerWriteRawMessageLen+0xf8>
    }
    
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d006      	beq.n	800a5da <ndefT4TPollerWriteRawMessageLen+0x44>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d001      	beq.n	800a5da <ndefT4TPollerWriteRawMessageLen+0x44>
    {
        return ERR_WRONG_STATE;
 800a5d6:	2321      	movs	r3, #33	; 0x21
 800a5d8:	e059      	b.n	800a68e <ndefT4TPollerWriteRawMessageLen+0xf8>
    }

    dataIt = 0U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73fb      	strb	r3, [r7, #15]
    if( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) )
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a5e4:	091b      	lsrs	r3, r3, #4
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d12f      	bne.n	800a64c <ndefT4TPollerWriteRawMessageLen+0xb6>
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >> 24U);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	0e1a      	lsrs	r2, r3, #24
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	f107 0110 	add.w	r1, r7, #16
 800a5f8:	440b      	add	r3, r1
 800a5fa:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
 800a600:	3301      	adds	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >> 16U);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	0c1a      	lsrs	r2, r3, #16
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	f107 0110 	add.w	r1, r7, #16
 800a610:	440b      	add	r3, r1
 800a612:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	3301      	adds	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	0a1a      	lsrs	r2, r3, #8
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	f107 0110 	add.w	r1, r7, #16
 800a628:	440b      	add	r3, r1
 800a62a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
 800a630:	3301      	adds	r3, #1
 800a632:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	b2d2      	uxtb	r2, r2
 800a63a:	f107 0110 	add.w	r1, r7, #16
 800a63e:	440b      	add	r3, r1
 800a640:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	3301      	adds	r3, #1
 800a648:	73fb      	strb	r3, [r7, #15]
 800a64a:	e016      	b.n	800a67a <ndefT4TPollerWriteRawMessageLen+0xe4>
    }
    else
    {
        buf[dataIt] = (uint8_t)(rawMessageLen >>  8U);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	0a1a      	lsrs	r2, r3, #8
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	f107 0110 	add.w	r1, r7, #16
 800a658:	440b      	add	r3, r1
 800a65a:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	3301      	adds	r3, #1
 800a662:	73fb      	strb	r3, [r7, #15]
        buf[dataIt] = (uint8_t)(rawMessageLen);
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	f107 0110 	add.w	r1, r7, #16
 800a66e:	440b      	add	r3, r1
 800a670:	f803 2c08 	strb.w	r2, [r3, #-8]
        dataIt++;
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	3301      	adds	r3, #1
 800a678:	73fb      	strb	r3, [r7, #15]
    }

    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, dataIt);
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	f107 0208 	add.w	r2, r7, #8
 800a680:	2100      	movs	r1, #0
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff ff19 	bl	800a4ba <ndefT4TPollerWriteBytes>
 800a688:	4603      	mov	r3, r0
 800a68a:	81bb      	strh	r3, [r7, #12]
    return ret;
 800a68c:	89bb      	ldrh	r3, [r7, #12]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <ndefT4TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerWriteRawMessage(ndefContext *ctx, const uint8_t *buf, uint32_t bufLen)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b086      	sub	sp, #24
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	60f8      	str	r0, [r7, #12]
 800a69e:	60b9      	str	r1, [r7, #8]
 800a6a0:	607a      	str	r2, [r7, #4]
    ReturnCode           ret;
    
    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) || ((buf == NULL) && (bufLen != 0U)) )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d011      	beq.n	800a6cc <ndefT4TPollerWriteRawMessage+0x36>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <ndefT4TPollerWriteRawMessage+0x22>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	2b20      	cmp	r3, #32
 800a6b6:	d003      	beq.n	800a6c0 <ndefT4TPollerWriteRawMessage+0x2a>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d105      	bne.n	800a6cc <ndefT4TPollerWriteRawMessage+0x36>
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d104      	bne.n	800a6d0 <ndefT4TPollerWriteRawMessage+0x3a>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <ndefT4TPollerWriteRawMessage+0x3a>
    {
        return ERR_PARAM;
 800a6cc:	2307      	movs	r3, #7
 800a6ce:	e04b      	b.n	800a768 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.1: T4T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current selected file must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T4T v1.0 7.3.3.2: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d006      	beq.n	800a6e8 <ndefT4TPollerWriteRawMessage+0x52>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d001      	beq.n	800a6e8 <ndefT4TPollerWriteRawMessage+0x52>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.2 */
        return ERR_WRONG_STATE;
 800a6e4:	2321      	movs	r3, #33	; 0x21
 800a6e6:	e03f      	b.n	800a768 <ndefT4TPollerWriteRawMessage+0xd2>

    /* TS T4T v1.0 7.2.3.3: check Mapping Version    */
   /* Done automatically inside underlying fucntions */
    
    /* TS T4T v1.0 7.2.3.4/8 verify length of the NDEF message */
    ret = ndefT4TPollerCheckAvailableSpace(ctx, bufLen);
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 f8dd 	bl	800a8aa <ndefT4TPollerCheckAvailableSpace>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a6f4:	8afb      	ldrh	r3, [r7, #22]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <ndefT4TPollerWriteRawMessage+0x68>
    {
        /* Conclude procedure TS T4T v1.0 7.2.3.4/8 */
        return ERR_PARAM;
 800a6fa:	2307      	movs	r3, #7
 800a6fc:	e034      	b.n	800a768 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerBeginWriteMessage(ctx, bufLen);
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f90a 	bl	800a91a <ndefT4TPollerBeginWriteMessage>
 800a706:	4603      	mov	r3, r0
 800a708:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a70a:	8afb      	ldrh	r3, [r7, #22]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <ndefT4TPollerWriteRawMessage+0x86>
    {
        ctx->state = NDEF_STATE_INVALID;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure TS T4T v1.0 7.2.3.5/9 */
        return ret;
 800a718:	8afb      	ldrh	r3, [r7, #22]
 800a71a:	e025      	b.n	800a768 <ndefT4TPollerWriteRawMessage+0xd2>
    }

    if( bufLen != 0U )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d021      	beq.n	800a766 <ndefT4TPollerWriteRawMessage+0xd0>
    {
        /* TS T4T v1.0 7.2.3.6/10 Write NDEF message) */
        ret = ndefT4TPollerWriteBytes(ctx, ctx->messageOffset, buf, bufLen); 
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff fec4 	bl	800a4ba <ndefT4TPollerWriteBytes>
 800a732:	4603      	mov	r3, r0
 800a734:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800a736:	8afb      	ldrh	r3, [r7, #22]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d005      	beq.n	800a748 <ndefT4TPollerWriteRawMessage+0xb2>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.6/10 */
            ctx->state = NDEF_STATE_INVALID;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800a744:	8afb      	ldrh	r3, [r7, #22]
 800a746:	e00f      	b.n	800a768 <ndefT4TPollerWriteRawMessage+0xd2>
        }

        /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
        ret = ndefT4TPollerEndWriteMessage(ctx, bufLen);
 800a748:	6879      	ldr	r1, [r7, #4]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 f91f 	bl	800a98e <ndefT4TPollerEndWriteMessage>
 800a750:	4603      	mov	r3, r0
 800a752:	82fb      	strh	r3, [r7, #22]
        if( ret != ERR_NONE )
 800a754:	8afb      	ldrh	r3, [r7, #22]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d005      	beq.n	800a766 <ndefT4TPollerWriteRawMessage+0xd0>
        {
            /* Conclude procedure TS T4T v1.0 7.2.3.7/11 */
            ctx->state = NDEF_STATE_INVALID;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return ret;
 800a762:	8afb      	ldrh	r3, [r7, #22]
 800a764:	e000      	b.n	800a768 <ndefT4TPollerWriteRawMessage+0xd2>
        }
    }

    return ret;
 800a766:	8afb      	ldrh	r3, [r7, #22]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <ndefT4TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT4TPollerTagFormat(ndefContext *ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
    uint8_t              buf[NDEF_T4T_ENLEN_LEN];

    NO_WARNING(cc);
    NO_WARNING(options);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device)  )
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00b      	beq.n	800a79a <ndefT4TPollerTagFormat+0x2a>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d103      	bne.n	800a792 <ndefT4TPollerTagFormat+0x22>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	785b      	ldrb	r3, [r3, #1]
 800a78e:	2b20      	cmp	r3, #32
 800a790:	d005      	beq.n	800a79e <ndefT4TPollerTagFormat+0x2e>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d001      	beq.n	800a79e <ndefT4TPollerTagFormat+0x2e>
    {
        return ERR_PARAM;
 800a79a:	2307      	movs	r3, #7
 800a79c:	e03a      	b.n	800a814 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectNdefTagApplication(ctx);
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7ff fac2 	bl	8009d28 <ndefT4TPollerSelectNdefTagApplication>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a7a8:	8afb      	ldrh	r3, [r7, #22]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <ndefT4TPollerTagFormat+0x42>
    {
        return ret; 
 800a7ae:	8afb      	ldrh	r3, [r7, #22]
 800a7b0:	e030      	b.n	800a814 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TReadAndParseCCFile(ctx);
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7ff f924 	bl	8009a00 <ndefT4TReadAndParseCCFile>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a7bc:	8afb      	ldrh	r3, [r7, #22]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <ndefT4TPollerTagFormat+0x56>
    {
        return ret;
 800a7c2:	8afb      	ldrh	r3, [r7, #22]
 800a7c4:	e026      	b.n	800a814 <ndefT4TPollerTagFormat+0xa4>
    }

    ret =  ndefT4TPollerSelectFile(ctx, ctx->cc.t4t.fileId);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3384      	adds	r3, #132	; 0x84
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f7ff fb05 	bl	8009ddc <ndefT4TPollerSelectFile>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a7d6:	8afb      	ldrh	r3, [r7, #22]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <ndefT4TPollerTagFormat+0x70>
    {
        return ret;
 800a7dc:	8afb      	ldrh	r3, [r7, #22]
 800a7de:	e019      	b.n	800a814 <ndefT4TPollerTagFormat+0xa4>
    }
    (void)ST_MEMSET(buf, 0x00, sizeof(buf));
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	2204      	movs	r2, #4
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f011 fa89 	bl	801bd00 <memset>
    ret = ndefT4TPollerWriteBytes(ctx, 0U, buf, ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a7f4:	091b      	lsrs	r3, r3, #4
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d101      	bne.n	800a800 <ndefT4TPollerTagFormat+0x90>
 800a7fc:	2304      	movs	r3, #4
 800a7fe:	e000      	b.n	800a802 <ndefT4TPollerTagFormat+0x92>
 800a800:	2302      	movs	r3, #2
 800a802:	f107 0210 	add.w	r2, r7, #16
 800a806:	2100      	movs	r1, #0
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f7ff fe56 	bl	800a4ba <ndefT4TPollerWriteBytes>
 800a80e:	4603      	mov	r3, r0
 800a810:	82fb      	strh	r3, [r7, #22]
    return ret;
 800a812:	8afb      	ldrh	r3, [r7, #22]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <ndefT4TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckPresence(ndefContext *ctx)
{
 800a81c:	b5b0      	push	{r4, r5, r7, lr}
 800a81e:	b092      	sub	sp, #72	; 0x48
 800a820:	af06      	add	r7, sp, #24
 800a822:	6078      	str	r0, [r7, #4]
    rfalIsoDepApduTxRxParam  isoDepAPDU;
    ReturnCode               ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00b      	beq.n	800a842 <ndefT4TPollerCheckPresence+0x26>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d103      	bne.n	800a83a <ndefT4TPollerCheckPresence+0x1e>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b20      	cmp	r3, #32
 800a838:	d005      	beq.n	800a846 <ndefT4TPollerCheckPresence+0x2a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d001      	beq.n	800a846 <ndefT4TPollerCheckPresence+0x2a>
    {
        return ERR_PARAM;
 800a842:	2307      	movs	r3, #7
 800a844:	e02d      	b.n	800a8a2 <ndefT4TPollerCheckPresence+0x86>
    }

    ndefT4TInitializeIsoDepTxRxParam(ctx, &isoDepAPDU);
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff f865 	bl	800991c <ndefT4TInitializeIsoDepTxRxParam>
    (void)rfalT4TPollerComposeReadData(isoDepAPDU.txBuf, 0, 1, &isoDepAPDU.txBufLen);
 800a852:	68b8      	ldr	r0, [r7, #8]
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	3304      	adds	r3, #4
 800a85a:	2201      	movs	r2, #1
 800a85c:	2100      	movs	r1, #0
 800a85e:	f00f fed4 	bl	801a60a <rfalT4TPollerComposeReadData>

    /* Initialize respAPDU */
    ctx->subCtx.t4t.respAPDU.rApduBuf = &ctx->subCtx.t4t.rApduBuf;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f203 22ba 	addw	r2, r3, #698	; 0x2ba
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
    isoDepAPDU.rxLen                  = &ctx->subCtx.t4t.respAPDU.rcvdLen;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a874:	617b      	str	r3, [r7, #20]

    (void)rfalIsoDepStartApduTransceive(isoDepAPDU);
 800a876:	466d      	mov	r5, sp
 800a878:	f107 0418 	add.w	r4, r7, #24
 800a87c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a87e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a88a:	f004 fbe3 	bl	800f054 <rfalIsoDepStartApduTransceive>
    do {
        /* Blocking implementation, T4T may define rather long timeouts */
        rfalWorker();
 800a88e:	f00c fb11 	bl	8016eb4 <rfalWorker>
        ret = rfalIsoDepGetApduTransceiveStatus();
 800a892:	f004 fc35 	bl	800f100 <rfalIsoDepGetApduTransceiveStatus>
 800a896:	4603      	mov	r3, r0
 800a898:	85fb      	strh	r3, [r7, #46]	; 0x2e
    } while (ret == ERR_BUSY);
 800a89a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d0f6      	beq.n	800a88e <ndefT4TPollerCheckPresence+0x72>

    return ret;
 800a8a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3730      	adds	r7, #48	; 0x30
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bdb0      	pop	{r4, r5, r7, pc}

0800a8aa <ndefT4TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT4TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b085      	sub	sp, #20
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	6039      	str	r1, [r7, #0]
    uint8_t              nlenLen;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00b      	beq.n	800a8d2 <ndefT4TPollerCheckAvailableSpace+0x28>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d103      	bne.n	800a8ca <ndefT4TPollerCheckAvailableSpace+0x20>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d005      	beq.n	800a8d6 <ndefT4TPollerCheckAvailableSpace+0x2c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d001      	beq.n	800a8d6 <ndefT4TPollerCheckAvailableSpace+0x2c>
    {
        return ERR_PARAM;
 800a8d2:	2307      	movs	r3, #7
 800a8d4:	e01c      	b.n	800a910 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <ndefT4TPollerCheckAvailableSpace+0x3a>
    {
        return ERR_WRONG_STATE;
 800a8e0:	2321      	movs	r3, #33	; 0x21
 800a8e2:	e015      	b.n	800a910 <ndefT4TPollerCheckAvailableSpace+0x66>
    }

    nlenLen = ( ndefMajorVersion(ctx->cc.t4t.vNo) == ndefMajorVersion(NDEF_T4T_MAPPING_VERSION_3_0) ) ? NDEF_T4T_ENLEN_LEN : NDEF_T4T_NLEN_LEN;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d101      	bne.n	800a8f6 <ndefT4TPollerCheckAvailableSpace+0x4c>
 800a8f2:	2304      	movs	r3, #4
 800a8f4:	e000      	b.n	800a8f8 <ndefT4TPollerCheckAvailableSpace+0x4e>
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	73fb      	strb	r3, [r7, #15]
    if( (messageLen + (uint32_t)nlenLen) > ctx->cc.t4t.fileSize )
 800a8fa:	7bfa      	ldrb	r2, [r7, #15]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	441a      	add	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a906:	429a      	cmp	r2, r3
 800a908:	d901      	bls.n	800a90e <ndefT4TPollerCheckAvailableSpace+0x64>
    {
        return ERR_NOMEM;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <ndefT4TPollerCheckAvailableSpace+0x66>
    }
    return ERR_NONE;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr

0800a91a <ndefT4TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    NO_WARNING(messageLen);

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <ndefT4TPollerBeginWriteMessage+0x28>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d103      	bne.n	800a93a <ndefT4TPollerBeginWriteMessage+0x20>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	2b20      	cmp	r3, #32
 800a938:	d005      	beq.n	800a946 <ndefT4TPollerBeginWriteMessage+0x2c>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d001      	beq.n	800a946 <ndefT4TPollerBeginWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800a942:	2307      	movs	r3, #7
 800a944:	e01f      	b.n	800a986 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d006      	beq.n	800a95e <ndefT4TPollerBeginWriteMessage+0x44>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a956:	2b02      	cmp	r3, #2
 800a958:	d001      	beq.n	800a95e <ndefT4TPollerBeginWriteMessage+0x44>
    {
        return ERR_WRONG_STATE;
 800a95a:	2321      	movs	r3, #33	; 0x21
 800a95c:	e013      	b.n	800a986 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    /* TS T4T v1.0 7.2.3.5/9 Write value 0000h in NLEN field (resp. 00000000h in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, 0U);
 800a95e:	2100      	movs	r1, #0
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff fe18 	bl	800a596 <ndefT4TPollerWriteRawMessageLen>
 800a966:	4603      	mov	r3, r0
 800a968:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a96a:	89fb      	ldrh	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d005      	beq.n	800a97c <ndefT4TPollerBeginWriteMessage+0x62>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a978:	89fb      	ldrh	r3, [r7, #14]
 800a97a:	e004      	b.n	800a986 <ndefT4TPollerBeginWriteMessage+0x6c>
    }

    ctx->state = NDEF_STATE_INITIALIZED;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <ndefT4TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT4TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT4TisT4TDevice(&ctx->device) )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <ndefT4TPollerEndWriteMessage+0x28>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d103      	bne.n	800a9ae <ndefT4TPollerEndWriteMessage+0x20>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	785b      	ldrb	r3, [r3, #1]
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d005      	beq.n	800a9ba <ndefT4TPollerEndWriteMessage+0x2c>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d001      	beq.n	800a9ba <ndefT4TPollerEndWriteMessage+0x2c>
    {
        return ERR_PARAM;
 800a9b6:	2307      	movs	r3, #7
 800a9b8:	e025      	b.n	800aa06 <ndefT4TPollerEndWriteMessage+0x78>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d001      	beq.n	800a9c8 <ndefT4TPollerEndWriteMessage+0x3a>
    {
        return ERR_WRONG_STATE;
 800a9c4:	2321      	movs	r3, #33	; 0x21
 800a9c6:	e01e      	b.n	800aa06 <ndefT4TPollerEndWriteMessage+0x78>
    }

    /* TS T4T v1.0 7.2.3.7/11 Write value length in NLEN field (resp. in ENLEN field) */
    ret = ndefT4TPollerWriteRawMessageLen(ctx, messageLen);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff fde3 	bl	800a596 <ndefT4TPollerWriteRawMessageLen>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800a9d4:	89fb      	ldrh	r3, [r7, #14]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <ndefT4TPollerEndWriteMessage+0x58>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800a9e2:	89fb      	ldrh	r3, [r7, #14]
 800a9e4:	e00f      	b.n	800aa06 <ndefT4TPollerEndWriteMessage+0x78>
    }
    ctx->messageLen = messageLen;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE; 
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <ndefT4TPollerEndWriteMessage+0x6e>
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	e000      	b.n	800a9fe <ndefT4TPollerEndWriteMessage+0x70>
 800a9fc:	2202      	movs	r2, #2
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <ndefT5TPollerReadBytes>:
 ******************************************************************************
 */

/*******************************************************************************/
ReturnCode ndefT5TPollerReadBytes(ndefContext * ctx, uint32_t offset, uint32_t len, uint8_t* buf, uint32_t * rcvdLen )
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b08c      	sub	sp, #48	; 0x30
 800aa12:	af02      	add	r7, sp, #8
 800aa14:	60f8      	str	r0, [r7, #12]
 800aa16:	60b9      	str	r1, [r7, #8]
 800aa18:	607a      	str	r2, [r7, #4]
 800aa1a:	603b      	str	r3, [r7, #0]
    uint16_t        res;
    uint16_t        nbRead;
    uint16_t        blockLen;
    uint16_t        startBlock;
    uint16_t        startAddr;
    ReturnCode      result     = ERR_PARAM;
 800aa1c:	2307      	movs	r3, #7
 800aa1e:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint32_t        currentLen = len;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	623b      	str	r3, [r7, #32]
    uint32_t        lvRcvLen   = 0U;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]

    if ( ( ctx != NULL) && (ctx->subCtx.t5t.blockLen > 0U) && (buf != NULL) && (len > 0U) )
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 80ef 	beq.w	800ac0e <ndefT5TPollerReadBytes+0x200>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 80e9 	beq.w	800ac0e <ndefT5TPollerReadBytes+0x200>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 80e5 	beq.w	800ac0e <ndefT5TPollerReadBytes+0x200>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 80e1 	beq.w	800ac0e <ndefT5TPollerReadBytes+0x200>
    {
        blockLen   = (uint16_t )ctx->subCtx.t5t.blockLen;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800aa52:	837b      	strh	r3, [r7, #26]
        if( blockLen == 0U )
 800aa54:	8b7b      	ldrh	r3, [r7, #26]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <ndefT5TPollerReadBytes+0x50>
        {
            return ERR_SYSTEM;
 800aa5a:	2308      	movs	r3, #8
 800aa5c:	e0e3      	b.n	800ac26 <ndefT5TPollerReadBytes+0x218>
        }
        startBlock = (uint16_t) (offset / blockLen);
 800aa5e:	8b7b      	ldrh	r3, [r7, #26]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa66:	84fb      	strh	r3, [r7, #38]	; 0x26
        startAddr  = (uint16_t) (startBlock * blockLen);
 800aa68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa6a:	8b7a      	ldrh	r2, [r7, #26]
 800aa6c:	fb02 f303 	mul.w	r3, r2, r3
 800aa70:	833b      	strh	r3, [r7, #24]

        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800aa78:	8b7b      	ldrh	r3, [r7, #26]
 800aa7a:	3303      	adds	r3, #3
 800aa7c:	b298      	uxth	r0, r3
 800aa7e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800aa80:	f107 0312 	add.w	r3, r7, #18
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	4603      	mov	r3, r0
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f001 f938 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800aa92:	8afb      	ldrh	r3, [r7, #22]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f040 80ba 	bne.w	800ac0e <ndefT5TPollerReadBytes+0x200>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f040 80b4 	bne.w	800ac0e <ndefT5TPollerReadBytes+0x200>
 800aaa6:	8a7b      	ldrh	r3, [r7, #18]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 80b0 	beq.w	800ac0e <ndefT5TPollerReadBytes+0x200>
        {
            nbRead = (uint16_t) (nbRead  + startAddr - (uint16_t)offset - 1U );
 800aaae:	8a7a      	ldrh	r2, [r7, #18]
 800aab0:	8b3b      	ldrh	r3, [r7, #24]
 800aab2:	4413      	add	r3, r2
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	3b01      	subs	r3, #1
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	827b      	strh	r3, [r7, #18]
            if ((uint32_t) nbRead > currentLen)
 800aac4:	8a7b      	ldrh	r3, [r7, #18]
 800aac6:	461a      	mov	r2, r3
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d202      	bcs.n	800aad4 <ndefT5TPollerReadBytes+0xc6>
            {
                nbRead = (uint16_t) currentLen;
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	827b      	strh	r3, [r7, #18]
            }
            if (nbRead > 0U)
 800aad4:	8a7b      	ldrh	r3, [r7, #18]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00e      	beq.n	800aaf8 <ndefT5TPollerReadBytes+0xea>
            {
                (void)ST_MEMCPY(buf, &ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], (uint32_t)nbRead);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	461a      	mov	r2, r3
 800aae0:	8b3b      	ldrh	r3, [r7, #24]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	3301      	adds	r3, #1
 800aae6:	33d0      	adds	r3, #208	; 0xd0
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	3304      	adds	r3, #4
 800aaee:	8a7a      	ldrh	r2, [r7, #18]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6838      	ldr	r0, [r7, #0]
 800aaf4:	f011 f8dc 	bl	801bcb0 <memcpy>
            }
            lvRcvLen   += (uint32_t) nbRead;
 800aaf8:	8a7b      	ldrh	r3, [r7, #18]
 800aafa:	461a      	mov	r2, r3
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	4413      	add	r3, r2
 800ab00:	61fb      	str	r3, [r7, #28]
            currentLen -= (uint32_t) nbRead;
 800ab02:	8a7b      	ldrh	r3, [r7, #18]
 800ab04:	461a      	mov	r2, r3
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	1a9b      	subs	r3, r3, r2
 800ab0a:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800ab0c:	e036      	b.n	800ab7c <ndefT5TPollerReadBytes+0x16e>
            {
                startBlock++;
 800ab0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab10:	3301      	adds	r3, #1
 800ab12:	84fb      	strh	r3, [r7, #38]	; 0x26
                lastVal = buf[lvRcvLen - 1U];
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	757b      	strb	r3, [r7, #21]
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, &buf[lvRcvLen - 1U], blockLen + 3U, &nbRead);
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	441a      	add	r2, r3
 800ab28:	8b7b      	ldrh	r3, [r7, #26]
 800ab2a:	3303      	adds	r3, #3
 800ab2c:	b298      	uxth	r0, r3
 800ab2e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800ab30:	f107 0312 	add.w	r3, r7, #18
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	4603      	mov	r3, r0
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f001 f8e0 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	82fb      	strh	r3, [r7, #22]
                status  = buf[lvRcvLen - 1U]; /* Keep status */
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	4413      	add	r3, r2
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	753b      	strb	r3, [r7, #20]
                buf[lvRcvLen - 1U] = lastVal; /* Restore previous value */
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	4413      	add	r3, r2
 800ab56:	7d7a      	ldrb	r2, [r7, #21]
 800ab58:	701a      	strb	r2, [r3, #0]
                if ( (res == ERR_NONE) && (nbRead > 0U) && (status == 0U))
 800ab5a:	8afb      	ldrh	r3, [r7, #22]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d153      	bne.n	800ac08 <ndefT5TPollerReadBytes+0x1fa>
 800ab60:	8a7b      	ldrh	r3, [r7, #18]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d050      	beq.n	800ac08 <ndefT5TPollerReadBytes+0x1fa>
 800ab66:	7d3b      	ldrb	r3, [r7, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d14d      	bne.n	800ac08 <ndefT5TPollerReadBytes+0x1fa>
                {
                    lvRcvLen   += blockLen;
 800ab6c:	8b7b      	ldrh	r3, [r7, #26]
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	4413      	add	r3, r2
 800ab72:	61fb      	str	r3, [r7, #28]
                    currentLen -= blockLen;
 800ab74:	8b7b      	ldrh	r3, [r7, #26]
 800ab76:	6a3a      	ldr	r2, [r7, #32]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	623b      	str	r3, [r7, #32]
            while (currentLen >= ((uint32_t)blockLen + 2U) )
 800ab7c:	8b7b      	ldrh	r3, [r7, #26]
 800ab7e:	3302      	adds	r3, #2
 800ab80:	6a3a      	ldr	r2, [r7, #32]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d2c3      	bcs.n	800ab0e <ndefT5TPollerReadBytes+0x100>
                else
                {
                    break;
                }
            }
            while (currentLen > 0U)
 800ab86:	e03f      	b.n	800ac08 <ndefT5TPollerReadBytes+0x1fa>
            {
                startBlock++;
 800ab88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	84fb      	strh	r3, [r7, #38]	; 0x26
                res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen + 3U, &nbRead);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800ab94:	8b7b      	ldrh	r3, [r7, #26]
 800ab96:	3303      	adds	r3, #3
 800ab98:	b298      	uxth	r0, r3
 800ab9a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800ab9c:	f107 0312 	add.w	r3, r7, #18
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	4603      	mov	r3, r0
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f001 f8aa 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800abaa:	4603      	mov	r3, r0
 800abac:	82fb      	strh	r3, [r7, #22]
                if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U))
 800abae:	8afb      	ldrh	r3, [r7, #22]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d12c      	bne.n	800ac0e <ndefT5TPollerReadBytes+0x200>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d127      	bne.n	800ac0e <ndefT5TPollerReadBytes+0x200>
 800abbe:	8a7b      	ldrh	r3, [r7, #18]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d024      	beq.n	800ac0e <ndefT5TPollerReadBytes+0x200>
                {
                    -- nbRead; /* remove status char */
 800abc4:	8a7b      	ldrh	r3, [r7, #18]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	b29b      	uxth	r3, r3
 800abca:	827b      	strh	r3, [r7, #18]
                    if (nbRead > currentLen)
 800abcc:	8a7b      	ldrh	r3, [r7, #18]
 800abce:	461a      	mov	r2, r3
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d202      	bcs.n	800abdc <ndefT5TPollerReadBytes+0x1ce>
                    {
                        nbRead = (uint16_t)currentLen;
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	827b      	strh	r3, [r7, #18]
                    }
                    if (nbRead > 0U)
 800abdc:	8a7b      	ldrh	r3, [r7, #18]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d008      	beq.n	800abf4 <ndefT5TPollerReadBytes+0x1e6>
                    {
                        (void)ST_MEMCPY(&buf[lvRcvLen], & ctx->subCtx.t5t.txrxBuf[1U], nbRead);
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	18d0      	adds	r0, r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	33d5      	adds	r3, #213	; 0xd5
 800abec:	8a7a      	ldrh	r2, [r7, #18]
 800abee:	4619      	mov	r1, r3
 800abf0:	f011 f85e 	bl	801bcb0 <memcpy>
                    }
                    lvRcvLen   += nbRead;
 800abf4:	8a7b      	ldrh	r3, [r7, #18]
 800abf6:	461a      	mov	r2, r3
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	4413      	add	r3, r2
 800abfc:	61fb      	str	r3, [r7, #28]
                    currentLen -= nbRead;
 800abfe:	8a7b      	ldrh	r3, [r7, #18]
 800ac00:	461a      	mov	r2, r3
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	1a9b      	subs	r3, r3, r2
 800ac06:	623b      	str	r3, [r7, #32]
            while (currentLen > 0U)
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1bc      	bne.n	800ab88 <ndefT5TPollerReadBytes+0x17a>
                    break;
                }
            }
        }
    }
    if (currentLen == 0U)
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <ndefT5TPollerReadBytes+0x20a>
    {
        result = ERR_NONE;
 800ac14:	2300      	movs	r3, #0
 800ac16:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    if( rcvdLen != NULL )
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <ndefT5TPollerReadBytes+0x216>
    {
        * rcvdLen = lvRcvLen;
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	69fa      	ldr	r2, [r7, #28]
 800ac22:	601a      	str	r2, [r3, #0]
    }
    return result;
 800ac24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3728      	adds	r7, #40	; 0x28
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <ndefT5TPollerContextInitialization>:

/*******************************************************************************/
ReturnCode ndefT5TPollerContextInitialization(ndefContext *ctx, const rfalNfcDevice *dev)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b086      	sub	sp, #24
 800ac32:	af02      	add	r7, sp, #8
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
    ReturnCode    result;
    uint16_t      rcvLen;

    if( (ctx == NULL) || (dev == NULL) || !ndefT5TisT5TDevice(dev) )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d006      	beq.n	800ac4c <ndefT5TPollerContextInitialization+0x1e>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <ndefT5TPollerContextInitialization+0x1e>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d001      	beq.n	800ac50 <ndefT5TPollerContextInitialization+0x22>
    {
        return ERR_PARAM;
 800ac4c:	2307      	movs	r3, #7
 800ac4e:	e096      	b.n	800ad7e <ndefT5TPollerContextInitialization+0x150>
    }

    (void)ST_MEMCPY(&ctx->device, dev, sizeof(ctx->device));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2278      	movs	r2, #120	; 0x78
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f011 f82a 	bl	801bcb0 <memcpy>

    /* Reset info about the card */
    ctx->state                    = NDEF_STATE_INVALID;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->messageOffset            = 0U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageLen               = 0U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->subCtx.t5t.blockLen      = 0U;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    ctx->subCtx.t5t.pAddressedUid = ctx->device.dev.nfcv.InvRes.UID; /* By default work in addressed mode */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	1cda      	adds	r2, r3, #3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    ctx->subCtx.t5t.TlvNDEFOffset = 0U; /* Offset for TLV */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    ctx->subCtx.t5t.legacySTHighDensity = false;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
    result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800ac9c:	f107 030c 	add.w	r3, r7, #12
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	2323      	movs	r3, #35	; 0x23
 800aca4:	2100      	movs	r1, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 f829 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800acac:	4603      	mov	r3, r0
 800acae:	81fb      	strh	r3, [r7, #14]
    if( (result != ERR_NONE) && (ctx->device.dev.nfcv.InvRes.UID[NDEF_T5T_UID_MANUFACTURER_ID_POS] == NDEF_T5T_MANUFACTURER_ID_ST) )
 800acb0:	89fb      	ldrh	r3, [r7, #14]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d019      	beq.n	800acea <ndefT5TPollerContextInitialization+0xbc>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7a5b      	ldrb	r3, [r3, #9]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d115      	bne.n	800acea <ndefT5TPollerContextInitialization+0xbc>
    {
        /* Try High Density Legacy mode */
        ctx->subCtx.t5t.legacySTHighDensity = true;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
        result = ndefT5TPollerReadSingleBlock( ctx, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800accc:	f107 030c 	add.w	r3, r7, #12
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	2323      	movs	r3, #35	; 0x23
 800acd4:	2100      	movs	r1, #0
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f001 f811 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800acdc:	4603      	mov	r3, r0
 800acde:	81fb      	strh	r3, [r7, #14]
        if( result != ERR_NONE )
 800ace0:	89fb      	ldrh	r3, [r7, #14]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <ndefT5TPollerContextInitialization+0xbc>
        {
            return result;
 800ace6:	89fb      	ldrh	r3, [r7, #14]
 800ace8:	e049      	b.n	800ad7e <ndefT5TPollerContextInitialization+0x150>
        }
    }

    if( (rcvLen > 1U) && (ctx->subCtx.t5t.txrxBuf[0U] == (uint8_t) 0U) )
 800acea:	89bb      	ldrh	r3, [r7, #12]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d915      	bls.n	800ad1c <ndefT5TPollerContextInitialization+0xee>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d110      	bne.n	800ad1c <ndefT5TPollerContextInitialization+0xee>
    {
        ctx->subCtx.t5t.blockLen = (uint8_t) (rcvLen - 1U);
 800acfa:	89bb      	ldrh	r3, [r7, #12]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	3b01      	subs	r3, #1
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    else
    {
        return ERR_PROTO;
    }

    if (rfalNfcvPollerSelect( (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->device.dev.nfcv.InvRes.UID)  == ERR_NONE)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3303      	adds	r3, #3
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	2002      	movs	r0, #2
 800ad10:	f00a fdd8 	bl	80158c4 <rfalNfcvPollerSelect>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d002      	beq.n	800ad20 <ndefT5TPollerContextInitialization+0xf2>
 800ad1a:	e005      	b.n	800ad28 <ndefT5TPollerContextInitialization+0xfa>
        return ERR_PROTO;
 800ad1c:	230b      	movs	r3, #11
 800ad1e:	e02e      	b.n	800ad7e <ndefT5TPollerContextInitialization+0x150>
    {
        ctx->subCtx.t5t.pAddressedUid = NULL; /* Switch to selected mode */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }

    ctx->subCtx.t5t.sysInfoSupported = false;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

    if( !ctx->subCtx.t5t.legacySTHighDensity)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800ad36:	f083 0301 	eor.w	r3, r3, #1
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00a      	beq.n	800ad56 <ndefT5TPollerContextInitialization+0x128>
    {
        /* Extended Get System Info */
        if( ndefT5TGetSystemInformation(ctx, true) == ERR_NONE )
 800ad40:	2101      	movs	r1, #1
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 f828 	bl	800bd98 <ndefT5TGetSystemInformation>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d103      	bne.n	800ad56 <ndefT5TPollerContextInitialization+0x128>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    if( !ctx->subCtx.t5t.sysInfoSupported )
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800ad5c:	f083 0301 	eor.w	r3, r3, #1
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <ndefT5TPollerContextInitialization+0x14e>
    {
        /* Get System Info */
        if( ndefT5TGetSystemInformation(ctx, false) == ERR_NONE )
 800ad66:	2100      	movs	r1, #0
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f001 f815 	bl	800bd98 <ndefT5TGetSystemInformation>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d103      	bne.n	800ad7c <ndefT5TPollerContextInitialization+0x14e>
        {
            ctx->subCtx.t5t.sysInfoSupported = true;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
    }
    return result;
 800ad7c:	89fb      	ldrh	r3, [r7, #14]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <ndefT5TPollerNdefDetect>:

/*******************************************************************************/
ReturnCode ndefT5TPollerNdefDetect(ndefContext * ctx, ndefInfo *info)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b08a      	sub	sp, #40	; 0x28
 800ad8a:	af02      	add	r7, sp, #8
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
    ReturnCode result;
    uint8_t    tmpBuf[NDEF_T5T_TL_MAX_SIZE];
    ReturnCode returnCode = ERR_REQUEST; /* Default return code */
 800ad90:	2305      	movs	r3, #5
 800ad92:	83fb      	strh	r3, [r7, #30]
    uint16_t   length;
    uint32_t   TlvOffset;
    bool       bExit;
    uint32_t   rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <ndefT5TPollerNdefDetect+0x1c>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d001      	beq.n	800ada6 <ndefT5TPollerNdefDetect+0x20>
    {
        return ERR_PARAM;
 800ada2:	2307      	movs	r3, #7
 800ada4:	e203      	b.n	800b1ae <ndefT5TPollerNdefDetect+0x428>
    }

    ctx->state                           = NDEF_STATE_INVALID;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    ctx->cc.t5t.ccLen                    = 0U;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    ctx->cc.t5t.memoryLen                = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    ctx->messageLen                      = 0U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset                   = 0U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    if( info != NULL )
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d011      	beq.n	800adf8 <ndefT5TPollerNdefDetect+0x72>
    {
        info->state                = NDEF_STATE_INVALID;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2200      	movs	r2, #0
 800add8:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = 0U;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = 0U;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2200      	movs	r2, #0
 800ade4:	705a      	strb	r2, [r3, #1]
        info->areaLen              = 0U;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	2200      	movs	r2, #0
 800adea:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = 0U;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2200      	movs	r2, #0
 800adf0:	609a      	str	r2, [r3, #8]
        info->messageLen           = 0U;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2200      	movs	r2, #0
 800adf6:	60da      	str	r2, [r3, #12]
    }

    result = ndefT5TPollerReadBytes(ctx, 0U, 8U, ctx->ccBuf, &rcvLen);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	4613      	mov	r3, r2
 800ae06:	2208      	movs	r2, #8
 800ae08:	2100      	movs	r1, #0
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff fdff 	bl	800aa0e <ndefT5TPollerReadBytes>
 800ae10:	4603      	mov	r3, r0
 800ae12:	823b      	strh	r3, [r7, #16]
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800ae14:	8a3b      	ldrh	r3, [r7, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f040 818e 	bne.w	800b138 <ndefT5TPollerNdefDetect+0x3b2>
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	f040 818a 	bne.w	800b138 <ndefT5TPollerNdefDetect+0x3b2>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ae2a:	2be1      	cmp	r3, #225	; 0xe1
 800ae2c:	d005      	beq.n	800ae3a <ndefT5TPollerNdefDetect+0xb4>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ae34:	2be2      	cmp	r3, #226	; 0xe2
 800ae36:	f040 817f 	bne.w	800b138 <ndefT5TPollerNdefDetect+0x3b2>
    {
        ctx->cc.t5t.magicNumber           =  ctx->ccBuf[0U];
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion          = (ctx->ccBuf[1U] >> 6U ) & 0x03U;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ae4c:	099b      	lsrs	r3, r3, #6
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion          = (ctx->ccBuf[1U] >> 4U ) & 0x03U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ae5c:	091b      	lsrs	r3, r3, #4
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	f003 0303 	and.w	r3, r3, #3
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess            = (ctx->ccBuf[1U] >> 2U ) & 0x03U;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ae72:	089b      	lsrs	r3, r3, #2
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess           = (ctx->ccBuf[1U] >> 0U ) & 0x03U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ae88:	f003 0303 	and.w	r3, r3, #3
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.memoryLen             =  ctx->ccBuf[2U];
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.multipleBlockRead     = (((ctx->ccBuf[3U] >> 0U ) & 0x01U) != 0U);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bf14      	ite	ne
 800aeb0:	2301      	movne	r3, #1
 800aeb2:	2300      	moveq	r3, #0
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        ctx->cc.t5t.mlenOverflow          = (((ctx->ccBuf[3U] >> 2U ) & 0x01U) != 0U);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800aec2:	089b      	lsrs	r3, r3, #2
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	bf14      	ite	ne
 800aece:	2301      	movne	r3, #1
 800aed0:	2300      	moveq	r3, #0
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
        ctx->cc.t5t.lockBlock             = (((ctx->ccBuf[3U] >> 3U ) & 0x01U) != 0U);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800aee0:	08db      	lsrs	r3, r3, #3
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bf14      	ite	ne
 800aeec:	2301      	movne	r3, #1
 800aeee:	2300      	moveq	r3, #0
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame          = (((ctx->ccBuf[3U] >> 4U ) & 0x01U) != 0U);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800aefe:	091b      	lsrs	r3, r3, #4
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	bf14      	ite	ne
 800af0a:	2301      	movne	r3, #1
 800af0c:	2300      	moveq	r3, #0
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->state                        = NDEF_STATE_INITIALIZED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        if ( ctx->cc.t5t.memoryLen != 0U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af24:	2b00      	cmp	r3, #0
 800af26:	d02a      	beq.n	800af7e <ndefT5TPollerNdefDetect+0x1f8>
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_4_BYTES;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2204      	movs	r2, #4
 800af2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            if( (ctx->cc.t5t.memoryLen == 0xFFU) && ctx->cc.t5t.mlenOverflow )
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af36:	2bff      	cmp	r3, #255	; 0xff
 800af38:	d134      	bne.n	800afa4 <ndefT5TPollerNdefDetect+0x21e>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800af40:	2b00      	cmp	r3, #0
 800af42:	d02f      	beq.n	800afa4 <ndefT5TPollerNdefDetect+0x21e>
            {
                if( (ctx->subCtx.t5t.sysInfoSupported==true) && ( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d02a      	beq.n	800afa4 <ndefT5TPollerNdefDetect+0x21e>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800af54:	089b      	lsrs	r3, r3, #2
 800af56:	b2db      	uxtb	r3, r3
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d021      	beq.n	800afa4 <ndefT5TPollerNdefDetect+0x21e>
                {
                    ctx->cc.t5t.memoryLen = (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800af66:	461a      	mov	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800af6e:	fb03 f302 	mul.w	r3, r3, r2
 800af72:	08db      	lsrs	r3, r3, #3
 800af74:	b29a      	uxth	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800af7c:	e012      	b.n	800afa4 <ndefT5TPollerNdefDetect+0x21e>
                }
            }
        }
        else
        {
            ctx->cc.t5t.ccLen             = NDEF_T5T_CC_LEN_8_BYTES;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2208      	movs	r2, #8
 800af82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            ctx->cc.t5t.memoryLen         = ((uint16_t)ctx->ccBuf[6U] << 8U) + (uint16_t)ctx->ccBuf[7U];
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	021b      	lsls	r3, r3, #8
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4413      	add	r3, r2
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d025      	beq.n	800affa <ndefT5TPollerNdefDetect+0x274>
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800afb4:	089b      	lsrs	r3, r3, #2
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	f003 0301 	and.w	r3, r3, #1
        if( (ctx->subCtx.t5t.sysInfoSupported==true) &&
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01c      	beq.n	800affa <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800afcc:	4619      	mov	r1, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800afd4:	fb03 f301 	mul.w	r3, r3, r1
 800afd8:	08db      	lsrs	r3, r3, #3
 800afda:	b29b      	uxth	r3, r3
            (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!= 0U) &&
 800afdc:	429a      	cmp	r2, r3
 800afde:	d10c      	bne.n	800affa <ndefT5TPollerNdefDetect+0x274>
            (ctx->cc.t5t.memoryLen > 0U) )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
            (ctx->cc.t5t.memoryLen == (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER)) &&
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d007      	beq.n	800affa <ndefT5TPollerNdefDetect+0x274>
        {
            ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aff0:	3b01      	subs	r3, #1
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        }
        ctx->messageLen     = 0U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->messageOffset  = ctx->cc.t5t.ccLen;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b008:	461a      	mov	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        TlvOffset = ctx->cc.t5t.ccLen;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b016:	617b      	str	r3, [r7, #20]
        bExit     = false;
 800b018:	2300      	movs	r3, #0
 800b01a:	74fb      	strb	r3, [r7, #19]
        do
        {
            result = ndefT5TPollerReadBytes(ctx, TlvOffset, NDEF_T5T_TL_MAX_SIZE, tmpBuf, &rcvLen);
 800b01c:	f107 020c 	add.w	r2, r7, #12
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	4613      	mov	r3, r2
 800b028:	2204      	movs	r2, #4
 800b02a:	6979      	ldr	r1, [r7, #20]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7ff fcee 	bl	800aa0e <ndefT5TPollerReadBytes>
 800b032:	4603      	mov	r3, r0
 800b034:	823b      	strh	r3, [r7, #16]
            if ( (result != ERR_NONE) || ( rcvLen != NDEF_T5T_TL_MAX_SIZE) )
 800b036:	8a3b      	ldrh	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f040 8085 	bne.w	800b148 <ndefT5TPollerNdefDetect+0x3c2>
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b04      	cmp	r3, #4
 800b042:	f040 8081 	bne.w	800b148 <ndefT5TPollerNdefDetect+0x3c2>
            {
                break;
            }
            offset = 2U;
 800b046:	2302      	movs	r3, #2
 800b048:	83bb      	strh	r3, [r7, #28]
            length = tmpBuf[1U];
 800b04a:	7b7b      	ldrb	r3, [r7, #13]
 800b04c:	837b      	strh	r3, [r7, #26]
            if ( length == (NDEF_SHORT_VFIELD_MAX_LEN + 1U) )
 800b04e:	8b7b      	ldrh	r3, [r7, #26]
 800b050:	2bff      	cmp	r3, #255	; 0xff
 800b052:	d10a      	bne.n	800b06a <ndefT5TPollerNdefDetect+0x2e4>
            {
                /* Size is encoded in 1 + 2 bytes */
                length = (((uint16_t)tmpBuf[2U]) << 8U) + (uint16_t)tmpBuf[3U];
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	b29b      	uxth	r3, r3
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	4413      	add	r3, r2
 800b062:	837b      	strh	r3, [r7, #26]
                offset += 2U;
 800b064:	8bbb      	ldrh	r3, [r7, #28]
 800b066:	3302      	adds	r3, #2
 800b068:	83bb      	strh	r3, [r7, #28]
            }
            if (tmpBuf[0U] == (uint8_t)NDEF_T5T_TLV_NDEF)
 800b06a:	7b3b      	ldrb	r3, [r7, #12]
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d142      	bne.n	800b0f6 <ndefT5TPollerNdefDetect+0x370>
            {
                /* NDEF record return it */
                returnCode                    = ERR_NONE;  /* Default */
 800b070:	2300      	movs	r3, #0
 800b072:	83fb      	strh	r3, [r7, #30]
                ctx->subCtx.t5t.TlvNDEFOffset = TlvOffset; /* Offset for TLV */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                ctx->messageOffset            = TlvOffset + offset;
 800b07c:	8bba      	ldrh	r2, [r7, #28]
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	441a      	add	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                ctx->messageLen               = length;
 800b088:	8b7a      	ldrh	r2, [r7, #26]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                TlvOffset = 0U;
 800b090:	2300      	movs	r3, #0
 800b092:	617b      	str	r3, [r7, #20]
                if (length == 0U)
 800b094:	8b7b      	ldrh	r3, [r7, #26]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d117      	bne.n	800b0ca <ndefT5TPollerNdefDetect+0x344>
                {
                    /* Req 40 7.5.1.6 */
                    if ( (ctx->cc.t5t.readAccess == 0U) && (ctx->cc.t5t.writeAccess == 0U) )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d109      	bne.n	800b0b8 <ndefT5TPollerNdefDetect+0x332>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <ndefT5TPollerNdefDetect+0x332>
                    {
                        ctx->state = NDEF_STATE_INITIALIZED;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b0b6:	e005      	b.n	800b0c4 <ndefT5TPollerNdefDetect+0x33e>
                    }
                    else
                    {
                        ctx->state = NDEF_STATE_INVALID;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        returnCode = ERR_REQUEST; /* Default */
 800b0c0:	2305      	movs	r3, #5
 800b0c2:	83fb      	strh	r3, [r7, #30]
                    }
                    bExit = true;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	74fb      	strb	r3, [r7, #19]
 800b0c8:	e02b      	b.n	800b122 <ndefT5TPollerNdefDetect+0x39c>
                }
                else
                {
                    if (ctx->cc.t5t.readAccess == 0U)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10d      	bne.n	800b0f0 <ndefT5TPollerNdefDetect+0x36a>
                    {
                        if (ctx->cc.t5t.writeAccess == 0U)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d104      	bne.n	800b0e8 <ndefT5TPollerNdefDetect+0x362>
                        {
                            ctx->state = NDEF_STATE_READWRITE;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800b0e6:	e003      	b.n	800b0f0 <ndefT5TPollerNdefDetect+0x36a>
                        }
                        else
                        {
                            ctx->state = NDEF_STATE_READONLY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2203      	movs	r2, #3
 800b0ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        }
                    }
                    bExit = true;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	74fb      	strb	r3, [r7, #19]
 800b0f4:	e015      	b.n	800b122 <ndefT5TPollerNdefDetect+0x39c>
                }
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_TERMINATOR)
 800b0f6:	7b3b      	ldrb	r3, [r7, #12]
 800b0f8:	2bfe      	cmp	r3, #254	; 0xfe
 800b0fa:	d104      	bne.n	800b106 <ndefT5TPollerNdefDetect+0x380>
            {
                /* NDEF end */
                TlvOffset = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	617b      	str	r3, [r7, #20]
                bExit     = true;
 800b100:	2301      	movs	r3, #1
 800b102:	74fb      	strb	r3, [r7, #19]
 800b104:	e00d      	b.n	800b122 <ndefT5TPollerNdefDetect+0x39c>
            }
            else if (tmpBuf[0U]== (uint8_t) NDEF_T5T_TLV_PROPRIETARY)
 800b106:	7b3b      	ldrb	r3, [r7, #12]
 800b108:	2bfd      	cmp	r3, #253	; 0xfd
 800b10a:	d106      	bne.n	800b11a <ndefT5TPollerNdefDetect+0x394>
            {   /* proprietary go next, nothing to do */
                TlvOffset +=  (uint32_t)offset + (uint32_t)length;
 800b10c:	8bba      	ldrh	r2, [r7, #28]
 800b10e:	8b7b      	ldrh	r3, [r7, #26]
 800b110:	4413      	add	r3, r2
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	4413      	add	r3, r2
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e003      	b.n	800b122 <ndefT5TPollerNdefDetect+0x39c>
            }
            else
            {
                /* RFU value */
                TlvOffset = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
                bExit = true;
 800b11e:	2301      	movs	r3, #1
 800b120:	74fb      	strb	r3, [r7, #19]
            }
        } while ( ( TlvOffset > 0U) && (bExit == false) );
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00f      	beq.n	800b148 <ndefT5TPollerNdefDetect+0x3c2>
 800b128:	7cfb      	ldrb	r3, [r7, #19]
 800b12a:	f083 0301 	eor.w	r3, r3, #1
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b00      	cmp	r3, #0
 800b132:	f47f af73 	bne.w	800b01c <ndefT5TPollerNdefDetect+0x296>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800b136:	e007      	b.n	800b148 <ndefT5TPollerNdefDetect+0x3c2>
    }
    else
    {
        /* No CCFile */
        returnCode = ERR_REQUEST;
 800b138:	2305      	movs	r3, #5
 800b13a:	83fb      	strh	r3, [r7, #30]
        if (result != ERR_NONE)
 800b13c:	8a3b      	ldrh	r3, [r7, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <ndefT5TPollerNdefDetect+0x3c4>
        {
            returnCode = result;
 800b142:	8a3b      	ldrh	r3, [r7, #16]
 800b144:	83fb      	strh	r3, [r7, #30]
 800b146:	e000      	b.n	800b14a <ndefT5TPollerNdefDetect+0x3c4>
    if ( (result == ERR_NONE) && (rcvLen == 8U) && ( (ctx->ccBuf[0] == (uint8_t)0xE1U) || (ctx->ccBuf[0] == (uint8_t)0xE2U) ) )
 800b148:	bf00      	nop
        }
    }

    /* TS T5T v1.0 4.3.1.17 T5T_area size is measured in bytes is equal to 8 * MLEN */
    ctx->areaLen               = (uint32_t)ctx->cc.t5t.memoryLen * NDEF_T5T_MLEN_DIVIDER;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b150:	00da      	lsls	r2, r3, #3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    if( info != NULL )
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d026      	beq.n	800b1ac <ndefT5TPollerNdefDetect+0x426>
    {
        info->state                = ctx->state;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	741a      	strb	r2, [r3, #16]
        info->majorVersion         = ctx->cc.t5t.majorVersion;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	701a      	strb	r2, [r3, #0]
        info->minorVersion         = ctx->cc.t5t.minorVersion;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	705a      	strb	r2, [r3, #1]
        info->areaLen              = ctx->areaLen;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	605a      	str	r2, [r3, #4]
        info->areaAvalableSpaceLen = (uint32_t)ctx->cc.t5t.ccLen + ctx->areaLen - ctx->messageOffset;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b18c:	461a      	mov	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b194:	441a      	add	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b19c:	1ad2      	subs	r2, r2, r3
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	609a      	str	r2, [r3, #8]
        info->messageLen           = ctx->messageLen;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	60da      	str	r2, [r3, #12]
    }
    return returnCode;
 800b1ac:	8bfb      	ldrh	r3, [r7, #30]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3720      	adds	r7, #32
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <ndefT5TPollerReadRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerReadRawMessage(ndefContext *ctx, uint8_t *buf, uint32_t bufLen, uint32_t *rcvdLen)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b088      	sub	sp, #32
 800b1ba:	af02      	add	r7, sp, #8
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	603b      	str	r3, [r7, #0]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d006      	beq.n	800b1d8 <ndefT5TPollerReadRawMessage+0x22>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d102      	bne.n	800b1d8 <ndefT5TPollerReadRawMessage+0x22>
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <ndefT5TPollerReadRawMessage+0x26>
    {
        return ERR_PARAM;
 800b1d8:	2307      	movs	r3, #7
 800b1da:	e016      	b.n	800b20a <ndefT5TPollerReadRawMessage+0x54>
    }

    if( ctx->messageLen > bufLen )
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d201      	bcs.n	800b1ec <ndefT5TPollerReadRawMessage+0x36>
    {
        return ERR_NOMEM;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e00e      	b.n	800b20a <ndefT5TPollerReadRawMessage+0x54>
    }

    result = ndefT5TPollerReadBytes( ctx, ctx->messageOffset, ctx->messageLen, buf, rcvdLen );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7ff fc05 	bl	800aa0e <ndefT5TPollerReadBytes>
 800b204:	4603      	mov	r3, r0
 800b206:	82fb      	strh	r3, [r7, #22]
    return result;
 800b208:	8afb      	ldrh	r3, [r7, #22]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <ndefT5TPollerWriteBytes>:

#if NDEF_FEATURE_ALL

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteBytes(ndefContext *ctx, uint32_t offset, const uint8_t * buf, uint32_t len)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b08c      	sub	sp, #48	; 0x30
 800b216:	af02      	add	r7, sp, #8
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	607a      	str	r2, [r7, #4]
 800b21e:	603b      	str	r3, [r7, #0]
    ReturnCode      result = ERR_REQUEST;
 800b220:	2305      	movs	r3, #5
 800b222:	84fb      	strh	r3, [r7, #38]	; 0x26
    ReturnCode      res;
    uint16_t        nbRead;
    uint16_t        blockLen16;
    uint16_t        startBlock;
    uint16_t        startAddr ;
    const uint8_t * wrbuf      = buf;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	623b      	str	r3, [r7, #32]
    uint32_t        currentLen = len;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	61fb      	str	r3, [r7, #28]

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (len == 0U) || (ctx->subCtx.t5t.blockLen == 0U))
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <ndefT5TPollerWriteBytes+0x38>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b03      	cmp	r3, #3
 800b238:	d107      	bne.n	800b24a <ndefT5TPollerWriteBytes+0x38>
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d004      	beq.n	800b24a <ndefT5TPollerWriteBytes+0x38>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <ndefT5TPollerWriteBytes+0x3c>
    {
        return ERR_PARAM;
 800b24a:	2307      	movs	r3, #7
 800b24c:	e0eb      	b.n	800b426 <ndefT5TPollerWriteBytes+0x214>
    }
    blockLen16 = (uint16_t )ctx->subCtx.t5t.blockLen;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800b254:	837b      	strh	r3, [r7, #26]
    if( blockLen16 == 0U )
 800b256:	8b7b      	ldrh	r3, [r7, #26]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <ndefT5TPollerWriteBytes+0x4e>
    {
        return ERR_SYSTEM;
 800b25c:	2308      	movs	r3, #8
 800b25e:	e0e2      	b.n	800b426 <ndefT5TPollerWriteBytes+0x214>
    }
    startBlock = (uint16_t) (offset     / blockLen16);
 800b260:	8b7b      	ldrh	r3, [r7, #26]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	fbb2 f3f3 	udiv	r3, r2, r3
 800b268:	84bb      	strh	r3, [r7, #36]	; 0x24
    startAddr  = (uint16_t) (startBlock * blockLen16);
 800b26a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b26c:	8b7a      	ldrh	r2, [r7, #26]
 800b26e:	fb02 f303 	mul.w	r3, r2, r3
 800b272:	833b      	strh	r3, [r7, #24]

    if (startAddr != offset)
 800b274:	8b3b      	ldrh	r3, [r7, #24]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	429a      	cmp	r2, r3
 800b27a:	f000 8081 	beq.w	800b380 <ndefT5TPollerWriteBytes+0x16e>
    {
        /* Unaligned start offset must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800b284:	8b7b      	ldrh	r3, [r7, #26]
 800b286:	3303      	adds	r3, #3
 800b288:	b298      	uxth	r0, r3
 800b28a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4603      	mov	r3, r0
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fd32 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800b29a:	4603      	mov	r3, r0
 800b29c:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800b29e:	8afb      	ldrh	r3, [r7, #22]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d13b      	bne.n	800b31c <ndefT5TPollerWriteBytes+0x10a>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d136      	bne.n	800b31c <ndefT5TPollerWriteBytes+0x10a>
 800b2ae:	8abb      	ldrh	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d033      	beq.n	800b31c <ndefT5TPollerWriteBytes+0x10a>
        {
            nbRead = (uint16_t) ((uint32_t)nbRead - 1U  + startAddr - offset);
 800b2b4:	8aba      	ldrh	r2, [r7, #20]
 800b2b6:	8b3b      	ldrh	r3, [r7, #24]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	82bb      	strh	r3, [r7, #20]
            if (nbRead > (uint32_t) currentLen)
 800b2ca:	8abb      	ldrh	r3, [r7, #20]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d202      	bcs.n	800b2da <ndefT5TPollerWriteBytes+0xc8>
            {
                nbRead = (uint16_t) currentLen;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	82bb      	strh	r3, [r7, #20]
            }
            if (nbRead > 0U)
 800b2da:	8abb      	ldrh	r3, [r7, #20]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00e      	beq.n	800b2fe <ndefT5TPollerWriteBytes+0xec>
            {
                (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U - startAddr + (uint16_t)offset], wrbuf, nbRead);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	8b3b      	ldrh	r3, [r7, #24]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	33d0      	adds	r3, #208	; 0xd0
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	8aba      	ldrh	r2, [r7, #20]
 800b2f6:	6a39      	ldr	r1, [r7, #32]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f010 fcd9 	bl	801bcb0 <memcpy>
            }
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800b304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b306:	4619      	mov	r1, r3
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f000 fc4f 	bl	800bbac <ndefT5TPollerWriteSingleBlock>
 800b30e:	4603      	mov	r3, r0
 800b310:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800b312:	8afb      	ldrh	r3, [r7, #22]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00b      	beq.n	800b330 <ndefT5TPollerWriteBytes+0x11e>
            {
                return res;
 800b318:	8afb      	ldrh	r3, [r7, #22]
 800b31a:	e084      	b.n	800b426 <ndefT5TPollerWriteBytes+0x214>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800b31c:	8afb      	ldrh	r3, [r7, #22]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <ndefT5TPollerWriteBytes+0x116>
            {
                result = res;
 800b322:	8afb      	ldrh	r3, [r7, #22]
 800b324:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b326:	e001      	b.n	800b32c <ndefT5TPollerWriteBytes+0x11a>
            }
            else
            {
                result = ERR_PARAM;
 800b328:	2307      	movs	r3, #7
 800b32a:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800b32c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b32e:	e07a      	b.n	800b426 <ndefT5TPollerWriteBytes+0x214>
        }
        currentLen -= nbRead;
 800b330:	8abb      	ldrh	r3, [r7, #20]
 800b332:	461a      	mov	r2, r3
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	1a9b      	subs	r3, r3, r2
 800b338:	61fb      	str	r3, [r7, #28]
        wrbuf       = &wrbuf[nbRead];
 800b33a:	8abb      	ldrh	r3, [r7, #20]
 800b33c:	461a      	mov	r2, r3
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	4413      	add	r3, r2
 800b342:	623b      	str	r3, [r7, #32]
        startBlock++;
 800b344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b346:	3301      	adds	r3, #1
 800b348:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    while (currentLen >= blockLen16)
 800b34a:	e019      	b.n	800b380 <ndefT5TPollerWriteBytes+0x16e>
    {
        res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, wrbuf);
 800b34c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b34e:	6a3a      	ldr	r2, [r7, #32]
 800b350:	4619      	mov	r1, r3
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 fc2a 	bl	800bbac <ndefT5TPollerWriteSingleBlock>
 800b358:	4603      	mov	r3, r0
 800b35a:	82fb      	strh	r3, [r7, #22]
        if (res == ERR_NONE)
 800b35c:	8afb      	ldrh	r3, [r7, #22]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <ndefT5TPollerWriteBytes+0x168>
        {
            currentLen -= blockLen16;
 800b362:	8b7b      	ldrh	r3, [r7, #26]
 800b364:	69fa      	ldr	r2, [r7, #28]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	61fb      	str	r3, [r7, #28]
            wrbuf       = &wrbuf[blockLen16];
 800b36a:	8b7b      	ldrh	r3, [r7, #26]
 800b36c:	6a3a      	ldr	r2, [r7, #32]
 800b36e:	4413      	add	r3, r2
 800b370:	623b      	str	r3, [r7, #32]
            startBlock++;
 800b372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b374:	3301      	adds	r3, #1
 800b376:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b378:	e002      	b.n	800b380 <ndefT5TPollerWriteBytes+0x16e>
        }
        else
        {
            result = res;
 800b37a:	8afb      	ldrh	r3, [r7, #22]
 800b37c:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800b37e:	e003      	b.n	800b388 <ndefT5TPollerWriteBytes+0x176>
    while (currentLen >= blockLen16)
 800b380:	8b7b      	ldrh	r3, [r7, #26]
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	429a      	cmp	r2, r3
 800b386:	d2e1      	bcs.n	800b34c <ndefT5TPollerWriteBytes+0x13a>
        }
    }
    if ( (currentLen != 0U) && (currentLen < blockLen16) )
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d045      	beq.n	800b41a <ndefT5TPollerWriteBytes+0x208>
 800b38e:	8b7b      	ldrh	r3, [r7, #26]
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	429a      	cmp	r2, r3
 800b394:	d241      	bcs.n	800b41a <ndefT5TPollerWriteBytes+0x208>
    {
        /* Unaligned end, must read the first block before */
        res = ndefT5TPollerReadSingleBlock(ctx, startBlock, ctx->subCtx.t5t.txrxBuf, blockLen16 + 3U, &nbRead);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800b39c:	8b7b      	ldrh	r3, [r7, #26]
 800b39e:	3303      	adds	r3, #3
 800b3a0:	b298      	uxth	r0, r3
 800b3a2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b3a4:	f107 0314 	add.w	r3, r7, #20
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f000 fca6 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	82fb      	strh	r3, [r7, #22]
        if ( (res == ERR_NONE) && (ctx->subCtx.t5t.txrxBuf[0U] == 0U) && (nbRead > 0U) )
 800b3b6:	8afb      	ldrh	r3, [r7, #22]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d124      	bne.n	800b406 <ndefT5TPollerWriteBytes+0x1f4>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d11f      	bne.n	800b406 <ndefT5TPollerWriteBytes+0x1f4>
 800b3c6:	8abb      	ldrh	r3, [r7, #20]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d01c      	beq.n	800b406 <ndefT5TPollerWriteBytes+0x1f4>
        {
            if (currentLen > 0U) { (void)ST_MEMCPY(&ctx->subCtx.t5t.txrxBuf[1U], wrbuf, currentLen); }
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d006      	beq.n	800b3e0 <ndefT5TPollerWriteBytes+0x1ce>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	33d5      	adds	r3, #213	; 0xd5
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	6a39      	ldr	r1, [r7, #32]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f010 fc68 	bl	801bcb0 <memcpy>
            res = ndefT5TPollerWriteSingleBlock(ctx, startBlock, &ctx->subCtx.t5t.txrxBuf[1U]);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800b3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 fbde 	bl	800bbac <ndefT5TPollerWriteSingleBlock>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	82fb      	strh	r3, [r7, #22]
            if (res != ERR_NONE)
 800b3f4:	8afb      	ldrh	r3, [r7, #22]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <ndefT5TPollerWriteBytes+0x1ee>
            {
                result = res;
 800b3fa:	8afb      	ldrh	r3, [r7, #22]
 800b3fc:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (res != ERR_NONE)
 800b3fe:	e00c      	b.n	800b41a <ndefT5TPollerWriteBytes+0x208>
            }
            else
            {
                currentLen = 0U;
 800b400:	2300      	movs	r3, #0
 800b402:	61fb      	str	r3, [r7, #28]
            if (res != ERR_NONE)
 800b404:	e009      	b.n	800b41a <ndefT5TPollerWriteBytes+0x208>
            }
        }
        else
        {
            if (res != ERR_NONE)
 800b406:	8afb      	ldrh	r3, [r7, #22]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <ndefT5TPollerWriteBytes+0x200>
            {
                result = res;
 800b40c:	8afb      	ldrh	r3, [r7, #22]
 800b40e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b410:	e001      	b.n	800b416 <ndefT5TPollerWriteBytes+0x204>
            }
            else
            {
                result = ERR_PARAM;
 800b412:	2307      	movs	r3, #7
 800b414:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            return result;
 800b416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b418:	e005      	b.n	800b426 <ndefT5TPollerWriteBytes+0x214>
        }
    }
    if (currentLen == 0U)
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d101      	bne.n	800b424 <ndefT5TPollerWriteBytes+0x212>
    {
        result = ERR_NONE;
 800b420:	2300      	movs	r3, #0
 800b422:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    return result;
 800b424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800b426:	4618      	mov	r0, r3
 800b428:	3728      	adds	r7, #40	; 0x28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <ndefT5TPollerWriteRawMessageLen>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessageLen(ndefContext *ctx, uint32_t rawMessageLen)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b086      	sub	sp, #24
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
    uint8_t    TLV[8U];
    ReturnCode result = ERR_PARAM;
 800b438:	2307      	movs	r3, #7
 800b43a:	82fb      	strh	r3, [r7, #22]
    uint8_t     len    = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	757b      	strb	r3, [r7, #21]

    if( (ctx != NULL) && ndefT5TisT5TDevice(&ctx->device))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d077      	beq.n	800b536 <ndefT5TPollerWriteRawMessageLen+0x108>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d173      	bne.n	800b536 <ndefT5TPollerWriteRawMessageLen+0x108>
    {
        if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b454:	2b01      	cmp	r3, #1
 800b456:	d007      	beq.n	800b468 <ndefT5TPollerWriteRawMessageLen+0x3a>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d002      	beq.n	800b468 <ndefT5TPollerWriteRawMessageLen+0x3a>
        {
            result = ERR_WRONG_STATE;
 800b462:	2321      	movs	r3, #33	; 0x21
 800b464:	82fb      	strh	r3, [r7, #22]
 800b466:	e066      	b.n	800b536 <ndefT5TPollerWriteRawMessageLen+0x108>
        }
        else
        {
            TLV[len] = NDEF_T5T_TLV_NDEF;
 800b468:	7d7b      	ldrb	r3, [r7, #21]
 800b46a:	f107 0218 	add.w	r2, r7, #24
 800b46e:	4413      	add	r3, r2
 800b470:	2203      	movs	r2, #3
 800b472:	f803 2c0c 	strb.w	r2, [r3, #-12]
            len++;
 800b476:	7d7b      	ldrb	r3, [r7, #21]
 800b478:	3301      	adds	r3, #1
 800b47a:	757b      	strb	r3, [r7, #21]
            if (rawMessageLen <= NDEF_SHORT_VFIELD_MAX_LEN)
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2bfe      	cmp	r3, #254	; 0xfe
 800b480:	d80b      	bhi.n	800b49a <ndefT5TPollerWriteRawMessageLen+0x6c>
            {
                TLV[len] = (uint8_t) rawMessageLen;
 800b482:	7d7b      	ldrb	r3, [r7, #21]
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	b2d2      	uxtb	r2, r2
 800b488:	f107 0118 	add.w	r1, r7, #24
 800b48c:	440b      	add	r3, r1
 800b48e:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800b492:	7d7b      	ldrb	r3, [r7, #21]
 800b494:	3301      	adds	r3, #1
 800b496:	757b      	strb	r3, [r7, #21]
 800b498:	e016      	b.n	800b4c8 <ndefT5TPollerWriteRawMessageLen+0x9a>
            }
            else
            {
                TLV[len] = (uint8_t) (rawMessageLen >> 8U);
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	0a1a      	lsrs	r2, r3, #8
 800b49e:	7d7b      	ldrb	r3, [r7, #21]
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	f107 0118 	add.w	r1, r7, #24
 800b4a6:	440b      	add	r3, r1
 800b4a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800b4ac:	7d7b      	ldrb	r3, [r7, #21]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	757b      	strb	r3, [r7, #21]
                TLV[len] = (uint8_t) rawMessageLen;
 800b4b2:	7d7b      	ldrb	r3, [r7, #21]
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	b2d2      	uxtb	r2, r2
 800b4b8:	f107 0118 	add.w	r1, r7, #24
 800b4bc:	440b      	add	r3, r1
 800b4be:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800b4c2:	7d7b      	ldrb	r3, [r7, #21]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	757b      	strb	r3, [r7, #21]
            }
            if (rawMessageLen == 0U)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d109      	bne.n	800b4e2 <ndefT5TPollerWriteRawMessageLen+0xb4>
            {
                TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800b4ce:	7d7b      	ldrb	r3, [r7, #21]
 800b4d0:	f107 0218 	add.w	r2, r7, #24
 800b4d4:	4413      	add	r3, r2
 800b4d6:	22fe      	movs	r2, #254	; 0xfe
 800b4d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
                len++;
 800b4dc:	7d7b      	ldrb	r3, [r7, #21]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	757b      	strb	r3, [r7, #21]
            }

            result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, TLV, len);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800b4e8:	7d7b      	ldrb	r3, [r7, #21]
 800b4ea:	f107 020c 	add.w	r2, r7, #12
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff fe8f 	bl	800b212 <ndefT5TPollerWriteBytes>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	82fb      	strh	r3, [r7, #22]
            if ((result == ERR_NONE) && (rawMessageLen != 0U))
 800b4f8:	8afb      	ldrh	r3, [r7, #22]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d11b      	bne.n	800b536 <ndefT5TPollerWriteRawMessageLen+0x108>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d018      	beq.n	800b536 <ndefT5TPollerWriteRawMessageLen+0x108>
            {  /* T5T need specific terminator */
               len = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	757b      	strb	r3, [r7, #21]
               TLV[len] = NDEF_TERMINATOR_TLV_T; /* TLV terminator */
 800b508:	7d7b      	ldrb	r3, [r7, #21]
 800b50a:	f107 0218 	add.w	r2, r7, #24
 800b50e:	4413      	add	r3, r2
 800b510:	22fe      	movs	r2, #254	; 0xfe
 800b512:	f803 2c0c 	strb.w	r2, [r3, #-12]
               len++;
 800b516:	7d7b      	ldrb	r3, [r7, #21]
 800b518:	3301      	adds	r3, #1
 800b51a:	757b      	strb	r3, [r7, #21]
               result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset + rawMessageLen, TLV, len );
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	18d1      	adds	r1, r2, r3
 800b526:	7d7b      	ldrb	r3, [r7, #21]
 800b528:	f107 020c 	add.w	r2, r7, #12
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fe70 	bl	800b212 <ndefT5TPollerWriteBytes>
 800b532:	4603      	mov	r3, r0
 800b534:	82fb      	strh	r3, [r7, #22]
            }
        }
    }
    return result;
 800b536:	8afb      	ldrh	r3, [r7, #22]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <ndefT5TPollerWriteRawMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerWriteRawMessage(ndefContext *ctx, const uint8_t * buf, uint32_t bufLen)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
    uint32_t   len = bufLen ;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	613b      	str	r3, [r7, #16]
    ReturnCode result;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) || (buf == NULL) )
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d006      	beq.n	800b564 <ndefT5TPollerWriteRawMessage+0x24>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d102      	bne.n	800b564 <ndefT5TPollerWriteRawMessage+0x24>
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <ndefT5TPollerWriteRawMessage+0x28>
    {
        return ERR_PARAM;
 800b564:	2307      	movs	r3, #7
 800b566:	e04b      	b.n	800b600 <ndefT5TPollerWriteRawMessage+0xc0>

    /* TS T5T v1.0 7.5.3.1/2: T5T NDEF Detect should have been called before NDEF write procedure */
    /* Warning: current tag content must not be changed between NDEF Detect procedure and NDEF Write procedure*/

    /* TS T5T v1.0 7.5.3.3: check write access condition */
    if ( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d006      	beq.n	800b580 <ndefT5TPollerWriteRawMessage+0x40>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d001      	beq.n	800b580 <ndefT5TPollerWriteRawMessage+0x40>
    {
        /* Conclude procedure */
        return ERR_WRONG_STATE;
 800b57c:	2321      	movs	r3, #33	; 0x21
 800b57e:	e03f      	b.n	800b600 <ndefT5TPollerWriteRawMessage+0xc0>
    }

    /* TS T5T v1.0 7.5.3.3: verify available space */
    result = ndefT5TPollerCheckAvailableSpace(ctx, bufLen);
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fa57 	bl	800ba36 <ndefT5TPollerCheckAvailableSpace>
 800b588:	4603      	mov	r3, r0
 800b58a:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800b58c:	8afb      	ldrh	r3, [r7, #22]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <ndefT5TPollerWriteRawMessage+0x56>
    {
        /* Conclude procedures */
        return ERR_PARAM;
 800b592:	2307      	movs	r3, #7
 800b594:	e034      	b.n	800b600 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    /* and update ctx->messageOffset according to L-field len */
    result = ndefT5TPollerBeginWriteMessage(ctx, bufLen);
 800b596:	6879      	ldr	r1, [r7, #4]
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 fa81 	bl	800baa0 <ndefT5TPollerBeginWriteMessage>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	82fb      	strh	r3, [r7, #22]
    if  (result != ERR_NONE)
 800b5a2:	8afb      	ldrh	r3, [r7, #22]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <ndefT5TPollerWriteRawMessage+0x74>
    {
        ctx->state = NDEF_STATE_INVALID;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        /* Conclude procedure */
        return result;
 800b5b0:	8afb      	ldrh	r3, [r7, #22]
 800b5b2:	e025      	b.n	800b600 <ndefT5TPollerWriteRawMessage+0xc0>
    }
    if( bufLen != 0U )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d021      	beq.n	800b5fe <ndefT5TPollerWriteRawMessage+0xbe>
    {
        /* TS T5T v1.0 7.5.3.5: write new NDEF message */
        result = ndefT5TPollerWriteBytes(ctx, ctx->messageOffset, buf, len);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f7ff fe24 	bl	800b212 <ndefT5TPollerWriteBytes>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800b5ce:	8afb      	ldrh	r3, [r7, #22]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <ndefT5TPollerWriteRawMessage+0xa0>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800b5dc:	8afb      	ldrh	r3, [r7, #22]
 800b5de:	e00f      	b.n	800b600 <ndefT5TPollerWriteRawMessage+0xc0>
        }
        /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
        result = ndefT5TPollerEndWriteMessage(ctx, len);
 800b5e0:	6939      	ldr	r1, [r7, #16]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 faaa 	bl	800bb3c <ndefT5TPollerEndWriteMessage>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	82fb      	strh	r3, [r7, #22]
        if  (result != ERR_NONE)
 800b5ec:	8afb      	ldrh	r3, [r7, #22]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d005      	beq.n	800b5fe <ndefT5TPollerWriteRawMessage+0xbe>
        {
            /* Conclude procedure */
            ctx->state = NDEF_STATE_INVALID;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            return result;
 800b5fa:	8afb      	ldrh	r3, [r7, #22]
 800b5fc:	e000      	b.n	800b600 <ndefT5TPollerWriteRawMessage+0xc0>
        }
    }
    return result;
 800b5fe:	8afb      	ldrh	r3, [r7, #22]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <ndefT5TWriteCC>:

/*******************************************************************************/
static ReturnCode ndefT5TWriteCC(ndefContext *ctx)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
    ReturnCode  ret;
    uint8_t*    buf;
    uint8_t     dataIt;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <ndefT5TWriteCC+0x16>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d001      	beq.n	800b622 <ndefT5TWriteCC+0x1a>
    {
        return ERR_PARAM;
 800b61e:	2307      	movs	r3, #7
 800b620:	e0c9      	b.n	800b7b6 <ndefT5TWriteCC+0x1ae>
    }

    buf    = ctx->ccBuf;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	339c      	adds	r3, #156	; 0x9c
 800b626:	60fb      	str	r3, [r7, #12]
    dataIt = 0U;
 800b628:	2300      	movs	r3, #0
 800b62a:	72fb      	strb	r3, [r7, #11]
    /* Encode CC */
    buf[dataIt] = ctx->cc.t5t.magicNumber;                                                                /* Byte 0 */
 800b62c:	7afb      	ldrb	r3, [r7, #11]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	4413      	add	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800b638:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	3301      	adds	r3, #1
 800b63e:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800b646:	019b      	lsls	r3, r3, #6
 800b648:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b650:	011b      	lsls	r3, r3, #4
 800b652:	b2db      	uxtb	r3, r3
 800b654:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b658:	b2db      	uxtb	r3, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800b65a:	4313      	orrs	r3, r2
 800b65c:	b2da      	uxtb	r2, r3
                            ((ctx->cc.t5t.readAccess    & 0x03U) << 2) |                                  /*        */
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	b2db      	uxtb	r3, r3
 800b668:	f003 030c 	and.w	r3, r3, #12
 800b66c:	b2db      	uxtb	r3, r3
                            ((ctx->cc.t5t.minorVersion  & 0x03U) << 4) |                                  /*        */
 800b66e:	4313      	orrs	r3, r2
 800b670:	b2d9      	uxtb	r1, r3
                            ((ctx->cc.t5t.writeAccess   & 0x03U) << 0));                                  /*        */
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b678:	f003 0303 	and.w	r3, r3, #3
 800b67c:	b2da      	uxtb	r2, r3
    buf[dataIt] = (uint8_t)(((ctx->cc.t5t.majorVersion  & 0x03U) << 6) |                                  /* Byte 1 */
 800b67e:	7afb      	ldrb	r3, [r7, #11]
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	4403      	add	r3, r0
 800b684:	430a      	orrs	r2, r1
 800b686:	b2d2      	uxtb	r2, r2
 800b688:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	3301      	adds	r3, #1
 800b68e:	72fb      	strb	r3, [r7, #11]
    buf[dataIt] = (ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES) ? 0U : (uint8_t)ctx->cc.t5t.memoryLen;   /* Byte 2 */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b696:	2b08      	cmp	r3, #8
 800b698:	d004      	beq.n	800b6a4 <ndefT5TWriteCC+0x9c>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b6a0:	b2d9      	uxtb	r1, r3
 800b6a2:	e000      	b.n	800b6a6 <ndefT5TWriteCC+0x9e>
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	7afb      	ldrb	r3, [r7, #11]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	460a      	mov	r2, r1
 800b6ae:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800b6b0:	7afb      	ldrb	r3, [r7, #11]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	72fb      	strb	r3, [r7, #11]
    buf[dataIt]   = 0U;                                                                                   /* Byte 3 */
 800b6b6:	7afb      	ldrb	r3, [r7, #11]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	2200      	movs	r2, #0
 800b6be:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.multipleBlockRead ) { buf[dataIt] |= 0x01U; }                                         /* Byte 3  b0 MBREAD                */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00a      	beq.n	800b6e0 <ndefT5TWriteCC+0xd8>
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	7afb      	ldrb	r3, [r7, #11]
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	440b      	add	r3, r1
 800b6d8:	f042 0201 	orr.w	r2, r2, #1
 800b6dc:	b2d2      	uxtb	r2, r2
 800b6de:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.mlenOverflow )      { buf[dataIt] |= 0x04U; }                                         /* Byte 3  b2 Android MLEN overflow */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00a      	beq.n	800b700 <ndefT5TWriteCC+0xf8>
 800b6ea:	7afb      	ldrb	r3, [r7, #11]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	781a      	ldrb	r2, [r3, #0]
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	68f9      	ldr	r1, [r7, #12]
 800b6f6:	440b      	add	r3, r1
 800b6f8:	f042 0204 	orr.w	r2, r2, #4
 800b6fc:	b2d2      	uxtb	r2, r2
 800b6fe:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.lockBlock )         { buf[dataIt] |= 0x08U; }                                         /* Byte 3  b3 Lock Block            */
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <ndefT5TWriteCC+0x118>
 800b70a:	7afb      	ldrb	r3, [r7, #11]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	781a      	ldrb	r2, [r3, #0]
 800b712:	7afb      	ldrb	r3, [r7, #11]
 800b714:	68f9      	ldr	r1, [r7, #12]
 800b716:	440b      	add	r3, r1
 800b718:	f042 0208 	orr.w	r2, r2, #8
 800b71c:	b2d2      	uxtb	r2, r2
 800b71e:	701a      	strb	r2, [r3, #0]
    if( ctx->cc.t5t.specialFrame )      { buf[dataIt] |= 0x10U; }                                         /* Byte 3  b4 Special Frame         */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <ndefT5TWriteCC+0x138>
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	4413      	add	r3, r2
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	7afb      	ldrb	r3, [r7, #11]
 800b734:	68f9      	ldr	r1, [r7, #12]
 800b736:	440b      	add	r3, r1
 800b738:	f042 0210 	orr.w	r2, r2, #16
 800b73c:	b2d2      	uxtb	r2, r2
 800b73e:	701a      	strb	r2, [r3, #0]
    dataIt++;
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	3301      	adds	r3, #1
 800b744:	72fb      	strb	r3, [r7, #11]
    if( ctx->cc.t5t.ccLen == NDEF_T5T_CC_LEN_8_BYTES )
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	d127      	bne.n	800b7a0 <ndefT5TWriteCC+0x198>
    {
        buf[dataIt] = 0U;                                                                                 /* Byte 4 */
 800b750:	7afb      	ldrb	r3, [r7, #11]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	2200      	movs	r2, #0
 800b758:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800b75a:	7afb      	ldrb	r3, [r7, #11]
 800b75c:	3301      	adds	r3, #1
 800b75e:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = 0U;                                                                                 /* Byte 5 */
 800b760:	7afb      	ldrb	r3, [r7, #11]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	4413      	add	r3, r2
 800b766:	2200      	movs	r2, #0
 800b768:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800b76a:	7afb      	ldrb	r3, [r7, #11]
 800b76c:	3301      	adds	r3, #1
 800b76e:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 8);                                              /* Byte 6 */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b776:	0a1b      	lsrs	r3, r3, #8
 800b778:	b299      	uxth	r1, r3
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	b2ca      	uxtb	r2, r1
 800b782:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800b784:	7afb      	ldrb	r3, [r7, #11]
 800b786:	3301      	adds	r3, #1
 800b788:	72fb      	strb	r3, [r7, #11]
        buf[dataIt] = (uint8_t)(ctx->cc.t5t.memoryLen >> 0);                                              /* Byte 7 */
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800b790:	7afb      	ldrb	r3, [r7, #11]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	b2ca      	uxtb	r2, r1
 800b798:	701a      	strb	r2, [r3, #0]
        dataIt++;
 800b79a:	7afb      	ldrb	r3, [r7, #11]
 800b79c:	3301      	adds	r3, #1
 800b79e:	72fb      	strb	r3, [r7, #11]
    }

    ret = ndefT5TPollerWriteBytes(ctx, 0U, buf, ctx->cc.t5t.ccLen );
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7ff fd31 	bl	800b212 <ndefT5TPollerWriteBytes>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	813b      	strh	r3, [r7, #8]
    return ret;
 800b7b4:	893b      	ldrh	r3, [r7, #8]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <ndefT5TPollerTagFormat>:

/*******************************************************************************/
ReturnCode ndefT5TPollerTagFormat(ndefContext * ctx, const ndefCapabilityContainer *cc, uint32_t options)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
    uint16_t                 rcvdLen;
    ReturnCode               result;
    static const uint8_t     emptyNDEF[] = { 0x03U, 0x00U, 0xFEU, 0x00U};

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <ndefT5TPollerTagFormat+0x1a>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d001      	beq.n	800b7de <ndefT5TPollerTagFormat+0x1e>
    {
        return ERR_PARAM;
 800b7da:	2307      	movs	r3, #7
 800b7dc:	e103      	b.n	800b9e6 <ndefT5TPollerTagFormat+0x226>
    }

    /* Reset previous potential info about NDEF messages */
    ctx->messageLen               = 0U;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->messageOffset            = 0U;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->subCtx.t5t.TlvNDEFOffset = 0U;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    if( cc != NULL )
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d011      	beq.n	800b820 <ndefT5TPollerTagFormat+0x60>
    {
        if( (cc->t5t.ccLen != NDEF_T5T_CC_LEN_8_BYTES) && (cc->t5t.ccLen != NDEF_T5T_CC_LEN_4_BYTES) )
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b08      	cmp	r3, #8
 800b802:	d005      	beq.n	800b810 <ndefT5TPollerTagFormat+0x50>
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b04      	cmp	r3, #4
 800b80a:	d001      	beq.n	800b810 <ndefT5TPollerTagFormat+0x50>
        {
            return ERR_PARAM;
 800b80c:	2307      	movs	r3, #7
 800b80e:	e0ea      	b.n	800b9e6 <ndefT5TPollerTagFormat+0x226>
        }
        (void)ST_MEMCPY(&ctx->cc, cc, sizeof(ndefCapabilityContainer));
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	337c      	adds	r3, #124	; 0x7c
 800b814:	2214      	movs	r2, #20
 800b816:	68b9      	ldr	r1, [r7, #8]
 800b818:	4618      	mov	r0, r3
 800b81a:	f010 fa49 	bl	801bcb0 <memcpy>
 800b81e:	e09b      	b.n	800b958 <ndefT5TPollerTagFormat+0x198>
    }
    else
    {
        /* Try to find the appropriate cc values */
        ctx->cc.t5t.magicNumber  = NDEF_T5T_CC_MAGIC_1_BYTE_ADDR_MODE; /* E1 */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	22e1      	movs	r2, #225	; 0xe1
 800b824:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ctx->cc.t5t.majorVersion = 1U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        ctx->cc.t5t.minorVersion = 0U;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        ctx->cc.t5t.readAccess   = 0U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        ctx->cc.t5t.writeAccess  = 0U;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        ctx->cc.t5t.lockBlock    = false;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ctx->cc.t5t.specialFrame = false;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        ctx->cc.t5t.memoryLen    = 0U;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        ctx->cc.t5t.mlenOverflow = false;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

        result = ndefT5TPollerReadMultipleBlocks(ctx, 0U, 0U, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvdLen);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800b86e:	f107 0314 	add.w	r3, r7, #20
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	2323      	movs	r3, #35	; 0x23
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	4613      	mov	r3, r2
 800b87a:	2200      	movs	r2, #0
 800b87c:	2100      	movs	r1, #0
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f000 f9e7 	bl	800bc52 <ndefT5TPollerReadMultipleBlocks>
 800b884:	4603      	mov	r3, r0
 800b886:	82fb      	strh	r3, [r7, #22]
        ctx->cc.t5t.multipleBlockRead = (result ==  ERR_NONE) ? true : false;
 800b888:	8afb      	ldrh	r3, [r7, #22]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bf0c      	ite	eq
 800b88e:	2301      	moveq	r3, #1
 800b890:	2300      	movne	r3, #0
 800b892:	b2da      	uxtb	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        /* Try to retrieve the tag's size using getSystemInfo and GetExtSystemInfo */

        if ( (ctx->subCtx.t5t.sysInfoSupported==true) && (ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags)!=0U) )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d056      	beq.n	800b952 <ndefT5TPollerTagFormat+0x192>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800b8aa:	089b      	lsrs	r3, r3, #2
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d04d      	beq.n	800b952 <ndefT5TPollerTagFormat+0x192>
        {
            ctx->cc.t5t.memoryLen =  (uint16_t)((ctx->subCtx.t5t.sysInfo.numberOfBlock  * ctx->subCtx.t5t.sysInfo.blockSize) / NDEF_T5T_MLEN_DIVIDER);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800b8bc:	461a      	mov	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800b8c4:	fb03 f302 	mul.w	r3, r3, r2
 800b8c8:	08db      	lsrs	r3, r3, #3
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

            if( (options & NDEF_T5T_FORMAT_OPTION_NFC_FORUM) == NDEF_T5T_FORMAT_OPTION_NFC_FORUM ) /* NFC Forum format */
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d016      	beq.n	800b90a <ndefT5TPollerTagFormat+0x14a>
            {
                if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b8e2:	2bff      	cmp	r3, #255	; 0xff
 800b8e4:	d903      	bls.n	800b8ee <ndefT5TPollerTagFormat+0x12e>
                {
                    ctx->cc.t5t.ccLen =  NDEF_T5T_CC_LEN_8_BYTES;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                }
                if( ctx->cc.t5t.memoryLen > 0U )
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d019      	beq.n	800b92c <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.memoryLen--; /* remove CC area from memory len */
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b8fe:	3b01      	subs	r3, #1
 800b900:	b29a      	uxth	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800b908:	e010      	b.n	800b92c <ndefT5TPollerTagFormat+0x16c>
                }
            }
            else /* Android format */
            {
                ctx->cc.t5t.ccLen = NDEF_T5T_CC_LEN_4_BYTES;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2204      	movs	r2, #4
 800b90e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                 if( ctx->cc.t5t.memoryLen >= NDEF_T5T_MAX_MLEN_1_BYTE_ENCODING )
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b918:	2bff      	cmp	r3, #255	; 0xff
 800b91a:	d907      	bls.n	800b92c <ndefT5TPollerTagFormat+0x16c>
                {
                    ctx->cc.t5t.mlenOverflow = true;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                    ctx->cc.t5t.memoryLen    = 0xFFU;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	22ff      	movs	r2, #255	; 0xff
 800b928:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                }
            }

            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800b932:	f083 0301 	eor.w	r3, r3, #1
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00c      	beq.n	800b956 <ndefT5TPollerTagFormat+0x196>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800b942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b946:	d906      	bls.n	800b956 <ndefT5TPollerTagFormat+0x196>
            {
                ctx->cc.t5t.magicNumber = NDEF_T5T_CC_MAGIC_2_BYTE_ADDR_MODE; /* E2 */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	22e2      	movs	r2, #226	; 0xe2
 800b94c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800b950:	e001      	b.n	800b956 <ndefT5TPollerTagFormat+0x196>
            }
        }
        else
        {
            return ERR_REQUEST;
 800b952:	2305      	movs	r3, #5
 800b954:	e047      	b.n	800b9e6 <ndefT5TPollerTagFormat+0x226>
            if( !ctx->subCtx.t5t.legacySTHighDensity && (ctx->subCtx.t5t.sysInfo.numberOfBlock > NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR) )
 800b956:	bf00      	nop
        }
    }

    result = ndefT5TWriteCC(ctx);
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f7ff fe55 	bl	800b608 <ndefT5TWriteCC>
 800b95e:	4603      	mov	r3, r0
 800b960:	82fb      	strh	r3, [r7, #22]
    if( result != ERR_NONE )
 800b962:	8afb      	ldrh	r3, [r7, #22]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01e      	beq.n	800b9a6 <ndefT5TPollerTagFormat+0x1e6>
    {
        /* If write fails, try to use special frame if not yet used */
        if( !ctx->cc.t5t.specialFrame )
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800b96e:	f083 0301 	eor.w	r3, r3, #1
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b00      	cmp	r3, #0
 800b976:	d014      	beq.n	800b9a2 <ndefT5TPollerTagFormat+0x1e2>
        {
            platformDelay(20U); /* Wait to be sure that previous command has ended */
 800b978:	2014      	movs	r0, #20
 800b97a:	f7f7 fb01 	bl	8002f80 <HAL_Delay>
            ctx->cc.t5t.specialFrame = true; /* Add option flag */
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            result = ndefT5TWriteCC(ctx);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7ff fe3e 	bl	800b608 <ndefT5TWriteCC>
 800b98c:	4603      	mov	r3, r0
 800b98e:	82fb      	strh	r3, [r7, #22]
            if( result != ERR_NONE )
 800b990:	8afb      	ldrh	r3, [r7, #22]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d007      	beq.n	800b9a6 <ndefT5TPollerTagFormat+0x1e6>
            {
                ctx->cc.t5t.specialFrame = false; /* Add option flag */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                return result;
 800b99e:	8afb      	ldrh	r3, [r7, #22]
 800b9a0:	e021      	b.n	800b9e6 <ndefT5TPollerTagFormat+0x226>
            }
        }
        else
        {
           return result;
 800b9a2:	8afb      	ldrh	r3, [r7, #22]
 800b9a4:	e01f      	b.n	800b9e6 <ndefT5TPollerTagFormat+0x226>
        }
    }
    /* Update info about current NDEF */

    ctx->subCtx.t5t.TlvNDEFOffset = ctx->cc.t5t.ccLen;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    result = ndefT5TPollerWriteBytes(ctx, ctx->subCtx.t5t.TlvNDEFOffset, emptyNDEF, sizeof(emptyNDEF) );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800b9ba:	2304      	movs	r3, #4
 800b9bc:	4a0c      	ldr	r2, [pc, #48]	; (800b9f0 <ndefT5TPollerTagFormat+0x230>)
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7ff fc27 	bl	800b212 <ndefT5TPollerWriteBytes>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	82fb      	strh	r3, [r7, #22]
    if (result == ERR_NONE)
 800b9c8:	8afb      	ldrh	r3, [r7, #22]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <ndefT5TPollerTagFormat+0x224>
    {
        /* Update info about current NDEF */
        ctx->messageOffset = (uint32_t)ctx->cc.t5t.ccLen + 0x02U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b9d4:	1c9a      	adds	r2, r3, #2
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        ctx->state         = NDEF_STATE_INITIALIZED;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
    return result;
 800b9e4:	8afb      	ldrh	r3, [r7, #22]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	0801e990 	.word	0x0801e990

0800b9f4 <ndefT5TPollerCheckPresence>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckPresence(ndefContext *ctx)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af02      	add	r7, sp, #8
 800b9fa:	6078      	str	r0, [r7, #4]
    ReturnCode          ret;
    uint16_t            blockAddr;
    uint16_t            rcvLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <ndefT5TPollerCheckPresence+0x16>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d001      	beq.n	800ba0e <ndefT5TPollerCheckPresence+0x1a>
    {
        return ERR_PARAM;
 800ba0a:	2307      	movs	r3, #7
 800ba0c:	e00f      	b.n	800ba2e <ndefT5TPollerCheckPresence+0x3a>
    }

    blockAddr = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	81fb      	strh	r3, [r7, #14]

    ret = ndefT5TPollerReadSingleBlock( ctx, blockAddr, ctx->subCtx.t5t.txrxBuf, (uint16_t)sizeof(ctx->subCtx.t5t.txrxBuf), &rcvLen );
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800ba18:	89f9      	ldrh	r1, [r7, #14]
 800ba1a:	f107 030a 	add.w	r3, r7, #10
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	2323      	movs	r3, #35	; 0x23
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f96b 	bl	800bcfe <ndefT5TPollerReadSingleBlock>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	81bb      	strh	r3, [r7, #12]

    return ret;
 800ba2c:	89bb      	ldrh	r3, [r7, #12]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <ndefT5TPollerCheckAvailableSpace>:

/*******************************************************************************/
ReturnCode ndefT5TPollerCheckAvailableSpace(const ndefContext *ctx, uint32_t messageLen)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b085      	sub	sp, #20
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	6039      	str	r1, [r7, #0]
    uint32_t            lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <ndefT5TPollerCheckAvailableSpace+0x18>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d001      	beq.n	800ba52 <ndefT5TPollerCheckAvailableSpace+0x1c>
    {
        return ERR_PARAM;
 800ba4e:	2307      	movs	r3, #7
 800ba50:	e021      	b.n	800ba96 <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    if ( ctx->state == NDEF_STATE_INVALID )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <ndefT5TPollerCheckAvailableSpace+0x2a>
    {
        return ERR_WRONG_STATE;
 800ba5c:	2321      	movs	r3, #33	; 0x21
 800ba5e:	e01a      	b.n	800ba96 <ndefT5TPollerCheckAvailableSpace+0x60>
    }

    lLen = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2bfe      	cmp	r3, #254	; 0xfe
 800ba64:	d901      	bls.n	800ba6a <ndefT5TPollerCheckAvailableSpace+0x34>
 800ba66:	2303      	movs	r3, #3
 800ba68:	e000      	b.n	800ba6c <ndefT5TPollerCheckAvailableSpace+0x36>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	60fb      	str	r3, [r7, #12]

    if( (messageLen + ctx->subCtx.t5t.TlvNDEFOffset + NDEF_T5T_TLV_T_LEN + lLen) > (ctx->areaLen + ctx->cc.t5t.ccLen) )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	441a      	add	r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 800ba8a:	440b      	add	r3, r1
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d901      	bls.n	800ba94 <ndefT5TPollerCheckAvailableSpace+0x5e>
    {
        return ERR_NOMEM;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e000      	b.n	800ba96 <ndefT5TPollerCheckAvailableSpace+0x60>
    }
    return ERR_NONE;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bc80      	pop	{r7}
 800ba9e:	4770      	bx	lr

0800baa0 <ndefT5TPollerBeginWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerBeginWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;
    uint32_t             lLen;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <ndefT5TPollerBeginWriteMessage+0x18>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2b03      	cmp	r3, #3
 800bab6:	d001      	beq.n	800babc <ndefT5TPollerBeginWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800bab8:	2307      	movs	r3, #7
 800baba:	e03b      	b.n	800bb34 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    if( (ctx->state != NDEF_STATE_INITIALIZED) && (ctx->state != NDEF_STATE_READWRITE) )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d006      	beq.n	800bad4 <ndefT5TPollerBeginWriteMessage+0x34>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d001      	beq.n	800bad4 <ndefT5TPollerBeginWriteMessage+0x34>
    {
        return ERR_WRONG_STATE;
 800bad0:	2321      	movs	r3, #33	; 0x21
 800bad2:	e02f      	b.n	800bb34 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    /* TS T5T v1.0 7.5.3.4: reset L-Field to 0 */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, 0U);
 800bad4:	2100      	movs	r1, #0
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7ff fca9 	bl	800b42e <ndefT5TPollerWriteRawMessageLen>
 800badc:	4603      	mov	r3, r0
 800bade:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800bae0:	89fb      	ldrh	r3, [r7, #14]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d005      	beq.n	800baf2 <ndefT5TPollerBeginWriteMessage+0x52>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800baee:	89fb      	ldrh	r3, [r7, #14]
 800baf0:	e020      	b.n	800bb34 <ndefT5TPollerBeginWriteMessage+0x94>
    }

    lLen                = ( messageLen > NDEF_SHORT_VFIELD_MAX_LEN) ? NDEF_T5T_TLV_L_3_BYTES_LEN : NDEF_T5T_TLV_L_1_BYTES_LEN;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2bfe      	cmp	r3, #254	; 0xfe
 800baf6:	d901      	bls.n	800bafc <ndefT5TPollerBeginWriteMessage+0x5c>
 800baf8:	2303      	movs	r3, #3
 800bafa:	e000      	b.n	800bafe <ndefT5TPollerBeginWriteMessage+0x5e>
 800bafc:	2301      	movs	r3, #1
 800bafe:	60bb      	str	r3, [r7, #8]
    ctx->messageOffset  = ctx->subCtx.t5t.TlvNDEFOffset;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += NDEF_T5T_TLV_T_LEN; /* T Len */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->messageOffset += lLen;               /* L Len */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	441a      	add	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ctx->state          = NDEF_STATE_INITIALIZED;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return ERR_NONE;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <ndefT5TPollerEndWriteMessage>:

/*******************************************************************************/
ReturnCode ndefT5TPollerEndWriteMessage(ndefContext *ctx, uint32_t messageLen)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
    ReturnCode           ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <ndefT5TPollerEndWriteMessage+0x18>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d001      	beq.n	800bb58 <ndefT5TPollerEndWriteMessage+0x1c>
    {
        return ERR_PARAM;
 800bb54:	2307      	movs	r3, #7
 800bb56:	e025      	b.n	800bba4 <ndefT5TPollerEndWriteMessage+0x68>
    }

    if( ctx->state != NDEF_STATE_INITIALIZED )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d001      	beq.n	800bb66 <ndefT5TPollerEndWriteMessage+0x2a>
    {
        return ERR_WRONG_STATE;
 800bb62:	2321      	movs	r3, #33	; 0x21
 800bb64:	e01e      	b.n	800bba4 <ndefT5TPollerEndWriteMessage+0x68>
    }

    /* TS T5T v1.0 7.5.3.6 & 7.5.3.7: update L-Field and write Terminator TLV */
    ret = ndefT5TPollerWriteRawMessageLen(ctx, messageLen);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff fc60 	bl	800b42e <ndefT5TPollerWriteRawMessageLen>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	81fb      	strh	r3, [r7, #14]
    if( ret != ERR_NONE )
 800bb72:	89fb      	ldrh	r3, [r7, #14]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <ndefT5TPollerEndWriteMessage+0x48>
    {
        /* Conclude procedure */
        ctx->state = NDEF_STATE_INVALID;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        return ret;
 800bb80:	89fb      	ldrh	r3, [r7, #14]
 800bb82:	e00f      	b.n	800bba4 <ndefT5TPollerEndWriteMessage+0x68>
    }
    ctx->messageLen = messageLen;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ctx->state      = (ctx->messageLen == 0U) ? NDEF_STATE_INITIALIZED : NDEF_STATE_READWRITE;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <ndefT5TPollerEndWriteMessage+0x5e>
 800bb96:	2201      	movs	r2, #1
 800bb98:	e000      	b.n	800bb9c <ndefT5TPollerEndWriteMessage+0x60>
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    return ERR_NONE;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <ndefT5TPollerWriteSingleBlock>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerWriteSingleBlock(ndefContext *ctx, uint16_t blockNum, const uint8_t* wrData)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	817b      	strh	r3, [r7, #10]
    ReturnCode                ret;
    uint8_t                   flags;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d003      	beq.n	800bbc8 <ndefT5TPollerWriteSingleBlock+0x1c>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d001      	beq.n	800bbcc <ndefT5TPollerWriteSingleBlock+0x20>
    {
        return ERR_PARAM;
 800bbc8:	2307      	movs	r3, #7
 800bbca:	e03e      	b.n	800bc4a <ndefT5TPollerWriteSingleBlock+0x9e>
    }

    flags = ctx->cc.t5t.specialFrame ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION): (uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <ndefT5TPollerWriteSingleBlock+0x2e>
 800bbd6:	2342      	movs	r3, #66	; 0x42
 800bbd8:	e000      	b.n	800bbdc <ndefT5TPollerWriteSingleBlock+0x30>
 800bbda:	2302      	movs	r3, #2
 800bbdc:	757b      	strb	r3, [r7, #21]

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00e      	beq.n	800bc06 <ndefT5TPollerWriteSingleBlock+0x5a>
    {
        ret = rfalST25xVPollerM24LRWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bbf4:	897a      	ldrh	r2, [r7, #10]
 800bbf6:	7d78      	ldrb	r0, [r7, #21]
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f00e f9c9 	bl	8019f92 <rfalST25xVPollerM24LRWriteSingleBlock>
 800bc00:	4603      	mov	r3, r0
 800bc02:	82fb      	strh	r3, [r7, #22]
 800bc04:	e020      	b.n	800bc48 <ndefT5TPollerWriteSingleBlock+0x9c>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800bc06:	897b      	ldrh	r3, [r7, #10]
 800bc08:	2bff      	cmp	r3, #255	; 0xff
 800bc0a:	d80f      	bhi.n	800bc2c <ndefT5TPollerWriteSingleBlock+0x80>
        {
            ret = rfalNfcvPollerWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bc12:	897b      	ldrh	r3, [r7, #10]
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bc1c:	7d78      	ldrb	r0, [r7, #21]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f009 fe92 	bl	801594a <rfalNfcvPollerWriteSingleBlock>
 800bc26:	4603      	mov	r3, r0
 800bc28:	82fb      	strh	r3, [r7, #22]
 800bc2a:	e00d      	b.n	800bc48 <ndefT5TPollerWriteSingleBlock+0x9c>
        }
        else
        {
            ret = rfalNfcvPollerExtendedWriteSingleBlock(flags, ctx->subCtx.t5t.pAddressedUid, blockNum, wrData, ctx->subCtx.t5t.blockLen);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bc38:	897a      	ldrh	r2, [r7, #10]
 800bc3a:	7d78      	ldrb	r0, [r7, #21]
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f009 ff42 	bl	8015ac8 <rfalNfcvPollerExtendedWriteSingleBlock>
 800bc44:	4603      	mov	r3, r0
 800bc46:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800bc48:	8afb      	ldrh	r3, [r7, #22]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <ndefT5TPollerReadMultipleBlocks>:

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadMultipleBlocks(ndefContext *ctx, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b08a      	sub	sp, #40	; 0x28
 800bc56:	af04      	add	r7, sp, #16
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	607b      	str	r3, [r7, #4]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	817b      	strh	r3, [r7, #10]
 800bc60:	4613      	mov	r3, r2
 800bc62:	727b      	strb	r3, [r7, #9]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <ndefT5TPollerReadMultipleBlocks+0x20>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d001      	beq.n	800bc76 <ndefT5TPollerReadMultipleBlocks+0x24>
    {
        return ERR_PARAM;
 800bc72:	2307      	movs	r3, #7
 800bc74:	e03f      	b.n	800bcf6 <ndefT5TPollerReadMultipleBlocks+0xa4>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d011      	beq.n	800bca4 <ndefT5TPollerReadMultipleBlocks+0x52>
    {

        ret = rfalST25xVPollerM24LRReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bc86:	7a78      	ldrb	r0, [r7, #9]
 800bc88:	897a      	ldrh	r2, [r7, #10]
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	9302      	str	r3, [sp, #8]
 800bc8e:	8c3b      	ldrh	r3, [r7, #32]
 800bc90:	9301      	str	r3, [sp, #4]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	4603      	mov	r3, r0
 800bc98:	2002      	movs	r0, #2
 800bc9a:	f00e f9dc 	bl	801a056 <rfalST25xVPollerM24LRReadMultipleBlocks>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	82fb      	strh	r3, [r7, #22]
 800bca2:	e027      	b.n	800bcf4 <ndefT5TPollerReadMultipleBlocks+0xa2>
    }
    else
    {
        if( firstBlockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800bca4:	897b      	ldrh	r3, [r7, #10]
 800bca6:	2bff      	cmp	r3, #255	; 0xff
 800bca8:	d812      	bhi.n	800bcd0 <ndefT5TPollerReadMultipleBlocks+0x7e>
        {
            ret = rfalNfcvPollerReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bcb0:	897b      	ldrh	r3, [r7, #10]
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	7a78      	ldrb	r0, [r7, #9]
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb8:	9302      	str	r3, [sp, #8]
 800bcba:	8c3b      	ldrh	r3, [r7, #32]
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2002      	movs	r0, #2
 800bcc6:	f009 fe90 	bl	80159ea <rfalNfcvPollerReadMultipleBlocks>
 800bcca:	4603      	mov	r3, r0
 800bccc:	82fb      	strh	r3, [r7, #22]
 800bcce:	e011      	b.n	800bcf4 <ndefT5TPollerReadMultipleBlocks+0xa2>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadMultipleBlocks((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, firstBlockNum, numOfBlocks, rxBuf, rxBufLen, rcvLen);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bcd6:	7a7b      	ldrb	r3, [r7, #9]
 800bcd8:	b298      	uxth	r0, r3
 800bcda:	897a      	ldrh	r2, [r7, #10]
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	9302      	str	r3, [sp, #8]
 800bce0:	8c3b      	ldrh	r3, [r7, #32]
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	4603      	mov	r3, r0
 800bcea:	2002      	movs	r0, #2
 800bcec:	f009 ff48 	bl	8015b80 <rfalNfcvPollerExtendedReadMultipleBlocks>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800bcf4:	8afb      	ldrh	r3, [r7, #22]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <ndefT5TPollerReadSingleBlock>:

#endif /* NDEF_FEATURE_ALL */

/*******************************************************************************/
static ReturnCode ndefT5TPollerReadSingleBlock(ndefContext *ctx, uint16_t blockNum, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvLen)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b088      	sub	sp, #32
 800bd02:	af02      	add	r7, sp, #8
 800bd04:	60f8      	str	r0, [r7, #12]
 800bd06:	607a      	str	r2, [r7, #4]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	817b      	strh	r3, [r7, #10]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	813b      	strh	r3, [r7, #8]
    ReturnCode                ret;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <ndefT5TPollerReadSingleBlock+0x22>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d001      	beq.n	800bd24 <ndefT5TPollerReadSingleBlock+0x26>
    {
        return ERR_PARAM;
 800bd20:	2307      	movs	r3, #7
 800bd22:	e035      	b.n	800bd90 <ndefT5TPollerReadSingleBlock+0x92>
    }

    if( ctx->subCtx.t5t.legacySTHighDensity )
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00e      	beq.n	800bd4c <ndefT5TPollerReadSingleBlock+0x4e>
    {

        ret = rfalST25xVPollerM24LRReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bd34:	897a      	ldrh	r2, [r7, #10]
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	893b      	ldrh	r3, [r7, #8]
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2002      	movs	r0, #2
 800bd42:	f00e f8eb 	bl	8019f1c <rfalST25xVPollerM24LRReadSingleBlock>
 800bd46:	4603      	mov	r3, r0
 800bd48:	82fb      	strh	r3, [r7, #22]
 800bd4a:	e020      	b.n	800bd8e <ndefT5TPollerReadSingleBlock+0x90>
    }
    else
    {
        if( blockNum < NDEF_T5T_MAX_BLOCK_1_BYTE_ADDR )
 800bd4c:	897b      	ldrh	r3, [r7, #10]
 800bd4e:	2bff      	cmp	r3, #255	; 0xff
 800bd50:	d80f      	bhi.n	800bd72 <ndefT5TPollerReadSingleBlock+0x74>
        {
            ret = rfalNfcvPollerReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)blockNum, rxBuf, rxBufLen, rcvLen);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bd58:	897b      	ldrh	r3, [r7, #10]
 800bd5a:	b2da      	uxtb	r2, r3
 800bd5c:	6a3b      	ldr	r3, [r7, #32]
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	893b      	ldrh	r3, [r7, #8]
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2002      	movs	r0, #2
 800bd68:	f009 fdce 	bl	8015908 <rfalNfcvPollerReadSingleBlock>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	82fb      	strh	r3, [r7, #22]
 800bd70:	e00d      	b.n	800bd8e <ndefT5TPollerReadSingleBlock+0x90>
        }
        else
        {
            ret = rfalNfcvPollerExtendedReadSingleBlock((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, blockNum, rxBuf, rxBufLen, rcvLen);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bd78:	897a      	ldrh	r2, [r7, #10]
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	9301      	str	r3, [sp, #4]
 800bd7e:	893b      	ldrh	r3, [r7, #8]
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2002      	movs	r0, #2
 800bd86:	f009 fe67 	bl	8015a58 <rfalNfcvPollerExtendedReadSingleBlock>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	82fb      	strh	r3, [r7, #22]
        }
    }

    return ret;
 800bd8e:	8afb      	ldrh	r3, [r7, #22]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3718      	adds	r7, #24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <ndefT5TGetSystemInformation>:

/*******************************************************************************/
static ReturnCode ndefT5TGetSystemInformation(ndefContext *ctx, bool extended)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08e      	sub	sp, #56	; 0x38
 800bd9c:	af02      	add	r7, sp, #8
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
    ReturnCode                ret;
    uint8_t                   rxBuf[NDEF_T5T_SYSINFO_MAX_LEN];
    uint16_t                  rcvLen;
    uint8_t*                  resp;

    if( (ctx == NULL) || !ndefT5TisT5TDevice(&ctx->device) )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <ndefT5TGetSystemInformation+0x1a>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d001      	beq.n	800bdb6 <ndefT5TGetSystemInformation+0x1e>
    {
        return ERR_PARAM;
 800bdb2:	2307      	movs	r3, #7
 800bdb4:	e0ff      	b.n	800bfb6 <ndefT5TGetSystemInformation+0x21e>
    }

    if( extended )
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d011      	beq.n	800bde0 <ndefT5TGetSystemInformation+0x48>
    {
        ret = rfalNfcvPollerExtendedGetSystemInformation((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT, ctx->subCtx.t5t.pAddressedUid, (uint8_t)RFAL_NFCV_SYSINFO_REQ_ALL, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bdc2:	f107 0210 	add.w	r2, r7, #16
 800bdc6:	f107 030e 	add.w	r3, r7, #14
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	2316      	movs	r3, #22
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	227f      	movs	r2, #127	; 0x7f
 800bdd4:	2002      	movs	r0, #2
 800bdd6:	f009 ff43 	bl	8015c60 <rfalNfcvPollerExtendedGetSystemInformation>
 800bdda:	4603      	mov	r3, r0
 800bddc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bdde:	e014      	b.n	800be0a <ndefT5TGetSystemInformation+0x72>
    }
    else
    {
        ret = rfalNfcvPollerGetSystemInformation(ctx->subCtx.t5t.legacySTHighDensity ? ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT) : ((uint8_t)RFAL_NFCV_REQ_FLAG_DEFAULT), ctx->subCtx.t5t.pAddressedUid, rxBuf, (uint16_t)sizeof(rxBuf), &rcvLen);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <ndefT5TGetSystemInformation+0x56>
 800bdea:	200a      	movs	r0, #10
 800bdec:	e000      	b.n	800bdf0 <ndefT5TGetSystemInformation+0x58>
 800bdee:	2002      	movs	r0, #2
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800bdf6:	f107 0210 	add.w	r2, r7, #16
 800bdfa:	f107 030e 	add.w	r3, r7, #14
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	2316      	movs	r3, #22
 800be02:	f009 ff0e 	bl	8015c22 <rfalNfcvPollerGetSystemInformation>
 800be06:	4603      	mov	r3, r0
 800be08:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if( ret != ERR_NONE )
 800be0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <ndefT5TGetSystemInformation+0x7c>
    {
        return ret;
 800be10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be12:	e0d0      	b.n	800bfb6 <ndefT5TGetSystemInformation+0x21e>
    }

    /* FIXME check buf rcvLen */
    resp = &rxBuf[0U];
 800be14:	f107 0310 	add.w	r3, r7, #16
 800be18:	62bb      	str	r3, [r7, #40]	; 0x28
    /* skip Flags */
    resp++;
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	3301      	adds	r3, #1
 800be1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* get Info flags */
    ctx->subCtx.t5t.sysInfo.infoFlags = *resp;
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	781a      	ldrb	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    resp++;
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	3301      	adds	r3, #1
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
    if( extended && (ndefT5TSysInfoLenValue(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800be30:	78fb      	ldrb	r3, [r7, #3]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <ndefT5TGetSystemInformation+0xb4>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800be3c:	09db      	lsrs	r3, r3, #7
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <ndefT5TGetSystemInformation+0xb4>
    {
        return ERR_PROTO;
 800be48:	230b      	movs	r3, #11
 800be4a:	e0b4      	b.n	800bfb6 <ndefT5TGetSystemInformation+0x21e>
    }
    /* get UID */
    (void)ST_MEMCPY(ctx->subCtx.t5t.sysInfo.UID, resp, RFAL_NFCV_UID_LEN);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	33c0      	adds	r3, #192	; 0xc0
 800be50:	2208      	movs	r2, #8
 800be52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be54:	4618      	mov	r0, r3
 800be56:	f00f ff2b 	bl	801bcb0 <memcpy>
    resp = &resp[RFAL_NFCV_UID_LEN];
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	3308      	adds	r3, #8
 800be5e:	62bb      	str	r3, [r7, #40]	; 0x28
    if( ndefT5TSysInfoDFSIDPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d007      	beq.n	800be7e <ndefT5TGetSystemInformation+0xe6>
    {
        ctx->subCtx.t5t.sysInfo.DFSID = *resp;
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        resp++;
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	3301      	adds	r3, #1
 800be7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoAFIPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800be84:	085b      	lsrs	r3, r3, #1
 800be86:	b2db      	uxtb	r3, r3
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d007      	beq.n	800bea0 <ndefT5TGetSystemInformation+0x108>
    {
        ctx->subCtx.t5t.sysInfo.AFI = *resp;
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	781a      	ldrb	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
        resp++;
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	3301      	adds	r3, #1
 800be9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( ndefT5TSysInfoMemSizePresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800bea6:	089b      	lsrs	r3, r3, #2
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d043      	beq.n	800bf3a <ndefT5TGetSystemInformation+0x1a2>
    {
        if ( ctx->subCtx.t5t.legacySTHighDensity || extended )
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d102      	bne.n	800bec2 <ndefT5TGetSystemInformation+0x12a>
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d01a      	beq.n	800bef8 <ndefT5TGetSystemInformation+0x160>
        {
            /* LRIS64K/M24LR16/M24LR64 */
            ctx->subCtx.t5t.sysInfo.numberOfBlock =  *resp;
 800bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	3301      	adds	r3, #1
 800bed2:	62bb      	str	r3, [r7, #40]	; 0x28
            ctx->subCtx.t5t.sysInfo.numberOfBlock |= (((uint16_t)*resp) << 8U);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800beda:	b21a      	sxth	r2, r3
 800bedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	021b      	lsls	r3, r3, #8
 800bee2:	b21b      	sxth	r3, r3
 800bee4:	4313      	orrs	r3, r2
 800bee6:	b21b      	sxth	r3, r3
 800bee8:	b29a      	uxth	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	3301      	adds	r3, #1
 800bef4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bef6:	e008      	b.n	800bf0a <ndefT5TGetSystemInformation+0x172>
        }
        else
        {
            ctx->subCtx.t5t.sysInfo.numberOfBlock = *resp;
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	b29a      	uxth	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            resp++;
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	3301      	adds	r3, #1
 800bf08:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        ctx->subCtx.t5t.sysInfo.blockSize = *resp;
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	781a      	ldrb	r2, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
        resp++;
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	3301      	adds	r3, #1
 800bf18:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Add 1 to get real values*/
        ctx->subCtx.t5t.sysInfo.numberOfBlock++;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800bf20:	3301      	adds	r3, #1
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
        ctx->subCtx.t5t.sysInfo.blockSize++;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800bf30:	3301      	adds	r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    }
    if( ndefT5TSysInfoICRefPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800bf40:	08db      	lsrs	r3, r3, #3
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d007      	beq.n	800bf5c <ndefT5TGetSystemInformation+0x1c4>
    {
        ctx->subCtx.t5t.sysInfo.ICRef = *resp;
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	781a      	ldrb	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
        resp++;
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	3301      	adds	r3, #1
 800bf5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if( extended && (ndefT5TSysInfoCmdListPresent(ctx->subCtx.t5t.sysInfo.infoFlags) != 0U) )
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d028      	beq.n	800bfb4 <ndefT5TGetSystemInformation+0x21c>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800bf68:	095b      	lsrs	r3, r3, #5
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d01f      	beq.n	800bfb4 <ndefT5TGetSystemInformation+0x21c>
    {
        ctx->subCtx.t5t.sysInfo.supportedCmd[0U] = *resp;
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	781a      	ldrb	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
        resp++;
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	3301      	adds	r3, #1
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[1U] = *resp;
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	781a      	ldrb	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        resp++;
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	3301      	adds	r3, #1
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[2U] = *resp;
 800bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        resp++;
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28
        ctx->subCtx.t5t.sysInfo.supportedCmd[3U] = *resp;
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	781a      	ldrb	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        resp++;
 800bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    return ERR_NONE;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3730      	adds	r7, #48	; 0x30
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
	...

0800bfc0 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
    /* Use default Analog configuration settings in Flash by default. */

/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
 800bfc4:	4b06      	ldr	r3, [pc, #24]	; (800bfe0 <rfalAnalogConfigInitialize+0x20>)
 800bfc6:	4a07      	ldr	r2, [pc, #28]	; (800bfe4 <rfalAnalogConfigInitialize+0x24>)
 800bfc8:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
 800bfca:	4b07      	ldr	r3, [pc, #28]	; (800bfe8 <rfalAnalogConfigInitialize+0x28>)
 800bfcc:	881a      	ldrh	r2, [r3, #0]
 800bfce:	4b04      	ldr	r3, [pc, #16]	; (800bfe0 <rfalAnalogConfigInitialize+0x20>)
 800bfd0:	809a      	strh	r2, [r3, #4]
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800bfd2:	4b03      	ldr	r3, [pc, #12]	; (800bfe0 <rfalAnalogConfigInitialize+0x20>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800bfd8:	bf00      	nop
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr
 800bfe0:	20002a98 	.word	0x20002a98
 800bfe4:	0801e190 	.word	0x0801e190
 800bfe8:	0801e428 	.word	0x0801e428

0800bfec <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4603      	mov	r3, r0
 800bff4:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    const rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 800bffa:	2300      	movs	r3, #0
 800bffc:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800bffe:	4b4b      	ldr	r3, [pc, #300]	; (800c12c <rfalSetAnalogConfig+0x140>)
 800c000:	799b      	ldrb	r3, [r3, #6]
 800c002:	f083 0301 	eor.w	r3, r3, #1
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 800c00c:	2305      	movs	r3, #5
 800c00e:	e089      	b.n	800c124 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800c010:	f107 020e 	add.w	r2, r7, #14
 800c014:	88fb      	ldrh	r3, [r7, #6]
 800c016:	4611      	mov	r1, r2
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 f889 	bl	800c130 <rfalAnalogConfigSearch>
 800c01e:	4603      	mov	r3, r0
 800c020:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800c022:	7d3b      	ldrb	r3, [r7, #20]
 800c024:	2bff      	cmp	r3, #255	; 0xff
 800c026:	d07b      	beq.n	800c120 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800c028:	4b40      	ldr	r3, [pc, #256]	; (800c12c <rfalSetAnalogConfig+0x140>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
 800c02e:	89fb      	ldrh	r3, [r7, #14]
 800c030:	4413      	add	r3, r2
 800c032:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800c034:	7d3b      	ldrb	r3, [r7, #20]
 800c036:	b29b      	uxth	r3, r3
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	89fb      	ldrh	r3, [r7, #14]
 800c03e:	4413      	add	r3, r2
 800c040:	b29b      	uxth	r3, r3
 800c042:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800c044:	4b39      	ldr	r3, [pc, #228]	; (800c12c <rfalSetAnalogConfig+0x140>)
 800c046:	889b      	ldrh	r3, [r3, #4]
 800c048:	3301      	adds	r3, #1
 800c04a:	89fa      	ldrh	r2, [r7, #14]
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d201      	bcs.n	800c054 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 800c050:	2301      	movs	r3, #1
 800c052:	e067      	b.n	800c124 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 800c054:	2300      	movs	r3, #0
 800c056:	757b      	strb	r3, [r7, #21]
 800c058:	e05d      	b.n	800c116 <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800c05a:	7d7b      	ldrb	r3, [r7, #21]
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	4413      	add	r3, r2
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	021b      	lsls	r3, r3, #8
 800c066:	7d7a      	ldrb	r2, [r7, #21]
 800c068:	0092      	lsls	r2, r2, #2
 800c06a:	6939      	ldr	r1, [r7, #16]
 800c06c:	440a      	add	r2, r1
 800c06e:	7852      	ldrb	r2, [r2, #1]
 800c070:	4313      	orrs	r3, r2
 800c072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c076:	2b00      	cmp	r3, #0
 800c078:	d026      	beq.n	800c0c8 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800c07a:	7d7b      	ldrb	r3, [r7, #21]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	4413      	add	r3, r2
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	b21a      	sxth	r2, r3
 800c088:	7d7b      	ldrb	r3, [r7, #21]
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	6939      	ldr	r1, [r7, #16]
 800c08e:	440b      	add	r3, r1
 800c090:	785b      	ldrb	r3, [r3, #1]
 800c092:	b21b      	sxth	r3, r3
 800c094:	4313      	orrs	r3, r2
 800c096:	b21b      	sxth	r3, r3
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c09e:	b298      	uxth	r0, r3
 800c0a0:	7d7b      	ldrb	r3, [r7, #21]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	7899      	ldrb	r1, [r3, #2]
 800c0aa:	7d7b      	ldrb	r3, [r7, #21]
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	78db      	ldrb	r3, [r3, #3]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f00d fd23 	bl	8019b00 <rfalChipChangeTestRegBits>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	82fb      	strh	r3, [r7, #22]
 800c0be:	8afb      	ldrh	r3, [r7, #22]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d025      	beq.n	800c110 <rfalSetAnalogConfig+0x124>
 800c0c4:	8afb      	ldrh	r3, [r7, #22]
 800c0c6:	e02d      	b.n	800c124 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800c0c8:	7d7b      	ldrb	r3, [r7, #21]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	021b      	lsls	r3, r3, #8
 800c0d4:	b21a      	sxth	r2, r3
 800c0d6:	7d7b      	ldrb	r3, [r7, #21]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	6939      	ldr	r1, [r7, #16]
 800c0dc:	440b      	add	r3, r1
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	b21b      	sxth	r3, r3
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	b21b      	sxth	r3, r3
 800c0e6:	b298      	uxth	r0, r3
 800c0e8:	7d7b      	ldrb	r3, [r7, #21]
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	7899      	ldrb	r1, [r3, #2]
 800c0f2:	7d7b      	ldrb	r3, [r7, #21]
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	78db      	ldrb	r3, [r3, #3]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f00d fcdd 	bl	8019abc <rfalChipChangeRegBits>
 800c102:	4603      	mov	r3, r0
 800c104:	82fb      	strh	r3, [r7, #22]
 800c106:	8afb      	ldrh	r3, [r7, #22]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <rfalSetAnalogConfig+0x124>
 800c10c:	8afb      	ldrh	r3, [r7, #22]
 800c10e:	e009      	b.n	800c124 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 800c110:	7d7b      	ldrb	r3, [r7, #21]
 800c112:	3301      	adds	r3, #1
 800c114:	757b      	strb	r3, [r7, #21]
 800c116:	7d7a      	ldrb	r2, [r7, #21]
 800c118:	7d3b      	ldrb	r3, [r7, #20]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d39d      	bcc.n	800c05a <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 800c11e:	e777      	b.n	800c010 <rfalSetAnalogConfig+0x24>
            break;
 800c120:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800c122:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	20002a98 	.word	0x20002a98

0800c130 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800c13c:	4b31      	ldr	r3, [pc, #196]	; (800c204 <rfalAnalogConfigSearch+0xd4>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 800c142:	88fb      	ldrh	r3, [r7, #6]
 800c144:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c148:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <rfalAnalogConfigSearch+0x34>
 800c14e:	88fb      	ldrh	r3, [r7, #6]
 800c150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c15c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800c160:	b29a      	uxth	r2, r3
 800c162:	e001      	b.n	800c168 <rfalAnalogConfigSearch+0x38>
 800c164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c168:	88fb      	ldrh	r3, [r7, #6]
 800c16a:	f003 030f 	and.w	r3, r3, #15
 800c16e:	b29b      	uxth	r3, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <rfalAnalogConfigSearch+0x48>
 800c174:	88fb      	ldrh	r3, [r7, #6]
 800c176:	e000      	b.n	800c17a <rfalAnalogConfigSearch+0x4a>
 800c178:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800c17a:	4313      	orrs	r3, r2
 800c17c:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800c17e:	88fb      	ldrh	r3, [r7, #6]
 800c180:	f003 030f 	and.w	r3, r3, #15
 800c184:	b29b      	uxth	r3, r3
 800c186:	2b04      	cmp	r3, #4
 800c188:	d102      	bne.n	800c190 <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800c18a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c18e:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800c196:	e029      	b.n	800c1ec <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 800c198:	8abb      	ldrh	r3, [r7, #20]
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	4413      	add	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	021b      	lsls	r3, r3, #8
 800c1a6:	b21a      	sxth	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b21b      	sxth	r3, r3
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	b21b      	sxth	r3, r3
 800c1b4:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 800c1b6:	897a      	ldrh	r2, [r7, #10]
 800c1b8:	8afb      	ldrh	r3, [r7, #22]
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	88fa      	ldrh	r2, [r7, #6]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d108      	bne.n	800c1d6 <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800c1c4:	8abb      	ldrh	r3, [r7, #20]
 800c1c6:	3303      	adds	r3, #3
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3302      	adds	r3, #2
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	e010      	b.n	800c1f8 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3302      	adds	r3, #2
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800c1e2:	8abb      	ldrh	r3, [r7, #20]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	3303      	adds	r3, #3
 800c1ea:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800c1ec:	4b05      	ldr	r3, [pc, #20]	; (800c204 <rfalAnalogConfigSearch+0xd4>)
 800c1ee:	889b      	ldrh	r3, [r3, #4]
 800c1f0:	8aba      	ldrh	r2, [r7, #20]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d3d0      	bcc.n	800c198 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 800c1f6:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	371c      	adds	r7, #28
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bc80      	pop	{r7}
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	20002a98 	.word	0x20002a98

0800c208 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	6039      	str	r1, [r7, #0]
 800c212:	80fb      	strh	r3, [r7, #6]
 800c214:	4613      	mov	r3, r2
 800c216:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 800c218:	88fb      	ldrh	r3, [r7, #6]
 800c21a:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 800c21c:	2300      	movs	r3, #0
 800c21e:	81bb      	strh	r3, [r7, #12]
 800c220:	e00d      	b.n	800c23e <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 800c222:	89bb      	ldrh	r3, [r7, #12]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	4413      	add	r3, r2
 800c228:	781a      	ldrb	r2, [r3, #0]
 800c22a:	89fb      	ldrh	r3, [r7, #14]
 800c22c:	4611      	mov	r1, r2
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 f80e 	bl	800c250 <rfalCrcUpdateCcitt>
 800c234:	4603      	mov	r3, r0
 800c236:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 800c238:	89bb      	ldrh	r3, [r7, #12]
 800c23a:	3301      	adds	r3, #1
 800c23c:	81bb      	strh	r3, [r7, #12]
 800c23e:	89ba      	ldrh	r2, [r7, #12]
 800c240:	88bb      	ldrh	r3, [r7, #4]
 800c242:	429a      	cmp	r2, r3
 800c244:	d3ed      	bcc.n	800c222 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 800c246:	89fb      	ldrh	r3, [r7, #14]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	460a      	mov	r2, r1
 800c25a:	80fb      	strh	r3, [r7, #6]
 800c25c:	4613      	mov	r3, r2
 800c25e:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 800c260:	88fb      	ldrh	r3, [r7, #6]
 800c262:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 800c264:	797b      	ldrb	r3, [r7, #5]
 800c266:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800c268:	89fb      	ldrh	r3, [r7, #14]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	7b7b      	ldrb	r3, [r7, #13]
 800c26e:	4053      	eors	r3, r2
 800c270:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 800c272:	7b7b      	ldrb	r3, [r7, #13]
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	b25a      	sxtb	r2, r3
 800c278:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c27c:	4053      	eors	r3, r2
 800c27e:	b25b      	sxtb	r3, r3
 800c280:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800c282:	89fb      	ldrh	r3, [r7, #14]
 800c284:	0a1b      	lsrs	r3, r3, #8
 800c286:	b29b      	uxth	r3, r3
 800c288:	b21a      	sxth	r2, r3
 800c28a:	7b7b      	ldrb	r3, [r7, #13]
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	b21b      	sxth	r3, r3
 800c290:	4053      	eors	r3, r2
 800c292:	b21a      	sxth	r2, r3
 800c294:	7b7b      	ldrb	r3, [r7, #13]
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	b21b      	sxth	r3, r3
 800c29a:	4053      	eors	r3, r2
 800c29c:	b21a      	sxth	r2, r3
 800c29e:	7b7b      	ldrb	r3, [r7, #13]
 800c2a0:	091b      	lsrs	r3, r3, #4
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	b21b      	sxth	r3, r3
 800c2a6:	4053      	eors	r3, r2
 800c2a8:	b21b      	sxth	r3, r3
 800c2aa:	81fb      	strh	r3, [r7, #14]

    return crc;
 800c2ac:	89fb      	ldrh	r3, [r7, #14]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bc80      	pop	{r7}
 800c2b6:	4770      	bx	lr

0800c2b8 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800c2c2:	2208      	movs	r2, #8
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	480d      	ldr	r0, [pc, #52]	; (800c2fc <iso15693PhyConfigure+0x44>)
 800c2c8:	f00f fcf2 	bl	801bcb0 <memcpy>
    
    if ( config->speedMode <= 3U)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d808      	bhi.n	800c2e6 <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	f1c3 0303 	rsb	r3, r3, #3
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	4b07      	ldr	r3, [pc, #28]	; (800c300 <iso15693PhyConfigure+0x48>)
 800c2e2:	70da      	strb	r2, [r3, #3]
 800c2e4:	e002      	b.n	800c2ec <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800c2e6:	4b06      	ldr	r3, [pc, #24]	; (800c300 <iso15693PhyConfigure+0x48>)
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	4a04      	ldr	r2, [pc, #16]	; (800c300 <iso15693PhyConfigure+0x48>)
 800c2f0:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20002aa0 	.word	0x20002aa0
 800c300:	20000118 	.word	0x20000118

0800c304 <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 800c304:	b590      	push	{r4, r7, lr}
 800c306:	b08b      	sub	sp, #44	; 0x2c
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	4608      	mov	r0, r1
 800c30e:	4611      	mov	r1, r2
 800c310:	461a      	mov	r2, r3
 800c312:	4603      	mov	r3, r0
 800c314:	807b      	strh	r3, [r7, #2]
 800c316:	460b      	mov	r3, r1
 800c318:	707b      	strb	r3, [r7, #1]
 800c31a:	4613      	mov	r3, r2
 800c31c:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 800c31e:	2300      	movs	r3, #0
 800c320:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 800c326:	787b      	ldrb	r3, [r7, #1]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <iso15693VCDCode+0x2c>
 800c32c:	2302      	movs	r3, #2
 800c32e:	e000      	b.n	800c332 <iso15693VCDCode+0x2e>
 800c330:	2300      	movs	r3, #0
 800c332:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 800c334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c336:	2200      	movs	r2, #0
 800c338:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 800c33a:	4b94      	ldr	r3, [pc, #592]	; (800c58c <iso15693VCDCode+0x288>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d117      	bne.n	800c372 <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 800c342:	2321      	movs	r3, #33	; 0x21
 800c344:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 800c348:	2304      	movs	r3, #4
 800c34a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 800c34e:	4b90      	ldr	r3, [pc, #576]	; (800c590 <iso15693VCDCode+0x28c>)
 800c350:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800c352:	887a      	ldrh	r2, [r7, #2]
 800c354:	7d7b      	ldrb	r3, [r7, #21]
 800c356:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800c358:	b29b      	uxth	r3, r3
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3302      	adds	r3, #2
 800c360:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800c362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c364:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800c366:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d823      	bhi.n	800c3b6 <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 800c36e:	2301      	movs	r3, #1
 800c370:	e13a      	b.n	800c5e8 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800c372:	2381      	movs	r3, #129	; 0x81
 800c374:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 800c378:	2304      	movs	r3, #4
 800c37a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 800c37e:	4b85      	ldr	r3, [pc, #532]	; (800c594 <iso15693VCDCode+0x290>)
 800c380:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800c382:	887a      	ldrh	r2, [r7, #2]
 800c384:	7d7b      	ldrb	r3, [r7, #21]
 800c386:	4413      	add	r3, r2
                  + 1U) /* EOF */
 800c388:	b29b      	uxth	r3, r3
 800c38a:	019b      	lsls	r3, r3, #6
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	3302      	adds	r3, #2
 800c390:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800c392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c394:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800c396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800c39e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c3a2:	2b3f      	cmp	r3, #63	; 0x3f
 800c3a4:	d807      	bhi.n	800c3b6 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e11e      	b.n	800c5e8 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800c3aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c3ae:	2b40      	cmp	r3, #64	; 0x40
 800c3b0:	d801      	bhi.n	800c3b6 <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e118      	b.n	800c5e8 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800c3b6:	887b      	ldrh	r3, [r7, #2]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3be:	2201      	movs	r2, #1
 800c3c0:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800c3c2:	887b      	ldrh	r3, [r7, #2]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d01b      	beq.n	800c400 <iso15693VCDCode+0xfc>
 800c3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d117      	bne.n	800c400 <iso15693VCDCode+0xfc>
 800c3d0:	783b      	ldrb	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d014      	beq.n	800c400 <iso15693VCDCode+0xfc>
 800c3d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c3da:	f083 0301 	eor.w	r3, r3, #1
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00d      	beq.n	800c400 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f043 0302 	orr.w	r3, r3, #2
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f023 0301 	bic.w	r3, r3, #1
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 800c400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c402:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 800c404:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c408:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 800c40a:	887b      	ldrh	r3, [r7, #2]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d03b      	beq.n	800c488 <iso15693VCDCode+0x184>
 800c410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d137      	bne.n	800c488 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c41e:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800c420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	3301      	adds	r3, #1
 800c426:	b29a      	uxth	r2, r3
 800c428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42a:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800c42c:	8afb      	ldrh	r3, [r7, #22]
 800c42e:	3b01      	subs	r3, #1
 800c430:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	3301      	adds	r3, #1
 800c436:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 800c438:	e026      	b.n	800c488 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800c43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4413      	add	r3, r2
 800c444:	7818      	ldrb	r0, [r3, #0]
 800c446:	f107 030e 	add.w	r3, r7, #14
 800c44a:	8afa      	ldrh	r2, [r7, #22]
 800c44c:	69fc      	ldr	r4, [r7, #28]
 800c44e:	69b9      	ldr	r1, [r7, #24]
 800c450:	47a0      	blx	r4
 800c452:	4603      	mov	r3, r0
 800c454:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800c456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c458:	881a      	ldrh	r2, [r3, #0]
 800c45a:	89fb      	ldrh	r3, [r7, #14]
 800c45c:	4413      	add	r3, r2
 800c45e:	b29a      	uxth	r2, r3
 800c460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c462:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800c464:	89fb      	ldrh	r3, [r7, #14]
 800c466:	461a      	mov	r2, r3
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	4413      	add	r3, r2
 800c46c:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800c46e:	89fb      	ldrh	r3, [r7, #14]
 800c470:	8afa      	ldrh	r2, [r7, #22]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800c476:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d105      	bne.n	800c488 <iso15693VCDCode+0x184>
            (*offset)++;
 800c47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	3301      	adds	r3, #1
 800c482:	b29a      	uxth	r2, r3
 800c484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c486:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 800c488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	887a      	ldrh	r2, [r7, #2]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d902      	bls.n	800c498 <iso15693VCDCode+0x194>
 800c492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c494:	2b00      	cmp	r3, #0
 800c496:	d0d0      	beq.n	800c43a <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 800c498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d063      	beq.n	800c566 <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 800c49e:	230d      	movs	r3, #13
 800c4a0:	e0a2      	b.n	800c5e8 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800c4a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d12b      	bne.n	800c500 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800c4a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <iso15693VCDCode+0x1b2>
 800c4b0:	f24e 0012 	movw	r0, #57362	; 0xe012
 800c4b4:	e001      	b.n	800c4ba <iso15693VCDCode+0x1b6>
 800c4b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c4ba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d002      	beq.n	800c4c8 <iso15693VCDCode+0x1c4>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	e000      	b.n	800c4ca <iso15693VCDCode+0x1c6>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	d003      	beq.n	800c4da <iso15693VCDCode+0x1d6>
 800c4d2:	887a      	ldrh	r2, [r7, #2]
 800c4d4:	3a01      	subs	r2, #1
 800c4d6:	b292      	uxth	r2, r2
 800c4d8:	e000      	b.n	800c4dc <iso15693VCDCode+0x1d8>
 800c4da:	887a      	ldrh	r2, [r7, #2]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f7ff fe93 	bl	800c208 <rfalCrcCalculateCcitt>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800c4e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c4ea:	f083 0301 	eor.w	r3, r3, #1
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d003      	beq.n	800c4fc <iso15693VCDCode+0x1f8>
 800c4f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4f6:	43db      	mvns	r3, r3
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	e000      	b.n	800c4fe <iso15693VCDCode+0x1fa>
 800c4fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4fe:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800c500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c502:	b2db      	uxtb	r3, r3
 800c504:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 800c506:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c508:	0a1b      	lsrs	r3, r3, #8
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800c510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	887b      	ldrh	r3, [r7, #2]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c51e:	4413      	add	r3, r2
 800c520:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 800c524:	f107 030c 	add.w	r3, r7, #12
 800c528:	8afa      	ldrh	r2, [r7, #22]
 800c52a:	69fc      	ldr	r4, [r7, #28]
 800c52c:	69b9      	ldr	r1, [r7, #24]
 800c52e:	47a0      	blx	r4
 800c530:	4603      	mov	r3, r0
 800c532:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800c534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c536:	881a      	ldrh	r2, [r3, #0]
 800c538:	89bb      	ldrh	r3, [r7, #12]
 800c53a:	4413      	add	r3, r2
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c540:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800c542:	89bb      	ldrh	r3, [r7, #12]
 800c544:	461a      	mov	r2, r3
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	4413      	add	r3, r2
 800c54a:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 800c54c:	89bb      	ldrh	r3, [r7, #12]
 800c54e:	8afa      	ldrh	r2, [r7, #22]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800c554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c556:	2b00      	cmp	r3, #0
 800c558:	d105      	bne.n	800c566 <iso15693VCDCode+0x262>
            (*offset)++;
 800c55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	3301      	adds	r3, #1
 800c560:	b29a      	uxth	r2, r3
 800c562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c564:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800c566:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d109      	bne.n	800c580 <iso15693VCDCode+0x27c>
 800c56c:	787b      	ldrb	r3, [r7, #1]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d006      	beq.n	800c580 <iso15693VCDCode+0x27c>
 800c572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	887b      	ldrh	r3, [r7, #2]
 800c57a:	3302      	adds	r3, #2
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d390      	bcc.n	800c4a2 <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 800c580:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c582:	2b00      	cmp	r3, #0
 800c584:	d008      	beq.n	800c598 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800c586:	230d      	movs	r3, #13
 800c588:	e02e      	b.n	800c5e8 <iso15693VCDCode+0x2e4>
 800c58a:	bf00      	nop
 800c58c:	20002aa0 	.word	0x20002aa0
 800c590:	0800c82d 	.word	0x0800c82d
 800c594:	0800c8d5 	.word	0x0800c8d5
    }

    if ((!sendCrc && (*offset == length))
 800c598:	787b      	ldrb	r3, [r7, #1]
 800c59a:	f083 0301 	eor.w	r3, r3, #1
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d004      	beq.n	800c5ae <iso15693VCDCode+0x2aa>
 800c5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	887a      	ldrh	r2, [r7, #2]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d009      	beq.n	800c5c2 <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 800c5ae:	787b      	ldrb	r3, [r7, #1]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d018      	beq.n	800c5e6 <iso15693VCDCode+0x2e2>
 800c5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	887b      	ldrh	r3, [r7, #2]
 800c5bc:	3302      	adds	r3, #2
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d111      	bne.n	800c5e6 <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c5c8:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 800c5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d4:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800c5d6:	8afb      	ldrh	r3, [r7, #22]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800c5e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5e4:	e000      	b.n	800c5e8 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800c5e6:	230d      	movs	r3, #13
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	372c      	adds	r7, #44	; 0x2c
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd90      	pop	{r4, r7, pc}

0800c5f0 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	607a      	str	r2, [r7, #4]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	817b      	strh	r3, [r7, #10]
 800c600:	4613      	mov	r3, r2
 800c602:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 800c604:	2300      	movs	r3, #0
 800c606:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60a:	2200      	movs	r2, #0
 800c60c:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 800c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c610:	2200      	movs	r2, #0
 800c612:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	f003 031f 	and.w	r3, r3, #31
 800c61c:	2b17      	cmp	r3, #23
 800c61e:	d001      	beq.n	800c624 <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 800c620:	2309      	movs	r3, #9
 800c622:	e0ff      	b.n	800c824 <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 800c624:	893b      	ldrh	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 800c62a:	2300      	movs	r3, #0
 800c62c:	e0fa      	b.n	800c824 <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800c62e:	2305      	movs	r3, #5
 800c630:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 800c636:	893b      	ldrh	r3, [r7, #8]
 800c638:	461a      	mov	r2, r3
 800c63a:	2100      	movs	r1, #0
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f00f fb5f 	bl	801bd00 <memset>

    if (inBufLen == 0U)
 800c642:	897b      	ldrh	r3, [r7, #10]
 800c644:	2b00      	cmp	r3, #0
 800c646:	f040 808e 	bne.w	800c766 <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 800c64a:	2315      	movs	r3, #21
 800c64c:	e0ea      	b.n	800c824 <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 800c64e:	2300      	movs	r3, #0
 800c650:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800c652:	8bbb      	ldrh	r3, [r7, #28]
 800c654:	08db      	lsrs	r3, r3, #3
 800c656:	b29b      	uxth	r3, r3
 800c658:	461a      	mov	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	4413      	add	r3, r2
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	461a      	mov	r2, r3
 800c662:	8bbb      	ldrh	r3, [r7, #28]
 800c664:	f003 0307 	and.w	r3, r3, #7
 800c668:	fa42 f303 	asr.w	r3, r2, r3
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	f003 0301 	and.w	r3, r3, #1
 800c672:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800c674:	8bbb      	ldrh	r3, [r7, #28]
 800c676:	3301      	adds	r3, #1
 800c678:	08db      	lsrs	r3, r3, #3
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	4413      	add	r3, r2
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	8bbb      	ldrh	r3, [r7, #28]
 800c684:	3301      	adds	r3, #1
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	fa42 f303 	asr.w	r3, r2, r3
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	005b      	lsls	r3, r3, #1
 800c692:	b2db      	uxtb	r3, r3
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	7e3b      	ldrb	r3, [r7, #24]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 800c6a0:	7e3b      	ldrb	r3, [r7, #24]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d102      	bne.n	800c6ac <iso15693VICCDecode+0xbc>
        {
            bp++;
 800c6a6:	8b7b      	ldrh	r3, [r7, #26]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 800c6ac:	7e3b      	ldrb	r3, [r7, #24]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d119      	bne.n	800c6e6 <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800c6b2:	8b7b      	ldrh	r3, [r7, #26]
 800c6b4:	08db      	lsrs	r3, r3, #3
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	7819      	ldrb	r1, [r3, #0]
 800c6c0:	8b7b      	ldrh	r3, [r7, #26]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	8b7b      	ldrh	r3, [r7, #26]
 800c6d0:	08db      	lsrs	r3, r3, #3
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4403      	add	r3, r0
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	b2d2      	uxtb	r2, r2
 800c6de:	701a      	strb	r2, [r3, #0]
            bp++;
 800c6e0:	8b7b      	ldrh	r3, [r7, #26]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800c6e6:	8b7b      	ldrh	r3, [r7, #26]
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d115      	bne.n	800c71e <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800c6f2:	8bbb      	ldrh	r3, [r7, #28]
 800c6f4:	08db      	lsrs	r3, r3, #3
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800c704:	2ba0      	cmp	r3, #160	; 0xa0
 800c706:	d10a      	bne.n	800c71e <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800c708:	8bbb      	ldrh	r3, [r7, #28]
 800c70a:	08db      	lsrs	r3, r3, #3
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	3301      	adds	r3, #1
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	4413      	add	r3, r2
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b03      	cmp	r3, #3
 800c718:	d101      	bne.n	800c71e <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 800c71a:	2301      	movs	r3, #1
 800c71c:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 800c71e:	7e3b      	ldrb	r3, [r7, #24]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <iso15693VICCDecode+0x13a>
 800c724:	7e3b      	ldrb	r3, [r7, #24]
 800c726:	2b03      	cmp	r3, #3
 800c728:	d10f      	bne.n	800c74a <iso15693VICCDecode+0x15a>
 800c72a:	7e7b      	ldrb	r3, [r7, #25]
 800c72c:	f083 0301 	eor.w	r3, r3, #1
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d009      	beq.n	800c74a <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 800c736:	8b7a      	ldrh	r2, [r7, #26]
 800c738:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d302      	bcc.n	800c744 <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 800c73e:	231d      	movs	r3, #29
 800c740:	83fb      	strh	r3, [r7, #30]
 800c742:	e002      	b.n	800c74a <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 800c744:	8b7b      	ldrh	r3, [r7, #26]
 800c746:	3301      	adds	r3, #1
 800c748:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 800c74a:	8b7a      	ldrh	r2, [r7, #26]
 800c74c:	893b      	ldrh	r3, [r7, #8]
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	429a      	cmp	r2, r3
 800c752:	d20f      	bcs.n	800c774 <iso15693VICCDecode+0x184>
 800c754:	8bfb      	ldrh	r3, [r7, #30]
 800c756:	2b1d      	cmp	r3, #29
 800c758:	d00c      	beq.n	800c774 <iso15693VICCDecode+0x184>
 800c75a:	7e7b      	ldrb	r3, [r7, #25]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d109      	bne.n	800c774 <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800c760:	8bbb      	ldrh	r3, [r7, #28]
 800c762:	3302      	adds	r3, #2
 800c764:	83bb      	strh	r3, [r7, #28]
 800c766:	8bba      	ldrh	r2, [r7, #28]
 800c768:	897b      	ldrh	r3, [r7, #10]
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	3b02      	subs	r3, #2
 800c76e:	429a      	cmp	r2, r3
 800c770:	f4ff af6d 	bcc.w	800c64e <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800c774:	8b7b      	ldrh	r3, [r7, #26]
 800c776:	08db      	lsrs	r3, r3, #3
 800c778:	b29a      	uxth	r2, r3
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 800c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c780:	8b7a      	ldrh	r2, [r7, #26]
 800c782:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800c784:	8bfb      	ldrh	r3, [r7, #30]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <iso15693VICCDecode+0x19e>
    {
        return err;
 800c78a:	8bfb      	ldrh	r3, [r7, #30]
 800c78c:	e04a      	b.n	800c824 <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 800c78e:	8b7b      	ldrh	r3, [r7, #26]
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	b29b      	uxth	r3, r3
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 800c79a:	2315      	movs	r3, #21
 800c79c:	e042      	b.n	800c824 <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d93b      	bls.n	800c81e <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800c7a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d002      	beq.n	800c7b4 <iso15693VICCDecode+0x1c4>
 800c7ae:	f24e 0012 	movw	r0, #57362	; 0xe012
 800c7b2:	e001      	b.n	800c7b8 <iso15693VICCDecode+0x1c8>
 800c7b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	3b02      	subs	r3, #2
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	6879      	ldr	r1, [r7, #4]
 800c7c4:	f7ff fd20 	bl	800c208 <rfalCrcCalculateCcitt>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800c7cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c7d0:	f083 0301 	eor.w	r3, r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d003      	beq.n	800c7e2 <iso15693VICCDecode+0x1f2>
 800c7da:	8afb      	ldrh	r3, [r7, #22]
 800c7dc:	43db      	mvns	r3, r3
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	e000      	b.n	800c7e4 <iso15693VICCDecode+0x1f4>
 800c7e2:	8afb      	ldrh	r3, [r7, #22]
 800c7e4:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800c7e6:	8afb      	ldrh	r3, [r7, #22]
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ec:	8812      	ldrh	r2, [r2, #0]
 800c7ee:	3a02      	subs	r2, #2
 800c7f0:	6879      	ldr	r1, [r7, #4]
 800c7f2:	440a      	add	r2, r1
 800c7f4:	7812      	ldrb	r2, [r2, #0]
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d10e      	bne.n	800c818 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800c7fa:	8afb      	ldrh	r3, [r7, #22]
 800c7fc:	0a1b      	lsrs	r3, r3, #8
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	b2db      	uxtb	r3, r3
 800c802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c804:	8812      	ldrh	r2, [r2, #0]
 800c806:	3a01      	subs	r2, #1
 800c808:	6879      	ldr	r1, [r7, #4]
 800c80a:	440a      	add	r2, r1
 800c80c:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800c80e:	4293      	cmp	r3, r2
 800c810:	d102      	bne.n	800c818 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800c812:	2300      	movs	r3, #0
 800c814:	83fb      	strh	r3, [r7, #30]
 800c816:	e004      	b.n	800c822 <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 800c818:	2315      	movs	r3, #21
 800c81a:	83fb      	strh	r3, [r7, #30]
 800c81c:	e001      	b.n	800c822 <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 800c81e:	2315      	movs	r3, #21
 800c820:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800c822:	8bfb      	ldrh	r3, [r7, #30]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3720      	adds	r7, #32
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b089      	sub	sp, #36	; 0x24
 800c830:	af00      	add	r7, sp, #0
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607b      	str	r3, [r7, #4]
 800c836:	4603      	mov	r3, r0
 800c838:	73fb      	strb	r3, [r7, #15]
 800c83a:	4613      	mov	r3, r2
 800c83c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800c83e:	2300      	movs	r3, #0
 800c840:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 800c84c:	89bb      	ldrh	r3, [r7, #12]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d801      	bhi.n	800c856 <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800c852:	2301      	movs	r3, #1
 800c854:	e038      	b.n	800c8c8 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800c856:	7bfb      	ldrb	r3, [r7, #15]
 800c858:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800c85a:	2300      	movs	r3, #0
 800c85c:	83bb      	strh	r3, [r7, #28]
 800c85e:	e02f      	b.n	800c8c0 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 800c860:	7ffb      	ldrb	r3, [r7, #31]
 800c862:	f003 0303 	and.w	r3, r3, #3
 800c866:	2b03      	cmp	r3, #3
 800c868:	d81a      	bhi.n	800c8a0 <iso15693PhyVCDCode1Of4+0x74>
 800c86a:	a201      	add	r2, pc, #4	; (adr r2, 800c870 <iso15693PhyVCDCode1Of4+0x44>)
 800c86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c870:	0800c881 	.word	0x0800c881
 800c874:	0800c889 	.word	0x0800c889
 800c878:	0800c891 	.word	0x0800c891
 800c87c:	0800c899 	.word	0x0800c899
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	2202      	movs	r2, #2
 800c884:	701a      	strb	r2, [r3, #0]
                break;
 800c886:	e00c      	b.n	800c8a2 <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	2208      	movs	r2, #8
 800c88c:	701a      	strb	r2, [r3, #0]
                break;
 800c88e:	e008      	b.n	800c8a2 <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	2220      	movs	r2, #32
 800c894:	701a      	strb	r2, [r3, #0]
                break;
 800c896:	e004      	b.n	800c8a2 <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	2280      	movs	r2, #128	; 0x80
 800c89c:	701a      	strb	r2, [r3, #0]
                break;
 800c89e:	e000      	b.n	800c8a2 <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 800c8a0:	bf00      	nop
        }
        outbuf++;
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800c8b4:	7ffb      	ldrb	r3, [r7, #31]
 800c8b6:	089b      	lsrs	r3, r3, #2
 800c8b8:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 800c8ba:	8bbb      	ldrh	r3, [r7, #28]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	83bb      	strh	r3, [r7, #28]
 800c8c0:	8bbb      	ldrh	r3, [r7, #28]
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d9cc      	bls.n	800c860 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800c8c6:	8afb      	ldrh	r3, [r7, #22]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3724      	adds	r7, #36	; 0x24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bc80      	pop	{r7}
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop

0800c8d4 <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b089      	sub	sp, #36	; 0x24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60b9      	str	r1, [r7, #8]
 800c8dc:	607b      	str	r3, [r7, #4]
 800c8de:	4603      	mov	r3, r0
 800c8e0:	73fb      	strb	r3, [r7, #15]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800c8f4:	89bb      	ldrh	r3, [r7, #12]
 800c8f6:	2b3f      	cmp	r3, #63	; 0x3f
 800c8f8:	d801      	bhi.n	800c8fe <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e039      	b.n	800c972 <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 800c8fe:	7bfb      	ldrb	r3, [r7, #15]
 800c900:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800c902:	2300      	movs	r3, #0
 800c904:	83bb      	strh	r3, [r7, #28]
 800c906:	e030      	b.n	800c96a <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 800c908:	7ffb      	ldrb	r3, [r7, #31]
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d81a      	bhi.n	800c944 <iso15693PhyVCDCode1Of256+0x70>
 800c90e:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <iso15693PhyVCDCode1Of256+0x40>)
 800c910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c914:	0800c925 	.word	0x0800c925
 800c918:	0800c92d 	.word	0x0800c92d
 800c91c:	0800c935 	.word	0x0800c935
 800c920:	0800c93d 	.word	0x0800c93d
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	2202      	movs	r2, #2
 800c928:	701a      	strb	r2, [r3, #0]
                break;
 800c92a:	e00f      	b.n	800c94c <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	2208      	movs	r2, #8
 800c930:	701a      	strb	r2, [r3, #0]
                break;
 800c932:	e00b      	b.n	800c94c <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	2220      	movs	r2, #32
 800c938:	701a      	strb	r2, [r3, #0]
                break;
 800c93a:	e007      	b.n	800c94c <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	2280      	movs	r2, #128	; 0x80
 800c940:	701a      	strb	r2, [r3, #0]
                break;
 800c942:	e003      	b.n	800c94c <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
                break;               
 800c94a:	bf00      	nop
        }
        outbuf++;
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	3301      	adds	r3, #1
 800c950:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	b29a      	uxth	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 800c95e:	7ffb      	ldrb	r3, [r7, #31]
 800c960:	3b04      	subs	r3, #4
 800c962:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800c964:	8bbb      	ldrh	r3, [r7, #28]
 800c966:	3301      	adds	r3, #1
 800c968:	83bb      	strh	r3, [r7, #28]
 800c96a:	8bbb      	ldrh	r3, [r7, #28]
 800c96c:	2b3f      	cmp	r3, #63	; 0x3f
 800c96e:	d9cb      	bls.n	800c908 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 800c970:	8afb      	ldrh	r3, [r7, #22]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3724      	adds	r7, #36	; 0x24
 800c976:	46bd      	mov	sp, r7
 800c978:	bc80      	pop	{r7}
 800c97a:	4770      	bx	lr

0800c97c <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 800c97c:	b480      	push	{r7}
 800c97e:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys    = 0;
 800c980:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <isoDepClearCounters+0x2c>)
 800c982:	2200      	movs	r2, #0
 800c984:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys    = 0;
 800c986:	4b08      	ldr	r3, [pc, #32]	; (800c9a8 <isoDepClearCounters+0x2c>)
 800c988:	2200      	movs	r2, #0
 800c98a:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSDslRetrys = 0;
 800c98c:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <isoDepClearCounters+0x2c>)
 800c98e:	2200      	movs	r2, #0
 800c990:	71da      	strb	r2, [r3, #7]
    gIsoDep.cntSWtxRetrys = 0;
 800c992:	4b05      	ldr	r3, [pc, #20]	; (800c9a8 <isoDepClearCounters+0x2c>)
 800c994:	2200      	movs	r2, #0
 800c996:	721a      	strb	r2, [r3, #8]
    gIsoDep.cntSWtxNack   = 0;
 800c998:	4b03      	ldr	r3, [pc, #12]	; (800c9a8 <isoDepClearCounters+0x2c>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	725a      	strb	r2, [r3, #9]
}
 800c99e:	bf00      	nop
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bc80      	pop	{r7}
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	20002aa8 	.word	0x20002aa8

0800c9ac <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08e      	sub	sp, #56	; 0x38
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	607a      	str	r2, [r7, #4]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	81bb      	strh	r3, [r7, #12]
    uint16_t   txBufLen;
    uint8_t    computedPcb;
    rfalTransceiveContext    ctx;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	637b      	str	r3, [r7, #52]	; 0x34
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 800c9c4:	4a4d      	ldr	r2, [pc, #308]	; (800cafc <isoDepTx+0x150>)
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    
    
    if ( infLen > 0U )
 800c9cc:	89bb      	ldrh	r3, [r7, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d009      	beq.n	800c9e6 <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	4a48      	ldr	r2, [pc, #288]	; (800cafc <isoDepTx+0x150>)
 800c9da:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d201      	bcs.n	800c9e6 <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e086      	b.n	800caf4 <isoDepTx+0x148>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
 800c9e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 800c9ec:	4b43      	ldr	r3, [pc, #268]	; (800cafc <isoDepTx+0x150>)
 800c9ee:	78db      	ldrb	r3, [r3, #3]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d108      	bne.n	800ca06 <isoDepTx+0x5a>
 800c9f4:	4b41      	ldr	r3, [pc, #260]	; (800cafc <isoDepTx+0x150>)
 800c9f6:	78db      	ldrb	r3, [r3, #3]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10a      	bne.n	800ca12 <isoDepTx+0x66>
 800c9fc:	4b3f      	ldr	r3, [pc, #252]	; (800cafc <isoDepTx+0x150>)
 800c9fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <isoDepTx+0x66>
 800ca06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca0a:	f043 0308 	orr.w	r3, r3, #8
 800ca0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 800ca12:	4b3a      	ldr	r3, [pc, #232]	; (800cafc <isoDepTx+0x150>)
 800ca14:	791b      	ldrb	r3, [r3, #4]
 800ca16:	2bff      	cmp	r3, #255	; 0xff
 800ca18:	d005      	beq.n	800ca26 <isoDepTx+0x7a>
 800ca1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca1e:	f043 0304 	orr.w	r3, r3, #4
 800ca22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 800ca26:	4b35      	ldr	r3, [pc, #212]	; (800cafc <isoDepTx+0x150>)
 800ca28:	7d9b      	ldrb	r3, [r3, #22]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <isoDepTx+0x9a>
 800ca2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca32:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d105      	bne.n	800ca46 <isoDepTx+0x9a>
 800ca3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca3e:	f043 0310 	orr.w	r3, r3, #16
 800ca42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 800ca46:	4b2d      	ldr	r3, [pc, #180]	; (800cafc <isoDepTx+0x150>)
 800ca48:	791b      	ldrb	r3, [r3, #4]
 800ca4a:	2bff      	cmp	r3, #255	; 0xff
 800ca4c:	d006      	beq.n	800ca5c <isoDepTx+0xb0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 800ca4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca50:	3b01      	subs	r3, #1
 800ca52:	637b      	str	r3, [r7, #52]	; 0x34
 800ca54:	4b29      	ldr	r3, [pc, #164]	; (800cafc <isoDepTx+0x150>)
 800ca56:	791a      	ldrb	r2, [r3, #4]
 800ca58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca5a:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 800ca5c:	4b27      	ldr	r3, [pc, #156]	; (800cafc <isoDepTx+0x150>)
 800ca5e:	78db      	ldrb	r3, [r3, #3]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d108      	bne.n	800ca76 <isoDepTx+0xca>
 800ca64:	4b25      	ldr	r3, [pc, #148]	; (800cafc <isoDepTx+0x150>)
 800ca66:	78db      	ldrb	r3, [r3, #3]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10b      	bne.n	800ca84 <isoDepTx+0xd8>
 800ca6c:	4b23      	ldr	r3, [pc, #140]	; (800cafc <isoDepTx+0x150>)
 800ca6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d006      	beq.n	800ca84 <isoDepTx+0xd8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 800ca76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca7c:	4b1f      	ldr	r3, [pc, #124]	; (800cafc <isoDepTx+0x150>)
 800ca7e:	78da      	ldrb	r2, [r3, #3]
 800ca80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca82:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 800ca84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca86:	3b01      	subs	r3, #1
 800ca88:	637b      	str	r3, [r7, #52]	; 0x34
 800ca8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ca90:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	89bb      	ldrh	r3, [r7, #12]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	863b      	strh	r3, [r7, #48]	; 0x30
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 800caa0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800caa2:	4b16      	ldr	r3, [pc, #88]	; (800cafc <isoDepTx+0x150>)
 800caa4:	8a9b      	ldrh	r3, [r3, #20]
 800caa6:	3b02      	subs	r3, #2
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d901      	bls.n	800cab0 <isoDepTx+0x104>
    {
        return ERR_NOTSUPP;
 800caac:	2318      	movs	r3, #24
 800caae:	e021      	b.n	800caf4 <isoDepTx+0x148>
    }
        
    
    rfalCreateByteFlagsTxRxContext( ctx, txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 800cab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab2:	617b      	str	r3, [r7, #20]
 800cab4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	b29b      	uxth	r3, r3
 800caba:	833b      	strh	r3, [r7, #24]
 800cabc:	4b0f      	ldr	r3, [pc, #60]	; (800cafc <isoDepTx+0x150>)
 800cabe:	69db      	ldr	r3, [r3, #28]
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	4b0e      	ldr	r3, [pc, #56]	; (800cafc <isoDepTx+0x150>)
 800cac4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	b29b      	uxth	r3, r3
 800caca:	843b      	strh	r3, [r7, #32]
 800cacc:	4b0b      	ldr	r3, [pc, #44]	; (800cafc <isoDepTx+0x150>)
 800cace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad0:	627b      	str	r3, [r7, #36]	; 0x24
 800cad2:	2300      	movs	r3, #0
 800cad4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cad6:	4b09      	ldr	r3, [pc, #36]	; (800cafc <isoDepTx+0x150>)
 800cad8:	785b      	ldrb	r3, [r3, #1]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d001      	beq.n	800cae2 <isoDepTx+0x136>
 800cade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae0:	e001      	b.n	800cae6 <isoDepTx+0x13a>
 800cae2:	f04f 33ff 	mov.w	r3, #4294967295
 800cae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return rfalStartTransceive( &ctx );
 800cae8:	f107 0314 	add.w	r3, r7, #20
 800caec:	4618      	mov	r0, r3
 800caee:	f009 ffa1 	bl	8016a34 <rfalStartTransceive>
 800caf2:	4603      	mov	r3, r0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3738      	adds	r7, #56	; 0x38
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	20002aa8 	.word	0x20002aa8

0800cb00 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af02      	add	r7, sp, #8
 800cb06:	4603      	mov	r3, r0
 800cb08:	460a      	mov	r2, r1
 800cb0a:	71fb      	strb	r3, [r7, #7]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	73bb      	strb	r3, [r7, #14]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800cb14:	4b59      	ldr	r3, [pc, #356]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb16:	68da      	ldr	r2, [r3, #12]
 800cb18:	4b58      	ldr	r3, [pc, #352]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	60bb      	str	r3, [r7, #8]
    ST_MEMSET( gIsoDep.ctrlBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 800cb20:	2204      	movs	r2, #4
 800cb22:	2100      	movs	r1, #0
 800cb24:	4856      	ldr	r0, [pc, #344]	; (800cc80 <isoDepHandleControlMsg+0x180>)
 800cb26:	f00f f8eb 	bl	801bd00 <memset>
    
    switch( controlMsg )
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	f200 8094 	bhi.w	800cc5a <isoDepHandleControlMsg+0x15a>
 800cb32:	a201      	add	r2, pc, #4	; (adr r2, 800cb38 <isoDepHandleControlMsg+0x38>)
 800cb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb38:	0800cb49 	.word	0x0800cb49
 800cb3c:	0800cb75 	.word	0x0800cb75
 800cb40:	0800cbaf 	.word	0x0800cbaf
 800cb44:	0800cc27 	.word	0x0800cc27
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800cb48:	4b4c      	ldr	r3, [pc, #304]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb4a:	799b      	ldrb	r3, [r3, #6]
 800cb4c:	1c5a      	adds	r2, r3, #1
 800cb4e:	b2d1      	uxtb	r1, r2
 800cb50:	4a4a      	ldr	r2, [pc, #296]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb52:	7191      	strb	r1, [r2, #6]
 800cb54:	4a49      	ldr	r2, [pc, #292]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb56:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d901      	bls.n	800cb62 <isoDepHandleControlMsg+0x62>
            {
                return ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 800cb5e:	2304      	movs	r3, #4
 800cb60:	e088      	b.n	800cc74 <isoDepHandleControlMsg+0x174>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 800cb62:	4b46      	ldr	r3, [pc, #280]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb64:	789b      	ldrb	r3, [r3, #2]
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	f063 035d 	orn	r3, r3, #93	; 0x5d
 800cb70:	73fb      	strb	r3, [r7, #15]
            break;
 800cb72:	e074      	b.n	800cc5e <isoDepHandleControlMsg+0x15e>
            
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 800cb74:	4b41      	ldr	r3, [pc, #260]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb76:	799b      	ldrb	r3, [r3, #6]
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	b2d1      	uxtb	r1, r2
 800cb7c:	4a3f      	ldr	r2, [pc, #252]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb7e:	7191      	strb	r1, [r2, #6]
 800cb80:	4a3e      	ldr	r2, [pc, #248]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb82:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d806      	bhi.n	800cb98 <isoDepHandleControlMsg+0x98>
                ( gIsoDep.cntSWtxNack  >= gIsoDep.maxRetriesSnWTX )   )     /* Max number PICC is allowed to respond with S(WTX) to R(NAK) */
 800cb8a:	4b3c      	ldr	r3, [pc, #240]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb8c:	7a5a      	ldrb	r2, [r3, #9]
 800cb8e:	4b3b      	ldr	r3, [pc, #236]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d301      	bcc.n	800cb9c <isoDepHandleControlMsg+0x9c>
            {
                return ERR_TIMEOUT;
 800cb98:	2304      	movs	r3, #4
 800cb9a:	e06b      	b.n	800cc74 <isoDepHandleControlMsg+0x174>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );
 800cb9c:	4b37      	ldr	r3, [pc, #220]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cb9e:	789b      	ldrb	r3, [r3, #2]
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	f063 034d 	orn	r3, r3, #77	; 0x4d
 800cbaa:	73fb      	strb	r3, [r7, #15]
            break;
 800cbac:	e057      	b.n	800cc5e <isoDepHandleControlMsg+0x15e>
            
            
        /*******************************************************************************/
        case ISODEP_S_WTX:

            if( (gIsoDep.cntSWtxRetrys++ > gIsoDep.maxRetriesSWTX) && (gIsoDep.maxRetriesSWTX != RFAL_ISODEP_MAX_WTX_RETRYS_ULTD) )
 800cbae:	4b33      	ldr	r3, [pc, #204]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cbb0:	7a1b      	ldrb	r3, [r3, #8]
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	b2d1      	uxtb	r1, r2
 800cbb6:	4a31      	ldr	r2, [pc, #196]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cbb8:	7211      	strb	r1, [r2, #8]
 800cbba:	4a30      	ldr	r2, [pc, #192]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cbbc:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d906      	bls.n	800cbd2 <isoDepHandleControlMsg+0xd2>
 800cbc4:	4b2d      	ldr	r3, [pc, #180]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cbc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbca:	2bff      	cmp	r3, #255	; 0xff
 800cbcc:	d001      	beq.n	800cbd2 <isoDepHandleControlMsg+0xd2>
            {
                return ERR_PROTO;
 800cbce:	230b      	movs	r3, #11
 800cbd0:	e050      	b.n	800cc74 <isoDepHandleControlMsg+0x174>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 800cbd2:	79bb      	ldrb	r3, [r7, #6]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <isoDepHandleControlMsg+0xde>
 800cbd8:	79bb      	ldrb	r3, [r7, #6]
 800cbda:	2b3b      	cmp	r3, #59	; 0x3b
 800cbdc:	d901      	bls.n	800cbe2 <isoDepHandleControlMsg+0xe2>
            {
                return ERR_PROTO;
 800cbde:	230b      	movs	r3, #11
 800cbe0:	e048      	b.n	800cc74 <isoDepHandleControlMsg+0x174>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800cbe2:	4b26      	ldr	r3, [pc, #152]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cbe4:	785b      	ldrb	r3, [r3, #1]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d111      	bne.n	800cc0e <isoDepHandleControlMsg+0x10e>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 800cbea:	4b24      	ldr	r3, [pc, #144]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	79ba      	ldrb	r2, [r7, #6]
 800cbf0:	fb02 f303 	mul.w	r3, r2, r3
 800cbf4:	60bb      	str	r3, [r7, #8]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbfc:	bf28      	it	cs
 800cbfe:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 800cc02:	60bb      	str	r3, [r7, #8]
                fwtTemp += gIsoDep.dFwt;
 800cc04:	4b1d      	ldr	r3, [pc, #116]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	60bb      	str	r3, [r7, #8]
            }
            
            pcb = ISODEP_PCB_SWTX;
 800cc0e:	23f2      	movs	r3, #242	; 0xf2
 800cc10:	73fb      	strb	r3, [r7, #15]
            gIsoDep.ctrlBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	1c5a      	adds	r2, r3, #1
 800cc16:	73ba      	strb	r2, [r7, #14]
 800cc18:	3302      	adds	r3, #2
 800cc1a:	4a18      	ldr	r2, [pc, #96]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cc1c:	4413      	add	r3, r2
 800cc1e:	79ba      	ldrb	r2, [r7, #6]
 800cc20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            break;
 800cc24:	e01b      	b.n	800cc5e <isoDepHandleControlMsg+0x15e>
            
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            
            if( gIsoDep.cntSDslRetrys++ > gIsoDep.maxRetriesSDSL )
 800cc26:	4b15      	ldr	r3, [pc, #84]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cc28:	79db      	ldrb	r3, [r3, #7]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	b2d1      	uxtb	r1, r2
 800cc2e:	4a13      	ldr	r2, [pc, #76]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cc30:	71d1      	strb	r1, [r2, #7]
 800cc32:	4a12      	ldr	r2, [pc, #72]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cc34:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d901      	bls.n	800cc40 <isoDepHandleControlMsg+0x140>
            {
                return ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 800cc3c:	2304      	movs	r3, #4
 800cc3e:	e019      	b.n	800cc74 <isoDepHandleControlMsg+0x174>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800cc40:	4b0e      	ldr	r3, [pc, #56]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cc42:	785b      	ldrb	r3, [r3, #1]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d105      	bne.n	800cc54 <isoDepHandleControlMsg+0x154>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 800cc48:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 800cc4c:	60bb      	str	r3, [r7, #8]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 800cc4e:	4b0b      	ldr	r3, [pc, #44]	; (800cc7c <isoDepHandleControlMsg+0x17c>)
 800cc50:	2203      	movs	r2, #3
 800cc52:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 800cc54:	23c2      	movs	r3, #194	; 0xc2
 800cc56:	73fb      	strb	r3, [r7, #15]
            break;
 800cc58:	e001      	b.n	800cc5e <isoDepHandleControlMsg+0x15e>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 800cc5a:	230c      	movs	r3, #12
 800cc5c:	e00a      	b.n	800cc74 <isoDepHandleControlMsg+0x174>
    }
    
    return isoDepTx( pcb, gIsoDep.ctrlBuf, &gIsoDep.ctrlBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	7bf8      	ldrb	r0, [r7, #15]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	4a06      	ldr	r2, [pc, #24]	; (800cc84 <isoDepHandleControlMsg+0x184>)
 800cc6c:	4904      	ldr	r1, [pc, #16]	; (800cc80 <isoDepHandleControlMsg+0x180>)
 800cc6e:	f7ff fe9d 	bl	800c9ac <isoDepTx>
 800cc72:	4603      	mov	r3, r0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	20002aa8 	.word	0x20002aa8
 800cc80:	20002aee 	.word	0x20002aee
 800cc84:	20002af0 	.word	0x20002af0

0800cc88 <isoDepReSendControlMsg>:

#if RFAL_FEATURE_ISO_DEP_LISTEN
/*******************************************************************************/
static ReturnCode isoDepReSendControlMsg( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	af00      	add	r7, sp, #0
    if( isoDep_PCBisRACK( gIsoDep.lastPCB ) )
 800cc8c:	4b2a      	ldr	r3, [pc, #168]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800cc8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc92:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800cc96:	2ba2      	cmp	r3, #162	; 0xa2
 800cc98:	d10c      	bne.n	800ccb4 <isoDepReSendControlMsg+0x2c>
 800cc9a:	4b27      	ldr	r3, [pc, #156]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800cc9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cca0:	f003 0310 	and.w	r3, r3, #16
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d105      	bne.n	800ccb4 <isoDepReSendControlMsg+0x2c>
    {
        return isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM );
 800cca8:	2100      	movs	r1, #0
 800ccaa:	2000      	movs	r0, #0
 800ccac:	f7ff ff28 	bl	800cb00 <isoDepHandleControlMsg>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	e03f      	b.n	800cd34 <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 800ccb4:	4b20      	ldr	r3, [pc, #128]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800ccb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccba:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800ccbe:	2ba2      	cmp	r3, #162	; 0xa2
 800ccc0:	d10c      	bne.n	800ccdc <isoDepReSendControlMsg+0x54>
 800ccc2:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800ccc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccc8:	f003 0310 	and.w	r3, r3, #16
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <isoDepReSendControlMsg+0x54>
    {
        return isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM );
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	2001      	movs	r0, #1
 800ccd4:	f7ff ff14 	bl	800cb00 <isoDepHandleControlMsg>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	e02b      	b.n	800cd34 <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisSDeselect( gIsoDep.lastPCB ) )
 800ccdc:	4b16      	ldr	r3, [pc, #88]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800ccde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cce2:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800cce6:	2bc2      	cmp	r3, #194	; 0xc2
 800cce8:	d10c      	bne.n	800cd04 <isoDepReSendControlMsg+0x7c>
 800ccea:	4b13      	ldr	r3, [pc, #76]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800ccec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d105      	bne.n	800cd04 <isoDepReSendControlMsg+0x7c>
    {
        return isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	2003      	movs	r0, #3
 800ccfc:	f7ff ff00 	bl	800cb00 <isoDepHandleControlMsg>
 800cd00:	4603      	mov	r3, r0
 800cd02:	e017      	b.n	800cd34 <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisSWTX( gIsoDep.lastPCB ) )
 800cd04:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800cd06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd0a:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800cd0e:	2bc2      	cmp	r3, #194	; 0xc2
 800cd10:	d10f      	bne.n	800cd32 <isoDepReSendControlMsg+0xaa>
 800cd12:	4b09      	ldr	r3, [pc, #36]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800cd14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cd1c:	2b30      	cmp	r3, #48	; 0x30
 800cd1e:	d108      	bne.n	800cd32 <isoDepReSendControlMsg+0xaa>
    {
        return isoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM );
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <isoDepReSendControlMsg+0xb0>)
 800cd22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cd26:	4619      	mov	r1, r3
 800cd28:	2002      	movs	r0, #2
 800cd2a:	f7ff fee9 	bl	800cb00 <isoDepHandleControlMsg>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	e000      	b.n	800cd34 <isoDepReSendControlMsg+0xac>
    }
    return ERR_WRONG_STATE; 
 800cd32:	2321      	movs	r3, #33	; 0x21
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20002aa8 	.word	0x20002aa8

0800cd3c <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 800cd40:	4b39      	ldr	r3, [pc, #228]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 800cd46:	4b38      	ldr	r3, [pc, #224]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 800cd4c:	4b36      	ldr	r3, [pc, #216]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 800cd52:	4b35      	ldr	r3, [pc, #212]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd54:	22ff      	movs	r2, #255	; 0xff
 800cd56:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 800cd58:	4b33      	ldr	r3, [pc, #204]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 800cd5e:	4b32      	ldr	r3, [pc, #200]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	759a      	strb	r2, [r3, #22]
    gIsoDep.isRxChaining = false;
 800cd64:	4b30      	ldr	r3, [pc, #192]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	75da      	strb	r2, [r3, #23]
    gIsoDep.lastDID00    = false;
 800cd6a:	4b2f      	ldr	r3, [pc, #188]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 800cd72:	4b2d      	ldr	r3, [pc, #180]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd74:	2240      	movs	r2, #64	; 0x40
 800cd76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 800cd7a:	4b2b      	ldr	r3, [pc, #172]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd7c:	2210      	movs	r2, #16
 800cd7e:	829a      	strh	r2, [r3, #20]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 800cd80:	4b29      	ldr	r3, [pc, #164]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd82:	2210      	movs	r2, #16
 800cd84:	84da      	strh	r2, [r3, #38]	; 0x26
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 800cd86:	4b28      	ldr	r3, [pc, #160]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    
    gIsoDep.rxLen        = NULL;
 800cd8e:	4b26      	ldr	r3, [pc, #152]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	631a      	str	r2, [r3, #48]	; 0x30
    gIsoDep.rxBuf        = NULL;
 800cd94:	4b24      	ldr	r3, [pc, #144]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufInfPos  = 0U;
 800cd9a:	4b23      	ldr	r3, [pc, #140]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.txBufInfPos  = 0U;
 800cda2:	4b21      	ldr	r3, [pc, #132]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    gIsoDep.isTxPending  = false;
 800cdaa:	4b1f      	ldr	r3, [pc, #124]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    gIsoDep.isWait4WTX   = false;
 800cdb2:	4b1d      	ldr	r3, [pc, #116]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    gIsoDep.compMode         = RFAL_COMPLIANCE_MODE_NFC;
 800cdba:	4b1b      	ldr	r3, [pc, #108]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    gIsoDep.maxRetriesR      = RFAL_ISODEP_MAX_R_RETRYS;
 800cdc2:	4b19      	ldr	r3, [pc, #100]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdc4:	2203      	movs	r2, #3
 800cdc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesI      = RFAL_ISODEP_MAX_I_RETRYS;
 800cdca:	4b17      	ldr	r3, [pc, #92]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdcc:	2202      	movs	r2, #2
 800cdce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    gIsoDep.maxRetriesSDSL   = RFAL_ISODEP_MAX_DSL_RETRYS;
 800cdd2:	4b15      	ldr	r3, [pc, #84]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesSWTX   = RFAL_ISODEP_MAX_WTX_RETRYS;
 800cdda:	4b13      	ldr	r3, [pc, #76]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cddc:	2214      	movs	r2, #20
 800cdde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesSnWTX  = RFAL_ISODEP_MAX_WTX_NACK_RETRYS;
 800cde2:	4b11      	ldr	r3, [pc, #68]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cde4:	2203      	movs	r2, #3
 800cde6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gIsoDep.maxRetriesRATS   = RFAL_ISODEP_RATS_RETRIES;
 800cdea:	4b0f      	ldr	r3, [pc, #60]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    gIsoDep.APDURxPos       = 0;
 800cdf2:	4b0d      	ldr	r3, [pc, #52]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    gIsoDep.APDUTxPos       = 0;
 800cdfa:	4b0b      	ldr	r3, [pc, #44]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    gIsoDep.APDUParam.rxLen = NULL;
 800ce02:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    gIsoDep.APDUParam.rxBuf = NULL;
 800ce0a:	4b07      	ldr	r3, [pc, #28]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    gIsoDep.APDUParam.txBuf = NULL;
 800ce12:	4b05      	ldr	r3, [pc, #20]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    
    isoDepClearCounters();
 800ce1a:	f7ff fdaf 	bl	800c97c <isoDepClearCounters>
    
    /* Destroy any ongoing WTX timer */
    isoDepTimerDestroy( gIsoDep.WTXTimer );
    gIsoDep.WTXTimer = 0U;
 800ce1e:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <rfalIsoDepInitialize+0xec>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ce24:	bf00      	nop
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	20002aa8 	.word	0x20002aa8

0800ce2c <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 800ce2c:	b5b0      	push	{r4, r5, r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af02      	add	r7, sp, #8
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <isoDepDataExchangePCD+0x16>
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 800ce42:	2307      	movs	r3, #7
 800ce44:	e296      	b.n	800d374 <isoDepDataExchangePCD+0x548>
    }    
    
    *outIsChaining = false;
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 800ce4c:	4baa      	ldr	r3, [pc, #680]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 800ce54:	4ba8      	ldr	r3, [pc, #672]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce56:	78db      	ldrb	r3, [r3, #3]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <isoDepDataExchangePCD+0x40>
 800ce5c:	4ba6      	ldr	r3, [pc, #664]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce5e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ce62:	3301      	adds	r3, #1
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	4ba4      	ldr	r3, [pc, #656]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce68:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 800ce6c:	4ba2      	ldr	r3, [pc, #648]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce6e:	791b      	ldrb	r3, [r3, #4]
 800ce70:	2bff      	cmp	r3, #255	; 0xff
 800ce72:	d007      	beq.n	800ce84 <isoDepDataExchangePCD+0x58>
 800ce74:	4ba0      	ldr	r3, [pc, #640]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce76:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	4b9e      	ldr	r3, [pc, #632]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce80:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    
    /* Check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 800ce84:	4b9c      	ldr	r3, [pc, #624]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce86:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800ce8a:	4b9b      	ldr	r3, [pc, #620]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce8c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d307      	bcc.n	800cea4 <isoDepDataExchangePCD+0x78>
 800ce94:	4b98      	ldr	r3, [pc, #608]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce96:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800ce9a:	4b97      	ldr	r3, [pc, #604]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ce9c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d201      	bcs.n	800cea8 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 800cea4:	2307      	movs	r3, #7
 800cea6:	e265      	b.n	800d374 <isoDepDataExchangePCD+0x548>
    }
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 800cea8:	4b93      	ldr	r3, [pc, #588]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	f300 825f 	bgt.w	800d370 <isoDepDataExchangePCD+0x544>
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	da2d      	bge.n	800cf12 <isoDepDataExchangePCD+0xe6>
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <isoDepDataExchangePCD+0x94>
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d002      	beq.n	800cec4 <isoDepDataExchangePCD+0x98>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 800cebe:	e257      	b.n	800d370 <isoDepDataExchangePCD+0x544>
            return ERR_NONE;
 800cec0:	2300      	movs	r3, #0
 800cec2:	e257      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 800cec4:	4b8c      	ldr	r3, [pc, #560]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800cec6:	789b      	ldrb	r3, [r3, #2]
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	f043 0302 	orr.w	r3, r3, #2
 800ced2:	b2d8      	uxtb	r0, r3
 800ced4:	4b88      	ldr	r3, [pc, #544]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ced6:	6999      	ldr	r1, [r3, #24]
 800ced8:	4b87      	ldr	r3, [pc, #540]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	4a86      	ldr	r2, [pc, #536]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800cede:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800cee2:	189c      	adds	r4, r3, r2
 800cee4:	4b84      	ldr	r3, [pc, #528]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800cee6:	8c1d      	ldrh	r5, [r3, #32]
 800cee8:	4b83      	ldr	r3, [pc, #524]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	4b82      	ldr	r3, [pc, #520]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	4413      	add	r3, r2
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	462b      	mov	r3, r5
 800cef6:	4622      	mov	r2, r4
 800cef8:	f7ff fd58 	bl	800c9ac <isoDepTx>
 800cefc:	4603      	mov	r3, r0
 800cefe:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 800cf00:	89fb      	ldrh	r3, [r7, #14]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d103      	bne.n	800cf0e <isoDepDataExchangePCD+0xe2>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 800cf06:	4b7c      	ldr	r3, [pc, #496]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800cf08:	2202      	movs	r2, #2
 800cf0a:	701a      	strb	r2, [r3, #0]
                  break;
 800cf0c:	e001      	b.n	800cf12 <isoDepDataExchangePCD+0xe6>
                  return ret;
 800cf0e:	89fb      	ldrh	r3, [r7, #14]
 800cf10:	e230      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            ret = rfalGetTransceiveStatus();
 800cf12:	f009 ffbf 	bl	8016e94 <rfalGetTransceiveStatus>
 800cf16:	4603      	mov	r3, r0
 800cf18:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 800cf1a:	89fb      	ldrh	r3, [r7, #14]
 800cf1c:	2b28      	cmp	r3, #40	; 0x28
 800cf1e:	f200 8082 	bhi.w	800d026 <isoDepDataExchangePCD+0x1fa>
 800cf22:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <isoDepDataExchangePCD+0xfc>)
 800cf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf28:	0800d02b 	.word	0x0800d02b
 800cf2c:	0800d027 	.word	0x0800d027
 800cf30:	0800d023 	.word	0x0800d023
 800cf34:	0800d027 	.word	0x0800d027
 800cf38:	0800cfcd 	.word	0x0800cfcd
 800cf3c:	0800d027 	.word	0x0800d027
 800cf40:	0800d027 	.word	0x0800d027
 800cf44:	0800d027 	.word	0x0800d027
 800cf48:	0800d027 	.word	0x0800d027
 800cf4c:	0800cfcd 	.word	0x0800cfcd
 800cf50:	0800d027 	.word	0x0800d027
 800cf54:	0800d027 	.word	0x0800d027
 800cf58:	0800d027 	.word	0x0800d027
 800cf5c:	0800d027 	.word	0x0800d027
 800cf60:	0800d027 	.word	0x0800d027
 800cf64:	0800d027 	.word	0x0800d027
 800cf68:	0800d027 	.word	0x0800d027
 800cf6c:	0800d027 	.word	0x0800d027
 800cf70:	0800d027 	.word	0x0800d027
 800cf74:	0800d027 	.word	0x0800d027
 800cf78:	0800d027 	.word	0x0800d027
 800cf7c:	0800cfcd 	.word	0x0800cfcd
 800cf80:	0800d027 	.word	0x0800d027
 800cf84:	0800d027 	.word	0x0800d027
 800cf88:	0800d027 	.word	0x0800d027
 800cf8c:	0800d027 	.word	0x0800d027
 800cf90:	0800d027 	.word	0x0800d027
 800cf94:	0800cfcd 	.word	0x0800cfcd
 800cf98:	0800d027 	.word	0x0800d027
 800cf9c:	0800d027 	.word	0x0800d027
 800cfa0:	0800d027 	.word	0x0800d027
 800cfa4:	0800d027 	.word	0x0800d027
 800cfa8:	0800d027 	.word	0x0800d027
 800cfac:	0800d027 	.word	0x0800d027
 800cfb0:	0800d027 	.word	0x0800d027
 800cfb4:	0800d027 	.word	0x0800d027
 800cfb8:	0800d027 	.word	0x0800d027
 800cfbc:	0800d027 	.word	0x0800d027
 800cfc0:	0800d027 	.word	0x0800d027
 800cfc4:	0800d027 	.word	0x0800d027
 800cfc8:	0800cfcd 	.word	0x0800cfcd
                    if( gIsoDep.isRxChaining )
 800cfcc:	4b4a      	ldr	r3, [pc, #296]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800cfce:	7ddb      	ldrb	r3, [r3, #23]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00a      	beq.n	800cfea <isoDepDataExchangePCD+0x1be>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	f7ff fd92 	bl	800cb00 <isoDepHandleControlMsg>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	81fb      	strh	r3, [r7, #14]
 800cfe0:	89fb      	ldrh	r3, [r7, #14]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d01b      	beq.n	800d01e <isoDepDataExchangePCD+0x1f2>
 800cfe6:	89fb      	ldrh	r3, [r7, #14]
 800cfe8:	e1c4      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800cfea:	4b43      	ldr	r3, [pc, #268]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d10a      	bne.n	800d008 <isoDepDataExchangePCD+0x1dc>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800cff2:	2100      	movs	r1, #0
 800cff4:	2003      	movs	r0, #3
 800cff6:	f7ff fd83 	bl	800cb00 <isoDepHandleControlMsg>
 800cffa:	4603      	mov	r3, r0
 800cffc:	81fb      	strh	r3, [r7, #14]
 800cffe:	89fb      	ldrh	r3, [r7, #14]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00c      	beq.n	800d01e <isoDepDataExchangePCD+0x1f2>
 800d004:	89fb      	ldrh	r3, [r7, #14]
 800d006:	e1b5      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800d008:	2100      	movs	r1, #0
 800d00a:	2001      	movs	r0, #1
 800d00c:	f7ff fd78 	bl	800cb00 <isoDepHandleControlMsg>
 800d010:	4603      	mov	r3, r0
 800d012:	81fb      	strh	r3, [r7, #14]
 800d014:	89fb      	ldrh	r3, [r7, #14]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <isoDepDataExchangePCD+0x1f2>
 800d01a:	89fb      	ldrh	r3, [r7, #14]
 800d01c:	e1aa      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 800d01e:	2302      	movs	r3, #2
 800d020:	e1a8      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;  /* Debug purposes */
 800d022:	2302      	movs	r3, #2
 800d024:	e1a6      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    return ret;
 800d026:	89fb      	ldrh	r3, [r7, #14]
 800d028:	e1a4      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    break;
 800d02a:	bf00      	nop
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	3307      	adds	r3, #7
 800d032:	08db      	lsrs	r3, r3, #3
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	801a      	strh	r2, [r3, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	881a      	ldrh	r2, [r3, #0]
 800d03e:	4b2e      	ldr	r3, [pc, #184]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d040:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d044:	b29b      	uxth	r3, r3
 800d046:	429a      	cmp	r2, r3
 800d048:	d305      	bcc.n	800d056 <isoDepDataExchangePCD+0x22a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	881a      	ldrh	r2, [r3, #0]
 800d04e:	4b2a      	ldr	r3, [pc, #168]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d052:	429a      	cmp	r2, r3
 800d054:	d301      	bcc.n	800d05a <isoDepDataExchangePCD+0x22e>
                return ERR_PROTO;
 800d056:	230b      	movs	r3, #11
 800d058:	e18c      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800d05a:	4b27      	ldr	r3, [pc, #156]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	737b      	strb	r3, [r7, #13]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 800d062:	4b25      	ldr	r3, [pc, #148]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d10b      	bne.n	800d084 <isoDepDataExchangePCD+0x258>
 800d06c:	7b7b      	ldrb	r3, [r7, #13]
 800d06e:	f003 0308 	and.w	r3, r3, #8
 800d072:	2b00      	cmp	r3, #0
 800d074:	d104      	bne.n	800d080 <isoDepDataExchangePCD+0x254>
 800d076:	7b7b      	ldrb	r3, [r7, #13]
 800d078:	f003 0304 	and.w	r3, r3, #4
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <isoDepDataExchangePCD+0x258>
                return ERR_PROTO;
 800d080:	230b      	movs	r3, #11
 800d082:	e177      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 800d084:	4b1c      	ldr	r3, [pc, #112]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d086:	78db      	ldrb	r3, [r3, #3]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00e      	beq.n	800d0aa <isoDepDataExchangePCD+0x27e>
 800d08c:	7b7b      	ldrb	r3, [r7, #13]
 800d08e:	f003 0308 	and.w	r3, r3, #8
 800d092:	2b00      	cmp	r3, #0
 800d094:	d007      	beq.n	800d0a6 <isoDepDataExchangePCD+0x27a>
 800d096:	4b18      	ldr	r3, [pc, #96]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d098:	78da      	ldrb	r2, [r3, #3]
 800d09a:	4b17      	ldr	r3, [pc, #92]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d09c:	69db      	ldr	r3, [r3, #28]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d001      	beq.n	800d0aa <isoDepDataExchangePCD+0x27e>
                return ERR_PROTO;
 800d0a6:	230b      	movs	r3, #11
 800d0a8:	e164      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            if( isoDep_PCBisSBlock(rxPCB) )
 800d0aa:	7b7b      	ldrb	r3, [r7, #13]
 800d0ac:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800d0b0:	2bc2      	cmp	r3, #194	; 0xc2
 800d0b2:	d151      	bne.n	800d158 <isoDepDataExchangePCD+0x32c>
                if( isoDep_PCBisSWTX(rxPCB) )
 800d0b4:	7b7b      	ldrb	r3, [r7, #13]
 800d0b6:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800d0ba:	2bc2      	cmp	r3, #194	; 0xc2
 800d0bc:	d138      	bne.n	800d130 <isoDepDataExchangePCD+0x304>
 800d0be:	7b7b      	ldrb	r3, [r7, #13]
 800d0c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d0c4:	2b30      	cmp	r3, #48	; 0x30
 800d0c6:	d133      	bne.n	800d130 <isoDepDataExchangePCD+0x304>
                    if( isoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 800d0c8:	4b0b      	ldr	r3, [pc, #44]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ce:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800d0d2:	2ba2      	cmp	r3, #162	; 0xa2
 800d0d4:	d112      	bne.n	800d0fc <isoDepDataExchangePCD+0x2d0>
 800d0d6:	4b08      	ldr	r3, [pc, #32]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0dc:	f003 0310 	and.w	r3, r3, #16
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00b      	beq.n	800d0fc <isoDepDataExchangePCD+0x2d0>
                        gIsoDep.cntSWtxNack++;        /* Count S(WTX) upon R(NAK) */
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d0e6:	7a5b      	ldrb	r3, [r3, #9]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	4b02      	ldr	r3, [pc, #8]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d0ee:	725a      	strb	r2, [r3, #9]
                        gIsoDep.cntRRetrys = 0;       /* Reset R-Block counter has PICC has responded */
 800d0f0:	4b01      	ldr	r3, [pc, #4]	; (800d0f8 <isoDepDataExchangePCD+0x2cc>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	719a      	strb	r2, [r3, #6]
 800d0f6:	e004      	b.n	800d102 <isoDepDataExchangePCD+0x2d6>
 800d0f8:	20002aa8 	.word	0x20002aa8
                        gIsoDep.cntSWtxNack = 0;       /* Reset R(NACK)->S(WTX) counter */
 800d0fc:	4b9f      	ldr	r3, [pc, #636]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d0fe:	2200      	movs	r2, #0
 800d100:	725a      	strb	r2, [r3, #9]
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 800d102:	4b9e      	ldr	r3, [pc, #632]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	4a9d      	ldr	r2, [pc, #628]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d108:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d10c:	4413      	add	r3, r2
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d114:	b2db      	uxtb	r3, r3
 800d116:	4619      	mov	r1, r3
 800d118:	2002      	movs	r0, #2
 800d11a:	f7ff fcf1 	bl	800cb00 <isoDepHandleControlMsg>
 800d11e:	4603      	mov	r3, r0
 800d120:	81fb      	strh	r3, [r7, #14]
 800d122:	89fb      	ldrh	r3, [r7, #14]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <isoDepDataExchangePCD+0x300>
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	e123      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 800d12c:	2302      	movs	r3, #2
 800d12e:	e121      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                if( isoDep_PCBisSDeselect(rxPCB) )
 800d130:	7b7b      	ldrb	r3, [r7, #13]
 800d132:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800d136:	2bc2      	cmp	r3, #194	; 0xc2
 800d138:	d10c      	bne.n	800d154 <isoDepDataExchangePCD+0x328>
 800d13a:	7b7b      	ldrb	r3, [r7, #13]
 800d13c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d140:	2b00      	cmp	r3, #0
 800d142:	d107      	bne.n	800d154 <isoDepDataExchangePCD+0x328>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800d144:	4b8d      	ldr	r3, [pc, #564]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	2b03      	cmp	r3, #3
 800d14a:	d103      	bne.n	800d154 <isoDepDataExchangePCD+0x328>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 800d14c:	f7ff fdf6 	bl	800cd3c <rfalIsoDepInitialize>
                        return ERR_NONE;
 800d150:	2300      	movs	r3, #0
 800d152:	e10f      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                return ERR_PROTO;
 800d154:	230b      	movs	r3, #11
 800d156:	e10d      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            else if( isoDep_PCBisRBlock(rxPCB) )
 800d158:	7b7b      	ldrb	r3, [r7, #13]
 800d15a:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800d15e:	2ba2      	cmp	r3, #162	; 0xa2
 800d160:	d141      	bne.n	800d1e6 <isoDepDataExchangePCD+0x3ba>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 800d162:	7b7b      	ldrb	r3, [r7, #13]
 800d164:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800d168:	2ba2      	cmp	r3, #162	; 0xa2
 800d16a:	d13a      	bne.n	800d1e2 <isoDepDataExchangePCD+0x3b6>
 800d16c:	7b7b      	ldrb	r3, [r7, #13]
 800d16e:	f003 0310 	and.w	r3, r3, #16
 800d172:	2b00      	cmp	r3, #0
 800d174:	d135      	bne.n	800d1e2 <isoDepDataExchangePCD+0x3b6>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 800d176:	7b7b      	ldrb	r3, [r7, #13]
 800d178:	f003 0301 	and.w	r3, r3, #1
 800d17c:	4a7f      	ldr	r2, [pc, #508]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d17e:	7892      	ldrb	r2, [r2, #2]
 800d180:	4293      	cmp	r3, r2
 800d182:	d119      	bne.n	800d1b8 <isoDepDataExchangePCD+0x38c>
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 800d184:	4b7d      	ldr	r3, [pc, #500]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d186:	789b      	ldrb	r3, [r3, #2]
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	bf0c      	ite	eq
 800d192:	2301      	moveq	r3, #1
 800d194:	2300      	movne	r3, #0
 800d196:	b2db      	uxtb	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	4b78      	ldr	r3, [pc, #480]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d19c:	709a      	strb	r2, [r3, #2]
                        if( !gIsoDep.isTxChaining )
 800d19e:	4b77      	ldr	r3, [pc, #476]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d1a0:	7d9b      	ldrb	r3, [r3, #22]
 800d1a2:	f083 0301 	eor.w	r3, r3, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <isoDepDataExchangePCD+0x384>
                            return ERR_PROTO;
 800d1ac:	230b      	movs	r3, #11
 800d1ae:	e0e1      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                        isoDepClearCounters();
 800d1b0:	f7ff fbe4 	bl	800c97c <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	e0dd      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 800d1b8:	4b70      	ldr	r3, [pc, #448]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d1ba:	795b      	ldrb	r3, [r3, #5]
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	b2d1      	uxtb	r1, r2
 800d1c0:	4a6e      	ldr	r2, [pc, #440]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d1c2:	7151      	strb	r1, [r2, #5]
 800d1c4:	4a6d      	ldr	r2, [pc, #436]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d1c6:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d207      	bcs.n	800d1de <isoDepDataExchangePCD+0x3b2>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 800d1ce:	4b6b      	ldr	r3, [pc, #428]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 800d1d4:	4b69      	ldr	r3, [pc, #420]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 800d1da:	2302      	movs	r3, #2
 800d1dc:	e0ca      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                        return ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 800d1de:	2304      	movs	r3, #4
 800d1e0:	e0c8      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    return ERR_PROTO;
 800d1e2:	230b      	movs	r3, #11
 800d1e4:	e0c6      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            else if( isoDep_PCBisIBlock(rxPCB) )
 800d1e6:	7b7b      	ldrb	r3, [r7, #13]
 800d1e8:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	f040 80bd 	bne.w	800d36c <isoDepDataExchangePCD+0x540>
                if( isoDep_PCBisChaining(rxPCB) )
 800d1f2:	7b7b      	ldrb	r3, [r7, #13]
 800d1f4:	f003 0310 	and.w	r3, r3, #16
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d05e      	beq.n	800d2ba <isoDepDataExchangePCD+0x48e>
                    gIsoDep.isRxChaining = true;
 800d1fc:	4b5f      	ldr	r3, [pc, #380]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d1fe:	2201      	movs	r2, #1
 800d200:	75da      	strb	r2, [r3, #23]
                    *outIsChaining       = true;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2201      	movs	r2, #1
 800d206:	701a      	strb	r2, [r3, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800d208:	7b7b      	ldrb	r3, [r7, #13]
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	4a5b      	ldr	r2, [pc, #364]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d210:	7892      	ldrb	r2, [r2, #2]
 800d212:	4293      	cmp	r3, r2
 800d214:	d144      	bne.n	800d2a0 <isoDepDataExchangePCD+0x474>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 800d216:	4b59      	ldr	r3, [pc, #356]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d218:	789b      	ldrb	r3, [r3, #2]
 800d21a:	f003 0301 	and.w	r3, r3, #1
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	2b00      	cmp	r3, #0
 800d222:	bf0c      	ite	eq
 800d224:	2301      	moveq	r3, #1
 800d226:	2300      	movne	r3, #0
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	461a      	mov	r2, r3
 800d22c:	4b53      	ldr	r3, [pc, #332]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d22e:	709a      	strb	r2, [r3, #2]
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 800d230:	f7ff fba4 	bl	800c97c <isoDepClearCounters>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800d234:	2100      	movs	r1, #0
 800d236:	2000      	movs	r0, #0
 800d238:	f7ff fc62 	bl	800cb00 <isoDepHandleControlMsg>
 800d23c:	4603      	mov	r3, r0
 800d23e:	81fb      	strh	r3, [r7, #14]
 800d240:	89fb      	ldrh	r3, [r7, #14]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d001      	beq.n	800d24a <isoDepDataExchangePCD+0x41e>
 800d246:	89fb      	ldrh	r3, [r7, #14]
 800d248:	e094      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                        *outActRxLen -= gIsoDep.hdrLen;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	881a      	ldrh	r2, [r3, #0]
 800d24e:	4b4b      	ldr	r3, [pc, #300]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d250:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d254:	b29b      	uxth	r3, r3
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	b29a      	uxth	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800d25e:	4b47      	ldr	r3, [pc, #284]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d260:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d264:	4b45      	ldr	r3, [pc, #276]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d266:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d014      	beq.n	800d298 <isoDepDataExchangePCD+0x46c>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d010      	beq.n	800d298 <isoDepDataExchangePCD+0x46c>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800d276:	4b41      	ldr	r3, [pc, #260]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d278:	69db      	ldr	r3, [r3, #28]
 800d27a:	4a40      	ldr	r2, [pc, #256]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d27c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d280:	1898      	adds	r0, r3, r2
 800d282:	4b3e      	ldr	r3, [pc, #248]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d284:	69db      	ldr	r3, [r3, #28]
 800d286:	4a3d      	ldr	r2, [pc, #244]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d288:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d28c:	1899      	adds	r1, r3, r2
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	461a      	mov	r2, r3
 800d294:	f00e fd1a 	bl	801bccc <memmove>
                        isoDepClearCounters();
 800d298:	f7ff fb70 	bl	800c97c <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 800d29c:	230d      	movs	r3, #13
 800d29e:	e069      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	f7ff fc2c 	bl	800cb00 <isoDepHandleControlMsg>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	81fb      	strh	r3, [r7, #14]
 800d2ac:	89fb      	ldrh	r3, [r7, #14]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <isoDepDataExchangePCD+0x48a>
 800d2b2:	89fb      	ldrh	r3, [r7, #14]
 800d2b4:	e05e      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	e05c      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 800d2ba:	4b30      	ldr	r3, [pc, #192]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	75da      	strb	r2, [r3, #23]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800d2c0:	7b7b      	ldrb	r3, [r7, #13]
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	4a2d      	ldr	r2, [pc, #180]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d2c8:	7892      	ldrb	r2, [r2, #2]
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d13a      	bne.n	800d344 <isoDepDataExchangePCD+0x518>
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 800d2ce:	4b2b      	ldr	r3, [pc, #172]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d2d0:	789b      	ldrb	r3, [r3, #2]
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	bf0c      	ite	eq
 800d2dc:	2301      	moveq	r3, #1
 800d2de:	2300      	movne	r3, #0
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	4b25      	ldr	r3, [pc, #148]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d2e6:	709a      	strb	r2, [r3, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	881a      	ldrh	r2, [r3, #0]
 800d2ec:	4b23      	ldr	r3, [pc, #140]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d2ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800d2fc:	4b1f      	ldr	r3, [pc, #124]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d2fe:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d302:	4b1e      	ldr	r3, [pc, #120]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d304:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d308:	429a      	cmp	r2, r3
 800d30a:	d014      	beq.n	800d336 <isoDepDataExchangePCD+0x50a>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d010      	beq.n	800d336 <isoDepDataExchangePCD+0x50a>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800d314:	4b19      	ldr	r3, [pc, #100]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d316:	69db      	ldr	r3, [r3, #28]
 800d318:	4a18      	ldr	r2, [pc, #96]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d31a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d31e:	1898      	adds	r0, r3, r2
 800d320:	4b16      	ldr	r3, [pc, #88]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	4a15      	ldr	r2, [pc, #84]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d326:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d32a:	1899      	adds	r1, r3, r2
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	f00e fccb 	bl	801bccc <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 800d336:	4b11      	ldr	r3, [pc, #68]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d338:	2200      	movs	r2, #0
 800d33a:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 800d33c:	f7ff fb1e 	bl	800c97c <isoDepClearCounters>
                    return ERR_NONE;
 800d340:	2300      	movs	r3, #0
 800d342:	e017      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 800d344:	4b0d      	ldr	r3, [pc, #52]	; (800d37c <isoDepDataExchangePCD+0x550>)
 800d346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d001      	beq.n	800d352 <isoDepDataExchangePCD+0x526>
                        return ERR_PROTO;
 800d34e:	230b      	movs	r3, #11
 800d350:	e010      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800d352:	2100      	movs	r1, #0
 800d354:	2001      	movs	r0, #1
 800d356:	f7ff fbd3 	bl	800cb00 <isoDepHandleControlMsg>
 800d35a:	4603      	mov	r3, r0
 800d35c:	81fb      	strh	r3, [r7, #14]
 800d35e:	89fb      	ldrh	r3, [r7, #14]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <isoDepDataExchangePCD+0x53c>
 800d364:	89fb      	ldrh	r3, [r7, #14]
 800d366:	e005      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 800d368:	2302      	movs	r3, #2
 800d36a:	e003      	b.n	800d374 <isoDepDataExchangePCD+0x548>
                return ERR_PROTO;
 800d36c:	230b      	movs	r3, #11
 800d36e:	e001      	b.n	800d374 <isoDepDataExchangePCD+0x548>
            break;
 800d370:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 800d372:	230c      	movs	r3, #12
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bdb0      	pop	{r4, r5, r7, pc}
 800d37c:	20002aa8 	.word	0x20002aa8

0800d380 <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Using local static vars and static config to cope with a Deselect after     *
     * RATS\ATTRIB without any I-Block exchanged                                   */
    gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 800d386:	4b1f      	ldr	r3, [pc, #124]	; (800d404 <rfalIsoDepDeselect+0x84>)
 800d388:	4a1f      	ldr	r2, [pc, #124]	; (800d408 <rfalIsoDepDeselect+0x88>)
 800d38a:	631a      	str	r2, [r3, #48]	; 0x30
    gIsoDep.rxBuf       = gIsoDep.ctrlBuf;
 800d38c:	4b1d      	ldr	r3, [pc, #116]	; (800d404 <rfalIsoDepDeselect+0x84>)
 800d38e:	4a1f      	ldr	r2, [pc, #124]	; (800d40c <rfalIsoDepDeselect+0x8c>)
 800d390:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN - (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800d392:	4b1c      	ldr	r3, [pc, #112]	; (800d404 <rfalIsoDepDeselect+0x84>)
 800d394:	2202      	movs	r2, #2
 800d396:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800d398:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <rfalIsoDepDeselect+0x84>)
 800d39a:	2202      	movs	r2, #2
 800d39c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800d3a0:	4b18      	ldr	r3, [pc, #96]	; (800d404 <rfalIsoDepDeselect+0x84>)
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 800d3a8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800d3ac:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	2003      	movs	r0, #3
 800d3b2:	f7ff fba5 	bl	800cb00 <isoDepHandleControlMsg>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	807b      	strh	r3, [r7, #2]
 800d3ba:	887b      	ldrh	r3, [r7, #2]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <rfalIsoDepDeselect+0x44>
 800d3c0:	887b      	ldrh	r3, [r7, #2]
 800d3c2:	e01a      	b.n	800d3fa <rfalIsoDepDeselect+0x7a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 800d3c4:	4b0f      	ldr	r3, [pc, #60]	; (800d404 <rfalIsoDepDeselect+0x84>)
 800d3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c8:	1c7a      	adds	r2, r7, #1
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff fd2d 	bl	800ce2c <isoDepDataExchangePCD>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 800d3d6:	f009 fd6d 	bl	8016eb4 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	1e5a      	subs	r2, r3, #1
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d002      	beq.n	800d3ea <rfalIsoDepDeselect+0x6a>
 800d3e4:	887b      	ldrh	r3, [r7, #2]
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d0ec      	beq.n	800d3c4 <rfalIsoDepDeselect+0x44>
        
    rfalIsoDepInitialize();
 800d3ea:	f7ff fca7 	bl	800cd3c <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <rfalIsoDepDeselect+0x78>
 800d3f4:	887b      	ldrh	r3, [r7, #2]
 800d3f6:	e000      	b.n	800d3fa <rfalIsoDepDeselect+0x7a>
 800d3f8:	2304      	movs	r3, #4
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20002aa8 	.word	0x20002aa8
 800d408:	20002af2 	.word	0x20002af2
 800d40c:	20002aee 	.word	0x20002aee

0800d410 <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	4603      	mov	r3, r0
 800d418:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 800d41a:	79fb      	ldrb	r3, [r7, #7]
 800d41c:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
 800d420:	2b0e      	cmp	r3, #14
 800d422:	d901      	bls.n	800d428 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 800d424:	2304      	movs	r3, #4
 800d426:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 800d428:	7bfb      	ldrb	r3, [r7, #15]
 800d42a:	330c      	adds	r3, #12
 800d42c:	2201      	movs	r2, #1
 800d42e:	fa02 f303 	lsl.w	r3, r2, r3
 800d432:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d43a:	bf28      	it	cs
 800d43c:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 800d440:	60bb      	str	r3, [r7, #8]
    
    return result;
 800d442:	68bb      	ldr	r3, [r7, #8]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	bc80      	pop	{r7}
 800d44c:	4770      	bx	lr
	...

0800d450 <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 800d45a:	4b33      	ldr	r3, [pc, #204]	; (800d528 <rfalIsoDepFSxI2FSx+0xd8>)
 800d45c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d460:	2b01      	cmp	r3, #1
 800d462:	d105      	bne.n	800d470 <rfalIsoDepFSxI2FSx+0x20>
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	2b0c      	cmp	r3, #12
 800d468:	bf28      	it	cs
 800d46a:	230c      	movcs	r3, #12
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	e004      	b.n	800d47a <rfalIsoDepFSxI2FSx+0x2a>
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	2b08      	cmp	r3, #8
 800d474:	bf28      	it	cs
 800d476:	2308      	movcs	r3, #8
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 800d47c:	7b7b      	ldrb	r3, [r7, #13]
 800d47e:	2b0c      	cmp	r3, #12
 800d480:	d848      	bhi.n	800d514 <rfalIsoDepFSxI2FSx+0xc4>
 800d482:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <rfalIsoDepFSxI2FSx+0x38>)
 800d484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d488:	0800d4bd 	.word	0x0800d4bd
 800d48c:	0800d4c3 	.word	0x0800d4c3
 800d490:	0800d4c9 	.word	0x0800d4c9
 800d494:	0800d4cf 	.word	0x0800d4cf
 800d498:	0800d4d5 	.word	0x0800d4d5
 800d49c:	0800d4db 	.word	0x0800d4db
 800d4a0:	0800d4e1 	.word	0x0800d4e1
 800d4a4:	0800d4e7 	.word	0x0800d4e7
 800d4a8:	0800d4ed 	.word	0x0800d4ed
 800d4ac:	0800d4f5 	.word	0x0800d4f5
 800d4b0:	0800d4fd 	.word	0x0800d4fd
 800d4b4:	0800d505 	.word	0x0800d505
 800d4b8:	0800d50d 	.word	0x0800d50d
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 800d4bc:	2310      	movs	r3, #16
 800d4be:	81fb      	strh	r3, [r7, #14]
 800d4c0:	e02c      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 800d4c2:	2318      	movs	r3, #24
 800d4c4:	81fb      	strh	r3, [r7, #14]
 800d4c6:	e029      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 800d4c8:	2320      	movs	r3, #32
 800d4ca:	81fb      	strh	r3, [r7, #14]
 800d4cc:	e026      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 800d4ce:	2328      	movs	r3, #40	; 0x28
 800d4d0:	81fb      	strh	r3, [r7, #14]
 800d4d2:	e023      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 800d4d4:	2330      	movs	r3, #48	; 0x30
 800d4d6:	81fb      	strh	r3, [r7, #14]
 800d4d8:	e020      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 800d4da:	2340      	movs	r3, #64	; 0x40
 800d4dc:	81fb      	strh	r3, [r7, #14]
 800d4de:	e01d      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 800d4e0:	2360      	movs	r3, #96	; 0x60
 800d4e2:	81fb      	strh	r3, [r7, #14]
 800d4e4:	e01a      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 800d4e6:	2380      	movs	r3, #128	; 0x80
 800d4e8:	81fb      	strh	r3, [r7, #14]
 800d4ea:	e017      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 800d4ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4f0:	81fb      	strh	r3, [r7, #14]
 800d4f2:	e013      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 800d4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4f8:	81fb      	strh	r3, [r7, #14]
 800d4fa:	e00f      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 800d4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d500:	81fb      	strh	r3, [r7, #14]
 800d502:	e00b      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 800d504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d508:	81fb      	strh	r3, [r7, #14]
 800d50a:	e007      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 800d50c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d510:	81fb      	strh	r3, [r7, #14]
 800d512:	e003      	b.n	800d51c <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 800d514:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d518:	81fb      	strh	r3, [r7, #14]
 800d51a:	bf00      	nop
    }
    return fsx;
 800d51c:	89fb      	ldrh	r3, [r7, #14]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3714      	adds	r7, #20
 800d522:	46bd      	mov	sp, r7
 800d524:	bc80      	pop	{r7}
 800d526:	4770      	bx	lr
 800d528:	20002aa8 	.word	0x20002aa8

0800d52c <rfalIsoDepIsRats>:

#if RFAL_FEATURE_ISO_DEP_LISTEN

/*******************************************************************************/
bool rfalIsoDepIsRats( const uint8_t *buf, uint8_t bufLen )
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	460b      	mov	r3, r1
 800d536:	70fb      	strb	r3, [r7, #3]
    if(buf != NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d008      	beq.n	800d550 <rfalIsoDepIsRats+0x24>
    {
        if ((RFAL_ISODEP_CMD_RATS == (uint8_t)*buf) && (sizeof(rfalIsoDepRats) == bufLen))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2be0      	cmp	r3, #224	; 0xe0
 800d544:	d104      	bne.n	800d550 <rfalIsoDepIsRats+0x24>
 800d546:	78fb      	ldrb	r3, [r7, #3]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d101      	bne.n	800d550 <rfalIsoDepIsRats+0x24>
        {
            return true;
 800d54c:	2301      	movs	r3, #1
 800d54e:	e000      	b.n	800d552 <rfalIsoDepIsRats+0x26>
        }
    }
    return false;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	bc80      	pop	{r7}
 800d55a:	4770      	bx	lr

0800d55c <rfalIsoDepListenStartActivation>:



/*******************************************************************************/
ReturnCode rfalIsoDepListenStartActivation( rfalIsoDepAtsParam *atsParam, const rfalIsoDepAttribResParam *attribResParam, const uint8_t *buf, uint16_t bufLen, rfalIsoDepListenActvParam actParam)
{
 800d55c:	b590      	push	{r4, r7, lr}
 800d55e:	b08d      	sub	sp, #52	; 0x34
 800d560:	af04      	add	r7, sp, #16
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
 800d568:	807b      	strh	r3, [r7, #2]
    uint8_t *txBuf;
    uint8_t bufIt;
    const uint8_t *buffer = buf;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	61bb      	str	r3, [r7, #24]
    
    /*******************************************************************************/
    bufIt        = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	77fb      	strb	r3, [r7, #31]
    txBuf        = (uint8_t*)actParam.rxBuf;      /* Use the rxBuf as TxBuf as well, the struct enforces a size enough MAX( NFCA_ATS_MAX_LEN, NFCB_ATTRIB_RES_MAX_LEN ) */
 800d572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d574:	617b      	str	r3, [r7, #20]
    gIsoDep.txBR = RFAL_BR_106;
 800d576:	4ba1      	ldr	r3, [pc, #644]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBR = RFAL_BR_106;
 800d57e:	4b9f      	ldr	r3, [pc, #636]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d580:	2200      	movs	r2, #0
 800d582:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        
    /* Check for a valid buffer pointer */
    if( buffer == NULL )
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <rfalIsoDepListenStartActivation+0x34>
    {
        return ERR_PARAM;
 800d58c:	2307      	movs	r3, #7
 800d58e:	e131      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
    }
    
    /*******************************************************************************/
    if( *buffer == RFAL_ISODEP_CMD_RATS )
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2be0      	cmp	r3, #224	; 0xe0
 800d596:	f040 80f3 	bne.w	800d780 <rfalIsoDepListenStartActivation+0x224>
    {
        /* Check ATS parameters */
        if( atsParam == NULL )
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <rfalIsoDepListenStartActivation+0x48>
        {
            return ERR_PARAM;
 800d5a0:	2307      	movs	r3, #7
 800d5a2:	e127      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* If requested copy RATS to device info */
        if( actParam.isoDepDev != NULL )
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d005      	beq.n	800d5b6 <rfalIsoDepListenStartActivation+0x5a>
        {
            ST_MEMCPY( (uint8_t*)&actParam.isoDepDev->activation.A.Poller.RATS, buffer, sizeof(rfalIsoDepRats) );	/* Copy RATS' CMD + PARAM */
 800d5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	8013      	strh	r3, [r2, #0]
        }
        
        
        /*******************************************************************************/
        /* Process RATS                                                                */
        buffer++;
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	61bb      	str	r3, [r7, #24]
        gIsoDep.fsx = rfalIsoDepFSxI2FSx( (((*buffer) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	091b      	lsrs	r3, r3, #4
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff ff43 	bl	800d450 <rfalIsoDepFSxI2FSx>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	4b8b      	ldr	r3, [pc, #556]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d5d0:	829a      	strh	r2, [r3, #20]
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	4b87      	ldr	r3, [pc, #540]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d5de:	70da      	strb	r2, [r3, #3]
        
        
        /*******************************************************************************/
        /* Digital 1.1  13.6.1.8 - DID as to between 0 and 14 */
        if( gIsoDep.did > RFAL_ISODEP_DID_MAX )
 800d5e0:	4b86      	ldr	r3, [pc, #536]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d5e2:	78db      	ldrb	r3, [r3, #3]
 800d5e4:	2b0e      	cmp	r3, #14
 800d5e6:	d901      	bls.n	800d5ec <rfalIsoDepListenStartActivation+0x90>
        {
            return ERR_PROTO;
 800d5e8:	230b      	movs	r3, #11
 800d5ea:	e103      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* Check if we are configured to support DID */
        if( (gIsoDep.did != RFAL_ISODEP_DID_00) && (!atsParam->didSupport) )
 800d5ec:	4b83      	ldr	r3, [pc, #524]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d5ee:	78db      	ldrb	r3, [r3, #3]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d008      	beq.n	800d606 <rfalIsoDepListenStartActivation+0xaa>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	78db      	ldrb	r3, [r3, #3]
 800d5f8:	f083 0301 	eor.w	r3, r3, #1
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <rfalIsoDepListenStartActivation+0xaa>
        {
            return ERR_NOTSUPP;
 800d602:	2318      	movs	r3, #24
 800d604:	e0f6      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
        }

        
        /*******************************************************************************/
        /* Check RFAL supported bit rates  */
        if( (!(RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	791b      	ldrb	r3, [r3, #4]
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d11d      	bne.n	800d64e <rfalIsoDepListenStartActivation+0xf2>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	791b      	ldrb	r3, [r3, #4]
 800d616:	f003 0310 	and.w	r3, r3, #16
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d117      	bne.n	800d64e <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	791b      	ldrb	r3, [r3, #4]
 800d622:	f003 0302 	and.w	r3, r3, #2
        if( (!(RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 800d626:	2b00      	cmp	r3, #0
 800d628:	d111      	bne.n	800d64e <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	791b      	ldrb	r3, [r3, #4]
 800d62e:	f003 0320 	and.w	r3, r3, #32
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10b      	bne.n	800d64e <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_848) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_848) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_848) != 0U)))   )            
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	791b      	ldrb	r3, [r3, #4]
 800d63a:	f003 0304 	and.w	r3, r3, #4
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d105      	bne.n	800d64e <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_848) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_848) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_848) != 0U)))   )            
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	791b      	ldrb	r3, [r3, #4]
 800d646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <rfalIsoDepListenStartActivation+0xf6>
        {
            return ERR_NOTSUPP;
 800d64e:	2318      	movs	r3, #24
 800d650:	e0d0      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* Enforce proper FWI configuration */
        if( atsParam->fwi > ISODEP_FWI_LIS_MAX)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	785b      	ldrb	r3, [r3, #1]
 800d656:	461a      	mov	r2, r3
 800d658:	4b68      	ldr	r3, [pc, #416]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d65a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d101      	bne.n	800d666 <rfalIsoDepListenStartActivation+0x10a>
 800d662:	2307      	movs	r3, #7
 800d664:	e000      	b.n	800d668 <rfalIsoDepListenStartActivation+0x10c>
 800d666:	2308      	movs	r3, #8
 800d668:	4293      	cmp	r3, r2
 800d66a:	da09      	bge.n	800d680 <rfalIsoDepListenStartActivation+0x124>
        {
            atsParam->fwi = ISODEP_FWI_LIS_MAX;
 800d66c:	4b63      	ldr	r3, [pc, #396]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d66e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d672:	2b01      	cmp	r3, #1
 800d674:	d101      	bne.n	800d67a <rfalIsoDepListenStartActivation+0x11e>
 800d676:	2207      	movs	r2, #7
 800d678:	e000      	b.n	800d67c <rfalIsoDepListenStartActivation+0x120>
 800d67a:	2208      	movs	r2, #8
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	705a      	strb	r2, [r3, #1]
        }
        
        gIsoDep.atsTA  = atsParam->ta;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	791a      	ldrb	r2, [r3, #4]
 800d684:	4b5d      	ldr	r3, [pc, #372]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d686:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        gIsoDep.fwt    = rfalIsoDepFWI2FWT(atsParam->fwi);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	785b      	ldrb	r3, [r3, #1]
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff febe 	bl	800d410 <rfalIsoDepFWI2FWT>
 800d694:	4603      	mov	r3, r0
 800d696:	4a59      	ldr	r2, [pc, #356]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d698:	60d3      	str	r3, [r2, #12]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx(atsParam->fsci);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff fed6 	bl	800d450 <rfalIsoDepFSxI2FSx>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	4b54      	ldr	r3, [pc, #336]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d6aa:	84da      	strh	r2, [r3, #38]	; 0x26
        
        
        /* Ensure proper/maximum Historical Bytes length  */
        atsParam->hbLen = MIN( RFAL_ISODEP_ATS_HB_MAX_LEN, atsParam->hbLen );
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	7b1b      	ldrb	r3, [r3, #12]
 800d6b0:	2b0f      	cmp	r3, #15
 800d6b2:	bf28      	it	cs
 800d6b4:	230f      	movcs	r3, #15
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	731a      	strb	r2, [r3, #12]
        
        /*******************************************************************************/
        /* Compute ATS                                                                 */
        
        txBuf[ bufIt++ ] = (RFAL_ISODEP_ATS_HIST_OFFSET + atsParam->hbLen);                                  /* TL */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	7b1a      	ldrb	r2, [r3, #12]
 800d6c0:	7ffb      	ldrb	r3, [r7, #31]
 800d6c2:	1c59      	adds	r1, r3, #1
 800d6c4:	77f9      	strb	r1, [r7, #31]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	440b      	add	r3, r1
 800d6cc:	3205      	adds	r2, #5
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
                              RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK)| atsParam->fsci       );                  /* T0 */
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	781a      	ldrb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
 800d6d6:	7ffb      	ldrb	r3, [r7, #31]
 800d6d8:	1c59      	adds	r1, r3, #1
 800d6da:	77f9      	strb	r1, [r7, #31]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	440b      	add	r3, r1
 800d6e2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800d6e6:	b2d2      	uxtb	r2, r2
 800d6e8:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = atsParam->ta;                                                                     /* TA */
 800d6ea:	7ffb      	ldrb	r3, [r7, #31]
 800d6ec:	1c5a      	adds	r2, r3, #1
 800d6ee:	77fa      	strb	r2, [r7, #31]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	7912      	ldrb	r2, [r2, #4]
 800d6fa:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	785b      	ldrb	r3, [r3, #1]
 800d700:	011b      	lsls	r3, r3, #4
 800d702:	b2d9      	uxtb	r1, r3
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	789b      	ldrb	r3, [r3, #2]
 800d708:	f023 030f 	bic.w	r3, r3, #15
 800d70c:	b2da      	uxtb	r2, r3
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 800d70e:	7ffb      	ldrb	r3, [r7, #31]
 800d710:	1c58      	adds	r0, r3, #1
 800d712:	77f8      	strb	r0, [r7, #31]
 800d714:	4618      	mov	r0, r3
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	4403      	add	r3, r0
 800d71a:	430a      	orrs	r2, r1
 800d71c:	b2d2      	uxtb	r2, r2
 800d71e:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = (uint8_t)((atsParam->didSupport) ? RFAL_ISODEP_ATS_TC_DID : 0U);                  /* TC */
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	78db      	ldrb	r3, [r3, #3]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <rfalIsoDepListenStartActivation+0x1d0>
 800d728:	2202      	movs	r2, #2
 800d72a:	e000      	b.n	800d72e <rfalIsoDepListenStartActivation+0x1d2>
 800d72c:	2200      	movs	r2, #0
 800d72e:	7ffb      	ldrb	r3, [r7, #31]
 800d730:	1c59      	adds	r1, r3, #1
 800d732:	77f9      	strb	r1, [r7, #31]
 800d734:	4619      	mov	r1, r3
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	440b      	add	r3, r1
 800d73a:	701a      	strb	r2, [r3, #0]
        
        if( atsParam->hbLen > 0U )             /* MISRA 21.18 */
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	7b1b      	ldrb	r3, [r3, #12]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00e      	beq.n	800d762 <rfalIsoDepListenStartActivation+0x206>
        {
            ST_MEMCPY( &txBuf[bufIt], atsParam->hb, atsParam->hbLen );                                       /* T1-Tk */
 800d744:	7ffb      	ldrb	r3, [r7, #31]
 800d746:	697a      	ldr	r2, [r7, #20]
 800d748:	18d0      	adds	r0, r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6899      	ldr	r1, [r3, #8]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	7b1b      	ldrb	r3, [r3, #12]
 800d752:	461a      	mov	r2, r3
 800d754:	f00e faac 	bl	801bcb0 <memcpy>
            bufIt += atsParam->hbLen;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	7b1a      	ldrb	r2, [r3, #12]
 800d75c:	7ffb      	ldrb	r3, [r7, #31]
 800d75e:	4413      	add	r3, r2
 800d760:	77fb      	strb	r3, [r7, #31]
        }
        
        gIsoDep.state = ISODEP_ST_PICC_ACT_ATS;
 800d762:	4b26      	ldr	r3, [pc, #152]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d764:	2204      	movs	r2, #4
 800d766:	701a      	strb	r2, [r3, #0]
    else
    {
        return ERR_PARAM;
    }
    
    gIsoDep.actvParam = actParam;
 800d768:	4b24      	ldr	r3, [pc, #144]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d76a:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800d76e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    
    /*******************************************************************************/
    /* If requested copy to ISO-DEP device info */
    if( actParam.isoDepDev != NULL )
 800d778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d02a      	beq.n	800d7d4 <rfalIsoDepListenStartActivation+0x278>
 800d77e:	e00c      	b.n	800d79a <rfalIsoDepListenStartActivation+0x23e>
    else if( *buffer == RFAL_ISODEP_CMD_ATTRIB )
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b1d      	cmp	r3, #29
 800d786:	d106      	bne.n	800d796 <rfalIsoDepListenStartActivation+0x23a>
        if( attribResParam == NULL )
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <rfalIsoDepListenStartActivation+0x236>
            return ERR_PARAM;
 800d78e:	2307      	movs	r3, #7
 800d790:	e030      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
        return ERR_NOT_IMPLEMENTED;
 800d792:	230f      	movs	r3, #15
 800d794:	e02e      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
        return ERR_PARAM;
 800d796:	2307      	movs	r3, #7
 800d798:	e02c      	b.n	800d7f4 <rfalIsoDepListenStartActivation+0x298>
    {
        actParam.isoDepDev->info.DID  = gIsoDep.did;
 800d79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79c:	4a17      	ldr	r2, [pc, #92]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d79e:	78d2      	ldrb	r2, [r2, #3]
 800d7a0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        actParam.isoDepDev->info.FSx  = gIsoDep.fsx;
 800d7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a6:	4a15      	ldr	r2, [pc, #84]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d7a8:	8a92      	ldrh	r2, [r2, #20]
 800d7aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        actParam.isoDepDev->info.FWT  = gIsoDep.fwt;
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b0:	4a12      	ldr	r2, [pc, #72]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d7b2:	68d2      	ldr	r2, [r2, #12]
 800d7b4:	631a      	str	r2, [r3, #48]	; 0x30
        actParam.isoDepDev->info.dFWT = 0;
 800d7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	635a      	str	r2, [r3, #52]	; 0x34
        actParam.isoDepDev->info.DSI  = gIsoDep.txBR;
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7be:	4a0f      	ldr	r2, [pc, #60]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d7c0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d7c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        actParam.isoDepDev->info.DRI  = gIsoDep.rxBR;
 800d7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ca:	4a0c      	ldr	r2, [pc, #48]	; (800d7fc <rfalIsoDepListenStartActivation+0x2a0>)
 800d7cc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d7d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    return rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)actParam.rxBuf, sizeof( rfalIsoDepBufFormat ), actParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 800d7d4:	7ffb      	ldrb	r3, [r7, #31]
 800d7d6:	b299      	uxth	r1, r3
 800d7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	9002      	str	r0, [sp, #8]
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	9001      	str	r0, [sp, #4]
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	f240 1303 	movw	r3, #259	; 0x103
 800d7ec:	6978      	ldr	r0, [r7, #20]
 800d7ee:	f009 fa89 	bl	8016d04 <rfalTransceiveBlockingTx>
 800d7f2:	4603      	mov	r3, r0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3724      	adds	r7, #36	; 0x24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd90      	pop	{r4, r7, pc}
 800d7fc:	20002aa8 	.word	0x20002aa8

0800d800 <rfalIsoDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepListenGetActivationStatus( void )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af04      	add	r7, sp, #16
    rfalBitRate dsi;
    rfalBitRate dri;
    
    
    /* Check if Activation is running */
    if( gIsoDep.state < ISODEP_ST_PICC_ACT_ATS )
 800d806:	4bb9      	ldr	r3, [pc, #740]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d801      	bhi.n	800d812 <rfalIsoDepListenGetActivationStatus+0x12>
    {
        return ERR_WRONG_STATE;
 800d80e:	2321      	movs	r3, #33	; 0x21
 800d810:	e167      	b.n	800dae2 <rfalIsoDepListenGetActivationStatus+0x2e2>
    }
    
    /* Check if Activation has finished already */
    if( gIsoDep.state >= ISODEP_ST_PICC_RX )
 800d812:	4bb6      	ldr	r3, [pc, #728]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b05      	cmp	r3, #5
 800d818:	d901      	bls.n	800d81e <rfalIsoDepListenGetActivationStatus+0x1e>
    {
        return ERR_NONE;
 800d81a:	2300      	movs	r3, #0
 800d81c:	e161      	b.n	800dae2 <rfalIsoDepListenGetActivationStatus+0x2e2>
    }
    
    
    /*******************************************************************************/
    /* Check for incoming msg */
    err = rfalGetTransceiveStatus();
 800d81e:	f009 fb39 	bl	8016e94 <rfalGetTransceiveStatus>
 800d822:	4603      	mov	r3, r0
 800d824:	81bb      	strh	r3, [r7, #12]
    switch( err )
 800d826:	89bb      	ldrh	r3, [r7, #12]
 800d828:	2b25      	cmp	r3, #37	; 0x25
 800d82a:	d859      	bhi.n	800d8e0 <rfalIsoDepListenGetActivationStatus+0xe0>
 800d82c:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <rfalIsoDepListenGetActivationStatus+0x34>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d909 	.word	0x0800d909
 800d838:	0800d8e1 	.word	0x0800d8e1
 800d83c:	0800d8cd 	.word	0x0800d8cd
 800d840:	0800d8e1 	.word	0x0800d8e1
 800d844:	0800d8e1 	.word	0x0800d8e1
 800d848:	0800d8e1 	.word	0x0800d8e1
 800d84c:	0800d8e1 	.word	0x0800d8e1
 800d850:	0800d8e1 	.word	0x0800d8e1
 800d854:	0800d8e1 	.word	0x0800d8e1
 800d858:	0800d8d1 	.word	0x0800d8d1
 800d85c:	0800d8e1 	.word	0x0800d8e1
 800d860:	0800d8e1 	.word	0x0800d8e1
 800d864:	0800d8e1 	.word	0x0800d8e1
 800d868:	0800d8e1 	.word	0x0800d8e1
 800d86c:	0800d8e1 	.word	0x0800d8e1
 800d870:	0800d8e1 	.word	0x0800d8e1
 800d874:	0800d8e1 	.word	0x0800d8e1
 800d878:	0800d8e1 	.word	0x0800d8e1
 800d87c:	0800d8e1 	.word	0x0800d8e1
 800d880:	0800d8e1 	.word	0x0800d8e1
 800d884:	0800d8e1 	.word	0x0800d8e1
 800d888:	0800d8d1 	.word	0x0800d8d1
 800d88c:	0800d8e1 	.word	0x0800d8e1
 800d890:	0800d8e1 	.word	0x0800d8e1
 800d894:	0800d8e1 	.word	0x0800d8e1
 800d898:	0800d8e1 	.word	0x0800d8e1
 800d89c:	0800d8e1 	.word	0x0800d8e1
 800d8a0:	0800d8d1 	.word	0x0800d8d1
 800d8a4:	0800d8e1 	.word	0x0800d8e1
 800d8a8:	0800d8e1 	.word	0x0800d8e1
 800d8ac:	0800d8e1 	.word	0x0800d8e1
 800d8b0:	0800d8e1 	.word	0x0800d8e1
 800d8b4:	0800d8e1 	.word	0x0800d8e1
 800d8b8:	0800d8e1 	.word	0x0800d8e1
 800d8bc:	0800d8e1 	.word	0x0800d8e1
 800d8c0:	0800d8e1 	.word	0x0800d8e1
 800d8c4:	0800d8e1 	.word	0x0800d8e1
 800d8c8:	0800d8cd 	.word	0x0800d8cd
            break;
            
        /*******************************************************************************/
        case ERR_LINK_LOSS:
        case ERR_BUSY:
            return err;
 800d8cc:	89bb      	ldrh	r3, [r7, #12]
 800d8ce:	e108      	b.n	800dae2 <rfalIsoDepListenGetActivationStatus+0x2e2>
        case ERR_CRC:
        case ERR_PAR:
        case ERR_FRAMING:
            
            /* ISO14443 4  5.6.2.2 2  If ATS has been replied upon a invalid block, PICC disables the PPS responses */
            if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 800d8d0:	4b86      	ldr	r3, [pc, #536]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	2b04      	cmp	r3, #4
 800d8d6:	d103      	bne.n	800d8e0 <rfalIsoDepListenGetActivationStatus+0xe0>
            {
               gIsoDep.state = ISODEP_ST_PICC_RX;
 800d8d8:	4b84      	ldr	r3, [pc, #528]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d8da:	2206      	movs	r2, #6
 800d8dc:	701a      	strb	r2, [r3, #0]
               break;
 800d8de:	e014      	b.n	800d90a <rfalIsoDepListenGetActivationStatus+0x10a>
            /* fall through */
            
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* ReEnable the receiver and wait for another frame */
            isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800d8e0:	4b82      	ldr	r3, [pc, #520]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d8e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d8e6:	4b81      	ldr	r3, [pc, #516]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8ec:	f04f 31ff 	mov.w	r1, #4294967295
 800d8f0:	9102      	str	r1, [sp, #8]
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	9101      	str	r1, [sp, #4]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	f240 1303 	movw	r3, #259	; 0x103
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	2000      	movs	r0, #0
 800d900:	f009 fa00 	bl	8016d04 <rfalTransceiveBlockingTx>
            
            return ERR_BUSY;
 800d904:	2302      	movs	r3, #2
 800d906:	e0ec      	b.n	800dae2 <rfalIsoDepListenGetActivationStatus+0x2e2>
            break;
 800d908:	bf00      	nop
    }
    
    
    txBuf = (uint8_t*)gIsoDep.actvParam.rxBuf;   /* Use the rxBuf as TxBuf as well, the struct enforces a size enough  MAX(NFCA_PPS_RES_LEN, ISODEP_DSL_MAX_LEN) */    
 800d90a:	4b78      	ldr	r3, [pc, #480]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d910:	60bb      	str	r3, [r7, #8]
    dri   = RFAL_BR_KEEP;                        /* The RFAL_BR_KEEP is used to check if PPS with BR change was requested */
 800d912:	23ff      	movs	r3, #255	; 0xff
 800d914:	73bb      	strb	r3, [r7, #14]
    dsi   = RFAL_BR_KEEP;                        /* MISRA 9.1 */
 800d916:	23ff      	movs	r3, #255	; 0xff
 800d918:	73fb      	strb	r3, [r7, #15]
    bufIt = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    gIsoDep.role  = ISODEP_ROLE_PICC;
 800d91e:	4b73      	ldr	r3, [pc, #460]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d920:	2201      	movs	r2, #1
 800d922:	705a      	strb	r2, [r3, #1]
    
    /*******************************************************************************/
    if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 800d924:	4b71      	ldr	r3, [pc, #452]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2b04      	cmp	r3, #4
 800d92a:	f040 80a1 	bne.w	800da70 <rfalIsoDepListenGetActivationStatus+0x270>
    {
        /* Check for a PPS    ISO 14443-4  5.3 */
        if( ( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_PPS_MASK) == RFAL_ISODEP_PPS_SB )
 800d92e:	4b6f      	ldr	r3, [pc, #444]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d93a:	2bd0      	cmp	r3, #208	; 0xd0
 800d93c:	f040 8098 	bne.w	800da70 <rfalIsoDepListenGetActivationStatus+0x270>
        {
            /* ISO 14443-4  5.3.1  Check if the we are the addressed DID/CID */
            /* ISO 14443-4  5.3.2  Check for a valid PPS0 */
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 800d940:	4b6a      	ldr	r3, [pc, #424]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	f003 030f 	and.w	r3, r3, #15
 800d94c:	4a67      	ldr	r2, [pc, #412]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d94e:	78d2      	ldrb	r2, [r2, #3]
 800d950:	4293      	cmp	r3, r2
 800d952:	d108      	bne.n	800d966 <rfalIsoDepListenGetActivationStatus+0x166>
                (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] & RFAL_ISODEP_PPS0_VALID_MASK) != RFAL_ISODEP_PPS0_PPS1_NOT_PRESENT)   )
 800d954:	4b65      	ldr	r3, [pc, #404]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d95a:	3301      	adds	r3, #1
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 800d962:	2b01      	cmp	r3, #1
 800d964:	d013      	beq.n	800d98e <rfalIsoDepListenGetActivationStatus+0x18e>
            {
                /* Invalid DID on PPS request or Invalid PPS0, reEnable the receiver and wait another frame */
                isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800d966:	4b61      	ldr	r3, [pc, #388]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d968:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d96c:	4b5f      	ldr	r3, [pc, #380]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d96e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d972:	f04f 31ff 	mov.w	r1, #4294967295
 800d976:	9102      	str	r1, [sp, #8]
 800d978:	2100      	movs	r1, #0
 800d97a:	9101      	str	r1, [sp, #4]
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	f240 1303 	movw	r3, #259	; 0x103
 800d982:	2100      	movs	r1, #0
 800d984:	2000      	movs	r0, #0
 800d986:	f009 f9bd 	bl	8016d04 <rfalTransceiveBlockingTx>
                
                return ERR_BUSY;
 800d98a:	2302      	movs	r3, #2
 800d98c:	e0a9      	b.n	800dae2 <rfalIsoDepListenGetActivationStatus+0x2e2>
            }
            
            /*******************************************************************************/
            /* Check PPS1 presence */
            if( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] == RFAL_ISODEP_PPS0_PPS1_PRESENT )
 800d98e:	4b57      	ldr	r3, [pc, #348]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d994:	3301      	adds	r3, #1
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	2b11      	cmp	r3, #17
 800d99a:	d129      	bne.n	800d9f0 <rfalIsoDepListenGetActivationStatus+0x1f0>
            {
                uint8_t newdri = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] & RFAL_ISODEP_PPS1_DxI_MASK;                                 /* MISRA 10.8 */
 800d99c:	4b53      	ldr	r3, [pc, #332]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9a2:	3302      	adds	r3, #2
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	f003 0303 	and.w	r3, r3, #3
 800d9aa:	71bb      	strb	r3, [r7, #6]
                uint8_t newdsi = (((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] >> RFAL_ISODEP_PPS1_DSI_SHIFT) & RFAL_ISODEP_PPS1_DxI_MASK; /* MISRA 10.8 */
 800d9ac:	4b4f      	ldr	r3, [pc, #316]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9b2:	3302      	adds	r3, #2
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	089b      	lsrs	r3, r3, #2
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 0303 	and.w	r3, r3, #3
 800d9be:	717b      	strb	r3, [r7, #5]
				/* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and above masks guarantee no invalid enum values to be created */
                dri = (rfalBitRate) (newdri); 
 800d9c0:	79bb      	ldrb	r3, [r7, #6]
 800d9c2:	73bb      	strb	r3, [r7, #14]
                dsi = (rfalBitRate) (newdsi);
 800d9c4:	797b      	ldrb	r3, [r7, #5]
 800d9c6:	73fb      	strb	r3, [r7, #15]
                                
                if( (!(RFAL_SUPPORT_BR_CE_A_106) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d00e      	beq.n	800d9ec <rfalIsoDepListenGetActivationStatus+0x1ec>
 800d9ce:	7bbb      	ldrb	r3, [r7, #14]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d00b      	beq.n	800d9ec <rfalIsoDepListenGetActivationStatus+0x1ec>
                    (!(RFAL_SUPPORT_BR_CE_A_212) && (( dsi == RFAL_BR_212 ) || ( dri == RFAL_BR_212 )))  ||
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d008      	beq.n	800d9ec <rfalIsoDepListenGetActivationStatus+0x1ec>
                    (!(RFAL_SUPPORT_BR_CE_A_424) && (( dsi == RFAL_BR_424 ) || ( dri == RFAL_BR_424 )))  ||
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	d005      	beq.n	800d9ec <rfalIsoDepListenGetActivationStatus+0x1ec>
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d002      	beq.n	800d9ec <rfalIsoDepListenGetActivationStatus+0x1ec>
                    (!(RFAL_SUPPORT_BR_CE_A_848) && (( dsi == RFAL_BR_848 ) || ( dri == RFAL_BR_848 )))     )
 800d9e6:	7bbb      	ldrb	r3, [r7, #14]
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d101      	bne.n	800d9f0 <rfalIsoDepListenGetActivationStatus+0x1f0>
                {
                    return ERR_PROTO;
 800d9ec:	230b      	movs	r3, #11
 800d9ee:	e078      	b.n	800dae2 <rfalIsoDepListenGetActivationStatus+0x2e2>
                }
            }
            
            /*******************************************************************************/
            /* Compute and send PPS RES / Ack                                              */
            txBuf[ bufIt++ ] = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS];
 800d9f0:	4b3e      	ldr	r3, [pc, #248]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800d9f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d9f6:	79fb      	ldrb	r3, [r7, #7]
 800d9f8:	1c59      	adds	r1, r3, #1
 800d9fa:	71f9      	strb	r1, [r7, #7]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	440b      	add	r3, r1
 800da02:	7812      	ldrb	r2, [r2, #0]
 800da04:	701a      	strb	r2, [r3, #0]
            
            rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	b299      	uxth	r1, r3
 800da0a:	4b38      	ldr	r3, [pc, #224]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800da10:	4b36      	ldr	r3, [pc, #216]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da16:	f04f 30ff 	mov.w	r0, #4294967295
 800da1a:	9002      	str	r0, [sp, #8]
 800da1c:	2000      	movs	r0, #0
 800da1e:	9001      	str	r0, [sp, #4]
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	f240 1303 	movw	r3, #259	; 0x103
 800da26:	68b8      	ldr	r0, [r7, #8]
 800da28:	f009 f96c 	bl	8016d04 <rfalTransceiveBlockingTx>

            /*******************************************************************************/
            /* Exchange the bit rates if requested */
            if( dri != RFAL_BR_KEEP )
 800da2c:	7bbb      	ldrb	r3, [r7, #14]
 800da2e:	2bff      	cmp	r3, #255	; 0xff
 800da30:	d01e      	beq.n	800da70 <rfalIsoDepListenGetActivationStatus+0x270>
            {
                rfalSetBitRate( dsi, dri );                 /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset above (RFAL_SUPPORT_BR_CE_A_xxx) */
 800da32:	7bba      	ldrb	r2, [r7, #14]
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	4611      	mov	r1, r2
 800da38:	4618      	mov	r0, r3
 800da3a:	f008 fbef 	bl	801621c <rfalSetBitRate>
                
                gIsoDep.txBR = dsi;  /* DSI codes the divisor from PICC to PCD */
 800da3e:	4a2b      	ldr	r2, [pc, #172]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da40:	7bfb      	ldrb	r3, [r7, #15]
 800da42:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                gIsoDep.rxBR = dri;  /* DRI codes the divisor from PCD to PICC */
 800da46:	4a29      	ldr	r2, [pc, #164]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da48:	7bbb      	ldrb	r3, [r7, #14]
 800da4a:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                
                
                if(gIsoDep.actvParam.isoDepDev != NULL)
 800da4e:	4b27      	ldr	r3, [pc, #156]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00b      	beq.n	800da70 <rfalIsoDepListenGetActivationStatus+0x270>
                {
                    gIsoDep.actvParam.isoDepDev->info.DSI =  dsi;
 800da58:	4b24      	ldr	r3, [pc, #144]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da5e:	7bfa      	ldrb	r2, [r7, #15]
 800da60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    gIsoDep.actvParam.isoDepDev->info.DRI =  dri;
 800da64:	4b21      	ldr	r3, [pc, #132]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da6a:	7bba      	ldrb	r2, [r7, #14]
 800da6c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
        /* Check for a S-Deselect is done on Data Exchange Activity                    */
    }
     
     /*******************************************************************************/
     gIsoDep.hdrLen   = RFAL_ISODEP_PCB_LEN;
 800da70:	4b1e      	ldr	r3, [pc, #120]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da72:	2201      	movs	r2, #1
 800da74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
     gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;             /* Always assume DID to be aligned with Digital 1.1  15.1.2 and ISO14443  4 5.6.3    #454 */
 800da78:	4b1c      	ldr	r3, [pc, #112]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800da7e:	3301      	adds	r3, #1
 800da80:	b2da      	uxtb	r2, r3
 800da82:	4b1a      	ldr	r3, [pc, #104]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da84:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
     gIsoDep.hdrLen  += (uint8_t)((gIsoDep.nad != RFAL_ISODEP_NO_NAD) ? RFAL_ISODEP_NAD_LEN : 0U);
 800da88:	4b18      	ldr	r3, [pc, #96]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da8a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800da8e:	4a17      	ldr	r2, [pc, #92]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800da90:	7912      	ldrb	r2, [r2, #4]
 800da92:	2aff      	cmp	r2, #255	; 0xff
 800da94:	bf14      	ite	ne
 800da96:	2201      	movne	r2, #1
 800da98:	2200      	moveq	r2, #0
 800da9a:	b2d2      	uxtb	r2, r2
 800da9c:	4413      	add	r3, r2
 800da9e:	b2da      	uxtb	r2, r3
 800daa0:	4b12      	ldr	r3, [pc, #72]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800daa2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
     
     /*******************************************************************************/
     /* Rule C - The PICC block number shall be initialized to 1 at activation */
     gIsoDep.blockNumber = 1;
 800daa6:	4b11      	ldr	r3, [pc, #68]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800daa8:	2201      	movs	r2, #1
 800daaa:	709a      	strb	r2, [r3, #2]
    
    /* Activation done, keep the rcvd data in, reMap the activation buffer to the global to be retrieved by the DEP method */
    gIsoDep.rxBuf       = (uint8_t*)gIsoDep.actvParam.rxBuf;
 800daac:	4b0f      	ldr	r3, [pc, #60]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800daae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dab2:	4a0e      	ldr	r2, [pc, #56]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dab4:	61d3      	str	r3, [r2, #28]
    gIsoDep.rxBufLen    = sizeof( rfalIsoDepBufFormat );
 800dab6:	4b0d      	ldr	r3, [pc, #52]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dab8:	f240 1203 	movw	r2, #259	; 0x103
 800dabc:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.rxBufInfPos = (uint8_t)((uint32_t)gIsoDep.actvParam.rxBuf->inf - (uint32_t)gIsoDep.actvParam.rxBuf->prologue);
 800dabe:	4b0b      	ldr	r3, [pc, #44]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dac0:	2203      	movs	r2, #3
 800dac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.rxLen       = gIsoDep.actvParam.rxLen;
 800dac6:	4b09      	ldr	r3, [pc, #36]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dacc:	4a07      	ldr	r2, [pc, #28]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dace:	6313      	str	r3, [r2, #48]	; 0x30
    gIsoDep.rxChaining  = gIsoDep.actvParam.isRxChaining;
 800dad0:	4b06      	ldr	r3, [pc, #24]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dad6:	4a05      	ldr	r2, [pc, #20]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dad8:	6353      	str	r3, [r2, #52]	; 0x34
    
    gIsoDep.state = ISODEP_ST_PICC_RX;
 800dada:	4b04      	ldr	r3, [pc, #16]	; (800daec <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800dadc:	2206      	movs	r2, #6
 800dade:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	20002aa8 	.word	0x20002aa8

0800daf0 <rfalIsoDepGetMaxInfLen>:
#endif  /* RFAL_FEATURE_ISO_DEP_LISTEN */


/*******************************************************************************/
uint16_t rfalIsoDepGetMaxInfLen( void )
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
    /* Check whether all parameters are valid, otherwise return minimum default value */
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 800daf6:	4b11      	ldr	r3, [pc, #68]	; (800db3c <rfalIsoDepGetMaxInfLen+0x4c>)
 800daf8:	8a9b      	ldrh	r3, [r3, #20]
 800dafa:	2b0f      	cmp	r3, #15
 800dafc:	d909      	bls.n	800db12 <rfalIsoDepGetMaxInfLen+0x22>
 800dafe:	4b0f      	ldr	r3, [pc, #60]	; (800db3c <rfalIsoDepGetMaxInfLen+0x4c>)
 800db00:	8a9b      	ldrh	r3, [r3, #20]
 800db02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db06:	d804      	bhi.n	800db12 <rfalIsoDepGetMaxInfLen+0x22>
 800db08:	4b0c      	ldr	r3, [pc, #48]	; (800db3c <rfalIsoDepGetMaxInfLen+0x4c>)
 800db0a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d905      	bls.n	800db1e <rfalIsoDepGetMaxInfLen+0x2e>
    {
        uint16_t isodepFsx16 = (uint16_t)RFAL_ISODEP_FSX_16;  /* MISRA 10.1 */
 800db12:	2310      	movs	r3, #16
 800db14:	80fb      	strh	r3, [r7, #6]
        return (isodepFsx16 - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 800db16:	88fb      	ldrh	r3, [r7, #6]
 800db18:	3b03      	subs	r3, #3
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	e009      	b.n	800db32 <rfalIsoDepGetMaxInfLen+0x42>
    }
    
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 800db1e:	4b07      	ldr	r3, [pc, #28]	; (800db3c <rfalIsoDepGetMaxInfLen+0x4c>)
 800db20:	8a9a      	ldrh	r2, [r3, #20]
 800db22:	4b06      	ldr	r3, [pc, #24]	; (800db3c <rfalIsoDepGetMaxInfLen+0x4c>)
 800db24:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800db28:	b29b      	uxth	r3, r3
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	3b02      	subs	r3, #2
 800db30:	b29b      	uxth	r3, r3
}
 800db32:	4618      	mov	r0, r3
 800db34:	370c      	adds	r7, #12
 800db36:	46bd      	mov	sp, r7
 800db38:	bc80      	pop	{r7}
 800db3a:	4770      	bx	lr
 800db3c:	20002aa8 	.word	0x20002aa8

0800db40 <rfalIsoDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 800db40:	b084      	sub	sp, #16
 800db42:	b580      	push	{r7, lr}
 800db44:	af00      	add	r7, sp, #0
 800db46:	f107 0c08 	add.w	ip, r7, #8
 800db4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	461a      	mov	r2, r3
 800db52:	4b30      	ldr	r3, [pc, #192]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db54:	619a      	str	r2, [r3, #24]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 800db56:	4b2f      	ldr	r3, [pc, #188]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db58:	2203      	movs	r2, #3
 800db5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.txBufLen     = param.txBufLen;
 800db5e:	89ba      	ldrh	r2, [r7, #12]
 800db60:	4b2c      	ldr	r3, [pc, #176]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db62:	841a      	strh	r2, [r3, #32]
    gIsoDep.isTxChaining = param.isTxChaining;
 800db64:	7bba      	ldrb	r2, [r7, #14]
 800db66:	4b2b      	ldr	r3, [pc, #172]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db68:	759a      	strb	r2, [r3, #22]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	461a      	mov	r2, r3
 800db6e:	4b29      	ldr	r3, [pc, #164]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db70:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 800db72:	4b28      	ldr	r3, [pc, #160]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db74:	2203      	movs	r2, #3
 800db76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 800db7a:	4b26      	ldr	r3, [pc, #152]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db7c:	f240 1203 	movw	r2, #259	; 0x103
 800db80:	845a      	strh	r2, [r3, #34]	; 0x22
    
    gIsoDep.rxLen        = param.rxLen;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	4a23      	ldr	r2, [pc, #140]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db86:	6313      	str	r3, [r2, #48]	; 0x30
    gIsoDep.rxChaining   = param.isRxChaining;
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	4a22      	ldr	r2, [pc, #136]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db8c:	6353      	str	r3, [r2, #52]	; 0x34
    
    
    gIsoDep.fwt          = param.FWT;
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	4a20      	ldr	r2, [pc, #128]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db92:	60d3      	str	r3, [r2, #12]
    gIsoDep.dFwt         = param.dFWT;
 800db94:	6a3b      	ldr	r3, [r7, #32]
 800db96:	4a1f      	ldr	r2, [pc, #124]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db98:	6113      	str	r3, [r2, #16]
    gIsoDep.fsx          = param.FSx;
 800db9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db9c:	4b1d      	ldr	r3, [pc, #116]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800db9e:	829a      	strh	r2, [r3, #20]
    gIsoDep.did          = param.DID;
 800dba0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dba4:	4b1b      	ldr	r3, [pc, #108]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dba6:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800dba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbaa:	2bff      	cmp	r3, #255	; 0xff
 800dbac:	d001      	beq.n	800dbb2 <rfalIsoDepStartTransceive+0x72>
 800dbae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbb0:	e001      	b.n	800dbb6 <rfalIsoDepStartTransceive+0x76>
 800dbb2:	4b18      	ldr	r3, [pc, #96]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dbb6:	4a17      	ldr	r2, [pc, #92]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbb8:	84d3      	strh	r3, [r2, #38]	; 0x26
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 800dbba:	4b16      	ldr	r3, [pc, #88]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	75da      	strb	r2, [r3, #23]
    isoDepClearCounters();
 800dbc0:	f7fe fedc 	bl	800c97c <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 800dbc4:	4b13      	ldr	r3, [pc, #76]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbc6:	785b      	ldrb	r3, [r3, #1]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d119      	bne.n	800dc00 <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 800dbcc:	4b11      	ldr	r3, [pc, #68]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbce:	8c1b      	ldrh	r3, [r3, #32]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d010      	beq.n	800dbf6 <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 800dbd4:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbda:	f083 0301 	eor.w	r3, r3, #1
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 800dbe4:	4b0b      	ldr	r3, [pc, #44]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbe6:	2209      	movs	r2, #9
 800dbe8:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 800dbea:	2300      	movs	r3, #0
 800dbec:	e00c      	b.n	800dc08 <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 800dbee:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 800dbf6:	4b07      	ldr	r3, [pc, #28]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dbf8:	2206      	movs	r2, #6
 800dbfa:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	e003      	b.n	800dc08 <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 800dc00:	4b04      	ldr	r3, [pc, #16]	; (800dc14 <rfalIsoDepStartTransceive+0xd4>)
 800dc02:	2201      	movs	r2, #1
 800dc04:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc10:	b004      	add	sp, #16
 800dc12:	4770      	bx	lr
 800dc14:	20002aa8 	.word	0x20002aa8

0800dc18 <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <rfalIsoDepGetTransceiveStatus+0x2c>)
 800dc1e:	785b      	ldrb	r3, [r3, #1]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d103      	bne.n	800dc2c <rfalIsoDepGetTransceiveStatus+0x14>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
 800dc24:	f000 f810 	bl	800dc48 <isoDepDataExchangePICC>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	e008      	b.n	800dc3e <rfalIsoDepGetTransceiveStatus+0x26>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 800dc2c:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <rfalIsoDepGetTransceiveStatus+0x2c>)
 800dc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc30:	4a04      	ldr	r2, [pc, #16]	; (800dc44 <rfalIsoDepGetTransceiveStatus+0x2c>)
 800dc32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff f8f8 	bl	800ce2c <isoDepDataExchangePCD>
 800dc3c:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20002aa8 	.word	0x20002aa8

0800dc48 <isoDepDataExchangePICC>:

#if RFAL_FEATURE_ISO_DEP_LISTEN

/*******************************************************************************/
static ReturnCode isoDepDataExchangePICC( void )
{
 800dc48:	b590      	push	{r4, r7, lr}
 800dc4a:	b087      	sub	sp, #28
 800dc4c:	af04      	add	r7, sp, #16
    uint8_t    rxPCB;
    ReturnCode ret;
    
    switch( gIsoDep.state )
 800dc4e:	4ba5      	ldr	r3, [pc, #660]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	2b09      	cmp	r3, #9
 800dc54:	f200 8144 	bhi.w	800dee0 <isoDepDataExchangePICC+0x298>
 800dc58:	a201      	add	r2, pc, #4	; (adr r2, 800dc60 <isoDepDataExchangePICC+0x18>)
 800dc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5e:	bf00      	nop
 800dc60:	0800dc89 	.word	0x0800dc89
 800dc64:	0800dee1 	.word	0x0800dee1
 800dc68:	0800dee1 	.word	0x0800dee1
 800dc6c:	0800dee1 	.word	0x0800dee1
 800dc70:	0800dee1 	.word	0x0800dee1
 800dc74:	0800dee1 	.word	0x0800dee1
 800dc78:	0800dcdd 	.word	0x0800dcdd
 800dc7c:	0800de31 	.word	0x0800de31
 800dc80:	0800decb 	.word	0x0800decb
 800dc84:	0800dc8d 	.word	0x0800dc8d
    {
        /*******************************************************************************/
        case ISODEP_ST_IDLE:
            return ERR_NONE;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	e3c0      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
        

        /*******************************************************************************/
        case ISODEP_ST_PICC_TX:
        
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, RFAL_FWT_NONE );
 800dc8c:	4b95      	ldr	r3, [pc, #596]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dc8e:	789b      	ldrb	r3, [r3, #2]
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	f043 0302 	orr.w	r3, r3, #2
 800dc9a:	b2d8      	uxtb	r0, r3
 800dc9c:	4b91      	ldr	r3, [pc, #580]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dc9e:	6999      	ldr	r1, [r3, #24]
 800dca0:	4b90      	ldr	r3, [pc, #576]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	4a8f      	ldr	r2, [pc, #572]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dca6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800dcaa:	441a      	add	r2, r3
 800dcac:	4b8d      	ldr	r3, [pc, #564]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dcae:	8c1b      	ldrh	r3, [r3, #32]
 800dcb0:	f04f 34ff 	mov.w	r4, #4294967295
 800dcb4:	9400      	str	r4, [sp, #0]
 800dcb6:	f7fe fe79 	bl	800c9ac <isoDepTx>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	80fb      	strh	r3, [r7, #6]
            
            /* Clear pending Tx flag */
            gIsoDep.isTxPending = false;
 800dcbe:	4b89      	ldr	r3, [pc, #548]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            
            switch( ret )
 800dcc6:	88fb      	ldrh	r3, [r7, #6]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d104      	bne.n	800dcd6 <isoDepDataExchangePICC+0x8e>
            {
             case ERR_NONE:
                 gIsoDep.state = ISODEP_ST_PICC_RX;
 800dccc:	4b85      	ldr	r3, [pc, #532]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dcce:	2206      	movs	r2, #6
 800dcd0:	701a      	strb	r2, [r3, #0]
                 return ERR_BUSY;
 800dcd2:	2302      	movs	r3, #2
 800dcd4:	e39b      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
             
             default:
                /* MISRA 16.4: no empty default statement (a comment being enough) */
                break;
 800dcd6:	bf00      	nop
            }
            return ret;
 800dcd8:	88fb      	ldrh	r3, [r7, #6]
 800dcda:	e398      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
        
        
        /*******************************************************************************/
        case ISODEP_ST_PICC_RX:
            
            ret = rfalGetTransceiveStatus();
 800dcdc:	f009 f8da 	bl	8016e94 <rfalGetTransceiveStatus>
 800dce0:	4603      	mov	r3, r0
 800dce2:	80fb      	strh	r3, [r7, #6]
            switch( ret )
 800dce4:	88fb      	ldrh	r3, [r7, #6]
 800dce6:	2b25      	cmp	r3, #37	; 0x25
 800dce8:	f200 80a0 	bhi.w	800de2c <isoDepDataExchangePICC+0x1e4>
 800dcec:	a201      	add	r2, pc, #4	; (adr r2, 800dcf4 <isoDepDataExchangePICC+0xac>)
 800dcee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf2:	bf00      	nop
 800dcf4:	0800ddb9 	.word	0x0800ddb9
 800dcf8:	0800de2d 	.word	0x0800de2d
 800dcfc:	0800ddb5 	.word	0x0800ddb5
 800dd00:	0800de2d 	.word	0x0800de2d
 800dd04:	0800dd8d 	.word	0x0800dd8d
 800dd08:	0800de2d 	.word	0x0800de2d
 800dd0c:	0800de2d 	.word	0x0800de2d
 800dd10:	0800de2d 	.word	0x0800de2d
 800dd14:	0800de2d 	.word	0x0800de2d
 800dd18:	0800dd8d 	.word	0x0800dd8d
 800dd1c:	0800de2d 	.word	0x0800de2d
 800dd20:	0800de2d 	.word	0x0800de2d
 800dd24:	0800de2d 	.word	0x0800de2d
 800dd28:	0800de2d 	.word	0x0800de2d
 800dd2c:	0800de2d 	.word	0x0800de2d
 800dd30:	0800de2d 	.word	0x0800de2d
 800dd34:	0800de2d 	.word	0x0800de2d
 800dd38:	0800de2d 	.word	0x0800de2d
 800dd3c:	0800de2d 	.word	0x0800de2d
 800dd40:	0800de2d 	.word	0x0800de2d
 800dd44:	0800de2d 	.word	0x0800de2d
 800dd48:	0800dd8d 	.word	0x0800dd8d
 800dd4c:	0800de2d 	.word	0x0800de2d
 800dd50:	0800de2d 	.word	0x0800de2d
 800dd54:	0800de2d 	.word	0x0800de2d
 800dd58:	0800de2d 	.word	0x0800de2d
 800dd5c:	0800de2d 	.word	0x0800de2d
 800dd60:	0800dd8d 	.word	0x0800dd8d
 800dd64:	0800de2d 	.word	0x0800de2d
 800dd68:	0800de2d 	.word	0x0800de2d
 800dd6c:	0800de2d 	.word	0x0800de2d
 800dd70:	0800de2d 	.word	0x0800de2d
 800dd74:	0800de2d 	.word	0x0800de2d
 800dd78:	0800de2d 	.word	0x0800de2d
 800dd7c:	0800de2d 	.word	0x0800de2d
 800dd80:	0800de2d 	.word	0x0800de2d
 800dd84:	0800de2d 	.word	0x0800de2d
 800dd88:	0800ddb1 	.word	0x0800ddb1
                case ERR_CRC:
                case ERR_PAR:
                case ERR_FRAMING:
                    
                    /* Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */                                        
                    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800dd8c:	4b55      	ldr	r3, [pc, #340]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dd8e:	69da      	ldr	r2, [r3, #28]
 800dd90:	4b54      	ldr	r3, [pc, #336]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd94:	f04f 31ff 	mov.w	r1, #4294967295
 800dd98:	9102      	str	r1, [sp, #8]
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	9101      	str	r1, [sp, #4]
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	f240 1303 	movw	r3, #259	; 0x103
 800dda4:	2100      	movs	r1, #0
 800dda6:	2000      	movs	r0, #0
 800dda8:	f008 ffac 	bl	8016d04 <rfalTransceiveBlockingTx>
                    
                    return ERR_BUSY;
 800ddac:	2302      	movs	r3, #2
 800ddae:	e32e      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
                    
                /*******************************************************************************/
                case ERR_LINK_LOSS:
                    return ret;             /* Debug purposes */
 800ddb0:	88fb      	ldrh	r3, [r7, #6]
 800ddb2:	e32c      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
                    
                case ERR_BUSY:
                    return ret;             /* Debug purposes */
 800ddb4:	88fb      	ldrh	r3, [r7, #6]
 800ddb6:	e32a      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
                    
                /*******************************************************************************/
                case ERR_NONE:
                    *gIsoDep.rxLen = rfalConvBitsToBytes( *gIsoDep.rxLen );
 800ddb8:	4b4a      	ldr	r3, [pc, #296]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800ddba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	3307      	adds	r3, #7
 800ddc0:	08da      	lsrs	r2, r3, #3
 800ddc2:	4b48      	ldr	r3, [pc, #288]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800ddc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc6:	b292      	uxth	r2, r2
 800ddc8:	801a      	strh	r2, [r3, #0]
                    break;
 800ddca:	bf00      	nop

                /*******************************************************************************/
				default:
                    return ret;
            }
            break;
 800ddcc:	bf00      	nop
        default:
            return ERR_INTERNAL;
    }
    
    /* ISO 14443-4 7.5.6.2 CE SHALL NOT attempt error recovery -> clear counters */
    isoDepClearCounters();
 800ddce:	f7fe fdd5 	bl	800c97c <isoDepClearCounters>
    /*******************************************************************************/
    /* No error, process incoming msg                                              */
    /*******************************************************************************/
        
    /* Grab rcvd PCB */
    rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800ddd2:	4b44      	ldr	r3, [pc, #272]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800ddd4:	69db      	ldr	r3, [r3, #28]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	717b      	strb	r3, [r7, #5]
    /*******************************************************************************/
    /* When DID=0 PCD may or may not use DID, therefore check whether current PCD request 
     * has DID present to be reflected on max INF length                         #454  */            
        
    /* ReCalculate Header Length */
    gIsoDep.hdrLen   = RFAL_ISODEP_PCB_LEN;
 800ddda:	4b42      	ldr	r3, [pc, #264]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    gIsoDep.hdrLen  += (uint8_t)( (isoDep_PCBhasDID(rxPCB)) ? RFAL_ISODEP_DID_LEN : 0U );
 800dde2:	4b40      	ldr	r3, [pc, #256]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dde4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800dde8:	797a      	ldrb	r2, [r7, #5]
 800ddea:	f002 0208 	and.w	r2, r2, #8
 800ddee:	2a00      	cmp	r2, #0
 800ddf0:	bf14      	ite	ne
 800ddf2:	2201      	movne	r2, #1
 800ddf4:	2200      	moveq	r2, #0
 800ddf6:	b2d2      	uxtb	r2, r2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	4b39      	ldr	r3, [pc, #228]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800ddfe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    gIsoDep.hdrLen  += (uint8_t)( (isoDep_PCBhasNAD(rxPCB)) ? RFAL_ISODEP_NAD_LEN : 0U );
 800de02:	4b38      	ldr	r3, [pc, #224]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de04:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800de08:	797a      	ldrb	r2, [r7, #5]
 800de0a:	f002 0204 	and.w	r2, r2, #4
 800de0e:	2a00      	cmp	r2, #0
 800de10:	bf14      	ite	ne
 800de12:	2201      	movne	r2, #1
 800de14:	2200      	moveq	r2, #0
 800de16:	b2d2      	uxtb	r2, r2
 800de18:	4413      	add	r3, r2
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	4b31      	ldr	r3, [pc, #196]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de1e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        
    /* Store whether last PCD block had DID. for PICC special handling of DID = 0 */
    if( gIsoDep.did == RFAL_ISODEP_DID_00 )
 800de22:	4b30      	ldr	r3, [pc, #192]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de24:	78db      	ldrb	r3, [r3, #3]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d16a      	bne.n	800df00 <isoDepDataExchangePICC+0x2b8>
 800de2a:	e05d      	b.n	800dee8 <isoDepDataExchangePICC+0x2a0>
                    return ret;
 800de2c:	88fb      	ldrh	r3, [r7, #6]
 800de2e:	e2ee      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            if( !isoDepTimerisExpired( gIsoDep.WTXTimer ) )       /* Do nothing until WTX timer has expired */
 800de30:	4b2c      	ldr	r3, [pc, #176]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de34:	4618      	mov	r0, r3
 800de36:	f00d feed 	bl	801bc14 <timerIsExpired>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f083 0301 	eor.w	r3, r3, #1
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <isoDepDataExchangePICC+0x202>
               return ERR_BUSY;
 800de46:	2302      	movs	r3, #2
 800de48:	e2e1      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            gIsoDep.isWait4WTX = true;
 800de4a:	4b26      	ldr	r3, [pc, #152]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de4c:	2201      	movs	r2, #1
 800de4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            gIsoDep.lastWTXM = (uint8_t)isoDep_WTXMListenerMax( gIsoDep.fwt );
 800de52:	4b24      	ldr	r3, [pc, #144]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d101      	bne.n	800de60 <isoDepDataExchangePICC+0x218>
 800de5c:	2307      	movs	r3, #7
 800de5e:	e000      	b.n	800de62 <isoDepDataExchangePICC+0x21a>
 800de60:	2308      	movs	r3, #8
 800de62:	4618      	mov	r0, r3
 800de64:	f7ff fad4 	bl	800d410 <rfalIsoDepFWI2FWT>
 800de68:	4602      	mov	r2, r0
 800de6a:	4b1e      	ldr	r3, [pc, #120]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b3a      	cmp	r3, #58	; 0x3a
 800de76:	d811      	bhi.n	800de9c <isoDepDataExchangePICC+0x254>
 800de78:	4b1a      	ldr	r3, [pc, #104]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d101      	bne.n	800de86 <isoDepDataExchangePICC+0x23e>
 800de82:	2307      	movs	r3, #7
 800de84:	e000      	b.n	800de88 <isoDepDataExchangePICC+0x240>
 800de86:	2308      	movs	r3, #8
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff fac1 	bl	800d410 <rfalIsoDepFWI2FWT>
 800de8e:	4602      	mov	r2, r0
 800de90:	4b14      	ldr	r3, [pc, #80]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	fbb2 f3f3 	udiv	r3, r2, r3
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	e000      	b.n	800de9e <isoDepDataExchangePICC+0x256>
 800de9c:	233b      	movs	r3, #59	; 0x3b
 800de9e:	4a11      	ldr	r2, [pc, #68]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dea0:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM ) );
 800dea4:	4b0f      	ldr	r3, [pc, #60]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dea6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800deaa:	4619      	mov	r1, r3
 800deac:	2002      	movs	r0, #2
 800deae:	f7fe fe27 	bl	800cb00 <isoDepHandleControlMsg>
 800deb2:	4603      	mov	r3, r0
 800deb4:	80fb      	strh	r3, [r7, #6]
 800deb6:	88fb      	ldrh	r3, [r7, #6]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <isoDepDataExchangePICC+0x278>
 800debc:	88fb      	ldrh	r3, [r7, #6]
 800debe:	e2a6      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            gIsoDep.state = ISODEP_ST_PICC_RX;                    /* Go back to Rx to process WTX ack        */
 800dec0:	4b08      	ldr	r3, [pc, #32]	; (800dee4 <isoDepDataExchangePICC+0x29c>)
 800dec2:	2206      	movs	r2, #6
 800dec4:	701a      	strb	r2, [r3, #0]
            return ERR_BUSY;
 800dec6:	2302      	movs	r3, #2
 800dec8:	e2a1      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            if( rfalIsTransceiveInRx() )        /* Wait until DSL response has been sent */
 800deca:	f008 ff0b 	bl	8016ce4 <rfalIsTransceiveInRx>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <isoDepDataExchangePICC+0x294>
                rfalIsoDepInitialize();         /* Session finished reInit vars */
 800ded4:	f7fe ff32 	bl	800cd3c <rfalIsoDepInitialize>
                return ERR_SLEEP_REQ;           /* Notify Deselect request      */
 800ded8:	2320      	movs	r3, #32
 800deda:	e298      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            return ERR_BUSY;
 800dedc:	2302      	movs	r3, #2
 800dede:	e296      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            return ERR_INTERNAL;
 800dee0:	230c      	movs	r3, #12
 800dee2:	e294      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
 800dee4:	20002aa8 	.word	0x20002aa8
    {
        gIsoDep.lastDID00 = ( (isoDep_PCBhasDID(rxPCB)) ? true : false );
 800dee8:	797b      	ldrb	r3, [r7, #5]
 800deea:	08db      	lsrs	r3, r3, #3
 800deec:	f003 0301 	and.w	r3, r3, #1
 800def0:	2b00      	cmp	r3, #0
 800def2:	bf14      	ite	ne
 800def4:	2301      	movne	r3, #1
 800def6:	2300      	moveq	r3, #0
 800def8:	b2da      	uxtb	r2, r3
 800defa:	4ba6      	ldr	r3, [pc, #664]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800defc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    
    /*******************************************************************************/
    /* Check rcvd msg length, cannot be less then the expected header    OR        * 
     * if the rcvd msg exceeds our announced frame size (FSD)                      */
    if( ((*gIsoDep.rxLen) < gIsoDep.hdrLen) || ((*gIsoDep.rxLen) > (gIsoDep.ourFsx - ISODEP_CRC_LEN)) )
 800df00:	4ba4      	ldr	r3, [pc, #656]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df04:	881a      	ldrh	r2, [r3, #0]
 800df06:	4ba3      	ldr	r3, [pc, #652]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df08:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	429a      	cmp	r2, r3
 800df10:	d308      	bcc.n	800df24 <isoDepDataExchangePICC+0x2dc>
 800df12:	4ba0      	ldr	r3, [pc, #640]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	461a      	mov	r2, r3
 800df1a:	4b9e      	ldr	r3, [pc, #632]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800df1e:	3b02      	subs	r3, #2
 800df20:	429a      	cmp	r2, r3
 800df22:	d913      	bls.n	800df4c <isoDepDataExchangePICC+0x304>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800df24:	4b9b      	ldr	r3, [pc, #620]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800df2a:	4b9a      	ldr	r3, [pc, #616]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df30:	f04f 31ff 	mov.w	r1, #4294967295
 800df34:	9102      	str	r1, [sp, #8]
 800df36:	2100      	movs	r1, #0
 800df38:	9101      	str	r1, [sp, #4]
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	f240 1303 	movw	r3, #259	; 0x103
 800df40:	2100      	movs	r1, #0
 800df42:	2000      	movs	r0, #0
 800df44:	f008 fede 	bl	8016d04 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* ERR_PROTO Ignore this protocol request */
 800df48:	2302      	movs	r3, #2
 800df4a:	e260      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
    }
    
    /* If we are expecting DID, check if PCB signals its presence and if device ID match OR
     * If our DID=0 and DID is sent but with an incorrect value                              */
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   || 
 800df4c:	4b91      	ldr	r3, [pc, #580]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df4e:	78db      	ldrb	r3, [r3, #3]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00c      	beq.n	800df6e <isoDepDataExchangePICC+0x326>
 800df54:	797b      	ldrb	r3, [r7, #5]
 800df56:	f003 0308 	and.w	r3, r3, #8
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d016      	beq.n	800df8c <isoDepDataExchangePICC+0x344>
 800df5e:	4b8d      	ldr	r3, [pc, #564]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df60:	78da      	ldrb	r2, [r3, #3]
 800df62:	4b8c      	ldr	r3, [pc, #560]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df64:	69db      	ldr	r3, [r3, #28]
 800df66:	3301      	adds	r3, #1
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d10e      	bne.n	800df8c <isoDepDataExchangePICC+0x344>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    isoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 800df6e:	4b89      	ldr	r3, [pc, #548]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df70:	78db      	ldrb	r3, [r3, #3]
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   || 
 800df72:	2b00      	cmp	r3, #0
 800df74:	d11e      	bne.n	800dfb4 <isoDepDataExchangePICC+0x36c>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    isoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 800df76:	797b      	ldrb	r3, [r7, #5]
 800df78:	f003 0308 	and.w	r3, r3, #8
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d019      	beq.n	800dfb4 <isoDepDataExchangePICC+0x36c>
 800df80:	4b84      	ldr	r3, [pc, #528]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df82:	69db      	ldr	r3, [r3, #28]
 800df84:	3301      	adds	r3, #1
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d013      	beq.n	800dfb4 <isoDepDataExchangePICC+0x36c>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800df8c:	4b81      	ldr	r3, [pc, #516]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800df92:	4b80      	ldr	r3, [pc, #512]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800df94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df98:	f04f 31ff 	mov.w	r1, #4294967295
 800df9c:	9102      	str	r1, [sp, #8]
 800df9e:	2100      	movs	r1, #0
 800dfa0:	9101      	str	r1, [sp, #4]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	f240 1303 	movw	r3, #259	; 0x103
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	2000      	movs	r0, #0
 800dfac:	f008 feaa 	bl	8016d04 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* Ignore a wrong DID request */
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	e22c      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
    }
    
    /* If we aren't expecting NAD and it's received */
    if( (gIsoDep.nad == RFAL_ISODEP_NO_NAD) && isoDep_PCBhasNAD(rxPCB) )
 800dfb4:	4b77      	ldr	r3, [pc, #476]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800dfb6:	791b      	ldrb	r3, [r3, #4]
 800dfb8:	2bff      	cmp	r3, #255	; 0xff
 800dfba:	d118      	bne.n	800dfee <isoDepDataExchangePICC+0x3a6>
 800dfbc:	797b      	ldrb	r3, [r7, #5]
 800dfbe:	f003 0304 	and.w	r3, r3, #4
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d013      	beq.n	800dfee <isoDepDataExchangePICC+0x3a6>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800dfc6:	4b73      	ldr	r3, [pc, #460]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800dfc8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800dfcc:	4b71      	ldr	r3, [pc, #452]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800dfce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd2:	f04f 31ff 	mov.w	r1, #4294967295
 800dfd6:	9102      	str	r1, [sp, #8]
 800dfd8:	2100      	movs	r1, #0
 800dfda:	9101      	str	r1, [sp, #4]
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	f240 1303 	movw	r3, #259	; 0x103
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	f008 fe8d 	bl	8016d04 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* Ignore a unexpected NAD request */
 800dfea:	2302      	movs	r3, #2
 800dfec:	e20f      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
    }
        
    /*******************************************************************************/
    /* Process S-Block                                                             */
    /*******************************************************************************/
    if( isoDep_PCBisSBlock(rxPCB) )
 800dfee:	797b      	ldrb	r3, [r7, #5]
 800dff0:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800dff4:	2bc2      	cmp	r3, #194	; 0xc2
 800dff6:	f040 8084 	bne.w	800e102 <isoDepDataExchangePICC+0x4ba>
    {
       /* Check if is a Wait Time eXtension */
       if( isoDep_PCBisSWTX(rxPCB) )
 800dffa:	797b      	ldrb	r3, [r7, #5]
 800dffc:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e000:	2bc2      	cmp	r3, #194	; 0xc2
 800e002:	d158      	bne.n	800e0b6 <isoDepDataExchangePICC+0x46e>
 800e004:	797b      	ldrb	r3, [r7, #5]
 800e006:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e00a:	2b30      	cmp	r3, #48	; 0x30
 800e00c:	d153      	bne.n	800e0b6 <isoDepDataExchangePICC+0x46e>
       {
            /* Check if we're expecting a S-WTX */
            if( isoDep_PCBisWTX( gIsoDep.lastPCB ) )
 800e00e:	4b61      	ldr	r3, [pc, #388]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e014:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e018:	2b30      	cmp	r3, #48	; 0x30
 800e01a:	d14c      	bne.n	800e0b6 <isoDepDataExchangePICC+0x46e>
            {
                /* Digital 1.1  15.2.2.11 S(WTX) Ack with different WTXM -> Protocol Error  *
                 *              Power level indication also should be set to 0              */
                if( ( gIsoDep.rxBuf[ gIsoDep.hdrLen ] == gIsoDep.lastWTXM) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SWTX_INF_LEN) )
 800e01c:	4b5d      	ldr	r3, [pc, #372]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	4a5c      	ldr	r2, [pc, #368]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e022:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800e026:	4413      	add	r3, r2
 800e028:	781a      	ldrb	r2, [r3, #0]
 800e02a:	4b5a      	ldr	r3, [pc, #360]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e02c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e030:	429a      	cmp	r2, r3
 800e032:	d140      	bne.n	800e0b6 <isoDepDataExchangePICC+0x46e>
 800e034:	4b57      	ldr	r3, [pc, #348]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	461a      	mov	r2, r3
 800e03c:	4b55      	ldr	r3, [pc, #340]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e03e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	2b01      	cmp	r3, #1
 800e046:	d136      	bne.n	800e0b6 <isoDepDataExchangePICC+0x46e>
                {
                    /* Clear waiting for RTOX Ack Flag */
                    gIsoDep.isWait4WTX = false;
 800e048:	4b52      	ldr	r3, [pc, #328]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                    
                    /* Check if a Tx is already pending */
                    if( gIsoDep.isTxPending )
 800e050:	4b50      	ldr	r3, [pc, #320]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e056:	2b00      	cmp	r3, #0
 800e058:	d004      	beq.n	800e064 <isoDepDataExchangePICC+0x41c>
                    {
                        /* Has a pending Tx, go immediately to TX */ 
                        gIsoDep.state = ISODEP_ST_PICC_TX;
 800e05a:	4b4e      	ldr	r3, [pc, #312]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e05c:	2209      	movs	r2, #9
 800e05e:	701a      	strb	r2, [r3, #0]
                        return ERR_BUSY;
 800e060:	2302      	movs	r3, #2
 800e062:	e1d4      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
                    }
                    
                    /* Set WTX timer */
                    isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( (gIsoDep.lastWTXM * rfalConv1fcToMs( gIsoDep.fwt )) ) );
 800e064:	4b4b      	ldr	r3, [pc, #300]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e066:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4a49      	ldr	r2, [pc, #292]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e06e:	68d2      	ldr	r2, [r2, #12]
 800e070:	4949      	ldr	r1, [pc, #292]	; (800e198 <isoDepDataExchangePICC+0x550>)
 800e072:	fba1 1202 	umull	r1, r2, r1, r2
 800e076:	0b12      	lsrs	r2, r2, #12
 800e078:	b292      	uxth	r2, r2
 800e07a:	fb02 f303 	mul.w	r3, r2, r3
 800e07e:	b29a      	uxth	r2, r3
 800e080:	4b44      	ldr	r3, [pc, #272]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e082:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e086:	4618      	mov	r0, r3
 800e088:	4b42      	ldr	r3, [pc, #264]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	4942      	ldr	r1, [pc, #264]	; (800e198 <isoDepDataExchangePICC+0x550>)
 800e08e:	fba1 1303 	umull	r1, r3, r1, r3
 800e092:	0b1b      	lsrs	r3, r3, #12
 800e094:	fb03 f300 	mul.w	r3, r3, r0
 800e098:	08db      	lsrs	r3, r3, #3
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f00d fda9 	bl	801bbf8 <timerCalculateTimer>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4a3a      	ldr	r2, [pc, #232]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e0aa:	6393      	str	r3, [r2, #56]	; 0x38
                    
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800e0ac:	4b39      	ldr	r3, [pc, #228]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e0ae:	2207      	movs	r2, #7
 800e0b0:	701a      	strb	r2, [r3, #0]
                    return ERR_BUSY;
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	e1ab      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            }
            /* Unexpected/Incorrect S-WTX, fall into reRenable */
       }
       
       /* Check if is a Deselect request */
       if( isoDep_PCBisSDeselect(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SDSL_INF_LEN) )
 800e0b6:	797b      	ldrb	r3, [r7, #5]
 800e0b8:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800e0bc:	2bc2      	cmp	r3, #194	; 0xc2
 800e0be:	f040 8195 	bne.w	800e3ec <isoDepDataExchangePICC+0x7a4>
 800e0c2:	797b      	ldrb	r3, [r7, #5]
 800e0c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f040 818f 	bne.w	800e3ec <isoDepDataExchangePICC+0x7a4>
 800e0ce:	4b31      	ldr	r3, [pc, #196]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d2:	881a      	ldrh	r2, [r3, #0]
 800e0d4:	4b2f      	ldr	r3, [pc, #188]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e0d6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	f040 8185 	bne.w	800e3ec <isoDepDataExchangePICC+0x7a4>
       {
           EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	2003      	movs	r0, #3
 800e0e6:	f7fe fd0b 	bl	800cb00 <isoDepHandleControlMsg>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	80fb      	strh	r3, [r7, #6]
 800e0ee:	88fb      	ldrh	r3, [r7, #6]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <isoDepDataExchangePICC+0x4b0>
 800e0f4:	88fb      	ldrh	r3, [r7, #6]
 800e0f6:	e18a      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
           
           /* S-DSL transmission ongoing, wait until complete */
           gIsoDep.state = ISODEP_ST_PICC_SDSL;
 800e0f8:	4b26      	ldr	r3, [pc, #152]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e0fa:	2208      	movs	r2, #8
 800e0fc:	701a      	strb	r2, [r3, #0]
           return ERR_BUSY;
 800e0fe:	2302      	movs	r3, #2
 800e100:	e185      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
    }
    
    /*******************************************************************************/
    /* Process R-Block                                                             */
    /*******************************************************************************/
    else if( isoDep_PCBisRBlock(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_RBLOCK_INF_LEN))
 800e102:	797b      	ldrb	r3, [r7, #5]
 800e104:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800e108:	2ba2      	cmp	r3, #162	; 0xa2
 800e10a:	f040 809f 	bne.w	800e24c <isoDepDataExchangePICC+0x604>
 800e10e:	4b21      	ldr	r3, [pc, #132]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e112:	881a      	ldrh	r2, [r3, #0]
 800e114:	4b1f      	ldr	r3, [pc, #124]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e116:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	429a      	cmp	r2, r3
 800e11e:	f040 8095 	bne.w	800e24c <isoDepDataExchangePICC+0x604>
    {
        if( isoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 800e122:	797b      	ldrb	r3, [r7, #5]
 800e124:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800e128:	2ba2      	cmp	r3, #162	; 0xa2
 800e12a:	d160      	bne.n	800e1ee <isoDepDataExchangePICC+0x5a6>
 800e12c:	797b      	ldrb	r3, [r7, #5]
 800e12e:	f003 0310 	and.w	r3, r3, #16
 800e132:	2b00      	cmp	r3, #0
 800e134:	d15b      	bne.n	800e1ee <isoDepDataExchangePICC+0x5a6>
        {
            if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )      /* Check block number  */
 800e136:	797b      	ldrb	r3, [r7, #5]
 800e138:	f003 0301 	and.w	r3, r3, #1
 800e13c:	4a15      	ldr	r2, [pc, #84]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e13e:	7892      	ldrb	r2, [r2, #2]
 800e140:	4293      	cmp	r3, r2
 800e142:	d10e      	bne.n	800e162 <isoDepDataExchangePICC+0x51a>
            {
                /* Rule 11 - R(ACK) with current bn -> re-transmit */
                if( !isoDep_PCBisIBlock(gIsoDep.lastPCB) )
 800e144:	4b13      	ldr	r3, [pc, #76]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e14a:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d002      	beq.n	800e158 <isoDepDataExchangePICC+0x510>
                {
                    isoDepReSendControlMsg();
 800e152:	f7fe fd99 	bl	800cc88 <isoDepReSendControlMsg>
 800e156:	e002      	b.n	800e15e <isoDepDataExchangePICC+0x516>
                }
                else
                {
                    gIsoDep.state = ISODEP_ST_PICC_TX;
 800e158:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e15a:	2209      	movs	r2, #9
 800e15c:	701a      	strb	r2, [r3, #0]
                }
                
                return ERR_BUSY;
 800e15e:	2302      	movs	r3, #2
 800e160:	e155      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            }
            else
            {
                if( !gIsoDep.isTxChaining )
 800e162:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e164:	7d9b      	ldrb	r3, [r3, #22]
 800e166:	f083 0301 	eor.w	r3, r3, #1
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d015      	beq.n	800e19c <isoDepDataExchangePICC+0x554>
                {
                    /* Rule 13 violation R(ACK) without performing chaining */
                    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800e170:	4b08      	ldr	r3, [pc, #32]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e172:	69da      	ldr	r2, [r3, #28]
 800e174:	4b07      	ldr	r3, [pc, #28]	; (800e194 <isoDepDataExchangePICC+0x54c>)
 800e176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e178:	f04f 31ff 	mov.w	r1, #4294967295
 800e17c:	9102      	str	r1, [sp, #8]
 800e17e:	2100      	movs	r1, #0
 800e180:	9101      	str	r1, [sp, #4]
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	f240 1303 	movw	r3, #259	; 0x103
 800e188:	2100      	movs	r1, #0
 800e18a:	2000      	movs	r0, #0
 800e18c:	f008 fdba 	bl	8016d04 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;
 800e190:	2302      	movs	r3, #2
 800e192:	e13c      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
 800e194:	20002aa8 	.word	0x20002aa8
 800e198:	4d542005 	.word	0x4d542005
                }
                
                /* Rule E -  R(ACK) with not current bn -> toogle bn */
                isoDep_ToggleBN( gIsoDep.blockNumber );
 800e19c:	4b9e      	ldr	r3, [pc, #632]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e19e:	789b      	ldrb	r3, [r3, #2]
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	bf0c      	ite	eq
 800e1aa:	2301      	moveq	r3, #1
 800e1ac:	2300      	movne	r3, #0
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	4b99      	ldr	r3, [pc, #612]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e1b4:	709a      	strb	r2, [r3, #2]

                /* This block has been transmitted and acknowledged, perform WTX until next data is provided  */

                /* Rule 9 - PICC is allowed to send an S(WTX) instead of an I-block or an R(ACK) */
                isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800e1b6:	4b98      	ldr	r3, [pc, #608]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	4a98      	ldr	r2, [pc, #608]	; (800e41c <isoDepDataExchangePICC+0x7d4>)
 800e1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c0:	0b1b      	lsrs	r3, r3, #12
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	4b94      	ldr	r3, [pc, #592]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	4994      	ldr	r1, [pc, #592]	; (800e41c <isoDepDataExchangePICC+0x7d4>)
 800e1ca:	fba1 1303 	umull	r1, r3, r1, r3
 800e1ce:	0b1b      	lsrs	r3, r3, #12
 800e1d0:	08db      	lsrs	r3, r3, #3
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f00d fd0d 	bl	801bbf8 <timerCalculateTimer>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	4a8d      	ldr	r2, [pc, #564]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e1e2:	6393      	str	r3, [r2, #56]	; 0x38
                gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800e1e4:	4b8c      	ldr	r3, [pc, #560]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e1e6:	2207      	movs	r2, #7
 800e1e8:	701a      	strb	r2, [r3, #0]
                
                /* Rule 13 - R(ACK) with not current bn -> continue chaining */
                return ERR_NONE;                                 /* This block has been transmitted */
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e10f      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            }
        }
        else if( isoDep_PCBisRNAK(rxPCB) )                       /* Check if is a R-NACK */
 800e1ee:	797b      	ldrb	r3, [r7, #5]
 800e1f0:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800e1f4:	2ba2      	cmp	r3, #162	; 0xa2
 800e1f6:	f040 80f8 	bne.w	800e3ea <isoDepDataExchangePICC+0x7a2>
 800e1fa:	797b      	ldrb	r3, [r7, #5]
 800e1fc:	f003 0310 	and.w	r3, r3, #16
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 80f2 	beq.w	800e3ea <isoDepDataExchangePICC+0x7a2>
        {
            if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Check block number  */
 800e206:	797b      	ldrb	r3, [r7, #5]
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	4a82      	ldr	r2, [pc, #520]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e20e:	7892      	ldrb	r2, [r2, #2]
 800e210:	4293      	cmp	r3, r2
 800e212:	d10e      	bne.n	800e232 <isoDepDataExchangePICC+0x5ea>
            {
                /* Rule 11 - R(NAK) with current bn -> re-transmit last x-Block */
                if( !isoDep_PCBisIBlock(gIsoDep.lastPCB) )
 800e214:	4b80      	ldr	r3, [pc, #512]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e21a:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d002      	beq.n	800e228 <isoDepDataExchangePICC+0x5e0>
                {
                    isoDepReSendControlMsg();
 800e222:	f7fe fd31 	bl	800cc88 <isoDepReSendControlMsg>
 800e226:	e002      	b.n	800e22e <isoDepDataExchangePICC+0x5e6>
                }
                else
                {
                    gIsoDep.state = ISODEP_ST_PICC_TX;
 800e228:	4b7b      	ldr	r3, [pc, #492]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e22a:	2209      	movs	r2, #9
 800e22c:	701a      	strb	r2, [r3, #0]
                }
                
                return ERR_BUSY;
 800e22e:	2302      	movs	r3, #2
 800e230:	e0ed      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
            }
            else
            {
                /* Rule 12 - R(NAK) with not current bn -> R(ACK) */
                EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800e232:	2100      	movs	r1, #0
 800e234:	2000      	movs	r0, #0
 800e236:	f7fe fc63 	bl	800cb00 <isoDepHandleControlMsg>
 800e23a:	4603      	mov	r3, r0
 800e23c:	80fb      	strh	r3, [r7, #6]
 800e23e:	88fb      	ldrh	r3, [r7, #6]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <isoDepDataExchangePICC+0x600>
 800e244:	88fb      	ldrh	r3, [r7, #6]
 800e246:	e0e2      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
                
                return ERR_BUSY;
 800e248:	2302      	movs	r3, #2
 800e24a:	e0e0      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
    }
    
    /*******************************************************************************/
    /* Process I-Block                                                             */
    /*******************************************************************************/
    else if( isoDep_PCBisIBlock(rxPCB) )
 800e24c:	797b      	ldrb	r3, [r7, #5]
 800e24e:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 800e252:	2b02      	cmp	r3, #2
 800e254:	f040 80ca 	bne.w	800e3ec <isoDepDataExchangePICC+0x7a4>
    {
        /* Rule D - When an I-block is received, the PICC shall toggle its block number before sending a block */
        isoDep_ToggleBN( gIsoDep.blockNumber );
 800e258:	4b6f      	ldr	r3, [pc, #444]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e25a:	789b      	ldrb	r3, [r3, #2]
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	bf0c      	ite	eq
 800e266:	2301      	moveq	r3, #1
 800e268:	2300      	movne	r3, #0
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	461a      	mov	r2, r3
 800e26e:	4b6a      	ldr	r3, [pc, #424]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e270:	709a      	strb	r2, [r3, #2]
        
        /*******************************************************************************/
        /* Check if the block number is the one expected                               */
        /* Check if PCD sent an I-Block instead ACK/NACK when we are chaining          */
        if( (isoDep_GetBN(rxPCB) != gIsoDep.blockNumber) || (gIsoDep.isTxChaining) )
 800e272:	797b      	ldrb	r3, [r7, #5]
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	4a67      	ldr	r2, [pc, #412]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e27a:	7892      	ldrb	r2, [r2, #2]
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d103      	bne.n	800e288 <isoDepDataExchangePICC+0x640>
 800e280:	4b65      	ldr	r3, [pc, #404]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e282:	7d9b      	ldrb	r3, [r3, #22]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d01e      	beq.n	800e2c6 <isoDepDataExchangePICC+0x67e>
        {
            /* Remain in the same Block Number */
            isoDep_ToggleBN( gIsoDep.blockNumber );
 800e288:	4b63      	ldr	r3, [pc, #396]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e28a:	789b      	ldrb	r3, [r3, #2]
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	b2db      	uxtb	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	bf0c      	ite	eq
 800e296:	2301      	moveq	r3, #1
 800e298:	2300      	movne	r3, #0
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	461a      	mov	r2, r3
 800e29e:	4b5e      	ldr	r3, [pc, #376]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e2a0:	709a      	strb	r2, [r3, #2]
            
            /* ISO 14443-4 7.5.6.2 & Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */                                  
            isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800e2a2:	4b5d      	ldr	r3, [pc, #372]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e2a4:	69da      	ldr	r2, [r3, #28]
 800e2a6:	4b5c      	ldr	r3, [pc, #368]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2aa:	f04f 31ff 	mov.w	r1, #4294967295
 800e2ae:	9102      	str	r1, [sp, #8]
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	9101      	str	r1, [sp, #4]
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	f240 1303 	movw	r3, #259	; 0x103
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	2000      	movs	r0, #0
 800e2be:	f008 fd21 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	e0a3      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
        }
        
        /*******************************************************************************/
        /* is PCD performing chaining  ?                                               */
        if( isoDep_PCBisChaining(rxPCB) )
 800e2c6:	797b      	ldrb	r3, [r7, #5]
 800e2c8:	f003 0310 	and.w	r3, r3, #16
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d03e      	beq.n	800e34e <isoDepDataExchangePICC+0x706>
        {
            gIsoDep.isRxChaining  = true;
 800e2d0:	4b51      	ldr	r3, [pc, #324]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	75da      	strb	r2, [r3, #23]
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 800e2d6:	4b50      	ldr	r3, [pc, #320]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2da:	2201      	movs	r2, #1
 800e2dc:	701a      	strb	r2, [r3, #0]
                        
            EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800e2de:	2100      	movs	r1, #0
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	f7fe fc0d 	bl	800cb00 <isoDepHandleControlMsg>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	80fb      	strh	r3, [r7, #6]
 800e2ea:	88fb      	ldrh	r3, [r7, #6]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d001      	beq.n	800e2f4 <isoDepDataExchangePICC+0x6ac>
 800e2f0:	88fb      	ldrh	r3, [r7, #6]
 800e2f2:	e08c      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
                            
            /* Received I-Block with chaining, send current data to DH */
            
            /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
            *gIsoDep.rxLen -= gIsoDep.hdrLen;
 800e2f4:	4b48      	ldr	r3, [pc, #288]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f8:	8819      	ldrh	r1, [r3, #0]
 800e2fa:	4b47      	ldr	r3, [pc, #284]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e2fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e300:	b29a      	uxth	r2, r3
 800e302:	4b45      	ldr	r3, [pc, #276]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e306:	1a8a      	subs	r2, r1, r2
 800e308:	b292      	uxth	r2, r2
 800e30a:	801a      	strh	r2, [r3, #0]
            if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 800e30c:	4b42      	ldr	r3, [pc, #264]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e30e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800e312:	4b41      	ldr	r3, [pc, #260]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e314:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e318:	429a      	cmp	r2, r3
 800e31a:	d016      	beq.n	800e34a <isoDepDataExchangePICC+0x702>
 800e31c:	4b3e      	ldr	r3, [pc, #248]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d011      	beq.n	800e34a <isoDepDataExchangePICC+0x702>
            {
                ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 800e326:	4b3c      	ldr	r3, [pc, #240]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	4a3b      	ldr	r2, [pc, #236]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e32c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800e330:	1898      	adds	r0, r3, r2
 800e332:	4b39      	ldr	r3, [pc, #228]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e334:	69db      	ldr	r3, [r3, #28]
 800e336:	4a38      	ldr	r2, [pc, #224]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e338:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800e33c:	1899      	adds	r1, r3, r2
 800e33e:	4b36      	ldr	r3, [pc, #216]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	461a      	mov	r2, r3
 800e346:	f00d fcc1 	bl	801bccc <memmove>
            }
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/            
 800e34a:	230d      	movs	r3, #13
 800e34c:	e05f      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
        }
        
        
        /*******************************************************************************/
        /* PCD is not performing chaining                                              */
        gIsoDep.isRxChaining  = false; /* clear PCD chaining flag */
 800e34e:	4b32      	ldr	r3, [pc, #200]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e350:	2200      	movs	r2, #0
 800e352:	75da      	strb	r2, [r3, #23]
        *gIsoDep.rxChaining   = false; /* Output Parameter        */
 800e354:	4b30      	ldr	r3, [pc, #192]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e358:	2200      	movs	r2, #0
 800e35a:	701a      	strb	r2, [r3, #0]
        
        /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
        *gIsoDep.rxLen -= gIsoDep.hdrLen;
 800e35c:	4b2e      	ldr	r3, [pc, #184]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e360:	8819      	ldrh	r1, [r3, #0]
 800e362:	4b2d      	ldr	r3, [pc, #180]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e364:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e368:	b29a      	uxth	r2, r3
 800e36a:	4b2b      	ldr	r3, [pc, #172]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e36e:	1a8a      	subs	r2, r1, r2
 800e370:	b292      	uxth	r2, r2
 800e372:	801a      	strh	r2, [r3, #0]
        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 800e374:	4b28      	ldr	r3, [pc, #160]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e376:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800e37a:	4b27      	ldr	r3, [pc, #156]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e37c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e380:	429a      	cmp	r2, r3
 800e382:	d016      	beq.n	800e3b2 <isoDepDataExchangePICC+0x76a>
 800e384:	4b24      	ldr	r3, [pc, #144]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e388:	881b      	ldrh	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d011      	beq.n	800e3b2 <isoDepDataExchangePICC+0x76a>
        {
            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 800e38e:	4b22      	ldr	r3, [pc, #136]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e390:	69db      	ldr	r3, [r3, #28]
 800e392:	4a21      	ldr	r2, [pc, #132]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e394:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800e398:	1898      	adds	r0, r3, r2
 800e39a:	4b1f      	ldr	r3, [pc, #124]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e39c:	69db      	ldr	r3, [r3, #28]
 800e39e:	4a1e      	ldr	r2, [pc, #120]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3a0:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800e3a4:	1899      	adds	r1, r3, r2
 800e3a6:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	f00d fc8d 	bl	801bccc <memmove>
        }
        
        
        /*******************************************************************************/
        /* Reception done, send data back and start WTX timer                          */
        isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800e3b2:	4b19      	ldr	r3, [pc, #100]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	4a19      	ldr	r2, [pc, #100]	; (800e41c <isoDepDataExchangePICC+0x7d4>)
 800e3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3bc:	0b1b      	lsrs	r3, r3, #12
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	4b15      	ldr	r3, [pc, #84]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	4915      	ldr	r1, [pc, #84]	; (800e41c <isoDepDataExchangePICC+0x7d4>)
 800e3c6:	fba1 1303 	umull	r1, r3, r1, r3
 800e3ca:	0b1b      	lsrs	r3, r3, #12
 800e3cc:	08db      	lsrs	r3, r3, #3
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f00d fc0f 	bl	801bbf8 <timerCalculateTimer>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	4a0e      	ldr	r2, [pc, #56]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3de:	6393      	str	r3, [r2, #56]	; 0x38
        
        gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800e3e0:	4b0d      	ldr	r3, [pc, #52]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3e2:	2207      	movs	r2, #7
 800e3e4:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e011      	b.n	800e40e <isoDepDataExchangePICC+0x7c6>
        if( isoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 800e3ea:	bf00      	nop
        /* MISRA 15.7 - Empty else */
    }
    
    /* Unexpected/Unknown Block */
    /* ISO 14443-4 7.5.6.2 & Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */
    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800e3ec:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3ee:	69da      	ldr	r2, [r3, #28]
 800e3f0:	4b09      	ldr	r3, [pc, #36]	; (800e418 <isoDepDataExchangePICC+0x7d0>)
 800e3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f4:	f04f 31ff 	mov.w	r1, #4294967295
 800e3f8:	9102      	str	r1, [sp, #8]
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	9101      	str	r1, [sp, #4]
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	f240 1303 	movw	r3, #259	; 0x103
 800e404:	2100      	movs	r1, #0
 800e406:	2000      	movs	r0, #0
 800e408:	f008 fc7c 	bl	8016d04 <rfalTransceiveBlockingTx>
    
    return ERR_BUSY;
 800e40c:	2302      	movs	r3, #2
}
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	bd90      	pop	{r4, r7, pc}
 800e416:	bf00      	nop
 800e418:	20002aa8 	.word	0x20002aa8
 800e41c:	4d542005 	.word	0x4d542005

0800e420 <rfalIsoDepStartRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
static ReturnCode rfalIsoDepStartRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats, uint8_t *atsLen )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b08c      	sub	sp, #48	; 0x30
 800e424:	af00      	add	r7, sp, #0
 800e426:	60ba      	str	r2, [r7, #8]
 800e428:	607b      	str	r3, [r7, #4]
 800e42a:	4603      	mov	r3, r0
 800e42c:	73fb      	strb	r3, [r7, #15]
 800e42e:	460b      	mov	r3, r1
 800e430:	73bb      	strb	r3, [r7, #14]
    rfalTransceiveContext ctx;
    
    if( ats == NULL)
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d101      	bne.n	800e43c <rfalIsoDepStartRATS+0x1c>
    {
        return ERR_PARAM;
 800e438:	2307      	movs	r3, #7
 800e43a:	e02c      	b.n	800e496 <rfalIsoDepStartRATS+0x76>
    }
    
    gIsoDep.rxBuf   = (uint8_t*) ats;
 800e43c:	4a18      	ldr	r2, [pc, #96]	; (800e4a0 <rfalIsoDepStartRATS+0x80>)
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	61d3      	str	r3, [r2, #28]
    gIsoDep.rxLen8  = atsLen;
 800e442:	4a17      	ldr	r2, [pc, #92]	; (800e4a0 <rfalIsoDepStartRATS+0x80>)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6793      	str	r3, [r2, #120]	; 0x78
    gIsoDep.did     = DID;
 800e448:	4a15      	ldr	r2, [pc, #84]	; (800e4a0 <rfalIsoDepStartRATS+0x80>)
 800e44a:	7bbb      	ldrb	r3, [r7, #14]
 800e44c:	70d3      	strb	r3, [r2, #3]
    
    /*******************************************************************************/
    /* Compose RATS */
    gIsoDep.actv.ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 800e44e:	4b14      	ldr	r3, [pc, #80]	; (800e4a0 <rfalIsoDepStartRATS+0x80>)
 800e450:	22e0      	movs	r2, #224	; 0xe0
 800e452:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800e456:	7bfb      	ldrb	r3, [r7, #15]
 800e458:	011b      	lsls	r3, r3, #4
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	7bbb      	ldrb	r3, [r7, #14]
 800e45e:	f003 030f 	and.w	r3, r3, #15
 800e462:	b2db      	uxtb	r3, r3
 800e464:	4313      	orrs	r3, r2
 800e466:	b2da      	uxtb	r2, r3
 800e468:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <rfalIsoDepStartRATS+0x80>)
 800e46a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800e46e:	4b0d      	ldr	r3, [pc, #52]	; (800e4a4 <rfalIsoDepStartRATS+0x84>)
 800e470:	617b      	str	r3, [r7, #20]
 800e472:	2310      	movs	r3, #16
 800e474:	833b      	strh	r3, [r7, #24]
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	61fb      	str	r3, [r7, #28]
 800e47a:	23a0      	movs	r3, #160	; 0xa0
 800e47c:	843b      	strh	r3, [r7, #32]
 800e47e:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <rfalIsoDepStartRATS+0x88>)
 800e480:	627b      	str	r3, [r7, #36]	; 0x24
 800e482:	2300      	movs	r3, #0
 800e484:	62bb      	str	r3, [r7, #40]	; 0x28
 800e486:	4b09      	ldr	r3, [pc, #36]	; (800e4ac <rfalIsoDepStartRATS+0x8c>)
 800e488:	62fb      	str	r3, [r7, #44]	; 0x2c
    return rfalStartTransceive( &ctx );
 800e48a:	f107 0314 	add.w	r3, r7, #20
 800e48e:	4618      	mov	r0, r3
 800e490:	f008 fad0 	bl	8016a34 <rfalStartTransceive>
 800e494:	4603      	mov	r3, r0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3730      	adds	r7, #48	; 0x30
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	20002aa8 	.word	0x20002aa8
 800e4a4:	20002af4 	.word	0x20002af4
 800e4a8:	20002aca 	.word	0x20002aca
 800e4ac:	00046780 	.word	0x00046780

0800e4b0 <rfalIsoDepGetRATSStatus>:


/*******************************************************************************/
static ReturnCode rfalIsoDepGetRATSStatus( void )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    ret = rfalGetTransceiveStatus();
 800e4b6:	f008 fced 	bl	8016e94 <rfalGetTransceiveStatus>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	80fb      	strh	r3, [r7, #6]
    if( ret == ERR_NONE )
 800e4be:	88fb      	ldrh	r3, [r7, #6]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d12e      	bne.n	800e522 <rfalIsoDepGetRATSStatus+0x72>
    {
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 800e4c4:	4b19      	ldr	r3, [pc, #100]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e4c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e4c8:	3307      	adds	r3, #7
 800e4ca:	08db      	lsrs	r3, r3, #3
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	4b17      	ldr	r3, [pc, #92]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e4d0:	845a      	strh	r2, [r3, #34]	; 0x22
        
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATS_MIN_LEN) || (gIsoDep.rxBufLen > RFAL_ISODEP_ATS_MAX_LEN) || ( gIsoDep.rxBuf[RFAL_ISODEP_ATS_TL_POS] != gIsoDep.rxBufLen) )
 800e4d2:	4b16      	ldr	r3, [pc, #88]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e4d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00b      	beq.n	800e4f2 <rfalIsoDepGetRATSStatus+0x42>
 800e4da:	4b14      	ldr	r3, [pc, #80]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e4dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e4de:	2b14      	cmp	r3, #20
 800e4e0:	d807      	bhi.n	800e4f2 <rfalIsoDepGetRATSStatus+0x42>
 800e4e2:	4b12      	ldr	r3, [pc, #72]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e4e4:	69db      	ldr	r3, [r3, #28]
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	4b10      	ldr	r3, [pc, #64]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e4ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d001      	beq.n	800e4f6 <rfalIsoDepGetRATSStatus+0x46>
        {
            return ERR_PROTO;
 800e4f2:	230b      	movs	r3, #11
 800e4f4:	e016      	b.n	800e524 <rfalIsoDepGetRATSStatus+0x74>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t) (gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e4f8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e4fc:	091b      	lsrs	r3, r3, #4
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe ffa5 	bl	800d450 <rfalIsoDepFSxI2FSx>
 800e506:	4603      	mov	r3, r0
 800e508:	461a      	mov	r2, r3
 800e50a:	4b08      	ldr	r3, [pc, #32]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e50c:	84da      	strh	r2, [r3, #38]	; 0x26
        
        /* Check and assign if ATS length was requested (length also available on TL) */
        if( gIsoDep.rxLen8 != NULL )
 800e50e:	4b07      	ldr	r3, [pc, #28]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e512:	2b00      	cmp	r3, #0
 800e514:	d005      	beq.n	800e522 <rfalIsoDepGetRATSStatus+0x72>
        {
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 800e516:	4b05      	ldr	r3, [pc, #20]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e518:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800e51a:	4b04      	ldr	r3, [pc, #16]	; (800e52c <rfalIsoDepGetRATSStatus+0x7c>)
 800e51c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e51e:	b2d2      	uxtb	r2, r2
 800e520:	701a      	strb	r2, [r3, #0]
        }
    }
    
    return ret;
 800e522:	88fb      	ldrh	r3, [r7, #6]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20002aa8 	.word	0x20002aa8

0800e530 <rfalIsoDepStartPPS>:
}


/*******************************************************************************/
static ReturnCode rfalIsoDepStartPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08a      	sub	sp, #40	; 0x28
 800e534:	af00      	add	r7, sp, #0
 800e536:	603b      	str	r3, [r7, #0]
 800e538:	4603      	mov	r3, r0
 800e53a:	71fb      	strb	r3, [r7, #7]
 800e53c:	460b      	mov	r3, r1
 800e53e:	71bb      	strb	r3, [r7, #6]
 800e540:	4613      	mov	r3, r2
 800e542:	717b      	strb	r3, [r7, #5]
    rfalTransceiveContext ctx;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d008      	beq.n	800e55c <rfalIsoDepStartPPS+0x2c>
 800e54a:	79bb      	ldrb	r3, [r7, #6]
 800e54c:	2b03      	cmp	r3, #3
 800e54e:	d805      	bhi.n	800e55c <rfalIsoDepStartPPS+0x2c>
 800e550:	797b      	ldrb	r3, [r7, #5]
 800e552:	2b03      	cmp	r3, #3
 800e554:	d802      	bhi.n	800e55c <rfalIsoDepStartPPS+0x2c>
 800e556:	79fb      	ldrb	r3, [r7, #7]
 800e558:	2b0e      	cmp	r3, #14
 800e55a:	d901      	bls.n	800e560 <rfalIsoDepStartPPS+0x30>
    {
        return ERR_PARAM;
 800e55c:	2307      	movs	r3, #7
 800e55e:	e032      	b.n	800e5c6 <rfalIsoDepStartPPS+0x96>
    }
        
    gIsoDep.rxBuf   = (uint8_t*) ppsRes;
 800e560:	4a1b      	ldr	r2, [pc, #108]	; (800e5d0 <rfalIsoDepStartPPS+0xa0>)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	61d3      	str	r3, [r2, #28]
    
    /*******************************************************************************/
    /* Compose PPS Request */
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 800e566:	79fb      	ldrb	r3, [r7, #7]
 800e568:	f003 030f 	and.w	r3, r3, #15
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800e572:	b2da      	uxtb	r2, r3
 800e574:	4b16      	ldr	r3, [pc, #88]	; (800e5d0 <rfalIsoDepStartPPS+0xa0>)
 800e576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 800e57a:	4b15      	ldr	r3, [pc, #84]	; (800e5d0 <rfalIsoDepStartPPS+0xa0>)
 800e57c:	2211      	movs	r2, #17
 800e57e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    gIsoDep.actv.ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 800e582:	79bb      	ldrb	r3, [r7, #6]
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	b25a      	sxtb	r2, r3
 800e588:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	b25b      	sxtb	r3, r3
 800e590:	b2db      	uxtb	r3, r3
 800e592:	f003 030f 	and.w	r3, r3, #15
 800e596:	b2da      	uxtb	r2, r3
 800e598:	4b0d      	ldr	r3, [pc, #52]	; (800e5d0 <rfalIsoDepStartPPS+0xa0>)
 800e59a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800e59e:	4b0d      	ldr	r3, [pc, #52]	; (800e5d4 <rfalIsoDepStartPPS+0xa4>)
 800e5a0:	60fb      	str	r3, [r7, #12]
 800e5a2:	2318      	movs	r3, #24
 800e5a4:	823b      	strh	r3, [r7, #16]
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	617b      	str	r3, [r7, #20]
 800e5aa:	2308      	movs	r3, #8
 800e5ac:	833b      	strh	r3, [r7, #24]
 800e5ae:	4b0a      	ldr	r3, [pc, #40]	; (800e5d8 <rfalIsoDepStartPPS+0xa8>)
 800e5b0:	61fb      	str	r3, [r7, #28]
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	623b      	str	r3, [r7, #32]
 800e5b6:	4b09      	ldr	r3, [pc, #36]	; (800e5dc <rfalIsoDepStartPPS+0xac>)
 800e5b8:	627b      	str	r3, [r7, #36]	; 0x24
    return rfalStartTransceive( &ctx );
 800e5ba:	f107 030c 	add.w	r3, r7, #12
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f008 fa38 	bl	8016a34 <rfalStartTransceive>
 800e5c4:	4603      	mov	r3, r0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3728      	adds	r7, #40	; 0x28
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	20002aa8 	.word	0x20002aa8
 800e5d4:	20002af4 	.word	0x20002af4
 800e5d8:	20002aca 	.word	0x20002aca
 800e5dc:	00046780 	.word	0x00046780

0800e5e0 <rfalIsoDepGetPPSSTatus>:


/*******************************************************************************/
static ReturnCode rfalIsoDepGetPPSSTatus( void )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    ret = rfalGetTransceiveStatus();
 800e5e6:	f008 fc55 	bl	8016e94 <rfalGetTransceiveStatus>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	80fb      	strh	r3, [r7, #6]
    if( ret == ERR_NONE )
 800e5ee:	88fb      	ldrh	r3, [r7, #6]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d114      	bne.n	800e61e <rfalIsoDepGetPPSSTatus+0x3e>
    {
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 800e5f4:	4b0c      	ldr	r3, [pc, #48]	; (800e628 <rfalIsoDepGetPPSSTatus+0x48>)
 800e5f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e5f8:	3307      	adds	r3, #7
 800e5fa:	08db      	lsrs	r3, r3, #3
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	4b0a      	ldr	r3, [pc, #40]	; (800e628 <rfalIsoDepGetPPSSTatus+0x48>)
 800e600:	845a      	strh	r2, [r3, #34]	; 0x22
        
        /* Check for valid PPS Response   */
        if( (gIsoDep.rxBufLen != RFAL_ISODEP_PPS_RES_LEN) || (*gIsoDep.rxBuf != gIsoDep.actv.ppsReq.PPSS) ) 
 800e602:	4b09      	ldr	r3, [pc, #36]	; (800e628 <rfalIsoDepGetPPSSTatus+0x48>)
 800e604:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e606:	2b01      	cmp	r3, #1
 800e608:	d107      	bne.n	800e61a <rfalIsoDepGetPPSSTatus+0x3a>
 800e60a:	4b07      	ldr	r3, [pc, #28]	; (800e628 <rfalIsoDepGetPPSSTatus+0x48>)
 800e60c:	69db      	ldr	r3, [r3, #28]
 800e60e:	781a      	ldrb	r2, [r3, #0]
 800e610:	4b05      	ldr	r3, [pc, #20]	; (800e628 <rfalIsoDepGetPPSSTatus+0x48>)
 800e612:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e616:	429a      	cmp	r2, r3
 800e618:	d001      	beq.n	800e61e <rfalIsoDepGetPPSSTatus+0x3e>
        {
            return ERR_PROTO;
 800e61a:	230b      	movs	r3, #11
 800e61c:	e000      	b.n	800e620 <rfalIsoDepGetPPSSTatus+0x40>
        }
    }
    return ret;
 800e61e:	88fb      	ldrh	r3, [r7, #6]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	20002aa8 	.word	0x20002aa8

0800e62c <rfalIsoDepStartATTRIB>:


#if RFAL_FEATURE_NFCB

static ReturnCode rfalIsoDepStartATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08a      	sub	sp, #40	; 0x28
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	4608      	mov	r0, r1
 800e636:	4611      	mov	r1, r2
 800e638:	461a      	mov	r2, r3
 800e63a:	4603      	mov	r3, r0
 800e63c:	70fb      	strb	r3, [r7, #3]
 800e63e:	460b      	mov	r3, r1
 800e640:	70bb      	strb	r3, [r7, #2]
 800e642:	4613      	mov	r3, r2
 800e644:	707b      	strb	r3, [r7, #1]
    rfalTransceiveContext ctx;
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800e646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00c      	beq.n	800e666 <rfalIsoDepStartATTRIB+0x3a>
 800e64c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d009      	beq.n	800e666 <rfalIsoDepStartATTRIB+0x3a>
 800e652:	78bb      	ldrb	r3, [r7, #2]
 800e654:	2b03      	cmp	r3, #3
 800e656:	d806      	bhi.n	800e666 <rfalIsoDepStartATTRIB+0x3a>
 800e658:	787b      	ldrb	r3, [r7, #1]
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d803      	bhi.n	800e666 <rfalIsoDepStartATTRIB+0x3a>
 800e65e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e662:	2b0e      	cmp	r3, #14
 800e664:	d901      	bls.n	800e66a <rfalIsoDepStartATTRIB+0x3e>
    {
        return ERR_NONE;
 800e666:	2300      	movs	r3, #0
 800e668:	e06f      	b.n	800e74a <rfalIsoDepStartATTRIB+0x11e>
    }
    
    gIsoDep.rxBuf   = (uint8_t*)  attribRes;
 800e66a:	4a3a      	ldr	r2, [pc, #232]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e66c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e66e:	61d3      	str	r3, [r2, #28]
    gIsoDep.rxLen8  = attribResLen;
 800e670:	4a38      	ldr	r2, [pc, #224]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e674:	6793      	str	r3, [r2, #120]	; 0x78
    gIsoDep.did     = DID;
 800e676:	4a37      	ldr	r2, [pc, #220]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e678:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e67c:	70d3      	strb	r3, [r2, #3]
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 800e67e:	4b35      	ldr	r3, [pc, #212]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e680:	221d      	movs	r2, #29
 800e682:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 800e686:	4a33      	ldr	r2, [pc, #204]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e688:	78fb      	ldrb	r3, [r7, #3]
 800e68a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800e68e:	78bb      	ldrb	r3, [r7, #2]
 800e690:	019b      	lsls	r3, r3, #6
 800e692:	b25a      	sxtb	r2, r3
 800e694:	787b      	ldrb	r3, [r7, #1]
 800e696:	011b      	lsls	r3, r3, #4
 800e698:	b25b      	sxtb	r3, r3
 800e69a:	4313      	orrs	r3, r2
 800e69c:	b25b      	sxtb	r3, r3
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	f023 030f 	bic.w	r3, r3, #15
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e6aa:	f003 030f 	and.w	r3, r3, #15
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	4b27      	ldr	r3, [pc, #156]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e6b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    gIsoDep.actv.attribReq.Param.PARAM3 = PARAM3;
 800e6ba:	4a26      	ldr	r2, [pc, #152]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e6bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e6c0:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
    gIsoDep.actv.attribReq.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 800e6c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e6c8:	f003 030f 	and.w	r3, r3, #15
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	4b21      	ldr	r3, [pc, #132]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e6d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	461a      	mov	r2, r3
    ST_MEMCPY(gIsoDep.actv.attribReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 800e6da:	4b1e      	ldr	r3, [pc, #120]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e6dc:	f8c3 204d 	str.w	r2, [r3, #77]	; 0x4d
    
     /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 800e6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00e      	beq.n	800e704 <rfalIsoDepStartATTRIB+0xd8>
 800e6e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00a      	beq.n	800e704 <rfalIsoDepStartATTRIB+0xd8>
    {
        ST_MEMCPY(gIsoDep.actv.attribReq.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 800e6ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e6f2:	2b20      	cmp	r3, #32
 800e6f4:	bf28      	it	cs
 800e6f6:	2320      	movcs	r3, #32
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6fe:	4816      	ldr	r0, [pc, #88]	; (800e758 <rfalIsoDepStartATTRIB+0x12c>)
 800e700:	f00d fad6 	bl	801bcb0 <memcpy>
    }
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800e704:	4b15      	ldr	r3, [pc, #84]	; (800e75c <rfalIsoDepStartATTRIB+0x130>)
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e70c:	2b1f      	cmp	r3, #31
 800e70e:	d807      	bhi.n	800e720 <rfalIsoDepStartATTRIB+0xf4>
 800e710:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e714:	b29b      	uxth	r3, r3
 800e716:	3309      	adds	r3, #9
 800e718:	b29b      	uxth	r3, r3
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	e001      	b.n	800e724 <rfalIsoDepStartATTRIB+0xf8>
 800e720:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800e724:	823b      	strh	r3, [r7, #16]
 800e726:	4b0b      	ldr	r3, [pc, #44]	; (800e754 <rfalIsoDepStartATTRIB+0x128>)
 800e728:	69db      	ldr	r3, [r3, #28]
 800e72a:	617b      	str	r3, [r7, #20]
 800e72c:	f44f 7384 	mov.w	r3, #264	; 0x108
 800e730:	833b      	strh	r3, [r7, #24]
 800e732:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <rfalIsoDepStartATTRIB+0x134>)
 800e734:	61fb      	str	r3, [r7, #28]
 800e736:	2300      	movs	r3, #0
 800e738:	623b      	str	r3, [r7, #32]
 800e73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e73c:	627b      	str	r3, [r7, #36]	; 0x24
    return rfalStartTransceive( &ctx );
 800e73e:	f107 030c 	add.w	r3, r7, #12
 800e742:	4618      	mov	r0, r3
 800e744:	f008 f976 	bl	8016a34 <rfalStartTransceive>
 800e748:	4603      	mov	r3, r0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3728      	adds	r7, #40	; 0x28
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	20002aa8 	.word	0x20002aa8
 800e758:	20002afd 	.word	0x20002afd
 800e75c:	20002af4 	.word	0x20002af4
 800e760:	20002aca 	.word	0x20002aca

0800e764 <rfalIsoDepGetATTRIBStatus>:


/*******************************************************************************/
static ReturnCode rfalIsoDepGetATTRIBStatus( void )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    ret = rfalGetTransceiveStatus();
 800e76a:	f008 fb93 	bl	8016e94 <rfalGetTransceiveStatus>
 800e76e:	4603      	mov	r3, r0
 800e770:	80fb      	strh	r3, [r7, #6]
    if( ret == ERR_NONE )
 800e772:	88fb      	ldrh	r3, [r7, #6]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d12c      	bne.n	800e7d2 <rfalIsoDepGetATTRIBStatus+0x6e>
    {
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 800e778:	4b18      	ldr	r3, [pc, #96]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e77a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e77c:	3307      	adds	r3, #7
 800e77e:	08db      	lsrs	r3, r3, #3
 800e780:	b29a      	uxth	r2, r3
 800e782:	4b16      	ldr	r3, [pc, #88]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e784:	845a      	strh	r2, [r3, #34]	; 0x22
        
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((gIsoDep.rxBuf[RFAL_ISODEP_ATTRIB_RES_MBLIDID_POS] & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did) )
 800e786:	4b15      	ldr	r3, [pc, #84]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e788:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d008      	beq.n	800e7a0 <rfalIsoDepGetATTRIBStatus+0x3c>
 800e78e:	4b13      	ldr	r3, [pc, #76]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e790:	69db      	ldr	r3, [r3, #28]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	f003 030f 	and.w	r3, r3, #15
 800e798:	4a10      	ldr	r2, [pc, #64]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e79a:	78d2      	ldrb	r2, [r2, #3]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d001      	beq.n	800e7a4 <rfalIsoDepGetATTRIBStatus+0x40>
        {
           return ERR_PROTO;
 800e7a0:	230b      	movs	r3, #11
 800e7a2:	e017      	b.n	800e7d4 <rfalIsoDepGetATTRIBStatus+0x70>
        }
        
        if( gIsoDep.rxLen8 != NULL )
 800e7a4:	4b0d      	ldr	r3, [pc, #52]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d005      	beq.n	800e7b8 <rfalIsoDepGetATTRIBStatus+0x54>
        {
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 800e7ac:	4b0b      	ldr	r3, [pc, #44]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e7ae:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e7b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7b4:	b2d2      	uxtb	r2, r2
 800e7b6:	701a      	strb	r2, [r3, #0]
        }
        
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)(gIsoDep.actv.attribReq.Param.PARAM2 & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800e7b8:	4b08      	ldr	r3, [pc, #32]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e7ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e7be:	f003 030f 	and.w	r3, r3, #15
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fe fe43 	bl	800d450 <rfalIsoDepFSxI2FSx>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	4b03      	ldr	r3, [pc, #12]	; (800e7dc <rfalIsoDepGetATTRIBStatus+0x78>)
 800e7d0:	84da      	strh	r2, [r3, #38]	; 0x26
    }
   
   return ret;
 800e7d2:	88fb      	ldrh	r3, [r7, #6]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20002aa8 	.word	0x20002aa8

0800e7e0 <rfalIsoDepPollAStartActivation>:
}


/*******************************************************************************/
ReturnCode rfalIsoDepPollAStartActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	603b      	str	r3, [r7, #0]
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	71fb      	strb	r3, [r7, #7]
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	71bb      	strb	r3, [r7, #6]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    
    if( isoDepDev == NULL )
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d101      	bne.n	800e7fe <rfalIsoDepPollAStartActivation+0x1e>
    {
        return ERR_PARAM;
 800e7fa:	2307      	movs	r3, #7
 800e7fc:	e020      	b.n	800e840 <rfalIsoDepPollAStartActivation+0x60>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800e7fe:	2002      	movs	r0, #2
 800e800:	f008 f80e 	bl	8016820 <rfalSetErrorHandling>
    
    /* Start RATS Transceive */
    EXIT_ON_ERR( ret, rfalIsoDepStartRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen ) );
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	3314      	adds	r3, #20
 800e80a:	79b9      	ldrb	r1, [r7, #6]
 800e80c:	79f8      	ldrb	r0, [r7, #7]
 800e80e:	f7ff fe07 	bl	800e420 <rfalIsoDepStartRATS>
 800e812:	4603      	mov	r3, r0
 800e814:	81fb      	strh	r3, [r7, #14]
 800e816:	89fb      	ldrh	r3, [r7, #14]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d001      	beq.n	800e820 <rfalIsoDepPollAStartActivation+0x40>
 800e81c:	89fb      	ldrh	r3, [r7, #14]
 800e81e:	e00f      	b.n	800e840 <rfalIsoDepPollAStartActivation+0x60>
    
    isoDepDev->info.DSI = maxBR;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	797a      	ldrb	r2, [r7, #5]
 800e824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    gIsoDep.actvDev     = isoDepDev;
 800e828:	4a07      	ldr	r2, [pc, #28]	; (800e848 <rfalIsoDepPollAStartActivation+0x68>)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	67d3      	str	r3, [r2, #124]	; 0x7c
    gIsoDep.cntRRetrys  = gIsoDep.maxRetriesRATS;
 800e82e:	4b06      	ldr	r3, [pc, #24]	; (800e848 <rfalIsoDepPollAStartActivation+0x68>)
 800e830:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e834:	4b04      	ldr	r3, [pc, #16]	; (800e848 <rfalIsoDepPollAStartActivation+0x68>)
 800e836:	719a      	strb	r2, [r3, #6]
    gIsoDep.state       = ISODEP_ST_PCD_ACT_RATS;
 800e838:	4b03      	ldr	r3, [pc, #12]	; (800e848 <rfalIsoDepPollAStartActivation+0x68>)
 800e83a:	220a      	movs	r2, #10
 800e83c:	701a      	strb	r2, [r3, #0]
    
    return ret;
 800e83e:	89fb      	ldrh	r3, [r7, #14]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20002aa8 	.word	0x20002aa8

0800e84c <rfalIsoDepPollAGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepPollAGetActivationStatus( void )
{
 800e84c:	b590      	push	{r4, r7, lr}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    uint8_t     msgIt;
    rfalBitRate maxBR;

    switch( gIsoDep.state )
 800e852:	4ba2      	ldr	r3, [pc, #648]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	2b0a      	cmp	r3, #10
 800e858:	d003      	beq.n	800e862 <rfalIsoDepPollAGetActivationStatus+0x16>
 800e85a:	2b0b      	cmp	r3, #11
 800e85c:	f000 8173 	beq.w	800eb46 <rfalIsoDepPollAGetActivationStatus+0x2fa>
 800e860:	e193      	b.n	800eb8a <rfalIsoDepPollAGetActivationStatus+0x33e>
    {
        /*******************************************************************************/
        case ISODEP_ST_PCD_ACT_RATS:
            
            ret = rfalIsoDepGetRATSStatus();
 800e862:	f7ff fe25 	bl	800e4b0 <rfalIsoDepGetRATSStatus>
 800e866:	4603      	mov	r3, r0
 800e868:	80fb      	strh	r3, [r7, #6]
            if( ret != ERR_BUSY )
 800e86a:	88fb      	ldrh	r3, [r7, #6]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	f000 818f 	beq.w	800eb90 <rfalIsoDepPollAGetActivationStatus+0x344>
            {
                if( ret != ERR_NONE )
 800e872:	88fb      	ldrh	r3, [r7, #6]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d03c      	beq.n	800e8f2 <rfalIsoDepPollAGetActivationStatus+0xa6>
                {
                    /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
                    if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_TIMEOUT) )
 800e878:	4b98      	ldr	r3, [pc, #608]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d103      	bne.n	800e88a <rfalIsoDepPollAGetActivationStatus+0x3e>
 800e882:	88fb      	ldrh	r3, [r7, #6]
 800e884:	2b04      	cmp	r3, #4
 800e886:	f040 8185 	bne.w	800eb94 <rfalIsoDepPollAGetActivationStatus+0x348>
                    {
                        break;
                    }
                    
                    if( gIsoDep.cntRRetrys != 0U )
 800e88a:	4b94      	ldr	r3, [pc, #592]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e88c:	799b      	ldrb	r3, [r3, #6]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d026      	beq.n	800e8e0 <rfalIsoDepPollAGetActivationStatus+0x94>
                    {
                        /* Ensure FDT before retransmission (reuse RFAL GT timer) */
                        rfalSetGT( rfalGetFDTPoll() );
 800e892:	f007 fffb 	bl	801688c <rfalGetFDTPoll>
 800e896:	4603      	mov	r3, r0
 800e898:	4618      	mov	r0, r3
 800e89a:	f008 f815 	bl	80168c8 <rfalSetGT>
                        rfalFieldOnAndStartGT();
 800e89e:	f008 f83f 	bl	8016920 <rfalFieldOnAndStartGT>
                        
                        /* Send RATS retransmission */  /* PRQA S 4342 1 # MISRA 10.5 - Layout of enum rfalIsoDepFSxI is guaranteed whithin 4bit range */
                        EXIT_ON_ERR( ret, rfalIsoDepStartRATS( (rfalIsoDepFSxI)(uint8_t)(gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT), 
 800e8a2:	4b8e      	ldr	r3, [pc, #568]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8a4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e8a8:	091b      	lsrs	r3, r3, #4
 800e8aa:	b2d8      	uxtb	r0, r3
 800e8ac:	4b8b      	ldr	r3, [pc, #556]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8ae:	78d9      	ldrb	r1, [r3, #3]
 800e8b0:	4b8a      	ldr	r3, [pc, #552]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	4b89      	ldr	r3, [pc, #548]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ba:	3314      	adds	r3, #20
 800e8bc:	f7ff fdb0 	bl	800e420 <rfalIsoDepStartRATS>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	80fb      	strh	r3, [r7, #6]
 800e8c4:	88fb      	ldrh	r3, [r7, #6]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d001      	beq.n	800e8ce <rfalIsoDepPollAGetActivationStatus+0x82>
 800e8ca:	88fb      	ldrh	r3, [r7, #6]
 800e8cc:	e166      	b.n	800eb9c <rfalIsoDepPollAGetActivationStatus+0x350>
                                                                                gIsoDep.did,
                                                                                &gIsoDep.actvDev->activation.A.Listener.ATS, 
                                                                                &gIsoDep.actvDev->activation.A.Listener.ATSLen ) );
                        gIsoDep.cntRRetrys--;
 800e8ce:	4b83      	ldr	r3, [pc, #524]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8d0:	799b      	ldrb	r3, [r3, #6]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	4b81      	ldr	r3, [pc, #516]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8d8:	719a      	strb	r2, [r3, #6]
                        ret = ERR_BUSY;
 800e8da:	2302      	movs	r3, #2
 800e8dc:	80fb      	strh	r3, [r7, #6]
                    }
                    
                    return ERR_NONE;
                }
            }
            break;
 800e8de:	e157      	b.n	800eb90 <rfalIsoDepPollAGetActivationStatus+0x344>
                    else if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 800e8e0:	4b7e      	ldr	r3, [pc, #504]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	f040 8152 	bne.w	800eb90 <rfalIsoDepPollAGetActivationStatus+0x344>
                        rfalIsoDepDeselect();
 800e8ec:	f7fe fd48 	bl	800d380 <rfalIsoDepDeselect>
            break;
 800e8f0:	e14e      	b.n	800eb90 <rfalIsoDepPollAGetActivationStatus+0x344>
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 800e8f2:	4b7a      	ldr	r3, [pc, #488]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e8fa:	713b      	strb	r3, [r7, #4]
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800e8fc:	4b77      	ldr	r3, [pc, #476]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e8fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e900:	2204      	movs	r2, #4
 800e902:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    gIsoDep.actvDev->info.SFGI = 0U;
 800e906:	4b75      	ldr	r3, [pc, #468]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e90a:	2200      	movs	r2, #0
 800e90c:	639a      	str	r2, [r3, #56]	; 0x38
                    gIsoDep.actvDev->info.MBL  = 0U;
 800e90e:	4b73      	ldr	r3, [pc, #460]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e912:	2200      	movs	r2, #0
 800e914:	645a      	str	r2, [r3, #68]	; 0x44
                    gIsoDep.actvDev->info.DSI  = RFAL_BR_106;
 800e916:	4b71      	ldr	r3, [pc, #452]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    gIsoDep.actvDev->info.DRI  = RFAL_BR_106;
 800e920:	4b6e      	ldr	r3, [pc, #440]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800e92a:	4b6c      	ldr	r3, [pc, #432]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e92e:	2202      	movs	r2, #2
 800e930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    if( gIsoDep.actvDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 800e934:	4b69      	ldr	r3, [pc, #420]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	f240 808c 	bls.w	800ea58 <rfalIsoDepPollAGetActivationStatus+0x20c>
                        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 800e940:	2301      	movs	r3, #1
 800e942:	717b      	strb	r3, [r7, #5]
                        gIsoDep.actvDev->info.FSxI = (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 800e944:	4b65      	ldr	r3, [pc, #404]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e948:	785a      	ldrb	r2, [r3, #1]
 800e94a:	4b64      	ldr	r3, [pc, #400]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e94e:	f002 020f 	and.w	r2, r2, #15
 800e952:	b2d2      	uxtb	r2, r2
 800e954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                        msgIt++; 
 800e958:	797b      	ldrb	r3, [r7, #5]
 800e95a:	3301      	adds	r3, #1
 800e95c:	717b      	strb	r3, [r7, #5]
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 800e95e:	4b5f      	ldr	r3, [pc, #380]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e962:	785b      	ldrb	r3, [r3, #1]
 800e964:	f003 0310 	and.w	r3, r3, #16
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d011      	beq.n	800e990 <rfalIsoDepPollAGetActivationStatus+0x144>
                            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++], &gIsoDep.actvDev->info.DSI, &gIsoDep.actvDev->info.DRI );
 800e96c:	4b5b      	ldr	r3, [pc, #364]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e96e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e970:	461a      	mov	r2, r3
 800e972:	797b      	ldrb	r3, [r7, #5]
 800e974:	1c59      	adds	r1, r3, #1
 800e976:	7179      	strb	r1, [r7, #5]
 800e978:	4413      	add	r3, r2
 800e97a:	7819      	ldrb	r1, [r3, #0]
 800e97c:	4b57      	ldr	r3, [pc, #348]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e97e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e980:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800e984:	4b55      	ldr	r3, [pc, #340]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e988:	3349      	adds	r3, #73	; 0x49
 800e98a:	7938      	ldrb	r0, [r7, #4]
 800e98c:	f000 fa48 	bl	800ee20 <rfalIsoDepCalcBitRate>
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 800e990:	4b52      	ldr	r3, [pc, #328]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e994:	785b      	ldrb	r3, [r3, #1]
 800e996:	f003 0320 	and.w	r3, r3, #32
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d01e      	beq.n	800e9dc <rfalIsoDepPollAGetActivationStatus+0x190>
                            gIsoDep.actvDev->info.SFGI  = ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++];
 800e99e:	4b4f      	ldr	r3, [pc, #316]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	797b      	ldrb	r3, [r7, #5]
 800e9a6:	1c59      	adds	r1, r3, #1
 800e9a8:	7179      	strb	r1, [r7, #5]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	781a      	ldrb	r2, [r3, #0]
 800e9ae:	4b4b      	ldr	r3, [pc, #300]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9b2:	639a      	str	r2, [r3, #56]	; 0x38
                            gIsoDep.actvDev->info.FWI   = (uint8_t)((gIsoDep.actvDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 800e9b4:	4b49      	ldr	r3, [pc, #292]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ba:	091b      	lsrs	r3, r3, #4
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	4b47      	ldr	r3, [pc, #284]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9c2:	f002 020f 	and.w	r2, r2, #15
 800e9c6:	b2d2      	uxtb	r2, r2
 800e9c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                            gIsoDep.actvDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 800e9cc:	4b43      	ldr	r3, [pc, #268]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d2:	4b42      	ldr	r3, [pc, #264]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9d6:	f002 020f 	and.w	r2, r2, #15
 800e9da:	639a      	str	r2, [r3, #56]	; 0x38
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 800e9dc:	4b3f      	ldr	r3, [pc, #252]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9e0:	785b      	ldrb	r3, [r3, #1]
 800e9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d036      	beq.n	800ea58 <rfalIsoDepPollAGetActivationStatus+0x20c>
                            gIsoDep.actvDev->info.supAdFt = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 800e9ea:	4b3c      	ldr	r3, [pc, #240]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	797b      	ldrb	r3, [r7, #5]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	091b      	lsrs	r3, r3, #4
 800e9f8:	f003 0201 	and.w	r2, r3, #1
 800e9fc:	4b37      	ldr	r3, [pc, #220]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800e9fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	bf14      	ite	ne
 800ea04:	2201      	movne	r2, #1
 800ea06:	2200      	moveq	r2, #0
 800ea08:	b2d2      	uxtb	r2, r2
 800ea0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                            gIsoDep.actvDev->info.supDID  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 800ea0e:	4b33      	ldr	r3, [pc, #204]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea12:	461a      	mov	r2, r3
 800ea14:	797b      	ldrb	r3, [r7, #5]
 800ea16:	4413      	add	r3, r2
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	085b      	lsrs	r3, r3, #1
 800ea1c:	f003 0201 	and.w	r2, r3, #1
 800ea20:	4b2e      	ldr	r3, [pc, #184]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	bf14      	ite	ne
 800ea28:	2201      	movne	r2, #1
 800ea2a:	2200      	moveq	r2, #0
 800ea2c:	b2d2      	uxtb	r2, r2
 800ea2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                            gIsoDep.actvDev->info.supNAD  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 800ea32:	4b2a      	ldr	r3, [pc, #168]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea36:	461a      	mov	r2, r3
 800ea38:	797b      	ldrb	r3, [r7, #5]
 800ea3a:	1c59      	adds	r1, r3, #1
 800ea3c:	7179      	strb	r1, [r7, #5]
 800ea3e:	4413      	add	r3, r2
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	f003 0201 	and.w	r2, r3, #1
 800ea46:	4b25      	ldr	r3, [pc, #148]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea4a:	2a00      	cmp	r2, #0
 800ea4c:	bf14      	ite	ne
 800ea4e:	2201      	movne	r2, #1
 800ea50:	2200      	moveq	r2, #0
 800ea52:	b2d2      	uxtb	r2, r2
 800ea54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
                    gIsoDep.actvDev->info.FSx  = rfalIsoDepFSxI2FSx(gIsoDep.actvDev->info.FSxI);
 800ea58:	4b20      	ldr	r3, [pc, #128]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea60:	4a1e      	ldr	r2, [pc, #120]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea62:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe fcf3 	bl	800d450 <rfalIsoDepFSxI2FSx>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
                    gIsoDep.fsx                = gIsoDep.actvDev->info.FSx;
 800ea70:	4b1a      	ldr	r3, [pc, #104]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea74:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800ea78:	4b18      	ldr	r3, [pc, #96]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea7a:	829a      	strh	r2, [r3, #20]
                    gIsoDep.actvDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)gIsoDep.actvDev->info.SFGI );
 800ea7c:	4b17      	ldr	r3, [pc, #92]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	4a15      	ldr	r2, [pc, #84]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea86:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f000 fa6f 	bl	800ef6c <rfalIsoDepSFGI2SFGT>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	63e3      	str	r3, [r4, #60]	; 0x3c
                    rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 800ea92:	4b12      	ldr	r3, [pc, #72]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ea94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea98:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800ea9c:	fb02 f303 	mul.w	r3, r2, r3
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f007 ff11 	bl	80168c8 <rfalSetGT>
                    rfalFieldOnAndStartGT();
 800eaa6:	f007 ff3b 	bl	8016920 <rfalFieldOnAndStartGT>
                    gIsoDep.actvDev->info.FWT  = rfalIsoDepFWI2FWT( gIsoDep.actvDev->info.FWI );
 800eaaa:	4b0c      	ldr	r3, [pc, #48]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800eaac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eab2:	4a0a      	ldr	r2, [pc, #40]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800eab4:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fe fcaa 	bl	800d410 <rfalIsoDepFWI2FWT>
 800eabc:	4603      	mov	r3, r0
 800eabe:	6323      	str	r3, [r4, #48]	; 0x30
                    gIsoDep.actvDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 800eac0:	4b06      	ldr	r3, [pc, #24]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800eac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eac4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eac8:	635a      	str	r2, [r3, #52]	; 0x34
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 800eaca:	4b04      	ldr	r3, [pc, #16]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800eacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eace:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d004      	beq.n	800eae0 <rfalIsoDepPollAGetActivationStatus+0x294>
 800ead6:	4b01      	ldr	r3, [pc, #4]	; (800eadc <rfalIsoDepPollAGetActivationStatus+0x290>)
 800ead8:	78da      	ldrb	r2, [r3, #3]
 800eada:	e002      	b.n	800eae2 <rfalIsoDepPollAGetActivationStatus+0x296>
 800eadc:	20002aa8 	.word	0x20002aa8
 800eae0:	2200      	movs	r2, #0
 800eae2:	4b30      	ldr	r3, [pc, #192]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eae6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    gIsoDep.actvDev->info.NAD = RFAL_ISODEP_NO_NAD;
 800eaea:	4b2e      	ldr	r3, [pc, #184]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eaec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaee:	22ff      	movs	r2, #255	; 0xff
 800eaf0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                    if( (gIsoDep.actvDev->info.DSI != RFAL_BR_106) || (gIsoDep.actvDev->info.DRI != RFAL_BR_106) )
 800eaf4:	4b2b      	ldr	r3, [pc, #172]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eaf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaf8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d105      	bne.n	800eb0c <rfalIsoDepPollAGetActivationStatus+0x2c0>
 800eb00:	4b28      	ldr	r3, [pc, #160]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb04:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d01a      	beq.n	800eb42 <rfalIsoDepPollAGetActivationStatus+0x2f6>
                        EXIT_ON_ERR( ret, rfalIsoDepStartPPS( gIsoDep.actvDev->info.DID, gIsoDep.actvDev->info.DSI, gIsoDep.actvDev->info.DRI, (rfalIsoDepPpsRes*)&gIsoDep.ctrlBuf ));
 800eb0c:	4b25      	ldr	r3, [pc, #148]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb10:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800eb14:	4b23      	ldr	r3, [pc, #140]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb18:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800eb1c:	4b21      	ldr	r3, [pc, #132]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb20:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800eb24:	4b20      	ldr	r3, [pc, #128]	; (800eba8 <rfalIsoDepPollAGetActivationStatus+0x35c>)
 800eb26:	f7ff fd03 	bl	800e530 <rfalIsoDepStartPPS>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	80fb      	strh	r3, [r7, #6]
 800eb2e:	88fb      	ldrh	r3, [r7, #6]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <rfalIsoDepPollAGetActivationStatus+0x2ec>
 800eb34:	88fb      	ldrh	r3, [r7, #6]
 800eb36:	e031      	b.n	800eb9c <rfalIsoDepPollAGetActivationStatus+0x350>
                        gIsoDep.state = ISODEP_ST_PCD_ACT_PPS;
 800eb38:	4b1a      	ldr	r3, [pc, #104]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb3a:	220b      	movs	r2, #11
 800eb3c:	701a      	strb	r2, [r3, #0]
                        return ERR_BUSY;
 800eb3e:	2302      	movs	r3, #2
 800eb40:	e02c      	b.n	800eb9c <rfalIsoDepPollAGetActivationStatus+0x350>
                    return ERR_NONE;
 800eb42:	2300      	movs	r3, #0
 800eb44:	e02a      	b.n	800eb9c <rfalIsoDepPollAGetActivationStatus+0x350>
        
        /*******************************************************************************/
        case ISODEP_ST_PCD_ACT_PPS:
            ret = rfalIsoDepGetPPSSTatus();
 800eb46:	f7ff fd4b 	bl	800e5e0 <rfalIsoDepGetPPSSTatus>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	80fb      	strh	r3, [r7, #6]
            if( ret != ERR_BUSY )
 800eb4e:	88fb      	ldrh	r3, [r7, #6]
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d021      	beq.n	800eb98 <rfalIsoDepPollAGetActivationStatus+0x34c>
            {
                /* Check whether PPS has been acknowledge */
                if( ret == ERR_NONE )
 800eb54:	88fb      	ldrh	r3, [r7, #6]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10c      	bne.n	800eb74 <rfalIsoDepPollAGetActivationStatus+0x328>
                {
                    /* DSI code the divisor from PICC to PCD */
                    /* DRI code the divisor from PCD to PICC */
                    rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 800eb5a:	4b12      	ldr	r3, [pc, #72]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb5e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800eb62:	4b10      	ldr	r3, [pc, #64]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	f007 fb55 	bl	801621c <rfalSetBitRate>
                    /* If PPS has faled keep activation bit rate */
                    gIsoDep.actvDev->info.DSI = RFAL_BR_106;
                    gIsoDep.actvDev->info.DRI = RFAL_BR_106;
                }
            }
            break;
 800eb72:	e011      	b.n	800eb98 <rfalIsoDepPollAGetActivationStatus+0x34c>
                    gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 800eb74:	4b0b      	ldr	r3, [pc, #44]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    gIsoDep.actvDev->info.DRI = RFAL_BR_106;
 800eb7e:	4b09      	ldr	r3, [pc, #36]	; (800eba4 <rfalIsoDepPollAGetActivationStatus+0x358>)
 800eb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            break;
 800eb88:	e006      	b.n	800eb98 <rfalIsoDepPollAGetActivationStatus+0x34c>

        /*******************************************************************************/    
        default:
            ret = ERR_WRONG_STATE;
 800eb8a:	2321      	movs	r3, #33	; 0x21
 800eb8c:	80fb      	strh	r3, [r7, #6]
            break;
 800eb8e:	e004      	b.n	800eb9a <rfalIsoDepPollAGetActivationStatus+0x34e>
            break;
 800eb90:	bf00      	nop
 800eb92:	e002      	b.n	800eb9a <rfalIsoDepPollAGetActivationStatus+0x34e>
                        break;
 800eb94:	bf00      	nop
 800eb96:	e000      	b.n	800eb9a <rfalIsoDepPollAGetActivationStatus+0x34e>
            break;
 800eb98:	bf00      	nop
    }
    
    return ret;
 800eb9a:	88fb      	ldrh	r3, [r7, #6]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd90      	pop	{r4, r7, pc}
 800eba4:	20002aa8 	.word	0x20002aa8
 800eba8:	20002aee 	.word	0x20002aee

0800ebac <rfalIsoDepPollBStartActivation>:
}


/*******************************************************************************/
ReturnCode rfalIsoDepPollBStartActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 800ebac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebae:	b08d      	sub	sp, #52	; 0x34
 800ebb0:	af08      	add	r7, sp, #32
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	4608      	mov	r0, r1
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	461a      	mov	r2, r3
 800ebba:	4623      	mov	r3, r4
 800ebbc:	71fb      	strb	r3, [r7, #7]
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	71bb      	strb	r3, [r7, #6]
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	717b      	strb	r3, [r7, #5]
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 800ebca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebcc:	7b1b      	ldrb	r3, [r3, #12]
 800ebce:	091b      	lsrs	r3, r3, #4
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 800ebd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fe fc16 	bl	800d410 <rfalIsoDepFWI2FWT>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe8:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 800ebea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ebf0:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	7b5b      	ldrb	r3, [r3, #13]
 800ebf6:	091b      	lsrs	r3, r3, #4
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	f003 020f 	and.w	r2, r3, #15
 800ebfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec00:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800ec02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 f9af 	bl	800ef6c <rfalIsoDepSFGI2SFGT>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec12:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	7adb      	ldrb	r3, [r3, #11]
 800ec18:	091b      	lsrs	r3, r3, #4
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800ec22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe fc11 	bl	800d450 <rfalIsoDepFSxI2FSx>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	461a      	mov	r2, r3
 800ec32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec34:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 800ec38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec3a:	79ba      	ldrb	r2, [r7, #6]
 800ec3c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	7b1b      	ldrb	r3, [r3, #12]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	bf14      	ite	ne
 800ec4c:	2301      	movne	r3, #1
 800ec4e:	2300      	moveq	r3, #0
 800ec50:	b2da      	uxtb	r2, r3
 800ec52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	7b1b      	ldrb	r3, [r3, #12]
 800ec5c:	085b      	lsrs	r3, r3, #1
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	bf14      	ite	ne
 800ec66:	2301      	movne	r3, #1
 800ec68:	2300      	moveq	r3, #0
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 800ec72:	79bb      	ldrb	r3, [r7, #6]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d009      	beq.n	800ec8c <rfalIsoDepPollBStartActivation+0xe0>
 800ec78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ec7e:	f083 0301 	eor.w	r3, r3, #1
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d001      	beq.n	800ec8c <rfalIsoDepPollBStartActivation+0xe0>
    {
        return ERR_PARAM;
 800ec88:	2307      	movs	r3, #7
 800ec8a:	e066      	b.n	800ed5a <rfalIsoDepPollBStartActivation+0x1ae>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800ec8c:	2002      	movs	r0, #2
 800ec8e:	f007 fdc7 	bl	8016820 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800ec92:	4b34      	ldr	r3, [pc, #208]	; (800ed64 <rfalIsoDepPollBStartActivation+0x1b8>)
 800ec94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d104      	bne.n	800eca6 <rfalIsoDepPollBStartActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800ec9c:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800eca0:	f007 fde0 	bl	8016864 <rfalSetFDTPoll>
 800eca4:	e00d      	b.n	800ecc2 <rfalIsoDepPollBStartActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	7adb      	ldrb	r3, [r3, #11]
 800ecaa:	085b      	lsrs	r3, r3, #1
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	f003 0303 	and.w	r3, r3, #3
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f005 fefd 	bl	8014ab4 <rfalNfcbTR2ToFDT>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f007 fdd1 	bl	8016864 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	7a99      	ldrb	r1, [r3, #10]
 800ecc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecc8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800eccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecce:	3349      	adds	r3, #73	; 0x49
 800ecd0:	7978      	ldrb	r0, [r7, #5]
 800ecd2:	f000 f8a5 	bl	800ee20 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    EXIT_ON_ERR( ret, rfalIsoDepStartATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd8:	1c9d      	adds	r5, r3, #2
 800ecda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecdc:	7b1b      	ldrb	r3, [r3, #12]
 800ecde:	f003 0308 	and.w	r3, r3, #8
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <rfalIsoDepPollBStartActivation+0x13e>
 800ece6:	7939      	ldrb	r1, [r7, #4]
 800ece8:	e000      	b.n	800ecec <rfalIsoDepPollBStartActivation+0x140>
 800ecea:	2100      	movs	r1, #0
 800ecec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecee:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 800ecf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf4:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
 800ecf8:	4b1a      	ldr	r3, [pc, #104]	; (800ed64 <rfalIsoDepPollBStartActivation+0x1b8>)
 800ecfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d005      	beq.n	800ed0e <rfalIsoDepPollBStartActivation+0x162>
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	7adb      	ldrb	r3, [r3, #11]
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	e000      	b.n	800ed10 <rfalIsoDepPollBStartActivation+0x164>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed12:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800ed14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ed18:	4402      	add	r2, r0
 800ed1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed1c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800ed1e:	3421      	adds	r4, #33	; 0x21
 800ed20:	9407      	str	r4, [sp, #28]
 800ed22:	9006      	str	r0, [sp, #24]
 800ed24:	9205      	str	r2, [sp, #20]
 800ed26:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ed2a:	9204      	str	r2, [sp, #16]
 800ed2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed2e:	9203      	str	r2, [sp, #12]
 800ed30:	79ba      	ldrb	r2, [r7, #6]
 800ed32:	9202      	str	r2, [sp, #8]
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	4663      	mov	r3, ip
 800ed3c:	4632      	mov	r2, r6
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f7ff fc74 	bl	800e62c <rfalIsoDepStartATTRIB>
 800ed44:	4603      	mov	r3, r0
 800ed46:	81fb      	strh	r3, [r7, #14]
 800ed48:	89fb      	ldrh	r3, [r7, #14]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <rfalIsoDepPollBStartActivation+0x1a6>
 800ed4e:	89fb      	ldrh	r3, [r7, #14]
 800ed50:	e003      	b.n	800ed5a <rfalIsoDepPollBStartActivation+0x1ae>
                               &isoDepDev->activation.B.Listener.ATTRIB_RES,
                               &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                             ) );
    
    
    gIsoDep.actvDev = isoDepDev;
 800ed52:	4a04      	ldr	r2, [pc, #16]	; (800ed64 <rfalIsoDepPollBStartActivation+0x1b8>)
 800ed54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed56:	67d3      	str	r3, [r2, #124]	; 0x7c
    return ret;
 800ed58:	89fb      	ldrh	r3, [r7, #14]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3714      	adds	r7, #20
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed62:	bf00      	nop
 800ed64:	20002aa8 	.word	0x20002aa8

0800ed68 <rfalIsoDepPollBGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepPollBGetActivationStatus( void )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    uint8_t    mbli;

    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    ret = rfalIsoDepGetATTRIBStatus();
 800ed6e:	f7ff fcf9 	bl	800e764 <rfalIsoDepGetATTRIBStatus>
 800ed72:	4603      	mov	r3, r0
 800ed74:	80fb      	strh	r3, [r7, #6]
    if( ret != ERR_BUSY)
 800ed76:	88fb      	ldrh	r3, [r7, #6]
 800ed78:	2b02      	cmp	r3, #2
 800ed7a:	d04a      	beq.n	800ee12 <rfalIsoDepPollBGetActivationStatus+0xaa>
    {
        if( ret == ERR_NONE )
 800ed7c:	88fb      	ldrh	r3, [r7, #6]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d137      	bne.n	800edf2 <rfalIsoDepPollBGetActivationStatus+0x8a>
        {
            /* Digital 1.1 14.6.2.3 - Check if received DID match */
            if( (gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did )
 800ed82:	4b26      	ldr	r3, [pc, #152]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800ed84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	f003 030f 	and.w	r3, r3, #15
 800ed8c:	4a23      	ldr	r2, [pc, #140]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800ed8e:	78d2      	ldrb	r2, [r2, #3]
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d001      	beq.n	800ed98 <rfalIsoDepPollBGetActivationStatus+0x30>
            {
                return ERR_PROTO;
 800ed94:	230b      	movs	r3, #11
 800ed96:	e03d      	b.n	800ee14 <rfalIsoDepPollBGetActivationStatus+0xac>
            }
                    
            /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
            mbli = ((gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 800ed98:	4b20      	ldr	r3, [pc, #128]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800ed9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	091b      	lsrs	r3, r3, #4
 800eda0:	717b      	strb	r3, [r7, #5]
            if( mbli > 0U)
 800eda2:	797b      	ldrb	r3, [r7, #5]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00b      	beq.n	800edc0 <rfalIsoDepPollBGetActivationStatus+0x58>
            {
                /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
                gIsoDep.actvDev->info.MBL = (gIsoDep.actvDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 800eda8:	4b1c      	ldr	r3, [pc, #112]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800edaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edac:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800edb0:	4619      	mov	r1, r3
 800edb2:	797b      	ldrb	r3, [r7, #5]
 800edb4:	1e5a      	subs	r2, r3, #1
 800edb6:	4b19      	ldr	r3, [pc, #100]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800edb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edba:	fa01 f202 	lsl.w	r2, r1, r2
 800edbe:	645a      	str	r2, [r3, #68]	; 0x44
            }
            
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 800edc0:	4b16      	ldr	r3, [pc, #88]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800edc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edc4:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800edc8:	4b14      	ldr	r3, [pc, #80]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800edca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edcc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800edd0:	4619      	mov	r1, r3
 800edd2:	4610      	mov	r0, r2
 800edd4:	f007 fa22 	bl	801621c <rfalSetBitRate>
            
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
            
            
            /* Start the SFGT timer (reuse RFAL GT timer) */
            rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 800edd8:	4b10      	ldr	r3, [pc, #64]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800edda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edde:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800ede2:	fb02 f303 	mul.w	r3, r2, r3
 800ede6:	4618      	mov	r0, r3
 800ede8:	f007 fd6e 	bl	80168c8 <rfalSetGT>
            rfalFieldOnAndStartGT();
 800edec:	f007 fd98 	bl	8016920 <rfalFieldOnAndStartGT>
 800edf0:	e009      	b.n	800ee06 <rfalIsoDepPollBGetActivationStatus+0x9e>
        }
        else
        {
            gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 800edf2:	4b0a      	ldr	r3, [pc, #40]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800edf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edf6:	2200      	movs	r2, #0
 800edf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            gIsoDep.actvDev->info.DRI = RFAL_BR_106;
 800edfc:	4b07      	ldr	r3, [pc, #28]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800edfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee00:	2200      	movs	r2, #0
 800ee02:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
        
        /*******************************************************************************/
        /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
        gIsoDep.fsx    = gIsoDep.actvDev->info.FSx;
 800ee06:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800ee08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee0a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800ee0e:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800ee10:	829a      	strh	r2, [r3, #20]
    }
    
    return ret;
 800ee12:	88fb      	ldrh	r3, [r7, #6]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20002aa8 	.word	0x20002aa8

0800ee20 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 800ee20:	b480      	push	{r7}
 800ee22:	b087      	sub	sp, #28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60ba      	str	r2, [r7, #8]
 800ee28:	607b      	str	r3, [r7, #4]
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73fb      	strb	r3, [r7, #15]
 800ee2e:	460b      	mov	r3, r1
 800ee30:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 800ee32:	7bfb      	ldrb	r3, [r7, #15]
 800ee34:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 800ee36:	2301      	movs	r3, #1
 800ee38:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 800ee46:	7bbb      	ldrb	r3, [r7, #14]
 800ee48:	f003 0308 	and.w	r3, r3, #8
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f040 8087 	bne.w	800ef62 <rfalIsoDepCalcBitRate+0x142>
 800ee54:	7d7b      	ldrb	r3, [r7, #21]
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	f200 8083 	bhi.w	800ef62 <rfalIsoDepCalcBitRate+0x142>
 800ee5c:	7d7b      	ldrb	r3, [r7, #21]
 800ee5e:	2bff      	cmp	r3, #255	; 0xff
 800ee60:	d07f      	beq.n	800ef62 <rfalIsoDepCalcBitRate+0x142>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 800ee62:	7bbb      	ldrb	r3, [r7, #14]
 800ee64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ee68:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 800ee6a:	2302      	movs	r3, #2
 800ee6c:	75fb      	strb	r3, [r7, #23]
 800ee6e:	e019      	b.n	800eea4 <rfalIsoDepCalcBitRate+0x84>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800ee70:	7d3a      	ldrb	r2, [r7, #20]
 800ee72:	7dfb      	ldrb	r3, [r7, #23]
 800ee74:	4619      	mov	r1, r3
 800ee76:	2310      	movs	r3, #16
 800ee78:	408b      	lsls	r3, r1
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00b      	beq.n	800ee98 <rfalIsoDepCalcBitRate+0x78>
 800ee80:	7dfb      	ldrb	r3, [r7, #23]
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	7d7b      	ldrb	r3, [r7, #21]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d806      	bhi.n	800ee98 <rfalIsoDepCalcBitRate+0x78>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 800ee8a:	7dfb      	ldrb	r3, [r7, #23]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	7cfa      	ldrb	r2, [r7, #19]
 800ee94:	701a      	strb	r2, [r3, #0]
                break;
 800ee96:	e009      	b.n	800eeac <rfalIsoDepCalcBitRate+0x8c>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 800ee98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	75fb      	strb	r3, [r7, #23]
 800eea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	dae1      	bge.n	800ee70 <rfalIsoDepCalcBitRate+0x50>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 800eeac:	7bbb      	ldrb	r3, [r7, #14]
 800eeae:	f003 0307 	and.w	r3, r3, #7
 800eeb2:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800eeb4:	2302      	movs	r3, #2
 800eeb6:	75fb      	strb	r3, [r7, #23]
 800eeb8:	e018      	b.n	800eeec <rfalIsoDepCalcBitRate+0xcc>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800eeba:	7cbb      	ldrb	r3, [r7, #18]
 800eebc:	7dfa      	ldrb	r2, [r7, #23]
 800eebe:	40d3      	lsrs	r3, r2
 800eec0:	f003 0301 	and.w	r3, r3, #1
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <rfalIsoDepCalcBitRate+0xc0>
 800eec8:	7dfb      	ldrb	r3, [r7, #23]
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	7d7b      	ldrb	r3, [r7, #21]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d806      	bhi.n	800eee0 <rfalIsoDepCalcBitRate+0xc0>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 800eed2:	7dfb      	ldrb	r3, [r7, #23]
 800eed4:	3301      	adds	r3, #1
 800eed6:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	7c7a      	ldrb	r2, [r7, #17]
 800eedc:	701a      	strb	r2, [r3, #0]
                break;
 800eede:	e009      	b.n	800eef4 <rfalIsoDepCalcBitRate+0xd4>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800eee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	3b01      	subs	r3, #1
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	75fb      	strb	r3, [r7, #23]
 800eeec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	dae2      	bge.n	800eeba <rfalIsoDepCalcBitRate+0x9a>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 800eef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	da2a      	bge.n	800ef52 <rfalIsoDepCalcBitRate+0x132>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	781a      	ldrb	r2, [r3, #0]
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	4293      	cmp	r3, r2
 800ef06:	bf28      	it	cs
 800ef08:	4613      	movcs	r3, r2
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	781a      	ldrb	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d018      	beq.n	800ef52 <rfalIsoDepCalcBitRate+0x132>
 800ef20:	7d3a      	ldrb	r2, [r7, #20]
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	2110      	movs	r1, #16
 800ef2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef2e:	4013      	ands	r3, r2
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d009      	beq.n	800ef48 <rfalIsoDepCalcBitRate+0x128>
 800ef34:	7cba      	ldrb	r2, [r7, #18]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d104      	bne.n	800ef52 <rfalIsoDepCalcBitRate+0x132>
            {
                bitrateFound = false;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 800ef52:	7dbb      	ldrb	r3, [r7, #22]
 800ef54:	f083 0301 	eor.w	r3, r3, #1
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f47f af6b 	bne.w	800ee36 <rfalIsoDepCalcBitRate+0x16>
 800ef60:	e000      	b.n	800ef64 <rfalIsoDepCalcBitRate+0x144>
            return;
 800ef62:	bf00      	nop
    
}
 800ef64:	371c      	adds	r7, #28
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bc80      	pop	{r7}
 800ef6a:	4770      	bx	lr

0800ef6c <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	4603      	mov	r3, r0
 800ef74:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 800ef76:	79fb      	ldrb	r3, [r7, #7]
 800ef78:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 800ef7a:	7afb      	ldrb	r3, [r7, #11]
 800ef7c:	2b0e      	cmp	r3, #14
 800ef7e:	d901      	bls.n	800ef84 <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 800ef80:	2300      	movs	r3, #0
 800ef82:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 800ef84:	7afb      	ldrb	r3, [r7, #11]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00b      	beq.n	800efa2 <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 800ef8a:	79fb      	ldrb	r3, [r7, #7]
 800ef8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ef90:	409a      	lsls	r2, r3
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ef98:	fa01 f303 	lsl.w	r3, r1, r3
 800ef9c:	4413      	add	r3, r2
 800ef9e:	60fb      	str	r3, [r7, #12]
 800efa0:	e002      	b.n	800efa8 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 800efa2:	f641 237c 	movw	r3, #6780	; 0x1a7c
 800efa6:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	4a05      	ldr	r2, [pc, #20]	; (800efc0 <rfalIsoDepSFGI2SFGT+0x54>)
 800efac:	fba2 2303 	umull	r2, r3, r2, r3
 800efb0:	0b1b      	lsrs	r3, r3, #12
 800efb2:	3301      	adds	r3, #1
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3714      	adds	r7, #20
 800efb8:	46bd      	mov	sp, r7
 800efba:	bc80      	pop	{r7}
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	4d542005 	.word	0x4d542005

0800efc4 <rfalIsoDepApdu2IBLockParam>:
#endif  /* RFAL_FEATURE_ISO_DEP_POLL */
 

 /*******************************************************************************/
 static void rfalIsoDepApdu2IBLockParam( rfalIsoDepApduTxRxParam apduParam, rfalIsoDepTxRxParam *iBlockParam, uint16_t txPos, uint16_t rxPos )
{
 800efc4:	b084      	sub	sp, #16
 800efc6:	b598      	push	{r3, r4, r7, lr}
 800efc8:	af00      	add	r7, sp, #0
 800efca:	f107 0410 	add.w	r4, r7, #16
 800efce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     NO_WARNING(rxPos); /* Keep this param for future use */
     
     iBlockParam->DID    = apduParam.DID;
 800efd2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800efd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd8:	f883 2020 	strb.w	r2, [r3, #32]
     iBlockParam->FSx    = apduParam.FSx;
 800efdc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800efde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe0:	83da      	strh	r2, [r3, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 800efe2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800efe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe6:	839a      	strh	r2, [r3, #28]
     iBlockParam->FWT    = apduParam.FWT;
 800efe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efec:	615a      	str	r2, [r3, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 800efee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff2:	619a      	str	r2, [r3, #24]
     
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 800eff4:	8abb      	ldrh	r3, [r7, #20]
 800eff6:	461a      	mov	r2, r3
 800eff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800effa:	1ad4      	subs	r4, r2, r3
 800effc:	f7fe fd78 	bl	800daf0 <rfalIsoDepGetMaxInfLen>
 800f000:	4603      	mov	r3, r0
 800f002:	429c      	cmp	r4, r3
 800f004:	dd09      	ble.n	800f01a <rfalIsoDepApdu2IBLockParam+0x56>
     {
         iBlockParam->isTxChaining = true;
 800f006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f008:	2201      	movs	r2, #1
 800f00a:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 800f00c:	f7fe fd70 	bl	800daf0 <rfalIsoDepGetMaxInfLen>
 800f010:	4603      	mov	r3, r0
 800f012:	461a      	mov	r2, r3
 800f014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f016:	809a      	strh	r2, [r3, #4]
 800f018:	e008      	b.n	800f02c <rfalIsoDepApdu2IBLockParam+0x68>
     }
     else
     {
         iBlockParam->isTxChaining = false;
 800f01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01c:	2200      	movs	r2, #0
 800f01e:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 800f020:	8aba      	ldrh	r2, [r7, #20]
 800f022:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	b29a      	uxth	r2, r3
 800f028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f02a:	809a      	strh	r2, [r3, #4]
     }
     
     /* TxBuf is moved to the beginning for every I-Block */
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f030:	601a      	str	r2, [r3, #0]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 800f032:	6a3a      	ldr	r2, [r7, #32]
 800f034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f036:	609a      	str	r2, [r3, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 800f038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03a:	4a05      	ldr	r2, [pc, #20]	; (800f050 <rfalIsoDepApdu2IBLockParam+0x8c>)
 800f03c:	611a      	str	r2, [r3, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 800f03e:	69fa      	ldr	r2, [r7, #28]
 800f040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f042:	60da      	str	r2, [r3, #12]
}
 800f044:	bf00      	nop
 800f046:	46bd      	mov	sp, r7
 800f048:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 800f04c:	b004      	add	sp, #16
 800f04e:	4770      	bx	lr
 800f050:	20002b60 	.word	0x20002b60

0800f054 <rfalIsoDepStartApduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 800f054:	b084      	sub	sp, #16
 800f056:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f058:	b093      	sub	sp, #76	; 0x4c
 800f05a:	af08      	add	r7, sp, #32
 800f05c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800f060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 800f064:	4b25      	ldr	r3, [pc, #148]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f066:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f06a:	f107 0540 	add.w	r5, r7, #64	; 0x40
 800f06e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f076:	682b      	ldr	r3, [r5, #0]
 800f078:	6023      	str	r3, [r4, #0]
    gIsoDep.APDUTxPos = 0;
 800f07a:	4b20      	ldr	r3, [pc, #128]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f07c:	2200      	movs	r2, #0
 800f07e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    gIsoDep.APDURxPos = 0;
 800f082:	4b1e      	ldr	r3, [pc, #120]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f084:	2200      	movs	r2, #0
 800f086:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    
    /* Assign current FSx to calculate INF length (only change the FSx from activation if no to Keep) */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800f08a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f08e:	2bff      	cmp	r3, #255	; 0xff
 800f090:	d002      	beq.n	800f098 <rfalIsoDepStartApduTransceive+0x44>
 800f092:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f096:	e001      	b.n	800f09c <rfalIsoDepStartApduTransceive+0x48>
 800f098:	4b18      	ldr	r3, [pc, #96]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f09a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f09c:	4a17      	ldr	r2, [pc, #92]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f09e:	84d3      	strh	r3, [r2, #38]	; 0x26
    gIsoDep.fsx    = param.FSx;
 800f0a0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800f0a4:	4b15      	ldr	r3, [pc, #84]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f0a6:	829a      	strh	r2, [r3, #20]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800f0a8:	4b14      	ldr	r3, [pc, #80]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f0aa:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800f0ae:	4a13      	ldr	r2, [pc, #76]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f0b0:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 800f0b4:	4e11      	ldr	r6, [pc, #68]	; (800f0fc <rfalIsoDepStartApduTransceive+0xa8>)
 800f0b6:	9207      	str	r2, [sp, #28]
 800f0b8:	9306      	str	r3, [sp, #24]
 800f0ba:	1d3b      	adds	r3, r7, #4
 800f0bc:	9305      	str	r3, [sp, #20]
 800f0be:	466d      	mov	r5, sp
 800f0c0:	f106 04a0 	add.w	r4, r6, #160	; 0xa0
 800f0c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0c8:	6823      	ldr	r3, [r4, #0]
 800f0ca:	602b      	str	r3, [r5, #0]
 800f0cc:	f106 0390 	add.w	r3, r6, #144	; 0x90
 800f0d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0d2:	f7ff ff77 	bl	800efc4 <rfalIsoDepApdu2IBLockParam>
    
    return rfalIsoDepStartTransceive( txRxParam );
 800f0d6:	466d      	mov	r5, sp
 800f0d8:	f107 0414 	add.w	r4, r7, #20
 800f0dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	602b      	str	r3, [r5, #0]
 800f0e4:	1d3b      	adds	r3, r7, #4
 800f0e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0e8:	f7fe fd2a 	bl	800db40 <rfalIsoDepStartTransceive>
 800f0ec:	4603      	mov	r3, r0
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	372c      	adds	r7, #44	; 0x2c
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f0f8:	b004      	add	sp, #16
 800f0fa:	4770      	bx	lr
 800f0fc:	20002aa8 	.word	0x20002aa8

0800f100 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 800f100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f102:	b093      	sub	sp, #76	; 0x4c
 800f104:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 800f106:	f7fe fd87 	bl	800dc18 <rfalIsoDepGetTransceiveStatus>
 800f10a:	4603      	mov	r3, r0
 800f10c:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 800f10e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f110:	2b00      	cmp	r3, #0
 800f112:	d004      	beq.n	800f11e <rfalIsoDepGetApduTransceiveStatus+0x1e>
 800f114:	2b0d      	cmp	r3, #13
 800f116:	d04e      	beq.n	800f1b6 <rfalIsoDepGetApduTransceiveStatus+0xb6>
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
        
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800f118:	bf00      	nop
    }
    
    return ret;
 800f11a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f11c:	e097      	b.n	800f24e <rfalIsoDepGetApduTransceiveStatus+0x14e>
            if( gIsoDep.isTxChaining )
 800f11e:	4b4e      	ldr	r3, [pc, #312]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f120:	7d9b      	ldrb	r3, [r3, #22]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d047      	beq.n	800f1b6 <rfalIsoDepGetApduTransceiveStatus+0xb6>
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 800f126:	4b4c      	ldr	r3, [pc, #304]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f128:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 800f12c:	4b4a      	ldr	r3, [pc, #296]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f12e:	8c1b      	ldrh	r3, [r3, #32]
 800f130:	4413      	add	r3, r2
 800f132:	b29a      	uxth	r2, r3
 800f134:	4b48      	ldr	r3, [pc, #288]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f136:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800f13a:	4b47      	ldr	r3, [pc, #284]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f13c:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800f140:	4a45      	ldr	r2, [pc, #276]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f142:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 800f146:	4e44      	ldr	r6, [pc, #272]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f148:	9207      	str	r2, [sp, #28]
 800f14a:	9306      	str	r3, [sp, #24]
 800f14c:	463b      	mov	r3, r7
 800f14e:	9305      	str	r3, [sp, #20]
 800f150:	466d      	mov	r5, sp
 800f152:	f106 04a0 	add.w	r4, r6, #160	; 0xa0
 800f156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	602b      	str	r3, [r5, #0]
 800f15e:	f106 0390 	add.w	r3, r6, #144	; 0x90
 800f162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f164:	f7ff ff2e 	bl	800efc4 <rfalIsoDepApdu2IBLockParam>
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 800f168:	88bb      	ldrh	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00f      	beq.n	800f18e <rfalIsoDepGetApduTransceiveStatus+0x8e>
                    ST_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 800f16e:	4b3a      	ldr	r3, [pc, #232]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f174:	1cd8      	adds	r0, r3, #3
 800f176:	4b38      	ldr	r3, [pc, #224]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f17c:	4a36      	ldr	r2, [pc, #216]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f17e:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800f182:	4413      	add	r3, r2
 800f184:	3303      	adds	r3, #3
 800f186:	88ba      	ldrh	r2, [r7, #4]
 800f188:	4619      	mov	r1, r3
 800f18a:	f00c fd91 	bl	801bcb0 <memcpy>
                EXIT_ON_ERR( ret, rfalIsoDepStartTransceive( txRxParam ) );
 800f18e:	466d      	mov	r5, sp
 800f190:	f107 0410 	add.w	r4, r7, #16
 800f194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	602b      	str	r3, [r5, #0]
 800f19c:	463b      	mov	r3, r7
 800f19e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1a0:	f7fe fcce 	bl	800db40 <rfalIsoDepStartTransceive>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f1a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <rfalIsoDepGetApduTransceiveStatus+0xb2>
 800f1ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f1b0:	e04d      	b.n	800f24e <rfalIsoDepGetApduTransceiveStatus+0x14e>
                return ERR_BUSY;
 800f1b2:	2302      	movs	r3, #2
 800f1b4:	e04b      	b.n	800f24e <rfalIsoDepGetApduTransceiveStatus+0x14e>
            if( gIsoDep.APDUParam.rxLen == NULL )
 800f1b6:	4b28      	ldr	r3, [pc, #160]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f1b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d106      	bne.n	800f1ce <rfalIsoDepGetApduTransceiveStatus+0xce>
                if( ret == ERR_AGAIN  )
 800f1c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f1c2:	2b0d      	cmp	r3, #13
 800f1c4:	d101      	bne.n	800f1ca <rfalIsoDepGetApduTransceiveStatus+0xca>
                    return ERR_NOTSUPP;
 800f1c6:	2318      	movs	r3, #24
 800f1c8:	e041      	b.n	800f24e <rfalIsoDepGetApduTransceiveStatus+0x14e>
                return ERR_NONE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	e03f      	b.n	800f24e <rfalIsoDepGetApduTransceiveStatus+0x14e>
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 800f1ce:	4b22      	ldr	r3, [pc, #136]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f1d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f1d4:	881b      	ldrh	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d02c      	beq.n	800f234 <rfalIsoDepGetApduTransceiveStatus+0x134>
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 800f1da:	4b1f      	ldr	r3, [pc, #124]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f1dc:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	4b1d      	ldr	r3, [pc, #116]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f1e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1f0:	dd01      	ble.n	800f1f6 <rfalIsoDepGetApduTransceiveStatus+0xf6>
                    return ERR_NOMEM;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e02b      	b.n	800f24e <rfalIsoDepGetApduTransceiveStatus+0x14e>
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 800f1f6:	4b18      	ldr	r3, [pc, #96]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f1f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f1fc:	4a16      	ldr	r2, [pc, #88]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f1fe:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 800f202:	4413      	add	r3, r2
 800f204:	1cd8      	adds	r0, r3, #3
 800f206:	4b14      	ldr	r3, [pc, #80]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f20c:	1cd9      	adds	r1, r3, #3
 800f20e:	4b12      	ldr	r3, [pc, #72]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f214:	881b      	ldrh	r3, [r3, #0]
 800f216:	461a      	mov	r2, r3
 800f218:	f00c fd4a 	bl	801bcb0 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 800f21c:	4b0e      	ldr	r3, [pc, #56]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f21e:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800f222:	4b0d      	ldr	r3, [pc, #52]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f224:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f228:	881b      	ldrh	r3, [r3, #0]
 800f22a:	4413      	add	r3, r2
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	4b0a      	ldr	r3, [pc, #40]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f230:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
            *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 800f234:	4b08      	ldr	r3, [pc, #32]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f23a:	4a07      	ldr	r2, [pc, #28]	; (800f258 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 800f23c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 800f240:	801a      	strh	r2, [r3, #0]
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
 800f242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f244:	2b0d      	cmp	r3, #13
 800f246:	d101      	bne.n	800f24c <rfalIsoDepGetApduTransceiveStatus+0x14c>
 800f248:	2302      	movs	r3, #2
 800f24a:	e000      	b.n	800f24e <rfalIsoDepGetApduTransceiveStatus+0x14e>
 800f24c:	2300      	movs	r3, #0
 }
 800f24e:	4618      	mov	r0, r3
 800f250:	372c      	adds	r7, #44	; 0x2c
 800f252:	46bd      	mov	sp, r7
 800f254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f256:	bf00      	nop
 800f258:	20002aa8 	.word	0x20002aa8

0800f25c <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 800f262:	4b0b      	ldr	r3, [pc, #44]	; (800f290 <rfalNfcInitialize+0x34>)
 800f264:	2200      	movs	r2, #0
 800f266:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 800f268:	f7fc feaa 	bl	800bfc0 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 800f26c:	f006 fe0c 	bl	8015e88 <rfalInitialize>
 800f270:	4603      	mov	r3, r0
 800f272:	80fb      	strh	r3, [r7, #6]
 800f274:	88fb      	ldrh	r3, [r7, #6]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <rfalNfcInitialize+0x22>
 800f27a:	88fb      	ldrh	r3, [r7, #6]
 800f27c:	e003      	b.n	800f286 <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 800f27e:	4b04      	ldr	r3, [pc, #16]	; (800f290 <rfalNfcInitialize+0x34>)
 800f280:	2201      	movs	r2, #1
 800f282:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	20002b64 	.word	0x20002b64

0800f294 <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 800f29c:	4b48      	ldr	r3, [pc, #288]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d001      	beq.n	800f2a8 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 800f2a4:	2321      	movs	r3, #33	; 0x21
 800f2a6:	e086      	b.n	800f3b6 <rfalNfcDiscover+0x122>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d02d      	beq.n	800f30a <rfalNfcDiscover+0x76>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	799b      	ldrb	r3, [r3, #6]
 800f2b2:	2b05      	cmp	r3, #5
 800f2b4:	d829      	bhi.n	800f30a <rfalNfcDiscover+0x76>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	799b      	ldrb	r3, [r3, #6]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d025      	beq.n	800f30a <rfalNfcDiscover+0x76>
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	79db      	ldrb	r3, [r3, #7]
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 800f2c2:	2b04      	cmp	r3, #4
 800f2c4:	d903      	bls.n	800f2ce <rfalNfcDiscover+0x3a>
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	79db      	ldrb	r3, [r3, #7]
 800f2ca:	2bff      	cmp	r3, #255	; 0xff
 800f2cc:	d11d      	bne.n	800f30a <rfalNfcDiscover+0x76>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	885b      	ldrh	r3, [r3, #2]
 800f2d2:	f003 0304 	and.w	r3, r3, #4
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d007      	beq.n	800f2ea <rfalNfcDiscover+0x56>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	7a1b      	ldrb	r3, [r3, #8]
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d003      	beq.n	800f2ea <rfalNfcDiscover+0x56>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	7a1b      	ldrb	r3, [r3, #8]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d10f      	bne.n	800f30a <rfalNfcDiscover+0x76>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	885b      	ldrh	r3, [r3, #2]
 800f2ee:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d004      	beq.n	800f300 <rfalNfcDiscover+0x6c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	d804      	bhi.n	800f30a <rfalNfcDiscover+0x76>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f306:	2b30      	cmp	r3, #48	; 0x30
 800f308:	d901      	bls.n	800f30e <rfalNfcDiscover+0x7a>
    {
        return ERR_PARAM;
 800f30a:	2307      	movs	r3, #7
 800f30c:	e053      	b.n	800f3b6 <rfalNfcDiscover+0x122>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 800f30e:	4b2c      	ldr	r3, [pc, #176]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f310:	2200      	movs	r2, #0
 800f312:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 800f314:	4b2a      	ldr	r3, [pc, #168]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f316:	2200      	movs	r2, #0
 800f318:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 800f31a:	4b29      	ldr	r3, [pc, #164]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
    gNfcDev.discRestart     = true;
 800f322:	4b27      	ldr	r3, [pc, #156]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f324:	2201      	movs	r2, #1
 800f326:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
    gNfcDev.isTechInit      = false;
 800f32a:	4b25      	ldr	r3, [pc, #148]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    gNfcDev.disc            = *disParams;
 800f332:	4b23      	ldr	r3, [pc, #140]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	330c      	adds	r3, #12
 800f338:	4611      	mov	r1, r2
 800f33a:	228c      	movs	r2, #140	; 0x8c
 800f33c:	4618      	mov	r0, r3
 800f33e:	f00c fcb7 	bl	801bcb0 <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 800f342:	4b1f      	ldr	r3, [pc, #124]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f344:	2200      	movs	r2, #0
 800f346:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 800f34a:	4b1d      	ldr	r3, [pc, #116]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f34c:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 800f350:	4b1b      	ldr	r3, [pc, #108]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f352:	89db      	ldrh	r3, [r3, #14]
 800f354:	089b      	lsrs	r3, r3, #2
 800f356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f35a:	4313      	orrs	r3, r2
 800f35c:	4a18      	ldr	r2, [pc, #96]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f35e:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 800f362:	4b17      	ldr	r3, [pc, #92]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f364:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 800f368:	4b15      	ldr	r3, [pc, #84]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f36a:	89db      	ldrh	r3, [r3, #14]
 800f36c:	089b      	lsrs	r3, r3, #2
 800f36e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f372:	4313      	orrs	r3, r2
 800f374:	4a12      	ldr	r2, [pc, #72]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f376:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 800f37a:	4b11      	ldr	r3, [pc, #68]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f37c:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 800f380:	4b0f      	ldr	r3, [pc, #60]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f382:	89db      	ldrh	r3, [r3, #14]
 800f384:	089b      	lsrs	r3, r3, #2
 800f386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f38a:	4313      	orrs	r3, r2
 800f38c:	4a0c      	ldr	r2, [pc, #48]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f38e:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 800f392:	4b0b      	ldr	r3, [pc, #44]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f394:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f39a:	89db      	ldrh	r3, [r3, #14]
 800f39c:	b21b      	sxth	r3, r3
 800f39e:	109b      	asrs	r3, r3, #2
 800f3a0:	b21b      	sxth	r3, r3
 800f3a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	4a05      	ldr	r2, [pc, #20]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f3aa:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    {
        return ERR_DISABLED;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 800f3ae:	4b04      	ldr	r3, [pc, #16]	; (800f3c0 <rfalNfcDiscover+0x12c>)
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3708      	adds	r7, #8
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20002b64 	.word	0x20002b64

0800f3c4 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 800f3ce:	4b0f      	ldr	r3, [pc, #60]	; (800f40c <rfalNfcDeactivate+0x48>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d801      	bhi.n	800f3da <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 800f3d6:	2321      	movs	r3, #33	; 0x21
 800f3d8:	e014      	b.n	800f404 <rfalNfcDeactivate+0x40>
    }
    
    /* Check if discovery is to continue afterwards */
    if( (discovery == true) && (gNfcDev.disc.techs2Find != RFAL_NFC_TECH_NONE) )
 800f3da:	79fb      	ldrb	r3, [r7, #7]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d00b      	beq.n	800f3f8 <rfalNfcDeactivate+0x34>
 800f3e0:	4b0a      	ldr	r3, [pc, #40]	; (800f40c <rfalNfcDeactivate+0x48>)
 800f3e2:	89db      	ldrh	r3, [r3, #14]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d007      	beq.n	800f3f8 <rfalNfcDeactivate+0x34>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 800f3e8:	4a08      	ldr	r2, [pc, #32]	; (800f40c <rfalNfcDeactivate+0x48>)
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	f882 32fa 	strb.w	r3, [r2, #762]	; 0x2fa
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 800f3f0:	4b06      	ldr	r3, [pc, #24]	; (800f40c <rfalNfcDeactivate+0x48>)
 800f3f2:	2222      	movs	r2, #34	; 0x22
 800f3f4:	701a      	strb	r2, [r3, #0]
 800f3f6:	e004      	b.n	800f402 <rfalNfcDeactivate+0x3e>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 800f3f8:	f001 ff72 	bl	80112e0 <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 800f3fc:	4b03      	ldr	r3, [pc, #12]	; (800f40c <rfalNfcDeactivate+0x48>)
 800f3fe:	2201      	movs	r2, #1
 800f400:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	20002b64 	.word	0x20002b64

0800f410 <rfalNfcGetState>:
    return ERR_NONE;
}

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 800f410:	b480      	push	{r7}
 800f412:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 800f414:	4b02      	ldr	r3, [pc, #8]	; (800f420 <rfalNfcGetState+0x10>)
 800f416:	781b      	ldrb	r3, [r3, #0]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bc80      	pop	{r7}
 800f41e:	4770      	bx	lr
 800f420:	20002b64 	.word	0x20002b64

0800f424 <rfalNfcGetActiveDevice>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800f42c:	4b0f      	ldr	r3, [pc, #60]	; (800f46c <rfalNfcGetActiveDevice+0x48>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b1d      	cmp	r3, #29
 800f432:	d801      	bhi.n	800f438 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 800f434:	2321      	movs	r3, #33	; 0x21
 800f436:	e014      	b.n	800f462 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 800f43e:	2307      	movs	r3, #7
 800f440:	e00f      	b.n	800f462 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800f442:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <rfalNfcGetActiveDevice+0x48>)
 800f444:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d003      	beq.n	800f454 <rfalNfcGetActiveDevice+0x30>
 800f44c:	4b07      	ldr	r3, [pc, #28]	; (800f46c <rfalNfcGetActiveDevice+0x48>)
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d101      	bne.n	800f458 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 800f454:	2305      	movs	r3, #5
 800f456:	e004      	b.n	800f462 <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 800f458:	4b04      	ldr	r3, [pc, #16]	; (800f46c <rfalNfcGetActiveDevice+0x48>)
 800f45a:	689a      	ldr	r2, [r3, #8]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	bc80      	pop	{r7}
 800f46a:	4770      	bx	lr
 800f46c:	20002b64 	.word	0x20002b64

0800f470 <rfalNfcWorker>:


/*******************************************************************************/
void rfalNfcWorker( void )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 800f476:	f007 fd1d 	bl	8016eb4 <rfalWorker>
    
    switch( gNfcDev.state )
 800f47a:	4bb6      	ldr	r3, [pc, #728]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	2b22      	cmp	r3, #34	; 0x22
 800f480:	f200 81e1 	bhi.w	800f846 <rfalNfcWorker+0x3d6>
 800f484:	a201      	add	r2, pc, #4	; (adr r2, 800f48c <rfalNfcWorker+0x1c>)
 800f486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48a:	bf00      	nop
 800f48c:	0800f847 	.word	0x0800f847
 800f490:	0800f847 	.word	0x0800f847
 800f494:	0800f519 	.word	0x0800f519
 800f498:	0800f587 	.word	0x0800f587
 800f49c:	0800f847 	.word	0x0800f847
 800f4a0:	0800f847 	.word	0x0800f847
 800f4a4:	0800f847 	.word	0x0800f847
 800f4a8:	0800f847 	.word	0x0800f847
 800f4ac:	0800f847 	.word	0x0800f847
 800f4b0:	0800f847 	.word	0x0800f847
 800f4b4:	0800f5b5 	.word	0x0800f5b5
 800f4b8:	0800f601 	.word	0x0800f601
 800f4bc:	0800f847 	.word	0x0800f847
 800f4c0:	0800f65d 	.word	0x0800f65d
 800f4c4:	0800f847 	.word	0x0800f847
 800f4c8:	0800f847 	.word	0x0800f847
 800f4cc:	0800f847 	.word	0x0800f847
 800f4d0:	0800f847 	.word	0x0800f847
 800f4d4:	0800f847 	.word	0x0800f847
 800f4d8:	0800f847 	.word	0x0800f847
 800f4dc:	0800f721 	.word	0x0800f721
 800f4e0:	0800f799 	.word	0x0800f799
 800f4e4:	0800f7e1 	.word	0x0800f7e1
 800f4e8:	0800f7e1 	.word	0x0800f7e1
 800f4ec:	0800f847 	.word	0x0800f847
 800f4f0:	0800f847 	.word	0x0800f847
 800f4f4:	0800f847 	.word	0x0800f847
 800f4f8:	0800f847 	.word	0x0800f847
 800f4fc:	0800f847 	.word	0x0800f847
 800f500:	0800f847 	.word	0x0800f847
 800f504:	0800f847 	.word	0x0800f847
 800f508:	0800f69f 	.word	0x0800f69f
 800f50c:	0800f847 	.word	0x0800f847
 800f510:	0800f847 	.word	0x0800f847
 800f514:	0800f6f1 	.word	0x0800f6f1
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 800f518:	4b8e      	ldr	r3, [pc, #568]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            gNfcDev.selDevIdx   = 0;
 800f520:	4b8c      	ldr	r3, [pc, #560]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f522:	2200      	movs	r2, #0
 800f524:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 800f526:	4b8b      	ldr	r3, [pc, #556]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f528:	2200      	movs	r2, #0
 800f52a:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 800f52c:	4b89      	ldr	r3, [pc, #548]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f52e:	89da      	ldrh	r2, [r3, #14]
 800f530:	4b88      	ldr	r3, [pc, #544]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f532:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 800f534:	4b87      	ldr	r3, [pc, #540]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f536:	220a      	movs	r2, #10
 800f538:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 800f53a:	4b86      	ldr	r3, [pc, #536]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f53c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f540:	2b00      	cmp	r3, #0
 800f542:	f000 8182 	beq.w	800f84a <rfalNfcWorker+0x3da>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 800f546:	4b83      	ldr	r3, [pc, #524]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f548:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <rfalNfcWorker+0xe4>
 800f550:	2300      	movs	r3, #0
 800f552:	e000      	b.n	800f556 <rfalNfcWorker+0xe6>
 800f554:	4b80      	ldr	r3, [pc, #512]	; (800f758 <rfalNfcWorker+0x2e8>)
 800f556:	4618      	mov	r0, r3
 800f558:	f009 ff12 	bl	8019380 <rfalWakeUpModeStart>
 800f55c:	4603      	mov	r3, r0
 800f55e:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 800f560:	88fb      	ldrh	r3, [r7, #6]
 800f562:	2b00      	cmp	r3, #0
 800f564:	f040 8171 	bne.w	800f84a <rfalNfcWorker+0x3da>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 800f568:	4b7a      	ldr	r3, [pc, #488]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f56a:	2203      	movs	r2, #3
 800f56c:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 800f56e:	4b79      	ldr	r3, [pc, #484]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f572:	2b00      	cmp	r3, #0
 800f574:	f000 8169 	beq.w	800f84a <rfalNfcWorker+0x3da>
 800f578:	4b76      	ldr	r3, [pc, #472]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f57c:	4a75      	ldr	r2, [pc, #468]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f57e:	7812      	ldrb	r2, [r2, #0]
 800f580:	4610      	mov	r0, r2
 800f582:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 800f584:	e161      	b.n	800f84a <rfalNfcWorker+0x3da>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 800f586:	f00a f923 	bl	80197d0 <rfalWakeUpModeHasWoke>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f000 815e 	beq.w	800f84e <rfalNfcWorker+0x3de>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 800f592:	f00a fa6f 	bl	8019a74 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 800f596:	4b6f      	ldr	r3, [pc, #444]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f598:	220a      	movs	r2, #10
 800f59a:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 800f59c:	4b6d      	ldr	r3, [pc, #436]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f000 8154 	beq.w	800f84e <rfalNfcWorker+0x3de>
 800f5a6:	4b6b      	ldr	r3, [pc, #428]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5aa:	4a6a      	ldr	r2, [pc, #424]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5ac:	7812      	ldrb	r2, [r2, #0]
 800f5ae:	4610      	mov	r0, r2
 800f5b0:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 800f5b2:	e14c      	b.n	800f84e <rfalNfcWorker+0x3de>
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            platformTimerDestroy( gNfcDev.discTmr );
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800f5b4:	4b67      	ldr	r3, [pc, #412]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5b6:	8a1b      	ldrh	r3, [r3, #16]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f00c fb1d 	bl	801bbf8 <timerCalculateTimer>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	4a64      	ldr	r2, [pc, #400]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5c2:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 800f5c6:	f000 fb33 	bl	800fc30 <rfalNfcPollTechDetetection>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800f5ce:	88fb      	ldrh	r3, [r7, #6]
 800f5d0:	2b02      	cmp	r3, #2
 800f5d2:	f000 813e 	beq.w	800f852 <rfalNfcWorker+0x3e2>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 800f5d6:	88fb      	ldrh	r3, [r7, #6]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d103      	bne.n	800f5e4 <rfalNfcWorker+0x174>
 800f5dc:	4b5d      	ldr	r3, [pc, #372]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5de:	885b      	ldrh	r3, [r3, #2]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d105      	bne.n	800f5f0 <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 800f5e4:	f007 fa0e 	bl	8016a04 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 800f5e8:	4b5a      	ldr	r3, [pc, #360]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5ea:	2214      	movs	r2, #20
 800f5ec:	701a      	strb	r2, [r3, #0]
                    break;
 800f5ee:	e143      	b.n	800f878 <rfalNfcWorker+0x408>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 800f5f0:	4b58      	ldr	r3, [pc, #352]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5f2:	885a      	ldrh	r2, [r3, #2]
 800f5f4:	4b57      	ldr	r3, [pc, #348]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5f6:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 800f5f8:	4b56      	ldr	r3, [pc, #344]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f5fa:	220b      	movs	r2, #11
 800f5fc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f5fe:	e128      	b.n	800f852 <rfalNfcWorker+0x3e2>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 800f600:	f000 fd24 	bl	801004c <rfalNfcPollCollResolution>
 800f604:	4603      	mov	r3, r0
 800f606:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800f608:	88fb      	ldrh	r3, [r7, #6]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	f000 8123 	beq.w	800f856 <rfalNfcWorker+0x3e6>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 800f610:	88fb      	ldrh	r3, [r7, #6]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d104      	bne.n	800f620 <rfalNfcWorker+0x1b0>
 800f616:	4b4f      	ldr	r3, [pc, #316]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f618:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d103      	bne.n	800f628 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 800f620:	4b4c      	ldr	r3, [pc, #304]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f622:	2222      	movs	r2, #34	; 0x22
 800f624:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 800f626:	e127      	b.n	800f878 <rfalNfcWorker+0x408>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 800f628:	4b4a      	ldr	r3, [pc, #296]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f62a:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d90d      	bls.n	800f64e <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 800f632:	4b48      	ldr	r3, [pc, #288]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f636:	2b00      	cmp	r3, #0
 800f638:	d009      	beq.n	800f64e <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 800f63a:	4b46      	ldr	r3, [pc, #280]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f63c:	220c      	movs	r2, #12
 800f63e:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 800f640:	4b44      	ldr	r3, [pc, #272]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f644:	4a43      	ldr	r2, [pc, #268]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f646:	7812      	ldrb	r2, [r2, #0]
 800f648:	4610      	mov	r0, r2
 800f64a:	4798      	blx	r3
                        break;
 800f64c:	e114      	b.n	800f878 <rfalNfcWorker+0x408>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 800f64e:	4b41      	ldr	r3, [pc, #260]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f650:	2200      	movs	r2, #0
 800f652:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 800f654:	4b3f      	ldr	r3, [pc, #252]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f656:	220d      	movs	r2, #13
 800f658:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f65a:	e0fc      	b.n	800f856 <rfalNfcWorker+0x3e6>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            err = rfalNfcPollActivation( gNfcDev.selDevIdx );
 800f65c:	4b3d      	ldr	r3, [pc, #244]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f65e:	79db      	ldrb	r3, [r3, #7]
 800f660:	4618      	mov	r0, r3
 800f662:	f001 f885 	bl	8010770 <rfalNfcPollActivation>
 800f666:	4603      	mov	r3, r0
 800f668:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                         /* Wait until all Activation is complete */
 800f66a:	88fb      	ldrh	r3, [r7, #6]
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	f000 80f4 	beq.w	800f85a <rfalNfcWorker+0x3ea>
            {
                if( err != ERR_NONE )                                                     /* Activation failed selected device  */
 800f672:	88fb      	ldrh	r3, [r7, #6]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d003      	beq.n	800f680 <rfalNfcWorker+0x210>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 800f678:	4b36      	ldr	r3, [pc, #216]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f67a:	2222      	movs	r2, #34	; 0x22
 800f67c:	701a      	strb	r2, [r3, #0]
                    break;
 800f67e:	e0fb      	b.n	800f878 <rfalNfcWorker+0x408>
                }
                
                gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 800f680:	4b34      	ldr	r3, [pc, #208]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f682:	221e      	movs	r2, #30
 800f684:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 800f686:	4b33      	ldr	r3, [pc, #204]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 80e5 	beq.w	800f85a <rfalNfcWorker+0x3ea>
 800f690:	4b30      	ldr	r3, [pc, #192]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f694:	4a2f      	ldr	r2, [pc, #188]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f696:	7812      	ldrb	r2, [r2, #0]
 800f698:	4610      	mov	r0, r2
 800f69a:	4798      	blx	r3
            }
            break;
 800f69c:	e0dd      	b.n	800f85a <rfalNfcWorker+0x3ea>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 800f69e:	f000 fa43 	bl	800fb28 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 800f6a2:	4b2c      	ldr	r3, [pc, #176]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6a4:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d00c      	beq.n	800f6c6 <rfalNfcWorker+0x256>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800f6ac:	4b29      	ldr	r3, [pc, #164]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6ae:	2221      	movs	r2, #33	; 0x21
 800f6b0:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800f6b2:	4b28      	ldr	r3, [pc, #160]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d005      	beq.n	800f6c6 <rfalNfcWorker+0x256>
 800f6ba:	4b26      	ldr	r3, [pc, #152]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6be:	4a25      	ldr	r2, [pc, #148]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6c0:	7812      	ldrb	r2, [r2, #0]
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 800f6c6:	4b23      	ldr	r3, [pc, #140]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6c8:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800f6cc:	2b20      	cmp	r3, #32
 800f6ce:	f040 80c6 	bne.w	800f85e <rfalNfcWorker+0x3ee>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 800f6d2:	4b20      	ldr	r3, [pc, #128]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6d4:	2217      	movs	r2, #23
 800f6d6:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800f6d8:	4b1e      	ldr	r3, [pc, #120]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 80be 	beq.w	800f85e <rfalNfcWorker+0x3ee>
 800f6e2:	4b1c      	ldr	r3, [pc, #112]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6e6:	4a1b      	ldr	r2, [pc, #108]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6e8:	7812      	ldrb	r2, [r2, #0]
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	4798      	blx	r3
            }
            break;
 800f6ee:	e0b6      	b.n	800f85e <rfalNfcWorker+0x3ee>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 800f6f0:	f001 fdf6 	bl	80112e0 <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 800f6f4:	4b17      	ldr	r3, [pc, #92]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f6f6:	f893 32fa 	ldrb.w	r3, [r3, #762]	; 0x2fa
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d001      	beq.n	800f702 <rfalNfcWorker+0x292>
 800f6fe:	2202      	movs	r2, #2
 800f700:	e000      	b.n	800f704 <rfalNfcWorker+0x294>
 800f702:	2201      	movs	r2, #1
 800f704:	4b13      	ldr	r3, [pc, #76]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f706:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 800f708:	4b12      	ldr	r3, [pc, #72]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f000 80a8 	beq.w	800f862 <rfalNfcWorker+0x3f2>
 800f712:	4b10      	ldr	r3, [pc, #64]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f716:	4a0f      	ldr	r2, [pc, #60]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f718:	7812      	ldrb	r2, [r2, #0]
 800f71a:	4610      	mov	r0, r2
 800f71c:	4798      	blx	r3
            break;
 800f71e:	e0a0      	b.n	800f862 <rfalNfcWorker+0x3f2>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 800f720:	4b0c      	ldr	r3, [pc, #48]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f722:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800f726:	4618      	mov	r0, r3
 800f728:	f00c fa74 	bl	801bc14 <timerIsExpired>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d014      	beq.n	800f75c <rfalNfcWorker+0x2ec>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 800f732:	f009 fbe3 	bl	8018efc <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800f736:	4b07      	ldr	r3, [pc, #28]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f738:	2202      	movs	r2, #2
 800f73a:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller             */
 800f73c:	4b05      	ldr	r3, [pc, #20]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f73e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f740:	2b00      	cmp	r3, #0
 800f742:	f000 8090 	beq.w	800f866 <rfalNfcWorker+0x3f6>
 800f746:	4b03      	ldr	r3, [pc, #12]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f74a:	4a02      	ldr	r2, [pc, #8]	; (800f754 <rfalNfcWorker+0x2e4>)
 800f74c:	7812      	ldrb	r2, [r2, #0]
 800f74e:	4610      	mov	r0, r2
 800f750:	4798      	blx	r3
                break;
 800f752:	e088      	b.n	800f866 <rfalNfcWorker+0x3f6>
 800f754:	20002b64 	.word	0x20002b64
 800f758:	20002bde 	.word	0x20002bde
            }

    #if RFAL_FEATURE_LISTEN_MODE
            
            if( gNfcDev.lmMask != 0U )                                                /* Check if configured to perform Listen mode */
 800f75c:	4b48      	ldr	r3, [pc, #288]	; (800f880 <rfalNfcWorker+0x410>)
 800f75e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 8081 	beq.w	800f86a <rfalNfcWorker+0x3fa>
            {
                err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, (uint16_t)rfalConvBytesToBits(sizeof(gNfcDev.rxBuf.rfBuf)), &gNfcDev.rxLen );
 800f768:	4b45      	ldr	r3, [pc, #276]	; (800f880 <rfalNfcWorker+0x410>)
 800f76a:	f8d3 02fc 	ldr.w	r0, [r3, #764]	; 0x2fc
 800f76e:	4b45      	ldr	r3, [pc, #276]	; (800f884 <rfalNfcWorker+0x414>)
 800f770:	9302      	str	r3, [sp, #8]
 800f772:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800f776:	9301      	str	r3, [sp, #4]
 800f778:	4b43      	ldr	r3, [pc, #268]	; (800f888 <rfalNfcWorker+0x418>)
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	4b43      	ldr	r3, [pc, #268]	; (800f88c <rfalNfcWorker+0x41c>)
 800f77e:	2200      	movs	r2, #0
 800f780:	4943      	ldr	r1, [pc, #268]	; (800f890 <rfalNfcWorker+0x420>)
 800f782:	f008 ff25 	bl	80185d0 <rfalListenStart>
 800f786:	4603      	mov	r3, r0
 800f788:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 800f78a:	88fb      	ldrh	r3, [r7, #6]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d16c      	bne.n	800f86a <rfalNfcWorker+0x3fa>
                {
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;               /* Wait for listen mode to be activated */
 800f790:	4b3b      	ldr	r3, [pc, #236]	; (800f880 <rfalNfcWorker+0x410>)
 800f792:	2215      	movs	r2, #21
 800f794:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 800f796:	e068      	b.n	800f86a <rfalNfcWorker+0x3fa>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 800f798:	4b39      	ldr	r3, [pc, #228]	; (800f880 <rfalNfcWorker+0x410>)
 800f79a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f00c fa38 	bl	801bc14 <timerIsExpired>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00f      	beq.n	800f7ca <rfalNfcWorker+0x35a>
            {
                rfalListenStop();
 800f7aa:	f009 fba7 	bl	8018efc <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800f7ae:	4b34      	ldr	r3, [pc, #208]	; (800f880 <rfalNfcWorker+0x410>)
 800f7b0:	2202      	movs	r2, #2
 800f7b2:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller             */
 800f7b4:	4b32      	ldr	r3, [pc, #200]	; (800f880 <rfalNfcWorker+0x410>)
 800f7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d058      	beq.n	800f86e <rfalNfcWorker+0x3fe>
 800f7bc:	4b30      	ldr	r3, [pc, #192]	; (800f880 <rfalNfcWorker+0x410>)
 800f7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7c0:	4a2f      	ldr	r2, [pc, #188]	; (800f880 <rfalNfcWorker+0x410>)
 800f7c2:	7812      	ldrb	r2, [r2, #0]
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	4798      	blx	r3
                break;
 800f7c8:	e051      	b.n	800f86e <rfalNfcWorker+0x3fe>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	f009 fc3b 	bl	8019048 <rfalListenGetState>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d94c      	bls.n	800f872 <rfalNfcWorker+0x402>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 800f7d8:	4b29      	ldr	r3, [pc, #164]	; (800f880 <rfalNfcWorker+0x410>)
 800f7da:	2216      	movs	r2, #22
 800f7dc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f7de:	e048      	b.n	800f872 <rfalNfcWorker+0x402>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 800f7e0:	f001 faee 	bl	8010dc0 <rfalNfcListenActivation>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 800f7e8:	88fb      	ldrh	r3, [r7, #6]
 800f7ea:	2b02      	cmp	r3, #2
 800f7ec:	d043      	beq.n	800f876 <rfalNfcWorker+0x406>
            {
                if( err == ERR_NONE )
 800f7ee:	88fb      	ldrh	r3, [r7, #6]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d118      	bne.n	800f826 <rfalNfcWorker+0x3b6>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 800f7f4:	4b22      	ldr	r3, [pc, #136]	; (800f880 <rfalNfcWorker+0x410>)
 800f7f6:	4a27      	ldr	r2, [pc, #156]	; (800f894 <rfalNfcWorker+0x424>)
 800f7f8:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 800f7fa:	4b21      	ldr	r3, [pc, #132]	; (800f880 <rfalNfcWorker+0x410>)
 800f7fc:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800f800:	3301      	adds	r3, #1
 800f802:	b2da      	uxtb	r2, r3
 800f804:	4b1e      	ldr	r3, [pc, #120]	; (800f880 <rfalNfcWorker+0x410>)
 800f806:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 800f80a:	4b1d      	ldr	r3, [pc, #116]	; (800f880 <rfalNfcWorker+0x410>)
 800f80c:	221e      	movs	r2, #30
 800f80e:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 800f810:	4b1b      	ldr	r3, [pc, #108]	; (800f880 <rfalNfcWorker+0x410>)
 800f812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f814:	2b00      	cmp	r3, #0
 800f816:	d02e      	beq.n	800f876 <rfalNfcWorker+0x406>
 800f818:	4b19      	ldr	r3, [pc, #100]	; (800f880 <rfalNfcWorker+0x410>)
 800f81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f81c:	4a18      	ldr	r2, [pc, #96]	; (800f880 <rfalNfcWorker+0x410>)
 800f81e:	7812      	ldrb	r2, [r2, #0]
 800f820:	4610      	mov	r0, r2
 800f822:	4798      	blx	r3
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 800f824:	e027      	b.n	800f876 <rfalNfcWorker+0x406>
                    rfalListenStop();
 800f826:	f009 fb69 	bl	8018efc <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 800f82a:	4b15      	ldr	r3, [pc, #84]	; (800f880 <rfalNfcWorker+0x410>)
 800f82c:	2202      	movs	r2, #2
 800f82e:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
 800f830:	4b13      	ldr	r3, [pc, #76]	; (800f880 <rfalNfcWorker+0x410>)
 800f832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f834:	2b00      	cmp	r3, #0
 800f836:	d01e      	beq.n	800f876 <rfalNfcWorker+0x406>
 800f838:	4b11      	ldr	r3, [pc, #68]	; (800f880 <rfalNfcWorker+0x410>)
 800f83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f83c:	4a10      	ldr	r2, [pc, #64]	; (800f880 <rfalNfcWorker+0x410>)
 800f83e:	7812      	ldrb	r2, [r2, #0]
 800f840:	4610      	mov	r0, r2
 800f842:	4798      	blx	r3
            break;
 800f844:	e017      	b.n	800f876 <rfalNfcWorker+0x406>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 800f846:	bf00      	nop
 800f848:	e016      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f84a:	bf00      	nop
 800f84c:	e014      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f84e:	bf00      	nop
 800f850:	e012      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f852:	bf00      	nop
 800f854:	e010      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f856:	bf00      	nop
 800f858:	e00e      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f85a:	bf00      	nop
 800f85c:	e00c      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f85e:	bf00      	nop
 800f860:	e00a      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f862:	bf00      	nop
 800f864:	e008      	b.n	800f878 <rfalNfcWorker+0x408>
                break;
 800f866:	bf00      	nop
 800f868:	e006      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f86a:	bf00      	nop
 800f86c:	e004      	b.n	800f878 <rfalNfcWorker+0x408>
                break;
 800f86e:	bf00      	nop
 800f870:	e002      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f872:	bf00      	nop
 800f874:	e000      	b.n	800f878 <rfalNfcWorker+0x408>
            break;
 800f876:	bf00      	nop
    }
}
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	20002b64 	.word	0x20002b64
 800f884:	20003270 	.word	0x20003270
 800f888:	2000306b 	.word	0x2000306b
 800f88c:	20002bc3 	.word	0x20002bc3
 800f890:	20002bb5 	.word	0x20002bb5
 800f894:	20002bfc 	.word	0x20002bfc

0800f898 <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 800f898:	b5b0      	push	{r4, r5, r7, lr}
 800f89a:	b09c      	sub	sp, #112	; 0x70
 800f89c:	af06      	add	r7, sp, #24
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	607a      	str	r2, [r7, #4]
 800f8a2:	603b      	str	r3, [r7, #0]
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800f8a8:	4b96      	ldr	r3, [pc, #600]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	2b1d      	cmp	r3, #29
 800f8ae:	f240 8123 	bls.w	800faf8 <rfalNfcDataExchangeStart+0x260>
 800f8b2:	4b94      	ldr	r3, [pc, #592]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	f000 811e 	beq.w	800faf8 <rfalNfcDataExchangeStart+0x260>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 800f8bc:	4b91      	ldr	r3, [pc, #580]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	2b1e      	cmp	r3, #30
 800f8c2:	d124      	bne.n	800f90e <rfalNfcDataExchangeStart+0x76>
 800f8c4:	4b8f      	ldr	r3, [pc, #572]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	2b09      	cmp	r3, #9
 800f8cc:	d91f      	bls.n	800f90e <rfalNfcDataExchangeStart+0x76>
 800f8ce:	4b8d      	ldr	r3, [pc, #564]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b0f      	cmp	r3, #15
 800f8d6:	d81a      	bhi.n	800f90e <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 800f8d8:	897b      	ldrh	r3, [r7, #10]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 800f8de:	2321      	movs	r3, #33	; 0x21
 800f8e0:	e10b      	b.n	800fafa <rfalNfcDataExchangeStart+0x262>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	4a88      	ldr	r2, [pc, #544]	; (800fb08 <rfalNfcDataExchangeStart+0x270>)
 800f8e6:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 800f8e8:	4b86      	ldr	r3, [pc, #536]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	7f5b      	ldrb	r3, [r3, #29]
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d008      	beq.n	800f904 <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.pdu  : gNfcDev.rxBuf.rfBuf));
 800f8f2:	4b84      	ldr	r3, [pc, #528]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f8f4:	689b      	ldr	r3, [r3, #8]
 800f8f6:	7f5b      	ldrb	r3, [r3, #29]
 800f8f8:	2b02      	cmp	r3, #2
 800f8fa:	d101      	bne.n	800f900 <rfalNfcDataExchangeStart+0x68>
 800f8fc:	4b83      	ldr	r3, [pc, #524]	; (800fb0c <rfalNfcDataExchangeStart+0x274>)
 800f8fe:	e002      	b.n	800f906 <rfalNfcDataExchangeStart+0x6e>
 800f900:	4b83      	ldr	r3, [pc, #524]	; (800fb10 <rfalNfcDataExchangeStart+0x278>)
 800f902:	e000      	b.n	800f906 <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 800f904:	4b83      	ldr	r3, [pc, #524]	; (800fb14 <rfalNfcDataExchangeStart+0x27c>)
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 800f90a:	2300      	movs	r3, #0
 800f90c:	e0f5      	b.n	800fafa <rfalNfcDataExchangeStart+0x262>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 800f90e:	4b7d      	ldr	r3, [pc, #500]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	7f5b      	ldrb	r3, [r3, #29]
 800f914:	2b02      	cmp	r3, #2
 800f916:	d069      	beq.n	800f9ec <rfalNfcDataExchangeStart+0x154>
 800f918:	2b02      	cmp	r3, #2
 800f91a:	f300 80db 	bgt.w	800fad4 <rfalNfcDataExchangeStart+0x23c>
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d002      	beq.n	800f928 <rfalNfcDataExchangeStart+0x90>
 800f922:	2b01      	cmp	r3, #1
 800f924:	d021      	beq.n	800f96a <rfalNfcDataExchangeStart+0xd2>
 800f926:	e0d5      	b.n	800fad4 <rfalNfcDataExchangeStart+0x23c>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f92c:	897b      	ldrh	r3, [r7, #10]
 800f92e:	00db      	lsls	r3, r3, #3
 800f930:	b29b      	uxth	r3, r3
 800f932:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f934:	4b76      	ldr	r3, [pc, #472]	; (800fb10 <rfalNfcDataExchangeStart+0x278>)
 800f936:	643b      	str	r3, [r7, #64]	; 0x40
 800f938:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800f93c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f940:	4b71      	ldr	r3, [pc, #452]	; (800fb08 <rfalNfcDataExchangeStart+0x270>)
 800f942:	64bb      	str	r3, [r7, #72]	; 0x48
 800f944:	2300      	movs	r3, #0
 800f946:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f94a:	653b      	str	r3, [r7, #80]	; 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a70      	ldr	r2, [pc, #448]	; (800fb10 <rfalNfcDataExchangeStart+0x278>)
 800f950:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	4a6c      	ldr	r2, [pc, #432]	; (800fb08 <rfalNfcDataExchangeStart+0x270>)
 800f956:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 800f958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f95c:	4618      	mov	r0, r3
 800f95e:	f007 f869 	bl	8016a34 <rfalStartTransceive>
 800f962:	4603      	mov	r3, r0
 800f964:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800f968:	e0b8      	b.n	800fadc <rfalNfcDataExchangeStart+0x244>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepApduTxRxParam isoDepTxRx;
                
                if( txDataLen > sizeof(gNfcDev.txBuf.isoDepBuf.apdu) )
 800f96a:	897b      	ldrh	r3, [r7, #10]
 800f96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f970:	d901      	bls.n	800f976 <rfalNfcDataExchangeStart+0xde>
                {
                    return ERR_NOMEM;
 800f972:	2301      	movs	r3, #1
 800f974:	e0c1      	b.n	800fafa <rfalNfcDataExchangeStart+0x262>
                }
                
                if( txDataLen > 0U )
 800f976:	897b      	ldrh	r3, [r7, #10]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d005      	beq.n	800f988 <rfalNfcDataExchangeStart+0xf0>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.apdu, txData, txDataLen );
 800f97c:	897b      	ldrh	r3, [r7, #10]
 800f97e:	461a      	mov	r2, r3
 800f980:	68f9      	ldr	r1, [r7, #12]
 800f982:	4865      	ldr	r0, [pc, #404]	; (800fb18 <rfalNfcDataExchangeStart+0x280>)
 800f984:	f00c f994 	bl	801bcb0 <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 800f988:	2300      	movs	r3, #0
 800f98a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800f98e:	23ff      	movs	r3, #255	; 0xff
 800f990:	867b      	strh	r3, [r7, #50]	; 0x32
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800f992:	4b5c      	ldr	r3, [pc, #368]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f99a:	863b      	strh	r3, [r7, #48]	; 0x30
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 800f99c:	4b59      	ldr	r3, [pc, #356]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 800f9a4:	4b57      	ldr	r3, [pc, #348]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800f9a6:	689b      	ldr	r3, [r3, #8]
 800f9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9aa:	62bb      	str	r3, [r7, #40]	; 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 800f9ac:	4b5b      	ldr	r3, [pc, #364]	; (800fb1c <rfalNfcDataExchangeStart+0x284>)
 800f9ae:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 800f9b0:	897b      	ldrh	r3, [r7, #10]
 800f9b2:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 800f9b4:	4b56      	ldr	r3, [pc, #344]	; (800fb10 <rfalNfcDataExchangeStart+0x278>)
 800f9b6:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 800f9b8:	4b53      	ldr	r3, [pc, #332]	; (800fb08 <rfalNfcDataExchangeStart+0x270>)
 800f9ba:	623b      	str	r3, [r7, #32]
                isoDepTxRx.tmpBuf       = &gNfcDev.tmpBuf.isoDepBuf;
 800f9bc:	4b58      	ldr	r3, [pc, #352]	; (800fb20 <rfalNfcDataExchangeStart+0x288>)
 800f9be:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.apdu;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a54      	ldr	r2, [pc, #336]	; (800fb14 <rfalNfcDataExchangeStart+0x27c>)
 800f9c4:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	4a4f      	ldr	r2, [pc, #316]	; (800fb08 <rfalNfcDataExchangeStart+0x270>)
 800f9ca:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartApduTransceive( isoDepTxRx );
 800f9cc:	466d      	mov	r5, sp
 800f9ce:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800f9d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	602b      	str	r3, [r5, #0]
 800f9da:	f107 0314 	add.w	r3, r7, #20
 800f9de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9e0:	f7ff fb38 	bl	800f054 <rfalIsoDepStartApduTransceive>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f9ea:	e077      	b.n	800fadc <rfalNfcDataExchangeStart+0x244>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepPduTxRxParam nfcDepTxRx;
                
                if( txDataLen > sizeof(gNfcDev.txBuf.nfcDepBuf.pdu) )
 800f9ec:	897b      	ldrh	r3, [r7, #10]
 800f9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9f2:	d901      	bls.n	800f9f8 <rfalNfcDataExchangeStart+0x160>
                {
                    return ERR_NOMEM;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e080      	b.n	800fafa <rfalNfcDataExchangeStart+0x262>
                }
                
                if( txDataLen > 0U)
 800f9f8:	897b      	ldrh	r3, [r7, #10]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d005      	beq.n	800fa0a <rfalNfcDataExchangeStart+0x172>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.pdu, txData, txDataLen );
 800f9fe:	897b      	ldrh	r3, [r7, #10]
 800fa00:	461a      	mov	r2, r3
 800fa02:	68f9      	ldr	r1, [r7, #12]
 800fa04:	4847      	ldr	r0, [pc, #284]	; (800fb24 <rfalNfcDataExchangeStart+0x28c>)
 800fa06:	f00c f953 	bl	801bcb0 <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 800fa0a:	23ff      	movs	r3, #255	; 0xff
 800fa0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800fa10:	4b3c      	ldr	r3, [pc, #240]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	2b05      	cmp	r3, #5
 800fa18:	d81a      	bhi.n	800fa50 <rfalNfcDataExchangeStart+0x1b8>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) ) :
 800fa1a:	4b3a      	ldr	r3, [pc, #232]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fa1c:	689b      	ldr	r3, [r3, #8]
 800fa1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa22:	091b      	lsrs	r3, r3, #4
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	f003 0303 	and.w	r3, r3, #3
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	019b      	lsls	r3, r3, #6
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800fa2e:	2bfd      	cmp	r3, #253	; 0xfd
 800fa30:	d80c      	bhi.n	800fa4c <rfalNfcDataExchangeStart+0x1b4>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) ) :
 800fa32:	4b34      	ldr	r3, [pc, #208]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa3a:	091b      	lsrs	r3, r3, #4
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	f003 0303 	and.w	r3, r3, #3
 800fa42:	3301      	adds	r3, #1
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	019b      	lsls	r3, r3, #6
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	e01b      	b.n	800fa84 <rfalNfcDataExchangeStart+0x1ec>
 800fa4c:	23fe      	movs	r3, #254	; 0xfe
 800fa4e:	e019      	b.n	800fa84 <rfalNfcDataExchangeStart+0x1ec>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800fa50:	4b2c      	ldr	r3, [pc, #176]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa58:	091b      	lsrs	r3, r3, #4
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	f003 0303 	and.w	r3, r3, #3
 800fa60:	3301      	adds	r3, #1
 800fa62:	019b      	lsls	r3, r3, #6
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800fa64:	2bfd      	cmp	r3, #253	; 0xfd
 800fa66:	d80c      	bhi.n	800fa82 <rfalNfcDataExchangeStart+0x1ea>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800fa68:	4b26      	ldr	r3, [pc, #152]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa70:	091b      	lsrs	r3, r3, #4
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	f003 0303 	and.w	r3, r3, #3
 800fa78:	3301      	adds	r3, #1
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	019b      	lsls	r3, r3, #6
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	e000      	b.n	800fa84 <rfalNfcDataExchangeStart+0x1ec>
 800fa82:	23fe      	movs	r3, #254	; 0xfe
 800fa84:	863b      	strh	r3, [r7, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 800fa86:	4b1f      	ldr	r3, [pc, #124]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 800fa8e:	4b1d      	ldr	r3, [pc, #116]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fa90:	689b      	ldr	r3, [r3, #8]
 800fa92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa94:	62bb      	str	r3, [r7, #40]	; 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 800fa96:	4b21      	ldr	r3, [pc, #132]	; (800fb1c <rfalNfcDataExchangeStart+0x284>)
 800fa98:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 800fa9a:	897b      	ldrh	r3, [r7, #10]
 800fa9c:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 800fa9e:	4b1c      	ldr	r3, [pc, #112]	; (800fb10 <rfalNfcDataExchangeStart+0x278>)
 800faa0:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 800faa2:	4b19      	ldr	r3, [pc, #100]	; (800fb08 <rfalNfcDataExchangeStart+0x270>)
 800faa4:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.tmpBuf       = &gNfcDev.tmpBuf.nfcDepBuf;
 800faa6:	4b1e      	ldr	r3, [pc, #120]	; (800fb20 <rfalNfcDataExchangeStart+0x288>)
 800faa8:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.pdu;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a17      	ldr	r2, [pc, #92]	; (800fb0c <rfalNfcDataExchangeStart+0x274>)
 800faae:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	4a15      	ldr	r2, [pc, #84]	; (800fb08 <rfalNfcDataExchangeStart+0x270>)
 800fab4:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartPduTransceive( nfcDepTxRx );                          
 800fab6:	466c      	mov	r4, sp
 800fab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fabc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fabe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fac2:	f107 0314 	add.w	r3, r7, #20
 800fac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fac8:	f003 feea 	bl	80138a0 <rfalNfcDepStartPduTransceive>
 800facc:	4603      	mov	r3, r0
 800face:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fad2:	e003      	b.n	800fadc <rfalNfcDataExchangeStart+0x244>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 800fad4:	2307      	movs	r3, #7
 800fad6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 800fada:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 800fadc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d106      	bne.n	800faf2 <rfalNfcDataExchangeStart+0x25a>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 800fae4:	4b07      	ldr	r3, [pc, #28]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800fae6:	2202      	movs	r2, #2
 800fae8:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800faec:	4b05      	ldr	r3, [pc, #20]	; (800fb04 <rfalNfcDataExchangeStart+0x26c>)
 800faee:	221f      	movs	r2, #31
 800faf0:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 800faf2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800faf6:	e000      	b.n	800fafa <rfalNfcDataExchangeStart+0x262>
    }
    
    return ERR_WRONG_STATE;
 800faf8:	2321      	movs	r3, #33	; 0x21
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3758      	adds	r7, #88	; 0x58
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bdb0      	pop	{r4, r5, r7, pc}
 800fb02:	bf00      	nop
 800fb04:	20002b64 	.word	0x20002b64
 800fb08:	20003270 	.word	0x20003270
 800fb0c:	20003070 	.word	0x20003070
 800fb10:	2000306b 	.word	0x2000306b
 800fb14:	2000306e 	.word	0x2000306e
 800fb18:	20002e69 	.word	0x20002e69
 800fb1c:	20002e66 	.word	0x20002e66
 800fb20:	20003272 	.word	0x20003272
 800fb24:	20002e6b 	.word	0x20002e6b

0800fb28 <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 800fb2c:	4b3d      	ldr	r3, [pc, #244]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b1e      	cmp	r3, #30
 800fb32:	d114      	bne.n	800fb5e <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 800fb34:	4b3b      	ldr	r3, [pc, #236]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb36:	2202      	movs	r2, #2
 800fb38:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800fb3c:	4b39      	ldr	r3, [pc, #228]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb3e:	221f      	movs	r2, #31
 800fb40:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 800fb42:	4b38      	ldr	r3, [pc, #224]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	2b0c      	cmp	r3, #12
 800fb4a:	d108      	bne.n	800fb5e <rfalNfcDataExchangeGetStatus+0x36>
 800fb4c:	4b35      	ldr	r3, [pc, #212]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	7f5b      	ldrb	r3, [r3, #29]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d103      	bne.n	800fb5e <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 800fb56:	4b33      	ldr	r3, [pc, #204]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800fb5e:	4b31      	ldr	r3, [pc, #196]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b17      	cmp	r3, #23
 800fb64:	d103      	bne.n	800fb6e <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 800fb66:	4b2f      	ldr	r3, [pc, #188]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb68:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800fb6c:	e058      	b.n	800fc20 <rfalNfcDataExchangeGetStatus+0xf8>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE) )
 800fb6e:	4b2d      	ldr	r3, [pc, #180]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	2b1f      	cmp	r3, #31
 800fb74:	d005      	beq.n	800fb82 <rfalNfcDataExchangeGetStatus+0x5a>
 800fb76:	4b2b      	ldr	r3, [pc, #172]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	2b21      	cmp	r3, #33	; 0x21
 800fb7c:	d001      	beq.n	800fb82 <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 800fb7e:	2321      	movs	r3, #33	; 0x21
 800fb80:	e04e      	b.n	800fc20 <rfalNfcDataExchangeGetStatus+0xf8>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 800fb82:	4b28      	ldr	r3, [pc, #160]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb84:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800fb88:	2b02      	cmp	r3, #2
 800fb8a:	d146      	bne.n	800fc1a <rfalNfcDataExchangeGetStatus+0xf2>
    {
        switch( gNfcDev.activeDev->rfInterface )
 800fb8c:	4b25      	ldr	r3, [pc, #148]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	7f5b      	ldrb	r3, [r3, #29]
 800fb92:	2b02      	cmp	r3, #2
 800fb94:	d016      	beq.n	800fbc4 <rfalNfcDataExchangeGetStatus+0x9c>
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	dc1c      	bgt.n	800fbd4 <rfalNfcDataExchangeGetStatus+0xac>
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d002      	beq.n	800fba4 <rfalNfcDataExchangeGetStatus+0x7c>
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d008      	beq.n	800fbb4 <rfalNfcDataExchangeGetStatus+0x8c>
 800fba2:	e017      	b.n	800fbd4 <rfalNfcDataExchangeGetStatus+0xac>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 800fba4:	f007 f976 	bl	8016e94 <rfalGetTransceiveStatus>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	461a      	mov	r2, r3
 800fbac:	4b1d      	ldr	r3, [pc, #116]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fbae:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 800fbb2:	e014      	b.n	800fbde <rfalNfcDataExchangeGetStatus+0xb6>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetApduTransceiveStatus();
 800fbb4:	f7ff faa4 	bl	800f100 <rfalIsoDepGetApduTransceiveStatus>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4b19      	ldr	r3, [pc, #100]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fbbe:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 800fbc2:	e00c      	b.n	800fbde <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetPduTransceiveStatus();
 800fbc4:	f003 feac 	bl	8013920 <rfalNfcDepGetPduTransceiveStatus>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	461a      	mov	r2, r3
 800fbcc:	4b15      	ldr	r3, [pc, #84]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fbce:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 800fbd2:	e004      	b.n	800fbde <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 800fbd4:	4b13      	ldr	r3, [pc, #76]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fbd6:	2207      	movs	r2, #7
 800fbd8:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 800fbdc:	bf00      	nop
        }
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 800fbde:	4b11      	ldr	r3, [pc, #68]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fbe0:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800fbe4:	2b20      	cmp	r3, #32
 800fbe6:	d118      	bne.n	800fc1a <rfalNfcDataExchangeGetStatus+0xf2>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 800fbe8:	4b0f      	ldr	r3, [pc, #60]	; (800fc28 <rfalNfcDataExchangeGetStatus+0x100>)
 800fbea:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fbee:	490f      	ldr	r1, [pc, #60]	; (800fc2c <rfalNfcDataExchangeGetStatus+0x104>)
 800fbf0:	200c      	movs	r0, #12
 800fbf2:	f009 f9b5 	bl	8018f60 <rfalListenSleepStart>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	4b0a      	ldr	r3, [pc, #40]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fbfc:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
 800fc00:	4b08      	ldr	r3, [pc, #32]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fc02:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d003      	beq.n	800fc12 <rfalNfcDataExchangeGetStatus+0xea>
 800fc0a:	4b06      	ldr	r3, [pc, #24]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fc0c:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800fc10:	e006      	b.n	800fc20 <rfalNfcDataExchangeGetStatus+0xf8>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 800fc12:	4b04      	ldr	r3, [pc, #16]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fc14:	2220      	movs	r2, #32
 800fc16:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 800fc1a:	4b02      	ldr	r3, [pc, #8]	; (800fc24 <rfalNfcDataExchangeGetStatus+0xfc>)
 800fc1c:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20002b64 	.word	0x20002b64
 800fc28:	20003270 	.word	0x20003270
 800fc2c:	2000306b 	.word	0x2000306b

0800fc30 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08a      	sub	sp, #40	; 0x28
 800fc34:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 800fc3a:	4ba0      	ldr	r3, [pc, #640]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fc3c:	89db      	ldrh	r3, [r3, #14]
 800fc3e:	f003 0310 	and.w	r3, r3, #16
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d06f      	beq.n	800fd26 <rfalNfcPollTechDetetection+0xf6>
 800fc46:	4b9d      	ldr	r3, [pc, #628]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fc48:	889b      	ldrh	r3, [r3, #4]
 800fc4a:	f003 0310 	and.w	r3, r3, #16
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d069      	beq.n	800fd26 <rfalNfcPollTechDetetection+0xf6>
    {
        
    #if RFAL_FEATURE_NFC_DEP
    
        if( !gNfcDev.isTechInit )
 800fc52:	4b9a      	ldr	r3, [pc, #616]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fc54:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800fc58:	f083 0301 	eor.w	r3, r3, #1
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d029      	beq.n	800fcb6 <rfalNfcPollTechDetetection+0x86>
        {
            EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 800fc62:	4b96      	ldr	r3, [pc, #600]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fc64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fc68:	4a94      	ldr	r2, [pc, #592]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fc6a:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800fc6e:	4619      	mov	r1, r3
 800fc70:	2009      	movs	r0, #9
 800fc72:	f006 f991 	bl	8015f98 <rfalSetMode>
 800fc76:	4603      	mov	r3, r0
 800fc78:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <rfalNfcPollTechDetetection+0x54>
 800fc80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc82:	e1dd      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800fc84:	2001      	movs	r0, #1
 800fc86:	f006 fdcb 	bl	8016820 <rfalSetErrorHandling>
            rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 800fc8a:	2040      	movs	r0, #64	; 0x40
 800fc8c:	f006 fe08 	bl	80168a0 <rfalSetFDTListen>
            rfalSetFDTPoll( RFAL_TIMING_NONE );
 800fc90:	2000      	movs	r0, #0
 800fc92:	f006 fde7 	bl	8016864 <rfalSetFDTPoll>
            rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 800fc96:	488a      	ldr	r0, [pc, #552]	; (800fec0 <rfalNfcPollTechDetetection+0x290>)
 800fc98:	f006 fe16 	bl	80168c8 <rfalSetGT>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 800fc9c:	f006 fe40 	bl	8016920 <rfalFieldOnAndStartGT>
 800fca0:	4603      	mov	r3, r0
 800fca2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d001      	beq.n	800fcae <rfalNfcPollTechDetetection+0x7e>
 800fcaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcac:	e1c8      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 800fcae:	4b83      	ldr	r3, [pc, #524]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( rfalIsGTExpired() )                                                              /* Wait until Guard Time is fulfilled */
 800fcb6:	f006 fe1b 	bl	80168f0 <rfalIsGTExpired>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d030      	beq.n	800fd22 <rfalNfcPollTechDetetection+0xf2>
        {
            gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800fcc0:	4b7e      	ldr	r3, [pc, #504]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fcc2:	889b      	ldrh	r3, [r3, #4]
 800fcc4:	f023 0310 	bic.w	r3, r3, #16
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	4b7c      	ldr	r3, [pc, #496]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fccc:	809a      	strh	r2, [r3, #4]
            
            err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800fcce:	2300      	movs	r3, #0
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	2101      	movs	r1, #1
 800fcd4:	487b      	ldr	r0, [pc, #492]	; (800fec4 <rfalNfcPollTechDetetection+0x294>)
 800fcd6:	f001 fa43 	bl	8011160 <rfalNfcNfcDepActivate>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fcde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d118      	bne.n	800fd16 <rfalNfcPollTechDetetection+0xe6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800fce4:	4b75      	ldr	r3, [pc, #468]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fce6:	885b      	ldrh	r3, [r3, #2]
 800fce8:	f043 0310 	orr.w	r3, r3, #16
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	4b73      	ldr	r3, [pc, #460]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fcf0:	805a      	strh	r2, [r3, #2]
                
                gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 800fcf2:	4b72      	ldr	r3, [pc, #456]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fcf4:	2205      	movs	r2, #5
 800fcf6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 800fcfa:	4b70      	ldr	r3, [pc, #448]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fcfc:	2202      	movs	r2, #2
 800fcfe:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
                gNfcDev.devCnt++;
 800fd02:	4b6e      	ldr	r3, [pc, #440]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd04:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800fd08:	3301      	adds	r3, #1
 800fd0a:	b2da      	uxtb	r2, r3
 800fd0c:	4b6b      	ldr	r3, [pc, #428]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd0e:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
                
                return ERR_NONE;
 800fd12:	2300      	movs	r3, #0
 800fd14:	e194      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            }
            
            gNfcDev.isTechInit = false;
 800fd16:	4b69      	ldr	r3, [pc, #420]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            rfalFieldOff();
 800fd1e:	f006 fe71 	bl	8016a04 <rfalFieldOff>
        }
        return ERR_BUSY;
 800fd22:	2302      	movs	r3, #2
 800fd24:	e18c      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 800fd26:	4b65      	ldr	r3, [pc, #404]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd28:	89db      	ldrh	r3, [r3, #14]
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d049      	beq.n	800fdc6 <rfalNfcPollTechDetetection+0x196>
 800fd32:	4b62      	ldr	r3, [pc, #392]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd34:	889b      	ldrh	r3, [r3, #4]
 800fd36:	f003 0301 	and.w	r3, r3, #1
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d043      	beq.n	800fdc6 <rfalNfcPollTechDetetection+0x196>
        
    #if RFAL_FEATURE_NFCA
        
        rfalNfcaSensRes sensRes;            
        
        if( !gNfcDev.isTechInit )
 800fd3e:	4b5f      	ldr	r3, [pc, #380]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd40:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800fd44:	f083 0301 	eor.w	r3, r3, #1
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d015      	beq.n	800fd7a <rfalNfcPollTechDetetection+0x14a>
        {
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 800fd4e:	f004 f94b 	bl	8013fe8 <rfalNfcaPollerInitialize>
 800fd52:	4603      	mov	r3, r0
 800fd54:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <rfalNfcPollTechDetetection+0x130>
 800fd5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd5e:	e16f      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 800fd60:	f006 fdde 	bl	8016920 <rfalFieldOnAndStartGT>
 800fd64:	4603      	mov	r3, r0
 800fd66:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d001      	beq.n	800fd72 <rfalNfcPollTechDetetection+0x142>
 800fd6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd70:	e166      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 800fd72:	4b52      	ldr	r3, [pc, #328]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd74:	2201      	movs	r2, #1
 800fd76:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( rfalIsGTExpired() )                                                        /* Wait until Guard Time is fulfilled */
 800fd7a:	f006 fdb9 	bl	80168f0 <rfalIsGTExpired>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d01e      	beq.n	800fdc2 <rfalNfcPollTechDetetection+0x192>
        {
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 800fd84:	4b4d      	ldr	r3, [pc, #308]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fd86:	7b1b      	ldrb	r3, [r3, #12]
 800fd88:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fd8c:	4611      	mov	r1, r2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f004 f976 	bl	8014080 <rfalNfcaPollerTechnologyDetection>
 800fd94:	4603      	mov	r3, r0
 800fd96:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fd98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d106      	bne.n	800fdac <rfalNfcPollTechDetetection+0x17c>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 800fd9e:	4b47      	ldr	r3, [pc, #284]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fda0:	885b      	ldrh	r3, [r3, #2]
 800fda2:	f043 0301 	orr.w	r3, r3, #1
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	4b44      	ldr	r3, [pc, #272]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fdaa:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 800fdac:	4b43      	ldr	r3, [pc, #268]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800fdb4:	4b41      	ldr	r3, [pc, #260]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fdb6:	889b      	ldrh	r3, [r3, #4]
 800fdb8:	f023 0301 	bic.w	r3, r3, #1
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	4b3f      	ldr	r3, [pc, #252]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fdc0:	809a      	strh	r2, [r3, #4]
        }
    
        return ERR_BUSY;
 800fdc2:	2302      	movs	r3, #2
 800fdc4:	e13c      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 800fdc6:	4b3d      	ldr	r3, [pc, #244]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fdc8:	89db      	ldrh	r3, [r3, #14]
 800fdca:	f003 0302 	and.w	r3, r3, #2
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d04a      	beq.n	800fe68 <rfalNfcPollTechDetetection+0x238>
 800fdd2:	4b3a      	ldr	r3, [pc, #232]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fdd4:	889b      	ldrh	r3, [r3, #4]
 800fdd6:	f003 0302 	and.w	r3, r3, #2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d044      	beq.n	800fe68 <rfalNfcPollTechDetetection+0x238>
    #if RFAL_FEATURE_NFCB
        
        rfalNfcbSensbRes sensbRes;
        uint8_t          sensbResLen;            
        
        if( !gNfcDev.isTechInit )
 800fdde:	4b37      	ldr	r3, [pc, #220]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fde0:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800fde4:	f083 0301 	eor.w	r3, r3, #1
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d015      	beq.n	800fe1a <rfalNfcPollTechDetetection+0x1ea>
        {
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 800fdee:	f004 fbab 	bl	8014548 <rfalNfcbPollerInitialize>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fdf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <rfalNfcPollTechDetetection+0x1d0>
 800fdfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fdfe:	e11f      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 800fe00:	f006 fd8e 	bl	8016920 <rfalFieldOnAndStartGT>
 800fe04:	4603      	mov	r3, r0
 800fe06:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <rfalNfcPollTechDetetection+0x1e2>
 800fe0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe10:	e116      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 800fe12:	4b2a      	ldr	r3, [pc, #168]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe14:	2201      	movs	r2, #1
 800fe16:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( rfalIsGTExpired() )                                                      /* Wait until Guard Time is fulfilled */
 800fe1a:	f006 fd69 	bl	80168f0 <rfalIsGTExpired>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d01f      	beq.n	800fe64 <rfalNfcPollTechDetetection+0x234>
        {
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 800fe24:	4b25      	ldr	r3, [pc, #148]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe26:	7b1b      	ldrb	r3, [r3, #12]
 800fe28:	f107 0213 	add.w	r2, r7, #19
 800fe2c:	f107 0114 	add.w	r1, r7, #20
 800fe30:	4618      	mov	r0, r3
 800fe32:	f004 fc9b 	bl	801476c <rfalNfcbPollerTechnologyDetection>
 800fe36:	4603      	mov	r3, r0
 800fe38:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fe3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d106      	bne.n	800fe4e <rfalNfcPollTechDetetection+0x21e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 800fe40:	4b1e      	ldr	r3, [pc, #120]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe42:	885b      	ldrh	r3, [r3, #2]
 800fe44:	f043 0302 	orr.w	r3, r3, #2
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	4b1c      	ldr	r3, [pc, #112]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe4c:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 800fe4e:	4b1b      	ldr	r3, [pc, #108]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe50:	2200      	movs	r2, #0
 800fe52:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800fe56:	4b19      	ldr	r3, [pc, #100]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe58:	889b      	ldrh	r3, [r3, #4]
 800fe5a:	f023 0302 	bic.w	r3, r3, #2
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	4b16      	ldr	r3, [pc, #88]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe62:	809a      	strh	r2, [r3, #4]
        }        
        
        return ERR_BUSY;
 800fe64:	2302      	movs	r3, #2
 800fe66:	e0eb      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 800fe68:	4b14      	ldr	r3, [pc, #80]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe6a:	89db      	ldrh	r3, [r3, #14]
 800fe6c:	f003 0304 	and.w	r3, r3, #4
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d04d      	beq.n	800ff10 <rfalNfcPollTechDetetection+0x2e0>
 800fe74:	4b11      	ldr	r3, [pc, #68]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe76:	889b      	ldrh	r3, [r3, #4]
 800fe78:	f003 0304 	and.w	r3, r3, #4
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d047      	beq.n	800ff10 <rfalNfcPollTechDetetection+0x2e0>
    {
    #if RFAL_FEATURE_NFCF
     
        if( !gNfcDev.isTechInit )
 800fe80:	4b0e      	ldr	r3, [pc, #56]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe82:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800fe86:	f083 0301 	eor.w	r3, r3, #1
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d01f      	beq.n	800fed0 <rfalNfcPollTechDetetection+0x2a0>
        {
            EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );     /* Initialize RFAL for NFC-F */
 800fe90:	4b0a      	ldr	r3, [pc, #40]	; (800febc <rfalNfcPollTechDetetection+0x28c>)
 800fe92:	7d1b      	ldrb	r3, [r3, #20]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f004 ff2b 	bl	8014cf0 <rfalNfcfPollerInitialize>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d001      	beq.n	800fea8 <rfalNfcPollTechDetetection+0x278>
 800fea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fea6:	e0cb      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                             /* As field is already On only starts GT timer */
 800fea8:	f006 fd3a 	bl	8016920 <rfalFieldOnAndStartGT>
 800feac:	4603      	mov	r3, r0
 800feae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800feb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d008      	beq.n	800fec8 <rfalNfcPollTechDetetection+0x298>
 800feb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800feb8:	e0c2      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
 800feba:	bf00      	nop
 800febc:	20002b64 	.word	0x20002b64
 800fec0:	00063510 	.word	0x00063510
 800fec4:	20002bfc 	.word	0x20002bfc
            gNfcDev.isTechInit = true;
 800fec8:	4b5f      	ldr	r3, [pc, #380]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800feca:	2201      	movs	r2, #1
 800fecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }

        if( rfalIsGTExpired() )                                                      /* Wait until Guard Time is fulfilled */
 800fed0:	f006 fd0e 	bl	80168f0 <rfalIsGTExpired>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d018      	beq.n	800ff0c <rfalNfcPollTechDetetection+0x2dc>
        {
            err = rfalNfcfPollerCheckPresence();                                     /* Poll for NFC-F devices */
 800feda:	f004 ff57 	bl	8014d8c <rfalNfcfPollerCheckPresence>
 800fede:	4603      	mov	r3, r0
 800fee0:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800fee2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d106      	bne.n	800fef6 <rfalNfcPollTechDetetection+0x2c6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 800fee8:	4b57      	ldr	r3, [pc, #348]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800feea:	885b      	ldrh	r3, [r3, #2]
 800feec:	f043 0304 	orr.w	r3, r3, #4
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	4b55      	ldr	r3, [pc, #340]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800fef4:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 800fef6:	4b54      	ldr	r3, [pc, #336]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800fefe:	4b52      	ldr	r3, [pc, #328]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff00:	889b      	ldrh	r3, [r3, #4]
 800ff02:	f023 0304 	bic.w	r3, r3, #4
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	4b4f      	ldr	r3, [pc, #316]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff0a:	809a      	strh	r2, [r3, #4]
        }
        
        return ERR_BUSY;
 800ff0c:	2302      	movs	r3, #2
 800ff0e:	e097      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 800ff10:	4b4d      	ldr	r3, [pc, #308]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff12:	89db      	ldrh	r3, [r3, #14]
 800ff14:	f003 0308 	and.w	r3, r3, #8
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d045      	beq.n	800ffa8 <rfalNfcPollTechDetetection+0x378>
 800ff1c:	4b4a      	ldr	r3, [pc, #296]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff1e:	889b      	ldrh	r3, [r3, #4]
 800ff20:	f003 0308 	and.w	r3, r3, #8
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d03f      	beq.n	800ffa8 <rfalNfcPollTechDetetection+0x378>
    {
    #if RFAL_FEATURE_NFCV
        
        rfalNfcvInventoryRes invRes;
 
        if( !gNfcDev.isTechInit )
 800ff28:	4b47      	ldr	r3, [pc, #284]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff2a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800ff2e:	f083 0301 	eor.w	r3, r3, #1
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d015      	beq.n	800ff64 <rfalNfcPollTechDetetection+0x334>
        {
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                           /* Initialize RFAL for NFC-V */
 800ff38:	f005 fa5c 	bl	80153f4 <rfalNfcvPollerInitialize>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ff40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d001      	beq.n	800ff4a <rfalNfcPollTechDetetection+0x31a>
 800ff46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff48:	e07a      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 800ff4a:	f006 fce9 	bl	8016920 <rfalFieldOnAndStartGT>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ff52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d001      	beq.n	800ff5c <rfalNfcPollTechDetetection+0x32c>
 800ff58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff5a:	e071      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 800ff5c:	4b3a      	ldr	r3, [pc, #232]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff5e:	2201      	movs	r2, #1
 800ff60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
                
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800ff64:	f006 fcc4 	bl	80168f0 <rfalIsGTExpired>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d01a      	beq.n	800ffa4 <rfalNfcPollTechDetetection+0x374>
        {
            err = rfalNfcvPollerCheckPresence( &invRes );                             /* Poll for NFC-V devices */
 800ff6e:	1d3b      	adds	r3, r7, #4
 800ff70:	4618      	mov	r0, r3
 800ff72:	f005 fa63 	bl	801543c <rfalNfcvPollerCheckPresence>
 800ff76:	4603      	mov	r3, r0
 800ff78:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800ff7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d106      	bne.n	800ff8e <rfalNfcPollTechDetetection+0x35e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 800ff80:	4b31      	ldr	r3, [pc, #196]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff82:	885b      	ldrh	r3, [r3, #2]
 800ff84:	f043 0308 	orr.w	r3, r3, #8
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	4b2f      	ldr	r3, [pc, #188]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff8c:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 800ff8e:	4b2e      	ldr	r3, [pc, #184]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800ff96:	4b2c      	ldr	r3, [pc, #176]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ff98:	889b      	ldrh	r3, [r3, #4]
 800ff9a:	f023 0308 	bic.w	r3, r3, #8
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	4b29      	ldr	r3, [pc, #164]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ffa2:	809a      	strh	r2, [r3, #4]
        }
        
        return ERR_BUSY;
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	e04b      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 800ffa8:	4b27      	ldr	r3, [pc, #156]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ffaa:	89db      	ldrh	r3, [r3, #14]
 800ffac:	f003 0320 	and.w	r3, r3, #32
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d044      	beq.n	801003e <rfalNfcPollTechDetetection+0x40e>
 800ffb4:	4b24      	ldr	r3, [pc, #144]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ffb6:	889b      	ldrh	r3, [r3, #4]
 800ffb8:	f003 0320 	and.w	r3, r3, #32
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d03e      	beq.n	801003e <rfalNfcPollTechDetetection+0x40e>
    {
    #if RFAL_FEATURE_ST25TB
        
        if( !gNfcDev.isTechInit )
 800ffc0:	4b21      	ldr	r3, [pc, #132]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800ffc2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800ffc6:	f083 0301 	eor.w	r3, r3, #1
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d015      	beq.n	800fffc <rfalNfcPollTechDetetection+0x3cc>
        {
            EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                         /* Initialize RFAL for NFC-V */
 800ffd0:	f009 fe34 	bl	8019c3c <rfalSt25tbPollerInitialize>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <rfalNfcPollTechDetetection+0x3b2>
 800ffde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffe0:	e02e      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 800ffe2:	f006 fc9d 	bl	8016920 <rfalFieldOnAndStartGT>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d001      	beq.n	800fff4 <rfalNfcPollTechDetetection+0x3c4>
 800fff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fff2:	e025      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 800fff4:	4b14      	ldr	r3, [pc, #80]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 800fff6:	2201      	movs	r2, #1
 800fff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
     
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800fffc:	f006 fc78 	bl	80168f0 <rfalIsGTExpired>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	d019      	beq.n	801003a <rfalNfcPollTechDetetection+0x40a>
        {
            err = rfalSt25tbPollerCheckPresence( NULL );                              /* Poll for ST25TB devices */
 8010006:	2000      	movs	r0, #0
 8010008:	f009 fe1f 	bl	8019c4a <rfalSt25tbPollerCheckPresence>
 801000c:	4603      	mov	r3, r0
 801000e:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8010010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010012:	2b00      	cmp	r3, #0
 8010014:	d106      	bne.n	8010024 <rfalNfcPollTechDetetection+0x3f4>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 8010016:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 8010018:	885b      	ldrh	r3, [r3, #2]
 801001a:	f043 0320 	orr.w	r3, r3, #32
 801001e:	b29a      	uxth	r2, r3
 8010020:	4b09      	ldr	r3, [pc, #36]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 8010022:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 8010024:	4b08      	ldr	r3, [pc, #32]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 801002c:	4b06      	ldr	r3, [pc, #24]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 801002e:	889b      	ldrh	r3, [r3, #4]
 8010030:	f023 0320 	bic.w	r3, r3, #32
 8010034:	b29a      	uxth	r2, r3
 8010036:	4b04      	ldr	r3, [pc, #16]	; (8010048 <rfalNfcPollTechDetetection+0x418>)
 8010038:	809a      	strh	r2, [r3, #4]
        }
        
        return ERR_BUSY;
 801003a:	2302      	movs	r3, #2
 801003c:	e000      	b.n	8010040 <rfalNfcPollTechDetetection+0x410>
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3728      	adds	r7, #40	; 0x28
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	20002b64 	.word	0x20002b64

0801004c <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 801004c:	b5b0      	push	{r4, r5, r7, lr}
 801004e:	b09a      	sub	sp, #104	; 0x68
 8010050:	af00      	add	r7, sp, #0
    uint8_t    i;
    static uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 8010052:	2300      	movs	r3, #0
 8010054:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    i      = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 801005e:	4bbc      	ldr	r3, [pc, #752]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010060:	f893 22f0 	ldrb.w	r2, [r3, #752]	; 0x2f0
 8010064:	4bba      	ldr	r3, [pc, #744]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010066:	7c9b      	ldrb	r3, [r3, #18]
 8010068:	429a      	cmp	r2, r3
 801006a:	d301      	bcc.n	8010070 <rfalNfcPollCollResolution+0x24>
    {
        return ERR_NONE;
 801006c:	2300      	movs	r3, #0
 801006e:	e377      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 8010070:	4bb7      	ldr	r3, [pc, #732]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010072:	885b      	ldrh	r3, [r3, #2]
 8010074:	f003 0301 	and.w	r3, r3, #1
 8010078:	2b00      	cmp	r3, #0
 801007a:	f000 80bf 	beq.w	80101fc <rfalNfcPollCollResolution+0x1b0>
 801007e:	4bb4      	ldr	r3, [pc, #720]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010080:	889b      	ldrh	r3, [r3, #4]
 8010082:	f003 0301 	and.w	r3, r3, #1
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 80b8 	beq.w	80101fc <rfalNfcPollCollResolution+0x1b0>
    {
        static rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 801008c:	4bb0      	ldr	r3, [pc, #704]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801008e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8010092:	f083 0301 	eor.w	r3, r3, #1
 8010096:	b2db      	uxtb	r3, r3
 8010098:	2b00      	cmp	r3, #0
 801009a:	d01f      	beq.n	80100dc <rfalNfcPollCollResolution+0x90>
        {
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 801009c:	f003 ffa4 	bl	8013fe8 <rfalNfcaPollerInitialize>
 80100a0:	4603      	mov	r3, r0
 80100a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80100a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d002      	beq.n	80100b4 <rfalNfcPollCollResolution+0x68>
 80100ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80100b2:	e355      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 80100b4:	f006 fc34 	bl	8016920 <rfalFieldOnAndStartGT>
 80100b8:	4603      	mov	r3, r0
 80100ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80100be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d002      	beq.n	80100cc <rfalNfcPollCollResolution+0x80>
 80100c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80100ca:	e349      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            
            gNfcDev.isTechInit    = true;                                              /* Technology has been initialized */
 80100cc:	4ba0      	ldr	r3, [pc, #640]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 80100d4:	4b9e      	ldr	r3, [pc, #632]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80100d6:	2200      	movs	r2, #0
 80100d8:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
        }
        
        if( !rfalIsGTExpired() )
 80100dc:	f006 fc08 	bl	80168f0 <rfalIsGTExpired>
 80100e0:	4603      	mov	r3, r0
 80100e2:	f083 0301 	eor.w	r3, r3, #1
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <rfalNfcPollCollResolution+0xa4>
        {
            return ERR_BUSY;
 80100ec:	2302      	movs	r3, #2
 80100ee:	e337      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
        }
        
        if( !gNfcDev.isOperOngoing )
 80100f0:	4b97      	ldr	r3, [pc, #604]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80100f2:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 80100f6:	f083 0301 	eor.w	r3, r3, #1
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d01c      	beq.n	801013a <rfalNfcPollCollResolution+0xee>
        {
            EXIT_ON_ERR( err, rfalNfcaPollerStartFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt ) );
 8010100:	4b93      	ldr	r3, [pc, #588]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010102:	7b18      	ldrb	r0, [r3, #12]
 8010104:	4b92      	ldr	r3, [pc, #584]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010106:	7c9a      	ldrb	r2, [r3, #18]
 8010108:	4b91      	ldr	r3, [pc, #580]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801010a:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	b2d9      	uxtb	r1, r3
 8010112:	4b90      	ldr	r3, [pc, #576]	; (8010354 <rfalNfcPollCollResolution+0x308>)
 8010114:	4a90      	ldr	r2, [pc, #576]	; (8010358 <rfalNfcPollCollResolution+0x30c>)
 8010116:	f003 ffd5 	bl	80140c4 <rfalNfcaPollerStartFullCollisionResolution>
 801011a:	4603      	mov	r3, r0
 801011c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010120:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <rfalNfcPollCollResolution+0xe2>
 8010128:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801012c:	e318      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
         
            gNfcDev.isOperOngoing = true;
 801012e:	4b88      	ldr	r3, [pc, #544]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010130:	2201      	movs	r2, #1
 8010132:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
            return ERR_BUSY;
 8010136:	2302      	movs	r3, #2
 8010138:	e312      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
        }
        
        err = rfalNfcaPollerGetFullCollisionResolutionStatus();
 801013a:	f004 f86f 	bl	801421c <rfalNfcaPollerGetFullCollisionResolutionStatus>
 801013e:	4603      	mov	r3, r0
 8010140:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( err != ERR_BUSY )
 8010144:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010148:	2b02      	cmp	r3, #2
 801014a:	d055      	beq.n	80101f8 <rfalNfcPollCollResolution+0x1ac>
        {
            gNfcDev.isTechInit = false;
 801014c:	4b80      	ldr	r3, [pc, #512]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801014e:	2200      	movs	r2, #0
 8010150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 8010154:	4b7e      	ldr	r3, [pc, #504]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010156:	889b      	ldrh	r3, [r3, #4]
 8010158:	f023 0301 	bic.w	r3, r3, #1
 801015c:	b29a      	uxth	r2, r3
 801015e:	4b7c      	ldr	r3, [pc, #496]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010160:	809a      	strh	r2, [r3, #4]
            
            if( (err == ERR_NONE) && (devCnt != 0U) )
 8010162:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010166:	2b00      	cmp	r3, #0
 8010168:	d146      	bne.n	80101f8 <rfalNfcPollCollResolution+0x1ac>
 801016a:	4b7a      	ldr	r3, [pc, #488]	; (8010354 <rfalNfcPollCollResolution+0x308>)
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d042      	beq.n	80101f8 <rfalNfcPollCollResolution+0x1ac>
            {
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8010172:	2300      	movs	r3, #0
 8010174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010178:	e038      	b.n	80101ec <rfalNfcPollCollResolution+0x1a0>
                {
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 801017a:	4b75      	ldr	r3, [pc, #468]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801017c:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8010180:	4619      	mov	r1, r3
 8010182:	4a73      	ldr	r2, [pc, #460]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010184:	460b      	mov	r3, r1
 8010186:	011b      	lsls	r3, r3, #4
 8010188:	1a5b      	subs	r3, r3, r1
 801018a:	00db      	lsls	r3, r3, #3
 801018c:	4413      	add	r3, r2
 801018e:	3398      	adds	r3, #152	; 0x98
 8010190:	2200      	movs	r2, #0
 8010192:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8010194:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8010198:	4b6d      	ldr	r3, [pc, #436]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801019a:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 801019e:	4618      	mov	r0, r3
 80101a0:	496b      	ldr	r1, [pc, #428]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80101a2:	4603      	mov	r3, r0
 80101a4:	011b      	lsls	r3, r3, #4
 80101a6:	1a1b      	subs	r3, r3, r0
 80101a8:	00db      	lsls	r3, r3, #3
 80101aa:	440b      	add	r3, r1
 80101ac:	3398      	adds	r3, #152	; 0x98
 80101ae:	496a      	ldr	r1, [pc, #424]	; (8010358 <rfalNfcPollCollResolution+0x30c>)
 80101b0:	2016      	movs	r0, #22
 80101b2:	fb00 f202 	mul.w	r2, r0, r2
 80101b6:	440a      	add	r2, r1
 80101b8:	3301      	adds	r3, #1
 80101ba:	6811      	ldr	r1, [r2, #0]
 80101bc:	6855      	ldr	r5, [r2, #4]
 80101be:	6894      	ldr	r4, [r2, #8]
 80101c0:	68d0      	ldr	r0, [r2, #12]
 80101c2:	6019      	str	r1, [r3, #0]
 80101c4:	605d      	str	r5, [r3, #4]
 80101c6:	609c      	str	r4, [r3, #8]
 80101c8:	60d8      	str	r0, [r3, #12]
 80101ca:	6911      	ldr	r1, [r2, #16]
 80101cc:	6119      	str	r1, [r3, #16]
 80101ce:	8a92      	ldrh	r2, [r2, #20]
 80101d0:	829a      	strh	r2, [r3, #20]
                    gNfcDev.devCnt++;
 80101d2:	4b5f      	ldr	r3, [pc, #380]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80101d4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80101d8:	3301      	adds	r3, #1
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	4b5c      	ldr	r3, [pc, #368]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80101de:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 80101e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101e6:	3301      	adds	r3, #1
 80101e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80101ec:	4b59      	ldr	r3, [pc, #356]	; (8010354 <rfalNfcPollCollResolution+0x308>)
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d3c0      	bcc.n	801017a <rfalNfcPollCollResolution+0x12e>
                }
            }
        }
        
        return ERR_BUSY;
 80101f8:	2302      	movs	r3, #2
 80101fa:	e2b1      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 80101fc:	4b54      	ldr	r3, [pc, #336]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80101fe:	885b      	ldrh	r3, [r3, #2]
 8010200:	f003 0302 	and.w	r3, r3, #2
 8010204:	2b00      	cmp	r3, #0
 8010206:	f000 80a9 	beq.w	801035c <rfalNfcPollCollResolution+0x310>
 801020a:	4b51      	ldr	r3, [pc, #324]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801020c:	889b      	ldrh	r3, [r3, #4]
 801020e:	f003 0302 	and.w	r3, r3, #2
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 80a2 	beq.w	801035c <rfalNfcPollCollResolution+0x310>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8010218:	4b4d      	ldr	r3, [pc, #308]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801021a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 801021e:	f083 0301 	eor.w	r3, r3, #1
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b00      	cmp	r3, #0
 8010226:	d01b      	beq.n	8010260 <rfalNfcPollCollResolution+0x214>
        {
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                            /* Initialize RFAL for NFC-B */
 8010228:	f004 f98e 	bl	8014548 <rfalNfcbPollerInitialize>
 801022c:	4603      	mov	r3, r0
 801022e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010232:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010236:	2b00      	cmp	r3, #0
 8010238:	d002      	beq.n	8010240 <rfalNfcPollCollResolution+0x1f4>
 801023a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801023e:	e28f      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 8010240:	f006 fb6e 	bl	8016920 <rfalFieldOnAndStartGT>
 8010244:	4603      	mov	r3, r0
 8010246:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801024a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801024e:	2b00      	cmp	r3, #0
 8010250:	d002      	beq.n	8010258 <rfalNfcPollCollResolution+0x20c>
 8010252:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010256:	e283      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            gNfcDev.isTechInit = true;
 8010258:	4b3d      	ldr	r3, [pc, #244]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801025a:	2201      	movs	r2, #1
 801025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 8010260:	f006 fb46 	bl	80168f0 <rfalIsGTExpired>
 8010264:	4603      	mov	r3, r0
 8010266:	f083 0301 	eor.w	r3, r3, #1
 801026a:	b2db      	uxtb	r3, r3
 801026c:	2b00      	cmp	r3, #0
 801026e:	d001      	beq.n	8010274 <rfalNfcPollCollResolution+0x228>
        {
            return ERR_BUSY;
 8010270:	2302      	movs	r3, #2
 8010272:	e275      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 8010274:	4b37      	ldr	r3, [pc, #220]	; (8010354 <rfalNfcPollCollResolution+0x308>)
 8010276:	2200      	movs	r2, #0
 8010278:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 801027a:	4b35      	ldr	r3, [pc, #212]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801027c:	2200      	movs	r2, #0
 801027e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 8010282:	4b33      	ldr	r3, [pc, #204]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010284:	889b      	ldrh	r3, [r3, #4]
 8010286:	f023 0302 	bic.w	r3, r3, #2
 801028a:	b29a      	uxth	r2, r3
 801028c:	4b30      	ldr	r3, [pc, #192]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801028e:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 8010290:	4b2f      	ldr	r3, [pc, #188]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010292:	7b18      	ldrb	r0, [r3, #12]
 8010294:	4b2e      	ldr	r3, [pc, #184]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010296:	7c9a      	ldrb	r2, [r3, #18]
 8010298:	4b2d      	ldr	r3, [pc, #180]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 801029a:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	b2d9      	uxtb	r1, r3
 80102a2:	1d3a      	adds	r2, r7, #4
 80102a4:	4b2b      	ldr	r3, [pc, #172]	; (8010354 <rfalNfcPollCollResolution+0x308>)
 80102a6:	f004 fa73 	bl	8014790 <rfalNfcbPollerCollisionResolution>
 80102aa:	4603      	mov	r3, r0
 80102ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80102b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d148      	bne.n	801034a <rfalNfcPollCollResolution+0x2fe>
 80102b8:	4b26      	ldr	r3, [pc, #152]	; (8010354 <rfalNfcPollCollResolution+0x308>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d044      	beq.n	801034a <rfalNfcPollCollResolution+0x2fe>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 80102c0:	2300      	movs	r3, #0
 80102c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80102c6:	e03a      	b.n	801033e <rfalNfcPollCollResolution+0x2f2>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 80102c8:	4b21      	ldr	r3, [pc, #132]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80102ca:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80102ce:	4619      	mov	r1, r3
 80102d0:	4a1f      	ldr	r2, [pc, #124]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80102d2:	460b      	mov	r3, r1
 80102d4:	011b      	lsls	r3, r3, #4
 80102d6:	1a5b      	subs	r3, r3, r1
 80102d8:	00db      	lsls	r3, r3, #3
 80102da:	4413      	add	r3, r2
 80102dc:	3398      	adds	r3, #152	; 0x98
 80102de:	2201      	movs	r2, #1
 80102e0:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 80102e2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80102e6:	4b1a      	ldr	r3, [pc, #104]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80102e8:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80102ec:	4618      	mov	r0, r3
 80102ee:	4918      	ldr	r1, [pc, #96]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 80102f0:	4603      	mov	r3, r0
 80102f2:	011b      	lsls	r3, r3, #4
 80102f4:	1a1b      	subs	r3, r3, r0
 80102f6:	00db      	lsls	r3, r3, #3
 80102f8:	440b      	add	r3, r1
 80102fa:	f103 0198 	add.w	r1, r3, #152	; 0x98
 80102fe:	4613      	mov	r3, r2
 8010300:	011b      	lsls	r3, r3, #4
 8010302:	1a9b      	subs	r3, r3, r2
 8010304:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010308:	4413      	add	r3, r2
 801030a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 801030e:	1c4b      	adds	r3, r1, #1
 8010310:	6814      	ldr	r4, [r2, #0]
 8010312:	6850      	ldr	r0, [r2, #4]
 8010314:	6891      	ldr	r1, [r2, #8]
 8010316:	601c      	str	r4, [r3, #0]
 8010318:	6058      	str	r0, [r3, #4]
 801031a:	6099      	str	r1, [r3, #8]
 801031c:	8991      	ldrh	r1, [r2, #12]
 801031e:	7b92      	ldrb	r2, [r2, #14]
 8010320:	8199      	strh	r1, [r3, #12]
 8010322:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 8010324:	4b0a      	ldr	r3, [pc, #40]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010326:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 801032a:	3301      	adds	r3, #1
 801032c:	b2da      	uxtb	r2, r3
 801032e:	4b08      	ldr	r3, [pc, #32]	; (8010350 <rfalNfcPollCollResolution+0x304>)
 8010330:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8010334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010338:	3301      	adds	r3, #1
 801033a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801033e:	4b05      	ldr	r3, [pc, #20]	; (8010354 <rfalNfcPollCollResolution+0x308>)
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8010346:	429a      	cmp	r2, r3
 8010348:	d3be      	bcc.n	80102c8 <rfalNfcPollCollResolution+0x27c>
            }
        }
        
        return ERR_BUSY;
 801034a:	2302      	movs	r3, #2
 801034c:	e208      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
 801034e:	bf00      	nop
 8010350:	20002b64 	.word	0x20002b64
 8010354:	200033e6 	.word	0x200033e6
 8010358:	20003378 	.word	0x20003378
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 801035c:	4bc2      	ldr	r3, [pc, #776]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801035e:	885b      	ldrh	r3, [r3, #2]
 8010360:	f003 0304 	and.w	r3, r3, #4
 8010364:	2b00      	cmp	r3, #0
 8010366:	f000 80a9 	beq.w	80104bc <rfalNfcPollCollResolution+0x470>
 801036a:	4bbf      	ldr	r3, [pc, #764]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801036c:	889b      	ldrh	r3, [r3, #4]
 801036e:	f003 0304 	and.w	r3, r3, #4
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 80a2 	beq.w	80104bc <rfalNfcPollCollResolution+0x470>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8010378:	4bbb      	ldr	r3, [pc, #748]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801037a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 801037e:	f083 0301 	eor.w	r3, r3, #1
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b00      	cmp	r3, #0
 8010386:	d01e      	beq.n	80103c6 <rfalNfcPollCollResolution+0x37a>
        {
            EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));       /* Initialize RFAL for NFC-F */
 8010388:	4bb7      	ldr	r3, [pc, #732]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801038a:	7d1b      	ldrb	r3, [r3, #20]
 801038c:	4618      	mov	r0, r3
 801038e:	f004 fcaf 	bl	8014cf0 <rfalNfcfPollerInitialize>
 8010392:	4603      	mov	r3, r0
 8010394:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010398:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801039c:	2b00      	cmp	r3, #0
 801039e:	d002      	beq.n	80103a6 <rfalNfcPollCollResolution+0x35a>
 80103a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80103a4:	e1dc      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 80103a6:	f006 fabb 	bl	8016920 <rfalFieldOnAndStartGT>
 80103aa:	4603      	mov	r3, r0
 80103ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80103b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d002      	beq.n	80103be <rfalNfcPollCollResolution+0x372>
 80103b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80103bc:	e1d0      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            gNfcDev.isTechInit = true;
 80103be:	4baa      	ldr	r3, [pc, #680]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80103c0:	2201      	movs	r2, #1
 80103c2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 80103c6:	f006 fa93 	bl	80168f0 <rfalIsGTExpired>
 80103ca:	4603      	mov	r3, r0
 80103cc:	f083 0301 	eor.w	r3, r3, #1
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d001      	beq.n	80103da <rfalNfcPollCollResolution+0x38e>
        {
            return ERR_BUSY;
 80103d6:	2302      	movs	r3, #2
 80103d8:	e1c2      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 80103da:	4ba4      	ldr	r3, [pc, #656]	; (801066c <rfalNfcPollCollResolution+0x620>)
 80103dc:	2200      	movs	r2, #0
 80103de:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 80103e0:	4ba1      	ldr	r3, [pc, #644]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80103e2:	2200      	movs	r2, #0
 80103e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 80103e8:	4b9f      	ldr	r3, [pc, #636]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80103ea:	889b      	ldrh	r3, [r3, #4]
 80103ec:	f023 0304 	bic.w	r3, r3, #4
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	4b9d      	ldr	r3, [pc, #628]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80103f4:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 80103f6:	4b9c      	ldr	r3, [pc, #624]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80103f8:	7b18      	ldrb	r0, [r3, #12]
 80103fa:	4b9b      	ldr	r3, [pc, #620]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80103fc:	7c9a      	ldrb	r2, [r3, #18]
 80103fe:	4b9a      	ldr	r3, [pc, #616]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010400:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	b2d9      	uxtb	r1, r3
 8010408:	1d3a      	adds	r2, r7, #4
 801040a:	4b98      	ldr	r3, [pc, #608]	; (801066c <rfalNfcPollCollResolution+0x620>)
 801040c:	f004 fcde 	bl	8014dcc <rfalNfcfPollerCollisionResolution>
 8010410:	4603      	mov	r3, r0
 8010412:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8010416:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801041a:	2b00      	cmp	r3, #0
 801041c:	d14c      	bne.n	80104b8 <rfalNfcPollCollResolution+0x46c>
 801041e:	4b93      	ldr	r3, [pc, #588]	; (801066c <rfalNfcPollCollResolution+0x620>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d048      	beq.n	80104b8 <rfalNfcPollCollResolution+0x46c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8010426:	2300      	movs	r3, #0
 8010428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801042c:	e03e      	b.n	80104ac <rfalNfcPollCollResolution+0x460>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 801042e:	4b8e      	ldr	r3, [pc, #568]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010430:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8010434:	4619      	mov	r1, r3
 8010436:	4a8c      	ldr	r2, [pc, #560]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010438:	460b      	mov	r3, r1
 801043a:	011b      	lsls	r3, r3, #4
 801043c:	1a5b      	subs	r3, r3, r1
 801043e:	00db      	lsls	r3, r3, #3
 8010440:	4413      	add	r3, r2
 8010442:	3398      	adds	r3, #152	; 0x98
 8010444:	2202      	movs	r2, #2
 8010446:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8010448:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 801044c:	4b86      	ldr	r3, [pc, #536]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801044e:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8010452:	4618      	mov	r0, r3
 8010454:	4984      	ldr	r1, [pc, #528]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010456:	4603      	mov	r3, r0
 8010458:	011b      	lsls	r3, r3, #4
 801045a:	1a1b      	subs	r3, r3, r0
 801045c:	00db      	lsls	r3, r3, #3
 801045e:	440b      	add	r3, r1
 8010460:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8010464:	4613      	mov	r3, r2
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	4413      	add	r3, r2
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	4413      	add	r3, r2
 801046e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010472:	4413      	add	r3, r2
 8010474:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8010478:	1c4b      	adds	r3, r1, #1
 801047a:	6815      	ldr	r5, [r2, #0]
 801047c:	6854      	ldr	r4, [r2, #4]
 801047e:	6890      	ldr	r0, [r2, #8]
 8010480:	68d1      	ldr	r1, [r2, #12]
 8010482:	601d      	str	r5, [r3, #0]
 8010484:	605c      	str	r4, [r3, #4]
 8010486:	6098      	str	r0, [r3, #8]
 8010488:	60d9      	str	r1, [r3, #12]
 801048a:	8a11      	ldrh	r1, [r2, #16]
 801048c:	7c92      	ldrb	r2, [r2, #18]
 801048e:	8219      	strh	r1, [r3, #16]
 8010490:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 8010492:	4b75      	ldr	r3, [pc, #468]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010494:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8010498:	3301      	adds	r3, #1
 801049a:	b2da      	uxtb	r2, r3
 801049c:	4b72      	ldr	r3, [pc, #456]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801049e:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80104a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104a6:	3301      	adds	r3, #1
 80104a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80104ac:	4b6f      	ldr	r3, [pc, #444]	; (801066c <rfalNfcPollCollResolution+0x620>)
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d3ba      	bcc.n	801042e <rfalNfcPollCollResolution+0x3e2>
            }
        }
        
        return ERR_BUSY;
 80104b8:	2302      	movs	r3, #2
 80104ba:	e151      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 80104bc:	4b6a      	ldr	r3, [pc, #424]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80104be:	885b      	ldrh	r3, [r3, #2]
 80104c0:	f003 0308 	and.w	r3, r3, #8
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 80a1 	beq.w	801060c <rfalNfcPollCollResolution+0x5c0>
 80104ca:	4b67      	ldr	r3, [pc, #412]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80104cc:	889b      	ldrh	r3, [r3, #4]
 80104ce:	f003 0308 	and.w	r3, r3, #8
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 809a 	beq.w	801060c <rfalNfcPollCollResolution+0x5c0>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 80104d8:	4b63      	ldr	r3, [pc, #396]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80104da:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80104de:	f083 0301 	eor.w	r3, r3, #1
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01b      	beq.n	8010520 <rfalNfcPollCollResolution+0x4d4>
        {
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                            /* Initialize RFAL for NFC-V */
 80104e8:	f004 ff84 	bl	80153f4 <rfalNfcvPollerInitialize>
 80104ec:	4603      	mov	r3, r0
 80104ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80104f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d002      	beq.n	8010500 <rfalNfcPollCollResolution+0x4b4>
 80104fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80104fe:	e12f      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 8010500:	f006 fa0e 	bl	8016920 <rfalFieldOnAndStartGT>
 8010504:	4603      	mov	r3, r0
 8010506:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801050a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801050e:	2b00      	cmp	r3, #0
 8010510:	d002      	beq.n	8010518 <rfalNfcPollCollResolution+0x4cc>
 8010512:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010516:	e123      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            gNfcDev.isTechInit = true;
 8010518:	4b53      	ldr	r3, [pc, #332]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801051a:	2201      	movs	r2, #1
 801051c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 8010520:	f006 f9e6 	bl	80168f0 <rfalIsGTExpired>
 8010524:	4603      	mov	r3, r0
 8010526:	f083 0301 	eor.w	r3, r3, #1
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	d001      	beq.n	8010534 <rfalNfcPollCollResolution+0x4e8>
        {
            return ERR_BUSY;
 8010530:	2302      	movs	r3, #2
 8010532:	e115      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 8010534:	4b4d      	ldr	r3, [pc, #308]	; (801066c <rfalNfcPollCollResolution+0x620>)
 8010536:	2200      	movs	r2, #0
 8010538:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 801053a:	4b4b      	ldr	r3, [pc, #300]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801053c:	2200      	movs	r2, #0
 801053e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 8010542:	4b49      	ldr	r3, [pc, #292]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010544:	889b      	ldrh	r3, [r3, #4]
 8010546:	f023 0308 	bic.w	r3, r3, #8
 801054a:	b29a      	uxth	r2, r3
 801054c:	4b46      	ldr	r3, [pc, #280]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801054e:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 8010550:	4b45      	ldr	r3, [pc, #276]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010552:	7c9a      	ldrb	r2, [r3, #18]
 8010554:	4b44      	ldr	r3, [pc, #272]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010556:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 801055a:	1ad3      	subs	r3, r2, r3
 801055c:	b2d9      	uxtb	r1, r3
 801055e:	1d3a      	adds	r2, r7, #4
 8010560:	4b42      	ldr	r3, [pc, #264]	; (801066c <rfalNfcPollCollResolution+0x620>)
 8010562:	2000      	movs	r0, #0
 8010564:	f004 fff5 	bl	8015552 <rfalNfcvPollerCollisionResolution>
 8010568:	4603      	mov	r3, r0
 801056a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 801056e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010572:	2b00      	cmp	r3, #0
 8010574:	d148      	bne.n	8010608 <rfalNfcPollCollResolution+0x5bc>
 8010576:	4b3d      	ldr	r3, [pc, #244]	; (801066c <rfalNfcPollCollResolution+0x620>)
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d044      	beq.n	8010608 <rfalNfcPollCollResolution+0x5bc>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 801057e:	2300      	movs	r3, #0
 8010580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010584:	e03a      	b.n	80105fc <rfalNfcPollCollResolution+0x5b0>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8010586:	4b38      	ldr	r3, [pc, #224]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010588:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 801058c:	4619      	mov	r1, r3
 801058e:	4a36      	ldr	r2, [pc, #216]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 8010590:	460b      	mov	r3, r1
 8010592:	011b      	lsls	r3, r3, #4
 8010594:	1a5b      	subs	r3, r3, r1
 8010596:	00db      	lsls	r3, r3, #3
 8010598:	4413      	add	r3, r2
 801059a:	3398      	adds	r3, #152	; 0x98
 801059c:	2203      	movs	r2, #3
 801059e:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80105a0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80105a4:	4b30      	ldr	r3, [pc, #192]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80105a6:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80105aa:	4618      	mov	r0, r3
 80105ac:	492e      	ldr	r1, [pc, #184]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80105ae:	4603      	mov	r3, r0
 80105b0:	011b      	lsls	r3, r3, #4
 80105b2:	1a1b      	subs	r3, r3, r0
 80105b4:	00db      	lsls	r3, r3, #3
 80105b6:	440b      	add	r3, r1
 80105b8:	f103 0198 	add.w	r1, r3, #152	; 0x98
 80105bc:	4613      	mov	r3, r2
 80105be:	005b      	lsls	r3, r3, #1
 80105c0:	4413      	add	r3, r2
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	4413      	add	r3, r2
 80105c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80105ca:	4413      	add	r3, r2
 80105cc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80105d0:	1c4b      	adds	r3, r1, #1
 80105d2:	6814      	ldr	r4, [r2, #0]
 80105d4:	6850      	ldr	r0, [r2, #4]
 80105d6:	6891      	ldr	r1, [r2, #8]
 80105d8:	601c      	str	r4, [r3, #0]
 80105da:	6058      	str	r0, [r3, #4]
 80105dc:	6099      	str	r1, [r3, #8]
 80105de:	7b12      	ldrb	r2, [r2, #12]
 80105e0:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 80105e2:	4b21      	ldr	r3, [pc, #132]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80105e4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80105e8:	3301      	adds	r3, #1
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	4b1e      	ldr	r3, [pc, #120]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 80105ee:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80105f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105f6:	3301      	adds	r3, #1
 80105f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80105fc:	4b1b      	ldr	r3, [pc, #108]	; (801066c <rfalNfcPollCollResolution+0x620>)
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8010604:	429a      	cmp	r2, r3
 8010606:	d3be      	bcc.n	8010586 <rfalNfcPollCollResolution+0x53a>
            }
        }
        
        return ERR_BUSY;
 8010608:	2302      	movs	r3, #2
 801060a:	e0a9      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 801060c:	4b16      	ldr	r3, [pc, #88]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801060e:	885b      	ldrh	r3, [r3, #2]
 8010610:	f003 0320 	and.w	r3, r3, #32
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 80a2 	beq.w	801075e <rfalNfcPollCollResolution+0x712>
 801061a:	4b13      	ldr	r3, [pc, #76]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801061c:	889b      	ldrh	r3, [r3, #4]
 801061e:	f003 0320 	and.w	r3, r3, #32
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 809b 	beq.w	801075e <rfalNfcPollCollResolution+0x712>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8010628:	4b0f      	ldr	r3, [pc, #60]	; (8010668 <rfalNfcPollCollResolution+0x61c>)
 801062a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 801062e:	f083 0301 	eor.w	r3, r3, #1
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b00      	cmp	r3, #0
 8010636:	d01f      	beq.n	8010678 <rfalNfcPollCollResolution+0x62c>
        {
            EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                         /* Initialize RFAL for ST25TB */
 8010638:	f009 fb00 	bl	8019c3c <rfalSt25tbPollerInitialize>
 801063c:	4603      	mov	r3, r0
 801063e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010642:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <rfalNfcPollCollResolution+0x604>
 801064a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801064e:	e087      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 8010650:	f006 f966 	bl	8016920 <rfalFieldOnAndStartGT>
 8010654:	4603      	mov	r3, r0
 8010656:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801065a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801065e:	2b00      	cmp	r3, #0
 8010660:	d006      	beq.n	8010670 <rfalNfcPollCollResolution+0x624>
 8010662:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010666:	e07b      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
 8010668:	20002b64 	.word	0x20002b64
 801066c:	200033e6 	.word	0x200033e6
            gNfcDev.isTechInit = true;
 8010670:	4b3d      	ldr	r3, [pc, #244]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 8010672:	2201      	movs	r2, #1
 8010674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 8010678:	f006 f93a 	bl	80168f0 <rfalIsGTExpired>
 801067c:	4603      	mov	r3, r0
 801067e:	f083 0301 	eor.w	r3, r3, #1
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <rfalNfcPollCollResolution+0x640>
        {
            return ERR_BUSY;
 8010688:	2302      	movs	r3, #2
 801068a:	e069      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 801068c:	4b37      	ldr	r3, [pc, #220]	; (801076c <rfalNfcPollCollResolution+0x720>)
 801068e:	2200      	movs	r2, #0
 8010690:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 8010692:	4b35      	ldr	r3, [pc, #212]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 8010694:	2200      	movs	r2, #0
 8010696:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 801069a:	4b33      	ldr	r3, [pc, #204]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 801069c:	889b      	ldrh	r3, [r3, #4]
 801069e:	f023 0320 	bic.w	r3, r3, #32
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	4b30      	ldr	r3, [pc, #192]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 80106a6:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 80106a8:	4b2f      	ldr	r3, [pc, #188]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 80106aa:	7c9a      	ldrb	r2, [r3, #18]
 80106ac:	4b2e      	ldr	r3, [pc, #184]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 80106ae:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	1d39      	adds	r1, r7, #4
 80106b8:	4a2c      	ldr	r2, [pc, #176]	; (801076c <rfalNfcPollCollResolution+0x720>)
 80106ba:	4618      	mov	r0, r3
 80106bc:	f009 fbbb 	bl	8019e36 <rfalSt25tbPollerCollisionResolution>
 80106c0:	4603      	mov	r3, r0
 80106c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 80106c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d145      	bne.n	801075a <rfalNfcPollCollResolution+0x70e>
 80106ce:	4b27      	ldr	r3, [pc, #156]	; (801076c <rfalNfcPollCollResolution+0x720>)
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d041      	beq.n	801075a <rfalNfcPollCollResolution+0x70e>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80106d6:	2300      	movs	r3, #0
 80106d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80106dc:	e037      	b.n	801074e <rfalNfcPollCollResolution+0x702>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 80106de:	4b22      	ldr	r3, [pc, #136]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 80106e0:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80106e4:	4619      	mov	r1, r3
 80106e6:	4a20      	ldr	r2, [pc, #128]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 80106e8:	460b      	mov	r3, r1
 80106ea:	011b      	lsls	r3, r3, #4
 80106ec:	1a5b      	subs	r3, r3, r1
 80106ee:	00db      	lsls	r3, r3, #3
 80106f0:	4413      	add	r3, r2
 80106f2:	3398      	adds	r3, #152	; 0x98
 80106f4:	2204      	movs	r2, #4
 80106f6:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 80106f8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80106fc:	4b1a      	ldr	r3, [pc, #104]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 80106fe:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8010702:	4618      	mov	r0, r3
 8010704:	4918      	ldr	r1, [pc, #96]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 8010706:	4603      	mov	r3, r0
 8010708:	011b      	lsls	r3, r3, #4
 801070a:	1a1b      	subs	r3, r3, r0
 801070c:	00db      	lsls	r3, r3, #3
 801070e:	440b      	add	r3, r1
 8010710:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8010714:	4613      	mov	r3, r2
 8010716:	009b      	lsls	r3, r3, #2
 8010718:	4413      	add	r3, r2
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010720:	4413      	add	r3, r2
 8010722:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8010726:	1c4b      	adds	r3, r1, #1
 8010728:	6810      	ldr	r0, [r2, #0]
 801072a:	6851      	ldr	r1, [r2, #4]
 801072c:	6018      	str	r0, [r3, #0]
 801072e:	6059      	str	r1, [r3, #4]
 8010730:	8912      	ldrh	r2, [r2, #8]
 8010732:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 8010734:	4b0c      	ldr	r3, [pc, #48]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 8010736:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 801073a:	3301      	adds	r3, #1
 801073c:	b2da      	uxtb	r2, r3
 801073e:	4b0a      	ldr	r3, [pc, #40]	; (8010768 <rfalNfcPollCollResolution+0x71c>)
 8010740:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8010744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010748:	3301      	adds	r3, #1
 801074a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801074e:	4b07      	ldr	r3, [pc, #28]	; (801076c <rfalNfcPollCollResolution+0x720>)
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8010756:	429a      	cmp	r2, r3
 8010758:	d3c1      	bcc.n	80106de <rfalNfcPollCollResolution+0x692>
            }
        }
        
        return ERR_BUSY;
 801075a:	2302      	movs	r3, #2
 801075c:	e000      	b.n	8010760 <rfalNfcPollCollResolution+0x714>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3768      	adds	r7, #104	; 0x68
 8010764:	46bd      	mov	sp, r7
 8010766:	bdb0      	pop	{r4, r5, r7, pc}
 8010768:	20002b64 	.word	0x20002b64
 801076c:	200033e6 	.word	0x200033e6

08010770 <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b08e      	sub	sp, #56	; 0x38
 8010774:	af04      	add	r7, sp, #16
 8010776:	4603      	mov	r3, r0
 8010778:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 801077a:	2300      	movs	r3, #0
 801077c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 801077e:	4bb5      	ldr	r3, [pc, #724]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010780:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8010784:	79fa      	ldrb	r2, [r7, #7]
 8010786:	429a      	cmp	r2, r3
 8010788:	d901      	bls.n	801078e <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 801078a:	2321      	movs	r3, #33	; 0x21
 801078c:	e312      	b.n	8010db4 <rfalNfcPollActivation+0x644>
    }
    
    switch( gNfcDev.devList[devIt].type )
 801078e:	79fa      	ldrb	r2, [r7, #7]
 8010790:	49b0      	ldr	r1, [pc, #704]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010792:	4613      	mov	r3, r2
 8010794:	011b      	lsls	r3, r3, #4
 8010796:	1a9b      	subs	r3, r3, r2
 8010798:	00db      	lsls	r3, r3, #3
 801079a:	440b      	add	r3, r1
 801079c:	3398      	adds	r3, #152	; 0x98
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	2b05      	cmp	r3, #5
 80107a2:	f200 82fa 	bhi.w	8010d9a <rfalNfcPollActivation+0x62a>
 80107a6:	a201      	add	r2, pc, #4	; (adr r2, 80107ac <rfalNfcPollActivation+0x3c>)
 80107a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ac:	080107ff 	.word	0x080107ff
 80107b0:	08010aad 	.word	0x08010aad
 80107b4:	08010bf7 	.word	0x08010bf7
 80107b8:	08010cf1 	.word	0x08010cf1
 80107bc:	08010d49 	.word	0x08010d49
 80107c0:	080107c5 	.word	0x080107c5
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 80107c4:	79f9      	ldrb	r1, [r7, #7]
 80107c6:	79fa      	ldrb	r2, [r7, #7]
 80107c8:	460b      	mov	r3, r1
 80107ca:	011b      	lsls	r3, r3, #4
 80107cc:	1a5b      	subs	r3, r3, r1
 80107ce:	00db      	lsls	r3, r3, #3
 80107d0:	33b8      	adds	r3, #184	; 0xb8
 80107d2:	49a0      	ldr	r1, [pc, #640]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80107d4:	440b      	add	r3, r1
 80107d6:	1c99      	adds	r1, r3, #2
 80107d8:	489e      	ldr	r0, [pc, #632]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80107da:	4613      	mov	r3, r2
 80107dc:	011b      	lsls	r3, r3, #4
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	00db      	lsls	r3, r3, #3
 80107e2:	4403      	add	r3, r0
 80107e4:	33b0      	adds	r3, #176	; 0xb0
 80107e6:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 80107e8:	79fa      	ldrb	r2, [r7, #7]
 80107ea:	499a      	ldr	r1, [pc, #616]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80107ec:	4613      	mov	r3, r2
 80107ee:	011b      	lsls	r3, r3, #4
 80107f0:	1a9b      	subs	r3, r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	440b      	add	r3, r1
 80107f6:	33b4      	adds	r3, #180	; 0xb4
 80107f8:	220a      	movs	r2, #10
 80107fa:	701a      	strb	r2, [r3, #0]
            break;
 80107fc:	e2cf      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            if( !gNfcDev.isTechInit )
 80107fe:	4b95      	ldr	r3, [pc, #596]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010800:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8010804:	f083 0301 	eor.w	r3, r3, #1
 8010808:	b2db      	uxtb	r3, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00b      	beq.n	8010826 <rfalNfcPollActivation+0xb6>
            {
                rfalNfcaPollerInitialize();
 801080e:	f003 fbeb 	bl	8013fe8 <rfalNfcaPollerInitialize>
                gNfcDev.isTechInit    = true;
 8010812:	4b90      	ldr	r3, [pc, #576]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010814:	2201      	movs	r2, #1
 8010816:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
                gNfcDev.isOperOngoing = false;
 801081a:	4b8e      	ldr	r3, [pc, #568]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 801081c:	2200      	movs	r2, #0
 801081e:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                return ERR_BUSY;
 8010822:	2302      	movs	r3, #2
 8010824:	e2c6      	b.n	8010db4 <rfalNfcPollActivation+0x644>
            }
            
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 8010826:	79fa      	ldrb	r2, [r7, #7]
 8010828:	498a      	ldr	r1, [pc, #552]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 801082a:	4613      	mov	r3, r2
 801082c:	011b      	lsls	r3, r3, #4
 801082e:	1a9b      	subs	r3, r3, r2
 8010830:	00db      	lsls	r3, r3, #3
 8010832:	440b      	add	r3, r1
 8010834:	33ae      	adds	r3, #174	; 0xae
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d047      	beq.n	80108cc <rfalNfcPollActivation+0x15c>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                if( !gNfcDev.isOperOngoing )
 801083c:	4b85      	ldr	r3, [pc, #532]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 801083e:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 8010842:	f083 0301 	eor.w	r3, r3, #1
 8010846:	b2db      	uxtb	r3, r3
 8010848:	2b00      	cmp	r3, #0
 801084a:	d011      	beq.n	8010870 <rfalNfcPollActivation+0x100>
                {
                    /* Wake up all cards  */
                    EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); 
 801084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010850:	4619      	mov	r1, r3
 8010852:	2052      	movs	r0, #82	; 0x52
 8010854:	f003 fbec 	bl	8014030 <rfalNfcaPollerCheckPresence>
 8010858:	4603      	mov	r3, r0
 801085a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801085c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <rfalNfcPollActivation+0xf6>
 8010862:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010864:	e2a6      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                    gNfcDev.isOperOngoing = true;
 8010866:	4b7b      	ldr	r3, [pc, #492]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010868:	2201      	movs	r2, #1
 801086a:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 801086e:	e02b      	b.n	80108c8 <rfalNfcPollActivation+0x158>
                }
                else
                {
                    /* Select specific device */
                    EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); 
 8010870:	79fa      	ldrb	r2, [r7, #7]
 8010872:	4613      	mov	r3, r2
 8010874:	011b      	lsls	r3, r3, #4
 8010876:	1a9b      	subs	r3, r3, r2
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	3398      	adds	r3, #152	; 0x98
 801087c:	4a75      	ldr	r2, [pc, #468]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 801087e:	4413      	add	r3, r2
 8010880:	1d98      	adds	r0, r3, #6
 8010882:	79fa      	ldrb	r2, [r7, #7]
 8010884:	4973      	ldr	r1, [pc, #460]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010886:	4613      	mov	r3, r2
 8010888:	011b      	lsls	r3, r3, #4
 801088a:	1a9b      	subs	r3, r3, r2
 801088c:	00db      	lsls	r3, r3, #3
 801088e:	440b      	add	r3, r1
 8010890:	339d      	adds	r3, #157	; 0x9d
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	f107 0220 	add.w	r2, r7, #32
 8010898:	4619      	mov	r1, r3
 801089a:	f003 fd8f 	bl	80143bc <rfalNfcaPollerSelect>
 801089e:	4603      	mov	r3, r0
 80108a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80108a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d001      	beq.n	80108ac <rfalNfcPollActivation+0x13c>
 80108a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80108aa:	e283      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                    gNfcDev.devList[devIt].dev.nfca.isSleep = false;
 80108ac:	79fa      	ldrb	r2, [r7, #7]
 80108ae:	4969      	ldr	r1, [pc, #420]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80108b0:	4613      	mov	r3, r2
 80108b2:	011b      	lsls	r3, r3, #4
 80108b4:	1a9b      	subs	r3, r3, r2
 80108b6:	00db      	lsls	r3, r3, #3
 80108b8:	440b      	add	r3, r1
 80108ba:	33ae      	adds	r3, #174	; 0xae
 80108bc:	2200      	movs	r2, #0
 80108be:	701a      	strb	r2, [r3, #0]
                    gNfcDev.isOperOngoing = false;
 80108c0:	4b64      	ldr	r3, [pc, #400]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80108c2:	2200      	movs	r2, #0
 80108c4:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                }
                return ERR_BUSY;
 80108c8:	2302      	movs	r3, #2
 80108ca:	e273      	b.n	8010db4 <rfalNfcPollActivation+0x644>
            }
            
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 80108cc:	79f9      	ldrb	r1, [r7, #7]
 80108ce:	79fa      	ldrb	r2, [r7, #7]
 80108d0:	460b      	mov	r3, r1
 80108d2:	011b      	lsls	r3, r3, #4
 80108d4:	1a5b      	subs	r3, r3, r1
 80108d6:	00db      	lsls	r3, r3, #3
 80108d8:	3398      	adds	r3, #152	; 0x98
 80108da:	495e      	ldr	r1, [pc, #376]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80108dc:	440b      	add	r3, r1
 80108de:	1d99      	adds	r1, r3, #6
 80108e0:	485c      	ldr	r0, [pc, #368]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80108e2:	4613      	mov	r3, r2
 80108e4:	011b      	lsls	r3, r3, #4
 80108e6:	1a9b      	subs	r3, r3, r2
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	4403      	add	r3, r0
 80108ec:	33b0      	adds	r3, #176	; 0xb0
 80108ee:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 80108f0:	79f9      	ldrb	r1, [r7, #7]
 80108f2:	79fa      	ldrb	r2, [r7, #7]
 80108f4:	4857      	ldr	r0, [pc, #348]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80108f6:	460b      	mov	r3, r1
 80108f8:	011b      	lsls	r3, r3, #4
 80108fa:	1a5b      	subs	r3, r3, r1
 80108fc:	00db      	lsls	r3, r3, #3
 80108fe:	4403      	add	r3, r0
 8010900:	339d      	adds	r3, #157	; 0x9d
 8010902:	7818      	ldrb	r0, [r3, #0]
 8010904:	4953      	ldr	r1, [pc, #332]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010906:	4613      	mov	r3, r2
 8010908:	011b      	lsls	r3, r3, #4
 801090a:	1a9b      	subs	r3, r3, r2
 801090c:	00db      	lsls	r3, r3, #3
 801090e:	440b      	add	r3, r1
 8010910:	33b4      	adds	r3, #180	; 0xb4
 8010912:	4602      	mov	r2, r0
 8010914:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8010916:	79fa      	ldrb	r2, [r7, #7]
 8010918:	494e      	ldr	r1, [pc, #312]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 801091a:	4613      	mov	r3, r2
 801091c:	011b      	lsls	r3, r3, #4
 801091e:	1a9b      	subs	r3, r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	440b      	add	r3, r1
 8010924:	3399      	adds	r3, #153	; 0x99
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	2b60      	cmp	r3, #96	; 0x60
 801092a:	d07e      	beq.n	8010a2a <rfalNfcPollActivation+0x2ba>
 801092c:	2b60      	cmp	r3, #96	; 0x60
 801092e:	f300 80ba 	bgt.w	8010aa6 <rfalNfcPollActivation+0x336>
 8010932:	2b40      	cmp	r3, #64	; 0x40
 8010934:	d079      	beq.n	8010a2a <rfalNfcPollActivation+0x2ba>
 8010936:	2b40      	cmp	r3, #64	; 0x40
 8010938:	f300 80b5 	bgt.w	8010aa6 <rfalNfcPollActivation+0x336>
 801093c:	2b20      	cmp	r3, #32
 801093e:	d03a      	beq.n	80109b6 <rfalNfcPollActivation+0x246>
 8010940:	2b20      	cmp	r3, #32
 8010942:	f300 80b0 	bgt.w	8010aa6 <rfalNfcPollActivation+0x336>
 8010946:	2b00      	cmp	r3, #0
 8010948:	d02a      	beq.n	80109a0 <rfalNfcPollActivation+0x230>
 801094a:	2b01      	cmp	r3, #1
 801094c:	f040 80ab 	bne.w	8010aa6 <rfalNfcPollActivation+0x336>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 8010950:	79f9      	ldrb	r1, [r7, #7]
 8010952:	79fa      	ldrb	r2, [r7, #7]
 8010954:	460b      	mov	r3, r1
 8010956:	011b      	lsls	r3, r3, #4
 8010958:	1a5b      	subs	r3, r3, r1
 801095a:	00db      	lsls	r3, r3, #3
 801095c:	33a0      	adds	r3, #160	; 0xa0
 801095e:	493d      	ldr	r1, [pc, #244]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010960:	440b      	add	r3, r1
 8010962:	f103 010a 	add.w	r1, r3, #10
 8010966:	483b      	ldr	r0, [pc, #236]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010968:	4613      	mov	r3, r2
 801096a:	011b      	lsls	r3, r3, #4
 801096c:	1a9b      	subs	r3, r3, r2
 801096e:	00db      	lsls	r3, r3, #3
 8010970:	4403      	add	r3, r0
 8010972:	33b0      	adds	r3, #176	; 0xb0
 8010974:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8010976:	79fa      	ldrb	r2, [r7, #7]
 8010978:	4936      	ldr	r1, [pc, #216]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 801097a:	4613      	mov	r3, r2
 801097c:	011b      	lsls	r3, r3, #4
 801097e:	1a9b      	subs	r3, r3, r2
 8010980:	00db      	lsls	r3, r3, #3
 8010982:	440b      	add	r3, r1
 8010984:	33b4      	adds	r3, #180	; 0xb4
 8010986:	2204      	movs	r2, #4
 8010988:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 801098a:	79fa      	ldrb	r2, [r7, #7]
 801098c:	4931      	ldr	r1, [pc, #196]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 801098e:	4613      	mov	r3, r2
 8010990:	011b      	lsls	r3, r3, #4
 8010992:	1a9b      	subs	r3, r3, r2
 8010994:	00db      	lsls	r3, r3, #3
 8010996:	440b      	add	r3, r1
 8010998:	33b5      	adds	r3, #181	; 0xb5
 801099a:	2200      	movs	r2, #0
 801099c:	701a      	strb	r2, [r3, #0]
                    break;
 801099e:	e084      	b.n	8010aaa <rfalNfcPollActivation+0x33a>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 80109a0:	79fa      	ldrb	r2, [r7, #7]
 80109a2:	492c      	ldr	r1, [pc, #176]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80109a4:	4613      	mov	r3, r2
 80109a6:	011b      	lsls	r3, r3, #4
 80109a8:	1a9b      	subs	r3, r3, r2
 80109aa:	00db      	lsls	r3, r3, #3
 80109ac:	440b      	add	r3, r1
 80109ae:	33b5      	adds	r3, #181	; 0xb5
 80109b0:	2200      	movs	r2, #0
 80109b2:	701a      	strb	r2, [r3, #0]
                    break;
 80109b4:	e079      	b.n	8010aaa <rfalNfcPollActivation+0x33a>
                
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_POLL
                    if( !gNfcDev.isOperOngoing )
 80109b6:	4b27      	ldr	r3, [pc, #156]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80109b8:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 80109bc:	f083 0301 	eor.w	r3, r3, #1
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d01d      	beq.n	8010a02 <rfalNfcPollActivation+0x292>
                    {
                        /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                        rfalIsoDepInitialize();                    
 80109c6:	f7fc f9b9 	bl	800cd3c <rfalIsoDepInitialize>
                        EXIT_ON_ERR( err, rfalIsoDepPollAStartActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, &gNfcDev.devList[devIt].proto.isoDep ) );
 80109ca:	4b22      	ldr	r3, [pc, #136]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80109cc:	7cd9      	ldrb	r1, [r3, #19]
 80109ce:	79fa      	ldrb	r2, [r7, #7]
 80109d0:	4613      	mov	r3, r2
 80109d2:	011b      	lsls	r3, r3, #4
 80109d4:	1a9b      	subs	r3, r3, r2
 80109d6:	00db      	lsls	r3, r3, #3
 80109d8:	33b8      	adds	r3, #184	; 0xb8
 80109da:	4a1e      	ldr	r2, [pc, #120]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80109dc:	4413      	add	r3, r2
 80109de:	460a      	mov	r2, r1
 80109e0:	2100      	movs	r1, #0
 80109e2:	2008      	movs	r0, #8
 80109e4:	f7fd fefc 	bl	800e7e0 <rfalIsoDepPollAStartActivation>
 80109e8:	4603      	mov	r3, r0
 80109ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80109ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d001      	beq.n	80109f6 <rfalNfcPollActivation+0x286>
 80109f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80109f4:	e1de      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                        
                        gNfcDev.isOperOngoing = true;
 80109f6:	4b17      	ldr	r3, [pc, #92]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 80109f8:	2201      	movs	r2, #1
 80109fa:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                        return ERR_BUSY;
 80109fe:	2302      	movs	r3, #2
 8010a00:	e1d8      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                    }

                    err = rfalIsoDepPollAGetActivationStatus();
 8010a02:	f7fd ff23 	bl	800e84c <rfalIsoDepPollAGetActivationStatus>
 8010a06:	4603      	mov	r3, r0
 8010a08:	84fb      	strh	r3, [r7, #38]	; 0x26
                    if( err != ERR_NONE )
 8010a0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d001      	beq.n	8010a14 <rfalNfcPollActivation+0x2a4>
                    {
                        return err;
 8010a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010a12:	e1cf      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                    }
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 8010a14:	79fa      	ldrb	r2, [r7, #7]
 8010a16:	490f      	ldr	r1, [pc, #60]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010a18:	4613      	mov	r3, r2
 8010a1a:	011b      	lsls	r3, r3, #4
 8010a1c:	1a9b      	subs	r3, r3, r2
 8010a1e:	00db      	lsls	r3, r3, #3
 8010a20:	440b      	add	r3, r1
 8010a22:	33b5      	adds	r3, #181	; 0xb5
 8010a24:	2201      	movs	r2, #1
 8010a26:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 8010a28:	e03f      	b.n	8010aaa <rfalNfcPollActivation+0x33a>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8010a2a:	79fa      	ldrb	r2, [r7, #7]
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	011b      	lsls	r3, r3, #4
 8010a30:	1a9b      	subs	r3, r3, r2
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	3398      	adds	r3, #152	; 0x98
 8010a36:	4a07      	ldr	r2, [pc, #28]	; (8010a54 <rfalNfcPollActivation+0x2e4>)
 8010a38:	1898      	adds	r0, r3, r2
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	2100      	movs	r1, #0
 8010a40:	f000 fb8e 	bl	8011160 <rfalNfcNfcDepActivate>
 8010a44:	4603      	mov	r3, r0
 8010a46:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d004      	beq.n	8010a58 <rfalNfcPollActivation+0x2e8>
 8010a4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010a50:	e1b0      	b.n	8010db4 <rfalNfcPollActivation+0x644>
 8010a52:	bf00      	nop
 8010a54:	20002b64 	.word	0x20002b64
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8010a58:	79f9      	ldrb	r1, [r7, #7]
 8010a5a:	79fa      	ldrb	r2, [r7, #7]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	011b      	lsls	r3, r3, #4
 8010a60:	1a5b      	subs	r3, r3, r1
 8010a62:	00db      	lsls	r3, r3, #3
 8010a64:	33b8      	adds	r3, #184	; 0xb8
 8010a66:	49b7      	ldr	r1, [pc, #732]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010a68:	440b      	add	r3, r1
 8010a6a:	1c99      	adds	r1, r3, #2
 8010a6c:	48b5      	ldr	r0, [pc, #724]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010a6e:	4613      	mov	r3, r2
 8010a70:	011b      	lsls	r3, r3, #4
 8010a72:	1a9b      	subs	r3, r3, r2
 8010a74:	00db      	lsls	r3, r3, #3
 8010a76:	4403      	add	r3, r0
 8010a78:	33b0      	adds	r3, #176	; 0xb0
 8010a7a:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8010a7c:	79fa      	ldrb	r2, [r7, #7]
 8010a7e:	49b1      	ldr	r1, [pc, #708]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010a80:	4613      	mov	r3, r2
 8010a82:	011b      	lsls	r3, r3, #4
 8010a84:	1a9b      	subs	r3, r3, r2
 8010a86:	00db      	lsls	r3, r3, #3
 8010a88:	440b      	add	r3, r1
 8010a8a:	33b4      	adds	r3, #180	; 0xb4
 8010a8c:	220a      	movs	r2, #10
 8010a8e:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 8010a90:	79fa      	ldrb	r2, [r7, #7]
 8010a92:	49ac      	ldr	r1, [pc, #688]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010a94:	4613      	mov	r3, r2
 8010a96:	011b      	lsls	r3, r3, #4
 8010a98:	1a9b      	subs	r3, r3, r2
 8010a9a:	00db      	lsls	r3, r3, #3
 8010a9c:	440b      	add	r3, r1
 8010a9e:	33b5      	adds	r3, #181	; 0xb5
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 8010aa4:	e001      	b.n	8010aaa <rfalNfcPollActivation+0x33a>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 8010aa6:	2321      	movs	r3, #33	; 0x21
 8010aa8:	e184      	b.n	8010db4 <rfalNfcPollActivation+0x644>
            }
            break;
 8010aaa:	e178      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            if( !gNfcDev.isTechInit )
 8010aac:	4ba5      	ldr	r3, [pc, #660]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010aae:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8010ab2:	f083 0301 	eor.w	r3, r3, #1
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <rfalNfcPollActivation+0x364>
            {
                rfalNfcbPollerInitialize();
 8010abc:	f003 fd44 	bl	8014548 <rfalNfcbPollerInitialize>
                gNfcDev.isTechInit    = true;
 8010ac0:	4ba0      	ldr	r3, [pc, #640]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
                gNfcDev.isOperOngoing = false;
 8010ac8:	4b9e      	ldr	r3, [pc, #632]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                return ERR_BUSY;
 8010ad0:	2302      	movs	r3, #2
 8010ad2:	e16f      	b.n	8010db4 <rfalNfcPollActivation+0x644>
            }
            
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 8010ad4:	79fa      	ldrb	r2, [r7, #7]
 8010ad6:	499b      	ldr	r1, [pc, #620]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010ad8:	4613      	mov	r3, r2
 8010ada:	011b      	lsls	r3, r3, #4
 8010adc:	1a9b      	subs	r3, r3, r2
 8010ade:	00db      	lsls	r3, r3, #3
 8010ae0:	440b      	add	r3, r1
 8010ae2:	33a7      	adds	r3, #167	; 0xa7
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d007      	beq.n	8010afa <rfalNfcPollActivation+0x38a>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8010aea:	f107 030f 	add.w	r3, r7, #15
 8010aee:	f107 0210 	add.w	r2, r7, #16
 8010af2:	2100      	movs	r1, #0
 8010af4:	2008      	movs	r0, #8
 8010af6:	f003 fd53 	bl	80145a0 <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 8010afa:	79f9      	ldrb	r1, [r7, #7]
 8010afc:	79fa      	ldrb	r2, [r7, #7]
 8010afe:	460b      	mov	r3, r1
 8010b00:	011b      	lsls	r3, r3, #4
 8010b02:	1a5b      	subs	r3, r3, r1
 8010b04:	00db      	lsls	r3, r3, #3
 8010b06:	3398      	adds	r3, #152	; 0x98
 8010b08:	498e      	ldr	r1, [pc, #568]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b0a:	440b      	add	r3, r1
 8010b0c:	1cd9      	adds	r1, r3, #3
 8010b0e:	488d      	ldr	r0, [pc, #564]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b10:	4613      	mov	r3, r2
 8010b12:	011b      	lsls	r3, r3, #4
 8010b14:	1a9b      	subs	r3, r3, r2
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	4403      	add	r3, r0
 8010b1a:	33b0      	adds	r3, #176	; 0xb0
 8010b1c:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8010b1e:	79fa      	ldrb	r2, [r7, #7]
 8010b20:	4988      	ldr	r1, [pc, #544]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b22:	4613      	mov	r3, r2
 8010b24:	011b      	lsls	r3, r3, #4
 8010b26:	1a9b      	subs	r3, r3, r2
 8010b28:	00db      	lsls	r3, r3, #3
 8010b2a:	440b      	add	r3, r1
 8010b2c:	33b4      	adds	r3, #180	; 0xb4
 8010b2e:	2204      	movs	r2, #4
 8010b30:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8010b32:	79fa      	ldrb	r2, [r7, #7]
 8010b34:	4983      	ldr	r1, [pc, #524]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b36:	4613      	mov	r3, r2
 8010b38:	011b      	lsls	r3, r3, #4
 8010b3a:	1a9b      	subs	r3, r3, r2
 8010b3c:	00db      	lsls	r3, r3, #3
 8010b3e:	440b      	add	r3, r1
 8010b40:	33a4      	adds	r3, #164	; 0xa4
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	f003 0301 	and.w	r3, r3, #1
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d049      	beq.n	8010be0 <rfalNfcPollActivation+0x470>
            {
                if( !gNfcDev.isOperOngoing )
 8010b4c:	4b7d      	ldr	r3, [pc, #500]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b4e:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 8010b52:	f083 0301 	eor.w	r3, r3, #1
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d02d      	beq.n	8010bb8 <rfalNfcPollActivation+0x448>
                {
                    rfalIsoDepInitialize();
 8010b5c:	f7fc f8ee 	bl	800cd3c <rfalIsoDepInitialize>
                    /* Perform ISO-DEP (ISO14443-4) activation: ATTRIB    */
                    EXIT_ON_ERR( err, rfalIsoDepPollBStartActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8010b60:	4b78      	ldr	r3, [pc, #480]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b62:	7cd8      	ldrb	r0, [r3, #19]
 8010b64:	79fa      	ldrb	r2, [r7, #7]
 8010b66:	4613      	mov	r3, r2
 8010b68:	011b      	lsls	r3, r3, #4
 8010b6a:	1a9b      	subs	r3, r3, r2
 8010b6c:	00db      	lsls	r3, r3, #3
 8010b6e:	3398      	adds	r3, #152	; 0x98
 8010b70:	4a74      	ldr	r2, [pc, #464]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b72:	4413      	add	r3, r2
 8010b74:	1c59      	adds	r1, r3, #1
 8010b76:	79fa      	ldrb	r2, [r7, #7]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	011b      	lsls	r3, r3, #4
 8010b7c:	1a9b      	subs	r3, r3, r2
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	33b8      	adds	r3, #184	; 0xb8
 8010b82:	4a70      	ldr	r2, [pc, #448]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010b84:	4413      	add	r3, r2
 8010b86:	9303      	str	r3, [sp, #12]
 8010b88:	2300      	movs	r3, #0
 8010b8a:	9302      	str	r3, [sp, #8]
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	9301      	str	r3, [sp, #4]
 8010b90:	9100      	str	r1, [sp, #0]
 8010b92:	2300      	movs	r3, #0
 8010b94:	4602      	mov	r2, r0
 8010b96:	2100      	movs	r1, #0
 8010b98:	2008      	movs	r0, #8
 8010b9a:	f7fe f807 	bl	800ebac <rfalIsoDepPollBStartActivation>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010ba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d001      	beq.n	8010bac <rfalNfcPollActivation+0x43c>
 8010ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010baa:	e103      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                    
                    gNfcDev.isOperOngoing = true;
 8010bac:	4b65      	ldr	r3, [pc, #404]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010bae:	2201      	movs	r2, #1
 8010bb0:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                    return ERR_BUSY;
 8010bb4:	2302      	movs	r3, #2
 8010bb6:	e0fd      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                }
                
                err = rfalIsoDepPollBGetActivationStatus();
 8010bb8:	f7fe f8d6 	bl	800ed68 <rfalIsoDepPollBGetActivationStatus>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
                if( err != ERR_NONE )
 8010bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d001      	beq.n	8010bca <rfalNfcPollActivation+0x45a>
                {
                    return err;
 8010bc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bc8:	e0f4      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                }
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8010bca:	79fa      	ldrb	r2, [r7, #7]
 8010bcc:	495d      	ldr	r1, [pc, #372]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010bce:	4613      	mov	r3, r2
 8010bd0:	011b      	lsls	r3, r3, #4
 8010bd2:	1a9b      	subs	r3, r3, r2
 8010bd4:	00db      	lsls	r3, r3, #3
 8010bd6:	440b      	add	r3, r1
 8010bd8:	33b5      	adds	r3, #181	; 0xb5
 8010bda:	2201      	movs	r2, #1
 8010bdc:	701a      	strb	r2, [r3, #0]
                break;
 8010bde:	e0de      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
            }
                    
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8010be0:	79fa      	ldrb	r2, [r7, #7]
 8010be2:	4958      	ldr	r1, [pc, #352]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010be4:	4613      	mov	r3, r2
 8010be6:	011b      	lsls	r3, r3, #4
 8010be8:	1a9b      	subs	r3, r3, r2
 8010bea:	00db      	lsls	r3, r3, #3
 8010bec:	440b      	add	r3, r1
 8010bee:	33b5      	adds	r3, #181	; 0xb5
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	701a      	strb	r2, [r3, #0]
            break;
 8010bf4:	e0d3      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 8010bf6:	4b53      	ldr	r3, [pc, #332]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010bf8:	7d1b      	ldrb	r3, [r3, #20]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f004 f878 	bl	8014cf0 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8010c00:	79fa      	ldrb	r2, [r7, #7]
 8010c02:	4950      	ldr	r1, [pc, #320]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010c04:	4613      	mov	r3, r2
 8010c06:	011b      	lsls	r3, r3, #4
 8010c08:	1a9b      	subs	r3, r3, r2
 8010c0a:	00db      	lsls	r3, r3, #3
 8010c0c:	440b      	add	r3, r1
 8010c0e:	339b      	adds	r3, #155	; 0x9b
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d145      	bne.n	8010ca2 <rfalNfcPollActivation+0x532>
 8010c16:	79fa      	ldrb	r2, [r7, #7]
 8010c18:	494a      	ldr	r1, [pc, #296]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	011b      	lsls	r3, r3, #4
 8010c1e:	1a9b      	subs	r3, r3, r2
 8010c20:	00db      	lsls	r3, r3, #3
 8010c22:	440b      	add	r3, r1
 8010c24:	339c      	adds	r3, #156	; 0x9c
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2bfe      	cmp	r3, #254	; 0xfe
 8010c2a:	d13a      	bne.n	8010ca2 <rfalNfcPollActivation+0x532>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8010c2c:	79fa      	ldrb	r2, [r7, #7]
 8010c2e:	4613      	mov	r3, r2
 8010c30:	011b      	lsls	r3, r3, #4
 8010c32:	1a9b      	subs	r3, r3, r2
 8010c34:	00db      	lsls	r3, r3, #3
 8010c36:	3398      	adds	r3, #152	; 0x98
 8010c38:	4a42      	ldr	r2, [pc, #264]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010c3a:	1898      	adds	r0, r3, r2
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	2200      	movs	r2, #0
 8010c40:	2100      	movs	r1, #0
 8010c42:	f000 fa8d 	bl	8011160 <rfalNfcNfcDepActivate>
 8010c46:	4603      	mov	r3, r0
 8010c48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010c4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <rfalNfcPollActivation+0x4e4>
 8010c50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c52:	e0af      	b.n	8010db4 <rfalNfcPollActivation+0x644>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8010c54:	79f9      	ldrb	r1, [r7, #7]
 8010c56:	79fa      	ldrb	r2, [r7, #7]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	011b      	lsls	r3, r3, #4
 8010c5c:	1a5b      	subs	r3, r3, r1
 8010c5e:	00db      	lsls	r3, r3, #3
 8010c60:	33b8      	adds	r3, #184	; 0xb8
 8010c62:	4938      	ldr	r1, [pc, #224]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010c64:	440b      	add	r3, r1
 8010c66:	1c99      	adds	r1, r3, #2
 8010c68:	4836      	ldr	r0, [pc, #216]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	011b      	lsls	r3, r3, #4
 8010c6e:	1a9b      	subs	r3, r3, r2
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	4403      	add	r3, r0
 8010c74:	33b0      	adds	r3, #176	; 0xb0
 8010c76:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8010c78:	79fa      	ldrb	r2, [r7, #7]
 8010c7a:	4932      	ldr	r1, [pc, #200]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	011b      	lsls	r3, r3, #4
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	440b      	add	r3, r1
 8010c86:	33b4      	adds	r3, #180	; 0xb4
 8010c88:	220a      	movs	r2, #10
 8010c8a:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 8010c8c:	79fa      	ldrb	r2, [r7, #7]
 8010c8e:	492d      	ldr	r1, [pc, #180]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010c90:	4613      	mov	r3, r2
 8010c92:	011b      	lsls	r3, r3, #4
 8010c94:	1a9b      	subs	r3, r3, r2
 8010c96:	00db      	lsls	r3, r3, #3
 8010c98:	440b      	add	r3, r1
 8010c9a:	33b5      	adds	r3, #181	; 0xb5
 8010c9c:	2202      	movs	r2, #2
 8010c9e:	701a      	strb	r2, [r3, #0]
                break;
 8010ca0:	e07d      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8010ca2:	79f9      	ldrb	r1, [r7, #7]
 8010ca4:	79fa      	ldrb	r2, [r7, #7]
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	011b      	lsls	r3, r3, #4
 8010caa:	1a5b      	subs	r3, r3, r1
 8010cac:	00db      	lsls	r3, r3, #3
 8010cae:	3398      	adds	r3, #152	; 0x98
 8010cb0:	4924      	ldr	r1, [pc, #144]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010cb2:	440b      	add	r3, r1
 8010cb4:	1cd9      	adds	r1, r3, #3
 8010cb6:	4823      	ldr	r0, [pc, #140]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010cb8:	4613      	mov	r3, r2
 8010cba:	011b      	lsls	r3, r3, #4
 8010cbc:	1a9b      	subs	r3, r3, r2
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	4403      	add	r3, r0
 8010cc2:	33b0      	adds	r3, #176	; 0xb0
 8010cc4:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8010cc6:	79fa      	ldrb	r2, [r7, #7]
 8010cc8:	491e      	ldr	r1, [pc, #120]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010cca:	4613      	mov	r3, r2
 8010ccc:	011b      	lsls	r3, r3, #4
 8010cce:	1a9b      	subs	r3, r3, r2
 8010cd0:	00db      	lsls	r3, r3, #3
 8010cd2:	440b      	add	r3, r1
 8010cd4:	33b4      	adds	r3, #180	; 0xb4
 8010cd6:	2208      	movs	r2, #8
 8010cd8:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8010cda:	79fa      	ldrb	r2, [r7, #7]
 8010cdc:	4919      	ldr	r1, [pc, #100]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010cde:	4613      	mov	r3, r2
 8010ce0:	011b      	lsls	r3, r3, #4
 8010ce2:	1a9b      	subs	r3, r3, r2
 8010ce4:	00db      	lsls	r3, r3, #3
 8010ce6:	440b      	add	r3, r1
 8010ce8:	33b5      	adds	r3, #181	; 0xb5
 8010cea:	2200      	movs	r2, #0
 8010cec:	701a      	strb	r2, [r3, #0]
            break;
 8010cee:	e056      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8010cf0:	f004 fb80 	bl	80153f4 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 8010cf4:	79f9      	ldrb	r1, [r7, #7]
 8010cf6:	79fa      	ldrb	r2, [r7, #7]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	011b      	lsls	r3, r3, #4
 8010cfc:	1a5b      	subs	r3, r3, r1
 8010cfe:	00db      	lsls	r3, r3, #3
 8010d00:	3398      	adds	r3, #152	; 0x98
 8010d02:	4910      	ldr	r1, [pc, #64]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010d04:	440b      	add	r3, r1
 8010d06:	1cd9      	adds	r1, r3, #3
 8010d08:	480e      	ldr	r0, [pc, #56]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	011b      	lsls	r3, r3, #4
 8010d0e:	1a9b      	subs	r3, r3, r2
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	4403      	add	r3, r0
 8010d14:	33b0      	adds	r3, #176	; 0xb0
 8010d16:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 8010d18:	79fa      	ldrb	r2, [r7, #7]
 8010d1a:	490a      	ldr	r1, [pc, #40]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010d1c:	4613      	mov	r3, r2
 8010d1e:	011b      	lsls	r3, r3, #4
 8010d20:	1a9b      	subs	r3, r3, r2
 8010d22:	00db      	lsls	r3, r3, #3
 8010d24:	440b      	add	r3, r1
 8010d26:	33b4      	adds	r3, #180	; 0xb4
 8010d28:	2208      	movs	r2, #8
 8010d2a:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 8010d2c:	79fa      	ldrb	r2, [r7, #7]
 8010d2e:	4905      	ldr	r1, [pc, #20]	; (8010d44 <rfalNfcPollActivation+0x5d4>)
 8010d30:	4613      	mov	r3, r2
 8010d32:	011b      	lsls	r3, r3, #4
 8010d34:	1a9b      	subs	r3, r3, r2
 8010d36:	00db      	lsls	r3, r3, #3
 8010d38:	440b      	add	r3, r1
 8010d3a:	33b5      	adds	r3, #181	; 0xb5
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	701a      	strb	r2, [r3, #0]
            break;
 8010d40:	e02d      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
 8010d42:	bf00      	nop
 8010d44:	20002b64 	.word	0x20002b64
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 8010d48:	f008 ff78 	bl	8019c3c <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 8010d4c:	79f9      	ldrb	r1, [r7, #7]
 8010d4e:	79fa      	ldrb	r2, [r7, #7]
 8010d50:	460b      	mov	r3, r1
 8010d52:	011b      	lsls	r3, r3, #4
 8010d54:	1a5b      	subs	r3, r3, r1
 8010d56:	00db      	lsls	r3, r3, #3
 8010d58:	3398      	adds	r3, #152	; 0x98
 8010d5a:	4918      	ldr	r1, [pc, #96]	; (8010dbc <rfalNfcPollActivation+0x64c>)
 8010d5c:	440b      	add	r3, r1
 8010d5e:	1c99      	adds	r1, r3, #2
 8010d60:	4816      	ldr	r0, [pc, #88]	; (8010dbc <rfalNfcPollActivation+0x64c>)
 8010d62:	4613      	mov	r3, r2
 8010d64:	011b      	lsls	r3, r3, #4
 8010d66:	1a9b      	subs	r3, r3, r2
 8010d68:	00db      	lsls	r3, r3, #3
 8010d6a:	4403      	add	r3, r0
 8010d6c:	33b0      	adds	r3, #176	; 0xb0
 8010d6e:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 8010d70:	79fa      	ldrb	r2, [r7, #7]
 8010d72:	4912      	ldr	r1, [pc, #72]	; (8010dbc <rfalNfcPollActivation+0x64c>)
 8010d74:	4613      	mov	r3, r2
 8010d76:	011b      	lsls	r3, r3, #4
 8010d78:	1a9b      	subs	r3, r3, r2
 8010d7a:	00db      	lsls	r3, r3, #3
 8010d7c:	440b      	add	r3, r1
 8010d7e:	33b4      	adds	r3, #180	; 0xb4
 8010d80:	2208      	movs	r2, #8
 8010d82:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 8010d84:	79fa      	ldrb	r2, [r7, #7]
 8010d86:	490d      	ldr	r1, [pc, #52]	; (8010dbc <rfalNfcPollActivation+0x64c>)
 8010d88:	4613      	mov	r3, r2
 8010d8a:	011b      	lsls	r3, r3, #4
 8010d8c:	1a9b      	subs	r3, r3, r2
 8010d8e:	00db      	lsls	r3, r3, #3
 8010d90:	440b      	add	r3, r1
 8010d92:	33b5      	adds	r3, #181	; 0xb5
 8010d94:	2200      	movs	r2, #0
 8010d96:	701a      	strb	r2, [r3, #0]
            break;
 8010d98:	e001      	b.n	8010d9e <rfalNfcPollActivation+0x62e>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8010d9a:	2321      	movs	r3, #33	; 0x21
 8010d9c:	e00a      	b.n	8010db4 <rfalNfcPollActivation+0x644>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 8010d9e:	79fa      	ldrb	r2, [r7, #7]
 8010da0:	4613      	mov	r3, r2
 8010da2:	011b      	lsls	r3, r3, #4
 8010da4:	1a9b      	subs	r3, r3, r2
 8010da6:	00db      	lsls	r3, r3, #3
 8010da8:	3398      	adds	r3, #152	; 0x98
 8010daa:	4a04      	ldr	r2, [pc, #16]	; (8010dbc <rfalNfcPollActivation+0x64c>)
 8010dac:	4413      	add	r3, r2
 8010dae:	4a03      	ldr	r2, [pc, #12]	; (8010dbc <rfalNfcPollActivation+0x64c>)
 8010db0:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3728      	adds	r7, #40	; 0x28
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	20002b64 	.word	0x20002b64

08010dc0 <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 8010dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dc2:	b08f      	sub	sp, #60	; 0x3c
 8010dc4:	af04      	add	r7, sp, #16
    rfalBitRate               bitRate;
#if RFAL_FEATURE_NFC_DEP    
    uint8_t                   hdrLen;
    
    /* Set the header length in NFC-A */
    hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 8010dc6:	2302      	movs	r3, #2
 8010dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif /* RFAL_FEATURE_NFC_DEP */

    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 8010dcc:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8010dd0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8010dd4:	4611      	mov	r1, r2
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f008 f936 	bl	8019048 <rfalListenGetState>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch(lmSt)
 8010de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010de6:	3b01      	subs	r3, #1
 8010de8:	2b0f      	cmp	r3, #15
 8010dea:	f200 81b3 	bhi.w	8011154 <rfalNfcListenActivation+0x394>
 8010dee:	a201      	add	r2, pc, #4	; (adr r2, 8010df4 <rfalNfcListenActivation+0x34>)
 8010df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df4:	08011139 	.word	0x08011139
 8010df8:	0801107f 	.word	0x0801107f
 8010dfc:	08011135 	.word	0x08011135
 8010e00:	08011155 	.word	0x08011155
 8010e04:	08010fa7 	.word	0x08010fa7
 8010e08:	08010e35 	.word	0x08010e35
 8010e0c:	08010f75 	.word	0x08010f75
 8010e10:	08011155 	.word	0x08011155
 8010e14:	08011039 	.word	0x08011039
 8010e18:	0801105d 	.word	0x0801105d
 8010e1c:	0801105d 	.word	0x0801105d
 8010e20:	08011135 	.word	0x08011135
 8010e24:	08011155 	.word	0x08011155
 8010e28:	08011135 	.word	0x08011135
 8010e2c:	08010e35 	.word	0x08010e35
 8010e30:	08011135 	.word	0x08011135
    #if RFAL_FEATURE_NFCA
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 8010e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f000 8099 	beq.w	8010f70 <rfalNfcListenActivation+0x1b0>
            {
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 8010e3e:	4bbf      	ldr	r3, [pc, #764]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010e40:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8010e44:	3307      	adds	r3, #7
 8010e46:	08db      	lsrs	r3, r3, #3
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	48bc      	ldr	r0, [pc, #752]	; (8011140 <rfalNfcListenActivation+0x380>)
 8010e4e:	f003 fb40 	bl	80144d2 <rfalNfcaListenerIsSleepReq>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00d      	beq.n	8010e74 <rfalNfcListenActivation+0xb4>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 8010e58:	4bba      	ldr	r3, [pc, #744]	; (8011144 <rfalNfcListenActivation+0x384>)
 8010e5a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010e5e:	49b8      	ldr	r1, [pc, #736]	; (8011140 <rfalNfcListenActivation+0x380>)
 8010e60:	200c      	movs	r0, #12
 8010e62:	f008 f87d 	bl	8018f60 <rfalListenSleepStart>
 8010e66:	4603      	mov	r3, r0
 8010e68:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d07f      	beq.n	8010f70 <rfalNfcListenActivation+0x1b0>
 8010e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e72:	e171      	b.n	8011158 <rfalNfcListenActivation+0x398>
                }
                
            #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_LISTEN
                /* Check if received data is a valid RATS */
                else if( rfalIsoDepIsRats( gNfcDev.rxBuf.rfBuf, (uint8_t)rfalConvBitsToBytes(gNfcDev.rxLen) ) )
 8010e74:	4bb1      	ldr	r3, [pc, #708]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010e76:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8010e7a:	3307      	adds	r3, #7
 8010e7c:	08db      	lsrs	r3, r3, #3
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	4619      	mov	r1, r3
 8010e82:	48af      	ldr	r0, [pc, #700]	; (8011140 <rfalNfcListenActivation+0x380>)
 8010e84:	f7fc fb52 	bl	800d52c <rfalIsoDepIsRats>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d031      	beq.n	8010ef2 <rfalNfcListenActivation+0x132>
                {
                    rfalIsoDepAtsParam        atsParam;
                    rfalIsoDepListenActvParam rxParam;
                    
                    /* Set ATS parameters */
                    atsParam.fsci       = (uint8_t)RFAL_ISODEP_DEFAULT_FSCI;
 8010e8e:	2308      	movs	r3, #8
 8010e90:	743b      	strb	r3, [r7, #16]
                    atsParam.fwi        = RFAL_ISODEP_DEFAULT_FWI;
 8010e92:	2308      	movs	r3, #8
 8010e94:	747b      	strb	r3, [r7, #17]
                    atsParam.sfgi       = RFAL_ISODEP_DEFAULT_SFGI;
 8010e96:	2300      	movs	r3, #0
 8010e98:	74bb      	strb	r3, [r7, #18]
                    atsParam.didSupport = false;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	74fb      	strb	r3, [r7, #19]
                    atsParam.ta         = RFAL_ISODEP_ATS_TA_SAME_D;
 8010e9e:	2380      	movs	r3, #128	; 0x80
 8010ea0:	753b      	strb	r3, [r7, #20]
                    atsParam.hb         = NULL;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	61bb      	str	r3, [r7, #24]
                    atsParam.hbLen      = 0;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	773b      	strb	r3, [r7, #28]

                    /* Set Rx parameters */
                    rxParam.rxBuf        = (rfalIsoDepBufFormat*) &gNfcDev.rxBuf.isoDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8010eaa:	4ba5      	ldr	r3, [pc, #660]	; (8011140 <rfalNfcListenActivation+0x380>)
 8010eac:	603b      	str	r3, [r7, #0]
                    rxParam.rxLen        = &gNfcDev.rxLen;
 8010eae:	4ba5      	ldr	r3, [pc, #660]	; (8011144 <rfalNfcListenActivation+0x384>)
 8010eb0:	607b      	str	r3, [r7, #4]
                    rxParam.isoDepDev    = &gNfcDev.devList->proto.isoDep;
 8010eb2:	4ba5      	ldr	r3, [pc, #660]	; (8011148 <rfalNfcListenActivation+0x388>)
 8010eb4:	60fb      	str	r3, [r7, #12]
                    rxParam.isRxChaining = &gNfcDev.isRxChaining;
 8010eb6:	4ba5      	ldr	r3, [pc, #660]	; (801114c <rfalNfcListenActivation+0x38c>)
 8010eb8:	60bb      	str	r3, [r7, #8]

                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_4A );                   /* Set next state CE T4T */
 8010eba:	2007      	movs	r0, #7
 8010ebc:	f008 f8e4 	bl	8019088 <rfalListenSetState>
                    rfalIsoDepInitialize();                                           /* Initialize ISO-DEP layer to handle ISO14443-a activation / RATS */
 8010ec0:	f7fb ff3c 	bl	800cd3c <rfalIsoDepInitialize>
                    
                    /* Set ISO-DEP layer to digest RATS and handle activation */
                    EXIT_ON_ERR( ret, rfalIsoDepListenStartActivation( &atsParam, NULL, gNfcDev.rxBuf.rfBuf, gNfcDev.rxLen, rxParam ) );
 8010ec4:	4b9d      	ldr	r3, [pc, #628]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010ec6:	f8b3 670c 	ldrh.w	r6, [r3, #1804]	; 0x70c
 8010eca:	f107 0510 	add.w	r5, r7, #16
 8010ece:	466c      	mov	r4, sp
 8010ed0:	463b      	mov	r3, r7
 8010ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010ed8:	4633      	mov	r3, r6
 8010eda:	4a99      	ldr	r2, [pc, #612]	; (8011140 <rfalNfcListenActivation+0x380>)
 8010edc:	2100      	movs	r1, #0
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f7fc fb3c 	bl	800d55c <rfalIsoDepListenStartActivation>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d040      	beq.n	8010f70 <rfalNfcListenActivation+0x1b0>
 8010eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ef0:	e132      	b.n	8011158 <rfalNfcListenActivation+0x398>
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP

                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8010ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010efa:	4a90      	ldr	r2, [pc, #576]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010efc:	4413      	add	r3, r2
 8010efe:	1dd8      	adds	r0, r3, #7
 8010f00:	4b8e      	ldr	r3, [pc, #568]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f02:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8010f06:	3307      	adds	r3, #7
 8010f08:	08db      	lsrs	r3, r3, #3
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	4a89      	ldr	r2, [pc, #548]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f18:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	f001 fdd9 	bl	8012ad4 <rfalNfcDepIsAtrReq>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d021      	beq.n	8010f6c <rfalNfcListenActivation+0x1ac>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 8010f28:	4b84      	ldr	r3, [pc, #528]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f2a:	220a      	movs	r2, #10
 8010f2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8010f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f38:	4a80      	ldr	r2, [pc, #512]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f3a:	4413      	add	r3, r2
 8010f3c:	1dd9      	adds	r1, r3, #7
 8010f3e:	4b7f      	ldr	r3, [pc, #508]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f40:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8010f44:	3307      	adds	r3, #7
 8010f46:	08db      	lsrs	r3, r3, #3
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	1ad3      	subs	r3, r2, r3
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	460a      	mov	r2, r1
 8010f56:	2100      	movs	r1, #0
 8010f58:	487d      	ldr	r0, [pc, #500]	; (8011150 <rfalNfcListenActivation+0x390>)
 8010f5a:	f000 f901 	bl	8011160 <rfalNfcNfcDepActivate>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d003      	beq.n	8010f70 <rfalNfcListenActivation+0x1b0>
 8010f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f6a:	e0f5      	b.n	8011158 <rfalNfcListenActivation+0x398>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 8010f6c:	230b      	movs	r3, #11
 8010f6e:	e0f3      	b.n	8011158 <rfalNfcListenActivation+0x398>
                }
            }
            return ERR_BUSY;
 8010f70:	2302      	movs	r3, #2
 8010f72:	e0f1      	b.n	8011158 <rfalNfcListenActivation+0x398>
            
    #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_LISTEN
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_4A:                                                /* T4T ISO-DEP activation */
            
            ret = rfalIsoDepListenGetActivationStatus();
 8010f74:	f7fc fc44 	bl	800d800 <rfalIsoDepListenGetActivationStatus>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret == ERR_NONE )
 8010f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d10f      	bne.n	8010fa2 <rfalNfcListenActivation+0x1e2>
            {
                gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCA;
 8010f82:	4b6e      	ldr	r3, [pc, #440]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f84:	220a      	movs	r2, #10
 8010f86:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_ISODEP;
 8010f8a:	4b6c      	ldr	r3, [pc, #432]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
                gNfcDev.devList->nfcid       = NULL;
 8010f92:	4b6a      	ldr	r3, [pc, #424]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                gNfcDev.devList->nfcidLen    = 0;
 8010f9a:	4b68      	ldr	r3, [pc, #416]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
            }
            return ret;
 8010fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fa4:	e0d8      	b.n	8011158 <rfalNfcListenActivation+0x398>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 8010fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d042      	beq.n	8011034 <rfalNfcListenActivation+0x274>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 8010fae:	2301      	movs	r3, #1
 8010fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8010fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010fbc:	4a5f      	ldr	r2, [pc, #380]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010fbe:	4413      	add	r3, r2
 8010fc0:	1dd8      	adds	r0, r3, #7
 8010fc2:	4b5e      	ldr	r3, [pc, #376]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010fc4:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8010fc8:	3307      	adds	r3, #7
 8010fca:	08db      	lsrs	r3, r3, #3
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	4a58      	ldr	r2, [pc, #352]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010fda:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8010fde:	4619      	mov	r1, r3
 8010fe0:	f001 fd78 	bl	8012ad4 <rfalNfcDepIsAtrReq>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d021      	beq.n	801102e <rfalNfcListenActivation+0x26e>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 8010fea:	4b54      	ldr	r3, [pc, #336]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010fec:	220c      	movs	r2, #12
 8010fee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 8010ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ffa:	4a50      	ldr	r2, [pc, #320]	; (801113c <rfalNfcListenActivation+0x37c>)
 8010ffc:	4413      	add	r3, r2
 8010ffe:	1dd9      	adds	r1, r3, #7
 8011000:	4b4e      	ldr	r3, [pc, #312]	; (801113c <rfalNfcListenActivation+0x37c>)
 8011002:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8011006:	3307      	adds	r3, #7
 8011008:	08db      	lsrs	r3, r3, #3
 801100a:	b29a      	uxth	r2, r3
 801100c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011010:	b29b      	uxth	r3, r3
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	b29b      	uxth	r3, r3
 8011016:	460a      	mov	r2, r1
 8011018:	2100      	movs	r1, #0
 801101a:	484d      	ldr	r0, [pc, #308]	; (8011150 <rfalNfcListenActivation+0x390>)
 801101c:	f000 f8a0 	bl	8011160 <rfalNfcNfcDepActivate>
 8011020:	4603      	mov	r3, r0
 8011022:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011026:	2b00      	cmp	r3, #0
 8011028:	d004      	beq.n	8011034 <rfalNfcListenActivation+0x274>
 801102a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801102c:	e094      	b.n	8011158 <rfalNfcListenActivation+0x398>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 801102e:	2009      	movs	r0, #9
 8011030:	f008 f82a 	bl	8019088 <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 8011034:	2302      	movs	r3, #2
 8011036:	e08f      	b.n	8011158 <rfalNfcListenActivation+0x398>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 8011038:	4b40      	ldr	r3, [pc, #256]	; (801113c <rfalNfcListenActivation+0x37c>)
 801103a:	220c      	movs	r2, #12
 801103c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 8011040:	4b3e      	ldr	r3, [pc, #248]	; (801113c <rfalNfcListenActivation+0x37c>)
 8011042:	2200      	movs	r2, #0
 8011044:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
            gNfcDev.devList->nfcid       = NULL;
 8011048:	4b3c      	ldr	r3, [pc, #240]	; (801113c <rfalNfcListenActivation+0x37c>)
 801104a:	2200      	movs	r2, #0
 801104c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            gNfcDev.devList->nfcidLen    = 0;
 8011050:	4b3a      	ldr	r3, [pc, #232]	; (801113c <rfalNfcListenActivation+0x37c>)
 8011052:	2200      	movs	r2, #0
 8011054:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
            
            return ERR_NONE;
 8011058:	2300      	movs	r3, #0
 801105a:	e07d      	b.n	8011158 <rfalNfcListenActivation+0x398>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 801105c:	f002 fb26 	bl	80136ac <rfalNfcDepListenGetActivationStatus>
 8011060:	4603      	mov	r3, r0
 8011062:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret == ERR_NONE )
 8011064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011066:	2b00      	cmp	r3, #0
 8011068:	d107      	bne.n	801107a <rfalNfcListenActivation+0x2ba>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 801106a:	4b34      	ldr	r3, [pc, #208]	; (801113c <rfalNfcListenActivation+0x37c>)
 801106c:	2202      	movs	r2, #2
 801106e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 8011072:	4b32      	ldr	r3, [pc, #200]	; (801113c <rfalNfcListenActivation+0x37c>)
 8011074:	220a      	movs	r2, #10
 8011076:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
            }
            return ret;
 801107a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801107c:	e06c      	b.n	8011158 <rfalNfcListenActivation+0x398>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 801107e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011082:	2b00      	cmp	r3, #0
 8011084:	d054      	beq.n	8011130 <rfalNfcListenActivation+0x370>
            {
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 8011086:	4b2d      	ldr	r3, [pc, #180]	; (801113c <rfalNfcListenActivation+0x37c>)
 8011088:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 801108c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011090:	2b00      	cmp	r3, #0
 8011092:	d04d      	beq.n	8011130 <rfalNfcListenActivation+0x370>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 8011094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011098:	2b00      	cmp	r3, #0
 801109a:	d101      	bne.n	80110a0 <rfalNfcListenActivation+0x2e0>
 801109c:	2302      	movs	r3, #2
 801109e:	e000      	b.n	80110a2 <rfalNfcListenActivation+0x2e2>
 80110a0:	2301      	movs	r3, #1
 80110a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 80110a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110ae:	4a23      	ldr	r2, [pc, #140]	; (801113c <rfalNfcListenActivation+0x37c>)
 80110b0:	4413      	add	r3, r2
 80110b2:	1dd8      	adds	r0, r3, #7
 80110b4:	4b21      	ldr	r3, [pc, #132]	; (801113c <rfalNfcListenActivation+0x37c>)
 80110b6:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80110ba:	3307      	adds	r3, #7
 80110bc:	08db      	lsrs	r3, r3, #3
 80110be:	b29a      	uxth	r2, r3
 80110c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	2200      	movs	r2, #0
 80110cc:	4619      	mov	r1, r3
 80110ce:	f001 fd01 	bl	8012ad4 <rfalNfcDepIsAtrReq>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d029      	beq.n	801112c <rfalNfcListenActivation+0x36c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 80110d8:	4b18      	ldr	r3, [pc, #96]	; (801113c <rfalNfcListenActivation+0x37c>)
 80110da:	220f      	movs	r2, #15
 80110dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        rfalSetMode( (RFAL_MODE_LISTEN_ACTIVE_P2P), bitRate, bitRate );
 80110e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80110e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80110e8:	4619      	mov	r1, r3
 80110ea:	200d      	movs	r0, #13
 80110ec:	f004 ff54 	bl	8015f98 <rfalSetMode>
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 80110f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110f8:	4a10      	ldr	r2, [pc, #64]	; (801113c <rfalNfcListenActivation+0x37c>)
 80110fa:	4413      	add	r3, r2
 80110fc:	1dd9      	adds	r1, r3, #7
 80110fe:	4b0f      	ldr	r3, [pc, #60]	; (801113c <rfalNfcListenActivation+0x37c>)
 8011100:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8011104:	3307      	adds	r3, #7
 8011106:	08db      	lsrs	r3, r3, #3
 8011108:	b29a      	uxth	r2, r3
 801110a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801110e:	b29b      	uxth	r3, r3
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	b29b      	uxth	r3, r3
 8011114:	460a      	mov	r2, r1
 8011116:	2101      	movs	r1, #1
 8011118:	480d      	ldr	r0, [pc, #52]	; (8011150 <rfalNfcListenActivation+0x390>)
 801111a:	f000 f821 	bl	8011160 <rfalNfcNfcDepActivate>
 801111e:	4603      	mov	r3, r0
 8011120:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011124:	2b00      	cmp	r3, #0
 8011126:	d003      	beq.n	8011130 <rfalNfcListenActivation+0x370>
 8011128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801112a:	e015      	b.n	8011158 <rfalNfcListenActivation+0x398>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 801112c:	230b      	movs	r3, #11
 801112e:	e013      	b.n	8011158 <rfalNfcListenActivation+0x398>
                    }
                }
            }
            return ERR_BUSY;
 8011130:	2302      	movs	r3, #2
 8011132:	e011      	b.n	8011158 <rfalNfcListenActivation+0x398>
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 8011134:	2302      	movs	r3, #2
 8011136:	e00f      	b.n	8011158 <rfalNfcListenActivation+0x398>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 8011138:	2325      	movs	r3, #37	; 0x25
 801113a:	e00d      	b.n	8011158 <rfalNfcListenActivation+0x398>
 801113c:	20002b64 	.word	0x20002b64
 8011140:	2000306b 	.word	0x2000306b
 8011144:	20003270 	.word	0x20003270
 8011148:	20002c1c 	.word	0x20002c1c
 801114c:	20002e5f 	.word	0x20002e5f
 8011150:	20002bfc 	.word	0x20002bfc
        
        default:                                                                      /* Wait for activation */
            break;
 8011154:	bf00      	nop
    }

    return ERR_INTERNAL;
 8011156:	230c      	movs	r3, #12
}
 8011158:	4618      	mov	r0, r3
 801115a:	372c      	adds	r7, #44	; 0x2c
 801115c:	46bd      	mov	sp, r7
 801115e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011160 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 8011160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011162:	b0a5      	sub	sp, #148	; 0x94
 8011164:	af04      	add	r7, sp, #16
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	607a      	str	r2, [r7, #4]
 801116a:	461a      	mov	r2, r3
 801116c:	460b      	mov	r3, r1
 801116e:	72fb      	strb	r3, [r7, #11]
 8011170:	4613      	mov	r3, r2
 8011172:	813b      	strh	r3, [r7, #8]
    /* Supress warnings if Listen mode is disabled */
    NO_WARNING(atrReq);
    NO_WARNING(atrReqLen);
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	2b05      	cmp	r3, #5
 801117a:	d839      	bhi.n	80111f0 <rfalNfcNfcDepActivate+0x90>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	2b02      	cmp	r3, #2
 8011182:	d106      	bne.n	8011192 <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	3303      	adds	r3, #3
 8011188:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 801118a:	2308      	movs	r3, #8
 801118c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8011190:	e004      	b.n	801119c <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 8011192:	4b4c      	ldr	r3, [pc, #304]	; (80112c4 <rfalNfcNfcDepActivate+0x164>)
 8011194:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8011196:	230a      	movs	r3, #10
 8011198:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801119c:	2300      	movs	r3, #0
 801119e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 80111a2:	2300      	movs	r3, #0
 80111a4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 80111a8:	2300      	movs	r3, #0
 80111aa:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 80111ae:	2300      	movs	r3, #0
 80111b0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 80111b4:	2303      	movs	r3, #3
 80111b6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        initParam.GB        = gNfcDev.disc.GB;
 80111ba:	4b43      	ldr	r3, [pc, #268]	; (80112c8 <rfalNfcNfcDepActivate+0x168>)
 80111bc:	67bb      	str	r3, [r7, #120]	; 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 80111be:	4b43      	ldr	r3, [pc, #268]	; (80112cc <rfalNfcNfcDepActivate+0x16c>)
 80111c0:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80111c4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        initParam.commMode  = commMode;
 80111c8:	7afb      	ldrb	r3, [r7, #11]
 80111ca:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 80111ce:	230e      	movs	r3, #14
 80111d0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        
        rfalNfcDepInitialize();
 80111d4:	f001 fbac 	bl	8012930 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, gNfcDev.disc.maxBR, &device->proto.nfcDep );
 80111d8:	4b3c      	ldr	r3, [pc, #240]	; (80112cc <rfalNfcNfcDepActivate+0x16c>)
 80111da:	7cd9      	ldrb	r1, [r3, #19]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f103 0220 	add.w	r2, r3, #32
 80111e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111e6:	4618      	mov	r0, r3
 80111e8:	f001 ffe0 	bl	80131ac <rfalNfcDepInitiatorHandleActivation>
 80111ec:	4603      	mov	r3, r0
 80111ee:	e064      	b.n	80112ba <rfalNfcNfcDepActivate+0x15a>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b09      	cmp	r3, #9
 80111f6:	d95f      	bls.n	80112b8 <rfalNfcNfcDepActivate+0x158>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	2b0f      	cmp	r3, #15
 80111fe:	d85b      	bhi.n	80112b8 <rfalNfcNfcDepActivate+0x158>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8011200:	4a32      	ldr	r2, [pc, #200]	; (80112cc <rfalNfcNfcDepActivate+0x16c>)
 8011202:	f107 0315 	add.w	r3, r7, #21
 8011206:	3215      	adds	r2, #21
 8011208:	6810      	ldr	r0, [r2, #0]
 801120a:	6851      	ldr	r1, [r2, #4]
 801120c:	6018      	str	r0, [r3, #0]
 801120e:	6059      	str	r1, [r3, #4]
 8011210:	8912      	ldrh	r2, [r2, #8]
 8011212:	811a      	strh	r2, [r3, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8011214:	2300      	movs	r3, #0
 8011216:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8011218:	2300      	movs	r3, #0
 801121a:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX_L13; /* [LLCP] 1.3 6.2.1 */ 
 801121e:	230a      	movs	r3, #10
 8011220:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 8011224:	2330      	movs	r3, #48	; 0x30
 8011226:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 801122a:	4b28      	ldr	r3, [pc, #160]	; (80112cc <rfalNfcNfcDepActivate+0x16c>)
 801122c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8011230:	2b2f      	cmp	r3, #47	; 0x2f
 8011232:	d901      	bls.n	8011238 <rfalNfcNfcDepActivate+0xd8>
        {
            return ERR_PARAM;
 8011234:	2307      	movs	r3, #7
 8011236:	e040      	b.n	80112ba <rfalNfcNfcDepActivate+0x15a>
        }
        targetParam.GBtLen    = gNfcDev.disc.GBLen;
 8011238:	4b24      	ldr	r3, [pc, #144]	; (80112cc <rfalNfcNfcDepActivate+0x16c>)
 801123a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 801123e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if( gNfcDev.disc.GBLen > 0U )
 8011242:	4b22      	ldr	r3, [pc, #136]	; (80112cc <rfalNfcNfcDepActivate+0x16c>)
 8011244:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00a      	beq.n	8011262 <rfalNfcNfcDepActivate+0x102>
        {
            ST_MEMCPY(targetParam.GBt, gNfcDev.disc.GB, gNfcDev.disc.GBLen);
 801124c:	4b1f      	ldr	r3, [pc, #124]	; (80112cc <rfalNfcNfcDepActivate+0x16c>)
 801124e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8011252:	461a      	mov	r2, r3
 8011254:	f107 0314 	add.w	r3, r7, #20
 8011258:	330f      	adds	r3, #15
 801125a:	491b      	ldr	r1, [pc, #108]	; (80112c8 <rfalNfcNfcDepActivate+0x168>)
 801125c:	4618      	mov	r0, r3
 801125e:	f00a fd27 	bl	801bcb0 <memcpy>
        }
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8011262:	230e      	movs	r3, #14
 8011264:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        targetParam.commMode  = commMode;
 8011268:	7afb      	ldrb	r3, [r7, #11]
 801126a:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = (rfalNfcDepBufFormat*) &gNfcDev.rxBuf.nfcDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 801126c:	4b18      	ldr	r3, [pc, #96]	; (80112d0 <rfalNfcNfcDepActivate+0x170>)
 801126e:	65bb      	str	r3, [r7, #88]	; 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 8011270:	4b18      	ldr	r3, [pc, #96]	; (80112d4 <rfalNfcNfcDepActivate+0x174>)
 8011272:	65fb      	str	r3, [r7, #92]	; 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 8011274:	4b18      	ldr	r3, [pc, #96]	; (80112d8 <rfalNfcNfcDepActivate+0x178>)
 8011276:	663b      	str	r3, [r7, #96]	; 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 8011278:	4b18      	ldr	r3, [pc, #96]	; (80112dc <rfalNfcNfcDepActivate+0x17c>)
 801127a:	667b      	str	r3, [r7, #100]	; 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	2b0a      	cmp	r3, #10
 8011282:	d101      	bne.n	8011288 <rfalNfcNfcDepActivate+0x128>
 8011284:	230a      	movs	r3, #10
 8011286:	e000      	b.n	801128a <rfalNfcNfcDepActivate+0x12a>
 8011288:	230b      	movs	r3, #11
 801128a:	4618      	mov	r0, r3
 801128c:	f007 fefc 	bl	8019088 <rfalListenSetState>
        
        rfalNfcDepInitialize();
 8011290:	f001 fb4e 	bl	8012930 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 8011294:	893e      	ldrh	r6, [r7, #8]
 8011296:	f107 0514 	add.w	r5, r7, #20
 801129a:	466c      	mov	r4, sp
 801129c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80112a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80112a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80112a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112aa:	4632      	mov	r2, r6
 80112ac:	6879      	ldr	r1, [r7, #4]
 80112ae:	4628      	mov	r0, r5
 80112b0:	f002 f8ea 	bl	8013488 <rfalNfcDepListenStartActivation>
 80112b4:	4603      	mov	r3, r0
 80112b6:	e000      	b.n	80112ba <rfalNfcNfcDepActivate+0x15a>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 80112b8:	230c      	movs	r3, #12
    }
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3784      	adds	r7, #132	; 0x84
 80112be:	46bd      	mov	sp, r7
 80112c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20002b79 	.word	0x20002b79
 80112c8:	20002b83 	.word	0x20002b83
 80112cc:	20002b64 	.word	0x20002b64
 80112d0:	2000306b 	.word	0x2000306b
 80112d4:	20003270 	.word	0x20003270
 80112d8:	20002e5f 	.word	0x20002e5f
 80112dc:	20002c1c 	.word	0x20002c1c

080112e0 <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 80112e4:	4b18      	ldr	r3, [pc, #96]	; (8011348 <rfalNfcDeactivation+0x68>)
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d020      	beq.n	801132e <rfalNfcDeactivation+0x4e>
    {
        if( rfalNfcIsRemDevListener( gNfcDev.activeDev->type ) )                          /* Listen mode no additional deactivation to be performed*/
 80112ec:	4b16      	ldr	r3, [pc, #88]	; (8011348 <rfalNfcDeactivation+0x68>)
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	2b05      	cmp	r3, #5
 80112f4:	d81b      	bhi.n	801132e <rfalNfcDeactivation+0x4e>
        {
        #ifndef RFAL_NFC_SKIP_DEACT
            switch( gNfcDev.activeDev->rfInterface )
 80112f6:	4b14      	ldr	r3, [pc, #80]	; (8011348 <rfalNfcDeactivation+0x68>)
 80112f8:	689b      	ldr	r3, [r3, #8]
 80112fa:	7f5b      	ldrb	r3, [r3, #29]
 80112fc:	2b02      	cmp	r3, #2
 80112fe:	d008      	beq.n	8011312 <rfalNfcDeactivation+0x32>
 8011300:	2b02      	cmp	r3, #2
 8011302:	dc12      	bgt.n	801132a <rfalNfcDeactivation+0x4a>
 8011304:	2b00      	cmp	r3, #0
 8011306:	d014      	beq.n	8011332 <rfalNfcDeactivation+0x52>
 8011308:	2b01      	cmp	r3, #1
 801130a:	d10e      	bne.n	801132a <rfalNfcDeactivation+0x4a>
                    break;                                                                /* No specific deactivation to be performed */
                
                /*******************************************************************************/
            #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_POLL
                case RFAL_NFC_INTERFACE_ISODEP:
                    rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 801130c:	f7fc f838 	bl	800d380 <rfalIsoDepDeselect>
                    break;
 8011310:	e010      	b.n	8011334 <rfalNfcDeactivation+0x54>
            #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    
                /*******************************************************************************/
            #if RFAL_FEATURE_NFC_DEP
                case RFAL_NFC_INTERFACE_NFCDEP:
                    switch ( gNfcDev.activeDev->type )
 8011312:	4b0d      	ldr	r3, [pc, #52]	; (8011348 <rfalNfcDeactivation+0x68>)
 8011314:	689b      	ldr	r3, [r3, #8]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	2b05      	cmp	r3, #5
 801131a:	d102      	bne.n	8011322 <rfalNfcDeactivation+0x42>
                    {
                        case RFAL_NFC_LISTEN_TYPE_AP2P:
                            rfalNfcDepRLS();                                              /* Send a Release to device */
 801131c:	f001 feda 	bl	80130d4 <rfalNfcDepRLS>
                            break;
 8011320:	e002      	b.n	8011328 <rfalNfcDeactivation+0x48>
                        default:
                            rfalNfcDepDSL();                                              /* Send a Deselect to device */
 8011322:	f001 fe6b 	bl	8012ffc <rfalNfcDepDSL>
                            break;
 8011326:	bf00      	nop
                    }
                    break;
 8011328:	e004      	b.n	8011334 <rfalNfcDeactivation+0x54>
            #endif /* RFAL_FEATURE_NFC_DEP */
                    
                default:
                    return ERR_REQUEST;
 801132a:	2305      	movs	r3, #5
 801132c:	e00a      	b.n	8011344 <rfalNfcDeactivation+0x64>
            }
        #endif /* RFAL_NFC_SKIP_DEACT */
        }
 801132e:	bf00      	nop
 8011330:	e000      	b.n	8011334 <rfalNfcDeactivation+0x54>
                    break;                                                                /* No specific deactivation to be performed */
 8011332:	bf00      	nop
    }
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 8011334:	f008 fb9e 	bl	8019a74 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 8011338:	f007 fde0 	bl	8018efc <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 801133c:	4b02      	ldr	r3, [pc, #8]	; (8011348 <rfalNfcDeactivation+0x68>)
 801133e:	2200      	movs	r2, #0
 8011340:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	bd80      	pop	{r7, pc}
 8011348:	20002b64 	.word	0x20002b64

0801134c <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 801134c:	b480      	push	{r7}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
 8011352:	4603      	mov	r3, r0
 8011354:	71fb      	strb	r3, [r7, #7]
 8011356:	460b      	mov	r3, r1
 8011358:	71bb      	strb	r3, [r7, #6]
 801135a:	4613      	mov	r3, r2
 801135c:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 801135e:	797a      	ldrb	r2, [r7, #5]
 8011360:	79bb      	ldrb	r3, [r7, #6]
 8011362:	4293      	cmp	r3, r2
 8011364:	bf28      	it	cs
 8011366:	4613      	movcs	r3, r2
 8011368:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 801136a:	79fb      	ldrb	r3, [r7, #7]
 801136c:	2b02      	cmp	r3, #2
 801136e:	d801      	bhi.n	8011374 <nfcipDxIsSupported+0x28>
	{
		return true;
 8011370:	2301      	movs	r3, #1
 8011372:	e008      	b.n	8011386 <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8011374:	79fb      	ldrb	r3, [r7, #7]
 8011376:	2b03      	cmp	r3, #3
 8011378:	d104      	bne.n	8011384 <nfcipDxIsSupported+0x38>
 801137a:	7bfb      	ldrb	r3, [r7, #15]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d001      	beq.n	8011384 <nfcipDxIsSupported+0x38>
	{
		return true;
 8011380:	2301      	movs	r3, #1
 8011382:	e000      	b.n	8011386 <nfcipDxIsSupported+0x3a>
	}

	return false;
 8011384:	2300      	movs	r3, #0
}
 8011386:	4618      	mov	r0, r3
 8011388:	3714      	adds	r7, #20
 801138a:	46bd      	mov	sp, r7
 801138c:	bc80      	pop	{r7}
 801138e:	4770      	bx	lr

08011390 <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b088      	sub	sp, #32
 8011394:	af02      	add	r7, sp, #8
 8011396:	60b9      	str	r1, [r7, #8]
 8011398:	607a      	str	r2, [r7, #4]
 801139a:	603b      	str	r3, [r7, #0]
 801139c:	4603      	mov	r3, r0
 801139e:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 80113a0:	7bfb      	ldrb	r3, [r7, #15]
 80113a2:	2b06      	cmp	r3, #6
 80113a4:	d002      	beq.n	80113ac <nfcipTxRx+0x1c>
 80113a6:	7bfb      	ldrb	r3, [r7, #15]
 80113a8:	2b07      	cmp	r3, #7
 80113aa:	d101      	bne.n	80113b0 <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 80113ac:	2307      	movs	r3, #7
 80113ae:	e030      	b.n	8011412 <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 80113b0:	4a1a      	ldr	r2, [pc, #104]	; (801141c <nfcipTxRx+0x8c>)
 80113b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b4:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 80113b6:	4a19      	ldr	r2, [pc, #100]	; (801141c <nfcipTxRx+0x8c>)
 80113b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80113ba:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 80113be:	4a17      	ldr	r2, [pc, #92]	; (801141c <nfcipTxRx+0x8c>)
 80113c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c2:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d013      	beq.n	80113f2 <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 80113ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	7bf8      	ldrb	r0, [r7, #15]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	9301      	str	r3, [sp, #4]
 80113d6:	2300      	movs	r3, #0
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	4613      	mov	r3, r2
 80113dc:	683a      	ldr	r2, [r7, #0]
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	f000 ffa8 	bl	8012334 <nfcipTx>
 80113e4:	4603      	mov	r3, r0
 80113e6:	82fb      	strh	r3, [r7, #22]
 80113e8:	8afb      	ldrh	r3, [r7, #22]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <nfcipTxRx+0x62>
 80113ee:	8afb      	ldrh	r3, [r7, #22]
 80113f0:	e00f      	b.n	8011412 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 80113f2:	2001      	movs	r0, #1
 80113f4:	f002 f804 	bl	8013400 <nfcipDataRx>
 80113f8:	4603      	mov	r3, r0
 80113fa:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 80113fc:	8afb      	ldrh	r3, [r7, #22]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <nfcipTxRx+0x76>
    {
        return ret;
 8011402:	8afb      	ldrh	r3, [r7, #22]
 8011404:	e005      	b.n	8011412 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	b29a      	uxth	r2, r3
 801140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140e:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3718      	adds	r7, #24
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	200033e8 	.word	0x200033e8

08011420 <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b08c      	sub	sp, #48	; 0x30
 8011424:	af02      	add	r7, sp, #8
 8011426:	4603      	mov	r3, r0
 8011428:	460a      	mov	r2, r1
 801142a:	71fb      	strb	r3, [r7, #7]
 801142c:	4613      	mov	r3, r2
 801142e:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8011430:	4b2a      	ldr	r3, [pc, #168]	; (80114dc <nfcipDEPControlMsg+0xbc>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	2b01      	cmp	r3, #1
 8011436:	d101      	bne.n	801143c <nfcipDEPControlMsg+0x1c>
 8011438:	2307      	movs	r3, #7
 801143a:	e000      	b.n	801143e <nfcipDEPControlMsg+0x1e>
 801143c:	2306      	movs	r3, #6
 801143e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8011442:	4b26      	ldr	r3, [pc, #152]	; (80114dc <nfcipDEPControlMsg+0xbc>)
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d018      	beq.n	801147c <nfcipDEPControlMsg+0x5c>
 801144a:	79fb      	ldrb	r3, [r7, #7]
 801144c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011450:	2b80      	cmp	r3, #128	; 0x80
 8011452:	d10d      	bne.n	8011470 <nfcipDEPControlMsg+0x50>
 8011454:	79fb      	ldrb	r3, [r7, #7]
 8011456:	f003 0310 	and.w	r3, r3, #16
 801145a:	2b00      	cmp	r3, #0
 801145c:	d008      	beq.n	8011470 <nfcipDEPControlMsg+0x50>
 801145e:	79bb      	ldrb	r3, [r7, #6]
 8011460:	4a1e      	ldr	r2, [pc, #120]	; (80114dc <nfcipDEPControlMsg+0xbc>)
 8011462:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011464:	fb02 f203 	mul.w	r2, r2, r3
 8011468:	4b1c      	ldr	r3, [pc, #112]	; (80114dc <nfcipDEPControlMsg+0xbc>)
 801146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801146c:	4413      	add	r3, r2
 801146e:	e007      	b.n	8011480 <nfcipDEPControlMsg+0x60>
 8011470:	4b1a      	ldr	r3, [pc, #104]	; (80114dc <nfcipDEPControlMsg+0xbc>)
 8011472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011474:	4b19      	ldr	r3, [pc, #100]	; (80114dc <nfcipDEPControlMsg+0xbc>)
 8011476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011478:	4413      	add	r3, r2
 801147a:	e001      	b.n	8011480 <nfcipDEPControlMsg+0x60>
 801147c:	f04f 33ff 	mov.w	r3, #4294967295
 8011480:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 8011482:	79fb      	ldrb	r3, [r7, #7]
 8011484:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011488:	2b80      	cmp	r3, #128	; 0x80
 801148a:	d116      	bne.n	80114ba <nfcipDEPControlMsg+0x9a>
 801148c:	79fb      	ldrb	r3, [r7, #7]
 801148e:	f003 0310 	and.w	r3, r3, #16
 8011492:	2b00      	cmp	r3, #0
 8011494:	d011      	beq.n	80114ba <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8011496:	79bb      	ldrb	r3, [r7, #6]
 8011498:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 801149a:	f107 030c 	add.w	r3, r7, #12
 801149e:	1d5a      	adds	r2, r3, #5
 80114a0:	f107 010c 	add.w	r1, r7, #12
 80114a4:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80114a8:	6a3b      	ldr	r3, [r7, #32]
 80114aa:	9301      	str	r3, [sp, #4]
 80114ac:	79fb      	ldrb	r3, [r7, #7]
 80114ae:	9300      	str	r3, [sp, #0]
 80114b0:	2301      	movs	r3, #1
 80114b2:	f000 ff3f 	bl	8012334 <nfcipTx>
 80114b6:	4603      	mov	r3, r0
 80114b8:	e00c      	b.n	80114d4 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 80114ba:	f107 010c 	add.w	r1, r7, #12
 80114be:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80114c2:	6a3b      	ldr	r3, [r7, #32]
 80114c4:	9301      	str	r3, [sp, #4]
 80114c6:	79fb      	ldrb	r3, [r7, #7]
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	2300      	movs	r3, #0
 80114cc:	2200      	movs	r2, #0
 80114ce:	f000 ff31 	bl	8012334 <nfcipTx>
 80114d2:	4603      	mov	r3, r0
    }
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3728      	adds	r7, #40	; 0x28
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	200033e8 	.word	0x200033e8

080114e0 <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 80114e0:	b480      	push	{r7}
 80114e2:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 80114e4:	4b0b      	ldr	r3, [pc, #44]	; (8011514 <nfcipClearCounters+0x34>)
 80114e6:	2200      	movs	r2, #0
 80114e8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 80114ec:	4b09      	ldr	r3, [pc, #36]	; (8011514 <nfcipClearCounters+0x34>)
 80114ee:	2200      	movs	r2, #0
 80114f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 80114f4:	4b07      	ldr	r3, [pc, #28]	; (8011514 <nfcipClearCounters+0x34>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 80114fc:	4b05      	ldr	r3, [pc, #20]	; (8011514 <nfcipClearCounters+0x34>)
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 8011504:	4b03      	ldr	r3, [pc, #12]	; (8011514 <nfcipClearCounters+0x34>)
 8011506:	2200      	movs	r2, #0
 8011508:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 801150c:	bf00      	nop
 801150e:	46bd      	mov	sp, r7
 8011510:	bc80      	pop	{r7}
 8011512:	4770      	bx	lr
 8011514:	200033e8 	.word	0x200033e8

08011518 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	60ba      	str	r2, [r7, #8]
 8011520:	607b      	str	r3, [r7, #4]
 8011522:	4603      	mov	r3, r0
 8011524:	81fb      	strh	r3, [r7, #14]
 8011526:	460b      	mov	r3, r1
 8011528:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 801152a:	230c      	movs	r3, #12
 801152c:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 8011532:	2300      	movs	r3, #0
 8011534:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2200      	movs	r2, #0
 801153a:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8011542:	89fb      	ldrh	r3, [r7, #14]
 8011544:	2b1d      	cmp	r3, #29
 8011546:	f200 80c6 	bhi.w	80116d6 <nfcipInitiatorHandleDEP+0x1be>
 801154a:	a201      	add	r2, pc, #4	; (adr r2, 8011550 <nfcipInitiatorHandleDEP+0x38>)
 801154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011550:	080116db 	.word	0x080116db
 8011554:	080116d7 	.word	0x080116d7
 8011558:	080116d3 	.word	0x080116d3
 801155c:	080116d7 	.word	0x080116d7
 8011560:	080115c9 	.word	0x080115c9
 8011564:	080116d7 	.word	0x080116d7
 8011568:	080116d7 	.word	0x080116d7
 801156c:	080116d7 	.word	0x080116d7
 8011570:	080116d7 	.word	0x080116d7
 8011574:	0801168f 	.word	0x0801168f
 8011578:	080116d7 	.word	0x080116d7
 801157c:	080116d7 	.word	0x080116d7
 8011580:	080116d7 	.word	0x080116d7
 8011584:	080116d7 	.word	0x080116d7
 8011588:	080116d7 	.word	0x080116d7
 801158c:	080116d7 	.word	0x080116d7
 8011590:	080116d7 	.word	0x080116d7
 8011594:	080116d7 	.word	0x080116d7
 8011598:	080116d7 	.word	0x080116d7
 801159c:	080116d7 	.word	0x080116d7
 80115a0:	080116d7 	.word	0x080116d7
 80115a4:	0801168f 	.word	0x0801168f
 80115a8:	080116d7 	.word	0x080116d7
 80115ac:	080116d7 	.word	0x080116d7
 80115b0:	080116d7 	.word	0x080116d7
 80115b4:	080116d7 	.word	0x080116d7
 80115b8:	080116d7 	.word	0x080116d7
 80115bc:	0801168f 	.word	0x0801168f
 80115c0:	080116d7 	.word	0x080116d7
 80115c4:	0801168f 	.word	0x0801168f
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= RFAL_NFCDEP_TO_RETRYS )
 80115c8:	4bac      	ldr	r3, [pc, #688]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80115ca:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80115ce:	1c5a      	adds	r2, r3, #1
 80115d0:	b2d1      	uxtb	r1, r2
 80115d2:	4aaa      	ldr	r2, [pc, #680]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80115d4:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 80115d8:	2b02      	cmp	r3, #2
 80115da:	d901      	bls.n	80115e0 <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 80115dc:	230b      	movs	r3, #11
 80115de:	e264      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 80115e0:	4ba6      	ldr	r3, [pc, #664]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80115e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d008      	beq.n	80115fc <nfcipInitiatorHandleDEP+0xe4>
 80115ea:	4ba4      	ldr	r3, [pc, #656]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80115ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80115f0:	4798      	blx	r3
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d001      	beq.n	80115fc <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 80115f8:	2304      	movs	r3, #4
 80115fa:	e256      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 80115fc:	4b9f      	ldr	r3, [pc, #636]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80115fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011602:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011606:	2b40      	cmp	r3, #64	; 0x40
 8011608:	d128      	bne.n	801165c <nfcipInitiatorHandleDEP+0x144>
 801160a:	4b9c      	ldr	r3, [pc, #624]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801160c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011610:	f003 0310 	and.w	r3, r3, #16
 8011614:	2b00      	cmp	r3, #0
 8011616:	d021      	beq.n	801165c <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 8011618:	4b98      	ldr	r3, [pc, #608]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801161a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	b2d1      	uxtb	r1, r2
 8011622:	4a96      	ldr	r2, [pc, #600]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011624:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8011628:	2b02      	cmp	r3, #2
 801162a:	d901      	bls.n	8011630 <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 801162c:	230b      	movs	r3, #11
 801162e:	e23c      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8011630:	4b92      	ldr	r3, [pc, #584]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011636:	f003 0303 	and.w	r3, r3, #3
 801163a:	b2db      	uxtb	r3, r3
 801163c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8011640:	b2db      	uxtb	r3, r3
 8011642:	2100      	movs	r1, #0
 8011644:	4618      	mov	r0, r3
 8011646:	f7ff feeb 	bl	8011420 <nfcipDEPControlMsg>
 801164a:	4603      	mov	r3, r0
 801164c:	82fb      	strh	r3, [r7, #22]
 801164e:	8afb      	ldrh	r3, [r7, #22]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <nfcipInitiatorHandleDEP+0x140>
 8011654:	8afb      	ldrh	r3, [r7, #22]
 8011656:	e228      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 8011658:	2302      	movs	r3, #2
 801165a:	e226      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 801165c:	4b87      	ldr	r3, [pc, #540]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801165e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8011662:	1c5a      	adds	r2, r3, #1
 8011664:	b2d1      	uxtb	r1, r2
 8011666:	4a85      	ldr	r2, [pc, #532]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011668:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 801166c:	2b02      	cmp	r3, #2
 801166e:	d901      	bls.n	8011674 <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 8011670:	230b      	movs	r3, #11
 8011672:	e21a      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8011674:	2100      	movs	r1, #0
 8011676:	2080      	movs	r0, #128	; 0x80
 8011678:	f7ff fed2 	bl	8011420 <nfcipDEPControlMsg>
 801167c:	4603      	mov	r3, r0
 801167e:	82fb      	strh	r3, [r7, #22]
 8011680:	8afb      	ldrh	r3, [r7, #22]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <nfcipInitiatorHandleDEP+0x172>
 8011686:	8afb      	ldrh	r3, [r7, #22]
 8011688:	e20f      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 801168a:	2302      	movs	r3, #2
 801168c:	e20d      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 801168e:	4b7b      	ldr	r3, [pc, #492]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011690:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011694:	1c5a      	adds	r2, r3, #1
 8011696:	b2d1      	uxtb	r1, r2
 8011698:	4a78      	ldr	r2, [pc, #480]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801169a:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 801169e:	2b02      	cmp	r3, #2
 80116a0:	d901      	bls.n	80116a6 <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 80116a2:	2309      	movs	r3, #9
 80116a4:	e201      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 80116a6:	4b75      	ldr	r3, [pc, #468]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80116a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80116ac:	f003 0303 	and.w	r3, r3, #3
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	2100      	movs	r1, #0
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7ff feb0 	bl	8011420 <nfcipDEPControlMsg>
 80116c0:	4603      	mov	r3, r0
 80116c2:	82fb      	strh	r3, [r7, #22]
 80116c4:	8afb      	ldrh	r3, [r7, #22]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d001      	beq.n	80116ce <nfcipInitiatorHandleDEP+0x1b6>
 80116ca:	8afb      	ldrh	r3, [r7, #22]
 80116cc:	e1ed      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 80116ce:	2302      	movs	r3, #2
 80116d0:	e1eb      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 80116d2:	2302      	movs	r3, #2
 80116d4:	e1e9      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 80116d6:	89fb      	ldrh	r3, [r7, #14]
 80116d8:	e1e7      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            break;
 80116da:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80116dc:	4b67      	ldr	r3, [pc, #412]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80116de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80116e0:	7d7b      	ldrb	r3, [r7, #21]
 80116e2:	1c59      	adds	r1, r3, #1
 80116e4:	7579      	strb	r1, [r7, #21]
 80116e6:	4413      	add	r3, r2
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 80116ec:	4b63      	ldr	r3, [pc, #396]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80116ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80116f0:	7d7b      	ldrb	r3, [r7, #21]
 80116f2:	1c59      	adds	r1, r3, #1
 80116f4:	7579      	strb	r1, [r7, #21]
 80116f6:	4413      	add	r3, r2
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	2bd5      	cmp	r3, #213	; 0xd5
 80116fc:	d001      	beq.n	8011702 <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 80116fe:	230b      	movs	r3, #11
 8011700:	e1d3      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 8011702:	4b5e      	ldr	r3, [pc, #376]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011704:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011706:	7d7b      	ldrb	r3, [r7, #21]
 8011708:	1c59      	adds	r1, r3, #1
 801170a:	7579      	strb	r1, [r7, #21]
 801170c:	4413      	add	r3, r2
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	2b07      	cmp	r3, #7
 8011712:	d001      	beq.n	8011718 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 8011714:	230b      	movs	r3, #11
 8011716:	e1c8      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8011718:	4b58      	ldr	r3, [pc, #352]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801171a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801171c:	7d7b      	ldrb	r3, [r7, #21]
 801171e:	1c59      	adds	r1, r3, #1
 8011720:	7579      	strb	r1, [r7, #21]
 8011722:	4413      	add	r3, r2
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8011728:	7cbb      	ldrb	r3, [r7, #18]
 801172a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801172e:	2b80      	cmp	r3, #128	; 0x80
 8011730:	d00b      	beq.n	801174a <nfcipInitiatorHandleDEP+0x232>
 8011732:	7cbb      	ldrb	r3, [r7, #18]
 8011734:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011738:	2b40      	cmp	r3, #64	; 0x40
 801173a:	d006      	beq.n	801174a <nfcipInitiatorHandleDEP+0x232>
 801173c:	7cbb      	ldrb	r3, [r7, #18]
 801173e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011742:	2b00      	cmp	r3, #0
 8011744:	d001      	beq.n	801174a <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 8011746:	230b      	movs	r3, #11
 8011748:	e1af      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 801174a:	4b4c      	ldr	r3, [pc, #304]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801174c:	78db      	ldrb	r3, [r3, #3]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d015      	beq.n	801177e <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8011752:	4b4a      	ldr	r3, [pc, #296]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011754:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011756:	7d7b      	ldrb	r3, [r7, #21]
 8011758:	1c59      	adds	r1, r3, #1
 801175a:	7579      	strb	r1, [r7, #21]
 801175c:	4413      	add	r3, r2
 801175e:	781a      	ldrb	r2, [r3, #0]
 8011760:	4b46      	ldr	r3, [pc, #280]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011762:	78db      	ldrb	r3, [r3, #3]
 8011764:	429a      	cmp	r2, r3
 8011766:	d104      	bne.n	8011772 <nfcipInitiatorHandleDEP+0x25a>
 8011768:	7cbb      	ldrb	r3, [r7, #18]
 801176a:	f003 0304 	and.w	r3, r3, #4
 801176e:	2b00      	cmp	r3, #0
 8011770:	d101      	bne.n	8011776 <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 8011772:	230b      	movs	r3, #11
 8011774:	e199      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8011776:	7d3b      	ldrb	r3, [r7, #20]
 8011778:	3301      	adds	r3, #1
 801177a:	753b      	strb	r3, [r7, #20]
 801177c:	e006      	b.n	801178c <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 801177e:	7cbb      	ldrb	r3, [r7, #18]
 8011780:	f003 0304 	and.w	r3, r3, #4
 8011784:	2b00      	cmp	r3, #0
 8011786:	d001      	beq.n	801178c <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 8011788:	230b      	movs	r3, #11
 801178a:	e18e      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 801178c:	4b3b      	ldr	r3, [pc, #236]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801178e:	791b      	ldrb	r3, [r3, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d015      	beq.n	80117c0 <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 8011794:	4b39      	ldr	r3, [pc, #228]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011796:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011798:	7d7b      	ldrb	r3, [r7, #21]
 801179a:	1c59      	adds	r1, r3, #1
 801179c:	7579      	strb	r1, [r7, #21]
 801179e:	4413      	add	r3, r2
 80117a0:	781a      	ldrb	r2, [r3, #0]
 80117a2:	4b36      	ldr	r3, [pc, #216]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80117a4:	791b      	ldrb	r3, [r3, #4]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d104      	bne.n	80117b4 <nfcipInitiatorHandleDEP+0x29c>
 80117aa:	7cbb      	ldrb	r3, [r7, #18]
 80117ac:	f003 0308 	and.w	r3, r3, #8
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d101      	bne.n	80117b8 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 80117b4:	230b      	movs	r3, #11
 80117b6:	e178      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80117b8:	7d3b      	ldrb	r3, [r7, #20]
 80117ba:	3301      	adds	r3, #1
 80117bc:	753b      	strb	r3, [r7, #20]
 80117be:	e006      	b.n	80117ce <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 80117c0:	7cbb      	ldrb	r3, [r7, #18]
 80117c2:	f003 0308 	and.w	r3, r3, #8
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d001      	beq.n	80117ce <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 80117ca:	230b      	movs	r3, #11
 80117cc:	e16d      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 80117ce:	7cbb      	ldrb	r3, [r7, #18]
 80117d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80117d4:	2b40      	cmp	r3, #64	; 0x40
 80117d6:	d153      	bne.n	8011880 <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 80117d8:	7cbb      	ldrb	r3, [r7, #18]
 80117da:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80117de:	2b40      	cmp	r3, #64	; 0x40
 80117e0:	d14a      	bne.n	8011878 <nfcipInitiatorHandleDEP+0x360>
 80117e2:	7cbb      	ldrb	r3, [r7, #18]
 80117e4:	f003 0310 	and.w	r3, r3, #16
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d145      	bne.n	8011878 <nfcipInitiatorHandleDEP+0x360>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80117ec:	4b23      	ldr	r3, [pc, #140]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 80117ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80117f2:	461a      	mov	r2, r3
 80117f4:	7cbb      	ldrb	r3, [r7, #18]
 80117f6:	f003 0303 	and.w	r3, r3, #3
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d11c      	bne.n	8011838 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80117fe:	4b1f      	ldr	r3, [pc, #124]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011804:	3301      	adds	r3, #1
 8011806:	b2db      	uxtb	r3, r3
 8011808:	f003 0303 	and.w	r3, r3, #3
 801180c:	b2da      	uxtb	r2, r3
 801180e:	4b1b      	ldr	r3, [pc, #108]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 8011814:	4b19      	ldr	r3, [pc, #100]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011816:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801181a:	f083 0301 	eor.w	r3, r3, #1
 801181e:	b2db      	uxtb	r3, r3
 8011820:	2b00      	cmp	r3, #0
 8011822:	d001      	beq.n	8011828 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 8011824:	230b      	movs	r3, #11
 8011826:	e140      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 8011828:	f7ff fe5a 	bl	80114e0 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 801182c:	4b13      	ldr	r3, [pc, #76]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801182e:	2204      	movs	r2, #4
 8011830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 8011834:	2300      	movs	r3, #0
 8011836:	e138      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 8011838:	4b10      	ldr	r3, [pc, #64]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801183a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801183e:	1c5a      	adds	r2, r3, #1
 8011840:	b2d1      	uxtb	r1, r2
 8011842:	4a0e      	ldr	r2, [pc, #56]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011844:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8011848:	2b02      	cmp	r3, #2
 801184a:	d901      	bls.n	8011850 <nfcipInitiatorHandleDEP+0x338>
                {
                    return ERR_PROTO;
 801184c:	230b      	movs	r3, #11
 801184e:	e12c      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 8011850:	4b0a      	ldr	r3, [pc, #40]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 8011852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011856:	3b01      	subs	r3, #1
 8011858:	b2da      	uxtb	r2, r3
 801185a:	7cbb      	ldrb	r3, [r7, #18]
 801185c:	4053      	eors	r3, r2
 801185e:	b2db      	uxtb	r3, r3
 8011860:	f003 0303 	and.w	r3, r3, #3
 8011864:	2b00      	cmp	r3, #0
 8011866:	d105      	bne.n	8011874 <nfcipInitiatorHandleDEP+0x35c>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8011868:	4b04      	ldr	r3, [pc, #16]	; (801187c <nfcipInitiatorHandleDEP+0x364>)
 801186a:	2205      	movs	r2, #5
 801186c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 8011870:	2302      	movs	r3, #2
 8011872:	e11a      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 8011874:	230b      	movs	r3, #11
 8011876:	e118      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 8011878:	230b      	movs	r3, #11
 801187a:	e116      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
 801187c:	200033e8 	.word	0x200033e8
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 8011880:	7cbb      	ldrb	r3, [r7, #18]
 8011882:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011886:	2b80      	cmp	r3, #128	; 0x80
 8011888:	f040 8094 	bne.w	80119b4 <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 801188c:	7cbb      	ldrb	r3, [r7, #18]
 801188e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011892:	2b80      	cmp	r3, #128	; 0x80
 8011894:	d146      	bne.n	8011924 <nfcipInitiatorHandleDEP+0x40c>
 8011896:	7cbb      	ldrb	r3, [r7, #18]
 8011898:	f003 0310 	and.w	r3, r3, #16
 801189c:	2b00      	cmp	r3, #0
 801189e:	d141      	bne.n	8011924 <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 80118a0:	4b84      	ldr	r3, [pc, #528]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80118a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80118a6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80118aa:	2b80      	cmp	r3, #128	; 0x80
 80118ac:	d138      	bne.n	8011920 <nfcipInitiatorHandleDEP+0x408>
 80118ae:	4b81      	ldr	r3, [pc, #516]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80118b0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80118b4:	f003 0310 	and.w	r3, r3, #16
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d131      	bne.n	8011920 <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 80118bc:	4b7d      	ldr	r3, [pc, #500]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80118be:	2200      	movs	r2, #0
 80118c0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80118c4:	4b7b      	ldr	r3, [pc, #492]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80118c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80118ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80118ce:	2b80      	cmp	r3, #128	; 0x80
 80118d0:	d114      	bne.n	80118fc <nfcipInitiatorHandleDEP+0x3e4>
 80118d2:	4b78      	ldr	r3, [pc, #480]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80118d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80118d8:	f003 0310 	and.w	r3, r3, #16
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00d      	beq.n	80118fc <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 80118e0:	4b74      	ldr	r3, [pc, #464]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80118e2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80118e6:	4619      	mov	r1, r3
 80118e8:	2090      	movs	r0, #144	; 0x90
 80118ea:	f7ff fd99 	bl	8011420 <nfcipDEPControlMsg>
 80118ee:	4603      	mov	r3, r0
 80118f0:	82fb      	strh	r3, [r7, #22]
 80118f2:	8afb      	ldrh	r3, [r7, #22]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d011      	beq.n	801191c <nfcipInitiatorHandleDEP+0x404>
 80118f8:	8afb      	ldrh	r3, [r7, #22]
 80118fa:	e0d6      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 80118fc:	4b6d      	ldr	r3, [pc, #436]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80118fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8011902:	1c5a      	adds	r2, r3, #1
 8011904:	b2d1      	uxtb	r1, r2
 8011906:	4a6b      	ldr	r2, [pc, #428]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011908:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 801190c:	2b02      	cmp	r3, #2
 801190e:	d901      	bls.n	8011914 <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 8011910:	230b      	movs	r3, #11
 8011912:	e0ca      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8011914:	4b67      	ldr	r3, [pc, #412]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011916:	2205      	movs	r2, #5
 8011918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 801191c:	2302      	movs	r3, #2
 801191e:	e0c4      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 8011920:	230b      	movs	r3, #11
 8011922:	e0c2      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8011924:	7cbb      	ldrb	r3, [r7, #18]
 8011926:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801192a:	2b80      	cmp	r3, #128	; 0x80
 801192c:	d140      	bne.n	80119b0 <nfcipInitiatorHandleDEP+0x498>
 801192e:	7cbb      	ldrb	r3, [r7, #18]
 8011930:	f003 0310 	and.w	r3, r3, #16
 8011934:	2b00      	cmp	r3, #0
 8011936:	d03b      	beq.n	80119b0 <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 8011938:	4b5e      	ldr	r3, [pc, #376]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 801193a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801193c:	7d7b      	ldrb	r3, [r7, #21]
 801193e:	1c59      	adds	r1, r3, #1
 8011940:	7579      	strb	r1, [r7, #21]
 8011942:	4413      	add	r3, r2
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 8011948:	4b5a      	ldr	r3, [pc, #360]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 801194a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801194e:	1c5a      	adds	r2, r3, #1
 8011950:	b2d1      	uxtb	r1, r2
 8011952:	4a58      	ldr	r2, [pc, #352]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011954:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8011958:	2b0a      	cmp	r3, #10
 801195a:	d80d      	bhi.n	8011978 <nfcipInitiatorHandleDEP+0x460>
 801195c:	4b55      	ldr	r3, [pc, #340]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 801195e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011962:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011966:	2b80      	cmp	r3, #128	; 0x80
 8011968:	d108      	bne.n	801197c <nfcipInitiatorHandleDEP+0x464>
 801196a:	4b52      	ldr	r3, [pc, #328]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 801196c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011970:	f003 0310 	and.w	r3, r3, #16
 8011974:	2b00      	cmp	r3, #0
 8011976:	d101      	bne.n	801197c <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 8011978:	230b      	movs	r3, #11
 801197a:	e096      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 801197c:	7c7b      	ldrb	r3, [r7, #17]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d002      	beq.n	8011988 <nfcipInitiatorHandleDEP+0x470>
 8011982:	7c7b      	ldrb	r3, [r7, #17]
 8011984:	2b3b      	cmp	r3, #59	; 0x3b
 8011986:	d901      	bls.n	801198c <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 8011988:	230b      	movs	r3, #11
 801198a:	e08e      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 801198c:	7c7b      	ldrb	r3, [r7, #17]
 801198e:	4619      	mov	r1, r3
 8011990:	2090      	movs	r0, #144	; 0x90
 8011992:	f7ff fd45 	bl	8011420 <nfcipDEPControlMsg>
 8011996:	4603      	mov	r3, r0
 8011998:	82fb      	strh	r3, [r7, #22]
 801199a:	8afb      	ldrh	r3, [r7, #22]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d001      	beq.n	80119a4 <nfcipInitiatorHandleDEP+0x48c>
 80119a0:	8afb      	ldrh	r3, [r7, #22]
 80119a2:	e082      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 80119a4:	4a43      	ldr	r2, [pc, #268]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80119a6:	7c7b      	ldrb	r3, [r7, #17]
 80119a8:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 80119ac:	2302      	movs	r3, #2
 80119ae:	e07c      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 80119b0:	230b      	movs	r3, #11
 80119b2:	e07a      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 80119b4:	7cbb      	ldrb	r3, [r7, #18]
 80119b6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d174      	bne.n	8011aa8 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 80119be:	4b3d      	ldr	r3, [pc, #244]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80119c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80119c4:	461a      	mov	r2, r3
 80119c6:	7cbb      	ldrb	r3, [r7, #18]
 80119c8:	f003 0303 	and.w	r3, r3, #3
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d001      	beq.n	80119d4 <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 80119d0:	230b      	movs	r3, #11
 80119d2:	e06a      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80119d4:	4b37      	ldr	r3, [pc, #220]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80119d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80119da:	3301      	adds	r3, #1
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	f003 0303 	and.w	r3, r3, #3
 80119e2:	b2da      	uxtb	r2, r3
 80119e4:	4b33      	ldr	r3, [pc, #204]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 80119e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 80119ea:	f7ff fd79 	bl	80114e0 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80119ee:	7cfb      	ldrb	r3, [r7, #19]
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	7d3b      	ldrb	r3, [r7, #20]
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	1ad3      	subs	r3, r2, r3
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	3b04      	subs	r3, #4
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8011a02:	4b2c      	ldr	r3, [pc, #176]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a04:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011a08:	461a      	mov	r2, r3
 8011a0a:	7d3b      	ldrb	r3, [r7, #20]
 8011a0c:	3304      	adds	r3, #4
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d013      	beq.n	8011a3a <nfcipInitiatorHandleDEP+0x522>
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00f      	beq.n	8011a3a <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8011a1a:	4b26      	ldr	r3, [pc, #152]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a1e:	4a25      	ldr	r2, [pc, #148]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a20:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8011a24:	1898      	adds	r0, r3, r2
 8011a26:	4b23      	ldr	r3, [pc, #140]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011a2a:	7d3b      	ldrb	r3, [r7, #20]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	18d1      	adds	r1, r2, r3
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	461a      	mov	r2, r3
 8011a36:	f00a f949 	bl	801bccc <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8011a3a:	7cbb      	ldrb	r3, [r7, #18]
 8011a3c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d127      	bne.n	8011a94 <nfcipInitiatorHandleDEP+0x57c>
 8011a44:	7cbb      	ldrb	r3, [r7, #18]
 8011a46:	f003 0310 	and.w	r3, r3, #16
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d022      	beq.n	8011a94 <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 8011a4e:	4b19      	ldr	r3, [pc, #100]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a50:	2201      	movs	r2, #1
 8011a52:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2201      	movs	r2, #1
 8011a5a:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8011a5c:	4b15      	ldr	r3, [pc, #84]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a62:	f003 0303 	and.w	r3, r3, #3
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a6c:	b2d8      	uxtb	r0, r3
 8011a6e:	4b11      	ldr	r3, [pc, #68]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011a72:	7d7b      	ldrb	r3, [r7, #21]
 8011a74:	1c59      	adds	r1, r3, #1
 8011a76:	7579      	strb	r1, [r7, #21]
 8011a78:	4413      	add	r3, r2
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	f7ff fccf 	bl	8011420 <nfcipDEPControlMsg>
 8011a82:	4603      	mov	r3, r0
 8011a84:	82fb      	strh	r3, [r7, #22]
 8011a86:	8afb      	ldrh	r3, [r7, #22]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d001      	beq.n	8011a90 <nfcipInitiatorHandleDEP+0x578>
 8011a8c:	8afb      	ldrh	r3, [r7, #22]
 8011a8e:	e00c      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8011a90:	230d      	movs	r3, #13
 8011a92:	e00a      	b.n	8011aaa <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 8011a94:	4b07      	ldr	r3, [pc, #28]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 8011a9c:	4b05      	ldr	r3, [pc, #20]	; (8011ab4 <nfcipInitiatorHandleDEP+0x59c>)
 8011a9e:	2204      	movs	r2, #4
 8011aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 8011aa8:	8afb      	ldrh	r3, [r7, #22]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3718      	adds	r7, #24
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	200033e8 	.word	0x200033e8

08011ab8 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b08c      	sub	sp, #48	; 0x30
 8011abc:	af04      	add	r7, sp, #16
 8011abe:	4603      	mov	r3, r0
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
 8011ac4:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 8011ac6:	230c      	movs	r3, #12
 8011ac8:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2200      	movs	r2, #0
 8011adc:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8011ade:	89fb      	ldrh	r3, [r7, #14]
 8011ae0:	2b25      	cmp	r3, #37	; 0x25
 8011ae2:	d006      	beq.n	8011af2 <nfcipTargetHandleRX+0x3a>
 8011ae4:	2b25      	cmp	r3, #37	; 0x25
 8011ae6:	dc0a      	bgt.n	8011afe <nfcipTargetHandleRX+0x46>
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d01c      	beq.n	8011b26 <nfcipTargetHandleRX+0x6e>
 8011aec:	2b02      	cmp	r3, #2
 8011aee:	d003      	beq.n	8011af8 <nfcipTargetHandleRX+0x40>
 8011af0:	e005      	b.n	8011afe <nfcipTargetHandleRX+0x46>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 8011af2:	89fb      	ldrh	r3, [r7, #14]
 8011af4:	f000 bc15 	b.w	8012322 <nfcipTargetHandleRX+0x86a>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8011af8:	2302      	movs	r3, #2
 8011afa:	f000 bc12 	b.w	8012322 <nfcipTargetHandleRX+0x86a>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011afe:	4b9e      	ldr	r3, [pc, #632]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b02:	4b9d      	ldr	r3, [pc, #628]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b04:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011b08:	4b9b      	ldr	r3, [pc, #620]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b10:	9002      	str	r0, [sp, #8]
 8011b12:	2004      	movs	r0, #4
 8011b14:	9001      	str	r0, [sp, #4]
 8011b16:	9300      	str	r3, [sp, #0]
 8011b18:	460b      	mov	r3, r1
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	f005 f8f1 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8011b22:	2302      	movs	r3, #2
 8011b24:	e3fd      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            break;
 8011b26:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8011b28:	4b93      	ldr	r3, [pc, #588]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b2c:	7f7b      	ldrb	r3, [r7, #29]
 8011b2e:	1c59      	adds	r1, r3, #1
 8011b30:	7779      	strb	r1, [r7, #29]
 8011b32:	4413      	add	r3, r2
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 8011b38:	4b8f      	ldr	r3, [pc, #572]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b3c:	7f7b      	ldrb	r3, [r7, #29]
 8011b3e:	1c59      	adds	r1, r3, #1
 8011b40:	7779      	strb	r1, [r7, #29]
 8011b42:	4413      	add	r3, r2
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	2bd4      	cmp	r3, #212	; 0xd4
 8011b48:	d013      	beq.n	8011b72 <nfcipTargetHandleRX+0xba>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011b4a:	4b8b      	ldr	r3, [pc, #556]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b4e:	4b8a      	ldr	r3, [pc, #552]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b50:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011b54:	4b88      	ldr	r3, [pc, #544]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b58:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5c:	9002      	str	r0, [sp, #8]
 8011b5e:	2004      	movs	r0, #4
 8011b60:	9001      	str	r0, [sp, #4]
 8011b62:	9300      	str	r3, [sp, #0]
 8011b64:	460b      	mov	r3, r1
 8011b66:	2100      	movs	r1, #0
 8011b68:	2000      	movs	r0, #0
 8011b6a:	f005 f8cb 	bl	8016d04 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 8011b6e:	2302      	movs	r3, #2
 8011b70:	e3d7      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 8011b72:	4b81      	ldr	r3, [pc, #516]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b76:	7f7b      	ldrb	r3, [r7, #29]
 8011b78:	1c59      	adds	r1, r3, #1
 8011b7a:	7779      	strb	r1, [r7, #29]
 8011b7c:	4413      	add	r3, r2
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	2b0a      	cmp	r3, #10
 8011b82:	d032      	beq.n	8011bea <nfcipTargetHandleRX+0x132>
 8011b84:	2b0a      	cmp	r3, #10
 8011b86:	dc5d      	bgt.n	8011c44 <nfcipTargetHandleRX+0x18c>
 8011b88:	2b06      	cmp	r3, #6
 8011b8a:	d06f      	beq.n	8011c6c <nfcipTargetHandleRX+0x1b4>
 8011b8c:	2b08      	cmp	r3, #8
 8011b8e:	d159      	bne.n	8011c44 <nfcipTargetHandleRX+0x18c>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8011b90:	4b79      	ldr	r3, [pc, #484]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011b92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011b94:	7f7b      	ldrb	r3, [r7, #29]
 8011b96:	1c59      	adds	r1, r3, #1
 8011b98:	7779      	strb	r1, [r7, #29]
 8011b9a:	4413      	add	r3, r2
 8011b9c:	781a      	ldrb	r2, [r3, #0]
 8011b9e:	4b76      	ldr	r3, [pc, #472]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011ba0:	78db      	ldrb	r3, [r3, #3]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d102      	bne.n	8011bac <nfcipTargetHandleRX+0xf4>
 8011ba6:	7efb      	ldrb	r3, [r7, #27]
 8011ba8:	2b04      	cmp	r3, #4
 8011baa:	d003      	beq.n	8011bb4 <nfcipTargetHandleRX+0xfc>
 8011bac:	4b72      	ldr	r3, [pc, #456]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011bae:	78db      	ldrb	r3, [r3, #3]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d106      	bne.n	8011bc2 <nfcipTargetHandleRX+0x10a>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8011bb4:	4b70      	ldr	r3, [pc, #448]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011bb6:	78db      	ldrb	r3, [r3, #3]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d104      	bne.n	8011bc6 <nfcipTargetHandleRX+0x10e>
 8011bbc:	7efb      	ldrb	r3, [r7, #27]
 8011bbe:	2b03      	cmp	r3, #3
 8011bc0:	d001      	beq.n	8011bc6 <nfcipTargetHandleRX+0x10e>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8011bc2:	2302      	movs	r3, #2
 8011bc4:	e3ad      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8011bc6:	f107 0114 	add.w	r1, r7, #20
 8011bca:	f04f 33ff 	mov.w	r3, #4294967295
 8011bce:	9301      	str	r3, [sp, #4]
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	9300      	str	r3, [sp, #0]
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	2009      	movs	r0, #9
 8011bda:	f000 fbab 	bl	8012334 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 8011bde:	4b66      	ldr	r3, [pc, #408]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011be0:	2210      	movs	r2, #16
 8011be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8011be6:	2320      	movs	r3, #32
 8011be8:	e39b      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8011bea:	4b63      	ldr	r3, [pc, #396]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011bec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011bee:	7f7b      	ldrb	r3, [r7, #29]
 8011bf0:	1c59      	adds	r1, r3, #1
 8011bf2:	7779      	strb	r1, [r7, #29]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	781a      	ldrb	r2, [r3, #0]
 8011bf8:	4b5f      	ldr	r3, [pc, #380]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011bfa:	78db      	ldrb	r3, [r3, #3]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d102      	bne.n	8011c06 <nfcipTargetHandleRX+0x14e>
 8011c00:	7efb      	ldrb	r3, [r7, #27]
 8011c02:	2b04      	cmp	r3, #4
 8011c04:	d003      	beq.n	8011c0e <nfcipTargetHandleRX+0x156>
 8011c06:	4b5c      	ldr	r3, [pc, #368]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c08:	78db      	ldrb	r3, [r3, #3]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <nfcipTargetHandleRX+0x164>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8011c0e:	4b5a      	ldr	r3, [pc, #360]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c10:	78db      	ldrb	r3, [r3, #3]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d104      	bne.n	8011c20 <nfcipTargetHandleRX+0x168>
 8011c16:	7efb      	ldrb	r3, [r7, #27]
 8011c18:	2b03      	cmp	r3, #3
 8011c1a:	d901      	bls.n	8011c20 <nfcipTargetHandleRX+0x168>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 8011c1c:	2302      	movs	r3, #2
 8011c1e:	e380      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8011c20:	f107 0114 	add.w	r1, r7, #20
 8011c24:	f04f 33ff 	mov.w	r3, #4294967295
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	9300      	str	r3, [sp, #0]
 8011c2e:	2300      	movs	r3, #0
 8011c30:	2200      	movs	r2, #0
 8011c32:	200b      	movs	r0, #11
 8011c34:	f000 fb7e 	bl	8012334 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 8011c38:	4b4f      	ldr	r3, [pc, #316]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c3a:	220c      	movs	r2, #12
 8011c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 8011c40:	231f      	movs	r3, #31
 8011c42:	e36e      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011c44:	4b4c      	ldr	r3, [pc, #304]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011c48:	4b4b      	ldr	r3, [pc, #300]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c4a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011c4e:	4b4a      	ldr	r3, [pc, #296]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c52:	f04f 30ff 	mov.w	r0, #4294967295
 8011c56:	9002      	str	r0, [sp, #8]
 8011c58:	2004      	movs	r0, #4
 8011c5a:	9001      	str	r0, [sp, #4]
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	460b      	mov	r3, r1
 8011c60:	2100      	movs	r1, #0
 8011c62:	2000      	movs	r0, #0
 8011c64:	f005 f84e 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 8011c68:	2302      	movs	r3, #2
 8011c6a:	e35a      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            break;                                /* Continue to normal DEP processing */
 8011c6c:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 8011c6e:	4b42      	ldr	r3, [pc, #264]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011c72:	7f7b      	ldrb	r3, [r7, #29]
 8011c74:	1c59      	adds	r1, r3, #1
 8011c76:	7779      	strb	r1, [r7, #29]
 8011c78:	4413      	add	r3, r2
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8011c7e:	7ebb      	ldrb	r3, [r7, #26]
 8011c80:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011c84:	2b80      	cmp	r3, #128	; 0x80
 8011c86:	d01d      	beq.n	8011cc4 <nfcipTargetHandleRX+0x20c>
 8011c88:	7ebb      	ldrb	r3, [r7, #26]
 8011c8a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011c8e:	2b40      	cmp	r3, #64	; 0x40
 8011c90:	d018      	beq.n	8011cc4 <nfcipTargetHandleRX+0x20c>
 8011c92:	7ebb      	ldrb	r3, [r7, #26]
 8011c94:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d013      	beq.n	8011cc4 <nfcipTargetHandleRX+0x20c>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011c9c:	4b36      	ldr	r3, [pc, #216]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011c9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011ca0:	4b35      	ldr	r3, [pc, #212]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011ca2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011ca6:	4b34      	ldr	r3, [pc, #208]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011caa:	f04f 30ff 	mov.w	r0, #4294967295
 8011cae:	9002      	str	r0, [sp, #8]
 8011cb0:	2004      	movs	r0, #4
 8011cb2:	9001      	str	r0, [sp, #4]
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	2100      	movs	r1, #0
 8011cba:	2000      	movs	r0, #0
 8011cbc:	f005 f822 	bl	8016d04 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 8011cc0:	2302      	movs	r3, #2
 8011cc2:	e32e      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8011cc4:	4b2c      	ldr	r3, [pc, #176]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011cc6:	78db      	ldrb	r3, [r3, #3]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d03b      	beq.n	8011d44 <nfcipTargetHandleRX+0x28c>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 8011ccc:	7ebb      	ldrb	r3, [r7, #26]
 8011cce:	f003 0304 	and.w	r3, r3, #4
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d113      	bne.n	8011cfe <nfcipTargetHandleRX+0x246>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011cd6:	4b28      	ldr	r3, [pc, #160]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011cd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011cda:	4b27      	ldr	r3, [pc, #156]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011cdc:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011ce0:	4b25      	ldr	r3, [pc, #148]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	9002      	str	r0, [sp, #8]
 8011cea:	2004      	movs	r0, #4
 8011cec:	9001      	str	r0, [sp, #4]
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	f005 f805 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	e311      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 8011cfe:	4b1e      	ldr	r3, [pc, #120]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011d02:	7f7b      	ldrb	r3, [r7, #29]
 8011d04:	1c59      	adds	r1, r3, #1
 8011d06:	7779      	strb	r1, [r7, #29]
 8011d08:	4413      	add	r3, r2
 8011d0a:	781a      	ldrb	r2, [r3, #0]
 8011d0c:	4b1a      	ldr	r3, [pc, #104]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d0e:	78db      	ldrb	r3, [r3, #3]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d013      	beq.n	8011d3c <nfcipTargetHandleRX+0x284>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011d14:	4b18      	ldr	r3, [pc, #96]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011d18:	4b17      	ldr	r3, [pc, #92]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d1a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011d1e:	4b16      	ldr	r3, [pc, #88]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d22:	f04f 30ff 	mov.w	r0, #4294967295
 8011d26:	9002      	str	r0, [sp, #8]
 8011d28:	2004      	movs	r0, #4
 8011d2a:	9001      	str	r0, [sp, #4]
 8011d2c:	9300      	str	r3, [sp, #0]
 8011d2e:	460b      	mov	r3, r1
 8011d30:	2100      	movs	r1, #0
 8011d32:	2000      	movs	r0, #0
 8011d34:	f004 ffe6 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 8011d38:	2302      	movs	r3, #2
 8011d3a:	e2f2      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8011d3c:	7f3b      	ldrb	r3, [r7, #28]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	773b      	strb	r3, [r7, #28]
 8011d42:	e01b      	b.n	8011d7c <nfcipTargetHandleRX+0x2c4>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 8011d44:	7ebb      	ldrb	r3, [r7, #26]
 8011d46:	f003 0304 	and.w	r3, r3, #4
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d016      	beq.n	8011d7c <nfcipTargetHandleRX+0x2c4>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011d4e:	4b0a      	ldr	r3, [pc, #40]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011d52:	4b09      	ldr	r3, [pc, #36]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d54:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011d58:	4b07      	ldr	r3, [pc, #28]	; (8011d78 <nfcipTargetHandleRX+0x2c0>)
 8011d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d60:	9002      	str	r0, [sp, #8]
 8011d62:	2004      	movs	r0, #4
 8011d64:	9001      	str	r0, [sp, #4]
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	2000      	movs	r0, #0
 8011d6e:	f004 ffc9 	bl	8016d04 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 8011d72:	2302      	movs	r3, #2
 8011d74:	e2d5      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
 8011d76:	bf00      	nop
 8011d78:	200033e8 	.word	0x200033e8
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8011d7c:	4bb2      	ldr	r3, [pc, #712]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011d7e:	791b      	ldrb	r3, [r3, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d027      	beq.n	8011dd4 <nfcipTargetHandleRX+0x31c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8011d84:	4bb0      	ldr	r3, [pc, #704]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011d86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011d88:	7f7b      	ldrb	r3, [r7, #29]
 8011d8a:	1c59      	adds	r1, r3, #1
 8011d8c:	7779      	strb	r1, [r7, #29]
 8011d8e:	4413      	add	r3, r2
 8011d90:	781a      	ldrb	r2, [r3, #0]
 8011d92:	4bad      	ldr	r3, [pc, #692]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011d94:	78db      	ldrb	r3, [r3, #3]
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d104      	bne.n	8011da4 <nfcipTargetHandleRX+0x2ec>
 8011d9a:	7ebb      	ldrb	r3, [r7, #26]
 8011d9c:	f003 0304 	and.w	r3, r3, #4
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d113      	bne.n	8011dcc <nfcipTargetHandleRX+0x314>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011da4:	4ba8      	ldr	r3, [pc, #672]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011da6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011da8:	4ba7      	ldr	r3, [pc, #668]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011daa:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011dae:	4ba6      	ldr	r3, [pc, #664]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011db2:	f04f 30ff 	mov.w	r0, #4294967295
 8011db6:	9002      	str	r0, [sp, #8]
 8011db8:	2004      	movs	r0, #4
 8011dba:	9001      	str	r0, [sp, #4]
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	2000      	movs	r0, #0
 8011dc4:	f004 ff9e 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 8011dc8:	2302      	movs	r3, #2
 8011dca:	e2aa      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8011dcc:	7f3b      	ldrb	r3, [r7, #28]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	773b      	strb	r3, [r7, #28]
 8011dd2:	e018      	b.n	8011e06 <nfcipTargetHandleRX+0x34e>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8011dd4:	7ebb      	ldrb	r3, [r7, #26]
 8011dd6:	f003 0308 	and.w	r3, r3, #8
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d013      	beq.n	8011e06 <nfcipTargetHandleRX+0x34e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011dde:	4b9a      	ldr	r3, [pc, #616]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011de0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011de2:	4b99      	ldr	r3, [pc, #612]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011de4:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011de8:	4b97      	ldr	r3, [pc, #604]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dec:	f04f 30ff 	mov.w	r0, #4294967295
 8011df0:	9002      	str	r0, [sp, #8]
 8011df2:	2004      	movs	r0, #4
 8011df4:	9001      	str	r0, [sp, #4]
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	460b      	mov	r3, r1
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	f004 ff81 	bl	8016d04 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 8011e02:	2302      	movs	r3, #2
 8011e04:	e28d      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 8011e06:	7ebb      	ldrb	r3, [r7, #26]
 8011e08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011e0c:	2b40      	cmp	r3, #64	; 0x40
 8011e0e:	f040 80c5 	bne.w	8011f9c <nfcipTargetHandleRX+0x4e4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8011e12:	7ebb      	ldrb	r3, [r7, #26]
 8011e14:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011e18:	2b40      	cmp	r3, #64	; 0x40
 8011e1a:	f040 8083 	bne.w	8011f24 <nfcipTargetHandleRX+0x46c>
 8011e1e:	7ebb      	ldrb	r3, [r7, #26]
 8011e20:	f003 0310 	and.w	r3, r3, #16
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d17d      	bne.n	8011f24 <nfcipTargetHandleRX+0x46c>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8011e28:	4b87      	ldr	r3, [pc, #540]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011e2e:	461a      	mov	r2, r3
 8011e30:	7ebb      	ldrb	r3, [r7, #26]
 8011e32:	f003 0303 	and.w	r3, r3, #3
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d149      	bne.n	8011ece <nfcipTargetHandleRX+0x416>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 8011e3a:	4b83      	ldr	r3, [pc, #524]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011e3c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8011e40:	f083 0301 	eor.w	r3, r3, #1
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d013      	beq.n	8011e72 <nfcipTargetHandleRX+0x3ba>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011e4a:	4b7f      	ldr	r3, [pc, #508]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011e4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011e4e:	4b7e      	ldr	r3, [pc, #504]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011e50:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011e54:	4b7c      	ldr	r3, [pc, #496]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e58:	f04f 30ff 	mov.w	r0, #4294967295
 8011e5c:	9002      	str	r0, [sp, #8]
 8011e5e:	2004      	movs	r0, #4
 8011e60:	9001      	str	r0, [sp, #4]
 8011e62:	9300      	str	r3, [sp, #0]
 8011e64:	460b      	mov	r3, r1
 8011e66:	2100      	movs	r1, #0
 8011e68:	2000      	movs	r0, #0
 8011e6a:	f004 ff4b 	bl	8016d04 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 8011e6e:	2302      	movs	r3, #2
 8011e70:	e257      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8011e72:	4b75      	ldr	r3, [pc, #468]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e78:	f003 030f 	and.w	r3, r3, #15
 8011e7c:	330c      	adds	r3, #12
 8011e7e:	2201      	movs	r2, #1
 8011e80:	fa02 f303 	lsl.w	r3, r2, r3
 8011e84:	4a71      	ldr	r2, [pc, #452]	; (801204c <nfcipTargetHandleRX+0x594>)
 8011e86:	fba2 2303 	umull	r2, r3, r2, r3
 8011e8a:	0b1b      	lsrs	r3, r3, #12
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	4b6e      	ldr	r3, [pc, #440]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e94:	f003 030f 	and.w	r3, r3, #15
 8011e98:	330c      	adds	r3, #12
 8011e9a:	2101      	movs	r1, #1
 8011e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8011ea0:	496a      	ldr	r1, [pc, #424]	; (801204c <nfcipTargetHandleRX+0x594>)
 8011ea2:	fba1 1303 	umull	r1, r3, r1, r3
 8011ea6:	0b1b      	lsrs	r3, r3, #12
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	08db      	lsrs	r3, r3, #3
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	b29b      	uxth	r3, r3
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f009 fe9e 	bl	801bbf8 <timerCalculateTimer>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	4a62      	ldr	r2, [pc, #392]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011ec0:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8011ec2:	4b61      	ldr	r3, [pc, #388]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011ec4:	220e      	movs	r2, #14
 8011ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 8011eca:	2300      	movs	r3, #0
 8011ecc:	e229      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 8011ece:	4b5e      	ldr	r3, [pc, #376]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011ed0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011ed4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011ed8:	2b80      	cmp	r3, #128	; 0x80
 8011eda:	d15e      	bne.n	8011f9a <nfcipTargetHandleRX+0x4e2>
 8011edc:	4b5a      	ldr	r3, [pc, #360]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011ede:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8011ee2:	f003 0310 	and.w	r3, r3, #16
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d157      	bne.n	8011f9a <nfcipTargetHandleRX+0x4e2>
 8011eea:	4b57      	ldr	r3, [pc, #348]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	b2da      	uxtb	r2, r3
 8011ef4:	7ebb      	ldrb	r3, [r7, #26]
 8011ef6:	4053      	eors	r3, r2
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	f003 0303 	and.w	r3, r3, #3
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d14b      	bne.n	8011f9a <nfcipTargetHandleRX+0x4e2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 8011f02:	4b51      	ldr	r3, [pc, #324]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f08:	3b01      	subs	r3, #1
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	f003 0303 	and.w	r3, r3, #3
 8011f10:	b2da      	uxtb	r2, r3
 8011f12:	4b4d      	ldr	r3, [pc, #308]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8011f18:	4b4b      	ldr	r3, [pc, #300]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f1a:	220f      	movs	r2, #15
 8011f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 8011f20:	2302      	movs	r3, #2
 8011f22:	e1fe      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 8011f24:	7ebb      	ldrb	r3, [r7, #26]
 8011f26:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011f2a:	2b40      	cmp	r3, #64	; 0x40
 8011f2c:	d121      	bne.n	8011f72 <nfcipTargetHandleRX+0x4ba>
 8011f2e:	7ebb      	ldrb	r3, [r7, #26]
 8011f30:	f003 0310 	and.w	r3, r3, #16
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d01c      	beq.n	8011f72 <nfcipTargetHandleRX+0x4ba>
 8011f38:	4b43      	ldr	r3, [pc, #268]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f3e:	3b01      	subs	r3, #1
 8011f40:	b2da      	uxtb	r2, r3
 8011f42:	7ebb      	ldrb	r3, [r7, #26]
 8011f44:	4053      	eors	r3, r2
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	f003 0303 	and.w	r3, r3, #3
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d110      	bne.n	8011f72 <nfcipTargetHandleRX+0x4ba>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 8011f50:	4b3d      	ldr	r3, [pc, #244]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f56:	3b01      	subs	r3, #1
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	f003 0303 	and.w	r3, r3, #3
 8011f5e:	b2da      	uxtb	r2, r3
 8011f60:	4b39      	ldr	r3, [pc, #228]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8011f66:	4b38      	ldr	r3, [pc, #224]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f68:	220f      	movs	r2, #15
 8011f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 8011f6e:	2302      	movs	r3, #2
 8011f70:	e1d7      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8011f72:	4b35      	ldr	r3, [pc, #212]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011f76:	4b34      	ldr	r3, [pc, #208]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f78:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8011f7c:	4b32      	ldr	r3, [pc, #200]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f80:	f04f 30ff 	mov.w	r0, #4294967295
 8011f84:	9002      	str	r0, [sp, #8]
 8011f86:	2004      	movs	r0, #4
 8011f88:	9001      	str	r0, [sp, #4]
 8011f8a:	9300      	str	r3, [sp, #0]
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	2100      	movs	r1, #0
 8011f90:	2000      	movs	r0, #0
 8011f92:	f004 feb7 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 8011f96:	2302      	movs	r3, #2
 8011f98:	e1c3      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8011f9a:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 8011f9c:	7ebb      	ldrb	r3, [r7, #26]
 8011f9e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011fa2:	2b80      	cmp	r3, #128	; 0x80
 8011fa4:	f040 80ac 	bne.w	8012100 <nfcipTargetHandleRX+0x648>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 8011fa8:	7ebb      	ldrb	r3, [r7, #26]
 8011faa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011fae:	2b80      	cmp	r3, #128	; 0x80
 8011fb0:	d111      	bne.n	8011fd6 <nfcipTargetHandleRX+0x51e>
 8011fb2:	7ebb      	ldrb	r3, [r7, #26]
 8011fb4:	f003 0310 	and.w	r3, r3, #16
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10c      	bne.n	8011fd6 <nfcipTargetHandleRX+0x51e>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	2080      	movs	r0, #128	; 0x80
 8011fc0:	f7ff fa2e 	bl	8011420 <nfcipDEPControlMsg>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	83fb      	strh	r3, [r7, #30]
 8011fc8:	8bfb      	ldrh	r3, [r7, #30]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d001      	beq.n	8011fd2 <nfcipTargetHandleRX+0x51a>
 8011fce:	8bfb      	ldrh	r3, [r7, #30]
 8011fd0:	e1a7      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            return ERR_BUSY;
 8011fd2:	2302      	movs	r3, #2
 8011fd4:	e1a5      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8011fd6:	7ebb      	ldrb	r3, [r7, #26]
 8011fd8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011fdc:	2b80      	cmp	r3, #128	; 0x80
 8011fde:	d17a      	bne.n	80120d6 <nfcipTargetHandleRX+0x61e>
 8011fe0:	7ebb      	ldrb	r3, [r7, #26]
 8011fe2:	f003 0310 	and.w	r3, r3, #16
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d075      	beq.n	80120d6 <nfcipTargetHandleRX+0x61e>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8011fea:	4b17      	ldr	r3, [pc, #92]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011fec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011ff0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011ff4:	2b80      	cmp	r3, #128	; 0x80
 8011ff6:	f040 8082 	bne.w	80120fe <nfcipTargetHandleRX+0x646>
 8011ffa:	4b13      	ldr	r3, [pc, #76]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8011ffc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012000:	f003 0310 	and.w	r3, r3, #16
 8012004:	2b00      	cmp	r3, #0
 8012006:	d07a      	beq.n	80120fe <nfcipTargetHandleRX+0x646>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 8012008:	4b0f      	ldr	r3, [pc, #60]	; (8012048 <nfcipTargetHandleRX+0x590>)
 801200a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 801200e:	4b0e      	ldr	r3, [pc, #56]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8012010:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8012012:	7f7b      	ldrb	r3, [r7, #29]
 8012014:	1c58      	adds	r0, r3, #1
 8012016:	7778      	strb	r0, [r7, #29]
 8012018:	440b      	add	r3, r1
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	429a      	cmp	r2, r3
 801201e:	d017      	beq.n	8012050 <nfcipTargetHandleRX+0x598>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8012020:	4b09      	ldr	r3, [pc, #36]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8012022:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012024:	4b08      	ldr	r3, [pc, #32]	; (8012048 <nfcipTargetHandleRX+0x590>)
 8012026:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 801202a:	4b07      	ldr	r3, [pc, #28]	; (8012048 <nfcipTargetHandleRX+0x590>)
 801202c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801202e:	f04f 30ff 	mov.w	r0, #4294967295
 8012032:	9002      	str	r0, [sp, #8]
 8012034:	2004      	movs	r0, #4
 8012036:	9001      	str	r0, [sp, #4]
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	460b      	mov	r3, r1
 801203c:	2100      	movs	r1, #0
 801203e:	2000      	movs	r0, #0
 8012040:	f004 fe60 	bl	8016d04 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 8012044:	2302      	movs	r3, #2
 8012046:	e16c      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
 8012048:	200033e8 	.word	0x200033e8
 801204c:	4d542005 	.word	0x4d542005
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 8012050:	4bb6      	ldr	r3, [pc, #728]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012052:	2200      	movs	r2, #0
 8012054:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 8012058:	4bb4      	ldr	r3, [pc, #720]	; (801232c <nfcipTargetHandleRX+0x874>)
 801205a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 801205e:	2b00      	cmp	r3, #0
 8012060:	d005      	beq.n	801206e <nfcipTargetHandleRX+0x5b6>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8012062:	4bb2      	ldr	r3, [pc, #712]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012064:	220f      	movs	r2, #15
 8012066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 801206a:	2302      	movs	r3, #2
 801206c:	e159      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 801206e:	4baf      	ldr	r3, [pc, #700]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012070:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012074:	461a      	mov	r2, r3
 8012076:	4bad      	ldr	r3, [pc, #692]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801207c:	f003 030f 	and.w	r3, r3, #15
 8012080:	330c      	adds	r3, #12
 8012082:	fa02 f303 	lsl.w	r3, r2, r3
 8012086:	4aaa      	ldr	r2, [pc, #680]	; (8012330 <nfcipTargetHandleRX+0x878>)
 8012088:	fba2 2303 	umull	r2, r3, r2, r3
 801208c:	0b1b      	lsrs	r3, r3, #12
 801208e:	b29a      	uxth	r2, r3
 8012090:	4ba6      	ldr	r3, [pc, #664]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012092:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012096:	4619      	mov	r1, r3
 8012098:	4ba4      	ldr	r3, [pc, #656]	; (801232c <nfcipTargetHandleRX+0x874>)
 801209a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801209e:	f003 030f 	and.w	r3, r3, #15
 80120a2:	330c      	adds	r3, #12
 80120a4:	fa01 f303 	lsl.w	r3, r1, r3
 80120a8:	49a1      	ldr	r1, [pc, #644]	; (8012330 <nfcipTargetHandleRX+0x878>)
 80120aa:	fba1 1303 	umull	r1, r3, r1, r3
 80120ae:	0b1b      	lsrs	r3, r3, #12
 80120b0:	3301      	adds	r3, #1
 80120b2:	08db      	lsrs	r3, r3, #3
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	1ad3      	subs	r3, r2, r3
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	3301      	adds	r3, #1
 80120bc:	b29b      	uxth	r3, r3
 80120be:	4618      	mov	r0, r3
 80120c0:	f009 fd9a 	bl	801bbf8 <timerCalculateTimer>
 80120c4:	4603      	mov	r3, r0
 80120c6:	4a99      	ldr	r2, [pc, #612]	; (801232c <nfcipTargetHandleRX+0x874>)
 80120c8:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 80120ca:	4b98      	ldr	r3, [pc, #608]	; (801232c <nfcipTargetHandleRX+0x874>)
 80120cc:	220e      	movs	r2, #14
 80120ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 80120d2:	2302      	movs	r3, #2
 80120d4:	e125      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80120d6:	4b95      	ldr	r3, [pc, #596]	; (801232c <nfcipTargetHandleRX+0x874>)
 80120d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80120da:	4b94      	ldr	r3, [pc, #592]	; (801232c <nfcipTargetHandleRX+0x874>)
 80120dc:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80120e0:	4b92      	ldr	r3, [pc, #584]	; (801232c <nfcipTargetHandleRX+0x874>)
 80120e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120e4:	f04f 30ff 	mov.w	r0, #4294967295
 80120e8:	9002      	str	r0, [sp, #8]
 80120ea:	2004      	movs	r0, #4
 80120ec:	9001      	str	r0, [sp, #4]
 80120ee:	9300      	str	r3, [sp, #0]
 80120f0:	460b      	mov	r3, r1
 80120f2:	2100      	movs	r1, #0
 80120f4:	2000      	movs	r0, #0
 80120f6:	f004 fe05 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 80120fa:	2302      	movs	r3, #2
 80120fc:	e111      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80120fe:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8012100:	7ebb      	ldrb	r3, [r7, #26]
 8012102:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012106:	2b00      	cmp	r3, #0
 8012108:	f040 810a 	bne.w	8012320 <nfcipTargetHandleRX+0x868>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 801210c:	4b87      	ldr	r3, [pc, #540]	; (801232c <nfcipTargetHandleRX+0x874>)
 801210e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012112:	461a      	mov	r2, r3
 8012114:	7ebb      	ldrb	r3, [r7, #26]
 8012116:	f003 0303 	and.w	r3, r3, #3
 801211a:	429a      	cmp	r2, r3
 801211c:	d06e      	beq.n	80121fc <nfcipTargetHandleRX+0x744>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 801211e:	4b83      	ldr	r3, [pc, #524]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012120:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012124:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012128:	2b80      	cmp	r3, #128	; 0x80
 801212a:	d153      	bne.n	80121d4 <nfcipTargetHandleRX+0x71c>
 801212c:	4b7f      	ldr	r3, [pc, #508]	; (801232c <nfcipTargetHandleRX+0x874>)
 801212e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012132:	f003 0310 	and.w	r3, r3, #16
 8012136:	2b00      	cmp	r3, #0
 8012138:	d14c      	bne.n	80121d4 <nfcipTargetHandleRX+0x71c>
 801213a:	4b7c      	ldr	r3, [pc, #496]	; (801232c <nfcipTargetHandleRX+0x874>)
 801213c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012140:	3b01      	subs	r3, #1
 8012142:	b2da      	uxtb	r2, r3
 8012144:	7ebb      	ldrb	r3, [r7, #26]
 8012146:	4053      	eors	r3, r2
 8012148:	b2db      	uxtb	r3, r3
 801214a:	f003 0303 	and.w	r3, r3, #3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d140      	bne.n	80121d4 <nfcipTargetHandleRX+0x71c>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 8012152:	4b76      	ldr	r3, [pc, #472]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012158:	3b01      	subs	r3, #1
 801215a:	b2db      	uxtb	r3, r3
 801215c:	f003 0303 	and.w	r3, r3, #3
 8012160:	b2da      	uxtb	r2, r3
 8012162:	4b72      	ldr	r3, [pc, #456]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 8012168:	7ebb      	ldrb	r3, [r7, #26]
 801216a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d12a      	bne.n	80121c8 <nfcipTargetHandleRX+0x710>
 8012172:	7ebb      	ldrb	r3, [r7, #26]
 8012174:	f003 0310 	and.w	r3, r3, #16
 8012178:	2b00      	cmp	r3, #0
 801217a:	d025      	beq.n	80121c8 <nfcipTargetHandleRX+0x710>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 801217c:	4b6b      	ldr	r3, [pc, #428]	; (801232c <nfcipTargetHandleRX+0x874>)
 801217e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012182:	f003 0303 	and.w	r3, r3, #3
 8012186:	b2db      	uxtb	r3, r3
 8012188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801218c:	b2d8      	uxtb	r0, r3
 801218e:	4b67      	ldr	r3, [pc, #412]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012190:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012192:	7f7b      	ldrb	r3, [r7, #29]
 8012194:	1c59      	adds	r1, r3, #1
 8012196:	7779      	strb	r1, [r7, #29]
 8012198:	4413      	add	r3, r2
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	4619      	mov	r1, r3
 801219e:	f7ff f93f 	bl	8011420 <nfcipDEPControlMsg>
 80121a2:	4603      	mov	r3, r0
 80121a4:	83fb      	strh	r3, [r7, #30]
 80121a6:	8bfb      	ldrh	r3, [r7, #30]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d001      	beq.n	80121b0 <nfcipTargetHandleRX+0x6f8>
 80121ac:	8bfb      	ldrh	r3, [r7, #30]
 80121ae:	e0b8      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80121b0:	4b5e      	ldr	r3, [pc, #376]	; (801232c <nfcipTargetHandleRX+0x874>)
 80121b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80121b6:	3301      	adds	r3, #1
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	f003 0303 	and.w	r3, r3, #3
 80121be:	b2da      	uxtb	r2, r3
 80121c0:	4b5a      	ldr	r3, [pc, #360]	; (801232c <nfcipTargetHandleRX+0x874>)
 80121c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80121c6:	e003      	b.n	80121d0 <nfcipTargetHandleRX+0x718>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80121c8:	4b58      	ldr	r3, [pc, #352]	; (801232c <nfcipTargetHandleRX+0x874>)
 80121ca:	220f      	movs	r2, #15
 80121cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 80121d0:	2302      	movs	r3, #2
 80121d2:	e0a6      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80121d4:	4b55      	ldr	r3, [pc, #340]	; (801232c <nfcipTargetHandleRX+0x874>)
 80121d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80121d8:	4b54      	ldr	r3, [pc, #336]	; (801232c <nfcipTargetHandleRX+0x874>)
 80121da:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80121de:	4b53      	ldr	r3, [pc, #332]	; (801232c <nfcipTargetHandleRX+0x874>)
 80121e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121e2:	f04f 30ff 	mov.w	r0, #4294967295
 80121e6:	9002      	str	r0, [sp, #8]
 80121e8:	2004      	movs	r0, #4
 80121ea:	9001      	str	r0, [sp, #4]
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	460b      	mov	r3, r1
 80121f0:	2100      	movs	r1, #0
 80121f2:	2000      	movs	r0, #0
 80121f4:	f004 fd86 	bl	8016d04 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 80121f8:	2302      	movs	r3, #2
 80121fa:	e092      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 80121fc:	7efb      	ldrb	r3, [r7, #27]
 80121fe:	b29a      	uxth	r2, r3
 8012200:	7f3b      	ldrb	r3, [r7, #28]
 8012202:	b29b      	uxth	r3, r3
 8012204:	1ad3      	subs	r3, r2, r3
 8012206:	b29b      	uxth	r3, r3
 8012208:	3b04      	subs	r3, #4
 801220a:	b29a      	uxth	r2, r3
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 8012210:	f7ff f966 	bl	80114e0 <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8012214:	4b45      	ldr	r3, [pc, #276]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012216:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801221a:	461a      	mov	r2, r3
 801221c:	7f3b      	ldrb	r3, [r7, #28]
 801221e:	3304      	adds	r3, #4
 8012220:	429a      	cmp	r2, r3
 8012222:	d013      	beq.n	801224c <nfcipTargetHandleRX+0x794>
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00f      	beq.n	801224c <nfcipTargetHandleRX+0x794>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 801222c:	4b3f      	ldr	r3, [pc, #252]	; (801232c <nfcipTargetHandleRX+0x874>)
 801222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012230:	4a3e      	ldr	r2, [pc, #248]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012232:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8012236:	1898      	adds	r0, r3, r2
 8012238:	4b3c      	ldr	r3, [pc, #240]	; (801232c <nfcipTargetHandleRX+0x874>)
 801223a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801223c:	7f3b      	ldrb	r3, [r7, #28]
 801223e:	3304      	adds	r3, #4
 8012240:	18d1      	adds	r1, r2, r3
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	461a      	mov	r2, r3
 8012248:	f009 fd40 	bl	801bccc <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 801224c:	7ebb      	ldrb	r3, [r7, #26]
 801224e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d132      	bne.n	80122bc <nfcipTargetHandleRX+0x804>
 8012256:	7ebb      	ldrb	r3, [r7, #26]
 8012258:	f003 0310 	and.w	r3, r3, #16
 801225c:	2b00      	cmp	r3, #0
 801225e:	d02d      	beq.n	80122bc <nfcipTargetHandleRX+0x804>
        {
            gNfcip.isRxChaining = true;
 8012260:	4b32      	ldr	r3, [pc, #200]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012262:	2201      	movs	r2, #1
 8012264:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2201      	movs	r2, #1
 801226c:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 801226e:	4b2f      	ldr	r3, [pc, #188]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012274:	f003 0303 	and.w	r3, r3, #3
 8012278:	b2db      	uxtb	r3, r3
 801227a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801227e:	b2d8      	uxtb	r0, r3
 8012280:	4b2a      	ldr	r3, [pc, #168]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012282:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012284:	7f7b      	ldrb	r3, [r7, #29]
 8012286:	1c59      	adds	r1, r3, #1
 8012288:	7779      	strb	r1, [r7, #29]
 801228a:	4413      	add	r3, r2
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	4619      	mov	r1, r3
 8012290:	f7ff f8c6 	bl	8011420 <nfcipDEPControlMsg>
 8012294:	4603      	mov	r3, r0
 8012296:	83fb      	strh	r3, [r7, #30]
 8012298:	8bfb      	ldrh	r3, [r7, #30]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d001      	beq.n	80122a2 <nfcipTargetHandleRX+0x7ea>
 801229e:	8bfb      	ldrh	r3, [r7, #30]
 80122a0:	e03f      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80122a2:	4b22      	ldr	r3, [pc, #136]	; (801232c <nfcipTargetHandleRX+0x874>)
 80122a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80122a8:	3301      	adds	r3, #1
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	f003 0303 	and.w	r3, r3, #3
 80122b0:	b2da      	uxtb	r2, r3
 80122b2:	4b1e      	ldr	r3, [pc, #120]	; (801232c <nfcipTargetHandleRX+0x874>)
 80122b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 80122b8:	230d      	movs	r3, #13
 80122ba:	e032      	b.n	8012322 <nfcipTargetHandleRX+0x86a>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 80122bc:	4b1b      	ldr	r3, [pc, #108]	; (801232c <nfcipTargetHandleRX+0x874>)
 80122be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122c2:	f003 030f 	and.w	r3, r3, #15
 80122c6:	330c      	adds	r3, #12
 80122c8:	2201      	movs	r2, #1
 80122ca:	fa02 f303 	lsl.w	r3, r2, r3
 80122ce:	4a18      	ldr	r2, [pc, #96]	; (8012330 <nfcipTargetHandleRX+0x878>)
 80122d0:	fba2 2303 	umull	r2, r3, r2, r3
 80122d4:	0b1b      	lsrs	r3, r3, #12
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	4b14      	ldr	r3, [pc, #80]	; (801232c <nfcipTargetHandleRX+0x874>)
 80122da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122de:	f003 030f 	and.w	r3, r3, #15
 80122e2:	330c      	adds	r3, #12
 80122e4:	2101      	movs	r1, #1
 80122e6:	fa01 f303 	lsl.w	r3, r1, r3
 80122ea:	4911      	ldr	r1, [pc, #68]	; (8012330 <nfcipTargetHandleRX+0x878>)
 80122ec:	fba1 1303 	umull	r1, r3, r1, r3
 80122f0:	0b1b      	lsrs	r3, r3, #12
 80122f2:	3301      	adds	r3, #1
 80122f4:	08db      	lsrs	r3, r3, #3
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	3301      	adds	r3, #1
 80122fe:	b29b      	uxth	r3, r3
 8012300:	4618      	mov	r0, r3
 8012302:	f009 fc79 	bl	801bbf8 <timerCalculateTimer>
 8012306:	4603      	mov	r3, r0
 8012308:	4a08      	ldr	r2, [pc, #32]	; (801232c <nfcipTargetHandleRX+0x874>)
 801230a:	67d3      	str	r3, [r2, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 801230c:	4b07      	ldr	r3, [pc, #28]	; (801232c <nfcipTargetHandleRX+0x874>)
 801230e:	220e      	movs	r2, #14
 8012310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 8012314:	4b05      	ldr	r3, [pc, #20]	; (801232c <nfcipTargetHandleRX+0x874>)
 8012316:	2200      	movs	r2, #0
 8012318:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 801231c:	2300      	movs	r3, #0
 801231e:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 8012320:	8bfb      	ldrh	r3, [r7, #30]
}
 8012322:	4618      	mov	r0, r3
 8012324:	3720      	adds	r7, #32
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	200033e8 	.word	0x200033e8
 8012330:	4d542005 	.word	0x4d542005

08012334 <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b088      	sub	sp, #32
 8012338:	af00      	add	r7, sp, #0
 801233a:	60b9      	str	r1, [r7, #8]
 801233c:	607a      	str	r2, [r7, #4]
 801233e:	461a      	mov	r2, r3
 8012340:	4603      	mov	r3, r0
 8012342:	73fb      	strb	r3, [r7, #15]
 8012344:	4613      	mov	r3, r2
 8012346:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 801234e:	2307      	movs	r3, #7
 8012350:	e177      	b.n	8012642 <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8012356:	89bb      	ldrh	r3, [r7, #12]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <nfcipTx+0x2e>
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d102      	bne.n	8012368 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	3305      	adds	r3, #5
 8012366:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 8012368:	2300      	movs	r3, #0
 801236a:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 801236c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012370:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8012376:	4aac      	ldr	r2, [pc, #688]	; (8012628 <nfcipTx+0x2f4>)
 8012378:	7bfb      	ldrb	r3, [r7, #15]
 801237a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 801237e:	4baa      	ldr	r3, [pc, #680]	; (8012628 <nfcipTx+0x2f4>)
 8012380:	22ff      	movs	r2, #255	; 0xff
 8012382:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 8012386:	7bfb      	ldrb	r3, [r7, #15]
 8012388:	2b0b      	cmp	r3, #11
 801238a:	f200 8120 	bhi.w	80125ce <nfcipTx+0x29a>
 801238e:	a201      	add	r2, pc, #4	; (adr r2, 8012394 <nfcipTx+0x60>)
 8012390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012394:	080123c5 	.word	0x080123c5
 8012398:	080123c5 	.word	0x080123c5
 801239c:	080124b9 	.word	0x080124b9
 80123a0:	080124ef 	.word	0x080124ef
 80123a4:	080124ef 	.word	0x080124ef
 80123a8:	080124ef 	.word	0x080124ef
 80123ac:	08012517 	.word	0x08012517
 80123b0:	08012517 	.word	0x08012517
 80123b4:	080124ff 	.word	0x080124ff
 80123b8:	080124ff 	.word	0x080124ff
 80123bc:	080124ff 	.word	0x080124ff
 80123c0:	080124ff 	.word	0x080124ff
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 80123c4:	220a      	movs	r2, #10
 80123c6:	2100      	movs	r1, #0
 80123c8:	6978      	ldr	r0, [r7, #20]
 80123ca:	f009 fc99 	bl	801bd00 <memset>
 80123ce:	4b96      	ldr	r3, [pc, #600]	; (8012628 <nfcipTx+0x2f4>)
 80123d0:	7c5b      	ldrb	r3, [r3, #17]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d006      	beq.n	80123e4 <nfcipTx+0xb0>
 80123d6:	4b94      	ldr	r3, [pc, #592]	; (8012628 <nfcipTx+0x2f4>)
 80123d8:	7c5b      	ldrb	r3, [r3, #17]
 80123da:	461a      	mov	r2, r3
 80123dc:	4993      	ldr	r1, [pc, #588]	; (801262c <nfcipTx+0x2f8>)
 80123de:	6978      	ldr	r0, [r7, #20]
 80123e0:	f009 fc66 	bl	801bcb0 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80123e4:	8bfb      	ldrh	r3, [r7, #30]
 80123e6:	330a      	adds	r3, #10
 80123e8:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 80123ea:	8bfb      	ldrh	r3, [r7, #30]
 80123ec:	1c5a      	adds	r2, r3, #1
 80123ee:	83fa      	strh	r2, [r7, #30]
 80123f0:	461a      	mov	r2, r3
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	4413      	add	r3, r2
 80123f6:	4a8c      	ldr	r2, [pc, #560]	; (8012628 <nfcipTx+0x2f4>)
 80123f8:	78d2      	ldrb	r2, [r2, #3]
 80123fa:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 80123fc:	8bfb      	ldrh	r3, [r7, #30]
 80123fe:	1c5a      	adds	r2, r3, #1
 8012400:	83fa      	strh	r2, [r7, #30]
 8012402:	461a      	mov	r2, r3
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	4413      	add	r3, r2
 8012408:	4a87      	ldr	r2, [pc, #540]	; (8012628 <nfcipTx+0x2f4>)
 801240a:	7952      	ldrb	r2, [r2, #5]
 801240c:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 801240e:	8bfb      	ldrh	r3, [r7, #30]
 8012410:	1c5a      	adds	r2, r3, #1
 8012412:	83fa      	strh	r2, [r7, #30]
 8012414:	461a      	mov	r2, r3
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	4413      	add	r3, r2
 801241a:	4a83      	ldr	r2, [pc, #524]	; (8012628 <nfcipTx+0x2f4>)
 801241c:	7992      	ldrb	r2, [r2, #6]
 801241e:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 8012420:	7bfb      	ldrb	r3, [r7, #15]
 8012422:	2b01      	cmp	r3, #1
 8012424:	d109      	bne.n	801243a <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 8012426:	8bfb      	ldrh	r3, [r7, #30]
 8012428:	1c5a      	adds	r2, r3, #1
 801242a:	83fa      	strh	r2, [r7, #30]
 801242c:	461a      	mov	r2, r3
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	4413      	add	r3, r2
 8012432:	4a7d      	ldr	r2, [pc, #500]	; (8012628 <nfcipTx+0x2f4>)
 8012434:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8012438:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 801243a:	4b7b      	ldr	r3, [pc, #492]	; (8012628 <nfcipTx+0x2f4>)
 801243c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012440:	2b00      	cmp	r3, #0
 8012442:	d023      	beq.n	801248c <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8012444:	4b78      	ldr	r3, [pc, #480]	; (8012628 <nfcipTx+0x2f4>)
 8012446:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801244a:	011b      	lsls	r3, r3, #4
 801244c:	b2db      	uxtb	r3, r3
 801244e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012452:	b2da      	uxtb	r2, r3
 8012454:	8bfb      	ldrh	r3, [r7, #30]
 8012456:	1c59      	adds	r1, r3, #1
 8012458:	83f9      	strh	r1, [r7, #30]
 801245a:	4619      	mov	r1, r3
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	440b      	add	r3, r1
 8012460:	f042 0202 	orr.w	r2, r2, #2
 8012464:	b2d2      	uxtb	r2, r2
 8012466:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 8012468:	8bfb      	ldrh	r3, [r7, #30]
 801246a:	697a      	ldr	r2, [r7, #20]
 801246c:	4413      	add	r3, r2
 801246e:	4a6e      	ldr	r2, [pc, #440]	; (8012628 <nfcipTx+0x2f4>)
 8012470:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8012474:	496e      	ldr	r1, [pc, #440]	; (8012630 <nfcipTx+0x2fc>)
 8012476:	4618      	mov	r0, r3
 8012478:	f009 fc1a 	bl	801bcb0 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 801247c:	4b6a      	ldr	r3, [pc, #424]	; (8012628 <nfcipTx+0x2f4>)
 801247e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012482:	b29a      	uxth	r2, r3
 8012484:	8bfb      	ldrh	r3, [r7, #30]
 8012486:	4413      	add	r3, r2
 8012488:	83fb      	strh	r3, [r7, #30]
 801248a:	e00e      	b.n	80124aa <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 801248c:	4b66      	ldr	r3, [pc, #408]	; (8012628 <nfcipTx+0x2f4>)
 801248e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012492:	011b      	lsls	r3, r3, #4
 8012494:	b2da      	uxtb	r2, r3
 8012496:	8bfb      	ldrh	r3, [r7, #30]
 8012498:	1c59      	adds	r1, r3, #1
 801249a:	83f9      	strh	r1, [r7, #30]
 801249c:	4619      	mov	r1, r3
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	440b      	add	r3, r1
 80124a2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80124a6:	b2d2      	uxtb	r2, r2
 80124a8:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 80124aa:	8bfb      	ldrh	r3, [r7, #30]
 80124ac:	3302      	adds	r3, #2
 80124ae:	2b40      	cmp	r3, #64	; 0x40
 80124b0:	f240 808f 	bls.w	80125d2 <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 80124b4:	2307      	movs	r3, #7
 80124b6:	e0c4      	b.n	8012642 <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 80124b8:	220a      	movs	r2, #10
 80124ba:	2100      	movs	r1, #0
 80124bc:	6978      	ldr	r0, [r7, #20]
 80124be:	f009 fc1f 	bl	801bd00 <memset>
 80124c2:	4b59      	ldr	r3, [pc, #356]	; (8012628 <nfcipTx+0x2f4>)
 80124c4:	7c5b      	ldrb	r3, [r3, #17]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d006      	beq.n	80124d8 <nfcipTx+0x1a4>
 80124ca:	4b57      	ldr	r3, [pc, #348]	; (8012628 <nfcipTx+0x2f4>)
 80124cc:	7c5b      	ldrb	r3, [r3, #17]
 80124ce:	461a      	mov	r2, r3
 80124d0:	4956      	ldr	r1, [pc, #344]	; (801262c <nfcipTx+0x2f8>)
 80124d2:	6978      	ldr	r0, [r7, #20]
 80124d4:	f009 fbec 	bl	801bcb0 <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 80124d8:	8bfb      	ldrh	r3, [r7, #30]
 80124da:	330a      	adds	r3, #10
 80124dc:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	3b01      	subs	r3, #1
 80124e2:	61bb      	str	r3, [r7, #24]
 80124e4:	4b50      	ldr	r3, [pc, #320]	; (8012628 <nfcipTx+0x2f4>)
 80124e6:	78da      	ldrb	r2, [r3, #3]
 80124e8:	69bb      	ldr	r3, [r7, #24]
 80124ea:	701a      	strb	r2, [r3, #0]
            break;
 80124ec:	e076      	b.n	80125dc <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	3b01      	subs	r3, #1
 80124f2:	61bb      	str	r3, [r7, #24]
 80124f4:	4b4c      	ldr	r3, [pc, #304]	; (8012628 <nfcipTx+0x2f4>)
 80124f6:	78da      	ldrb	r2, [r3, #3]
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	701a      	strb	r2, [r3, #0]
            break;
 80124fc:	e06e      	b.n	80125dc <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 80124fe:	4b4a      	ldr	r3, [pc, #296]	; (8012628 <nfcipTx+0x2f4>)
 8012500:	78db      	ldrb	r3, [r3, #3]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d067      	beq.n	80125d6 <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	3b01      	subs	r3, #1
 801250a:	61bb      	str	r3, [r7, #24]
 801250c:	4b46      	ldr	r3, [pc, #280]	; (8012628 <nfcipTx+0x2f4>)
 801250e:	78da      	ldrb	r2, [r3, #3]
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012514:	e05f      	b.n	80125d6 <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8012516:	4b44      	ldr	r3, [pc, #272]	; (8012628 <nfcipTx+0x2f4>)
 8012518:	78db      	ldrb	r3, [r3, #3]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d003      	beq.n	8012526 <nfcipTx+0x1f2>
 801251e:	7cfb      	ldrb	r3, [r7, #19]
 8012520:	f043 0304 	orr.w	r3, r3, #4
 8012524:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 8012526:	4b40      	ldr	r3, [pc, #256]	; (8012628 <nfcipTx+0x2f4>)
 8012528:	791b      	ldrb	r3, [r3, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d003      	beq.n	8012536 <nfcipTx+0x202>
 801252e:	7cfb      	ldrb	r3, [r7, #19]
 8012530:	f043 0308 	orr.w	r3, r3, #8
 8012534:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8012536:	4b3c      	ldr	r3, [pc, #240]	; (8012628 <nfcipTx+0x2f4>)
 8012538:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801253c:	2b00      	cmp	r3, #0
 801253e:	d008      	beq.n	8012552 <nfcipTx+0x21e>
 8012540:	7cfb      	ldrb	r3, [r7, #19]
 8012542:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d103      	bne.n	8012552 <nfcipTx+0x21e>
 801254a:	7cfb      	ldrb	r3, [r7, #19]
 801254c:	f043 0310 	orr.w	r3, r3, #16
 8012550:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8012552:	4a35      	ldr	r2, [pc, #212]	; (8012628 <nfcipTx+0x2f4>)
 8012554:	7cfb      	ldrb	r3, [r7, #19]
 8012556:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 801255a:	7cfb      	ldrb	r3, [r7, #19]
 801255c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012560:	2b80      	cmp	r3, #128	; 0x80
 8012562:	d104      	bne.n	801256e <nfcipTx+0x23a>
 8012564:	7cfb      	ldrb	r3, [r7, #19]
 8012566:	f003 0310 	and.w	r3, r3, #16
 801256a:	2b00      	cmp	r3, #0
 801256c:	d003      	beq.n	8012576 <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 801256e:	4a2e      	ldr	r2, [pc, #184]	; (8012628 <nfcipTx+0x2f4>)
 8012570:	7cfb      	ldrb	r3, [r7, #19]
 8012572:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 8012576:	4b2c      	ldr	r3, [pc, #176]	; (8012628 <nfcipTx+0x2f4>)
 8012578:	791b      	ldrb	r3, [r3, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d006      	beq.n	801258c <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	3b01      	subs	r3, #1
 8012582:	61bb      	str	r3, [r7, #24]
 8012584:	4b28      	ldr	r3, [pc, #160]	; (8012628 <nfcipTx+0x2f4>)
 8012586:	791a      	ldrb	r2, [r3, #4]
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 801258c:	4b26      	ldr	r3, [pc, #152]	; (8012628 <nfcipTx+0x2f4>)
 801258e:	78db      	ldrb	r3, [r3, #3]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d006      	beq.n	80125a2 <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8012594:	69bb      	ldr	r3, [r7, #24]
 8012596:	3b01      	subs	r3, #1
 8012598:	61bb      	str	r3, [r7, #24]
 801259a:	4b23      	ldr	r3, [pc, #140]	; (8012628 <nfcipTx+0x2f4>)
 801259c:	78da      	ldrb	r2, [r3, #3]
 801259e:	69bb      	ldr	r3, [r7, #24]
 80125a0:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	3b01      	subs	r3, #1
 80125a6:	61bb      	str	r3, [r7, #24]
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	7cfa      	ldrb	r2, [r7, #19]
 80125ac:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 80125ae:	89bb      	ldrh	r3, [r7, #12]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d112      	bne.n	80125da <nfcipTx+0x2a6>
 80125b4:	4b1c      	ldr	r3, [pc, #112]	; (8012628 <nfcipTx+0x2f4>)
 80125b6:	789b      	ldrb	r3, [r3, #2]
 80125b8:	f003 0304 	and.w	r3, r3, #4
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00c      	beq.n	80125da <nfcipTx+0x2a6>
 80125c0:	7cfb      	ldrb	r3, [r7, #19]
 80125c2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d107      	bne.n	80125da <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 80125ca:	2307      	movs	r3, #7
 80125cc:	e039      	b.n	8012642 <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 80125ce:	2307      	movs	r3, #7
 80125d0:	e037      	b.n	8012642 <nfcipTx+0x30e>
            break;
 80125d2:	bf00      	nop
 80125d4:	e002      	b.n	80125dc <nfcipTx+0x2a8>
            break;
 80125d6:	bf00      	nop
 80125d8:	e000      	b.n	80125dc <nfcipTx+0x2a8>
            break;
 80125da:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	3b01      	subs	r3, #1
 80125e0:	61bb      	str	r3, [r7, #24]
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	7bfa      	ldrb	r2, [r7, #15]
 80125e6:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 80125e8:	7bfb      	ldrb	r3, [r7, #15]
 80125ea:	f003 0301 	and.w	r3, r3, #1
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d101      	bne.n	80125f8 <nfcipTx+0x2c4>
 80125f4:	22d4      	movs	r2, #212	; 0xd4
 80125f6:	e000      	b.n	80125fa <nfcipTx+0x2c6>
 80125f8:	22d5      	movs	r2, #213	; 0xd5
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	3b01      	subs	r3, #1
 80125fe:	61bb      	str	r3, [r7, #24]
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8012604:	697a      	ldr	r2, [r7, #20]
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	1ad3      	subs	r3, r2, r3
 801260a:	b29a      	uxth	r2, r3
 801260c:	89bb      	ldrh	r3, [r7, #12]
 801260e:	4413      	add	r3, r2
 8012610:	b29a      	uxth	r2, r3
 8012612:	8bfb      	ldrh	r3, [r7, #30]
 8012614:	4413      	add	r3, r2
 8012616:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8012618:	4b03      	ldr	r3, [pc, #12]	; (8012628 <nfcipTx+0x2f4>)
 801261a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801261e:	8bfa      	ldrh	r2, [r7, #30]
 8012620:	429a      	cmp	r2, r3
 8012622:	d907      	bls.n	8012634 <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 8012624:	2318      	movs	r3, #24
 8012626:	e00c      	b.n	8012642 <nfcipTx+0x30e>
 8012628:	200033e8 	.word	0x200033e8
 801262c:	200033ef 	.word	0x200033ef
 8012630:	200033fa 	.word	0x200033fa
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8012634:	8bfb      	ldrh	r3, [r7, #30]
 8012636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012638:	4619      	mov	r1, r3
 801263a:	69b8      	ldr	r0, [r7, #24]
 801263c:	f000 fec0 	bl	80133c0 <nfcipDataTx>
 8012640:	4603      	mov	r3, r0
}
 8012642:	4618      	mov	r0, r3
 8012644:	3720      	adds	r7, #32
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop

0801264c <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d034      	beq.n	80126c4 <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 801265a:	2250      	movs	r2, #80	; 0x50
 801265c:	6879      	ldr	r1, [r7, #4]
 801265e:	481b      	ldr	r0, [pc, #108]	; (80126cc <nfcipConfig+0x80>)
 8012660:	f009 fb26 	bl	801bcb0 <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8012664:	4b19      	ldr	r3, [pc, #100]	; (80126cc <nfcipConfig+0x80>)
 8012666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801266a:	2b0e      	cmp	r3, #14
 801266c:	bf28      	it	cs
 801266e:	230e      	movcs	r3, #14
 8012670:	b2da      	uxtb	r2, r3
 8012672:	4b16      	ldr	r3, [pc, #88]	; (80126cc <nfcipConfig+0x80>)
 8012674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8012678:	4b14      	ldr	r3, [pc, #80]	; (80126cc <nfcipConfig+0x80>)
 801267a:	78db      	ldrb	r3, [r3, #3]
 801267c:	2b0e      	cmp	r3, #14
 801267e:	bf28      	it	cs
 8012680:	230e      	movcs	r3, #14
 8012682:	b2da      	uxtb	r2, r3
 8012684:	4b11      	ldr	r3, [pc, #68]	; (80126cc <nfcipConfig+0x80>)
 8012686:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8012688:	4b10      	ldr	r3, [pc, #64]	; (80126cc <nfcipConfig+0x80>)
 801268a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801268e:	3301      	adds	r3, #1
 8012690:	019b      	lsls	r3, r3, #6
 8012692:	2bfd      	cmp	r3, #253	; 0xfd
 8012694:	d807      	bhi.n	80126a6 <nfcipConfig+0x5a>
 8012696:	4b0d      	ldr	r3, [pc, #52]	; (80126cc <nfcipConfig+0x80>)
 8012698:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801269c:	3301      	adds	r3, #1
 801269e:	b29b      	uxth	r3, r3
 80126a0:	019b      	lsls	r3, r3, #6
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	e000      	b.n	80126a8 <nfcipConfig+0x5c>
 80126a6:	23fe      	movs	r3, #254	; 0xfe
 80126a8:	4a08      	ldr	r2, [pc, #32]	; (80126cc <nfcipConfig+0x80>)
 80126aa:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 80126ae:	4b07      	ldr	r3, [pc, #28]	; (80126cc <nfcipConfig+0x80>)
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d101      	bne.n	80126ba <nfcipConfig+0x6e>
 80126b6:	220a      	movs	r2, #10
 80126b8:	e000      	b.n	80126bc <nfcipConfig+0x70>
 80126ba:	2201      	movs	r2, #1
 80126bc:	4b03      	ldr	r3, [pc, #12]	; (80126cc <nfcipConfig+0x80>)
 80126be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80126c2:	e000      	b.n	80126c6 <nfcipConfig+0x7a>
        return;
 80126c4:	bf00      	nop
}
 80126c6:	3708      	adds	r7, #8
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	200033e8 	.word	0x200033e8

080126d0 <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 80126d0:	b5b0      	push	{r4, r5, r7, lr}
 80126d2:	b086      	sub	sp, #24
 80126d4:	af02      	add	r7, sp, #8
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 80126da:	2314      	movs	r3, #20
 80126dc:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 80126de:	4b93      	ldr	r3, [pc, #588]	; (801292c <nfcipRun+0x25c>)
 80126e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80126e4:	2b10      	cmp	r3, #16
 80126e6:	f200 8117 	bhi.w	8012918 <nfcipRun+0x248>
 80126ea:	a201      	add	r2, pc, #4	; (adr r2, 80126f0 <nfcipRun+0x20>)
 80126ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126f0:	08012735 	.word	0x08012735
 80126f4:	08012919 	.word	0x08012919
 80126f8:	08012919 	.word	0x08012919
 80126fc:	08012919 	.word	0x08012919
 8012700:	08012735 	.word	0x08012735
 8012704:	08012739 	.word	0x08012739
 8012708:	08012795 	.word	0x08012795
 801270c:	08012919 	.word	0x08012919
 8012710:	08012919 	.word	0x08012919
 8012714:	08012919 	.word	0x08012919
 8012718:	08012919 	.word	0x08012919
 801271c:	08012919 	.word	0x08012919
 8012720:	08012735 	.word	0x08012735
 8012724:	080128df 	.word	0x080128df
 8012728:	080127bd 	.word	0x080127bd
 801272c:	08012867 	.word	0x08012867
 8012730:	08012735 	.word	0x08012735
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 8012734:	2300      	movs	r3, #0
 8012736:	e0f5      	b.n	8012924 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 8012738:	4b7c      	ldr	r3, [pc, #496]	; (801292c <nfcipRun+0x25c>)
 801273a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801273c:	4b7b      	ldr	r3, [pc, #492]	; (801292c <nfcipRun+0x25c>)
 801273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012740:	4a7a      	ldr	r2, [pc, #488]	; (801292c <nfcipRun+0x25c>)
 8012742:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8012746:	189c      	adds	r4, r3, r2
 8012748:	4b78      	ldr	r3, [pc, #480]	; (801292c <nfcipRun+0x25c>)
 801274a:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 801274e:	4b77      	ldr	r3, [pc, #476]	; (801292c <nfcipRun+0x25c>)
 8012750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012754:	f003 0303 	and.w	r3, r3, #3
 8012758:	b2db      	uxtb	r3, r3
 801275a:	4a74      	ldr	r2, [pc, #464]	; (801292c <nfcipRun+0x25c>)
 801275c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 801275e:	4a73      	ldr	r2, [pc, #460]	; (801292c <nfcipRun+0x25c>)
 8012760:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8012762:	440a      	add	r2, r1
 8012764:	9201      	str	r2, [sp, #4]
 8012766:	9300      	str	r3, [sp, #0]
 8012768:	462b      	mov	r3, r5
 801276a:	4622      	mov	r2, r4
 801276c:	4601      	mov	r1, r0
 801276e:	2006      	movs	r0, #6
 8012770:	f7ff fde0 	bl	8012334 <nfcipTx>
 8012774:	4603      	mov	r3, r0
 8012776:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 8012778:	89fb      	ldrh	r3, [r7, #14]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d104      	bne.n	8012788 <nfcipRun+0xb8>
            {
                case ERR_NONE:
                    gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 801277e:	4b6b      	ldr	r3, [pc, #428]	; (801292c <nfcipRun+0x25c>)
 8012780:	2206      	movs	r2, #6
 8012782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8012786:	e005      	b.n	8012794 <nfcipRun+0xc4>
                
                case ERR_PARAM:
                default:
                    gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 8012788:	4b68      	ldr	r3, [pc, #416]	; (801292c <nfcipRun+0x25c>)
 801278a:	2204      	movs	r2, #4
 801278c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ret;
 8012790:	89fb      	ldrh	r3, [r7, #14]
 8012792:	e0c7      	b.n	8012924 <nfcipRun+0x254>
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 8012794:	2000      	movs	r0, #0
 8012796:	f000 fe33 	bl	8013400 <nfcipDataRx>
 801279a:	4603      	mov	r3, r0
 801279c:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 801279e:	89fb      	ldrh	r3, [r7, #14]
 80127a0:	2b02      	cmp	r3, #2
 80127a2:	f000 80bb 	beq.w	801291c <nfcipRun+0x24c>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 80127a6:	4b61      	ldr	r3, [pc, #388]	; (801292c <nfcipRun+0x25c>)
 80127a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127aa:	8819      	ldrh	r1, [r3, #0]
 80127ac:	89f8      	ldrh	r0, [r7, #14]
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	f7fe feb1 	bl	8011518 <nfcipInitiatorHandleDEP>
 80127b6:	4603      	mov	r3, r0
 80127b8:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 80127ba:	e0af      	b.n	801291c <nfcipRun+0x24c>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 80127bc:	4b5b      	ldr	r3, [pc, #364]	; (801292c <nfcipRun+0x25c>)
 80127be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127c0:	4618      	mov	r0, r3
 80127c2:	f009 fa27 	bl	801bc14 <timerIsExpired>
 80127c6:	4603      	mov	r3, r0
 80127c8:	f083 0301 	eor.w	r3, r3, #1
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d001      	beq.n	80127d6 <nfcipRun+0x106>
            {
                return ERR_BUSY;
 80127d2:	2302      	movs	r3, #2
 80127d4:	e0a6      	b.n	8012924 <nfcipRun+0x254>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 80127d6:	4b55      	ldr	r3, [pc, #340]	; (801292c <nfcipRun+0x25c>)
 80127d8:	789b      	ldrb	r3, [r3, #2]
 80127da:	f003 0301 	and.w	r3, r3, #1
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d001      	beq.n	80127e6 <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 80127e2:	2304      	movs	r3, #4
 80127e4:	e09e      	b.n	8012924 <nfcipRun+0x254>
            } 

            if( gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 80127e6:	4b51      	ldr	r3, [pc, #324]	; (801292c <nfcipRun+0x25c>)
 80127e8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80127ec:	1c5a      	adds	r2, r3, #1
 80127ee:	b2d1      	uxtb	r1, r2
 80127f0:	4a4e      	ldr	r2, [pc, #312]	; (801292c <nfcipRun+0x25c>)
 80127f2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 80127f6:	2b0a      	cmp	r3, #10
 80127f8:	d901      	bls.n	80127fe <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 80127fa:	230b      	movs	r3, #11
 80127fc:	e092      	b.n	8012924 <nfcipRun+0x254>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 80127fe:	4b4b      	ldr	r3, [pc, #300]	; (801292c <nfcipRun+0x25c>)
 8012800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012804:	f003 030f 	and.w	r3, r3, #15
 8012808:	330c      	adds	r3, #12
 801280a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801280e:	fa22 f303 	lsr.w	r3, r2, r3
 8012812:	2b3a      	cmp	r3, #58	; 0x3a
 8012814:	d80b      	bhi.n	801282e <nfcipRun+0x15e>
 8012816:	4b45      	ldr	r3, [pc, #276]	; (801292c <nfcipRun+0x25c>)
 8012818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801281c:	f003 030f 	and.w	r3, r3, #15
 8012820:	330c      	adds	r3, #12
 8012822:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012826:	fa22 f303 	lsr.w	r3, r2, r3
 801282a:	b2db      	uxtb	r3, r3
 801282c:	e000      	b.n	8012830 <nfcipRun+0x160>
 801282e:	233b      	movs	r3, #59	; 0x3b
 8012830:	4a3e      	ldr	r2, [pc, #248]	; (801292c <nfcipRun+0x25c>)
 8012832:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 8012836:	4b3d      	ldr	r3, [pc, #244]	; (801292c <nfcipRun+0x25c>)
 8012838:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801283c:	4619      	mov	r1, r3
 801283e:	2090      	movs	r0, #144	; 0x90
 8012840:	f7fe fdee 	bl	8011420 <nfcipDEPControlMsg>
 8012844:	4603      	mov	r3, r0
 8012846:	81fb      	strh	r3, [r7, #14]
 8012848:	89fb      	ldrh	r3, [r7, #14]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d001      	beq.n	8012852 <nfcipRun+0x182>
 801284e:	89fb      	ldrh	r3, [r7, #14]
 8012850:	e068      	b.n	8012924 <nfcipRun+0x254>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 8012852:	4b36      	ldr	r3, [pc, #216]	; (801292c <nfcipRun+0x25c>)
 8012854:	2201      	movs	r2, #1
 8012856:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 801285a:	4b34      	ldr	r3, [pc, #208]	; (801292c <nfcipRun+0x25c>)
 801285c:	220d      	movs	r2, #13
 801285e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 8012862:	2302      	movs	r3, #2
 8012864:	e05e      	b.n	8012924 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 8012866:	4b31      	ldr	r3, [pc, #196]	; (801292c <nfcipRun+0x25c>)
 8012868:	6e19      	ldr	r1, [r3, #96]	; 0x60
 801286a:	4b30      	ldr	r3, [pc, #192]	; (801292c <nfcipRun+0x25c>)
 801286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801286e:	4a2f      	ldr	r2, [pc, #188]	; (801292c <nfcipRun+0x25c>)
 8012870:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8012874:	441a      	add	r2, r3
 8012876:	4b2d      	ldr	r3, [pc, #180]	; (801292c <nfcipRun+0x25c>)
 8012878:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 801287c:	4b2b      	ldr	r3, [pc, #172]	; (801292c <nfcipRun+0x25c>)
 801287e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012882:	f003 0303 	and.w	r3, r3, #3
 8012886:	b2db      	uxtb	r3, r3
 8012888:	f04f 34ff 	mov.w	r4, #4294967295
 801288c:	9401      	str	r4, [sp, #4]
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	4603      	mov	r3, r0
 8012892:	2007      	movs	r0, #7
 8012894:	f7ff fd4e 	bl	8012334 <nfcipTx>
 8012898:	4603      	mov	r3, r0
 801289a:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 801289c:	4b23      	ldr	r3, [pc, #140]	; (801292c <nfcipRun+0x25c>)
 801289e:	2200      	movs	r2, #0
 80128a0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 80128a4:	4b21      	ldr	r3, [pc, #132]	; (801292c <nfcipRun+0x25c>)
 80128a6:	2200      	movs	r2, #0
 80128a8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80128ac:	4b1f      	ldr	r3, [pc, #124]	; (801292c <nfcipRun+0x25c>)
 80128ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80128b2:	3301      	adds	r3, #1
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	f003 0303 	and.w	r3, r3, #3
 80128ba:	b2da      	uxtb	r2, r3
 80128bc:	4b1b      	ldr	r3, [pc, #108]	; (801292c <nfcipRun+0x25c>)
 80128be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 80128c2:	89fb      	ldrh	r3, [r7, #14]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d104      	bne.n	80128d2 <nfcipRun+0x202>
            {
                case ERR_NONE:
                    gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 80128c8:	4b18      	ldr	r3, [pc, #96]	; (801292c <nfcipRun+0x25c>)
 80128ca:	220d      	movs	r2, #13
 80128cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 80128d0:	e005      	b.n	80128de <nfcipRun+0x20e>
                
                case ERR_PARAM:
                default:
                    gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 80128d2:	4b16      	ldr	r3, [pc, #88]	; (801292c <nfcipRun+0x25c>)
 80128d4:	220c      	movs	r2, #12
 80128d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ret;
 80128da:	89fb      	ldrh	r3, [r7, #14]
 80128dc:	e022      	b.n	8012924 <nfcipRun+0x254>
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 80128de:	4b13      	ldr	r3, [pc, #76]	; (801292c <nfcipRun+0x25c>)
 80128e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d006      	beq.n	80128f6 <nfcipRun+0x226>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 80128e8:	4b10      	ldr	r3, [pc, #64]	; (801292c <nfcipRun+0x25c>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 80128f0:	2300      	movs	r3, #0
 80128f2:	81fb      	strh	r3, [r7, #14]
 80128f4:	e004      	b.n	8012900 <nfcipRun+0x230>
            }
            else
            {
                ret = nfcipDataRx( false );
 80128f6:	2000      	movs	r0, #0
 80128f8:	f000 fd82 	bl	8013400 <nfcipDataRx>
 80128fc:	4603      	mov	r3, r0
 80128fe:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 8012900:	89fb      	ldrh	r3, [r7, #14]
 8012902:	2b02      	cmp	r3, #2
 8012904:	d00c      	beq.n	8012920 <nfcipRun+0x250>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 8012906:	89fb      	ldrh	r3, [r7, #14]
 8012908:	683a      	ldr	r2, [r7, #0]
 801290a:	6879      	ldr	r1, [r7, #4]
 801290c:	4618      	mov	r0, r3
 801290e:	f7ff f8d3 	bl	8011ab8 <nfcipTargetHandleRX>
 8012912:	4603      	mov	r3, r0
 8012914:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 8012916:	e003      	b.n	8012920 <nfcipRun+0x250>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8012918:	bf00      	nop
 801291a:	e002      	b.n	8012922 <nfcipRun+0x252>
            break;
 801291c:	bf00      	nop
 801291e:	e000      	b.n	8012922 <nfcipRun+0x252>
            break;
 8012920:	bf00      	nop
    }
    return ret;
 8012922:	89fb      	ldrh	r3, [r7, #14]
}
 8012924:	4618      	mov	r0, r3
 8012926:	3710      	adds	r7, #16
 8012928:	46bd      	mov	sp, r7
 801292a:	bdb0      	pop	{r4, r5, r7, pc}
 801292c:	200033e8 	.word	0x200033e8

08012930 <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 8012934:	4b32      	ldr	r3, [pc, #200]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012936:	2200      	movs	r2, #0
 8012938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 801293c:	4b30      	ldr	r3, [pc, #192]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 801293e:	2200      	movs	r2, #0
 8012940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 8012944:	4b2e      	ldr	r3, [pc, #184]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012946:	2200      	movs	r2, #0
 8012948:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 801294c:	4b2c      	ldr	r3, [pc, #176]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 801294e:	2200      	movs	r2, #0
 8012950:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 8012954:	4b2a      	ldr	r3, [pc, #168]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012956:	2200      	movs	r2, #0
 8012958:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 801295c:	4b28      	ldr	r3, [pc, #160]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 801295e:	2202      	movs	r2, #2
 8012960:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 8012962:	4b27      	ldr	r3, [pc, #156]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012964:	2200      	movs	r2, #0
 8012966:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 8012968:	4b25      	ldr	r3, [pc, #148]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 801296a:	2200      	movs	r2, #0
 801296c:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 801296e:	4b24      	ldr	r3, [pc, #144]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012970:	2200      	movs	r2, #0
 8012972:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8012974:	4b22      	ldr	r3, [pc, #136]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012976:	2200      	movs	r2, #0
 8012978:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 801297a:	4b21      	ldr	r3, [pc, #132]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 801297c:	2203      	movs	r2, #3
 801297e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8012982:	4b1f      	ldr	r3, [pc, #124]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012984:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012988:	3301      	adds	r3, #1
 801298a:	019b      	lsls	r3, r3, #6
 801298c:	2bfd      	cmp	r3, #253	; 0xfd
 801298e:	d807      	bhi.n	80129a0 <rfalNfcDepInitialize+0x70>
 8012990:	4b1b      	ldr	r3, [pc, #108]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 8012992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012996:	3301      	adds	r3, #1
 8012998:	b29b      	uxth	r3, r3
 801299a:	019b      	lsls	r3, r3, #6
 801299c:	b29b      	uxth	r3, r3
 801299e:	e000      	b.n	80129a2 <rfalNfcDepInitialize+0x72>
 80129a0:	23fe      	movs	r3, #254	; 0xfe
 80129a2:	4a17      	ldr	r2, [pc, #92]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129a4:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 80129a8:	4b15      	ldr	r3, [pc, #84]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 80129b0:	4b13      	ldr	r3, [pc, #76]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80129b6:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 80129b8:	4b11      	ldr	r3, [pc, #68]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80129be:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 80129c0:	4b0f      	ldr	r3, [pc, #60]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    
    /* Destroy any ongoing RTOX timer*/
    nfcipTimerDestroy( gNfcip.RTOXTimer );
    gNfcip.RTOXTimer = 0U;
 80129c8:	4b0d      	ldr	r3, [pc, #52]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129ca:	2200      	movs	r2, #0
 80129cc:	67da      	str	r2, [r3, #124]	; 0x7c
    
    gNfcip.PDUTxPos = 0;
 80129ce:	4b0c      	ldr	r3, [pc, #48]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129d0:	2200      	movs	r2, #0
 80129d2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
    gNfcip.PDURxPos = 0;
 80129d6:	4b0a      	ldr	r3, [pc, #40]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129d8:	2200      	movs	r2, #0
 80129da:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    gNfcip.PDUParam.rxLen = NULL;
 80129de:	4b08      	ldr	r3, [pc, #32]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129e0:	2200      	movs	r2, #0
 80129e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    gNfcip.PDUParam.rxBuf = NULL;
 80129e6:	4b06      	ldr	r3, [pc, #24]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    gNfcip.PDUParam.txBuf = NULL;
 80129ee:	4b04      	ldr	r3, [pc, #16]	; (8012a00 <rfalNfcDepInitialize+0xd0>)
 80129f0:	2200      	movs	r2, #0
 80129f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    

    nfcipClearCounters();
 80129f6:	f7fe fd73 	bl	80114e0 <nfcipClearCounters>
}
 80129fa:	bf00      	nop
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	200033e8 	.word	0x200033e8

08012a04 <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( const rfalNfcDepDEPParams *DEPParams )
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	7ada      	ldrb	r2, [r3, #11]
 8012a10:	4b2f      	ldr	r3, [pc, #188]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a12:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	685b      	ldr	r3, [r3, #4]
 8012a1a:	4a2d      	ldr	r2, [pc, #180]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a1c:	6613      	str	r3, [r2, #96]	; 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	4a2b      	ldr	r2, [pc, #172]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a24:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	891a      	ldrh	r2, [r3, #8]
 8012a2a:	4b29      	ldr	r3, [pc, #164]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	8a1a      	ldrh	r2, [r3, #16]
 8012a34:	4b26      	ldr	r3, [pc, #152]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	7a9a      	ldrb	r2, [r3, #10]
 8012a3e:	4b24      	ldr	r3, [pc, #144]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	7c9a      	ldrb	r2, [r3, #18]
 8012a48:	4b21      	ldr	r3, [pc, #132]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a4a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	2bff      	cmp	r3, #255	; 0xff
 8012a54:	d007      	beq.n	8012a66 <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	2b0e      	cmp	r3, #14
 8012a5c:	bf28      	it	cs
 8012a5e:	230e      	movcs	r3, #14
 8012a60:	b2da      	uxtb	r2, r3
 8012a62:	4b1b      	ldr	r3, [pc, #108]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a64:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	695b      	ldr	r3, [r3, #20]
 8012a6a:	4a19      	ldr	r2, [pc, #100]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a6c:	6493      	str	r3, [r2, #72]	; 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	699b      	ldr	r3, [r3, #24]
 8012a72:	4a17      	ldr	r2, [pc, #92]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a74:	64d3      	str	r3, [r2, #76]	; 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	8b9a      	ldrh	r2, [r3, #28]
 8012a7a:	4b15      	ldr	r3, [pc, #84]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 8012a80:	4b13      	ldr	r3, [pc, #76]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d119      	bne.n	8012abc <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	891b      	ldrh	r3, [r3, #8]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d010      	beq.n	8012ab2 <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 8012a90:	4b0f      	ldr	r3, [pc, #60]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012a92:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8012a96:	f083 0301 	eor.w	r3, r3, #1
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d004      	beq.n	8012aaa <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8012aa0:	4b0b      	ldr	r3, [pc, #44]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012aa2:	220f      	movs	r2, #15
 8012aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return;
 8012aa8:	e00e      	b.n	8012ac8 <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 8012aaa:	4b09      	ldr	r3, [pc, #36]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012aac:	2201      	movs	r2, #1
 8012aae:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8012ab2:	4b07      	ldr	r3, [pc, #28]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012ab4:	220d      	movs	r2, #13
 8012ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return;
 8012aba:	e005      	b.n	8012ac8 <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 8012abc:	f7fe fd10 	bl	80114e0 <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8012ac0:	4b03      	ldr	r3, [pc, #12]	; (8012ad0 <nfcipSetDEPParams+0xcc>)
 8012ac2:	2205      	movs	r2, #5
 8012ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8012ac8:	3708      	adds	r7, #8
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	200033e8 	.word	0x200033e8

08012ad4 <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b086      	sub	sp, #24
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	460b      	mov	r3, r1
 8012ade:	607a      	str	r2, [r7, #4]
 8012ae0:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 8012ae6:	897b      	ldrh	r3, [r7, #10]
 8012ae8:	2b0f      	cmp	r3, #15
 8012aea:	d902      	bls.n	8012af2 <rfalNfcDepIsAtrReq+0x1e>
 8012aec:	897b      	ldrh	r3, [r7, #10]
 8012aee:	2b40      	cmp	r3, #64	; 0x40
 8012af0:	d901      	bls.n	8012af6 <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 8012af2:	2300      	movs	r3, #0
 8012af4:	e020      	b.n	8012b38 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 8012af6:	7dfb      	ldrb	r3, [r7, #23]
 8012af8:	1c5a      	adds	r2, r3, #1
 8012afa:	75fa      	strb	r2, [r7, #23]
 8012afc:	461a      	mov	r2, r3
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	4413      	add	r3, r2
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	2bd4      	cmp	r3, #212	; 0xd4
 8012b06:	d001      	beq.n	8012b0c <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	e015      	b.n	8012b38 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 8012b0c:	7dfb      	ldrb	r3, [r7, #23]
 8012b0e:	1c5a      	adds	r2, r3, #1
 8012b10:	75fa      	strb	r2, [r7, #23]
 8012b12:	461a      	mov	r2, r3
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	4413      	add	r3, r2
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d001      	beq.n	8012b22 <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	e00a      	b.n	8012b38 <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d006      	beq.n	8012b36 <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	3302      	adds	r3, #2
 8012b2c:	220a      	movs	r2, #10
 8012b2e:	4619      	mov	r1, r3
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f009 f8bd 	bl	801bcb0 <memcpy>
    }
     
    return true;
 8012b36:	2301      	movs	r3, #1
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3718      	adds	r7, #24
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b088      	sub	sp, #32
 8012b44:	af02      	add	r7, sp, #8
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 8012b4a:	4b7d      	ldr	r3, [pc, #500]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012b4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012b50:	2b0b      	cmp	r3, #11
 8012b52:	d001      	beq.n	8012b58 <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 8012b54:	2321      	movs	r3, #33	; 0x21
 8012b56:	e0ee      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d101      	bne.n	8012b62 <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 8012b5e:	2307      	movs	r3, #7
 8012b60:	e0e9      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 8012b62:	2000      	movs	r0, #0
 8012b64:	f000 fc4c 	bl	8013400 <nfcipDataRx>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 8012b6c:	8afb      	ldrh	r3, [r7, #22]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 8012b72:	8afb      	ldrh	r3, [r7, #22]
 8012b74:	e0df      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
    }
    
    msgIt   = 0;
 8012b76:	2300      	movs	r3, #0
 8012b78:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	22c0      	movs	r2, #192	; 0xc0
 8012b7e:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 8012b80:	7d7b      	ldrb	r3, [r7, #21]
 8012b82:	3301      	adds	r3, #1
 8012b84:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 8012b86:	4b6e      	ldr	r3, [pc, #440]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012b88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012b8a:	7d7b      	ldrb	r3, [r7, #21]
 8012b8c:	1c59      	adds	r1, r3, #1
 8012b8e:	7579      	strb	r1, [r7, #21]
 8012b90:	4413      	add	r3, r2
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	2bd4      	cmp	r3, #212	; 0xd4
 8012b96:	d001      	beq.n	8012b9c <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 8012b98:	230b      	movs	r3, #11
 8012b9a:	e0cc      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 8012b9c:	4b68      	ldr	r3, [pc, #416]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012b9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012ba0:	7d7b      	ldrb	r3, [r7, #21]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	2b04      	cmp	r3, #4
 8012ba8:	f040 808a 	bne.w	8012cc0 <nfcipTargetHandleActivation+0x180>
    {
        msgIt++;
 8012bac:	7d7b      	ldrb	r3, [r7, #21]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 8012bb2:	4b63      	ldr	r3, [pc, #396]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012bb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012bb6:	7d7b      	ldrb	r3, [r7, #21]
 8012bb8:	1c59      	adds	r1, r3, #1
 8012bba:	7579      	strb	r1, [r7, #21]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	781a      	ldrb	r2, [r3, #0]
 8012bc0:	4b5f      	ldr	r3, [pc, #380]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012bc2:	78db      	ldrb	r3, [r3, #3]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d001      	beq.n	8012bcc <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 8012bc8:	230b      	movs	r3, #11
 8012bca:	e0b4      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 8012bcc:	4b5c      	ldr	r3, [pc, #368]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012bce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012bd0:	7d7b      	ldrb	r3, [r7, #21]
 8012bd2:	1c59      	adds	r1, r3, #1
 8012bd4:	7579      	strb	r1, [r7, #21]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	781a      	ldrb	r2, [r3, #0]
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 8012bde:	4b58      	ldr	r3, [pc, #352]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012be0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012be2:	7d7b      	ldrb	r3, [r7, #21]
 8012be4:	1c59      	adds	r1, r3, #1
 8012be6:	7579      	strb	r1, [r7, #21]
 8012be8:	4413      	add	r3, r2
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	f003 0303 	and.w	r3, r3, #3
 8012bf0:	b2da      	uxtb	r2, r3
 8012bf2:	4b53      	ldr	r3, [pc, #332]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 8012bf8:	4b51      	ldr	r3, [pc, #324]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012bfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012bfe:	3301      	adds	r3, #1
 8012c00:	019b      	lsls	r3, r3, #6
 8012c02:	2bfd      	cmp	r3, #253	; 0xfd
 8012c04:	d807      	bhi.n	8012c16 <nfcipTargetHandleActivation+0xd6>
 8012c06:	4b4e      	ldr	r3, [pc, #312]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012c08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	019b      	lsls	r3, r3, #6
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	e000      	b.n	8012c18 <nfcipTargetHandleActivation+0xd8>
 8012c16:	23fe      	movs	r3, #254	; 0xfe
 8012c18:	4a49      	ldr	r2, [pc, #292]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012c1a:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d032      	beq.n	8012c8a <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	08db      	lsrs	r3, r3, #3
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	f003 0307 	and.w	r3, r3, #7
 8012c30:	b2da      	uxtb	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	f003 0307 	and.w	r3, r3, #7
 8012c40:	b2da      	uxtb	r2, r3
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 8012c48:	4b3d      	ldr	r3, [pc, #244]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012c4a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 8012c54:	4b3a      	ldr	r3, [pc, #232]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012c56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	7bdb      	ldrb	r3, [r3, #15]
 8012c64:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	7bda      	ldrb	r2, [r3, #15]
 8012c72:	4b33      	ldr	r3, [pc, #204]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012c74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012c78:	011b      	lsls	r3, r3, #4
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	4313      	orrs	r3, r2
 8012c84:	b2da      	uxtb	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	73da      	strb	r2, [r3, #15]
        }
        
        rfalSetBitRate( RFAL_BR_KEEP, gNfcip.nfcDepDev->info.DSI );
 8012c8a:	4b2d      	ldr	r3, [pc, #180]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012c92:	4619      	mov	r1, r3
 8012c94:	20ff      	movs	r0, #255	; 0xff
 8012c96:	f003 fac1 	bl	801621c <rfalSetBitRate>
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8012c9a:	f107 010c 	add.w	r1, r7, #12
 8012c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca2:	9301      	str	r3, [sp, #4]
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	2300      	movs	r3, #0
 8012caa:	2200      	movs	r2, #0
 8012cac:	2005      	movs	r0, #5
 8012cae:	f7ff fb41 	bl	8012334 <nfcipTx>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	82fb      	strh	r3, [r7, #22]
 8012cb6:	8afb      	ldrh	r3, [r7, #22]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d037      	beq.n	8012d2c <nfcipTargetHandleActivation+0x1ec>
 8012cbc:	8afb      	ldrh	r3, [r7, #22]
 8012cbe:	e03a      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 8012cc0:	4b1f      	ldr	r3, [pc, #124]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012cc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012cc4:	7d7b      	ldrb	r3, [r7, #21]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	2b06      	cmp	r3, #6
 8012ccc:	d12a      	bne.n	8012d24 <nfcipTargetHandleActivation+0x1e4>
        {
            msgIt++;
 8012cce:	7d7b      	ldrb	r3, [r7, #21]
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 8012cd4:	4b1a      	ldr	r3, [pc, #104]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012cd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012cd8:	7d7b      	ldrb	r3, [r7, #21]
 8012cda:	4413      	add	r3, r2
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	f003 0303 	and.w	r3, r3, #3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d001      	beq.n	8012cea <nfcipTargetHandleActivation+0x1aa>
            {
                return ERR_PROTO;
 8012ce6:	230b      	movs	r3, #11
 8012ce8:	e025      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 8012cea:	4b15      	ldr	r3, [pc, #84]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012cec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012cee:	7d7b      	ldrb	r3, [r7, #21]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	f003 0304 	and.w	r3, r3, #4
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d00d      	beq.n	8012d18 <nfcipTargetHandleActivation+0x1d8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 8012cfc:	4b10      	ldr	r3, [pc, #64]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012cfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8012d00:	7d7b      	ldrb	r3, [r7, #21]
 8012d02:	3301      	adds	r3, #1
 8012d04:	757b      	strb	r3, [r7, #21]
 8012d06:	7d7b      	ldrb	r3, [r7, #21]
 8012d08:	4413      	add	r3, r2
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	4b0c      	ldr	r3, [pc, #48]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012d0e:	78db      	ldrb	r3, [r3, #3]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d007      	beq.n	8012d24 <nfcipTargetHandleActivation+0x1e4>
                {
                    return ERR_PROTO;
 8012d14:	230b      	movs	r3, #11
 8012d16:	e00e      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 8012d18:	4b09      	ldr	r3, [pc, #36]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012d1a:	78db      	ldrb	r3, [r3, #3]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d001      	beq.n	8012d24 <nfcipTargetHandleActivation+0x1e4>
            {
                return ERR_PROTO;
 8012d20:	230b      	movs	r3, #11
 8012d22:	e008      	b.n	8012d36 <nfcipTargetHandleActivation+0x1f6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 8012d24:	4b06      	ldr	r3, [pc, #24]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012d26:	2201      	movs	r2, #1
 8012d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 8012d2c:	4b04      	ldr	r3, [pc, #16]	; (8012d40 <nfcipTargetHandleActivation+0x200>)
 8012d2e:	220d      	movs	r2, #13
 8012d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return ERR_NONE;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3718      	adds	r7, #24
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	200033e8 	.word	0x200033e8

08012d44 <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b0c0      	sub	sp, #256	; 0x100
 8012d48:	af04      	add	r7, sp, #16
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d005      	beq.n	8012d62 <rfalNfcDepATR+0x1e>
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d002      	beq.n	8012d62 <rfalNfcDepATR+0x1e>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 8012d62:	2307      	movs	r3, #7
 8012d64:	e0be      	b.n	8012ee4 <rfalNfcDepATR+0x1a0>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	7a5b      	ldrb	r3, [r3, #9]
 8012d6a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	7a9b      	ldrb	r3, [r3, #10]
 8012d72:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 8012d76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 8012d7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	7b1b      	ldrb	r3, [r3, #12]
 8012d8a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	7adb      	ldrb	r3, [r3, #11]
 8012d92:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	7b5b      	ldrb	r3, [r3, #13]
 8012d9a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 8012d9e:	230e      	movs	r3, #14
 8012da0:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	7d1b      	ldrb	r3, [r3, #20]
 8012da8:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 8012dac:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00a      	beq.n	8012dca <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	6919      	ldr	r1, [r3, #16]
 8012db8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012dc2:	3312      	adds	r3, #18
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f008 ff73 	bl	801bcb0 <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	7a1b      	ldrb	r3, [r3, #8]
 8012dce:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 8012dd2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00a      	beq.n	8012df0 <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	6859      	ldr	r1, [r3, #4]
 8012dde:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8012de2:	461a      	mov	r2, r3
 8012de4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012de8:	3307      	adds	r3, #7
 8012dea:	4618      	mov	r0, r3
 8012dec:	f008 ff60 	bl	801bcb0 <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 8012df0:	2300      	movs	r3, #0
 8012df2:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	785b      	ldrb	r3, [r3, #1]
 8012dfa:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 8012e06:	f7ff fd93 	bl	8012930 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 8012e0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7ff fc1c 	bl	801264c <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 8012e14:	4b35      	ldr	r3, [pc, #212]	; (8012eec <rfalNfcDepATR+0x1a8>)
 8012e16:	785b      	ldrb	r3, [r3, #1]
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d101      	bne.n	8012e20 <rfalNfcDepATR+0xdc>
 8012e1c:	4a34      	ldr	r2, [pc, #208]	; (8012ef0 <rfalNfcDepATR+0x1ac>)
 8012e1e:	e000      	b.n	8012e22 <rfalNfcDepATR+0xde>
 8012e20:	4a34      	ldr	r2, [pc, #208]	; (8012ef4 <rfalNfcDepATR+0x1b0>)
 8012e22:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012e26:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8012e2a:	9303      	str	r3, [sp, #12]
 8012e2c:	2341      	movs	r3, #65	; 0x41
 8012e2e:	9302      	str	r3, [sp, #8]
 8012e30:	f107 0314 	add.w	r3, r7, #20
 8012e34:	9301      	str	r3, [sp, #4]
 8012e36:	2300      	movs	r3, #0
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	f7fe faa7 	bl	8011390 <nfcipTxRx>
 8012e42:	4603      	mov	r3, r0
 8012e44:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8012e48:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d002      	beq.n	8012e56 <rfalNfcDepATR+0x112>
 8012e50:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8012e54:	e046      	b.n	8012ee4 <rfalNfcDepATR+0x1a0>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8012e56:	2300      	movs	r3, #0
 8012e58:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 8012e5c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8012e60:	1c5a      	adds	r2, r3, #1
 8012e62:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8012e66:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012e6a:	4413      	add	r3, r2
 8012e6c:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	3b01      	subs	r3, #1
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 8012e7a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8012e7e:	2b10      	cmp	r3, #16
 8012e80:	d903      	bls.n	8012e8a <rfalNfcDepATR+0x146>
 8012e82:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8012e86:	2b40      	cmp	r3, #64	; 0x40
 8012e88:	d901      	bls.n	8012e8e <rfalNfcDepATR+0x14a>
    {
        return ERR_PROTO;
 8012e8a:	230b      	movs	r3, #11
 8012e8c:	e02a      	b.n	8012ee4 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 8012e8e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8012e92:	1c5a      	adds	r2, r3, #1
 8012e94:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8012e98:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012e9c:	4413      	add	r3, r2
 8012e9e:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8012ea2:	2bd5      	cmp	r3, #213	; 0xd5
 8012ea4:	d001      	beq.n	8012eaa <rfalNfcDepATR+0x166>
    {
        return ERR_PROTO;
 8012ea6:	230b      	movs	r3, #11
 8012ea8:	e01c      	b.n	8012ee4 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 8012eaa:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8012eae:	1c5a      	adds	r2, r3, #1
 8012eb0:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 8012eb4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012eb8:	4413      	add	r3, r2
 8012eba:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8012ebe:	2b01      	cmp	r3, #1
 8012ec0:	d001      	beq.n	8012ec6 <rfalNfcDepATR+0x182>
    {
        return ERR_PROTO;
 8012ec2:	230b      	movs	r3, #11
 8012ec4:	e00e      	b.n	8012ee4 <rfalNfcDepATR+0x1a0>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 8012ec6:	f107 0314 	add.w	r3, r7, #20
 8012eca:	3301      	adds	r3, #1
 8012ecc:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	68b8      	ldr	r0, [r7, #8]
 8012ed4:	f008 feec 	bl	801bcb0 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 8012ed8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8012edc:	b2da      	uxtb	r2, r3
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8012ee2:	2300      	movs	r3, #0
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	37f0      	adds	r7, #240	; 0xf0
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	200033e8 	.word	0x200033e8
 8012ef0:	00200c01 	.word	0x00200c01
 8012ef4:	01000c01 	.word	0x01000c01

08012ef8 <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 8012ef8:	b590      	push	{r4, r7, lr}
 8012efa:	b08b      	sub	sp, #44	; 0x2c
 8012efc:	af04      	add	r7, sp, #16
 8012efe:	4603      	mov	r3, r0
 8012f00:	460a      	mov	r2, r1
 8012f02:	71fb      	strb	r3, [r7, #7]
 8012f04:	4613      	mov	r3, r2
 8012f06:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 8012f08:	2304      	movs	r3, #4
 8012f0a:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 8012f0c:	7dfb      	ldrb	r3, [r7, #23]
 8012f0e:	1c5a      	adds	r2, r3, #1
 8012f10:	75fa      	strb	r2, [r7, #23]
 8012f12:	f107 0218 	add.w	r2, r7, #24
 8012f16:	4413      	add	r3, r2
 8012f18:	79fa      	ldrb	r2, [r7, #7]
 8012f1a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 8012f1e:	7dfb      	ldrb	r3, [r7, #23]
 8012f20:	1c5a      	adds	r2, r3, #1
 8012f22:	75fa      	strb	r2, [r7, #23]
 8012f24:	f107 0218 	add.w	r2, r7, #24
 8012f28:	4413      	add	r3, r2
 8012f2a:	79ba      	ldrb	r2, [r7, #6]
 8012f2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 8012f30:	4b2f      	ldr	r3, [pc, #188]	; (8012ff0 <rfalNfcDepPSL+0xf8>)
 8012f32:	785b      	ldrb	r3, [r3, #1]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d101      	bne.n	8012f3c <rfalNfcDepPSL+0x44>
 8012f38:	482e      	ldr	r0, [pc, #184]	; (8012ff4 <rfalNfcDepPSL+0xfc>)
 8012f3a:	e000      	b.n	8012f3e <rfalNfcDepPSL+0x46>
 8012f3c:	482e      	ldr	r0, [pc, #184]	; (8012ff8 <rfalNfcDepPSL+0x100>)
 8012f3e:	7dfb      	ldrb	r3, [r7, #23]
 8012f40:	3b04      	subs	r3, #4
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	f107 020c 	add.w	r2, r7, #12
 8012f48:	1d14      	adds	r4, r2, #4
 8012f4a:	f107 010c 	add.w	r1, r7, #12
 8012f4e:	f107 0212 	add.w	r2, r7, #18
 8012f52:	9203      	str	r2, [sp, #12]
 8012f54:	2204      	movs	r2, #4
 8012f56:	9202      	str	r2, [sp, #8]
 8012f58:	f107 0208 	add.w	r2, r7, #8
 8012f5c:	9201      	str	r2, [sp, #4]
 8012f5e:	9300      	str	r3, [sp, #0]
 8012f60:	4623      	mov	r3, r4
 8012f62:	4602      	mov	r2, r0
 8012f64:	2004      	movs	r0, #4
 8012f66:	f7fe fa13 	bl	8011390 <nfcipTxRx>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	82bb      	strh	r3, [r7, #20]
 8012f6e:	8abb      	ldrh	r3, [r7, #20]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d001      	beq.n	8012f78 <rfalNfcDepPSL+0x80>
 8012f74:	8abb      	ldrh	r3, [r7, #20]
 8012f76:	e037      	b.n	8012fe8 <rfalNfcDepPSL+0xf0>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 8012f7c:	7dfb      	ldrb	r3, [r7, #23]
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	75fa      	strb	r2, [r7, #23]
 8012f82:	f107 0218 	add.w	r2, r7, #24
 8012f86:	4413      	add	r3, r2
 8012f88:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 8012f90:	8a7b      	ldrh	r3, [r7, #18]
 8012f92:	2b03      	cmp	r3, #3
 8012f94:	d801      	bhi.n	8012f9a <rfalNfcDepPSL+0xa2>
    {
        return ERR_PROTO;
 8012f96:	230b      	movs	r3, #11
 8012f98:	e026      	b.n	8012fe8 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	1c5a      	adds	r2, r3, #1
 8012f9e:	75fa      	strb	r2, [r7, #23]
 8012fa0:	f107 0218 	add.w	r2, r7, #24
 8012fa4:	4413      	add	r3, r2
 8012fa6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012faa:	2bd5      	cmp	r3, #213	; 0xd5
 8012fac:	d001      	beq.n	8012fb2 <rfalNfcDepPSL+0xba>
    {
        return ERR_PROTO;
 8012fae:	230b      	movs	r3, #11
 8012fb0:	e01a      	b.n	8012fe8 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 8012fb2:	7dfb      	ldrb	r3, [r7, #23]
 8012fb4:	1c5a      	adds	r2, r3, #1
 8012fb6:	75fa      	strb	r2, [r7, #23]
 8012fb8:	f107 0218 	add.w	r2, r7, #24
 8012fbc:	4413      	add	r3, r2
 8012fbe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012fc2:	2b05      	cmp	r3, #5
 8012fc4:	d001      	beq.n	8012fca <rfalNfcDepPSL+0xd2>
    {
        return ERR_PROTO;
 8012fc6:	230b      	movs	r3, #11
 8012fc8:	e00e      	b.n	8012fe8 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 8012fca:	7dfb      	ldrb	r3, [r7, #23]
 8012fcc:	1c5a      	adds	r2, r3, #1
 8012fce:	75fa      	strb	r2, [r7, #23]
 8012fd0:	f107 0218 	add.w	r2, r7, #24
 8012fd4:	4413      	add	r3, r2
 8012fd6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8012fda:	4b05      	ldr	r3, [pc, #20]	; (8012ff0 <rfalNfcDepPSL+0xf8>)
 8012fdc:	78db      	ldrb	r3, [r3, #3]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d001      	beq.n	8012fe6 <rfalNfcDepPSL+0xee>
    {
        return ERR_PROTO;
 8012fe2:	230b      	movs	r3, #11
 8012fe4:	e000      	b.n	8012fe8 <rfalNfcDepPSL+0xf0>
    }
    
    return ERR_NONE;
 8012fe6:	2300      	movs	r3, #0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	371c      	adds	r7, #28
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd90      	pop	{r4, r7, pc}
 8012ff0:	200033e8 	.word	0x200033e8
 8012ff4:	00200c01 	.word	0x00200c01
 8012ff8:	01000c01 	.word	0x01000c01

08012ffc <rfalNfcDepDSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepDSL( void )
{   
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b08a      	sub	sp, #40	; 0x28
 8013000:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t  txBuf[ RFAL_NFCDEP_HEADER_PAD + NFCIP_DSLREQ_LEN];
    uint8_t  rxBuf[NFCIP_DSLRES_LEN];
    uint8_t  rxMsgIt;
    uint16_t rxLen = 0;
 8013002:	2300      	movs	r3, #0
 8013004:	80fb      	strh	r3, [r7, #6]
        
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 8013006:	4b30      	ldr	r3, [pc, #192]	; (80130c8 <rfalNfcDepDSL+0xcc>)
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	2b01      	cmp	r3, #1
 801300c:	d101      	bne.n	8013012 <rfalNfcDepDSL+0x16>
    {
        return ERR_NONE;                                  /* Target has no deselect procedure */
 801300e:	2300      	movs	r3, #0
 8013010:	e055      	b.n	80130be <rfalNfcDepDSL+0xc2>
    }
    
    /* Repeating a DSL REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_DSL_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 8013012:	4b2d      	ldr	r3, [pc, #180]	; (80130c8 <rfalNfcDepDSL+0xcc>)
 8013014:	785b      	ldrb	r3, [r3, #1]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d101      	bne.n	801301e <rfalNfcDepDSL+0x22>
 801301a:	4a2c      	ldr	r2, [pc, #176]	; (80130cc <rfalNfcDepDSL+0xd0>)
 801301c:	e000      	b.n	8013020 <rfalNfcDepDSL+0x24>
 801301e:	4a2c      	ldr	r2, [pc, #176]	; (80130d0 <rfalNfcDepDSL+0xd4>)
 8013020:	f107 010c 	add.w	r1, r7, #12
 8013024:	1dbb      	adds	r3, r7, #6
 8013026:	9303      	str	r3, [sp, #12]
 8013028:	2304      	movs	r3, #4
 801302a:	9302      	str	r3, [sp, #8]
 801302c:	f107 0308 	add.w	r3, r7, #8
 8013030:	9301      	str	r3, [sp, #4]
 8013032:	2300      	movs	r3, #0
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	2300      	movs	r3, #0
 8013038:	2008      	movs	r0, #8
 801303a:	f7fe f9a9 	bl	8011390 <nfcipTxRx>
 801303e:	4603      	mov	r3, r0
 8013040:	82fb      	strh	r3, [r7, #22]
 8013042:	8afb      	ldrh	r3, [r7, #22]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d001      	beq.n	801304c <rfalNfcDepDSL+0x50>
 8013048:	8afb      	ldrh	r3, [r7, #22]
 801304a:	e038      	b.n	80130be <rfalNfcDepDSL+0xc2>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 801304c:	2300      	movs	r3, #0
 801304e:	757b      	strb	r3, [r7, #21]
    
    if( rxBuf[rxMsgIt++] < NFCIP_DSLRES_MIN )             /* Checking length: LEN + DSL_RES */
 8013050:	7d7b      	ldrb	r3, [r7, #21]
 8013052:	1c5a      	adds	r2, r3, #1
 8013054:	757a      	strb	r2, [r7, #21]
 8013056:	f107 0218 	add.w	r2, r7, #24
 801305a:	4413      	add	r3, r2
 801305c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013060:	2b02      	cmp	r3, #2
 8013062:	d801      	bhi.n	8013068 <rfalNfcDepDSL+0x6c>
    {
        return ERR_PROTO;
 8013064:	230b      	movs	r3, #11
 8013066:	e02a      	b.n	80130be <rfalNfcDepDSL+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 8013068:	7d7b      	ldrb	r3, [r7, #21]
 801306a:	1c5a      	adds	r2, r3, #1
 801306c:	757a      	strb	r2, [r7, #21]
 801306e:	f107 0218 	add.w	r2, r7, #24
 8013072:	4413      	add	r3, r2
 8013074:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013078:	2bd5      	cmp	r3, #213	; 0xd5
 801307a:	d001      	beq.n	8013080 <rfalNfcDepDSL+0x84>
    {
        return ERR_PROTO;
 801307c:	230b      	movs	r3, #11
 801307e:	e01e      	b.n	80130be <rfalNfcDepDSL+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DSL_RES )  /* Checking if is DSL RES          */
 8013080:	7d7b      	ldrb	r3, [r7, #21]
 8013082:	1c5a      	adds	r2, r3, #1
 8013084:	757a      	strb	r2, [r7, #21]
 8013086:	f107 0218 	add.w	r2, r7, #24
 801308a:	4413      	add	r3, r2
 801308c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013090:	2b09      	cmp	r3, #9
 8013092:	d001      	beq.n	8013098 <rfalNfcDepDSL+0x9c>
    {
        return ERR_PROTO;
 8013094:	230b      	movs	r3, #11
 8013096:	e012      	b.n	80130be <rfalNfcDepDSL+0xc2>
    }
    
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8013098:	4b0b      	ldr	r3, [pc, #44]	; (80130c8 <rfalNfcDepDSL+0xcc>)
 801309a:	78db      	ldrb	r3, [r3, #3]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00d      	beq.n	80130bc <rfalNfcDepDSL+0xc0>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 80130a0:	7d7b      	ldrb	r3, [r7, #21]
 80130a2:	1c5a      	adds	r2, r3, #1
 80130a4:	757a      	strb	r2, [r7, #21]
 80130a6:	f107 0218 	add.w	r2, r7, #24
 80130aa:	4413      	add	r3, r2
 80130ac:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80130b0:	4b05      	ldr	r3, [pc, #20]	; (80130c8 <rfalNfcDepDSL+0xcc>)
 80130b2:	78db      	ldrb	r3, [r3, #3]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d001      	beq.n	80130bc <rfalNfcDepDSL+0xc0>
        {
            return ERR_PROTO;
 80130b8:	230b      	movs	r3, #11
 80130ba:	e000      	b.n	80130be <rfalNfcDepDSL+0xc2>
        }
    }

    return ERR_NONE;
 80130bc:	2300      	movs	r3, #0
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3718      	adds	r7, #24
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	200033e8 	.word	0x200033e8
 80130cc:	00200c01 	.word	0x00200c01
 80130d0:	01000c01 	.word	0x01000c01

080130d4 <rfalNfcDepRLS>:


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b08a      	sub	sp, #40	; 0x28
 80130d8:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 80130da:	2300      	movs	r3, #0
 80130dc:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 80130de:	4b30      	ldr	r3, [pc, #192]	; (80131a0 <rfalNfcDepRLS+0xcc>)
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d101      	bne.n	80130ea <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 80130e6:	2300      	movs	r3, #0
 80130e8:	e055      	b.n	8013196 <rfalNfcDepRLS+0xc2>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 80130ea:	4b2d      	ldr	r3, [pc, #180]	; (80131a0 <rfalNfcDepRLS+0xcc>)
 80130ec:	785b      	ldrb	r3, [r3, #1]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d101      	bne.n	80130f6 <rfalNfcDepRLS+0x22>
 80130f2:	4a2c      	ldr	r2, [pc, #176]	; (80131a4 <rfalNfcDepRLS+0xd0>)
 80130f4:	e000      	b.n	80130f8 <rfalNfcDepRLS+0x24>
 80130f6:	4a2c      	ldr	r2, [pc, #176]	; (80131a8 <rfalNfcDepRLS+0xd4>)
 80130f8:	f107 010c 	add.w	r1, r7, #12
 80130fc:	1dbb      	adds	r3, r7, #6
 80130fe:	9303      	str	r3, [sp, #12]
 8013100:	2304      	movs	r3, #4
 8013102:	9302      	str	r3, [sp, #8]
 8013104:	f107 0308 	add.w	r3, r7, #8
 8013108:	9301      	str	r3, [sp, #4]
 801310a:	2300      	movs	r3, #0
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	2300      	movs	r3, #0
 8013110:	200a      	movs	r0, #10
 8013112:	f7fe f93d 	bl	8011390 <nfcipTxRx>
 8013116:	4603      	mov	r3, r0
 8013118:	82fb      	strh	r3, [r7, #22]
 801311a:	8afb      	ldrh	r3, [r7, #22]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d001      	beq.n	8013124 <rfalNfcDepRLS+0x50>
 8013120:	8afb      	ldrh	r3, [r7, #22]
 8013122:	e038      	b.n	8013196 <rfalNfcDepRLS+0xc2>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 8013124:	2300      	movs	r3, #0
 8013126:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 8013128:	7d7b      	ldrb	r3, [r7, #21]
 801312a:	1c5a      	adds	r2, r3, #1
 801312c:	757a      	strb	r2, [r7, #21]
 801312e:	f107 0218 	add.w	r2, r7, #24
 8013132:	4413      	add	r3, r2
 8013134:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013138:	2b02      	cmp	r3, #2
 801313a:	d801      	bhi.n	8013140 <rfalNfcDepRLS+0x6c>
    {
        return ERR_PROTO;
 801313c:	230b      	movs	r3, #11
 801313e:	e02a      	b.n	8013196 <rfalNfcDepRLS+0xc2>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 8013140:	7d7b      	ldrb	r3, [r7, #21]
 8013142:	1c5a      	adds	r2, r3, #1
 8013144:	757a      	strb	r2, [r7, #21]
 8013146:	f107 0218 	add.w	r2, r7, #24
 801314a:	4413      	add	r3, r2
 801314c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013150:	2bd5      	cmp	r3, #213	; 0xd5
 8013152:	d001      	beq.n	8013158 <rfalNfcDepRLS+0x84>
    {
        return ERR_PROTO;
 8013154:	230b      	movs	r3, #11
 8013156:	e01e      	b.n	8013196 <rfalNfcDepRLS+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 8013158:	7d7b      	ldrb	r3, [r7, #21]
 801315a:	1c5a      	adds	r2, r3, #1
 801315c:	757a      	strb	r2, [r7, #21]
 801315e:	f107 0218 	add.w	r2, r7, #24
 8013162:	4413      	add	r3, r2
 8013164:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013168:	2b0b      	cmp	r3, #11
 801316a:	d001      	beq.n	8013170 <rfalNfcDepRLS+0x9c>
    {
        return ERR_PROTO;
 801316c:	230b      	movs	r3, #11
 801316e:	e012      	b.n	8013196 <rfalNfcDepRLS+0xc2>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8013170:	4b0b      	ldr	r3, [pc, #44]	; (80131a0 <rfalNfcDepRLS+0xcc>)
 8013172:	78db      	ldrb	r3, [r3, #3]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00d      	beq.n	8013194 <rfalNfcDepRLS+0xc0>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 8013178:	7d7b      	ldrb	r3, [r7, #21]
 801317a:	1c5a      	adds	r2, r3, #1
 801317c:	757a      	strb	r2, [r7, #21]
 801317e:	f107 0218 	add.w	r2, r7, #24
 8013182:	4413      	add	r3, r2
 8013184:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8013188:	4b05      	ldr	r3, [pc, #20]	; (80131a0 <rfalNfcDepRLS+0xcc>)
 801318a:	78db      	ldrb	r3, [r3, #3]
 801318c:	429a      	cmp	r2, r3
 801318e:	d001      	beq.n	8013194 <rfalNfcDepRLS+0xc0>
        {
            return ERR_PROTO;
 8013190:	230b      	movs	r3, #11
 8013192:	e000      	b.n	8013196 <rfalNfcDepRLS+0xc2>
        }
    }
    
    return ERR_NONE;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3718      	adds	r7, #24
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	200033e8 	.word	0x200033e8
 80131a4:	00200c01 	.word	0x00200c01
 80131a8:	01000c01 	.word	0x01000c01

080131ac <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b086      	sub	sp, #24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	460b      	mov	r3, r1
 80131b6:	607a      	str	r2, [r7, #4]
 80131b8:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d002      	beq.n	80131c6 <rfalNfcDepInitiatorHandleActivation+0x1a>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d101      	bne.n	80131ca <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 80131c6:	2307      	movs	r3, #7
 80131c8:	e0dd      	b.n	8013386 <rfalNfcDepInitiatorHandleActivation+0x1da>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2200      	movs	r2, #0
 80131ce:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 80131d0:	2302      	movs	r3, #2
 80131d2:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 80131d4:	6879      	ldr	r1, [r7, #4]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	3341      	adds	r3, #65	; 0x41
 80131da:	461a      	mov	r2, r3
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f7ff fdb1 	bl	8012d44 <rfalNfcDepATR>
 80131e2:	4603      	mov	r3, r0
 80131e4:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 80131e6:	8a7b      	ldrh	r3, [r7, #18]
 80131e8:	2b15      	cmp	r3, #21
 80131ea:	d005      	beq.n	80131f8 <rfalNfcDepInitiatorHandleActivation+0x4c>
 80131ec:	8a7b      	ldrh	r3, [r7, #18]
 80131ee:	2b09      	cmp	r3, #9
 80131f0:	d002      	beq.n	80131f8 <rfalNfcDepInitiatorHandleActivation+0x4c>
 80131f2:	8a7b      	ldrh	r3, [r7, #18]
 80131f4:	2b1b      	cmp	r3, #27
 80131f6:	d105      	bne.n	8013204 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	1e5a      	subs	r2, r3, #1
 80131fc:	75fa      	strb	r2, [r7, #23]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d1e8      	bne.n	80131d4 <rfalNfcDepInitiatorHandleActivation+0x28>
 8013202:	e000      	b.n	8013206 <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 8013204:	bf00      	nop
    
    if( ret != ERR_NONE )
 8013206:	8a7b      	ldrh	r3, [r7, #18]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d001      	beq.n	8013210 <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 801320c:	8a7b      	ldrh	r3, [r7, #18]
 801320e:	e0ba      	b.n	8013386 <rfalNfcDepInitiatorHandleActivation+0x1da>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013216:	3b11      	subs	r3, #17
 8013218:	b2da      	uxtb	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	7b1a      	ldrb	r2, [r3, #12]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2200      	movs	r2, #0
 801322e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	7c1b      	ldrb	r3, [r3, #16]
 8013236:	091b      	lsrs	r3, r3, #4
 8013238:	b2db      	uxtb	r3, r3
 801323a:	f003 0303 	and.w	r3, r3, #3
 801323e:	b2da      	uxtb	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801324c:	3301      	adds	r3, #1
 801324e:	019b      	lsls	r3, r3, #6
 8013250:	2bfd      	cmp	r3, #253	; 0xfd
 8013252:	d807      	bhi.n	8013264 <rfalNfcDepInitiatorHandleActivation+0xb8>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801325a:	3301      	adds	r3, #1
 801325c:	b29b      	uxth	r3, r3
 801325e:	019b      	lsls	r3, r3, #6
 8013260:	b29a      	uxth	r2, r3
 8013262:	e000      	b.n	8013266 <rfalNfcDepInitiatorHandleActivation+0xba>
 8013264:	22fe      	movs	r2, #254	; 0xfe
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	7bdb      	ldrb	r3, [r3, #15]
 8013270:	f003 030f 	and.w	r3, r3, #15
 8013274:	b2da      	uxtb	r2, r3
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013282:	4618      	mov	r0, r3
 8013284:	f000 f886 	bl	8013394 <rfalNfcDepCalculateRWT>
 8013288:	4602      	mov	r2, r0
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	220c      	movs	r2, #12
 8013292:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	3355      	adds	r3, #85	; 0x55
 801329e:	4619      	mov	r1, r3
 80132a0:	4610      	mov	r0, r2
 80132a2:	f003 fa97 	bl	80167d4 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 80132a6:	2300      	movs	r3, #0
 80132a8:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80132b0:	00db      	lsls	r3, r3, #3
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80132b8:	b2da      	uxtb	r2, r3
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80132c0:	f003 0307 	and.w	r3, r3, #7
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	4313      	orrs	r3, r2
 80132c8:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80132d0:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( (nfcDepDev->info.DSI != desiredBR) && (desiredBR != RFAL_BR_KEEP) )    /* if desired BR is different    */
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80132d8:	7afa      	ldrb	r2, [r7, #11]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d01b      	beq.n	8013316 <rfalNfcDepInitiatorHandleActivation+0x16a>
 80132de:	7afb      	ldrb	r3, [r7, #11]
 80132e0:	2bff      	cmp	r3, #255	; 0xff
 80132e2:	d018      	beq.n	8013316 <rfalNfcDepInitiatorHandleActivation+0x16a>
    {
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	7b99      	ldrb	r1, [r3, #14]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	7b5a      	ldrb	r2, [r3, #13]
 80132ec:	7afb      	ldrb	r3, [r7, #11]
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fe f82c 	bl	801134c <nfcipDxIsSupported>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d00d      	beq.n	8013316 <rfalNfcDepInitiatorHandleActivation+0x16a>
        {
            sendPSL = true;
 80132fa:	2301      	movs	r3, #1
 80132fc:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 80132fe:	7afb      	ldrb	r3, [r7, #11]
 8013300:	00db      	lsls	r3, r3, #3
 8013302:	b2db      	uxtb	r3, r3
 8013304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013308:	b2da      	uxtb	r2, r3
 801330a:	7afb      	ldrb	r3, [r7, #11]
 801330c:	f003 0307 	and.w	r3, r3, #7
 8013310:	b2db      	uxtb	r3, r3
 8013312:	4313      	orrs	r3, r2
 8013314:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 8013316:	7d7b      	ldrb	r3, [r7, #21]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d033      	beq.n	8013384 <rfalNfcDepInitiatorHandleActivation+0x1d8>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 801331c:	7c7a      	ldrb	r2, [r7, #17]
 801331e:	7dbb      	ldrb	r3, [r7, #22]
 8013320:	4611      	mov	r1, r2
 8013322:	4618      	mov	r0, r3
 8013324:	f7ff fde8 	bl	8012ef8 <rfalNfcDepPSL>
 8013328:	4603      	mov	r3, r0
 801332a:	827b      	strh	r3, [r7, #18]
 801332c:	8a7b      	ldrh	r3, [r7, #18]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d001      	beq.n	8013336 <rfalNfcDepInitiatorHandleActivation+0x18a>
 8013332:	8a7b      	ldrh	r3, [r7, #18]
 8013334:	e027      	b.n	8013386 <rfalNfcDepInitiatorHandleActivation+0x1da>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801333c:	7afa      	ldrb	r2, [r7, #11]
 801333e:	429a      	cmp	r2, r3
 8013340:	d01e      	beq.n	8013380 <rfalNfcDepInitiatorHandleActivation+0x1d4>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013348:	2b00      	cmp	r3, #0
 801334a:	d107      	bne.n	801335c <rfalNfcDepInitiatorHandleActivation+0x1b0>
 801334c:	4b10      	ldr	r3, [pc, #64]	; (8013390 <rfalNfcDepInitiatorHandleActivation+0x1e4>)
 801334e:	785b      	ldrb	r3, [r3, #1]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d103      	bne.n	801335c <rfalNfcDepInitiatorHandleActivation+0x1b0>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 8013354:	7afb      	ldrb	r3, [r7, #11]
 8013356:	4618      	mov	r0, r3
 8013358:	f001 fcca 	bl	8014cf0 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	7afa      	ldrb	r2, [r7, #11]
 8013360:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	7afa      	ldrb	r2, [r7, #11]
 8013368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8013378:	4619      	mov	r1, r3
 801337a:	4610      	mov	r0, r2
 801337c:	f002 ff4e 	bl	801621c <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 8013380:	2300      	movs	r3, #0
 8013382:	e000      	b.n	8013386 <rfalNfcDepInitiatorHandleActivation+0x1da>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 8013384:	2300      	movs	r3, #0
}
 8013386:	4618      	mov	r0, r3
 8013388:	3718      	adds	r7, #24
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	200033e8 	.word	0x200033e8

08013394 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 8013394:	b480      	push	{r7}
 8013396:	b085      	sub	sp, #20
 8013398:	af00      	add	r7, sp, #0
 801339a:	4603      	mov	r3, r0
 801339c:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 801339e:	79fb      	ldrb	r3, [r7, #7]
 80133a0:	2b0e      	cmp	r3, #14
 80133a2:	bf28      	it	cs
 80133a4:	230e      	movcs	r3, #14
 80133a6:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 80133a8:	7bfb      	ldrb	r3, [r7, #15]
 80133aa:	f003 030f 	and.w	r3, r3, #15
 80133ae:	330c      	adds	r3, #12
 80133b0:	2201      	movs	r2, #1
 80133b2:	fa02 f303 	lsl.w	r3, r2, r3
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3714      	adds	r7, #20
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bc80      	pop	{r7}
 80133be:	4770      	bx	lr

080133c0 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b089      	sub	sp, #36	; 0x24
 80133c4:	af04      	add	r7, sp, #16
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	460b      	mov	r3, r1
 80133ca:	607a      	str	r2, [r7, #4]
 80133cc:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 80133ce:	4b0b      	ldr	r3, [pc, #44]	; (80133fc <nfcipDataTx+0x3c>)
 80133d0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80133d2:	4b0a      	ldr	r3, [pc, #40]	; (80133fc <nfcipDataTx+0x3c>)
 80133d4:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 80133d8:	4b08      	ldr	r3, [pc, #32]	; (80133fc <nfcipDataTx+0x3c>)
 80133da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133dc:	8979      	ldrh	r1, [r7, #10]
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	9202      	str	r2, [sp, #8]
 80133e2:	2204      	movs	r2, #4
 80133e4:	9201      	str	r2, [sp, #4]
 80133e6:	9300      	str	r3, [sp, #0]
 80133e8:	4623      	mov	r3, r4
 80133ea:	4602      	mov	r2, r0
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f003 fc89 	bl	8016d04 <rfalTransceiveBlockingTx>
 80133f2:	4603      	mov	r3, r0
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd90      	pop	{r4, r7, pc}
 80133fc:	200033e8 	.word	0x200033e8

08013400 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	4603      	mov	r3, r0
 8013408:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 801340a:	79fb      	ldrb	r3, [r7, #7]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d004      	beq.n	801341a <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 8013410:	f003 fcc4 	bl	8016d9c <rfalTransceiveBlockingRx>
 8013414:	4603      	mov	r3, r0
 8013416:	81fb      	strh	r3, [r7, #14]
 8013418:	e003      	b.n	8013422 <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 801341a:	f003 fd3b 	bl	8016e94 <rfalGetTransceiveStatus>
 801341e:	4603      	mov	r3, r0
 8013420:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 8013422:	89fb      	ldrh	r3, [r7, #14]
 8013424:	2b02      	cmp	r3, #2
 8013426:	d028      	beq.n	801347a <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 8013428:	4b16      	ldr	r3, [pc, #88]	; (8013484 <nfcipDataRx+0x84>)
 801342a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801342c:	2b00      	cmp	r3, #0
 801342e:	d024      	beq.n	801347a <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 8013430:	4b14      	ldr	r3, [pc, #80]	; (8013484 <nfcipDataRx+0x84>)
 8013432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013434:	881b      	ldrh	r3, [r3, #0]
 8013436:	3307      	adds	r3, #7
 8013438:	08da      	lsrs	r2, r3, #3
 801343a:	4b12      	ldr	r3, [pc, #72]	; (8013484 <nfcipDataRx+0x84>)
 801343c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801343e:	b292      	uxth	r2, r2
 8013440:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 8013442:	89fb      	ldrh	r3, [r7, #14]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d118      	bne.n	801347a <nfcipDataRx+0x7a>
 8013448:	4b0e      	ldr	r3, [pc, #56]	; (8013484 <nfcipDataRx+0x84>)
 801344a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801344c:	2b00      	cmp	r3, #0
 801344e:	d014      	beq.n	801347a <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 8013450:	4b0c      	ldr	r3, [pc, #48]	; (8013484 <nfcipDataRx+0x84>)
 8013452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013454:	881a      	ldrh	r2, [r3, #0]
 8013456:	4b0b      	ldr	r3, [pc, #44]	; (8013484 <nfcipDataRx+0x84>)
 8013458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	b29b      	uxth	r3, r3
 801345e:	429a      	cmp	r2, r3
 8013460:	d109      	bne.n	8013476 <nfcipDataRx+0x76>
 8013462:	4b08      	ldr	r3, [pc, #32]	; (8013484 <nfcipDataRx+0x84>)
 8013464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013466:	881b      	ldrh	r3, [r3, #0]
 8013468:	2b02      	cmp	r3, #2
 801346a:	d904      	bls.n	8013476 <nfcipDataRx+0x76>
 801346c:	4b05      	ldr	r3, [pc, #20]	; (8013484 <nfcipDataRx+0x84>)
 801346e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013470:	881b      	ldrh	r3, [r3, #0]
 8013472:	2bff      	cmp	r3, #255	; 0xff
 8013474:	d901      	bls.n	801347a <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 8013476:	2309      	movs	r3, #9
 8013478:	e000      	b.n	801347c <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 801347a:	89fb      	ldrh	r3, [r7, #14]
}
 801347c:	4618      	mov	r0, r3
 801347e:	3710      	adds	r7, #16
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	200033e8 	.word	0x200033e8

08013488 <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 8013488:	b082      	sub	sp, #8
 801348a:	b580      	push	{r7, lr}
 801348c:	b09c      	sub	sp, #112	; 0x70
 801348e:	af02      	add	r7, sp, #8
 8013490:	60f8      	str	r0, [r7, #12]
 8013492:	60b9      	str	r1, [r7, #8]
 8013494:	677b      	str	r3, [r7, #116]	; 0x74
 8013496:	4613      	mov	r3, r2
 8013498:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d005      	beq.n	80134ac <rfalNfcDepListenStartActivation+0x24>
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d002      	beq.n	80134ac <rfalNfcDepListenStartActivation+0x24>
 80134a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d101      	bne.n	80134b0 <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 80134ac:	2307      	movs	r3, #7
 80134ae:	e0f4      	b.n	801369a <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 80134b0:	88fb      	ldrh	r3, [r7, #6]
 80134b2:	2200      	movs	r2, #0
 80134b4:	4619      	mov	r1, r3
 80134b6:	68b8      	ldr	r0, [r7, #8]
 80134b8:	f7ff fb0c 	bl	8012ad4 <rfalNfcDepIsAtrReq>
 80134bc:	4603      	mov	r3, r0
 80134be:	f083 0301 	eor.w	r3, r3, #1
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d001      	beq.n	80134cc <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 80134c8:	2307      	movs	r3, #7
 80134ca:	e0e6      	b.n	801369a <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 80134cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80134d0:	88fa      	ldrh	r2, [r7, #6]
 80134d2:	b2d2      	uxtb	r2, r2
 80134d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 80134d8:	88fb      	ldrh	r3, [r7, #6]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d007      	beq.n	80134ee <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 80134de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80134e2:	4618      	mov	r0, r3
 80134e4:	88fb      	ldrh	r3, [r7, #6]
 80134e6:	461a      	mov	r2, r3
 80134e8:	68b9      	ldr	r1, [r7, #8]
 80134ea:	f008 fbe1 	bl	801bcb0 <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 80134ee:	88fb      	ldrh	r3, [r7, #6]
 80134f0:	b2da      	uxtb	r2, r3
 80134f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80134f6:	3a10      	subs	r2, #16
 80134f8:	b2d2      	uxtb	r2, r2
 80134fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 80134fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013502:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013506:	7b12      	ldrb	r2, [r2, #12]
 8013508:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 801350c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013510:	2200      	movs	r2, #0
 8013512:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 8013516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801351a:	7bdb      	ldrb	r3, [r3, #15]
 801351c:	091b      	lsrs	r3, r3, #4
 801351e:	b2da      	uxtb	r2, r3
 8013520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013524:	f002 0203 	and.w	r2, r2, #3
 8013528:	b2d2      	uxtb	r2, r2
 801352a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 801352e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013536:	3301      	adds	r3, #1
 8013538:	019b      	lsls	r3, r3, #6
 801353a:	2bfd      	cmp	r3, #253	; 0xfd
 801353c:	d808      	bhi.n	8013550 <rfalNfcDepListenStartActivation+0xc8>
 801353e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013542:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013546:	3301      	adds	r3, #1
 8013548:	b29b      	uxth	r3, r3
 801354a:	019b      	lsls	r3, r3, #6
 801354c:	b29a      	uxth	r2, r3
 801354e:	e000      	b.n	8013552 <rfalNfcDepListenStartActivation+0xca>
 8013550:	22fe      	movs	r2, #254	; 0xfe
 8013552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 801355a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801355e:	2200      	movs	r2, #0
 8013560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 8013564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013568:	f04f 32ff 	mov.w	r2, #4294967295
 801356c:	649a      	str	r2, [r3, #72]	; 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 801356e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013572:	f04f 32ff 	mov.w	r2, #4294967295
 8013576:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 8013578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801357c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8013580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013584:	3355      	adds	r3, #85	; 0x55
 8013586:	4619      	mov	r1, r3
 8013588:	4610      	mov	r0, r2
 801358a:	f003 f923 	bl	80167d4 <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 801358e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013592:	4a45      	ldr	r2, [pc, #276]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 8013594:	6793      	str	r3, [r2, #120]	; 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 8013596:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801359a:	7b1b      	ldrb	r3, [r3, #12]
 801359c:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 801359e:	2300      	movs	r3, #0
 80135a0:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 80135a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80135a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 80135a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80135ac:	663b      	str	r3, [r7, #96]	; 0x60

    cfg.br = param->brt;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	7b1b      	ldrb	r3, [r3, #12]
 80135b2:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	7adb      	ldrb	r3, [r3, #11]
 80135b8:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	7b9b      	ldrb	r3, [r3, #14]
 80135be:	091b      	lsrs	r3, r3, #4
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	f003 0303 	and.w	r3, r3, #3
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    cfg.gbLen = param->GBtLen;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80135d2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 80135d6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d00b      	beq.n	80135f6 <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	f103 010f 	add.w	r1, r3, #15
 80135e4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80135e8:	461a      	mov	r2, r3
 80135ea:	f107 0314 	add.w	r3, r7, #20
 80135ee:	3312      	adds	r3, #18
 80135f0:	4618      	mov	r0, r3
 80135f2:	f008 fb5d 	bl	801bcb0 <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 80135f6:	230a      	movs	r3, #10
 80135f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	1c5a      	adds	r2, r3, #1
 8013600:	f107 031b 	add.w	r3, r7, #27
 8013604:	6810      	ldr	r0, [r2, #0]
 8013606:	6851      	ldr	r1, [r2, #4]
 8013608:	6018      	str	r0, [r3, #0]
 801360a:	6059      	str	r1, [r3, #4]
 801360c:	8912      	ldrh	r2, [r2, #8]
 801360e:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	7b5b      	ldrb	r3, [r3, #13]
 8013614:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 8013618:	2301      	movs	r3, #1
 801361a:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013622:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 801362a:	f7ff f981 	bl	8012930 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 801362e:	f107 0314 	add.w	r3, r7, #20
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff f80a 	bl	801264c <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 8013638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801363a:	4a1b      	ldr	r2, [pc, #108]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 801363c:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 801363e:	4b1a      	ldr	r3, [pc, #104]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 8013640:	f240 1203 	movw	r2, #259	; 0x103
 8013644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 8013648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801364a:	4a17      	ldr	r2, [pc, #92]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 801364c:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 801364e:	4b16      	ldr	r3, [pc, #88]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 8013650:	2205      	movs	r2, #5
 8013652:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 8013656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013658:	4a13      	ldr	r2, [pc, #76]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 801365a:	6753      	str	r3, [r2, #116]	; 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 801365c:	4b12      	ldr	r3, [pc, #72]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 801365e:	2205      	movs	r2, #5
 8013660:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 8013664:	4b10      	ldr	r3, [pc, #64]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 8013666:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8013668:	f04f 33ff 	mov.w	r3, #4294967295
 801366c:	9301      	str	r3, [sp, #4]
 801366e:	2300      	movs	r3, #0
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	2300      	movs	r3, #0
 8013674:	2200      	movs	r2, #0
 8013676:	2001      	movs	r0, #1
 8013678:	f7fe fe5c 	bl	8012334 <nfcipTx>
 801367c:	4603      	mov	r3, r0
 801367e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8013682:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8013686:	2b00      	cmp	r3, #0
 8013688:	d002      	beq.n	8013690 <rfalNfcDepListenStartActivation+0x208>
 801368a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801368e:	e004      	b.n	801369a <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 8013690:	4b05      	ldr	r3, [pc, #20]	; (80136a8 <rfalNfcDepListenStartActivation+0x220>)
 8013692:	220b      	movs	r2, #11
 8013694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return ERR_NONE;
 8013698:	2300      	movs	r3, #0
}
 801369a:	4618      	mov	r0, r3
 801369c:	3768      	adds	r7, #104	; 0x68
 801369e:	46bd      	mov	sp, r7
 80136a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80136a4:	b002      	add	sp, #8
 80136a6:	4770      	bx	lr
 80136a8:	200033e8 	.word	0x200033e8

080136ac <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b086      	sub	sp, #24
 80136b0:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 80136b2:	23c0      	movs	r3, #192	; 0xc0
 80136b4:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 80136b6:	4b2f      	ldr	r3, [pc, #188]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80136b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136ba:	1d7a      	adds	r2, r7, #5
 80136bc:	4611      	mov	r1, r2
 80136be:	4618      	mov	r0, r3
 80136c0:	f7ff fa3e 	bl	8012b40 <nfcipTargetHandleActivation>
 80136c4:	4603      	mov	r3, r0
 80136c6:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 80136c8:	88fb      	ldrh	r3, [r7, #6]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d002      	beq.n	80136d4 <rfalNfcDepListenGetActivationStatus+0x28>
 80136ce:	2b02      	cmp	r3, #2
 80136d0:	d048      	beq.n	8013764 <rfalNfcDepListenGetActivationStatus+0xb8>
 80136d2:	e034      	b.n	801373e <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 80136d4:	797b      	ldrb	r3, [r7, #5]
 80136d6:	2bc0      	cmp	r3, #192	; 0xc0
 80136d8:	d046      	beq.n	8013768 <rfalNfcDepListenGetActivationStatus+0xbc>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 80136da:	4b26      	ldr	r3, [pc, #152]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80136dc:	785b      	ldrb	r3, [r3, #1]
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d112      	bne.n	8013708 <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 80136e2:	4b24      	ldr	r3, [pc, #144]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80136e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136e6:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 80136ea:	4b22      	ldr	r3, [pc, #136]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 80136ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80136f2:	461a      	mov	r2, r3
 80136f4:	200d      	movs	r0, #13
 80136f6:	f002 fc4f 	bl	8015f98 <rfalSetMode>
 80136fa:	4603      	mov	r3, r0
 80136fc:	80fb      	strh	r3, [r7, #6]
 80136fe:	88fb      	ldrh	r3, [r7, #6]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d031      	beq.n	8013768 <rfalNfcDepListenGetActivationStatus+0xbc>
 8013704:	88fb      	ldrh	r3, [r7, #6]
 8013706:	e031      	b.n	801376c <rfalNfcDepListenGetActivationStatus+0xc0>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 8013708:	4b1a      	ldr	r3, [pc, #104]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 801370a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801370c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8013710:	2b00      	cmp	r3, #0
 8013712:	d101      	bne.n	8013718 <rfalNfcDepListenGetActivationStatus+0x6c>
 8013714:	200a      	movs	r0, #10
 8013716:	e000      	b.n	801371a <rfalNfcDepListenGetActivationStatus+0x6e>
 8013718:	200c      	movs	r0, #12
 801371a:	4b16      	ldr	r3, [pc, #88]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 801371c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801371e:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 8013722:	4b14      	ldr	r3, [pc, #80]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8013724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013726:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801372a:	461a      	mov	r2, r3
 801372c:	f002 fc34 	bl	8015f98 <rfalSetMode>
 8013730:	4603      	mov	r3, r0
 8013732:	80fb      	strh	r3, [r7, #6]
 8013734:	88fb      	ldrh	r3, [r7, #6]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d016      	beq.n	8013768 <rfalNfcDepListenGetActivationStatus+0xbc>
 801373a:	88fb      	ldrh	r3, [r7, #6]
 801373c:	e016      	b.n	801376c <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 801373e:	4b0d      	ldr	r3, [pc, #52]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8013740:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013742:	4b0c      	ldr	r3, [pc, #48]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 8013744:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8013748:	4b0a      	ldr	r3, [pc, #40]	; (8013774 <rfalNfcDepListenGetActivationStatus+0xc8>)
 801374a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801374c:	f04f 30ff 	mov.w	r0, #4294967295
 8013750:	9002      	str	r0, [sp, #8]
 8013752:	2004      	movs	r0, #4
 8013754:	9001      	str	r0, [sp, #4]
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	460b      	mov	r3, r1
 801375a:	2100      	movs	r1, #0
 801375c:	2000      	movs	r0, #0
 801375e:	f003 fad1 	bl	8016d04 <rfalTransceiveBlockingTx>
            break;
 8013762:	e002      	b.n	801376a <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8013764:	bf00      	nop
 8013766:	e000      	b.n	801376a <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 8013768:	bf00      	nop
    }
    
    return err;
 801376a:	88fb      	ldrh	r3, [r7, #6]
}
 801376c:	4618      	mov	r0, r3
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	200033e8 	.word	0x200033e8

08013778 <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( const rfalNfcDepTxRxParam *param )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b08a      	sub	sp, #40	; 0x28
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	889b      	ldrh	r3, [r3, #4]
 801378a:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	799b      	ldrb	r3, [r3, #6]
 8013790:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 8013792:	2305      	movs	r3, #5
 8013794:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 8013796:	23ff      	movs	r3, #255	; 0xff
 8013798:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 801379a:	2305      	movs	r3, #5
 801379c:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	689b      	ldr	r3, [r3, #8]
 80137a2:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 80137a4:	f240 1303 	movw	r3, #259	; 0x103
 80137a8:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	8b9b      	ldrh	r3, [r3, #28]
 80137ae:	84bb      	strh	r3, [r7, #36]	; 0x24
    nfcDepParams.fwt          = param->FWT;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	695b      	ldr	r3, [r3, #20]
 80137b4:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	699b      	ldr	r3, [r3, #24]
 80137ba:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	4a07      	ldr	r2, [pc, #28]	; (80137e0 <rfalNfcDepStartTransceive+0x68>)
 80137c2:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	691b      	ldr	r3, [r3, #16]
 80137c8:	4a05      	ldr	r2, [pc, #20]	; (80137e0 <rfalNfcDepStartTransceive+0x68>)
 80137ca:	6753      	str	r3, [r2, #116]	; 0x74

    nfcipSetDEPParams(&nfcDepParams);
 80137cc:	f107 0308 	add.w	r3, r7, #8
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff f917 	bl	8012a04 <nfcipSetDEPParams>
    
    return ERR_NONE;
 80137d6:	2300      	movs	r3, #0
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3728      	adds	r7, #40	; 0x28
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	200033e8 	.word	0x200033e8

080137e4 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 80137e8:	4b05      	ldr	r3, [pc, #20]	; (8013800 <rfalNfcDepGetTransceiveStatus+0x1c>)
 80137ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137ec:	4a04      	ldr	r2, [pc, #16]	; (8013800 <rfalNfcDepGetTransceiveStatus+0x1c>)
 80137ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80137f0:	4611      	mov	r1, r2
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fe ff6c 	bl	80126d0 <nfcipRun>
 80137f8:	4603      	mov	r3, r0
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	200033e8 	.word	0x200033e8

08013804 <rfalNfcDepPdu2BLockParam>:



 /*******************************************************************************/
 static void rfalNfcDepPdu2BLockParam( rfalNfcDepPduTxRxParam pduParam, rfalNfcDepTxRxParam *blockParam, uint16_t txPos, uint16_t rxPos )
{
 8013804:	b084      	sub	sp, #16
 8013806:	b480      	push	{r7}
 8013808:	b083      	sub	sp, #12
 801380a:	af00      	add	r7, sp, #0
 801380c:	f107 0c10 	add.w	ip, r7, #16
 8013810:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint16_t maxInfLen;
    
    NO_WARNING(rxPos); /* Keep this param for future use */

    blockParam->DID    = pduParam.DID;
 8013814:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381a:	779a      	strb	r2, [r3, #30]
    blockParam->FSx    = pduParam.FSx;
 801381c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013820:	839a      	strh	r2, [r3, #28]
    blockParam->FWT    = pduParam.FWT;
 8013822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013826:	615a      	str	r2, [r3, #20]
    blockParam->dFWT   = pduParam.dFWT;
 8013828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382c:	619a      	str	r2, [r3, #24]

    /* Calculate max INF/Payload to be sent to other device */
    maxInfLen  = (blockParam->FSx - (RFAL_NFCDEP_HEADER + RFAL_NFCDEP_DEP_PFB_LEN));
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	8b9b      	ldrh	r3, [r3, #28]
 8013832:	3b03      	subs	r3, #3
 8013834:	80fb      	strh	r3, [r7, #6]
    maxInfLen += ((blockParam->DID != RFAL_NFCDEP_DID_NO) ? RFAL_NFCDEP_DID_LEN : 0U);
 8013836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013838:	7f9b      	ldrb	r3, [r3, #30]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d001      	beq.n	8013842 <rfalNfcDepPdu2BLockParam+0x3e>
 801383e:	2201      	movs	r2, #1
 8013840:	e000      	b.n	8013844 <rfalNfcDepPdu2BLockParam+0x40>
 8013842:	2200      	movs	r2, #0
 8013844:	88fb      	ldrh	r3, [r7, #6]
 8013846:	4413      	add	r3, r2
 8013848:	80fb      	strh	r3, [r7, #6]


    if( (pduParam.txBufLen - txPos) > maxInfLen )
 801384a:	8abb      	ldrh	r3, [r7, #20]
 801384c:	461a      	mov	r2, r3
 801384e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013850:	1ad2      	subs	r2, r2, r3
 8013852:	88fb      	ldrh	r3, [r7, #6]
 8013854:	429a      	cmp	r2, r3
 8013856:	dd06      	ble.n	8013866 <rfalNfcDepPdu2BLockParam+0x62>
    {
        blockParam->isTxChaining = true;
 8013858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385a:	2201      	movs	r2, #1
 801385c:	719a      	strb	r2, [r3, #6]
        blockParam->txBufLen     = maxInfLen;
 801385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013860:	88fa      	ldrh	r2, [r7, #6]
 8013862:	809a      	strh	r2, [r3, #4]
 8013864:	e008      	b.n	8013878 <rfalNfcDepPdu2BLockParam+0x74>
    }
    else
    {
        blockParam->isTxChaining = false;
 8013866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013868:	2200      	movs	r2, #0
 801386a:	719a      	strb	r2, [r3, #6]
        blockParam->txBufLen     = (pduParam.txBufLen - txPos);
 801386c:	8aba      	ldrh	r2, [r7, #20]
 801386e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013870:	1ad3      	subs	r3, r2, r3
 8013872:	b29a      	uxth	r2, r3
 8013874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013876:	809a      	strh	r2, [r3, #4]
    }

    /* TxBuf is moved to the beginning for every Block */
    blockParam->txBuf        = (rfalNfcDepBufFormat*)pduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8013878:	693a      	ldr	r2, [r7, #16]
 801387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387c:	601a      	str	r2, [r3, #0]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 801387e:	6a3a      	ldr	r2, [r7, #32]
 8013880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013882:	609a      	str	r2, [r3, #8]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 8013884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013886:	4a05      	ldr	r2, [pc, #20]	; (801389c <rfalNfcDepPdu2BLockParam+0x98>)
 8013888:	611a      	str	r2, [r3, #16]
    blockParam->rxLen        = pduParam.rxLen;
 801388a:	69fa      	ldr	r2, [r7, #28]
 801388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388e:	60da      	str	r2, [r3, #12]
}
 8013890:	bf00      	nop
 8013892:	370c      	adds	r7, #12
 8013894:	46bd      	mov	sp, r7
 8013896:	bc80      	pop	{r7}
 8013898:	b004      	add	sp, #16
 801389a:	4770      	bx	lr
 801389c:	20003494 	.word	0x20003494

080138a0 <rfalNfcDepStartPduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepStartPduTransceive( rfalNfcDepPduTxRxParam param )
{
 80138a0:	b084      	sub	sp, #16
 80138a2:	b5b0      	push	{r4, r5, r7, lr}
 80138a4:	b090      	sub	sp, #64	; 0x40
 80138a6:	af08      	add	r7, sp, #32
 80138a8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80138ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalNfcDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gNfcip.PDUParam = param;
 80138b0:	4b1a      	ldr	r3, [pc, #104]	; (801391c <rfalNfcDepStartPduTransceive+0x7c>)
 80138b2:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80138b6:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80138ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80138c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    gNfcip.PDUTxPos = 0;
 80138c6:	4b15      	ldr	r3, [pc, #84]	; (801391c <rfalNfcDepStartPduTransceive+0x7c>)
 80138c8:	2200      	movs	r2, #0
 80138ca:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
    gNfcip.PDURxPos = 0;
 80138ce:	4b13      	ldr	r3, [pc, #76]	; (801391c <rfalNfcDepStartPduTransceive+0x7c>)
 80138d0:	2200      	movs	r2, #0
 80138d2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    
    /* Convert PDU TxRxParams to Block TxRxParams */
    rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 80138d6:	4b11      	ldr	r3, [pc, #68]	; (801391c <rfalNfcDepStartPduTransceive+0x7c>)
 80138d8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80138dc:	4a0f      	ldr	r2, [pc, #60]	; (801391c <rfalNfcDepStartPduTransceive+0x7c>)
 80138de:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 80138e2:	4d0e      	ldr	r5, [pc, #56]	; (801391c <rfalNfcDepStartPduTransceive+0x7c>)
 80138e4:	9206      	str	r2, [sp, #24]
 80138e6:	9305      	str	r3, [sp, #20]
 80138e8:	463b      	mov	r3, r7
 80138ea:	9304      	str	r3, [sp, #16]
 80138ec:	466c      	mov	r4, sp
 80138ee:	f105 0398 	add.w	r3, r5, #152	; 0x98
 80138f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80138f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80138f8:	f105 0388 	add.w	r3, r5, #136	; 0x88
 80138fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80138fe:	f7ff ff81 	bl	8013804 <rfalNfcDepPdu2BLockParam>
    
    return rfalNfcDepStartTransceive( &txRxParam );
 8013902:	463b      	mov	r3, r7
 8013904:	4618      	mov	r0, r3
 8013906:	f7ff ff37 	bl	8013778 <rfalNfcDepStartTransceive>
 801390a:	4603      	mov	r3, r0
}
 801390c:	4618      	mov	r0, r3
 801390e:	3720      	adds	r7, #32
 8013910:	46bd      	mov	sp, r7
 8013912:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8013916:	b004      	add	sp, #16
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop
 801391c:	200033e8 	.word	0x200033e8

08013920 <rfalNfcDepGetPduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepGetPduTransceiveStatus( void )
{
 8013920:	b5b0      	push	{r4, r5, r7, lr}
 8013922:	b092      	sub	sp, #72	; 0x48
 8013924:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalNfcDepTxRxParam txRxParam;
    
    ret = rfalNfcDepGetTransceiveStatus();
 8013926:	f7ff ff5d 	bl	80137e4 <rfalNfcDepGetTransceiveStatus>
 801392a:	4603      	mov	r3, r0
 801392c:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 801392e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013930:	2b00      	cmp	r3, #0
 8013932:	d004      	beq.n	801393e <rfalNfcDepGetPduTransceiveStatus+0x1e>
 8013934:	2b0d      	cmp	r3, #13
 8013936:	d048      	beq.n	80139ca <rfalNfcDepGetPduTransceiveStatus+0xaa>
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
        
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8013938:	bf00      	nop
    }
    
    return ret;
 801393a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801393c:	e091      	b.n	8013a62 <rfalNfcDepGetPduTransceiveStatus+0x142>
            if( gNfcip.isTxChaining )
 801393e:	4b4b      	ldr	r3, [pc, #300]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013940:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8013944:	2b00      	cmp	r3, #0
 8013946:	d040      	beq.n	80139ca <rfalNfcDepGetPduTransceiveStatus+0xaa>
                gNfcip.PDUTxPos += gNfcip.txBufLen;
 8013948:	4b48      	ldr	r3, [pc, #288]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 801394a:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 801394e:	4b47      	ldr	r3, [pc, #284]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013950:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013954:	4413      	add	r3, r2
 8013956:	b29a      	uxth	r2, r3
 8013958:	4b44      	ldr	r3, [pc, #272]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 801395a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
                rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 801395e:	4b43      	ldr	r3, [pc, #268]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013960:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8013964:	4a41      	ldr	r2, [pc, #260]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013966:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 801396a:	4d40      	ldr	r5, [pc, #256]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 801396c:	9206      	str	r2, [sp, #24]
 801396e:	9305      	str	r3, [sp, #20]
 8013970:	1d3b      	adds	r3, r7, #4
 8013972:	9304      	str	r3, [sp, #16]
 8013974:	466c      	mov	r4, sp
 8013976:	f105 0398 	add.w	r3, r5, #152	; 0x98
 801397a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801397c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013980:	f105 0388 	add.w	r3, r5, #136	; 0x88
 8013984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013986:	f7ff ff3d 	bl	8013804 <rfalNfcDepPdu2BLockParam>
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 801398a:	893b      	ldrh	r3, [r7, #8]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00f      	beq.n	80139b0 <rfalNfcDepGetPduTransceiveStatus+0x90>
                    ST_MEMCPY( gNfcip.PDUParam.txBuf->pdu, &gNfcip.PDUParam.txBuf->pdu[gNfcip.PDUTxPos], txRxParam.txBufLen );
 8013990:	4b36      	ldr	r3, [pc, #216]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013996:	1d58      	adds	r0, r3, #5
 8013998:	4b34      	ldr	r3, [pc, #208]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 801399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801399e:	4a33      	ldr	r2, [pc, #204]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 80139a0:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 80139a4:	4413      	add	r3, r2
 80139a6:	3305      	adds	r3, #5
 80139a8:	893a      	ldrh	r2, [r7, #8]
 80139aa:	4619      	mov	r1, r3
 80139ac:	f008 f980 	bl	801bcb0 <memcpy>
                EXIT_ON_ERR( ret, rfalNfcDepStartTransceive( &txRxParam ) );
 80139b0:	1d3b      	adds	r3, r7, #4
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7ff fee0 	bl	8013778 <rfalNfcDepStartTransceive>
 80139b8:	4603      	mov	r3, r0
 80139ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80139bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d001      	beq.n	80139c6 <rfalNfcDepGetPduTransceiveStatus+0xa6>
 80139c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80139c4:	e04d      	b.n	8013a62 <rfalNfcDepGetPduTransceiveStatus+0x142>
                return ERR_BUSY;
 80139c6:	2302      	movs	r3, #2
 80139c8:	e04b      	b.n	8013a62 <rfalNfcDepGetPduTransceiveStatus+0x142>
            if( gNfcip.PDUParam.rxLen == NULL )
 80139ca:	4b28      	ldr	r3, [pc, #160]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 80139cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d106      	bne.n	80139e2 <rfalNfcDepGetPduTransceiveStatus+0xc2>
                if( ret == ERR_AGAIN  )
 80139d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80139d6:	2b0d      	cmp	r3, #13
 80139d8:	d101      	bne.n	80139de <rfalNfcDepGetPduTransceiveStatus+0xbe>
                    return ERR_NOTSUPP;
 80139da:	2318      	movs	r3, #24
 80139dc:	e041      	b.n	8013a62 <rfalNfcDepGetPduTransceiveStatus+0x142>
                return ERR_NONE;
 80139de:	2300      	movs	r3, #0
 80139e0:	e03f      	b.n	8013a62 <rfalNfcDepGetPduTransceiveStatus+0x142>
            if( (*gNfcip.PDUParam.rxLen) > 0U )    /* MISRA 21.18 */
 80139e2:	4b22      	ldr	r3, [pc, #136]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 80139e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80139e8:	881b      	ldrh	r3, [r3, #0]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d02c      	beq.n	8013a48 <rfalNfcDepGetPduTransceiveStatus+0x128>
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 80139ee:	4b1f      	ldr	r3, [pc, #124]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 80139f0:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 80139f4:	4b1d      	ldr	r3, [pc, #116]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 80139f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80139fa:	881b      	ldrh	r3, [r3, #0]
 80139fc:	4413      	add	r3, r2
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a04:	d901      	bls.n	8013a0a <rfalNfcDepGetPduTransceiveStatus+0xea>
                    return ERR_NOMEM;
 8013a06:	2301      	movs	r3, #1
 8013a08:	e02b      	b.n	8013a62 <rfalNfcDepGetPduTransceiveStatus+0x142>
                ST_MEMCPY( &gNfcip.PDUParam.rxBuf->pdu[gNfcip.PDURxPos], gNfcip.PDUParam.tmpBuf->inf, *gNfcip.PDUParam.rxLen );
 8013a0a:	4b18      	ldr	r3, [pc, #96]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a10:	4a16      	ldr	r2, [pc, #88]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a12:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 8013a16:	4413      	add	r3, r2
 8013a18:	1d58      	adds	r0, r3, #5
 8013a1a:	4b14      	ldr	r3, [pc, #80]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013a20:	1d59      	adds	r1, r3, #5
 8013a22:	4b12      	ldr	r3, [pc, #72]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	f008 f940 	bl	801bcb0 <memcpy>
                gNfcip.PDURxPos += *gNfcip.PDUParam.rxLen;
 8013a30:	4b0e      	ldr	r3, [pc, #56]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a32:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 8013a36:	4b0d      	ldr	r3, [pc, #52]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a3c:	881b      	ldrh	r3, [r3, #0]
 8013a3e:	4413      	add	r3, r2
 8013a40:	b29a      	uxth	r2, r3
 8013a42:	4b0a      	ldr	r3, [pc, #40]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a44:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
            *gNfcip.PDUParam.rxLen = gNfcip.PDURxPos;
 8013a48:	4b08      	ldr	r3, [pc, #32]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a4e:	4a07      	ldr	r2, [pc, #28]	; (8013a6c <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 8013a50:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 8013a54:	801a      	strh	r2, [r3, #0]
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
 8013a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a58:	2b0d      	cmp	r3, #13
 8013a5a:	d101      	bne.n	8013a60 <rfalNfcDepGetPduTransceiveStatus+0x140>
 8013a5c:	2302      	movs	r3, #2
 8013a5e:	e000      	b.n	8013a62 <rfalNfcDepGetPduTransceiveStatus+0x142>
 8013a60:	2300      	movs	r3, #0
 }
 8013a62:	4618      	mov	r0, r3
 8013a64:	3728      	adds	r7, #40	; 0x28
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bdb0      	pop	{r4, r5, r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	200033e8 	.word	0x200033e8

08013a70 <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 8013a70:	b480      	push	{r7}
 8013a72:	b085      	sub	sp, #20
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	460b      	mov	r3, r1
 8013a7a:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 8013a80:	2300      	movs	r3, #0
 8013a82:	73fb      	strb	r3, [r7, #15]
 8013a84:	e009      	b.n	8013a9a <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 8013a86:	7bfb      	ldrb	r3, [r7, #15]
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	781a      	ldrb	r2, [r3, #0]
 8013a8e:	7bbb      	ldrb	r3, [r7, #14]
 8013a90:	4053      	eors	r3, r2
 8013a92:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 8013a94:	7bfb      	ldrb	r3, [r7, #15]
 8013a96:	3301      	adds	r3, #1
 8013a98:	73fb      	strb	r3, [r7, #15]
 8013a9a:	7bfa      	ldrb	r2, [r7, #15]
 8013a9c:	78fb      	ldrb	r3, [r7, #3]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d3f1      	bcc.n	8013a86 <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 8013aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3714      	adds	r7, #20
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bc80      	pop	{r7}
 8013aac:	4770      	bx	lr
	...

08013ab0 <rfalNfcaPollerStartSingleCollisionResolution>:

/*******************************************************************************/
static ReturnCode rfalNfcaPollerStartSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b084      	sub	sp, #16
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	60b9      	str	r1, [r7, #8]
 8013ab8:	607a      	str	r2, [r7, #4]
 8013aba:	603b      	str	r3, [r7, #0]
 8013abc:	4603      	mov	r3, r0
 8013abe:	73fb      	strb	r3, [r7, #15]
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d008      	beq.n	8013ad8 <rfalNfcaPollerStartSingleCollisionResolution+0x28>
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d005      	beq.n	8013ad8 <rfalNfcaPollerStartSingleCollisionResolution+0x28>
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d002      	beq.n	8013ad8 <rfalNfcaPollerStartSingleCollisionResolution+0x28>
 8013ad2:	69bb      	ldr	r3, [r7, #24]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d101      	bne.n	8013adc <rfalNfcaPollerStartSingleCollisionResolution+0x2c>
    {
        return ERR_PARAM;
 8013ad8:	2307      	movs	r3, #7
 8013ada:	e031      	b.n	8013b40 <rfalNfcaPollerStartSingleCollisionResolution+0x90>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 8013ae8:	220a      	movs	r2, #10
 8013aea:	2100      	movs	r1, #0
 8013aec:	6838      	ldr	r0, [r7, #0]
 8013aee:	f008 f907 	bl	801bd00 <memset>
    
    
    /* Save parameters */
    gNfca.CR.devLimit    = devLimit;
 8013af2:	4a15      	ldr	r2, [pc, #84]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013af4:	7bfb      	ldrb	r3, [r7, #15]
 8013af6:	7013      	strb	r3, [r2, #0]
    gNfca.CR.collPend    = collPending;
 8013af8:	4a13      	ldr	r2, [pc, #76]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	6113      	str	r3, [r2, #16]
    gNfca.CR.selRes      = selRes;
 8013afe:	4a12      	ldr	r2, [pc, #72]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	61d3      	str	r3, [r2, #28]
    gNfca.CR.nfcId1      = nfcId1;
 8013b04:	4a10      	ldr	r2, [pc, #64]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	6213      	str	r3, [r2, #32]
    gNfca.CR.nfcId1Len   = nfcId1Len;
 8013b0a:	4a0f      	ldr	r2, [pc, #60]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b0c:	69bb      	ldr	r3, [r7, #24]
 8013b0e:	6253      	str	r3, [r2, #36]	; 0x24

    platformTimerDestroy( gNfca.CR.tmrFDT );
    gNfca.CR.tmrFDT      = 0U;
 8013b10:	4b0d      	ldr	r3, [pc, #52]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b12:	2200      	movs	r2, #0
 8013b14:	631a      	str	r2, [r3, #48]	; 0x30
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
 8013b16:	4b0c      	ldr	r3, [pc, #48]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b18:	2202      	movs	r2, #2
 8013b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    gNfca.CR.cascadeLv   = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1;
 8013b1e:	4b0a      	ldr	r3, [pc, #40]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b20:	2200      	movs	r2, #0
 8013b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    gNfca.CR.state       = RFAL_NFCA_CR_CL;
 8013b26:	4b08      	ldr	r3, [pc, #32]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b28:	2201      	movs	r2, #1
 8013b2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   
    gNfca.CR.doBacktrack  = false;
 8013b2e:	4b06      	ldr	r3, [pc, #24]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b30:	2200      	movs	r2, #0
 8013b32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    gNfca.CR.backtrackCnt = 3U;
 8013b36:	4b04      	ldr	r3, [pc, #16]	; (8013b48 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 8013b38:	2203      	movs	r2, #3
 8013b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    return ERR_NONE;
 8013b3e:	2300      	movs	r3, #0
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	20003498 	.word	0x20003498

08013b4c <rfalNfcaPollerGetSingleCollisionResolutionStatus>:


/*******************************************************************************/
static ReturnCode rfalNfcaPollerGetSingleCollisionResolutionStatus( void )
{
 8013b4c:	b590      	push	{r4, r7, lr}
 8013b4e:	b087      	sub	sp, #28
 8013b50:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    collBit = 1U;  /* standards mandate or recommend collision bit to be set to One. */
 8013b52:	2301      	movs	r3, #1
 8013b54:	717b      	strb	r3, [r7, #5]
    
    
    /* Check if FDT timer is still running */
    if( !platformTimerIsExpired( gNfca.CR.tmrFDT ) && (gNfca.CR.tmrFDT != 0U) )
 8013b56:	4baf      	ldr	r3, [pc, #700]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f008 f85a 	bl	801bc14 <timerIsExpired>
 8013b60:	4603      	mov	r3, r0
 8013b62:	f083 0301 	eor.w	r3, r3, #1
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d005      	beq.n	8013b78 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c>
 8013b6c:	4ba9      	ldr	r3, [pc, #676]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d001      	beq.n	8013b78 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c>
    {
        return ERR_BUSY;
 8013b74:	2302      	movs	r3, #2
 8013b76:	e228      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
    }
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */    
    if( gNfca.CR.cascadeLv > (uint8_t)RFAL_NFCA_SEL_CASCADE_L3 )
 8013b78:	4ba6      	ldr	r3, [pc, #664]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d901      	bls.n	8013b86 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3a>
    {
        return ERR_INTERNAL;
 8013b82:	230c      	movs	r3, #12
 8013b84:	e221      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
    }
    
    switch( gNfca.CR.state )
 8013b86:	4ba3      	ldr	r3, [pc, #652]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013b88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013b8c:	3b01      	subs	r3, #1
 8013b8e:	2b03      	cmp	r3, #3
 8013b90:	f200 8217 	bhi.w	8013fc2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x476>
 8013b94:	a201      	add	r2, pc, #4	; (adr r2, 8013b9c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x50>)
 8013b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b9a:	bf00      	nop
 8013b9c:	08013bad 	.word	0x08013bad
 8013ba0:	08013bcf 	.word	0x08013bcf
 8013ba4:	08013edd 	.word	0x08013edd
 8013ba8:	08013fbf 	.word	0x08013fbf
    {
        /*******************************************************************************/
        case RFAL_NFCA_CR_CL:
            
            /* Initialize the SDD_REQ to send for the new cascade level */
            ST_MEMSET( (uint8_t*)&gNfca.CR.selReq, 0x00, sizeof(rfalNfcaSelReq) );
 8013bac:	2207      	movs	r2, #7
 8013bae:	2100      	movs	r1, #0
 8013bb0:	4899      	ldr	r0, [pc, #612]	; (8013e18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 8013bb2:	f008 f8a5 	bl	801bd00 <memset>
        
            gNfca.CR.bytesTxRx = RFAL_NFCA_SDD_REQ_LEN;
 8013bb6:	4b97      	ldr	r3, [pc, #604]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013bb8:	2202      	movs	r2, #2
 8013bba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            gNfca.CR.bitsTxRx  = 0U;
 8013bbe:	4b95      	ldr	r3, [pc, #596]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            gNfca.CR.state     = RFAL_NFCA_CR_SDD;
 8013bc6:	4b93      	ldr	r3, [pc, #588]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013bc8:	2202      	movs	r2, #2
 8013bca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        
        /*******************************************************************************/
        case RFAL_NFCA_CR_SDD:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Calculate SEL_CMD and SEL_PAR with the bytes/bits to be sent */
            gNfca.CR.selReq.selCmd = rfalNfcaCLn2SELCMD( gNfca.CR.cascadeLv );
 8013bce:	4b91      	ldr	r3, [pc, #580]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bd4:	005b      	lsls	r3, r3, #1
 8013bd6:	b2db      	uxtb	r3, r3
 8013bd8:	3b6d      	subs	r3, #109	; 0x6d
 8013bda:	b2da      	uxtb	r2, r3
 8013bdc:	4b8d      	ldr	r3, [pc, #564]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013bde:	751a      	strb	r2, [r3, #20]
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 8013be0:	4b8c      	ldr	r3, [pc, #560]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013be2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013be6:	011b      	lsls	r3, r3, #4
 8013be8:	b2da      	uxtb	r2, r3
 8013bea:	4b8a      	ldr	r3, [pc, #552]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013bec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013bf0:	f003 030f 	and.w	r3, r3, #15
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	b2da      	uxtb	r2, r3
 8013bfa:	4b86      	ldr	r3, [pc, #536]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013bfc:	755a      	strb	r2, [r3, #21]
        
            /* Send SDD_REQ (Anticollision frame) */
            ret = rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&gNfca.CR.selReq, &gNfca.CR.bytesTxRx, &gNfca.CR.bitsTxRx, &gNfca.CR.rxLen, RFAL_NFCA_FDTMIN );
 8013bfe:	f240 6354 	movw	r3, #1620	; 0x654
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	4b85      	ldr	r3, [pc, #532]	; (8013e1c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2d0>)
 8013c06:	4a86      	ldr	r2, [pc, #536]	; (8013e20 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2d4>)
 8013c08:	4986      	ldr	r1, [pc, #536]	; (8013e24 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2d8>)
 8013c0a:	4883      	ldr	r0, [pc, #524]	; (8013e18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 8013c0c:	f004 f9b4 	bl	8017f78 <rfalISO14443ATransceiveAnticollisionFrame>
 8013c10:	4603      	mov	r3, r0
 8013c12:	80fb      	strh	r3, [r7, #6]

            /* Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            if( (ret == ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 8013c14:	88fb      	ldrh	r3, [r7, #6]
 8013c16:	2b04      	cmp	r3, #4
 8013c18:	d117      	bne.n	8013c4a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xfe>
 8013c1a:	4b7e      	ldr	r3, [pc, #504]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d113      	bne.n	8013c4a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xfe>
 8013c22:	4b7c      	ldr	r3, [pc, #496]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d00e      	beq.n	8013c4a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xfe>
            {
                gNfca.CR.retries--;
 8013c2c:	4b79      	ldr	r3, [pc, #484]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c32:	3b01      	subs	r3, #1
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	4b77      	ldr	r3, [pc, #476]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                platformTimerDestroy( gNfca.CR.tmrFDT );
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 8013c3c:	2005      	movs	r0, #5
 8013c3e:	f007 ffdb 	bl	801bbf8 <timerCalculateTimer>
 8013c42:	4603      	mov	r3, r0
 8013c44:	4a73      	ldr	r2, [pc, #460]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c46:	6313      	str	r3, [r2, #48]	; 0x30
                break;
 8013c48:	e1be      	b.n	8013fc8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
            }
            
            /* Covert rxLen into bytes */
            gNfca.CR.rxLen = rfalConvBitsToBytes( gNfca.CR.rxLen );
 8013c4a:	4b72      	ldr	r3, [pc, #456]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013c4e:	3307      	adds	r3, #7
 8013c50:	08db      	lsrs	r3, r3, #3
 8013c52:	b29a      	uxth	r2, r3
 8013c54:	4b6f      	ldr	r3, [pc, #444]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c56:	859a      	strh	r2, [r3, #44]	; 0x2c
            
            
            if( (ret == ERR_TIMEOUT) && (gNfca.CR.backtrackCnt != 0U) && (!gNfca.CR.doBacktrack)
 8013c58:	88fb      	ldrh	r3, [r7, #6]
 8013c5a:	2b04      	cmp	r3, #4
 8013c5c:	d15b      	bne.n	8013d16 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
 8013c5e:	4b6d      	ldr	r3, [pc, #436]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d056      	beq.n	8013d16 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
 8013c68:	4b6a      	ldr	r3, [pc, #424]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c6a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013c6e:	f083 0301 	eor.w	r3, r3, #1
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d04e      	beq.n	8013d16 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
                && !((RFAL_NFCA_SDD_REQ_LEN == gNfca.CR.bytesTxRx) && (0U == gNfca.CR.bitsTxRx))     )
 8013c78:	4b66      	ldr	r3, [pc, #408]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c7a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	d104      	bne.n	8013c8c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x140>
 8013c82:	4b64      	ldr	r3, [pc, #400]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c84:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d044      	beq.n	8013d16 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 8013c8c:	231d      	movs	r3, #29
 8013c8e:	80fb      	strh	r3, [r7, #6]
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 8013c90:	463b      	mov	r3, r7
 8013c92:	4619      	mov	r1, r3
 8013c94:	2026      	movs	r0, #38	; 0x26
 8013c96:	f000 f9cb 	bl	8014030 <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == gNfca.CR.bitsTxRx)
 8013c9a:	4b5e      	ldr	r3, [pc, #376]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013c9c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d10c      	bne.n	8013cbe <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x172>
                {
                    gNfca.CR.bitsTxRx = 7;
 8013ca4:	4b5b      	ldr	r3, [pc, #364]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013ca6:	2207      	movs	r2, #7
 8013ca8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                    gNfca.CR.bytesTxRx--;
 8013cac:	4b59      	ldr	r3, [pc, #356]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013cae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	b2da      	uxtb	r2, r3
 8013cb6:	4b57      	ldr	r3, [pc, #348]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013cb8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8013cbc:	e007      	b.n	8013cce <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x182>
                }
                else
                {
                    gNfca.CR.bitsTxRx--;
 8013cbe:	4b55      	ldr	r3, [pc, #340]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013cc0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013cc4:	3b01      	subs	r3, #1
 8013cc6:	b2da      	uxtb	r2, r3
 8013cc8:	4b52      	ldr	r3, [pc, #328]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013cca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                }
                collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) );
 8013cce:	4b51      	ldr	r3, [pc, #324]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013cd0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	4b50      	ldr	r3, [pc, #320]	; (8013e18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 8013cd8:	4413      	add	r3, r2
 8013cda:	781a      	ldrb	r2, [r3, #0]
 8013cdc:	4b4d      	ldr	r3, [pc, #308]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013cde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	408b      	lsls	r3, r1
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	4013      	ands	r3, r2
 8013cec:	717b      	strb	r3, [r7, #5]
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 8013cee:	797b      	ldrb	r3, [r7, #5]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d101      	bne.n	8013cf8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ac>
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	e000      	b.n	8013cfa <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ae>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	717b      	strb	r3, [r7, #5]
                gNfca.CR.doBacktrack = true;
 8013cfc:	4b45      	ldr	r3, [pc, #276]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                gNfca.CR.backtrackCnt--;
 8013d04:	4b43      	ldr	r3, [pc, #268]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	b2da      	uxtb	r2, r3
 8013d0e:	4b41      	ldr	r3, [pc, #260]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            {
 8013d14:	e003      	b.n	8013d1e <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1d2>
            }
            else
            {
                gNfca.CR.doBacktrack = false;
 8013d16:	4b3f      	ldr	r3, [pc, #252]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d18:	2200      	movs	r2, #0
 8013d1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            if( ret == ERR_RF_COLLISION )
 8013d1e:	88fb      	ldrh	r3, [r7, #6]
 8013d20:	2b1d      	cmp	r3, #29
 8013d22:	f040 80b5 	bne.w	8013e90 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x344>
            {
                /* Check received length */
                if( (gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 8013d26:	4b3b      	ldr	r3, [pc, #236]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d28:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	4b39      	ldr	r3, [pc, #228]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d30:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d001      	beq.n	8013d3c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1f0>
 8013d38:	2301      	movs	r3, #1
 8013d3a:	e000      	b.n	8013d3e <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1f2>
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	4413      	add	r3, r2
 8013d40:	2b07      	cmp	r3, #7
 8013d42:	d901      	bls.n	8013d48 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1fc>
                {
                    return ERR_PROTO;
 8013d44:	230b      	movs	r3, #11
 8013d46:	e140      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
                }

                if( ((gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (gNfca.CR.backtrackCnt != 0U) )
 8013d48:	4b32      	ldr	r3, [pc, #200]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013d4e:	461a      	mov	r2, r3
 8013d50:	4b30      	ldr	r3, [pc, #192]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d001      	beq.n	8013d5e <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x212>
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	e000      	b.n	8013d60 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x214>
 8013d5e:	2300      	movs	r3, #0
 8013d60:	4413      	add	r3, r2
 8013d62:	2b06      	cmp	r3, #6
 8013d64:	d924      	bls.n	8013db0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x264>
 8013d66:	4b2b      	ldr	r3, [pc, #172]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d01f      	beq.n	8013db0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x264>
                { /* Collision in BCC: Anticollide only UID part */
                    gNfca.CR.backtrackCnt--;
 8013d70:	4b28      	ldr	r3, [pc, #160]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013d76:	3b01      	subs	r3, #1
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	4b26      	ldr	r3, [pc, #152]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    gNfca.CR.bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 8013d80:	4b24      	ldr	r3, [pc, #144]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d82:	2205      	movs	r2, #5
 8013d84:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    gNfca.CR.bitsTxRx = 7;
 8013d88:	4b22      	ldr	r3, [pc, #136]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d8a:	2207      	movs	r2, #7
 8013d8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 8013d90:	4b20      	ldr	r3, [pc, #128]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013d92:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013d96:	461a      	mov	r2, r3
 8013d98:	4b1f      	ldr	r3, [pc, #124]	; (8013e18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 8013d9a:	4413      	add	r3, r2
 8013d9c:	781a      	ldrb	r2, [r3, #0]
 8013d9e:	4b1d      	ldr	r3, [pc, #116]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013da0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013da4:	4619      	mov	r1, r3
 8013da6:	2301      	movs	r3, #1
 8013da8:	408b      	lsls	r3, r1
 8013daa:	b2db      	uxtb	r3, r3
 8013dac:	4013      	ands	r3, r2
 8013dae:	717b      	strb	r3, [r7, #5]
                }
                
                if( (gNfca.CR.devLimit == 0U) && !(*gNfca.CR.collPend) )
 8013db0:	4b18      	ldr	r3, [pc, #96]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d10d      	bne.n	8013dd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x288>
 8013db8:	4b16      	ldr	r3, [pc, #88]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013dba:	691b      	ldr	r3, [r3, #16]
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	f083 0301 	eor.w	r3, r3, #1
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d005      	beq.n	8013dd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x288>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *gNfca.CR.collPend = true;
 8013dc8:	4b12      	ldr	r3, [pc, #72]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013dca:	691b      	ldr	r3, [r3, #16]
 8013dcc:	2201      	movs	r2, #1
 8013dce:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 8013dd0:	2312      	movs	r3, #18
 8013dd2:	e0fa      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
                }
                
                *gNfca.CR.collPend = true;
 8013dd4:	4b0f      	ldr	r3, [pc, #60]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013dd6:	691b      	ldr	r3, [r3, #16]
 8013dd8:	2201      	movs	r2, #1
 8013dda:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 8013ddc:	797b      	ldrb	r3, [r7, #5]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d022      	beq.n	8013e28 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2dc>
                {
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] | (1U << gNfca.CR.bitsTxRx));   /* MISRA 10.3 */
 8013de2:	4b0c      	ldr	r3, [pc, #48]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013de4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013de8:	461a      	mov	r2, r3
 8013dea:	4b0b      	ldr	r3, [pc, #44]	; (8013e18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 8013dec:	4413      	add	r3, r2
 8013dee:	7819      	ldrb	r1, [r3, #0]
 8013df0:	4b08      	ldr	r3, [pc, #32]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013df2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013df6:	461a      	mov	r2, r3
 8013df8:	2301      	movs	r3, #1
 8013dfa:	4093      	lsls	r3, r2
 8013dfc:	b2da      	uxtb	r2, r3
 8013dfe:	4b05      	ldr	r3, [pc, #20]	; (8013e14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 8013e00:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013e04:	4618      	mov	r0, r3
 8013e06:	4b04      	ldr	r3, [pc, #16]	; (8013e18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 8013e08:	4403      	add	r3, r0
 8013e0a:	430a      	orrs	r2, r1
 8013e0c:	b2d2      	uxtb	r2, r2
 8013e0e:	701a      	strb	r2, [r3, #0]
 8013e10:	e023      	b.n	8013e5a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x30e>
 8013e12:	bf00      	nop
 8013e14:	20003498 	.word	0x20003498
 8013e18:	200034ac 	.word	0x200034ac
 8013e1c:	200034c4 	.word	0x200034c4
 8013e20:	200034c3 	.word	0x200034c3
 8013e24:	200034c2 	.word	0x200034c2
                }
                else
                {
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & ~(1U << gNfca.CR.bitsTxRx));  /* MISRA 10.3 */
 8013e28:	4b6a      	ldr	r3, [pc, #424]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013e2e:	461a      	mov	r2, r3
 8013e30:	4b69      	ldr	r3, [pc, #420]	; (8013fd8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x48c>)
 8013e32:	4413      	add	r3, r2
 8013e34:	7819      	ldrb	r1, [r3, #0]
 8013e36:	4b67      	ldr	r3, [pc, #412]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e38:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	2301      	movs	r3, #1
 8013e40:	4093      	lsls	r3, r2
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	43db      	mvns	r3, r3
 8013e46:	b2da      	uxtb	r2, r3
 8013e48:	4b62      	ldr	r3, [pc, #392]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013e4e:	4618      	mov	r0, r3
 8013e50:	4b61      	ldr	r3, [pc, #388]	; (8013fd8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x48c>)
 8013e52:	4403      	add	r3, r0
 8013e54:	400a      	ands	r2, r1
 8013e56:	b2d2      	uxtb	r2, r2
 8013e58:	701a      	strb	r2, [r3, #0]
                }

                gNfca.CR.bitsTxRx++;
 8013e5a:	4b5e      	ldr	r3, [pc, #376]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013e60:	3301      	adds	r3, #1
 8013e62:	b2da      	uxtb	r2, r3
 8013e64:	4b5b      	ldr	r3, [pc, #364]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                
                /* Check if number of bits form a byte */
                if( gNfca.CR.bitsTxRx == RFAL_BITS_IN_BYTE )
 8013e6a:	4b5a      	ldr	r3, [pc, #360]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013e70:	2b08      	cmp	r3, #8
 8013e72:	f040 80a8 	bne.w	8013fc6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47a>
                {
                    gNfca.CR.bitsTxRx = 0;
 8013e76:	4b57      	ldr	r3, [pc, #348]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e78:	2200      	movs	r2, #0
 8013e7a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                    gNfca.CR.bytesTxRx++;
 8013e7e:	4b55      	ldr	r3, [pc, #340]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e80:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013e84:	3301      	adds	r3, #1
 8013e86:	b2da      	uxtb	r2, r3
 8013e88:	4b52      	ldr	r3, [pc, #328]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                }
                break;
 8013e8e:	e09a      	b.n	8013fc6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47a>
            }
            
            /*******************************************************************************/
            /* Check if Collision loop has failed */
            if( ret != ERR_NONE )
 8013e90:	88fb      	ldrh	r3, [r7, #6]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d001      	beq.n	8013e9a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x34e>
            {
                return ret;
 8013e96:	88fb      	ldrh	r3, [r7, #6]
 8013e98:	e097      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            
            /* If collisions are to be reported check whether the response is complete */
            if( (gNfca.CR.devLimit == 0U) && (gNfca.CR.rxLen != sizeof(rfalNfcaSddRes)) )
 8013e9a:	4b4e      	ldr	r3, [pc, #312]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d105      	bne.n	8013eae <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x362>
 8013ea2:	4b4c      	ldr	r3, [pc, #304]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013ea4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013ea6:	2b05      	cmp	r3, #5
 8013ea8:	d001      	beq.n	8013eae <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x362>
            {
                return ERR_PROTO;
 8013eaa:	230b      	movs	r3, #11
 8013eac:	e08d      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /* Check if the received BCC match */
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 8013eae:	4b49      	ldr	r3, [pc, #292]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013eb0:	7e9c      	ldrb	r4, [r3, #26]
 8013eb2:	2104      	movs	r1, #4
 8013eb4:	4849      	ldr	r0, [pc, #292]	; (8013fdc <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x490>)
 8013eb6:	f7ff fddb 	bl	8013a70 <rfalNfcaCalculateBcc>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	429c      	cmp	r4, r3
 8013ebe:	d001      	beq.n	8013ec4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x378>
            {
                return ERR_PROTO;
 8013ec0:	230b      	movs	r3, #11
 8013ec2:	e082      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /*******************************************************************************/
            /* Anticollision OK, Select this Cascade Level */
            gNfca.CR.selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8013ec4:	4b43      	ldr	r3, [pc, #268]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013ec6:	2270      	movs	r2, #112	; 0x70
 8013ec8:	755a      	strb	r2, [r3, #21]
            
            gNfca.CR.retries = RFAL_NFCA_N_RETRANS;
 8013eca:	4b42      	ldr	r3, [pc, #264]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013ecc:	2202      	movs	r2, #2
 8013ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            gNfca.CR.state   = RFAL_NFCA_CR_SEL;
 8013ed2:	4b40      	ldr	r3, [pc, #256]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013ed4:	2203      	movs	r2, #3
 8013ed6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            break;
 8013eda:	e075      	b.n	8013fc8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
            
        /*******************************************************************************/
        case RFAL_NFCA_CR_SEL:
            
            /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            ret = rfalTransceiveBlockingTxRx( (uint8_t*)&gNfca.CR.selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.CR.selRes, sizeof(rfalNfcaSelRes), &gNfca.CR.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN );
 8013edc:	4b3d      	ldr	r3, [pc, #244]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013ede:	69da      	ldr	r2, [r3, #28]
 8013ee0:	f240 6354 	movw	r3, #1620	; 0x654
 8013ee4:	9302      	str	r3, [sp, #8]
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	9301      	str	r3, [sp, #4]
 8013eea:	4b3d      	ldr	r3, [pc, #244]	; (8013fe0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x494>)
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	2301      	movs	r3, #1
 8013ef0:	2107      	movs	r1, #7
 8013ef2:	4839      	ldr	r0, [pc, #228]	; (8013fd8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x48c>)
 8013ef4:	f002 ff68 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	80fb      	strh	r3, [r7, #6]
                
            /* Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            if( (ret == ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 8013efc:	88fb      	ldrh	r3, [r7, #6]
 8013efe:	2b04      	cmp	r3, #4
 8013f00:	d117      	bne.n	8013f32 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3e6>
 8013f02:	4b34      	ldr	r3, [pc, #208]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d113      	bne.n	8013f32 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3e6>
 8013f0a:	4b32      	ldr	r3, [pc, #200]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d00e      	beq.n	8013f32 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3e6>
            {
                gNfca.CR.retries--;
 8013f14:	4b2f      	ldr	r3, [pc, #188]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	b2da      	uxtb	r2, r3
 8013f1e:	4b2d      	ldr	r3, [pc, #180]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                platformTimerDestroy( gNfca.CR.tmrFDT );
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 8013f24:	2005      	movs	r0, #5
 8013f26:	f007 fe67 	bl	801bbf8 <timerCalculateTimer>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	4a29      	ldr	r2, [pc, #164]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f2e:	6313      	str	r3, [r2, #48]	; 0x30
                break;
 8013f30:	e04a      	b.n	8013fc8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
            }
            
            if( ret != ERR_NONE )
 8013f32:	88fb      	ldrh	r3, [r7, #6]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d001      	beq.n	8013f3c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3f0>
            {
                return ret;
 8013f38:	88fb      	ldrh	r3, [r7, #6]
 8013f3a:	e046      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /* Ensure proper response length */
            if( gNfca.CR.rxLen != sizeof(rfalNfcaSelRes) )
 8013f3c:	4b25      	ldr	r3, [pc, #148]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d001      	beq.n	8013f48 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3fc>
            {
                return ERR_PROTO;
 8013f44:	230b      	movs	r3, #11
 8013f46:	e040      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /*******************************************************************************/
            /* Check cascade byte, if cascade tag then go next cascade level */
            if( *gNfca.CR.selReq.nfcid1 == RFAL_NFCA_SDD_CT )
 8013f48:	4b22      	ldr	r3, [pc, #136]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f4a:	7d9b      	ldrb	r3, [r3, #22]
 8013f4c:	2b88      	cmp	r3, #136	; 0x88
 8013f4e:	d11f      	bne.n	8013f90 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x444>
            {
                /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
                ST_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], &((uint8_t*)&gNfca.CR.selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8013f50:	4b20      	ldr	r3, [pc, #128]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f52:	6a1b      	ldr	r3, [r3, #32]
 8013f54:	4a1f      	ldr	r2, [pc, #124]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013f58:	7812      	ldrb	r2, [r2, #0]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	4921      	ldr	r1, [pc, #132]	; (8013fe4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x498>)
 8013f5e:	2203      	movs	r2, #3
 8013f60:	4618      	mov	r0, r3
 8013f62:	f007 fea5 	bl	801bcb0 <memcpy>
                *gNfca.CR.nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8013f66:	4b1b      	ldr	r3, [pc, #108]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f6a:	781a      	ldrb	r2, [r3, #0]
 8013f6c:	4b19      	ldr	r3, [pc, #100]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f70:	3203      	adds	r2, #3
 8013f72:	b2d2      	uxtb	r2, r2
 8013f74:	701a      	strb	r2, [r3, #0]
                
                /* Go to next cascade level */
                gNfca.CR.state = RFAL_NFCA_CR_CL;
 8013f76:	4b17      	ldr	r3, [pc, #92]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f78:	2201      	movs	r2, #1
 8013f7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                gNfca.CR.cascadeLv++;
 8013f7e:	4b15      	ldr	r3, [pc, #84]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f84:	3301      	adds	r3, #1
 8013f86:	b2da      	uxtb	r2, r3
 8013f88:	4b12      	ldr	r3, [pc, #72]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                *gNfca.CR.nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
                
                gNfca.CR.state = RFAL_NFCA_CR_DONE;
                break;                             /* Only flag operation complete on the next execution */
            }
            break;
 8013f8e:	e01b      	b.n	8013fc8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
                ST_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], (uint8_t*)&gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 8013f90:	4b10      	ldr	r3, [pc, #64]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f92:	6a1b      	ldr	r3, [r3, #32]
 8013f94:	4a0f      	ldr	r2, [pc, #60]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013f98:	7812      	ldrb	r2, [r2, #0]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	4a0d      	ldr	r2, [pc, #52]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013f9e:	f8d2 2016 	ldr.w	r2, [r2, #22]
 8013fa2:	601a      	str	r2, [r3, #0]
                *gNfca.CR.nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 8013fa4:	4b0b      	ldr	r3, [pc, #44]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa8:	781a      	ldrb	r2, [r3, #0]
 8013faa:	4b0a      	ldr	r3, [pc, #40]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fae:	3204      	adds	r2, #4
 8013fb0:	b2d2      	uxtb	r2, r2
 8013fb2:	701a      	strb	r2, [r3, #0]
                gNfca.CR.state = RFAL_NFCA_CR_DONE;
 8013fb4:	4b07      	ldr	r3, [pc, #28]	; (8013fd4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 8013fb6:	2204      	movs	r2, #4
 8013fb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                break;                             /* Only flag operation complete on the next execution */
 8013fbc:	e004      	b.n	8013fc8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
        
        /*******************************************************************************/
        case RFAL_NFCA_CR_DONE:
            return ERR_NONE;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	e003      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8013fc2:	2321      	movs	r3, #33	; 0x21
 8013fc4:	e001      	b.n	8013fca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
                break;
 8013fc6:	bf00      	nop
    }
    return ERR_BUSY;
 8013fc8:	2302      	movs	r3, #2
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	370c      	adds	r7, #12
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd90      	pop	{r4, r7, pc}
 8013fd2:	bf00      	nop
 8013fd4:	20003498 	.word	0x20003498
 8013fd8:	200034ac 	.word	0x200034ac
 8013fdc:	200034ae 	.word	0x200034ae
 8013fe0:	200034c4 	.word	0x200034c4
 8013fe4:	200034af 	.word	0x200034af

08013fe8 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 8013fee:	2200      	movs	r2, #0
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	2001      	movs	r0, #1
 8013ff4:	f001 ffd0 	bl	8015f98 <rfalSetMode>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	80fb      	strh	r3, [r7, #6]
 8013ffc:	88fb      	ldrh	r3, [r7, #6]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <rfalNfcaPollerInitialize+0x1e>
 8014002:	88fb      	ldrh	r3, [r7, #6]
 8014004:	e00e      	b.n	8014024 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8014006:	2001      	movs	r0, #1
 8014008:	f002 fc0a 	bl	8016820 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 801400c:	4807      	ldr	r0, [pc, #28]	; (801402c <rfalNfcaPollerInitialize+0x44>)
 801400e:	f002 fc5b 	bl	80168c8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 8014012:	f240 4094 	movw	r0, #1172	; 0x494
 8014016:	f002 fc43 	bl	80168a0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 801401a:	f641 207c 	movw	r0, #6780	; 0x1a7c
 801401e:	f002 fc21 	bl	8016864 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8014022:	2300      	movs	r3, #0
}
 8014024:	4618      	mov	r0, r3
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	000108d8 	.word	0x000108d8

08014030 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b086      	sub	sp, #24
 8014034:	af02      	add	r7, sp, #8
 8014036:	4603      	mov	r3, r0
 8014038:	6039      	str	r1, [r7, #0]
 801403a:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 801403c:	f107 030c 	add.w	r3, r7, #12
 8014040:	79f8      	ldrb	r0, [r7, #7]
 8014042:	f240 6254 	movw	r2, #1620	; 0x654
 8014046:	9200      	str	r2, [sp, #0]
 8014048:	2210      	movs	r2, #16
 801404a:	6839      	ldr	r1, [r7, #0]
 801404c:	f003 fe92 	bl	8017d74 <rfalISO14443ATransceiveShortFrame>
 8014050:	4603      	mov	r3, r0
 8014052:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 8014054:	89fb      	ldrh	r3, [r7, #14]
 8014056:	2b1d      	cmp	r3, #29
 8014058:	d00b      	beq.n	8014072 <rfalNfcaPollerCheckPresence+0x42>
 801405a:	89fb      	ldrh	r3, [r7, #14]
 801405c:	2b15      	cmp	r3, #21
 801405e:	d008      	beq.n	8014072 <rfalNfcaPollerCheckPresence+0x42>
 8014060:	89fb      	ldrh	r3, [r7, #14]
 8014062:	2b01      	cmp	r3, #1
 8014064:	d005      	beq.n	8014072 <rfalNfcaPollerCheckPresence+0x42>
 8014066:	89fb      	ldrh	r3, [r7, #14]
 8014068:	2b09      	cmp	r3, #9
 801406a:	d002      	beq.n	8014072 <rfalNfcaPollerCheckPresence+0x42>
 801406c:	89fb      	ldrh	r3, [r7, #14]
 801406e:	2b1b      	cmp	r3, #27
 8014070:	d101      	bne.n	8014076 <rfalNfcaPollerCheckPresence+0x46>
    {
       ret = ERR_NONE;
 8014072:	2300      	movs	r3, #0
 8014074:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8014076:	89fb      	ldrh	r3, [r7, #14]
}
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b084      	sub	sp, #16
 8014084:	af00      	add	r7, sp, #0
 8014086:	4603      	mov	r3, r0
 8014088:	6039      	str	r1, [r7, #0]
 801408a:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 801408c:	79fb      	ldrb	r3, [r7, #7]
 801408e:	2b01      	cmp	r3, #1
 8014090:	d101      	bne.n	8014096 <rfalNfcaPollerTechnologyDetection+0x16>
 8014092:	2352      	movs	r3, #82	; 0x52
 8014094:	e000      	b.n	8014098 <rfalNfcaPollerTechnologyDetection+0x18>
 8014096:	2326      	movs	r3, #38	; 0x26
 8014098:	6839      	ldr	r1, [r7, #0]
 801409a:	4618      	mov	r0, r3
 801409c:	f7ff ffc8 	bl	8014030 <rfalNfcaPollerCheckPresence>
 80140a0:	4603      	mov	r3, r0
 80140a2:	81fb      	strh	r3, [r7, #14]
 80140a4:	89fb      	ldrh	r3, [r7, #14]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d001      	beq.n	80140ae <rfalNfcaPollerTechnologyDetection+0x2e>
 80140aa:	89fb      	ldrh	r3, [r7, #14]
 80140ac:	e005      	b.n	80140ba <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 80140ae:	79fb      	ldrb	r3, [r7, #7]
 80140b0:	2b02      	cmp	r3, #2
 80140b2:	d001      	beq.n	80140b8 <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 80140b4:	f000 f9f4 	bl	80144a0 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 80140b8:	2300      	movs	r3, #0
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3710      	adds	r7, #16
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
	...

080140c4 <rfalNfcaPollerStartFullCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerStartFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b088      	sub	sp, #32
 80140c8:	af02      	add	r7, sp, #8
 80140ca:	60ba      	str	r2, [r7, #8]
 80140cc:	607b      	str	r3, [r7, #4]
 80140ce:	4603      	mov	r3, r0
 80140d0:	73fb      	strb	r3, [r7, #15]
 80140d2:	460b      	mov	r3, r1
 80140d4:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d002      	beq.n	80140e2 <rfalNfcaPollerStartFullCollisionResolution+0x1e>
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d101      	bne.n	80140e6 <rfalNfcaPollerStartFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 80140e2:	2307      	movs	r3, #7
 80140e4:	e092      	b.n	801420c <rfalNfcaPollerStartFullCollisionResolution+0x148>
    }
    
    *devCnt = 0;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2200      	movs	r2, #0
 80140ea:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 80140ec:	2300      	movs	r3, #0
 80140ee:	82fb      	strh	r3, [r7, #22]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 80140f0:	7bfb      	ldrb	r3, [r7, #15]
 80140f2:	2b02      	cmp	r3, #2
 80140f4:	d028      	beq.n	8014148 <rfalNfcaPollerStartFullCollisionResolution+0x84>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	1c59      	adds	r1, r3, #1
 80140fa:	f107 0312 	add.w	r3, r7, #18
 80140fe:	f240 6254 	movw	r2, #1620	; 0x654
 8014102:	9200      	str	r2, [sp, #0]
 8014104:	2210      	movs	r2, #16
 8014106:	2052      	movs	r0, #82	; 0x52
 8014108:	f003 fe34 	bl	8017d74 <rfalISO14443ATransceiveShortFrame>
 801410c:	4603      	mov	r3, r0
 801410e:	82fb      	strh	r3, [r7, #22]
        if(ret != ERR_NONE)
 8014110:	8afb      	ldrh	r3, [r7, #22]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d010      	beq.n	8014138 <rfalNfcaPollerStartFullCollisionResolution+0x74>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 8014116:	7bfb      	ldrb	r3, [r7, #15]
 8014118:	2b01      	cmp	r3, #1
 801411a:	d00b      	beq.n	8014134 <rfalNfcaPollerStartFullCollisionResolution+0x70>
 801411c:	8afb      	ldrh	r3, [r7, #22]
 801411e:	2b1d      	cmp	r3, #29
 8014120:	d00a      	beq.n	8014138 <rfalNfcaPollerStartFullCollisionResolution+0x74>
 8014122:	8afb      	ldrh	r3, [r7, #22]
 8014124:	2b15      	cmp	r3, #21
 8014126:	d007      	beq.n	8014138 <rfalNfcaPollerStartFullCollisionResolution+0x74>
 8014128:	8afb      	ldrh	r3, [r7, #22]
 801412a:	2b09      	cmp	r3, #9
 801412c:	d004      	beq.n	8014138 <rfalNfcaPollerStartFullCollisionResolution+0x74>
 801412e:	8afb      	ldrh	r3, [r7, #22]
 8014130:	2b1b      	cmp	r3, #27
 8014132:	d001      	beq.n	8014138 <rfalNfcaPollerStartFullCollisionResolution+0x74>
            {
                return ret;
 8014134:	8afb      	ldrh	r3, [r7, #22]
 8014136:	e069      	b.n	801420c <rfalNfcaPollerStartFullCollisionResolution+0x148>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 8014138:	8afb      	ldrh	r3, [r7, #22]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d104      	bne.n	8014148 <rfalNfcaPollerStartFullCollisionResolution+0x84>
 801413e:	8a7b      	ldrh	r3, [r7, #18]
 8014140:	2b10      	cmp	r3, #16
 8014142:	d001      	beq.n	8014148 <rfalNfcaPollerStartFullCollisionResolution+0x84>
        {
            return ERR_PROTO;
 8014144:	230b      	movs	r3, #11
 8014146:	e061      	b.n	801420c <rfalNfcaPollerStartFullCollisionResolution+0x148>
        }
    }
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 8014148:	68ba      	ldr	r2, [r7, #8]
 801414a:	f107 0314 	add.w	r3, r7, #20
 801414e:	3201      	adds	r2, #1
 8014150:	8812      	ldrh	r2, [r2, #0]
 8014152:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 8014154:	7bbb      	ldrb	r3, [r7, #14]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d008      	beq.n	801416c <rfalNfcaPollerStartFullCollisionResolution+0xa8>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 801415a:	7bbb      	ldrb	r3, [r7, #14]
 801415c:	2216      	movs	r2, #22
 801415e:	fb02 f303 	mul.w	r3, r2, r3
 8014162:	461a      	mov	r2, r3
 8014164:	2100      	movs	r1, #0
 8014166:	68b8      	ldr	r0, [r7, #8]
 8014168:	f007 fdca 	bl	801bd00 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	3301      	adds	r3, #1
 8014170:	f107 0214 	add.w	r2, r7, #20
 8014174:	8812      	ldrh	r2, [r2, #0]
 8014176:	801a      	strh	r2, [r3, #0]
    
    /* Save parameters */
    gNfca.CR.devCnt      = devCnt;
 8014178:	4a26      	ldr	r2, [pc, #152]	; (8014214 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6093      	str	r3, [r2, #8]
    gNfca.CR.devLimit    = devLimit;
 801417e:	4a25      	ldr	r2, [pc, #148]	; (8014214 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 8014180:	7bbb      	ldrb	r3, [r7, #14]
 8014182:	7013      	strb	r3, [r2, #0]
    gNfca.CR.nfcaDevList = nfcaDevList;
 8014184:	4a23      	ldr	r2, [pc, #140]	; (8014214 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	6053      	str	r3, [r2, #4]
    gNfca.CR.compMode    = compMode;
 801418a:	4a22      	ldr	r2, [pc, #136]	; (8014214 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 801418c:	7bfb      	ldrb	r3, [r7, #15]
 801418e:	7053      	strb	r3, [r2, #1]
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	789b      	ldrb	r3, [r3, #2]
 8014194:	f003 030f 	and.w	r3, r3, #15
 8014198:	2b0c      	cmp	r3, #12
 801419a:	d12a      	bne.n	80141f2 <rfalNfcaPollerStartFullCollisionResolution+0x12e>
 801419c:	7bbb      	ldrb	r3, [r7, #14]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d027      	beq.n	80141f2 <rfalNfcaPollerStartFullCollisionResolution+0x12e>
 80141a2:	8afb      	ldrh	r3, [r7, #22]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d124      	bne.n	80141f2 <rfalNfcaPollerStartFullCollisionResolution+0x12e>
 80141a8:	7bfb      	ldrb	r3, [r7, #15]
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d021      	beq.n	80141f2 <rfalNfcaPollerStartFullCollisionResolution+0x12e>
    {
        /* RID_REQ shall be performed              Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 80141ae:	f005 ff99 	bl	801a0e4 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	330f      	adds	r3, #15
 80141b6:	4618      	mov	r0, r3
 80141b8:	f005 ffb6 	bl	801a128 <rfalT1TPollerRid>
 80141bc:	4603      	mov	r3, r0
 80141be:	82fb      	strh	r3, [r7, #22]
 80141c0:	8afb      	ldrh	r3, [r7, #22]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d001      	beq.n	80141ca <rfalNfcaPollerStartFullCollisionResolution+0x106>
 80141c6:	8afb      	ldrh	r3, [r7, #22]
 80141c8:	e020      	b.n	801420c <rfalNfcaPollerStartFullCollisionResolution+0x148>
        
        *devCnt = 1U;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2201      	movs	r2, #1
 80141ce:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	2200      	movs	r2, #0
 80141d4:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	2201      	movs	r2, #1
 80141da:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	2204      	movs	r2, #4
 80141e0:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	3305      	adds	r3, #5
 80141e6:	68ba      	ldr	r2, [r7, #8]
 80141e8:	3211      	adds	r2, #17
 80141ea:	6812      	ldr	r2, [r2, #0]
 80141ec:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 80141ee:	2300      	movs	r3, #0
 80141f0:	e00c      	b.n	801420c <rfalNfcaPollerStartFullCollisionResolution+0x148>
    }
    #endif /* RFAL_FEATURE_T1T */
    
    return rfalNfcaPollerStartSingleCollisionResolution( devLimit, &gNfca.CR.collPending, &nfcaDevList->selRes, (uint8_t*)&nfcaDevList->nfcId1, &nfcaDevList->nfcId1Len );
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	1cda      	adds	r2, r3, #3
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	1d59      	adds	r1, r3, #5
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	3304      	adds	r3, #4
 80141fe:	7bb8      	ldrb	r0, [r7, #14]
 8014200:	9300      	str	r3, [sp, #0]
 8014202:	460b      	mov	r3, r1
 8014204:	4904      	ldr	r1, [pc, #16]	; (8014218 <rfalNfcaPollerStartFullCollisionResolution+0x154>)
 8014206:	f7ff fc53 	bl	8013ab0 <rfalNfcaPollerStartSingleCollisionResolution>
 801420a:	4603      	mov	r3, r0
}
 801420c:	4618      	mov	r0, r3
 801420e:	3718      	adds	r7, #24
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	20003498 	.word	0x20003498
 8014218:	200034a4 	.word	0x200034a4

0801421c <rfalNfcaPollerGetFullCollisionResolutionStatus>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerGetFullCollisionResolutionStatus( void )
{
 801421c:	b5b0      	push	{r4, r5, r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af02      	add	r7, sp, #8
    ReturnCode ret;
    uint8_t    newDevType;
    
    if( (gNfca.CR.nfcaDevList == NULL) || (gNfca.CR.devCnt == NULL) )
 8014222:	4b64      	ldr	r3, [pc, #400]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d003      	beq.n	8014232 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x16>
 801422a:	4b62      	ldr	r3, [pc, #392]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801422c:	689b      	ldr	r3, [r3, #8]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d101      	bne.n	8014236 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x1a>
    {
        return ERR_WRONG_STATE;
 8014232:	2321      	movs	r3, #33	; 0x21
 8014234:	e0b9      	b.n	80143aa <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
    }
    
    /*******************************************************************************/
    /* Check whether a T1T has already been detected */
    if( rfalNfcaIsSensResT1T( &gNfca.CR.nfcaDevList->sensRes ) && (gNfca.CR.nfcaDevList->type == RFAL_NFCA_T1T) )
 8014236:	4b5f      	ldr	r3, [pc, #380]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	789b      	ldrb	r3, [r3, #2]
 801423c:	f003 030f 	and.w	r3, r3, #15
 8014240:	2b0c      	cmp	r3, #12
 8014242:	d106      	bne.n	8014252 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
 8014244:	4b5b      	ldr	r3, [pc, #364]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	2b01      	cmp	r3, #1
 801424c:	d101      	bne.n	8014252 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
    {
        /* T1T doesn't support Anticollision */
        return ERR_NONE;
 801424e:	2300      	movs	r3, #0
 8014250:	e0ab      	b.n	80143aa <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
    }
    
    
    /*******************************************************************************/
    EXIT_ON_ERR( ret, rfalNfcaPollerGetSingleCollisionResolutionStatus() );
 8014252:	f7ff fc7b 	bl	8013b4c <rfalNfcaPollerGetSingleCollisionResolutionStatus>
 8014256:	4603      	mov	r3, r0
 8014258:	80fb      	strh	r3, [r7, #6]
 801425a:	88fb      	ldrh	r3, [r7, #6]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d001      	beq.n	8014264 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x48>
 8014260:	88fb      	ldrh	r3, [r7, #6]
 8014262:	e0a2      	b.n	80143aa <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>

    /* Assign Listen Device */
    newDevType = ((uint8_t)gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 8014264:	4b53      	ldr	r3, [pc, #332]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014266:	685a      	ldr	r2, [r3, #4]
 8014268:	4b52      	ldr	r3, [pc, #328]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801426a:	689b      	ldr	r3, [r3, #8]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	4619      	mov	r1, r3
 8014270:	2316      	movs	r3, #22
 8014272:	fb03 f301 	mul.w	r3, r3, r1
 8014276:	4413      	add	r3, r2
 8014278:	78db      	ldrb	r3, [r3, #3]
 801427a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801427e:	717b      	strb	r3, [r7, #5]
    /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
    gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].type    = (rfalNfcaListenDeviceType) newDevType;
 8014280:	4b4c      	ldr	r3, [pc, #304]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014282:	685a      	ldr	r2, [r3, #4]
 8014284:	4b4b      	ldr	r3, [pc, #300]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014286:	689b      	ldr	r3, [r3, #8]
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	4619      	mov	r1, r3
 801428c:	2316      	movs	r3, #22
 801428e:	fb03 f301 	mul.w	r3, r3, r1
 8014292:	4413      	add	r3, r2
 8014294:	797a      	ldrb	r2, [r7, #5]
 8014296:	701a      	strb	r2, [r3, #0]
    gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].isSleep = false;
 8014298:	4b46      	ldr	r3, [pc, #280]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801429a:	685a      	ldr	r2, [r3, #4]
 801429c:	4b45      	ldr	r3, [pc, #276]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801429e:	689b      	ldr	r3, [r3, #8]
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	4619      	mov	r1, r3
 80142a4:	2316      	movs	r3, #22
 80142a6:	fb03 f301 	mul.w	r3, r3, r1
 80142aa:	4413      	add	r3, r2
 80142ac:	2200      	movs	r2, #0
 80142ae:	755a      	strb	r2, [r3, #21]
    (*gNfca.CR.devCnt)++;
 80142b0:	4b40      	ldr	r3, [pc, #256]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142b2:	689b      	ldr	r3, [r3, #8]
 80142b4:	781a      	ldrb	r2, [r3, #0]
 80142b6:	3201      	adds	r2, #1
 80142b8:	b2d2      	uxtb	r2, r2
 80142ba:	701a      	strb	r2, [r3, #0]

    
    /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
    if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 80142bc:	4b3d      	ldr	r3, [pc, #244]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142be:	689b      	ldr	r3, [r3, #8]
 80142c0:	781a      	ldrb	r2, [r3, #0]
 80142c2:	4b3c      	ldr	r3, [pc, #240]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d22e      	bcs.n	8014328 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x10c>
 80142ca:	4b3a      	ldr	r3, [pc, #232]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142cc:	7b1b      	ldrb	r3, [r3, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d02a      	beq.n	8014328 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x10c>
    {
        /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
        rfalNfcaPollerSleep();
 80142d2:	f000 f8e5 	bl	80144a0 <rfalNfcaPollerSleep>
        gNfca.CR.nfcaDevList[(*gNfca.CR.devCnt - 1U)].isSleep = true;
 80142d6:	4b37      	ldr	r3, [pc, #220]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142d8:	685a      	ldr	r2, [r3, #4]
 80142da:	4b36      	ldr	r3, [pc, #216]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142dc:	689b      	ldr	r3, [r3, #8]
 80142de:	781b      	ldrb	r3, [r3, #0]
 80142e0:	4619      	mov	r1, r3
 80142e2:	2316      	movs	r3, #22
 80142e4:	fb03 f301 	mul.w	r3, r3, r1
 80142e8:	3b16      	subs	r3, #22
 80142ea:	4413      	add	r3, r2
 80142ec:	2201      	movs	r2, #1
 80142ee:	755a      	strb	r2, [r3, #21]
        
        
        /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
        ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].sensRes );
 80142f0:	4b30      	ldr	r3, [pc, #192]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142f2:	685a      	ldr	r2, [r3, #4]
 80142f4:	4b2f      	ldr	r3, [pc, #188]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 80142f6:	689b      	ldr	r3, [r3, #8]
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	4619      	mov	r1, r3
 80142fc:	2316      	movs	r3, #22
 80142fe:	fb03 f301 	mul.w	r3, r3, r1
 8014302:	4413      	add	r3, r2
 8014304:	3301      	adds	r3, #1
 8014306:	4619      	mov	r1, r3
 8014308:	2026      	movs	r0, #38	; 0x26
 801430a:	f7ff fe91 	bl	8014030 <rfalNfcaPollerCheckPresence>
 801430e:	4603      	mov	r3, r0
 8014310:	80fb      	strh	r3, [r7, #6]
        if( ret == ERR_TIMEOUT )
 8014312:	88fb      	ldrh	r3, [r7, #6]
 8014314:	2b04      	cmp	r3, #4
 8014316:	d103      	bne.n	8014320 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x104>
        {
            /* No more devices found, exit */
            gNfca.CR.collPending = false;
 8014318:	4b26      	ldr	r3, [pc, #152]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801431a:	2200      	movs	r2, #0
 801431c:	731a      	strb	r2, [r3, #12]
        if( ret == ERR_TIMEOUT )
 801431e:	e006      	b.n	801432e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x112>
        }
        else
        {
            /* Another device found, continue loop */
            gNfca.CR.collPending = true;
 8014320:	4b24      	ldr	r3, [pc, #144]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014322:	2201      	movs	r2, #1
 8014324:	731a      	strb	r2, [r3, #12]
        if( ret == ERR_TIMEOUT )
 8014326:	e002      	b.n	801432e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x112>
        }
    }
    else
    {
        /* Exit loop */
        gNfca.CR.collPending = false;
 8014328:	4b22      	ldr	r3, [pc, #136]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801432a:	2200      	movs	r2, #0
 801432c:	731a      	strb	r2, [r3, #12]
    }
        
    
    /*******************************************************************************/
    /* Check if collision resolution shall continue */
    if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 801432e:	4b21      	ldr	r3, [pc, #132]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014330:	689b      	ldr	r3, [r3, #8]
 8014332:	781a      	ldrb	r2, [r3, #0]
 8014334:	4b1f      	ldr	r3, [pc, #124]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	429a      	cmp	r2, r3
 801433a:	d235      	bcs.n	80143a8 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18c>
 801433c:	4b1d      	ldr	r3, [pc, #116]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801433e:	7b1b      	ldrb	r3, [r3, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d031      	beq.n	80143a8 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18c>
    {
        EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution(  gNfca.CR.devLimit, 
 8014344:	4b1b      	ldr	r3, [pc, #108]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014346:	7818      	ldrb	r0, [r3, #0]
 8014348:	4b1a      	ldr	r3, [pc, #104]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801434a:	685a      	ldr	r2, [r3, #4]
 801434c:	4b19      	ldr	r3, [pc, #100]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801434e:	689b      	ldr	r3, [r3, #8]
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	4619      	mov	r1, r3
 8014354:	2316      	movs	r3, #22
 8014356:	fb03 f301 	mul.w	r3, r3, r1
 801435a:	4413      	add	r3, r2
 801435c:	1cd9      	adds	r1, r3, #3
 801435e:	4b15      	ldr	r3, [pc, #84]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014360:	685a      	ldr	r2, [r3, #4]
 8014362:	4b14      	ldr	r3, [pc, #80]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014364:	689b      	ldr	r3, [r3, #8]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	461c      	mov	r4, r3
 801436a:	2316      	movs	r3, #22
 801436c:	fb03 f304 	mul.w	r3, r3, r4
 8014370:	4413      	add	r3, r2
 8014372:	1d5c      	adds	r4, r3, #5
 8014374:	4b0f      	ldr	r3, [pc, #60]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 8014376:	685a      	ldr	r2, [r3, #4]
 8014378:	4b0e      	ldr	r3, [pc, #56]	; (80143b4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 801437a:	689b      	ldr	r3, [r3, #8]
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	461d      	mov	r5, r3
 8014380:	2316      	movs	r3, #22
 8014382:	fb03 f305 	mul.w	r3, r3, r5
 8014386:	4413      	add	r3, r2
 8014388:	3304      	adds	r3, #4
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	4623      	mov	r3, r4
 801438e:	460a      	mov	r2, r1
 8014390:	4909      	ldr	r1, [pc, #36]	; (80143b8 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x19c>)
 8014392:	f7ff fb8d 	bl	8013ab0 <rfalNfcaPollerStartSingleCollisionResolution>
 8014396:	4603      	mov	r3, r0
 8014398:	80fb      	strh	r3, [r7, #6]
 801439a:	88fb      	ldrh	r3, [r7, #6]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d001      	beq.n	80143a4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x188>
 80143a0:	88fb      	ldrh	r3, [r7, #6]
 80143a2:	e002      	b.n	80143aa <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
                                                                         &gNfca.CR.collPending, 
                                                                         &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].selRes, 
                                                                         (uint8_t*)&gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].nfcId1, 
                                                                         &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].nfcId1Len ) );
    
        return ERR_BUSY;
 80143a4:	2302      	movs	r3, #2
 80143a6:	e000      	b.n	80143aa <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
    }
    
    return ERR_NONE;
 80143a8:	2300      	movs	r3, #0
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3708      	adds	r7, #8
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bdb0      	pop	{r4, r5, r7, pc}
 80143b2:	bf00      	nop
 80143b4:	20003498 	.word	0x20003498
 80143b8:	200034a4 	.word	0x200034a4

080143bc <rfalNfcaPollerSelect>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b08c      	sub	sp, #48	; 0x30
 80143c0:	af04      	add	r7, sp, #16
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	460b      	mov	r3, r1
 80143c6:	607a      	str	r2, [r7, #4]
 80143c8:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d005      	beq.n	80143dc <rfalNfcaPollerSelect+0x20>
 80143d0:	7afb      	ldrb	r3, [r7, #11]
 80143d2:	2b0a      	cmp	r3, #10
 80143d4:	d802      	bhi.n	80143dc <rfalNfcaPollerSelect+0x20>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d101      	bne.n	80143e0 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 80143dc:	2307      	movs	r3, #7
 80143de:	e058      	b.n	8014492 <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 80143e0:	7afb      	ldrb	r3, [r7, #11]
 80143e2:	4a2e      	ldr	r2, [pc, #184]	; (801449c <rfalNfcaPollerSelect+0xe0>)
 80143e4:	fba2 2303 	umull	r2, r3, r2, r3
 80143e8:	089b      	lsrs	r3, r3, #2
 80143ea:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 80143ec:	2300      	movs	r3, #0
 80143ee:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 80143f0:	2300      	movs	r3, #0
 80143f2:	77fb      	strb	r3, [r7, #31]
 80143f4:	e048      	b.n	8014488 <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 80143f6:	7ffb      	ldrb	r3, [r7, #31]
 80143f8:	005b      	lsls	r3, r3, #1
 80143fa:	b2db      	uxtb	r3, r3
 80143fc:	3b6d      	subs	r3, #109	; 0x6d
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 8014402:	2370      	movs	r3, #112	; 0x70
 8014404:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 8014406:	7f7a      	ldrb	r2, [r7, #29]
 8014408:	7ffb      	ldrb	r3, [r7, #31]
 801440a:	429a      	cmp	r2, r3
 801440c:	d00f      	beq.n	801442e <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 801440e:	2388      	movs	r3, #136	; 0x88
 8014410:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 8014412:	7fbb      	ldrb	r3, [r7, #30]
 8014414:	68fa      	ldr	r2, [r7, #12]
 8014416:	18d1      	adds	r1, r2, r3
 8014418:	f107 0310 	add.w	r3, r7, #16
 801441c:	3303      	adds	r3, #3
 801441e:	2203      	movs	r2, #3
 8014420:	4618      	mov	r0, r3
 8014422:	f007 fc45 	bl	801bcb0 <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 8014426:	7fbb      	ldrb	r3, [r7, #30]
 8014428:	3303      	adds	r3, #3
 801442a:	77bb      	strb	r3, [r7, #30]
 801442c:	e005      	b.n	801443a <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 801442e:	7fbb      	ldrb	r3, [r7, #30]
 8014430:	68fa      	ldr	r2, [r7, #12]
 8014432:	4413      	add	r3, r2
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 801443a:	f107 0310 	add.w	r3, r7, #16
 801443e:	3302      	adds	r3, #2
 8014440:	2104      	movs	r1, #4
 8014442:	4618      	mov	r0, r3
 8014444:	f7ff fb14 	bl	8013a70 <rfalNfcaCalculateBcc>
 8014448:	4603      	mov	r3, r0
 801444a:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 801444c:	f107 0010 	add.w	r0, r7, #16
 8014450:	f240 6354 	movw	r3, #1620	; 0x654
 8014454:	9302      	str	r3, [sp, #8]
 8014456:	2300      	movs	r3, #0
 8014458:	9301      	str	r3, [sp, #4]
 801445a:	f107 0318 	add.w	r3, r7, #24
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	2301      	movs	r3, #1
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	2107      	movs	r1, #7
 8014466:	f002 fcaf 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801446a:	4603      	mov	r3, r0
 801446c:	837b      	strh	r3, [r7, #26]
 801446e:	8b7b      	ldrh	r3, [r7, #26]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d001      	beq.n	8014478 <rfalNfcaPollerSelect+0xbc>
 8014474:	8b7b      	ldrh	r3, [r7, #26]
 8014476:	e00c      	b.n	8014492 <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 8014478:	8b3b      	ldrh	r3, [r7, #24]
 801447a:	2b01      	cmp	r3, #1
 801447c:	d001      	beq.n	8014482 <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 801447e:	230b      	movs	r3, #11
 8014480:	e007      	b.n	8014492 <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 8014482:	7ffb      	ldrb	r3, [r7, #31]
 8014484:	3301      	adds	r3, #1
 8014486:	77fb      	strb	r3, [r7, #31]
 8014488:	7ffa      	ldrb	r2, [r7, #31]
 801448a:	7f7b      	ldrb	r3, [r7, #29]
 801448c:	429a      	cmp	r2, r3
 801448e:	d9b2      	bls.n	80143f6 <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 8014490:	2300      	movs	r3, #0
}
 8014492:	4618      	mov	r0, r3
 8014494:	3720      	adds	r7, #32
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	cccccccd 	.word	0xcccccccd

080144a0 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 80144a6:	2350      	movs	r3, #80	; 0x50
 80144a8:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 80144aa:	2300      	movs	r3, #0
 80144ac:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 80144ae:	1cfa      	adds	r2, r7, #3
 80144b0:	1d38      	adds	r0, r7, #4
 80144b2:	f243 43f8 	movw	r3, #13560	; 0x34f8
 80144b6:	9302      	str	r3, [sp, #8]
 80144b8:	2300      	movs	r3, #0
 80144ba:	9301      	str	r3, [sp, #4]
 80144bc:	2300      	movs	r3, #0
 80144be:	9300      	str	r3, [sp, #0]
 80144c0:	2301      	movs	r3, #1
 80144c2:	2102      	movs	r1, #2
 80144c4:	f002 fc80 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 80144c8:	2300      	movs	r3, #0
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3708      	adds	r7, #8
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 80144d2:	b480      	push	{r7}
 80144d4:	b083      	sub	sp, #12
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
 80144da:	460b      	mov	r3, r1
 80144dc:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 80144de:	887b      	ldrh	r3, [r7, #2]
 80144e0:	2b02      	cmp	r3, #2
 80144e2:	d108      	bne.n	80144f6 <rfalNfcaListenerIsSleepReq+0x24>
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	2b50      	cmp	r3, #80	; 0x50
 80144ea:	d104      	bne.n	80144f6 <rfalNfcaListenerIsSleepReq+0x24>
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	3301      	adds	r3, #1
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d001      	beq.n	80144fa <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 80144f6:	2300      	movs	r3, #0
 80144f8:	e000      	b.n	80144fc <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 80144fa:	2301      	movs	r3, #1
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	370c      	adds	r7, #12
 8014500:	46bd      	mov	sp, r7
 8014502:	bc80      	pop	{r7}
 8014504:	4770      	bx	lr

08014506 <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 8014506:	b480      	push	{r7}
 8014508:	b083      	sub	sp, #12
 801450a:	af00      	add	r7, sp, #0
 801450c:	6078      	str	r0, [r7, #4]
 801450e:	460b      	mov	r3, r1
 8014510:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 8014512:	78fb      	ldrb	r3, [r7, #3]
 8014514:	2b0c      	cmp	r3, #12
 8014516:	d004      	beq.n	8014522 <rfalNfcbCheckSensbRes+0x1c>
 8014518:	78fb      	ldrb	r3, [r7, #3]
 801451a:	2b0d      	cmp	r3, #13
 801451c:	d001      	beq.n	8014522 <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 801451e:	230b      	movs	r3, #11
 8014520:	e00c      	b.n	801453c <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	7a9b      	ldrb	r3, [r3, #10]
 8014526:	f003 0308 	and.w	r3, r3, #8
 801452a:	2b00      	cmp	r3, #0
 801452c:	d103      	bne.n	8014536 <rfalNfcbCheckSensbRes+0x30>
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	2b50      	cmp	r3, #80	; 0x50
 8014534:	d001      	beq.n	801453a <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 8014536:	230b      	movs	r3, #11
 8014538:	e000      	b.n	801453c <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 801453a:	2300      	movs	r3, #0
}
 801453c:	4618      	mov	r0, r3
 801453e:	370c      	adds	r7, #12
 8014540:	46bd      	mov	sp, r7
 8014542:	bc80      	pop	{r7}
 8014544:	4770      	bx	lr
	...

08014548 <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 801454e:	2200      	movs	r2, #0
 8014550:	2100      	movs	r1, #0
 8014552:	2003      	movs	r0, #3
 8014554:	f001 fd20 	bl	8015f98 <rfalSetMode>
 8014558:	4603      	mov	r3, r0
 801455a:	80fb      	strh	r3, [r7, #6]
 801455c:	88fb      	ldrh	r3, [r7, #6]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d001      	beq.n	8014566 <rfalNfcbPollerInitialize+0x1e>
 8014562:	88fb      	ldrh	r3, [r7, #6]
 8014564:	e014      	b.n	8014590 <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8014566:	2001      	movs	r0, #1
 8014568:	f002 f95a 	bl	8016820 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 801456c:	480a      	ldr	r0, [pc, #40]	; (8014598 <rfalNfcbPollerInitialize+0x50>)
 801456e:	f002 f9ab 	bl	80168c8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 8014572:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8014576:	f002 f993 	bl	80168a0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 801457a:	f641 207c 	movw	r0, #6780	; 0x1a7c
 801457e:	f002 f971 	bl	8016864 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 8014582:	4b06      	ldr	r3, [pc, #24]	; (801459c <rfalNfcbPollerInitialize+0x54>)
 8014584:	2200      	movs	r2, #0
 8014586:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 8014588:	4b04      	ldr	r3, [pc, #16]	; (801459c <rfalNfcbPollerInitialize+0x54>)
 801458a:	2200      	movs	r2, #0
 801458c:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 801458e:	2300      	movs	r3, #0
}
 8014590:	4618      	mov	r0, r3
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	000108d8 	.word	0x000108d8
 801459c:	200034d0 	.word	0x200034d0

080145a0 <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b08a      	sub	sp, #40	; 0x28
 80145a4:	af04      	add	r7, sp, #16
 80145a6:	60ba      	str	r2, [r7, #8]
 80145a8:	607b      	str	r3, [r7, #4]
 80145aa:	4603      	mov	r3, r0
 80145ac:	73fb      	strb	r3, [r7, #15]
 80145ae:	460b      	mov	r3, r1
 80145b0:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 80145b2:	7bfb      	ldrb	r3, [r7, #15]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d002      	beq.n	80145be <rfalNfcbPollerCheckPresence+0x1e>
 80145b8:	7bfb      	ldrb	r3, [r7, #15]
 80145ba:	2b08      	cmp	r3, #8
 80145bc:	d108      	bne.n	80145d0 <rfalNfcbPollerCheckPresence+0x30>
 80145be:	7bbb      	ldrb	r3, [r7, #14]
 80145c0:	2b04      	cmp	r3, #4
 80145c2:	d805      	bhi.n	80145d0 <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d002      	beq.n	80145d0 <rfalNfcbPollerCheckPresence+0x30>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d101      	bne.n	80145d4 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 80145d0:	2307      	movs	r3, #7
 80145d2:	e044      	b.n	801465e <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2200      	movs	r2, #0
 80145d8:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 80145da:	220d      	movs	r2, #13
 80145dc:	2100      	movs	r1, #0
 80145de:	68b8      	ldr	r0, [r7, #8]
 80145e0:	f007 fb8e 	bl	801bd00 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 80145e4:	2305      	movs	r3, #5
 80145e6:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 80145e8:	4b1f      	ldr	r3, [pc, #124]	; (8014668 <rfalNfcbPollerCheckPresence+0xc8>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 80145ee:	4b1e      	ldr	r3, [pc, #120]	; (8014668 <rfalNfcbPollerCheckPresence+0xc8>)
 80145f0:	785b      	ldrb	r3, [r3, #1]
 80145f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80145f6:	b2da      	uxtb	r2, r3
 80145f8:	7bfb      	ldrb	r3, [r7, #15]
 80145fa:	4313      	orrs	r3, r2
 80145fc:	b2da      	uxtb	r2, r3
 80145fe:	7bbb      	ldrb	r3, [r7, #14]
 8014600:	4313      	orrs	r3, r2
 8014602:	b2db      	uxtb	r3, r3
 8014604:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 8014606:	f107 0010 	add.w	r0, r7, #16
 801460a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 801460e:	9302      	str	r3, [sp, #8]
 8014610:	2300      	movs	r3, #0
 8014612:	9301      	str	r3, [sp, #4]
 8014614:	f107 0314 	add.w	r3, r7, #20
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	230d      	movs	r3, #13
 801461c:	68ba      	ldr	r2, [r7, #8]
 801461e:	2103      	movs	r1, #3
 8014620:	f002 fbd2 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8014624:	4603      	mov	r3, r0
 8014626:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 8014628:	8abb      	ldrh	r3, [r7, #20]
 801462a:	b2da      	uxtb	r2, r3
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8014630:	8afb      	ldrh	r3, [r7, #22]
 8014632:	2b15      	cmp	r3, #21
 8014634:	d002      	beq.n	801463c <rfalNfcbPollerCheckPresence+0x9c>
 8014636:	8afb      	ldrh	r3, [r7, #22]
 8014638:	2b09      	cmp	r3, #9
 801463a:	d104      	bne.n	8014646 <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 8014642:	2300      	movs	r3, #0
 8014644:	e00b      	b.n	801465e <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 8014646:	8afb      	ldrh	r3, [r7, #22]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d107      	bne.n	801465c <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	4619      	mov	r1, r3
 8014652:	68b8      	ldr	r0, [r7, #8]
 8014654:	f7ff ff57 	bl	8014506 <rfalNfcbCheckSensbRes>
 8014658:	4603      	mov	r3, r0
 801465a:	e000      	b.n	801465e <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 801465c:	8afb      	ldrh	r3, [r7, #22]
}
 801465e:	4618      	mov	r0, r3
 8014660:	3718      	adds	r7, #24
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
 8014666:	bf00      	nop
 8014668:	200034d0 	.word	0x200034d0

0801466c <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b08a      	sub	sp, #40	; 0x28
 8014670:	af04      	add	r7, sp, #16
 8014672:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d101      	bne.n	801467e <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 801467a:	2307      	movs	r3, #7
 801467c:	e024      	b.n	80146c8 <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 801467e:	2350      	movs	r3, #80	; 0x50
 8014680:	733b      	strb	r3, [r7, #12]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 8014686:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 801468a:	f107 0208 	add.w	r2, r7, #8
 801468e:	f107 000c 	add.w	r0, r7, #12
 8014692:	4b0f      	ldr	r3, [pc, #60]	; (80146d0 <rfalNfcbPollerSleep+0x64>)
 8014694:	9302      	str	r3, [sp, #8]
 8014696:	2300      	movs	r3, #0
 8014698:	9301      	str	r3, [sp, #4]
 801469a:	f107 0314 	add.w	r3, r7, #20
 801469e:	9300      	str	r3, [sp, #0]
 80146a0:	2301      	movs	r3, #1
 80146a2:	2105      	movs	r1, #5
 80146a4:	f002 fb90 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 80146a8:	4603      	mov	r3, r0
 80146aa:	82fb      	strh	r3, [r7, #22]
 80146ac:	8afb      	ldrh	r3, [r7, #22]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d001      	beq.n	80146b6 <rfalNfcbPollerSleep+0x4a>
 80146b2:	8afb      	ldrh	r3, [r7, #22]
 80146b4:	e008      	b.n	80146c8 <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 80146b6:	8abb      	ldrh	r3, [r7, #20]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d102      	bne.n	80146c2 <rfalNfcbPollerSleep+0x56>
 80146bc:	7a3b      	ldrb	r3, [r7, #8]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d001      	beq.n	80146c6 <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 80146c2:	230b      	movs	r3, #11
 80146c4:	e000      	b.n	80146c8 <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 80146c6:	2300      	movs	r3, #0
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3718      	adds	r7, #24
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	0003a278 	.word	0x0003a278

080146d4 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08a      	sub	sp, #40	; 0x28
 80146d8:	af04      	add	r7, sp, #16
 80146da:	4603      	mov	r3, r0
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
 80146e0:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d008      	beq.n	80146fa <rfalNfcbPollerSlotMarker+0x26>
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d005      	beq.n	80146fa <rfalNfcbPollerSlotMarker+0x26>
 80146ee:	7bfb      	ldrb	r3, [r7, #15]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d002      	beq.n	80146fa <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 80146f4:	7bfb      	ldrb	r3, [r7, #15]
 80146f6:	2b10      	cmp	r3, #16
 80146f8:	d901      	bls.n	80146fe <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 80146fa:	2307      	movs	r3, #7
 80146fc:	e02f      	b.n	801475e <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 80146fe:	7bfb      	ldrb	r3, [r7, #15]
 8014700:	011b      	lsls	r3, r3, #4
 8014702:	b25b      	sxtb	r3, r3
 8014704:	f043 0305 	orr.w	r3, r3, #5
 8014708:	b25b      	sxtb	r3, r3
 801470a:	b2db      	uxtb	r3, r3
 801470c:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 801470e:	f107 0014 	add.w	r0, r7, #20
 8014712:	4b15      	ldr	r3, [pc, #84]	; (8014768 <rfalNfcbPollerSlotMarker+0x94>)
 8014714:	9302      	str	r3, [sp, #8]
 8014716:	2300      	movs	r3, #0
 8014718:	9301      	str	r3, [sp, #4]
 801471a:	f107 0312 	add.w	r3, r7, #18
 801471e:	9300      	str	r3, [sp, #0]
 8014720:	230d      	movs	r3, #13
 8014722:	68ba      	ldr	r2, [r7, #8]
 8014724:	2101      	movs	r1, #1
 8014726:	f002 fb4f 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801472a:	4603      	mov	r3, r0
 801472c:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 801472e:	8a7b      	ldrh	r3, [r7, #18]
 8014730:	b2da      	uxtb	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8014736:	8afb      	ldrh	r3, [r7, #22]
 8014738:	2b15      	cmp	r3, #21
 801473a:	d002      	beq.n	8014742 <rfalNfcbPollerSlotMarker+0x6e>
 801473c:	8afb      	ldrh	r3, [r7, #22]
 801473e:	2b09      	cmp	r3, #9
 8014740:	d101      	bne.n	8014746 <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 8014742:	231d      	movs	r3, #29
 8014744:	e00b      	b.n	801475e <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 8014746:	8afb      	ldrh	r3, [r7, #22]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d107      	bne.n	801475c <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	4619      	mov	r1, r3
 8014752:	68b8      	ldr	r0, [r7, #8]
 8014754:	f7ff fed7 	bl	8014506 <rfalNfcbCheckSensbRes>
 8014758:	4603      	mov	r3, r0
 801475a:	e000      	b.n	801475e <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 801475c:	8afb      	ldrh	r3, [r7, #22]
}
 801475e:	4618      	mov	r0, r3
 8014760:	3718      	adds	r7, #24
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	0003a278 	.word	0x0003a278

0801476c <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	4603      	mov	r3, r0
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
 8014778:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	68ba      	ldr	r2, [r7, #8]
 801477e:	2100      	movs	r1, #0
 8014780:	2000      	movs	r0, #0
 8014782:	f7ff ff0d 	bl	80145a0 <rfalNfcbPollerCheckPresence>
 8014786:	4603      	mov	r3, r0
}
 8014788:	4618      	mov	r0, r3
 801478a:	3710      	adds	r7, #16
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b08a      	sub	sp, #40	; 0x28
 8014794:	af04      	add	r7, sp, #16
 8014796:	60ba      	str	r2, [r7, #8]
 8014798:	607b      	str	r3, [r7, #4]
 801479a:	4603      	mov	r3, r0
 801479c:	73fb      	strb	r3, [r7, #15]
 801479e:	460b      	mov	r3, r1
 80147a0:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 80147a2:	7bb9      	ldrb	r1, [r7, #14]
 80147a4:	7bf8      	ldrb	r0, [r7, #15]
 80147a6:	f107 0317 	add.w	r3, r7, #23
 80147aa:	9302      	str	r3, [sp, #8]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	9301      	str	r3, [sp, #4]
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	9300      	str	r3, [sp, #0]
 80147b4:	2304      	movs	r3, #4
 80147b6:	2200      	movs	r2, #0
 80147b8:	f000 f805 	bl	80147c6 <rfalNfcbPollerSlottedCollisionResolution>
 80147bc:	4603      	mov	r3, r0
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3718      	adds	r7, #24
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}

080147c6 <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 80147c6:	b590      	push	{r4, r7, lr}
 80147c8:	b085      	sub	sp, #20
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	4604      	mov	r4, r0
 80147ce:	4608      	mov	r0, r1
 80147d0:	4611      	mov	r1, r2
 80147d2:	461a      	mov	r2, r3
 80147d4:	4623      	mov	r3, r4
 80147d6:	71fb      	strb	r3, [r7, #7]
 80147d8:	4603      	mov	r3, r0
 80147da:	71bb      	strb	r3, [r7, #6]
 80147dc:	460b      	mov	r3, r1
 80147de:	717b      	strb	r3, [r7, #5]
 80147e0:	4613      	mov	r3, r2
 80147e2:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 80147e4:	6a3b      	ldr	r3, [r7, #32]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d011      	beq.n	801480e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80147ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d00e      	beq.n	801480e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80147f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00b      	beq.n	801480e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80147f6:	797b      	ldrb	r3, [r7, #5]
 80147f8:	2b04      	cmp	r3, #4
 80147fa:	d808      	bhi.n	801480e <rfalNfcbPollerSlottedCollisionResolution+0x48>
 80147fc:	793b      	ldrb	r3, [r7, #4]
 80147fe:	2b04      	cmp	r3, #4
 8014800:	d805      	bhi.n	801480e <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 8014802:	79fb      	ldrb	r3, [r7, #7]
 8014804:	2b02      	cmp	r3, #2
 8014806:	d104      	bne.n	8014812 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 8014808:	797b      	ldrb	r3, [r7, #5]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d001      	beq.n	8014812 <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 801480e:	2307      	movs	r3, #7
 8014810:	e14c      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 8014812:	2300      	movs	r3, #0
 8014814:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	2200      	movs	r2, #0
 801481a:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 801481c:	2300      	movs	r3, #0
 801481e:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 8014820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014822:	2200      	movs	r2, #0
 8014824:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 8014826:	79fb      	ldrb	r3, [r7, #7]
 8014828:	2b02      	cmp	r3, #2
 801482a:	d010      	beq.n	801484e <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 801482c:	6a3b      	ldr	r3, [r7, #32]
 801482e:	1c5a      	adds	r2, r3, #1
 8014830:	6a3b      	ldr	r3, [r7, #32]
 8014832:	7979      	ldrb	r1, [r7, #5]
 8014834:	2008      	movs	r0, #8
 8014836:	f7ff feb3 	bl	80145a0 <rfalNfcbPollerCheckPresence>
 801483a:	4603      	mov	r3, r0
 801483c:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 801483e:	89fb      	ldrh	r3, [r7, #14]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d004      	beq.n	801484e <rfalNfcbPollerSlottedCollisionResolution+0x88>
 8014844:	797b      	ldrb	r3, [r7, #5]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d101      	bne.n	801484e <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 801484a:	89fb      	ldrh	r3, [r7, #14]
 801484c:	e12e      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 801484e:	79fb      	ldrb	r3, [r7, #7]
 8014850:	2b01      	cmp	r3, #1
 8014852:	d105      	bne.n	8014860 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 8014854:	6a3b      	ldr	r3, [r7, #32]
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d101      	bne.n	8014860 <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 801485c:	2309      	movs	r3, #9
 801485e:	e125      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8014860:	797b      	ldrb	r3, [r7, #5]
 8014862:	737b      	strb	r3, [r7, #13]
 8014864:	e11c      	b.n	8014aa0 <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 8014866:	79fb      	ldrb	r3, [r7, #7]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d11a      	bne.n	80148a2 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 801486c:	7afb      	ldrb	r3, [r7, #11]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d017      	beq.n	80148a2 <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[((*devCnt) - (uint8_t)1U)].sensbRes.nfcid0 );
 8014872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	461a      	mov	r2, r3
 8014878:	4613      	mov	r3, r2
 801487a:	011b      	lsls	r3, r3, #4
 801487c:	1a9b      	subs	r3, r3, r2
 801487e:	3b0f      	subs	r3, #15
 8014880:	6a3a      	ldr	r2, [r7, #32]
 8014882:	4413      	add	r3, r2
 8014884:	3302      	adds	r3, #2
 8014886:	4618      	mov	r0, r3
 8014888:	f7ff fef0 	bl	801466c <rfalNfcbPollerSleep>
                    nfcbDevList[((*devCnt) - (uint8_t)1U)].isSleep = true;
 801488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	461a      	mov	r2, r3
 8014892:	4613      	mov	r3, r2
 8014894:	011b      	lsls	r3, r3, #4
 8014896:	1a9b      	subs	r3, r3, r2
 8014898:	3b0f      	subs	r3, #15
 801489a:	6a3a      	ldr	r2, [r7, #32]
 801489c:	4413      	add	r3, r2
 801489e:	2201      	movs	r2, #1
 80148a0:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 80148a2:	7b7a      	ldrb	r2, [r7, #13]
 80148a4:	797b      	ldrb	r3, [r7, #5]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d103      	bne.n	80148b2 <rfalNfcbPollerSlottedCollisionResolution+0xec>
 80148aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d017      	beq.n	80148e2 <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 80148b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	461a      	mov	r2, r3
 80148b8:	4613      	mov	r3, r2
 80148ba:	011b      	lsls	r3, r3, #4
 80148bc:	1a9b      	subs	r3, r3, r2
 80148be:	6a3a      	ldr	r2, [r7, #32]
 80148c0:	4413      	add	r3, r2
 80148c2:	1c58      	adds	r0, r3, #1
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	461a      	mov	r2, r3
 80148ca:	4613      	mov	r3, r2
 80148cc:	011b      	lsls	r3, r3, #4
 80148ce:	1a9b      	subs	r3, r3, r2
 80148d0:	6a3a      	ldr	r2, [r7, #32]
 80148d2:	4413      	add	r3, r2
 80148d4:	7b79      	ldrb	r1, [r7, #13]
 80148d6:	4602      	mov	r2, r0
 80148d8:	2000      	movs	r0, #0
 80148da:	f7ff fe61 	bl	80145a0 <rfalNfcbPollerCheckPresence>
 80148de:	4603      	mov	r3, r0
 80148e0:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 80148e2:	2300      	movs	r3, #0
 80148e4:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 80148e6:	2300      	movs	r3, #0
 80148e8:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 80148ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ec:	2200      	movs	r2, #0
 80148ee:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 80148f0:	7b3b      	ldrb	r3, [r7, #12]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d017      	beq.n	8014926 <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 80148f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f8:	781b      	ldrb	r3, [r3, #0]
 80148fa:	461a      	mov	r2, r3
 80148fc:	4613      	mov	r3, r2
 80148fe:	011b      	lsls	r3, r3, #4
 8014900:	1a9b      	subs	r3, r3, r2
 8014902:	6a3a      	ldr	r2, [r7, #32]
 8014904:	4413      	add	r3, r2
 8014906:	1c59      	adds	r1, r3, #1
 8014908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	461a      	mov	r2, r3
 801490e:	4613      	mov	r3, r2
 8014910:	011b      	lsls	r3, r3, #4
 8014912:	1a9b      	subs	r3, r3, r2
 8014914:	6a3a      	ldr	r2, [r7, #32]
 8014916:	4413      	add	r3, r2
 8014918:	461a      	mov	r2, r3
 801491a:	7b3b      	ldrb	r3, [r7, #12]
 801491c:	4618      	mov	r0, r3
 801491e:	f7ff fed9 	bl	80146d4 <rfalNfcbPollerSlotMarker>
 8014922:	4603      	mov	r3, r0
 8014924:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 8014926:	89fb      	ldrh	r3, [r7, #14]
 8014928:	2b04      	cmp	r3, #4
 801492a:	f000 809d 	beq.w	8014a68 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 801492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	461a      	mov	r2, r3
 8014934:	4613      	mov	r3, r2
 8014936:	011b      	lsls	r3, r3, #4
 8014938:	1a9b      	subs	r3, r3, r2
 801493a:	6a3a      	ldr	r2, [r7, #32]
 801493c:	4413      	add	r3, r2
 801493e:	1c58      	adds	r0, r3, #1
 8014940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	461a      	mov	r2, r3
 8014946:	4613      	mov	r3, r2
 8014948:	011b      	lsls	r3, r3, #4
 801494a:	1a9b      	subs	r3, r3, r2
 801494c:	6a3a      	ldr	r2, [r7, #32]
 801494e:	4413      	add	r3, r2
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	4619      	mov	r1, r3
 8014954:	f7ff fdd7 	bl	8014506 <rfalNfcbCheckSensbRes>
 8014958:	4603      	mov	r3, r0
 801495a:	2b00      	cmp	r3, #0
 801495c:	d177      	bne.n	8014a4e <rfalNfcbPollerSlottedCollisionResolution+0x288>
 801495e:	89fb      	ldrh	r3, [r7, #14]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d174      	bne.n	8014a4e <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 8014964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	461a      	mov	r2, r3
 801496a:	4613      	mov	r3, r2
 801496c:	011b      	lsls	r3, r3, #4
 801496e:	1a9b      	subs	r3, r3, r2
 8014970:	6a3a      	ldr	r2, [r7, #32]
 8014972:	4413      	add	r3, r2
 8014974:	2200      	movs	r2, #0
 8014976:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8014978:	79fb      	ldrb	r3, [r7, #7]
 801497a:	2b01      	cmp	r3, #1
 801497c:	d107      	bne.n	801498e <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	3301      	adds	r3, #1
 8014984:	b2da      	uxtb	r2, r3
 8014986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014988:	701a      	strb	r2, [r3, #0]
                                return ret;
 801498a:	89fb      	ldrh	r3, [r7, #14]
 801498c:	e08e      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 801498e:	79fb      	ldrb	r3, [r7, #7]
 8014990:	2b02      	cmp	r3, #2
 8014992:	d12b      	bne.n	80149ec <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	3301      	adds	r3, #1
 801499a:	b2da      	uxtb	r2, r3
 801499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499e:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 80149a0:	7afb      	ldrb	r3, [r7, #11]
 80149a2:	3301      	adds	r3, #1
 80149a4:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80149a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	79ba      	ldrb	r2, [r7, #6]
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d902      	bls.n	80149b6 <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 80149b0:	7b7b      	ldrb	r3, [r7, #13]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d101      	bne.n	80149ba <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 80149b6:	89fb      	ldrh	r3, [r7, #14]
 80149b8:	e078      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 80149ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	461a      	mov	r2, r3
 80149c0:	4613      	mov	r3, r2
 80149c2:	011b      	lsls	r3, r3, #4
 80149c4:	1a9b      	subs	r3, r3, r2
 80149c6:	3b0f      	subs	r3, #15
 80149c8:	6a3a      	ldr	r2, [r7, #32]
 80149ca:	4413      	add	r3, r2
 80149cc:	3302      	adds	r3, #2
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7ff fe4c 	bl	801466c <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	461a      	mov	r2, r3
 80149da:	4613      	mov	r3, r2
 80149dc:	011b      	lsls	r3, r3, #4
 80149de:	1a9b      	subs	r3, r3, r2
 80149e0:	3b0f      	subs	r3, #15
 80149e2:	6a3a      	ldr	r2, [r7, #32]
 80149e4:	4413      	add	r3, r2
 80149e6:	2201      	movs	r2, #1
 80149e8:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 80149ea:	e03c      	b.n	8014a66 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80149ec:	79fb      	ldrb	r3, [r7, #7]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d139      	bne.n	8014a66 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 80149f2:	7afb      	ldrb	r3, [r7, #11]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d017      	beq.n	8014a28 <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt) - (uint8_t)1U].sensbRes.nfcid0 );
 80149f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	461a      	mov	r2, r3
 80149fe:	4613      	mov	r3, r2
 8014a00:	011b      	lsls	r3, r3, #4
 8014a02:	1a9b      	subs	r3, r3, r2
 8014a04:	3b0f      	subs	r3, #15
 8014a06:	6a3a      	ldr	r2, [r7, #32]
 8014a08:	4413      	add	r3, r2
 8014a0a:	3302      	adds	r3, #2
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7ff fe2d 	bl	801466c <rfalNfcbPollerSleep>
                                    nfcbDevList[(*devCnt) - (uint8_t)1U].isSleep = true;
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	461a      	mov	r2, r3
 8014a18:	4613      	mov	r3, r2
 8014a1a:	011b      	lsls	r3, r3, #4
 8014a1c:	1a9b      	subs	r3, r3, r2
 8014a1e:	3b0f      	subs	r3, #15
 8014a20:	6a3a      	ldr	r2, [r7, #32]
 8014a22:	4413      	add	r3, r2
 8014a24:	2201      	movs	r2, #1
 8014a26:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 8014a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	b2da      	uxtb	r2, r3
 8014a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a32:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 8014a34:	7afb      	ldrb	r3, [r7, #11]
 8014a36:	3301      	adds	r3, #1
 8014a38:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8014a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	79ba      	ldrb	r2, [r7, #6]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d902      	bls.n	8014a4a <rfalNfcbPollerSlottedCollisionResolution+0x284>
 8014a44:	7b7b      	ldrb	r3, [r7, #13]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d10d      	bne.n	8014a66 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 8014a4a:	89fb      	ldrh	r3, [r7, #14]
 8014a4c:	e02e      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8014a4e:	79bb      	ldrb	r3, [r7, #6]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d104      	bne.n	8014a5e <rfalNfcbPollerSlottedCollisionResolution+0x298>
 8014a54:	7b7b      	ldrb	r3, [r7, #13]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d101      	bne.n	8014a5e <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 8014a5a:	231d      	movs	r3, #29
 8014a5c:	e026      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 8014a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a60:	2201      	movs	r2, #1
 8014a62:	701a      	strb	r2, [r3, #0]
 8014a64:	e000      	b.n	8014a68 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 8014a66:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 8014a68:	7b3b      	ldrb	r3, [r7, #12]
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 8014a6e:	7b7b      	ldrb	r3, [r7, #13]
 8014a70:	2201      	movs	r2, #1
 8014a72:	fa02 f303 	lsl.w	r3, r2, r3
 8014a76:	b2db      	uxtb	r3, r3
 8014a78:	7b3a      	ldrb	r2, [r7, #12]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	f4ff af38 	bcc.w	80148f0 <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 8014a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	f083 0301 	eor.w	r3, r3, #1
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d001      	beq.n	8014a92 <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	e00c      	b.n	8014aac <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 8014a92:	7afb      	ldrb	r3, [r7, #11]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	f47f aee6 	bne.w	8014866 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 8014a9a:	7b7b      	ldrb	r3, [r7, #13]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	737b      	strb	r3, [r7, #13]
 8014aa0:	7b7a      	ldrb	r2, [r7, #13]
 8014aa2:	793b      	ldrb	r3, [r7, #4]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	f67f aede 	bls.w	8014866 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 8014aaa:	2300      	movs	r3, #0
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3714      	adds	r7, #20
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd90      	pop	{r4, r7, pc}

08014ab4 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b085      	sub	sp, #20
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	4603      	mov	r3, r0
 8014abc:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 8014abe:	4a0a      	ldr	r2, [pc, #40]	; (8014ae8 <rfalNfcbTR2ToFDT+0x34>)
 8014ac0:	f107 0308 	add.w	r3, r7, #8
 8014ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ac8:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 8014acc:	79fb      	ldrb	r3, [r7, #7]
 8014ace:	f003 0303 	and.w	r3, r3, #3
 8014ad2:	005b      	lsls	r3, r3, #1
 8014ad4:	f107 0210 	add.w	r2, r7, #16
 8014ad8:	4413      	add	r3, r2
 8014ada:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3714      	adds	r7, #20
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bc80      	pop	{r7}
 8014ae6:	4770      	bx	lr
 8014ae8:	0801e170 	.word	0x0801e170

08014aec <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 8014aec:	b5b0      	push	{r4, r5, r7, lr}
 8014aee:	b08c      	sub	sp, #48	; 0x30
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	4611      	mov	r1, r2
 8014af8:	461a      	mov	r2, r3
 8014afa:	460b      	mov	r3, r1
 8014afc:	71fb      	strb	r3, [r7, #7]
 8014afe:	4613      	mov	r3, r2
 8014b00:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8014b02:	e0e5      	b.n	8014cd0 <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 8014b04:	2300      	movs	r3, #0
 8014b06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 8014b0a:	4b78      	ldr	r3, [pc, #480]	; (8014cec <rfalNfcfComputeValidSENF+0x200>)
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	3b01      	subs	r3, #1
 8014b10:	b2da      	uxtb	r2, r3
 8014b12:	4b76      	ldr	r3, [pc, #472]	; (8014cec <rfalNfcfComputeValidSENF+0x200>)
 8014b14:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 8014b16:	4b75      	ldr	r3, [pc, #468]	; (8014cec <rfalNfcfComputeValidSENF+0x200>)
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	009b      	lsls	r3, r3, #2
 8014b20:	4413      	add	r3, r2
 8014b22:	009b      	lsls	r3, r3, #2
 8014b24:	4a71      	ldr	r2, [pc, #452]	; (8014cec <rfalNfcfComputeValidSENF+0x200>)
 8014b26:	4413      	add	r3, r2
 8014b28:	3302      	adds	r3, #2
 8014b2a:	f107 0414 	add.w	r4, r7, #20
 8014b2e:	461d      	mov	r5, r3
 8014b30:	6828      	ldr	r0, [r5, #0]
 8014b32:	6869      	ldr	r1, [r5, #4]
 8014b34:	68aa      	ldr	r2, [r5, #8]
 8014b36:	68eb      	ldr	r3, [r5, #12]
 8014b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b3a:	8a2b      	ldrh	r3, [r5, #16]
 8014b3c:	7caa      	ldrb	r2, [r5, #18]
 8014b3e:	8023      	strh	r3, [r4, #0]
 8014b40:	4613      	mov	r3, r2
 8014b42:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 8014b44:	f107 0314 	add.w	r3, r7, #20
 8014b48:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014b50:	e01b      	b.n	8014b8a <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 8014b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b54:	1c98      	adds	r0, r3, #2
 8014b56:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	00db      	lsls	r3, r3, #3
 8014b5e:	4413      	add	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	68fa      	ldr	r2, [r7, #12]
 8014b66:	4413      	add	r3, r2
 8014b68:	3302      	adds	r3, #2
 8014b6a:	2208      	movs	r2, #8
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	f007 f891 	bl	801bc94 <memcmp>
 8014b72:	4603      	mov	r3, r0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d103      	bne.n	8014b80 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 8014b78:	2301      	movs	r3, #1
 8014b7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 8014b7e:	e00a      	b.n	8014b96 <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8014b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b84:	3301      	adds	r3, #1
 8014b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	781b      	ldrb	r3, [r3, #0]
 8014b8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d3dd      	bcc.n	8014b52 <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 8014b96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d006      	beq.n	8014bac <rfalNfcfComputeValidSENF+0xc0>
 8014b9e:	79bb      	ldrb	r3, [r7, #6]
 8014ba0:	f083 0301 	eor.w	r3, r3, #1
 8014ba4:	b2db      	uxtb	r3, r3
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d000      	beq.n	8014bac <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 8014baa:	e091      	b.n	8014cd0 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 8014bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	3b02      	subs	r3, #2
 8014bb2:	2b0f      	cmp	r3, #15
 8014bb4:	f240 808c 	bls.w	8014cd0 <rfalNfcfComputeValidSENF+0x1e4>
 8014bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	3b02      	subs	r3, #2
 8014bbe:	2b12      	cmp	r3, #18
 8014bc0:	d900      	bls.n	8014bc4 <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 8014bc2:	e085      	b.n	8014cd0 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 8014bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc6:	785b      	ldrb	r3, [r3, #1]
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d000      	beq.n	8014bce <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 8014bcc:	e080      	b.n	8014cd0 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 8014bce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d02a      	beq.n	8014c2c <rfalNfcfComputeValidSENF+0x140>
 8014bd6:	79bb      	ldrb	r3, [r7, #6]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d027      	beq.n	8014c2c <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8014bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bde:	7819      	ldrb	r1, [r3, #0]
 8014be0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014be4:	4613      	mov	r3, r2
 8014be6:	00db      	lsls	r3, r3, #3
 8014be8:	4413      	add	r3, r2
 8014bea:	005b      	lsls	r3, r3, #1
 8014bec:	4413      	add	r3, r2
 8014bee:	68fa      	ldr	r2, [r7, #12]
 8014bf0:	4413      	add	r3, r2
 8014bf2:	1e4a      	subs	r2, r1, #1
 8014bf4:	b2d2      	uxtb	r2, r2
 8014bf6:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 8014bf8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	00db      	lsls	r3, r3, #3
 8014c00:	4413      	add	r3, r2
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	4413      	add	r3, r2
 8014c06:	68fa      	ldr	r2, [r7, #12]
 8014c08:	4413      	add	r3, r2
 8014c0a:	1c58      	adds	r0, r3, #1
 8014c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0e:	1c59      	adds	r1, r3, #1
 8014c10:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014c14:	4613      	mov	r3, r2
 8014c16:	00db      	lsls	r3, r3, #3
 8014c18:	4413      	add	r3, r2
 8014c1a:	005b      	lsls	r3, r3, #1
 8014c1c:	4413      	add	r3, r2
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	4413      	add	r3, r2
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	461a      	mov	r2, r3
 8014c26:	f007 f843 	bl	801bcb0 <memcpy>
            continue;
 8014c2a:	e051      	b.n	8014cd0 <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 8014c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2e:	7819      	ldrb	r1, [r3, #0]
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	461a      	mov	r2, r3
 8014c36:	4613      	mov	r3, r2
 8014c38:	00db      	lsls	r3, r3, #3
 8014c3a:	4413      	add	r3, r2
 8014c3c:	005b      	lsls	r3, r3, #1
 8014c3e:	4413      	add	r3, r2
 8014c40:	68fa      	ldr	r2, [r7, #12]
 8014c42:	4413      	add	r3, r2
 8014c44:	1e4a      	subs	r2, r1, #1
 8014c46:	b2d2      	uxtb	r2, r2
 8014c48:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	4613      	mov	r3, r2
 8014c52:	00db      	lsls	r3, r3, #3
 8014c54:	4413      	add	r3, r2
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	4413      	add	r3, r2
 8014c5a:	68fa      	ldr	r2, [r7, #12]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	1c58      	adds	r0, r3, #1
 8014c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c62:	1c59      	adds	r1, r3, #1
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	461a      	mov	r2, r3
 8014c6a:	4613      	mov	r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	4413      	add	r3, r2
 8014c70:	005b      	lsls	r3, r3, #1
 8014c72:	4413      	add	r3, r2
 8014c74:	68fa      	ldr	r2, [r7, #12]
 8014c76:	4413      	add	r3, r2
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	f007 f818 	bl	801bcb0 <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	461a      	mov	r2, r3
 8014c86:	4613      	mov	r3, r2
 8014c88:	00db      	lsls	r3, r3, #3
 8014c8a:	4413      	add	r3, r2
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	4413      	add	r3, r2
 8014c90:	68fa      	ldr	r2, [r7, #12]
 8014c92:	4413      	add	r3, r2
 8014c94:	789b      	ldrb	r3, [r3, #2]
 8014c96:	2b01      	cmp	r3, #1
 8014c98:	d10e      	bne.n	8014cb8 <rfalNfcfComputeValidSENF+0x1cc>
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	00db      	lsls	r3, r3, #3
 8014ca4:	4413      	add	r3, r2
 8014ca6:	005b      	lsls	r3, r3, #1
 8014ca8:	4413      	add	r3, r2
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	4413      	add	r3, r2
 8014cae:	78db      	ldrb	r3, [r3, #3]
 8014cb0:	2bfe      	cmp	r3, #254	; 0xfe
 8014cb2:	d101      	bne.n	8014cb8 <rfalNfcfComputeValidSENF+0x1cc>
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	e000      	b.n	8014cba <rfalNfcfComputeValidSENF+0x1ce>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	f003 0301 	and.w	r3, r3, #1
 8014cbe:	b2da      	uxtb	r2, r3
 8014cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cc2:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	3301      	adds	r3, #1
 8014cca:	b2da      	uxtb	r2, r3
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 8014cd0:	4b06      	ldr	r3, [pc, #24]	; (8014cec <rfalNfcfComputeValidSENF+0x200>)
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d005      	beq.n	8014ce4 <rfalNfcfComputeValidSENF+0x1f8>
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	79fa      	ldrb	r2, [r7, #7]
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	f63f af10 	bhi.w	8014b04 <rfalNfcfComputeValidSENF+0x18>
    }
}
 8014ce4:	bf00      	nop
 8014ce6:	3730      	adds	r7, #48	; 0x30
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bdb0      	pop	{r4, r5, r7, pc}
 8014cec:	200034d4 	.word	0x200034d4

08014cf0 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b084      	sub	sp, #16
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 8014cfa:	79fb      	ldrb	r3, [r7, #7]
 8014cfc:	2b01      	cmp	r3, #1
 8014cfe:	d004      	beq.n	8014d0a <rfalNfcfPollerInitialize+0x1a>
 8014d00:	79fb      	ldrb	r3, [r7, #7]
 8014d02:	2b02      	cmp	r3, #2
 8014d04:	d001      	beq.n	8014d0a <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 8014d06:	2307      	movs	r3, #7
 8014d08:	e01b      	b.n	8014d42 <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 8014d0a:	79fa      	ldrb	r2, [r7, #7]
 8014d0c:	79fb      	ldrb	r3, [r7, #7]
 8014d0e:	4619      	mov	r1, r3
 8014d10:	2006      	movs	r0, #6
 8014d12:	f001 f941 	bl	8015f98 <rfalSetMode>
 8014d16:	4603      	mov	r3, r0
 8014d18:	81fb      	strh	r3, [r7, #14]
 8014d1a:	89fb      	ldrh	r3, [r7, #14]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d001      	beq.n	8014d24 <rfalNfcfPollerInitialize+0x34>
 8014d20:	89fb      	ldrh	r3, [r7, #14]
 8014d22:	e00e      	b.n	8014d42 <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8014d24:	2001      	movs	r0, #1
 8014d26:	f001 fd7b 	bl	8016820 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 8014d2a:	4808      	ldr	r0, [pc, #32]	; (8014d4c <rfalNfcfPollerInitialize+0x5c>)
 8014d2c:	f001 fdcc 	bl	80168c8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 8014d30:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 8014d34:	f001 fdb4 	bl	80168a0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 8014d38:	f641 2090 	movw	r0, #6800	; 0x1a90
 8014d3c:	f001 fd92 	bl	8016864 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8014d40:	2300      	movs	r3, #0
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3710      	adds	r7, #16
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	00042360 	.word	0x00042360

08014d50 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 8014d50:	b590      	push	{r4, r7, lr}
 8014d52:	b087      	sub	sp, #28
 8014d54:	af04      	add	r7, sp, #16
 8014d56:	603b      	str	r3, [r7, #0]
 8014d58:	4603      	mov	r3, r0
 8014d5a:	71fb      	strb	r3, [r7, #7]
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	80bb      	strh	r3, [r7, #4]
 8014d60:	4613      	mov	r3, r2
 8014d62:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 8014d64:	79fb      	ldrb	r3, [r7, #7]
 8014d66:	3301      	adds	r3, #1
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	79bc      	ldrb	r4, [r7, #6]
 8014d6c:	88b9      	ldrh	r1, [r7, #4]
 8014d6e:	79f8      	ldrb	r0, [r7, #7]
 8014d70:	69fa      	ldr	r2, [r7, #28]
 8014d72:	9202      	str	r2, [sp, #8]
 8014d74:	69ba      	ldr	r2, [r7, #24]
 8014d76:	9201      	str	r2, [sp, #4]
 8014d78:	9300      	str	r3, [sp, #0]
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	4622      	mov	r2, r4
 8014d7e:	f003 fb31 	bl	80183e4 <rfalFeliCaPoll>
 8014d82:	4603      	mov	r3, r0
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd90      	pop	{r4, r7, pc}

08014d8c <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 8014d92:	4b0b      	ldr	r3, [pc, #44]	; (8014dc0 <rfalNfcfPollerCheckPresence+0x34>)
 8014d94:	2200      	movs	r2, #0
 8014d96:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 8014d98:	4b09      	ldr	r3, [pc, #36]	; (8014dc0 <rfalNfcfPollerCheckPresence+0x34>)
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8014d9e:	4b09      	ldr	r3, [pc, #36]	; (8014dc4 <rfalNfcfPollerCheckPresence+0x38>)
 8014da0:	9302      	str	r3, [sp, #8]
 8014da2:	4b07      	ldr	r3, [pc, #28]	; (8014dc0 <rfalNfcfPollerCheckPresence+0x34>)
 8014da4:	9301      	str	r3, [sp, #4]
 8014da6:	2304      	movs	r3, #4
 8014da8:	9300      	str	r3, [sp, #0]
 8014daa:	4b07      	ldr	r3, [pc, #28]	; (8014dc8 <rfalNfcfPollerCheckPresence+0x3c>)
 8014dac:	2200      	movs	r2, #0
 8014dae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014db2:	2003      	movs	r0, #3
 8014db4:	f003 fb16 	bl	80183e4 <rfalFeliCaPoll>
 8014db8:	4603      	mov	r3, r0
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	200034d4 	.word	0x200034d4
 8014dc4:	200034d5 	.word	0x200034d5
 8014dc8:	200034d6 	.word	0x200034d6

08014dcc <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b088      	sub	sp, #32
 8014dd0:	af02      	add	r7, sp, #8
 8014dd2:	60ba      	str	r2, [r7, #8]
 8014dd4:	607b      	str	r3, [r7, #4]
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	73fb      	strb	r3, [r7, #15]
 8014dda:	460b      	mov	r3, r1
 8014ddc:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 8014dde:	68bb      	ldr	r3, [r7, #8]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d002      	beq.n	8014dea <rfalNfcfPollerCollisionResolution+0x1e>
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d101      	bne.n	8014dee <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8014dea:	2307      	movs	r3, #7
 8014dec:	e053      	b.n	8014e96 <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2200      	movs	r2, #0
 8014df2:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 8014df4:	2300      	movs	r3, #0
 8014df6:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 8014df8:	7bbb      	ldrb	r3, [r7, #14]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d001      	beq.n	8014e02 <rfalNfcfPollerCollisionResolution+0x36>
 8014dfe:	7bba      	ldrb	r2, [r7, #14]
 8014e00:	e000      	b.n	8014e04 <rfalNfcfPollerCollisionResolution+0x38>
 8014e02:	2204      	movs	r2, #4
 8014e04:	f107 0315 	add.w	r3, r7, #21
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	6879      	ldr	r1, [r7, #4]
 8014e0e:	68b8      	ldr	r0, [r7, #8]
 8014e10:	f7ff fe6c 	bl	8014aec <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	7bba      	ldrb	r2, [r7, #14]
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d93a      	bls.n	8014e94 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2200      	movs	r2, #0
 8014e22:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8014e24:	4b1e      	ldr	r3, [pc, #120]	; (8014ea0 <rfalNfcfPollerCollisionResolution+0xd4>)
 8014e26:	9301      	str	r3, [sp, #4]
 8014e28:	4b1e      	ldr	r3, [pc, #120]	; (8014ea4 <rfalNfcfPollerCollisionResolution+0xd8>)
 8014e2a:	9300      	str	r3, [sp, #0]
 8014e2c:	4b1e      	ldr	r3, [pc, #120]	; (8014ea8 <rfalNfcfPollerCollisionResolution+0xdc>)
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e34:	200f      	movs	r0, #15
 8014e36:	f7ff ff8b 	bl	8014d50 <rfalNfcfPollerPoll>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 8014e3e:	8afb      	ldrh	r3, [r7, #22]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d108      	bne.n	8014e56 <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 8014e44:	7bba      	ldrb	r2, [r7, #14]
 8014e46:	f107 0315 	add.w	r3, r7, #21
 8014e4a:	9300      	str	r3, [sp, #0]
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	6879      	ldr	r1, [r7, #4]
 8014e50:	68b8      	ldr	r0, [r7, #8]
 8014e52:	f7ff fe4b 	bl	8014aec <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 8014e56:	7d7b      	ldrb	r3, [r7, #21]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d01b      	beq.n	8014e94 <rfalNfcfPollerCollisionResolution+0xc8>
 8014e5c:	7bfb      	ldrb	r3, [r7, #15]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d118      	bne.n	8014e94 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 8014e62:	4b0f      	ldr	r3, [pc, #60]	; (8014ea0 <rfalNfcfPollerCollisionResolution+0xd4>)
 8014e64:	9301      	str	r3, [sp, #4]
 8014e66:	4b0f      	ldr	r3, [pc, #60]	; (8014ea4 <rfalNfcfPollerCollisionResolution+0xd8>)
 8014e68:	9300      	str	r3, [sp, #0]
 8014e6a:	4b0f      	ldr	r3, [pc, #60]	; (8014ea8 <rfalNfcfPollerCollisionResolution+0xdc>)
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e72:	200f      	movs	r0, #15
 8014e74:	f7ff ff6c 	bl	8014d50 <rfalNfcfPollerPoll>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 8014e7c:	8afb      	ldrh	r3, [r7, #22]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d108      	bne.n	8014e94 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 8014e82:	7bba      	ldrb	r2, [r7, #14]
 8014e84:	f107 0315 	add.w	r3, r7, #21
 8014e88:	9300      	str	r3, [sp, #0]
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	6879      	ldr	r1, [r7, #4]
 8014e8e:	68b8      	ldr	r0, [r7, #8]
 8014e90:	f7ff fe2c 	bl	8014aec <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 8014e94:	2300      	movs	r3, #0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3718      	adds	r7, #24
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	200034d5 	.word	0x200034d5
 8014ea4:	200034d4 	.word	0x200034d4
 8014ea8:	200034d6 	.word	0x200034d6

08014eac <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b0a0      	sub	sp, #128	; 0x80
 8014eb0:	af04      	add	r7, sp, #16
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	607a      	str	r2, [r7, #4]
 8014eb8:	807b      	strh	r3, [r7, #2]
    uint8_t       i;
    ReturnCode    ret;
    const uint8_t *checkRes;
    
    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d018      	beq.n	8014ef2 <rfalNfcfPollerCheck+0x46>
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d015      	beq.n	8014ef2 <rfalNfcfPollerCheck+0x46>
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d012      	beq.n	8014ef2 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d00e      	beq.n	8014ef2 <rfalNfcfPollerCheck+0x46>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	7a1b      	ldrb	r3, [r3, #8]
 8014ed8:	2b0f      	cmp	r3, #15
 8014eda:	d80a      	bhi.n	8014ef2 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d006      	beq.n	8014ef2 <rfalNfcfPollerCheck+0x46>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	2b0f      	cmp	r3, #15
 8014eea:	d802      	bhi.n	8014ef2 <rfalNfcfPollerCheck+0x46>
 8014eec:	887b      	ldrh	r3, [r7, #2]
 8014eee:	2b0b      	cmp	r3, #11
 8014ef0:	d801      	bhi.n	8014ef6 <rfalNfcfPollerCheck+0x4a>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8014ef2:	2307      	movs	r3, #7
 8014ef4:	e117      	b.n	8015126 <rfalNfcfPollerCheck+0x27a>
    }
    
    msgIt = 0;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 8014efc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014f00:	1c5a      	adds	r2, r3, #1
 8014f02:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8014f06:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8014f0a:	4413      	add	r3, r2
 8014f0c:	2206      	movs	r2, #6
 8014f0e:	f803 2c60 	strb.w	r2, [r3, #-96]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8014f12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014f16:	f107 0210 	add.w	r2, r7, #16
 8014f1a:	4413      	add	r3, r2
 8014f1c:	2208      	movs	r2, #8
 8014f1e:	68f9      	ldr	r1, [r7, #12]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f006 fec5 	bl	801bcb0 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 8014f26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014f2a:	3308      	adds	r3, #8
 8014f2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 8014f30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014f34:	1c5a      	adds	r2, r3, #1
 8014f36:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	781a      	ldrb	r2, [r3, #0]
 8014f40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014f44:	440b      	add	r3, r1
 8014f46:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8014f50:	e02a      	b.n	8014fa8 <rfalNfcfPollerCheck+0xfc>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	685a      	ldr	r2, [r3, #4]
 8014f56:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014f5a:	005b      	lsls	r3, r3, #1
 8014f5c:	4413      	add	r3, r2
 8014f5e:	881a      	ldrh	r2, [r3, #0]
 8014f60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014f64:	1c59      	adds	r1, r3, #1
 8014f66:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014f6a:	b2d2      	uxtb	r2, r2
 8014f6c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8014f70:	440b      	add	r3, r1
 8014f72:	f803 2c60 	strb.w	r2, [r3, #-96]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	685a      	ldr	r2, [r3, #4]
 8014f7a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014f7e:	005b      	lsls	r3, r3, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	881b      	ldrh	r3, [r3, #0]
 8014f84:	0a1b      	lsrs	r3, r3, #8
 8014f86:	b29a      	uxth	r2, r3
 8014f88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014f8c:	1c59      	adds	r1, r3, #1
 8014f8e:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014f92:	b2d2      	uxtb	r2, r2
 8014f94:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8014f98:	440b      	add	r3, r1
 8014f9a:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numServ; i++)
 8014f9e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d3ce      	bcc.n	8014f52 <rfalNfcfPollerCheck+0xa6>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8014fb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014fb8:	1c5a      	adds	r2, r3, #1
 8014fba:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	7a1a      	ldrb	r2, [r3, #8]
 8014fc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014fc8:	440b      	add	r3, r1
 8014fca:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 8014fce:	2300      	movs	r3, #0
 8014fd0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8014fd4:	e058      	b.n	8015088 <rfalNfcfPollerCheck+0x1dc>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8014fd6:	68bb      	ldr	r3, [r7, #8]
 8014fd8:	68da      	ldr	r2, [r3, #12]
 8014fda:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	441a      	add	r2, r3
 8014fe2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014fe6:	1c59      	adds	r1, r3, #1
 8014fe8:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8014fec:	7812      	ldrb	r2, [r2, #0]
 8014fee:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8014ff2:	440b      	add	r3, r1
 8014ff4:	f803 2c60 	strb.w	r2, [r3, #-96]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	68da      	ldr	r2, [r3, #12]
 8014ffc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	4413      	add	r3, r2
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	b25b      	sxtb	r3, r3
 8015008:	2b00      	cmp	r3, #0
 801500a:	da12      	bge.n	8015032 <rfalNfcfPollerCheck+0x186>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	68da      	ldr	r2, [r3, #12]
 8015010:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	4413      	add	r3, r2
 8015018:	885a      	ldrh	r2, [r3, #2]
 801501a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801501e:	1c59      	adds	r1, r3, #1
 8015020:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8015024:	b2d2      	uxtb	r2, r2
 8015026:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801502a:	440b      	add	r3, r1
 801502c:	f803 2c60 	strb.w	r2, [r3, #-96]
 8015030:	e025      	b.n	801507e <rfalNfcfPollerCheck+0x1d2>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	68da      	ldr	r2, [r3, #12]
 8015036:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	4413      	add	r3, r2
 801503e:	885a      	ldrh	r2, [r3, #2]
 8015040:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015044:	1c59      	adds	r1, r3, #1
 8015046:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 801504a:	b2d2      	uxtb	r2, r2
 801504c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8015050:	440b      	add	r3, r1
 8015052:	f803 2c60 	strb.w	r2, [r3, #-96]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	68da      	ldr	r2, [r3, #12]
 801505a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 801505e:	009b      	lsls	r3, r3, #2
 8015060:	4413      	add	r3, r2
 8015062:	885b      	ldrh	r3, [r3, #2]
 8015064:	0a1b      	lsrs	r3, r3, #8
 8015066:	b29a      	uxth	r2, r3
 8015068:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801506c:	1c59      	adds	r1, r3, #1
 801506e:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
 8015072:	b2d2      	uxtb	r2, r2
 8015074:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8015078:	440b      	add	r3, r1
 801507a:	f803 2c60 	strb.w	r2, [r3, #-96]
    for( i = 0; i < servBlock->numBlock; i++)
 801507e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8015082:	3301      	adds	r3, #1
 8015084:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	7a1b      	ldrb	r3, [r3, #8]
 801508c:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8015090:	429a      	cmp	r2, r3
 8015092:	d3a0      	bcc.n	8014fd6 <rfalNfcfPollerCheck+0x12a>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8015094:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015098:	b299      	uxth	r1, r3
 801509a:	887a      	ldrh	r2, [r7, #2]
 801509c:	f107 0010 	add.w	r0, r7, #16
 80150a0:	4b23      	ldr	r3, [pc, #140]	; (8015130 <rfalNfcfPollerCheck+0x284>)
 80150a2:	9302      	str	r3, [sp, #8]
 80150a4:	2300      	movs	r3, #0
 80150a6:	9301      	str	r3, [sp, #4]
 80150a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	4613      	mov	r3, r2
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	f001 fe8a 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 80150b4:	4603      	mov	r3, r0
 80150b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    
    if( ret == ERR_NONE )
 80150ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d12f      	bne.n	8015122 <rfalNfcfPollerCheck+0x276>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	3301      	adds	r3, #1
 80150c6:	66bb      	str	r3, [r7, #104]	; 0x68
        
        /* Check response length */
        if( *rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 80150c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80150ca:	881b      	ldrh	r3, [r3, #0]
 80150cc:	2b0a      	cmp	r3, #10
 80150ce:	d803      	bhi.n	80150d8 <rfalNfcfPollerCheck+0x22c>
        {
            ret = ERR_PROTO;
 80150d0:	230b      	movs	r3, #11
 80150d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80150d6:	e024      	b.n	8015122 <rfalNfcfPollerCheck+0x276>
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 80150d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	2b07      	cmp	r3, #7
 80150de:	d109      	bne.n	80150f4 <rfalNfcfPollerCheck+0x248>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 80150e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80150e2:	3309      	adds	r3, #9
 80150e4:	781b      	ldrb	r3, [r3, #0]
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d104      	bne.n	80150f4 <rfalNfcfPollerCheck+0x248>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)        )
 80150ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80150ec:	330a      	adds	r3, #10
 80150ee:	781b      	ldrb	r3, [r3, #0]
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d003      	beq.n	80150fc <rfalNfcfPollerCheck+0x250>
        {
            ret = ERR_REQUEST;
 80150f4:	2305      	movs	r3, #5
 80150f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80150fa:	e012      	b.n	8015122 <rfalNfcfPollerCheck+0x276>
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 80150fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80150fe:	881b      	ldrh	r3, [r3, #0]
 8015100:	3b0c      	subs	r3, #12
 8015102:	b29a      	uxth	r2, r3
 8015104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015106:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 8015108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801510a:	881b      	ldrh	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d008      	beq.n	8015122 <rfalNfcfPollerCheck+0x276>
            {
                ST_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 8015110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015112:	f103 010b 	add.w	r1, r3, #11
 8015116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015118:	881b      	ldrh	r3, [r3, #0]
 801511a:	461a      	mov	r2, r3
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f006 fdd5 	bl	801bccc <memmove>
            }
        }
    }
    
    return ret;
 8015122:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
}
 8015126:	4618      	mov	r0, r3
 8015128:	3770      	adds	r7, #112	; 0x70
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}
 801512e:	bf00      	nop
 8015130:	02000010 	.word	0x02000010

08015134 <rfalNfcfPollerUpdate>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerUpdate( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock,  uint8_t *txBuf, uint16_t txBufLen, const uint8_t *blockData, uint8_t *rxBuf, uint16_t rxBufLen )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b08c      	sub	sp, #48	; 0x30
 8015138:	af04      	add	r7, sp, #16
 801513a:	60f8      	str	r0, [r7, #12]
 801513c:	60b9      	str	r1, [r7, #8]
 801513e:	607a      	str	r2, [r7, #4]
 8015140:	807b      	strh	r3, [r7, #2]
    uint16_t      auxLen;
    const uint8_t *updateRes;
    ReturnCode    ret;

    /* Check parameters */
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d01b      	beq.n	8015180 <rfalNfcfPollerUpdate+0x4c>
 8015148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514a:	2b00      	cmp	r3, #0
 801514c:	d018      	beq.n	8015180 <rfalNfcfPollerUpdate+0x4c>
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d015      	beq.n	8015180 <rfalNfcfPollerUpdate+0x4c>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d012      	beq.n	8015180 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	7a1b      	ldrb	r3, [r3, #8]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL) || (txBuf == NULL)         ||
 801515e:	2b00      	cmp	r3, #0
 8015160:	d00e      	beq.n	8015180 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	7a1b      	ldrb	r3, [r3, #8]
 8015166:	2b0d      	cmp	r3, #13
 8015168:	d80a      	bhi.n	8015180 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	781b      	ldrb	r3, [r3, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_UPDATE_REQ_MAX_BLOCK) ||
 801516e:	2b00      	cmp	r3, #0
 8015170:	d006      	beq.n	8015180 <rfalNfcfPollerUpdate+0x4c>
        (servBlock->numServ == 0U)   || (servBlock->numServ > RFAL_NFCF_UPDATE_REQ_MAX_SERV)  ||
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	2b0f      	cmp	r3, #15
 8015178:	d802      	bhi.n	8015180 <rfalNfcfPollerUpdate+0x4c>
 801517a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801517c:	2b0b      	cmp	r3, #11
 801517e:	d801      	bhi.n	8015184 <rfalNfcfPollerUpdate+0x50>
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_UPDATE_RES_MIN_LEN))                      )
    {
        return ERR_PARAM;
 8015180:	2307      	movs	r3, #7
 8015182:	e0f2      	b.n	801536a <rfalNfcfPollerUpdate+0x236>
    }
    
    /* Calculate required txBuffer lenth */
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	b29a      	uxth	r2, r3
              (servBlock->numBlock * sizeof(rfalNfcfBlockListElem)) + (uint16_t)((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN) );
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	7a1b      	ldrb	r3, [r3, #8]
 801518e:	b29b      	uxth	r3, r3
 8015190:	4619      	mov	r1, r3
 8015192:	0089      	lsls	r1, r1, #2
 8015194:	440b      	add	r3, r1
 8015196:	005b      	lsls	r3, r3, #1
 8015198:	b29b      	uxth	r3, r3
 801519a:	4413      	add	r3, r2
 801519c:	b29b      	uxth	r3, r3
 801519e:	005b      	lsls	r3, r3, #1
 80151a0:	b29b      	uxth	r3, r3
    auxLen = (uint16_t)( RFAL_NFCF_CMD_LEN + RFAL_NFCF_NFCID2_LEN + ( servBlock->numServ * sizeof(rfalNfcfServ) ) + 
 80151a2:	3309      	adds	r3, #9
 80151a4:	833b      	strh	r3, [r7, #24]
    
    /* Check whether the provided buffer is sufficient for this request */
    if( txBufLen < auxLen )
 80151a6:	887a      	ldrh	r2, [r7, #2]
 80151a8:	8b3b      	ldrh	r3, [r7, #24]
 80151aa:	429a      	cmp	r2, r3
 80151ac:	d201      	bcs.n	80151b2 <rfalNfcfPollerUpdate+0x7e>
    {
        return ERR_PARAM;
 80151ae:	2307      	movs	r3, #7
 80151b0:	e0db      	b.n	801536a <rfalNfcfPollerUpdate+0x236>
    }
        
    msgIt = 0;
 80151b2:	2300      	movs	r3, #0
 80151b4:	83bb      	strh	r3, [r7, #28]
    
    /*******************************************************************************/
    /* Compose UPDATE command/request                                              */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION;                              /* Command Code    */
 80151b6:	8bbb      	ldrh	r3, [r7, #28]
 80151b8:	1c5a      	adds	r2, r3, #1
 80151ba:	83ba      	strh	r2, [r7, #28]
 80151bc:	461a      	mov	r2, r3
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	4413      	add	r3, r2
 80151c2:	2208      	movs	r2, #8
 80151c4:	701a      	strb	r2, [r3, #0]
    
    ST_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 80151c6:	8bbb      	ldrh	r3, [r7, #28]
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	4413      	add	r3, r2
 80151cc:	2208      	movs	r2, #8
 80151ce:	68f9      	ldr	r1, [r7, #12]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f006 fd6d 	bl	801bcb0 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
 80151d6:	8bbb      	ldrh	r3, [r7, #28]
 80151d8:	3308      	adds	r3, #8
 80151da:	83bb      	strh	r3, [r7, #28]
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 80151dc:	8bbb      	ldrh	r3, [r7, #28]
 80151de:	1c5a      	adds	r2, r3, #1
 80151e0:	83ba      	strh	r2, [r7, #28]
 80151e2:	461a      	mov	r2, r3
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	4413      	add	r3, r2
 80151e8:	68ba      	ldr	r2, [r7, #8]
 80151ea:	7812      	ldrb	r2, [r2, #0]
 80151ec:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 80151ee:	2300      	movs	r3, #0
 80151f0:	77fb      	strb	r3, [r7, #31]
 80151f2:	e020      	b.n	8015236 <rfalNfcfPollerUpdate+0x102>
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	685a      	ldr	r2, [r3, #4]
 80151f8:	7ffb      	ldrb	r3, [r7, #31]
 80151fa:	005b      	lsls	r3, r3, #1
 80151fc:	4413      	add	r3, r2
 80151fe:	881a      	ldrh	r2, [r3, #0]
 8015200:	8bbb      	ldrh	r3, [r7, #28]
 8015202:	1c59      	adds	r1, r3, #1
 8015204:	83b9      	strh	r1, [r7, #28]
 8015206:	4619      	mov	r1, r3
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	440b      	add	r3, r1
 801520c:	b2d2      	uxtb	r2, r2
 801520e:	701a      	strb	r2, [r3, #0]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	685a      	ldr	r2, [r3, #4]
 8015214:	7ffb      	ldrb	r3, [r7, #31]
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	4413      	add	r3, r2
 801521a:	881b      	ldrh	r3, [r3, #0]
 801521c:	0a1b      	lsrs	r3, r3, #8
 801521e:	b29a      	uxth	r2, r3
 8015220:	8bbb      	ldrh	r3, [r7, #28]
 8015222:	1c59      	adds	r1, r3, #1
 8015224:	83b9      	strh	r1, [r7, #28]
 8015226:	4619      	mov	r1, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	440b      	add	r3, r1
 801522c:	b2d2      	uxtb	r2, r2
 801522e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8015230:	7ffb      	ldrb	r3, [r7, #31]
 8015232:	3301      	adds	r3, #1
 8015234:	77fb      	strb	r3, [r7, #31]
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	781b      	ldrb	r3, [r3, #0]
 801523a:	7ffa      	ldrb	r2, [r7, #31]
 801523c:	429a      	cmp	r2, r3
 801523e:	d3d9      	bcc.n	80151f4 <rfalNfcfPollerUpdate+0xc0>
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 8015240:	8bbb      	ldrh	r3, [r7, #28]
 8015242:	1c5a      	adds	r2, r3, #1
 8015244:	83ba      	strh	r2, [r7, #28]
 8015246:	461a      	mov	r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	4413      	add	r3, r2
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	7a12      	ldrb	r2, [r2, #8]
 8015250:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 8015252:	2300      	movs	r3, #0
 8015254:	77fb      	strb	r3, [r7, #31]
 8015256:	e045      	b.n	80152e4 <rfalNfcfPollerUpdate+0x1b0>
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	68da      	ldr	r2, [r3, #12]
 801525c:	7ffb      	ldrb	r3, [r7, #31]
 801525e:	009b      	lsls	r3, r3, #2
 8015260:	441a      	add	r2, r3
 8015262:	8bbb      	ldrh	r3, [r7, #28]
 8015264:	1c59      	adds	r1, r3, #1
 8015266:	83b9      	strh	r1, [r7, #28]
 8015268:	4619      	mov	r1, r3
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	440b      	add	r3, r1
 801526e:	7812      	ldrb	r2, [r2, #0]
 8015270:	701a      	strb	r2, [r3, #0]
        if( (servBlock->blockList[i].conf & 0x80U) != 0U )                                /* Check if 2 or 3 byte block list element       */
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	68da      	ldr	r2, [r3, #12]
 8015276:	7ffb      	ldrb	r3, [r7, #31]
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	4413      	add	r3, r2
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	b25b      	sxtb	r3, r3
 8015280:	2b00      	cmp	r3, #0
 8015282:	da0e      	bge.n	80152a2 <rfalNfcfPollerUpdate+0x16e>
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	68da      	ldr	r2, [r3, #12]
 8015288:	7ffb      	ldrb	r3, [r7, #31]
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	4413      	add	r3, r2
 801528e:	885a      	ldrh	r2, [r3, #2]
 8015290:	8bbb      	ldrh	r3, [r7, #28]
 8015292:	1c59      	adds	r1, r3, #1
 8015294:	83b9      	strh	r1, [r7, #28]
 8015296:	4619      	mov	r1, r3
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	440b      	add	r3, r1
 801529c:	b2d2      	uxtb	r2, r2
 801529e:	701a      	strb	r2, [r3, #0]
 80152a0:	e01d      	b.n	80152de <rfalNfcfPollerUpdate+0x1aa>
        }
        else
        {
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 0U) & 0xFFU); /* 2byte Block Num */
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	68da      	ldr	r2, [r3, #12]
 80152a6:	7ffb      	ldrb	r3, [r7, #31]
 80152a8:	009b      	lsls	r3, r3, #2
 80152aa:	4413      	add	r3, r2
 80152ac:	885a      	ldrh	r2, [r3, #2]
 80152ae:	8bbb      	ldrh	r3, [r7, #28]
 80152b0:	1c59      	adds	r1, r3, #1
 80152b2:	83b9      	strh	r1, [r7, #28]
 80152b4:	4619      	mov	r1, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	440b      	add	r3, r1
 80152ba:	b2d2      	uxtb	r2, r2
 80152bc:	701a      	strb	r2, [r3, #0]
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	68da      	ldr	r2, [r3, #12]
 80152c2:	7ffb      	ldrb	r3, [r7, #31]
 80152c4:	009b      	lsls	r3, r3, #2
 80152c6:	4413      	add	r3, r2
 80152c8:	885b      	ldrh	r3, [r3, #2]
 80152ca:	0a1b      	lsrs	r3, r3, #8
 80152cc:	b29a      	uxth	r2, r3
 80152ce:	8bbb      	ldrh	r3, [r7, #28]
 80152d0:	1c59      	adds	r1, r3, #1
 80152d2:	83b9      	strh	r1, [r7, #28]
 80152d4:	4619      	mov	r1, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	440b      	add	r3, r1
 80152da:	b2d2      	uxtb	r2, r2
 80152dc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < servBlock->numBlock; i++)
 80152de:	7ffb      	ldrb	r3, [r7, #31]
 80152e0:	3301      	adds	r3, #1
 80152e2:	77fb      	strb	r3, [r7, #31]
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	7a1b      	ldrb	r3, [r3, #8]
 80152e8:	7ffa      	ldrb	r2, [r7, #31]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d3b4      	bcc.n	8015258 <rfalNfcfPollerUpdate+0x124>
        }
    }
    
    auxLen = ((uint16_t)servBlock->numBlock * RFAL_NFCF_BLOCK_LEN);
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	7a1b      	ldrb	r3, [r3, #8]
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	011b      	lsls	r3, r3, #4
 80152f6:	833b      	strh	r3, [r7, #24]
    ST_MEMCPY( &txBuf[msgIt], blockData, auxLen );                                        /* Block Data      */
 80152f8:	8bbb      	ldrh	r3, [r7, #28]
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	4413      	add	r3, r2
 80152fe:	8b3a      	ldrh	r2, [r7, #24]
 8015300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015302:	4618      	mov	r0, r3
 8015304:	f006 fcd4 	bl	801bcb0 <memcpy>
    msgIt += auxLen;
 8015308:	8bba      	ldrh	r2, [r7, #28]
 801530a:	8b3b      	ldrh	r3, [r7, #24]
 801530c:	4413      	add	r3, r2
 801530e:	83bb      	strh	r3, [r7, #28]
    
    
    /*******************************************************************************/
    /* Transceive UPDATE command/request                                           */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 8015310:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8015312:	8bb9      	ldrh	r1, [r7, #28]
 8015314:	4b17      	ldr	r3, [pc, #92]	; (8015374 <rfalNfcfPollerUpdate+0x240>)
 8015316:	9302      	str	r3, [sp, #8]
 8015318:	2300      	movs	r3, #0
 801531a:	9301      	str	r3, [sp, #4]
 801531c:	f107 0312 	add.w	r3, r7, #18
 8015320:	9300      	str	r3, [sp, #0]
 8015322:	4613      	mov	r3, r2
 8015324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f001 fd4e 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801532c:	4603      	mov	r3, r0
 801532e:	837b      	strh	r3, [r7, #26]
    
    if( ret == ERR_NONE )
 8015330:	8b7b      	ldrh	r3, [r7, #26]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d118      	bne.n	8015368 <rfalNfcfPollerUpdate+0x234>
    {
        /* Skip LEN byte */
        updateRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
 8015336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015338:	3301      	adds	r3, #1
 801533a:	617b      	str	r3, [r7, #20]
        
        /* Check response length */
        if( rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS) )
 801533c:	8a7b      	ldrh	r3, [r7, #18]
 801533e:	2b0a      	cmp	r3, #10
 8015340:	d802      	bhi.n	8015348 <rfalNfcfPollerUpdate+0x214>
        {
            ret = ERR_PROTO;
 8015342:	230b      	movs	r3, #11
 8015344:	837b      	strh	r3, [r7, #26]
 8015346:	e00f      	b.n	8015368 <rfalNfcfPollerUpdate+0x234>
        }
        /* Check for a valid response */
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	2b09      	cmp	r3, #9
 801534e:	d109      	bne.n	8015364 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	3309      	adds	r3, #9
 8015354:	781b      	ldrb	r3, [r3, #0]
        else if( (updateRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES) ||
 8015356:	2b00      	cmp	r3, #0
 8015358:	d104      	bne.n	8015364 <rfalNfcfPollerUpdate+0x230>
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST2_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)         )
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	330a      	adds	r3, #10
 801535e:	781b      	ldrb	r3, [r3, #0]
                 (updateRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)       ||
 8015360:	2b00      	cmp	r3, #0
 8015362:	d001      	beq.n	8015368 <rfalNfcfPollerUpdate+0x234>
        {
            ret = ERR_REQUEST;
 8015364:	2305      	movs	r3, #5
 8015366:	837b      	strh	r3, [r7, #26]
        {
            /* MISRA 15.7 - Empty else */
        }
    }
    
    return ret;
 8015368:	8b7b      	ldrh	r3, [r7, #26]
}
 801536a:	4618      	mov	r0, r3
 801536c:	3720      	adds	r7, #32
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}
 8015372:	bf00      	nop
 8015374:	02000010 	.word	0x02000010

08015378 <rfalNfcvParseError>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcvParseError( uint8_t err )
{
 8015378:	b480      	push	{r7}
 801537a:	b083      	sub	sp, #12
 801537c:	af00      	add	r7, sp, #0
 801537e:	4603      	mov	r3, r0
 8015380:	71fb      	strb	r3, [r7, #7]
    switch(err)
 8015382:	79fb      	ldrb	r3, [r7, #7]
 8015384:	3b01      	subs	r3, #1
 8015386:	2b12      	cmp	r3, #18
 8015388:	d82e      	bhi.n	80153e8 <rfalNfcvParseError+0x70>
 801538a:	a201      	add	r2, pc, #4	; (adr r2, 8015390 <rfalNfcvParseError+0x18>)
 801538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015390:	080153dd 	.word	0x080153dd
 8015394:	080153e1 	.word	0x080153e1
 8015398:	080153dd 	.word	0x080153dd
 801539c:	080153e9 	.word	0x080153e9
 80153a0:	080153e9 	.word	0x080153e9
 80153a4:	080153e9 	.word	0x080153e9
 80153a8:	080153e9 	.word	0x080153e9
 80153ac:	080153e9 	.word	0x080153e9
 80153b0:	080153e9 	.word	0x080153e9
 80153b4:	080153e9 	.word	0x080153e9
 80153b8:	080153e9 	.word	0x080153e9
 80153bc:	080153e9 	.word	0x080153e9
 80153c0:	080153e9 	.word	0x080153e9
 80153c4:	080153e9 	.word	0x080153e9
 80153c8:	080153e9 	.word	0x080153e9
 80153cc:	080153e9 	.word	0x080153e9
 80153d0:	080153e9 	.word	0x080153e9
 80153d4:	080153e9 	.word	0x080153e9
 80153d8:	080153e5 	.word	0x080153e5
    {
        case RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED:
        case RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED:
            return ERR_NOTSUPP;
 80153dc:	2318      	movs	r3, #24
 80153de:	e004      	b.n	80153ea <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED:
            return ERR_PROTO;
 80153e0:	230b      	movs	r3, #11
 80153e2:	e002      	b.n	80153ea <rfalNfcvParseError+0x72>
            
        case RFAL_NFCV_ERROR_WRITE_FAILED:
            return ERR_WRITE;
 80153e4:	2319      	movs	r3, #25
 80153e6:	e000      	b.n	80153ea <rfalNfcvParseError+0x72>
            
        default:
            return ERR_REQUEST;
 80153e8:	2305      	movs	r3, #5
    }
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	370c      	adds	r7, #12
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bc80      	pop	{r7}
 80153f2:	4770      	bx	lr

080153f4 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b082      	sub	sp, #8
 80153f8:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 80153fa:	22ec      	movs	r2, #236	; 0xec
 80153fc:	21ec      	movs	r1, #236	; 0xec
 80153fe:	2007      	movs	r0, #7
 8015400:	f000 fdca 	bl	8015f98 <rfalSetMode>
 8015404:	4603      	mov	r3, r0
 8015406:	80fb      	strh	r3, [r7, #6]
 8015408:	88fb      	ldrh	r3, [r7, #6]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d001      	beq.n	8015412 <rfalNfcvPollerInitialize+0x1e>
 801540e:	88fb      	ldrh	r3, [r7, #6]
 8015410:	e00e      	b.n	8015430 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8015412:	2001      	movs	r0, #1
 8015414:	f001 fa04 	bl	8016820 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8015418:	4807      	ldr	r0, [pc, #28]	; (8015438 <rfalNfcvPollerInitialize+0x44>)
 801541a:	f001 fa55 	bl	80168c8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 801541e:	f241 00d6 	movw	r0, #4310	; 0x10d6
 8015422:	f001 fa3d 	bl	80168a0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8015426:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 801542a:	f001 fa1b 	bl	8016864 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	000108d8 	.word	0x000108d8

0801543c <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af02      	add	r7, sp, #8
 8015442:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8015444:	2300      	movs	r3, #0
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2200      	movs	r2, #0
 801544c:	2100      	movs	r1, #0
 801544e:	2020      	movs	r0, #32
 8015450:	f000 f815 	bl	801547e <rfalNfcvPollerInventory>
 8015454:	4603      	mov	r3, r0
 8015456:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 8015458:	89fb      	ldrh	r3, [r7, #14]
 801545a:	2b1d      	cmp	r3, #29
 801545c:	d008      	beq.n	8015470 <rfalNfcvPollerCheckPresence+0x34>
 801545e:	89fb      	ldrh	r3, [r7, #14]
 8015460:	2b15      	cmp	r3, #21
 8015462:	d005      	beq.n	8015470 <rfalNfcvPollerCheckPresence+0x34>
 8015464:	89fb      	ldrh	r3, [r7, #14]
 8015466:	2b09      	cmp	r3, #9
 8015468:	d002      	beq.n	8015470 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 801546a:	89fb      	ldrh	r3, [r7, #14]
 801546c:	2b0b      	cmp	r3, #11
 801546e:	d101      	bne.n	8015474 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 8015470:	2300      	movs	r3, #0
 8015472:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 8015474:	89fb      	ldrh	r3, [r7, #14]
}
 8015476:	4618      	mov	r0, r3
 8015478:	3710      	adds	r7, #16
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}

0801547e <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 801547e:	b580      	push	{r7, lr}
 8015480:	b08c      	sub	sp, #48	; 0x30
 8015482:	af02      	add	r7, sp, #8
 8015484:	60ba      	str	r2, [r7, #8]
 8015486:	607b      	str	r3, [r7, #4]
 8015488:	4603      	mov	r3, r0
 801548a:	73fb      	strb	r3, [r7, #15]
 801548c:	460b      	mov	r3, r1
 801548e:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d102      	bne.n	801549c <rfalNfcvPollerInventory+0x1e>
 8015496:	7bbb      	ldrb	r3, [r7, #14]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d102      	bne.n	80154a2 <rfalNfcvPollerInventory+0x24>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d101      	bne.n	80154a6 <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 80154a2:	2307      	movs	r3, #7
 80154a4:	e051      	b.n	801554a <rfalNfcvPollerInventory+0xcc>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 80154a6:	7bfb      	ldrb	r3, [r7, #15]
 80154a8:	f043 0306 	orr.w	r3, r3, #6
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 80154b0:	2301      	movs	r3, #1
 80154b2:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 80154b4:	7bbb      	ldrb	r3, [r7, #14]
 80154b6:	7bfa      	ldrb	r2, [r7, #15]
 80154b8:	2a20      	cmp	r2, #32
 80154ba:	d101      	bne.n	80154c0 <rfalNfcvPollerInventory+0x42>
 80154bc:	2240      	movs	r2, #64	; 0x40
 80154be:	e000      	b.n	80154c2 <rfalNfcvPollerInventory+0x44>
 80154c0:	223c      	movs	r2, #60	; 0x3c
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d806      	bhi.n	80154d4 <rfalNfcvPollerInventory+0x56>
 80154c6:	7bfb      	ldrb	r3, [r7, #15]
 80154c8:	2b20      	cmp	r3, #32
 80154ca:	d101      	bne.n	80154d0 <rfalNfcvPollerInventory+0x52>
 80154cc:	2340      	movs	r3, #64	; 0x40
 80154ce:	e002      	b.n	80154d6 <rfalNfcvPollerInventory+0x58>
 80154d0:	233c      	movs	r3, #60	; 0x3c
 80154d2:	e000      	b.n	80154d6 <rfalNfcvPollerInventory+0x58>
 80154d4:	7bbb      	ldrb	r3, [r7, #14]
 80154d6:	76bb      	strb	r3, [r7, #26]
    
    if( (rfalConvBitsToBytes(invReq.MASK_LEN) > 0U) && (maskVal != NULL) )  /* MISRA 21.18 & 1.3 */
 80154d8:	7ebb      	ldrb	r3, [r7, #26]
 80154da:	3307      	adds	r3, #7
 80154dc:	08db      	lsrs	r3, r3, #3
 80154de:	b29b      	uxth	r3, r3
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d00e      	beq.n	8015502 <rfalNfcvPollerInventory+0x84>
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d00b      	beq.n	8015502 <rfalNfcvPollerInventory+0x84>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 80154ea:	7ebb      	ldrb	r3, [r7, #26]
 80154ec:	3307      	adds	r3, #7
 80154ee:	08db      	lsrs	r3, r3, #3
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	461a      	mov	r2, r3
 80154f4:	f107 0318 	add.w	r3, r7, #24
 80154f8:	3303      	adds	r3, #3
 80154fa:	68b9      	ldr	r1, [r7, #8]
 80154fc:	4618      	mov	r0, r3
 80154fe:	f006 fbd7 	bl	801bcb0 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 8015502:	7ebb      	ldrb	r3, [r7, #26]
 8015504:	3307      	adds	r3, #7
 8015506:	08db      	lsrs	r3, r3, #3
 8015508:	b2db      	uxtb	r3, r3
 801550a:	3303      	adds	r3, #3
 801550c:	b2d9      	uxtb	r1, r3
 801550e:	f107 0018 	add.w	r0, r7, #24
 8015512:	f107 0316 	add.w	r3, r7, #22
 8015516:	9300      	str	r3, [sp, #0]
 8015518:	230c      	movs	r3, #12
 801551a:	687a      	ldr	r2, [r7, #4]
 801551c:	f002 fe6a 	bl	80181f4 <rfalISO15693TransceiveAnticollisionFrame>
 8015520:	4603      	mov	r3, r0
 8015522:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 8015524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015526:	2b00      	cmp	r3, #0
 8015528:	d002      	beq.n	8015530 <rfalNfcvPollerInventory+0xb2>
    {
        *rcvdLen = rxLen;
 801552a:	8afa      	ldrh	r2, [r7, #22]
 801552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801552e:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 8015530:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015532:	2b00      	cmp	r3, #0
 8015534:	d108      	bne.n	8015548 <rfalNfcvPollerInventory+0xca>
    {
        /* Check for valid INVENTORY_RES   Digital 2.2  9.6.2.1 & 9.6.2.3 */
        if( !rfalNfcvCheckInvRes( invRes->RES_FLAG, rxLen ) )
 8015536:	8afb      	ldrh	r3, [r7, #22]
 8015538:	2b60      	cmp	r3, #96	; 0x60
 801553a:	d103      	bne.n	8015544 <rfalNfcvPollerInventory+0xc6>
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d001      	beq.n	8015548 <rfalNfcvPollerInventory+0xca>
        {
            return ERR_PROTO;
 8015544:	230b      	movs	r3, #11
 8015546:	e000      	b.n	801554a <rfalNfcvPollerInventory+0xcc>
        }
    }
    
    return ret;
 8015548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801554a:	4618      	mov	r0, r3
 801554c:	3728      	adds	r7, #40	; 0x28
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}

08015552 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 8015552:	b580      	push	{r7, lr}
 8015554:	b0ae      	sub	sp, #184	; 0xb8
 8015556:	af02      	add	r7, sp, #8
 8015558:	60ba      	str	r2, [r7, #8]
 801555a:	607b      	str	r3, [r7, #4]
 801555c:	4603      	mov	r3, r0
 801555e:	73fb      	strb	r3, [r7, #15]
 8015560:	460b      	mov	r3, r1
 8015562:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d002      	beq.n	8015570 <rfalNfcvPollerCollisionResolution+0x1e>
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d101      	bne.n	8015574 <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 8015570:	2307      	movs	r3, #7
 8015572:	e1a3      	b.n	80158bc <rfalNfcvPollerCollisionResolution+0x36a>
    }

    /* Initialize parameters */
    *devCnt = 0;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2200      	movs	r2, #0
 8015578:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 801557a:	2300      	movs	r3, #0
 801557c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 8015580:	2300      	movs	r3, #0
 8015582:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 8015586:	2300      	movs	r3, #0
 8015588:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 801558c:	f107 0314 	add.w	r3, r7, #20
 8015590:	2290      	movs	r2, #144	; 0x90
 8015592:	2100      	movs	r1, #0
 8015594:	4618      	mov	r0, r3
 8015596:	f006 fbb3 	bl	801bd00 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 801559a:	7bbb      	ldrb	r3, [r7, #14]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d00a      	beq.n	80155b6 <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 80155a0:	7bba      	ldrb	r2, [r7, #14]
 80155a2:	4613      	mov	r3, r2
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	4413      	add	r3, r2
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	4413      	add	r3, r2
 80155ac:	461a      	mov	r2, r3
 80155ae:	2100      	movs	r1, #0
 80155b0:	68b8      	ldr	r0, [r7, #8]
 80155b2:	f006 fba5 	bl	801bd00 <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 80155b6:	7bfb      	ldrb	r3, [r7, #15]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d12b      	bne.n	8015614 <rfalNfcvPollerCollisionResolution+0xc2>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.1  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	2200      	movs	r2, #0
 80155c0:	9200      	str	r2, [sp, #0]
 80155c2:	2200      	movs	r2, #0
 80155c4:	2100      	movs	r1, #0
 80155c6:	2020      	movs	r0, #32
 80155c8:	f7ff ff59 	bl	801547e <rfalNfcvPollerInventory>
 80155cc:	4603      	mov	r3, r0
 80155ce:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.1  9.3.7.2 (Symbol 1)  */
 80155d2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80155d6:	2b04      	cmp	r3, #4
 80155d8:	d101      	bne.n	80155de <rfalNfcvPollerCollisionResolution+0x8c>
        {
            return ERR_NONE;
 80155da:	2300      	movs	r3, #0
 80155dc:	e16e      	b.n	80158bc <rfalNfcvPollerCollisionResolution+0x36a>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.1  9.3.7.3 (Symbol 2)  */
 80155de:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d107      	bne.n	80155f6 <rfalNfcvPollerCollisionResolution+0xa4>
        {
            (*devCnt)++;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	3301      	adds	r3, #1
 80155ec:	b2da      	uxtb	r2, r3
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 80155f2:	2300      	movs	r3, #0
 80155f4:	e162      	b.n	80158bc <rfalNfcvPollerCollisionResolution+0x36a>
        }

        /* A Collision has been identified  Activity 2.1  9.3.7.4  (Symbol 3) */
        colPending = true;
 80155f6:	2301      	movs	r3, #1
 80155f8:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 80155fc:	2301      	movs	r3, #1
 80155fe:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.1  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 8015602:	7bbb      	ldrb	r3, [r7, #14]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d101      	bne.n	801560c <rfalNfcvPollerCollisionResolution+0xba>
        {
            return ERR_RF_COLLISION;
 8015608:	231d      	movs	r3, #29
 801560a:	e157      	b.n	80158bc <rfalNfcvPollerCollisionResolution+0x36a>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 801560c:	2004      	movs	r0, #4
 801560e:	f7ed fcb7 	bl	8002f80 <HAL_Delay>
 8015612:	e005      	b.n	8015620 <rfalNfcvPollerCollisionResolution+0xce>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 8015614:	2301      	movs	r3, #1
 8015616:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 801561a:	2301      	movs	r3, #1
 801561c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.1 9.3.7.18  (Symbol 17) */
    do
    {
        /* Activity 2.1  9.3.7.7  (Symbol 6 / 7) */
        colPending = false;
 8015620:	2300      	movs	r3, #0
 8015622:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 8015626:	2300      	movs	r3, #0
 8015628:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 801562c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8015630:	2b00      	cmp	r3, #0
 8015632:	d12a      	bne.n	801568a <rfalNfcvPollerCollisionResolution+0x138>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.1  9.3.7.9  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 8015634:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8015638:	4613      	mov	r3, r2
 801563a:	00db      	lsls	r3, r3, #3
 801563c:	4413      	add	r3, r2
 801563e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015642:	4413      	add	r3, r2
 8015644:	3b9c      	subs	r3, #156	; 0x9c
 8015646:	7818      	ldrb	r0, [r3, #0]
 8015648:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 801564c:	f107 0114 	add.w	r1, r7, #20
 8015650:	4613      	mov	r3, r2
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	4413      	add	r3, r2
 8015656:	440b      	add	r3, r1
 8015658:	1c59      	adds	r1, r3, #1
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	461a      	mov	r2, r3
 8015660:	4613      	mov	r3, r2
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	4413      	add	r3, r2
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	4413      	add	r3, r2
 801566a:	68ba      	ldr	r2, [r7, #8]
 801566c:	4413      	add	r3, r2
 801566e:	461a      	mov	r2, r3
 8015670:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 8015674:	9300      	str	r3, [sp, #0]
 8015676:	4613      	mov	r3, r2
 8015678:	460a      	mov	r2, r1
 801567a:	4601      	mov	r1, r0
 801567c:	2000      	movs	r0, #0
 801567e:	f7ff fefe 	bl	801547e <rfalNfcvPollerInventory>
 8015682:	4603      	mov	r3, r0
 8015684:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8015688:	e013      	b.n	80156b2 <rfalNfcvPollerCollisionResolution+0x160>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	781b      	ldrb	r3, [r3, #0]
 801568e:	461a      	mov	r2, r3
 8015690:	4613      	mov	r3, r2
 8015692:	005b      	lsls	r3, r3, #1
 8015694:	4413      	add	r3, r2
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	4413      	add	r3, r2
 801569a:	68ba      	ldr	r2, [r7, #8]
 801569c:	4413      	add	r3, r2
 801569e:	4618      	mov	r0, r3
 80156a0:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 80156a4:	461a      	mov	r2, r3
 80156a6:	210c      	movs	r1, #12
 80156a8:	f002 fe5c 	bl	8018364 <rfalISO15693TransceiveEOFAnticollision>
 80156ac:	4603      	mov	r3, r0
 80156ae:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 80156b2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80156b6:	3301      	adds	r3, #1
 80156b8:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 80156bc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80156c0:	2b04      	cmp	r3, #4
 80156c2:	f000 80dd 	beq.w	8015880 <rfalNfcvPollerCollisionResolution+0x32e>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80156c6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80156ca:	2b5f      	cmp	r3, #95	; 0x5f
 80156cc:	d802      	bhi.n	80156d4 <rfalNfcvPollerCollisionResolution+0x182>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80156ce:	2004      	movs	r0, #4
 80156d0:	f7ed fc56 	bl	8002f80 <HAL_Delay>
                }
                
                /* Check if response is a correct frame (no TxRx error)  Activity 2.1  9.3.7.11  (Symbol 10)*/
                if( (ret == ERR_NONE) || (ret == ERR_PROTO) )
 80156d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d003      	beq.n	80156e4 <rfalNfcvPollerCollisionResolution+0x192>
 80156dc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80156e0:	2b0b      	cmp	r3, #11
 80156e2:	d119      	bne.n	8015718 <rfalNfcvPollerCollisionResolution+0x1c6>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 80156e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80156e8:	2b60      	cmp	r3, #96	; 0x60
 80156ea:	f040 80cd 	bne.w	8015888 <rfalNfcvPollerCollisionResolution+0x336>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	461a      	mov	r2, r3
 80156f4:	4613      	mov	r3, r2
 80156f6:	005b      	lsls	r3, r3, #1
 80156f8:	4413      	add	r3, r2
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	4413      	add	r3, r2
 80156fe:	68ba      	ldr	r2, [r7, #8]
 8015700:	4413      	add	r3, r2
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	f040 80bf 	bne.w	8015888 <rfalNfcvPollerCollisionResolution+0x336>
                    {
                        /* Activity 2.1  9.3.7.12  (Symbol 11) */
                        (*devCnt)++;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	3301      	adds	r3, #1
 8015710:	b2da      	uxtb	r2, r3
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	701a      	strb	r2, [r3, #0]
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 8015716:	e0b7      	b.n	8015888 <rfalNfcvPollerCollisionResolution+0x336>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.1  9.3.7.17  (Symbol 16) */
                    colPending = true;
 8015718:	2301      	movs	r3, #1
 801571a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 801571e:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8015722:	2b0f      	cmp	r3, #15
 8015724:	f200 80b1 	bhi.w	801588a <rfalNfcvPollerCollisionResolution+0x338>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.1  9.3.7.17  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 8015728:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 801572c:	f107 0114 	add.w	r1, r7, #20
 8015730:	4613      	mov	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	4413      	add	r3, r2
 8015736:	440b      	add	r3, r1
 8015738:	1c58      	adds	r0, r3, #1
 801573a:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 801573e:	f107 0114 	add.w	r1, r7, #20
 8015742:	4613      	mov	r3, r2
 8015744:	00db      	lsls	r3, r3, #3
 8015746:	4413      	add	r3, r2
 8015748:	440b      	add	r3, r1
 801574a:	3301      	adds	r3, #1
 801574c:	2208      	movs	r2, #8
 801574e:	4619      	mov	r1, r3
 8015750:	f006 faae 	bl	801bcb0 <memcpy>
                        colPos = colFound[colIt].maskLen;
 8015754:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8015758:	4613      	mov	r3, r2
 801575a:	00db      	lsls	r3, r3, #3
 801575c:	4413      	add	r3, r2
 801575e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015762:	4413      	add	r3, r2
 8015764:	3b9c      	subs	r3, #156	; 0x9c
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 801576c:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8015770:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8015774:	08db      	lsrs	r3, r3, #3
 8015776:	b2d8      	uxtb	r0, r3
 8015778:	4601      	mov	r1, r0
 801577a:	4613      	mov	r3, r2
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	4413      	add	r3, r2
 8015780:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015784:	4413      	add	r3, r2
 8015786:	440b      	add	r3, r1
 8015788:	3b9b      	subs	r3, #155	; 0x9b
 801578a:	7819      	ldrb	r1, [r3, #0]
 801578c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8015790:	f003 0307 	and.w	r3, r3, #7
 8015794:	2201      	movs	r2, #1
 8015796:	fa02 f303 	lsl.w	r3, r2, r3
 801579a:	b2db      	uxtb	r3, r3
 801579c:	3b01      	subs	r3, #1
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80157a4:	400b      	ands	r3, r1
 80157a6:	b2d9      	uxtb	r1, r3
 80157a8:	4613      	mov	r3, r2
 80157aa:	00db      	lsls	r3, r3, #3
 80157ac:	4413      	add	r3, r2
 80157ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80157b2:	4413      	add	r3, r2
 80157b4:	4403      	add	r3, r0
 80157b6:	3b9b      	subs	r3, #155	; 0x9b
 80157b8:	460a      	mov	r2, r1
 80157ba:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 80157bc:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80157c0:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80157c4:	08db      	lsrs	r3, r3, #3
 80157c6:	b2d8      	uxtb	r0, r3
 80157c8:	4601      	mov	r1, r0
 80157ca:	4613      	mov	r3, r2
 80157cc:	00db      	lsls	r3, r3, #3
 80157ce:	4413      	add	r3, r2
 80157d0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80157d4:	4413      	add	r3, r2
 80157d6:	440b      	add	r3, r1
 80157d8:	3b9b      	subs	r3, #155	; 0x9b
 80157da:	7819      	ldrb	r1, [r3, #0]
 80157dc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80157e0:	1e5a      	subs	r2, r3, #1
 80157e2:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80157e6:	f003 0307 	and.w	r3, r3, #7
 80157ea:	fa02 f303 	lsl.w	r3, r2, r3
 80157ee:	b2db      	uxtb	r3, r3
 80157f0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80157f4:	430b      	orrs	r3, r1
 80157f6:	b2d9      	uxtb	r1, r3
 80157f8:	4613      	mov	r3, r2
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	4413      	add	r3, r2
 80157fe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015802:	4413      	add	r3, r2
 8015804:	4403      	add	r3, r0
 8015806:	3b9b      	subs	r3, #155	; 0x9b
 8015808:	460a      	mov	r2, r1
 801580a:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 801580c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8015810:	1e5a      	subs	r2, r3, #1
 8015812:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8015816:	f003 0307 	and.w	r3, r3, #7
 801581a:	f1c3 0308 	rsb	r3, r3, #8
 801581e:	fa22 f003 	lsr.w	r0, r2, r3
 8015822:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8015826:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 801582a:	08db      	lsrs	r3, r3, #3
 801582c:	b2db      	uxtb	r3, r3
 801582e:	1c59      	adds	r1, r3, #1
 8015830:	b2c0      	uxtb	r0, r0
 8015832:	4613      	mov	r3, r2
 8015834:	00db      	lsls	r3, r3, #3
 8015836:	4413      	add	r3, r2
 8015838:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801583c:	4413      	add	r3, r2
 801583e:	440b      	add	r3, r1
 8015840:	3b9b      	subs	r3, #155	; 0x9b
 8015842:	4602      	mov	r2, r0
 8015844:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 8015846:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 801584a:	4613      	mov	r3, r2
 801584c:	00db      	lsls	r3, r3, #3
 801584e:	4413      	add	r3, r2
 8015850:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015854:	4413      	add	r3, r2
 8015856:	3b9c      	subs	r3, #156	; 0x9c
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 801585e:	3304      	adds	r3, #4
 8015860:	b2d9      	uxtb	r1, r3
 8015862:	4613      	mov	r3, r2
 8015864:	00db      	lsls	r3, r3, #3
 8015866:	4413      	add	r3, r2
 8015868:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801586c:	4413      	add	r3, r2
 801586e:	3b9c      	subs	r3, #156	; 0x9c
 8015870:	460a      	mov	r2, r1
 8015872:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 8015874:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8015878:	3301      	adds	r3, #1
 801587a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 801587e:	e004      	b.n	801588a <rfalNfcvPollerCollisionResolution+0x338>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 8015880:	2004      	movs	r0, #4
 8015882:	f7ed fb7d 	bl	8002f80 <HAL_Delay>
 8015886:	e000      	b.n	801588a <rfalNfcvPollerCollisionResolution+0x338>
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 8015888:	bf00      	nop
            }
            
            /* Check if devices found have reached device limit   Activity 2.1  9.3.7.13  (Symbol 12) */
            if( *devCnt >= devLimit )
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	7bba      	ldrb	r2, [r7, #14]
 8015890:	429a      	cmp	r2, r3
 8015892:	d801      	bhi.n	8015898 <rfalNfcvPollerCollisionResolution+0x346>
            {
                return ERR_NONE;
 8015894:	2300      	movs	r3, #0
 8015896:	e011      	b.n	80158bc <rfalNfcvPollerCollisionResolution+0x36a>
            }
            
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 8015898:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801589c:	2b0f      	cmp	r3, #15
 801589e:	f67f aec5 	bls.w	801562c <rfalNfcvPollerCollisionResolution+0xda>
        colIt++;
 80158a2:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80158a6:	3301      	adds	r3, #1
 80158a8:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 80158ac:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80158b0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80158b4:	429a      	cmp	r2, r3
 80158b6:	f4ff aeb3 	bcc.w	8015620 <rfalNfcvPollerCollisionResolution+0xce>
    
    return ERR_NONE;
 80158ba:	2300      	movs	r3, #0
}
 80158bc:	4618      	mov	r0, r3
 80158be:	37b0      	adds	r7, #176	; 0xb0
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <rfalNfcvPollerSelect>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerSelect( uint8_t flags, const uint8_t* uid )
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b094      	sub	sp, #80	; 0x50
 80158c8:	af06      	add	r7, sp, #24
 80158ca:	4603      	mov	r3, r0
 80158cc:	6039      	str	r1, [r7, #0]
 80158ce:	71fb      	strb	r3, [r7, #7]
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    if( uid == NULL )
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d101      	bne.n	80158da <rfalNfcvPollerSelect+0x16>
    {
        return ERR_PARAM;
 80158d6:	2307      	movs	r3, #7
 80158d8:	e012      	b.n	8015900 <rfalNfcvPollerSelect+0x3c>
    }
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_SELECT, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 80158da:	79f9      	ldrb	r1, [r7, #7]
 80158dc:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80158e0:	9304      	str	r3, [sp, #16]
 80158e2:	232a      	movs	r3, #42	; 0x2a
 80158e4:	9303      	str	r3, [sp, #12]
 80158e6:	f107 030c 	add.w	r3, r7, #12
 80158ea:	9302      	str	r3, [sp, #8]
 80158ec:	2300      	movs	r3, #0
 80158ee:	9301      	str	r3, [sp, #4]
 80158f0:	2300      	movs	r3, #0
 80158f2:	9300      	str	r3, [sp, #0]
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	2200      	movs	r2, #0
 80158f8:	2025      	movs	r0, #37	; 0x25
 80158fa:	f000 f9cf 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 80158fe:	4603      	mov	r3, r0
}
 8015900:	4618      	mov	r0, r3
 8015902:	3738      	adds	r7, #56	; 0x38
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <rfalNfcvPollerReadSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b08c      	sub	sp, #48	; 0x30
 801590c:	af06      	add	r7, sp, #24
 801590e:	60b9      	str	r1, [r7, #8]
 8015910:	607b      	str	r3, [r7, #4]
 8015912:	4603      	mov	r3, r0
 8015914:	73fb      	strb	r3, [r7, #15]
 8015916:	4613      	mov	r3, r2
 8015918:	73bb      	strb	r3, [r7, #14]
    uint8_t bn;

    bn = blockNum;
 801591a:	7bbb      	ldrb	r3, [r7, #14]
 801591c:	75fb      	strb	r3, [r7, #23]

    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 801591e:	7bf9      	ldrb	r1, [r7, #15]
 8015920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015922:	9304      	str	r3, [sp, #16]
 8015924:	8c3b      	ldrh	r3, [r7, #32]
 8015926:	9303      	str	r3, [sp, #12]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	9302      	str	r3, [sp, #8]
 801592c:	2301      	movs	r3, #1
 801592e:	9301      	str	r3, [sp, #4]
 8015930:	f107 0317 	add.w	r3, r7, #23
 8015934:	9300      	str	r3, [sp, #0]
 8015936:	68bb      	ldr	r3, [r7, #8]
 8015938:	2200      	movs	r2, #0
 801593a:	2020      	movs	r0, #32
 801593c:	f000 f9ae 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8015940:	4603      	mov	r3, r0
}
 8015942:	4618      	mov	r0, r3
 8015944:	3718      	adds	r7, #24
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}

0801594a <rfalNfcvPollerWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint8_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 801594a:	b580      	push	{r7, lr}
 801594c:	b09e      	sub	sp, #120	; 0x78
 801594e:	af06      	add	r7, sp, #24
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607b      	str	r3, [r7, #4]
 8015954:	4603      	mov	r3, r0
 8015956:	73fb      	strb	r3, [r7, #15]
 8015958:	4613      	mov	r3, r2
 801595a:	73bb      	strb	r3, [r7, #14]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 801595c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8015960:	2b00      	cmp	r3, #0
 8015962:	d006      	beq.n	8015972 <rfalNfcvPollerWriteSingleBlock+0x28>
 8015964:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8015968:	2b20      	cmp	r3, #32
 801596a:	d802      	bhi.n	8015972 <rfalNfcvPollerWriteSingleBlock+0x28>
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d101      	bne.n	8015976 <rfalNfcvPollerWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 8015972:	2307      	movs	r3, #7
 8015974:	e035      	b.n	80159e2 <rfalNfcvPollerWriteSingleBlock+0x98>
    }
    
    dataLen = 0U;
 8015976:	2300      	movs	r3, #0
 8015978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = blockNum;                    /* Set Block Number (8 bits)  */
 801597c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015980:	1c5a      	adds	r2, r3, #1
 8015982:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8015986:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801598a:	4413      	add	r3, r2
 801598c:	7bba      	ldrb	r2, [r7, #14]
 801598e:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write */
 8015992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015996:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801599a:	4413      	add	r3, r2
 801599c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80159a0:	6879      	ldr	r1, [r7, #4]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f006 f984 	bl	801bcb0 <memcpy>
    dataLen += blockLen;
 80159a8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80159ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80159b0:	4413      	add	r3, r2
 80159b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 80159b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	7bf9      	ldrb	r1, [r7, #15]
 80159be:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80159c2:	9204      	str	r2, [sp, #16]
 80159c4:	222a      	movs	r2, #42	; 0x2a
 80159c6:	9203      	str	r2, [sp, #12]
 80159c8:	f107 0210 	add.w	r2, r7, #16
 80159cc:	9202      	str	r2, [sp, #8]
 80159ce:	9301      	str	r3, [sp, #4]
 80159d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80159d4:	9300      	str	r3, [sp, #0]
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	2200      	movs	r2, #0
 80159da:	2021      	movs	r0, #33	; 0x21
 80159dc:	f000 f95e 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 80159e0:	4603      	mov	r3, r0
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3760      	adds	r7, #96	; 0x60
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <rfalNfcvPollerReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_LOCK_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint8_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80159ea:	b580      	push	{r7, lr}
 80159ec:	b08a      	sub	sp, #40	; 0x28
 80159ee:	af06      	add	r7, sp, #24
 80159f0:	6039      	str	r1, [r7, #0]
 80159f2:	4611      	mov	r1, r2
 80159f4:	461a      	mov	r2, r3
 80159f6:	4603      	mov	r3, r0
 80159f8:	71fb      	strb	r3, [r7, #7]
 80159fa:	460b      	mov	r3, r1
 80159fc:	71bb      	strb	r3, [r7, #6]
 80159fe:	4613      	mov	r3, r2
 8015a00:	717b      	strb	r3, [r7, #5]
    uint8_t            data[(RFAL_NFCV_BLOCKNUM_LEN + RFAL_NFCV_BLOCKNUM_LEN)];
    uint8_t            dataLen;
    
    dataLen = 0U;
 8015a02:	2300      	movs	r3, #0
 8015a04:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = firstBlockNum;                    /* Set first Block Number       */
 8015a06:	7bfb      	ldrb	r3, [r7, #15]
 8015a08:	1c5a      	adds	r2, r3, #1
 8015a0a:	73fa      	strb	r2, [r7, #15]
 8015a0c:	f107 0210 	add.w	r2, r7, #16
 8015a10:	4413      	add	r3, r2
 8015a12:	79ba      	ldrb	r2, [r7, #6]
 8015a14:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = numOfBlocks;                      /* Set number of blocks to read */
 8015a18:	7bfb      	ldrb	r3, [r7, #15]
 8015a1a:	1c5a      	adds	r2, r3, #1
 8015a1c:	73fa      	strb	r2, [r7, #15]
 8015a1e:	f107 0210 	add.w	r2, r7, #16
 8015a22:	4413      	add	r3, r2
 8015a24:	797a      	ldrb	r2, [r7, #5]
 8015a26:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8015a2a:	7bfb      	ldrb	r3, [r7, #15]
 8015a2c:	b29b      	uxth	r3, r3
 8015a2e:	79f9      	ldrb	r1, [r7, #7]
 8015a30:	6a3a      	ldr	r2, [r7, #32]
 8015a32:	9204      	str	r2, [sp, #16]
 8015a34:	8bba      	ldrh	r2, [r7, #28]
 8015a36:	9203      	str	r2, [sp, #12]
 8015a38:	69ba      	ldr	r2, [r7, #24]
 8015a3a:	9202      	str	r2, [sp, #8]
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	f107 030c 	add.w	r3, r7, #12
 8015a42:	9300      	str	r3, [sp, #0]
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	2200      	movs	r2, #0
 8015a48:	2023      	movs	r0, #35	; 0x23
 8015a4a:	f000 f927 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8015a4e:	4603      	mov	r3, r0
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <rfalNfcvPollerExtendedReadSingleBlock>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b08c      	sub	sp, #48	; 0x30
 8015a5c:	af06      	add	r7, sp, #24
 8015a5e:	60b9      	str	r1, [r7, #8]
 8015a60:	607b      	str	r3, [r7, #4]
 8015a62:	4603      	mov	r3, r0
 8015a64:	73fb      	strb	r3, [r7, #15]
 8015a66:	4613      	mov	r3, r2
 8015a68:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_EXTENDED_LEN];
    uint8_t dataLen;
        
    dataLen = 0U;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum; /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8015a6e:	7dfb      	ldrb	r3, [r7, #23]
 8015a70:	1c5a      	adds	r2, r3, #1
 8015a72:	75fa      	strb	r2, [r7, #23]
 8015a74:	89ba      	ldrh	r2, [r7, #12]
 8015a76:	b2d2      	uxtb	r2, r2
 8015a78:	f107 0118 	add.w	r1, r7, #24
 8015a7c:	440b      	add	r3, r1
 8015a7e:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 8015a82:	89bb      	ldrh	r3, [r7, #12]
 8015a84:	0a1b      	lsrs	r3, r3, #8
 8015a86:	b29a      	uxth	r2, r3
 8015a88:	7dfb      	ldrb	r3, [r7, #23]
 8015a8a:	1c59      	adds	r1, r3, #1
 8015a8c:	75f9      	strb	r1, [r7, #23]
 8015a8e:	b2d2      	uxtb	r2, r2
 8015a90:	f107 0118 	add.w	r1, r7, #24
 8015a94:	440b      	add	r3, r1
 8015a96:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8015a9a:	7dfb      	ldrb	r3, [r7, #23]
 8015a9c:	b29b      	uxth	r3, r3
 8015a9e:	7bf9      	ldrb	r1, [r7, #15]
 8015aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015aa2:	9204      	str	r2, [sp, #16]
 8015aa4:	8c3a      	ldrh	r2, [r7, #32]
 8015aa6:	9203      	str	r2, [sp, #12]
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	9202      	str	r2, [sp, #8]
 8015aac:	9301      	str	r3, [sp, #4]
 8015aae:	f107 0314 	add.w	r3, r7, #20
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	2030      	movs	r0, #48	; 0x30
 8015aba:	f000 f8ef 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8015abe:	4603      	mov	r3, r0
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3718      	adds	r7, #24
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <rfalNfcvPollerExtendedWriteSingleBlock>:


/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b09e      	sub	sp, #120	; 0x78
 8015acc:	af06      	add	r7, sp, #24
 8015ace:	60b9      	str	r1, [r7, #8]
 8015ad0:	607b      	str	r3, [r7, #4]
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	73fb      	strb	r3, [r7, #15]
 8015ad6:	4613      	mov	r3, r2
 8015ad8:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) )
 8015ada:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d003      	beq.n	8015aea <rfalNfcvPollerExtendedWriteSingleBlock+0x22>
 8015ae2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8015ae6:	2b20      	cmp	r3, #32
 8015ae8:	d901      	bls.n	8015aee <rfalNfcvPollerExtendedWriteSingleBlock+0x26>
    {
        return ERR_PARAM;
 8015aea:	2307      	movs	r3, #7
 8015aec:	e044      	b.n	8015b78 <rfalNfcvPollerExtendedWriteSingleBlock+0xb0>
    }
    
    dataLen = 0U;
 8015aee:	2300      	movs	r3, #0
 8015af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;                    /* TS T5T 1.0 BNo is considered as a multi-byte field. TS T5T 1.0 5.1.1.13 multi-byte field follows [DIGITAL]. [DIGITAL] 9.3.1 A multiple byte field is transmitted LSB first. */
 8015af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015af8:	1c5a      	adds	r2, r3, #1
 8015afa:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8015afe:	89ba      	ldrh	r2, [r7, #12]
 8015b00:	b2d2      	uxtb	r2, r2
 8015b02:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8015b06:	440b      	add	r3, r1
 8015b08:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)((blockNum >> 8U) & 0xFFU);
 8015b0c:	89bb      	ldrh	r3, [r7, #12]
 8015b0e:	0a1b      	lsrs	r3, r3, #8
 8015b10:	b29a      	uxth	r2, r3
 8015b12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b16:	1c59      	adds	r1, r3, #1
 8015b18:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 8015b1c:	b2d2      	uxtb	r2, r2
 8015b1e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8015b22:	440b      	add	r3, r1
 8015b24:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen );         /* Append Block data to write */
 8015b28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b2c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015b30:	4413      	add	r3, r2
 8015b32:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8015b36:	6879      	ldr	r1, [r7, #4]
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f006 f8b9 	bl	801bcb0 <memcpy>
    dataLen += blockLen;
 8015b3e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8015b42:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8015b46:	4413      	add	r3, r2
 8015b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 8015b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	7bf9      	ldrb	r1, [r7, #15]
 8015b54:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8015b58:	9204      	str	r2, [sp, #16]
 8015b5a:	222a      	movs	r2, #42	; 0x2a
 8015b5c:	9203      	str	r2, [sp, #12]
 8015b5e:	f107 0210 	add.w	r2, r7, #16
 8015b62:	9202      	str	r2, [sp, #8]
 8015b64:	9301      	str	r3, [sp, #4]
 8015b66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015b6a:	9300      	str	r3, [sp, #0]
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	2200      	movs	r2, #0
 8015b70:	2031      	movs	r0, #49	; 0x31
 8015b72:	f000 f893 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8015b76:	4603      	mov	r3, r0
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3760      	adds	r7, #96	; 0x60
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <rfalNfcvPollerExtendedReadMultipleBlocks>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint16_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b08c      	sub	sp, #48	; 0x30
 8015b84:	af06      	add	r7, sp, #24
 8015b86:	60b9      	str	r1, [r7, #8]
 8015b88:	4611      	mov	r1, r2
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73fb      	strb	r3, [r7, #15]
 8015b90:	460b      	mov	r3, r1
 8015b92:	81bb      	strh	r3, [r7, #12]
 8015b94:	4613      	mov	r3, r2
 8015b96:	80fb      	strh	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_EXTENDED_LEN + RFAL_NFCV_BLOCKNUM_EXTENDED_LEN)];
    uint8_t dataLen;
        
    dataLen = 0U;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)((firstBlockNum >> 0U) & 0xFFU);
 8015b9c:	7dfb      	ldrb	r3, [r7, #23]
 8015b9e:	1c5a      	adds	r2, r3, #1
 8015ba0:	75fa      	strb	r2, [r7, #23]
 8015ba2:	89ba      	ldrh	r2, [r7, #12]
 8015ba4:	b2d2      	uxtb	r2, r2
 8015ba6:	f107 0118 	add.w	r1, r7, #24
 8015baa:	440b      	add	r3, r1
 8015bac:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((firstBlockNum >> 8U) & 0xFFU);
 8015bb0:	89bb      	ldrh	r3, [r7, #12]
 8015bb2:	0a1b      	lsrs	r3, r3, #8
 8015bb4:	b29a      	uxth	r2, r3
 8015bb6:	7dfb      	ldrb	r3, [r7, #23]
 8015bb8:	1c59      	adds	r1, r3, #1
 8015bba:	75f9      	strb	r1, [r7, #23]
 8015bbc:	b2d2      	uxtb	r2, r2
 8015bbe:	f107 0118 	add.w	r1, r7, #24
 8015bc2:	440b      	add	r3, r1
 8015bc4:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 0U) & 0xFFU);
 8015bc8:	7dfb      	ldrb	r3, [r7, #23]
 8015bca:	1c5a      	adds	r2, r3, #1
 8015bcc:	75fa      	strb	r2, [r7, #23]
 8015bce:	88fa      	ldrh	r2, [r7, #6]
 8015bd0:	b2d2      	uxtb	r2, r2
 8015bd2:	f107 0118 	add.w	r1, r7, #24
 8015bd6:	440b      	add	r3, r1
 8015bd8:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)((numOfBlocks >> 8U) & 0xFFU);
 8015bdc:	88fb      	ldrh	r3, [r7, #6]
 8015bde:	0a1b      	lsrs	r3, r3, #8
 8015be0:	b29a      	uxth	r2, r3
 8015be2:	7dfb      	ldrb	r3, [r7, #23]
 8015be4:	1c59      	adds	r1, r3, #1
 8015be6:	75f9      	strb	r1, [r7, #23]
 8015be8:	b2d2      	uxtb	r2, r2
 8015bea:	f107 0118 	add.w	r1, r7, #24
 8015bee:	440b      	add	r3, r1
 8015bf0:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_READ_MULTIPLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8015bf4:	7dfb      	ldrb	r3, [r7, #23]
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	7bf9      	ldrb	r1, [r7, #15]
 8015bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015bfc:	9204      	str	r2, [sp, #16]
 8015bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015c00:	9203      	str	r2, [sp, #12]
 8015c02:	6a3a      	ldr	r2, [r7, #32]
 8015c04:	9202      	str	r2, [sp, #8]
 8015c06:	9301      	str	r3, [sp, #4]
 8015c08:	f107 0310 	add.w	r3, r7, #16
 8015c0c:	9300      	str	r3, [sp, #0]
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	2200      	movs	r2, #0
 8015c12:	2033      	movs	r0, #51	; 0x33
 8015c14:	f000 f842 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8015c18:	4603      	mov	r3, r0
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3718      	adds	r7, #24
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}

08015c22 <rfalNfcvPollerGetSystemInformation>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b08a      	sub	sp, #40	; 0x28
 8015c26:	af06      	add	r7, sp, #24
 8015c28:	60b9      	str	r1, [r7, #8]
 8015c2a:	607a      	str	r2, [r7, #4]
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	4603      	mov	r3, r0
 8015c30:	73fb      	strb	r3, [r7, #15]
 8015c32:	4613      	mov	r3, r2
 8015c34:	81bb      	strh	r3, [r7, #12]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_GET_SYS_INFO, flags, RFAL_NFCV_PARAM_SKIP, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen );
 8015c36:	7bf9      	ldrb	r1, [r7, #15]
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	9304      	str	r3, [sp, #16]
 8015c3c:	89bb      	ldrh	r3, [r7, #12]
 8015c3e:	9303      	str	r3, [sp, #12]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	9302      	str	r3, [sp, #8]
 8015c44:	2300      	movs	r3, #0
 8015c46:	9301      	str	r3, [sp, #4]
 8015c48:	2300      	movs	r3, #0
 8015c4a:	9300      	str	r3, [sp, #0]
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	202b      	movs	r0, #43	; 0x2b
 8015c52:	f000 f823 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8015c56:	4603      	mov	r3, r0
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <rfalNfcvPollerExtendedGetSystemInformation>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerExtendedGetSystemInformation( uint8_t flags, const uint8_t* uid, uint8_t requestField, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b08a      	sub	sp, #40	; 0x28
 8015c64:	af06      	add	r7, sp, #24
 8015c66:	60b9      	str	r1, [r7, #8]
 8015c68:	607b      	str	r3, [r7, #4]
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	73fb      	strb	r3, [r7, #15]
 8015c6e:	4613      	mov	r3, r2
 8015c70:	73bb      	strb	r3, [r7, #14]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
 8015c72:	7bba      	ldrb	r2, [r7, #14]
 8015c74:	7bf9      	ldrb	r1, [r7, #15]
 8015c76:	69fb      	ldr	r3, [r7, #28]
 8015c78:	9304      	str	r3, [sp, #16]
 8015c7a:	8b3b      	ldrh	r3, [r7, #24]
 8015c7c:	9303      	str	r3, [sp, #12]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	9302      	str	r3, [sp, #8]
 8015c82:	2300      	movs	r3, #0
 8015c84:	9301      	str	r3, [sp, #4]
 8015c86:	2300      	movs	r3, #0
 8015c88:	9300      	str	r3, [sp, #0]
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	203b      	movs	r0, #59	; 0x3b
 8015c8e:	f000 f805 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8015c92:	4603      	mov	r3, r0
}
 8015c94:	4618      	mov	r0, r3
 8015c96:	3710      	adds	r7, #16
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}

08015c9c <rfalNfcvPollerTransceiveReq>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b094      	sub	sp, #80	; 0x50
 8015ca0:	af04      	add	r7, sp, #16
 8015ca2:	603b      	str	r3, [r7, #0]
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	71fb      	strb	r3, [r7, #7]
 8015ca8:	460b      	mov	r3, r1
 8015caa:	71bb      	strb	r3, [r7, #6]
 8015cac:	4613      	mov	r3, r2
 8015cae:	717b      	strb	r3, [r7, #5]
    rfalNfcvGenericReq req;
    uint8_t            msgIt;
    rfalBitRate        rxBR;
    bool               fastMode;
    
    msgIt    = 0;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    fastMode = false;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8015cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d013      	beq.n	8015cea <rfalNfcvPollerTransceiveReq+0x4e>
 8015cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d010      	beq.n	8015cea <rfalNfcvPollerTransceiveReq+0x4e>
 8015cc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d002      	beq.n	8015cd6 <rfalNfcvPollerTransceiveReq+0x3a>
 8015cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d009      	beq.n	8015cea <rfalNfcvPollerTransceiveReq+0x4e>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 8015cd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015cda:	683a      	ldr	r2, [r7, #0]
 8015cdc:	2a00      	cmp	r2, #0
 8015cde:	d001      	beq.n	8015ce4 <rfalNfcvPollerTransceiveReq+0x48>
 8015ce0:	2229      	movs	r2, #41	; 0x29
 8015ce2:	e000      	b.n	8015ce6 <rfalNfcvPollerTransceiveReq+0x4a>
 8015ce4:	2221      	movs	r2, #33	; 0x21
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d201      	bcs.n	8015cee <rfalNfcvPollerTransceiveReq+0x52>
    {
        return ERR_PARAM;
 8015cea:	2307      	movs	r3, #7
 8015cec:	e0c5      	b.n	8015e7a <rfalNfcvPollerTransceiveReq+0x1de>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 8015cee:	79fb      	ldrb	r3, [r7, #7]
 8015cf0:	2bc0      	cmp	r3, #192	; 0xc0
 8015cf2:	d017      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
 8015cf4:	79fb      	ldrb	r3, [r7, #7]
 8015cf6:	2bc4      	cmp	r3, #196	; 0xc4
 8015cf8:	d014      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
 8015cfa:	79fb      	ldrb	r3, [r7, #7]
 8015cfc:	2bc3      	cmp	r3, #195	; 0xc3
 8015cfe:	d011      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS) || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS) ||
 8015d00:	79fb      	ldrb	r3, [r7, #7]
 8015d02:	2bc5      	cmp	r3, #197	; 0xc5
 8015d04:	d00e      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
 8015d06:	79fb      	ldrb	r3, [r7, #7]
 8015d08:	2bca      	cmp	r3, #202	; 0xca
 8015d0a:	d00b      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
 8015d0c:	79fb      	ldrb	r3, [r7, #7]
 8015d0e:	2bcb      	cmp	r3, #203	; 0xcb
 8015d10:	d008      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
 8015d12:	79fb      	ldrb	r3, [r7, #7]
 8015d14:	2bcc      	cmp	r3, #204	; 0xcc
 8015d16:	d005      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
 8015d18:	79fb      	ldrb	r3, [r7, #7]
 8015d1a:	2bcd      	cmp	r3, #205	; 0xcd
 8015d1c:	d002      	beq.n	8015d24 <rfalNfcvPollerTransceiveReq+0x88>
 8015d1e:	79fb      	ldrb	r3, [r7, #7]
 8015d20:	2bce      	cmp	r3, #206	; 0xce
 8015d22:	d10c      	bne.n	8015d3e <rfalNfcvPollerTransceiveReq+0xa2>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 8015d24:	f107 030f 	add.w	r3, r7, #15
 8015d28:	4619      	mov	r1, r3
 8015d2a:	2000      	movs	r0, #0
 8015d2c:	f000 fd52 	bl	80167d4 <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 8015d30:	21eb      	movs	r1, #235	; 0xeb
 8015d32:	20ff      	movs	r0, #255	; 0xff
 8015d34:	f000 fa72 	bl	801621c <rfalSetBitRate>
        
        fastMode = true;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS)));
 8015d3e:	79bb      	ldrb	r3, [r7, #6]
 8015d40:	f023 0320 	bic.w	r3, r3, #32
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	743b      	strb	r3, [r7, #16]
    req.CMD       = cmd;
 8015d48:	79fb      	ldrb	r3, [r7, #7]
 8015d4a:	747b      	strb	r3, [r7, #17]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 8015d4c:	797b      	ldrb	r3, [r7, #5]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d00a      	beq.n	8015d68 <rfalNfcvPollerTransceiveReq+0xcc>
    {
        req.payload.data[msgIt++] = param;
 8015d52:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015d56:	1c5a      	adds	r2, r3, #1
 8015d58:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8015d5c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015d60:	4413      	add	r3, r2
 8015d62:	797a      	ldrb	r2, [r7, #5]
 8015d64:	f803 2c2e 	strb.w	r2, [r3, #-46]
    }
    
    /* Check if Request is to be sent in Addressed mode. Select mode flag shall be set by user */
    if( uid != NULL )
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d014      	beq.n	8015d98 <rfalNfcvPollerTransceiveReq+0xfc>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 8015d6e:	7c3b      	ldrb	r3, [r7, #16]
 8015d70:	f043 0320 	orr.w	r3, r3, #32
 8015d74:	b2db      	uxtb	r3, r3
 8015d76:	743b      	strb	r3, [r7, #16]
        ST_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 8015d78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015d7c:	f107 0210 	add.w	r2, r7, #16
 8015d80:	4413      	add	r3, r2
 8015d82:	3302      	adds	r3, #2
 8015d84:	2208      	movs	r2, #8
 8015d86:	6839      	ldr	r1, [r7, #0]
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f005 ff91 	bl	801bcb0 <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 8015d8e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015d92:	3308      	adds	r3, #8
 8015d94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }
    
    if( dataLen > 0U )
 8015d98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d013      	beq.n	8015dc8 <rfalNfcvPollerTransceiveReq+0x12c>
    {
        ST_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 8015da0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015da4:	f107 0210 	add.w	r2, r7, #16
 8015da8:	4413      	add	r3, r2
 8015daa:	3302      	adds	r3, #2
 8015dac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8015db0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015db2:	4618      	mov	r0, r3
 8015db4:	f005 ff7c 	bl	801bcb0 <memcpy>
        msgIt += (uint8_t)dataLen;
 8015db8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015dbc:	b2da      	uxtb	r2, r3
 8015dbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015dc2:	4413      	add	r3, r2
 8015dc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    }
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_NFCV_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCV_FDT_MAX );
 8015dc8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	3302      	adds	r3, #2
 8015dd0:	b299      	uxth	r1, r3
 8015dd2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8015dd6:	f107 0010 	add.w	r0, r7, #16
 8015dda:	4b2a      	ldr	r3, [pc, #168]	; (8015e84 <rfalNfcvPollerTransceiveReq+0x1e8>)
 8015ddc:	9302      	str	r3, [sp, #8]
 8015dde:	2300      	movs	r3, #0
 8015de0:	9301      	str	r3, [sp, #4]
 8015de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015de4:	9300      	str	r3, [sp, #0]
 8015de6:	4613      	mov	r3, r2
 8015de8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015dea:	f000 ffed 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8015dee:	4603      	mov	r3, r0
 8015df0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    
    /* If the Option Flag is set in certain commands an EOF needs to be sent after 20ms to retrieve the VICC response      ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 8015df2:	79bb      	ldrb	r3, [r7, #6]
 8015df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d01b      	beq.n	8015e34 <rfalNfcvPollerTransceiveReq+0x198>
 8015dfc:	79fb      	ldrb	r3, [r7, #7]
 8015dfe:	2b21      	cmp	r3, #33	; 0x21
 8015e00:	d00e      	beq.n	8015e20 <rfalNfcvPollerTransceiveReq+0x184>
 8015e02:	79fb      	ldrb	r3, [r7, #7]
 8015e04:	2b24      	cmp	r3, #36	; 0x24
 8015e06:	d00b      	beq.n	8015e20 <rfalNfcvPollerTransceiveReq+0x184>
 8015e08:	79fb      	ldrb	r3, [r7, #7]
 8015e0a:	2b22      	cmp	r3, #34	; 0x22
 8015e0c:	d008      	beq.n	8015e20 <rfalNfcvPollerTransceiveReq+0x184>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_LOCK_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK)                   ||
 8015e0e:	79fb      	ldrb	r3, [r7, #7]
 8015e10:	2b31      	cmp	r3, #49	; 0x31
 8015e12:	d005      	beq.n	8015e20 <rfalNfcvPollerTransceiveReq+0x184>
 8015e14:	79fb      	ldrb	r3, [r7, #7]
 8015e16:	2b32      	cmp	r3, #50	; 0x32
 8015e18:	d002      	beq.n	8015e20 <rfalNfcvPollerTransceiveReq+0x184>
                                                        (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK))  )
 8015e1a:	79fb      	ldrb	r3, [r7, #7]
 8015e1c:	2b34      	cmp	r3, #52	; 0x34
 8015e1e:	d109      	bne.n	8015e34 <rfalNfcvPollerTransceiveReq+0x198>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 8015e20:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015e28:	4619      	mov	r1, r3
 8015e2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015e2c:	f002 fab0 	bl	8018390 <rfalISO15693TransceiveEOF>
 8015e30:	4603      	mov	r3, r0
 8015e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }

    /* Restore Rx BitRate */
    if( fastMode )
 8015e34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d004      	beq.n	8015e46 <rfalNfcvPollerTransceiveReq+0x1aa>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 8015e3c:	7bfb      	ldrb	r3, [r7, #15]
 8015e3e:	4619      	mov	r1, r3
 8015e40:	20ff      	movs	r0, #255	; 0xff
 8015e42:	f000 f9eb 	bl	801621c <rfalSetBitRate>
    }
    
    if( ret != ERR_NONE )
 8015e46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d001      	beq.n	8015e50 <rfalNfcvPollerTransceiveReq+0x1b4>
    {
        return ret;
 8015e4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e4e:	e014      	b.n	8015e7a <rfalNfcvPollerTransceiveReq+0x1de>
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 8015e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e52:	881b      	ldrh	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d101      	bne.n	8015e5c <rfalNfcvPollerTransceiveReq+0x1c0>
    {
        return ERR_PROTO;
 8015e58:	230b      	movs	r3, #11
 8015e5a:	e00e      	b.n	8015e7a <rfalNfcvPollerTransceiveReq+0x1de>
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 8015e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	f003 0301 	and.w	r3, r3, #1
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d007      	beq.n	8015e78 <rfalNfcvPollerTransceiveReq+0x1dc>
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 8015e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f7ff fa82 	bl	8015378 <rfalNfcvParseError>
 8015e74:	4603      	mov	r3, r0
 8015e76:	e000      	b.n	8015e7a <rfalNfcvPollerTransceiveReq+0x1de>
    }
    
    return ERR_NONE;
 8015e78:	2300      	movs	r3, #0
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3740      	adds	r7, #64	; 0x40
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	00042360 	.word	0x00042360

08015e88 <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 8015e8e:	f004 fd6d 	bl	801a96c <st25r3916Initialize>
 8015e92:	4603      	mov	r3, r0
 8015e94:	80fb      	strh	r3, [r7, #6]
 8015e96:	88fb      	ldrh	r3, [r7, #6]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d001      	beq.n	8015ea0 <rfalInitialize+0x18>
 8015e9c:	88fb      	ldrh	r3, [r7, #6]
 8015e9e:	e059      	b.n	8015f54 <rfalInitialize+0xcc>
    
    st25r3916ClearInterrupts();
 8015ea0:	f005 fdf4 	bl	801ba8c <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 8015ea4:	2140      	movs	r1, #64	; 0x40
 8015ea6:	2001      	movs	r0, #1
 8015ea8:	f005 faf1 	bl	801b48e <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 8015eac:	2000      	movs	r0, #0
 8015eae:	f7f6 f89d 	bl	800bfec <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8015eb2:	2203      	movs	r2, #3
 8015eb4:	2103      	movs	r1, #3
 8015eb6:	2002      	movs	r0, #2
 8015eb8:	f005 fb72 	bl	801b5a0 <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 8015ebc:	f001 fefe 	bl	8017cbc <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 8015ec0:	4b26      	ldr	r3, [pc, #152]	; (8015f5c <rfalInitialize+0xd4>)
 8015ec2:	2201      	movs	r2, #1
 8015ec4:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 8015ec6:	4b25      	ldr	r3, [pc, #148]	; (8015f5c <rfalInitialize+0xd4>)
 8015ec8:	2200      	movs	r2, #0
 8015eca:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 8015ecc:	4b23      	ldr	r3, [pc, #140]	; (8015f5c <rfalInitialize+0xd4>)
 8015ece:	2200      	movs	r2, #0
 8015ed0:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 8015ed2:	4b22      	ldr	r3, [pc, #136]	; (8015f5c <rfalInitialize+0xd4>)
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 8015ed8:	4b20      	ldr	r3, [pc, #128]	; (8015f5c <rfalInitialize+0xd4>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 8015ede:	4b1f      	ldr	r3, [pc, #124]	; (8015f5c <rfalInitialize+0xd4>)
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 8015ee4:	4b1d      	ldr	r3, [pc, #116]	; (8015f5c <rfalInitialize+0xd4>)
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	765a      	strb	r2, [r3, #25]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 8015eea:	4b1c      	ldr	r3, [pc, #112]	; (8015f5c <rfalInitialize+0xd4>)
 8015eec:	2200      	movs	r2, #0
 8015eee:	761a      	strb	r2, [r3, #24]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 8015ef0:	4b1a      	ldr	r3, [pc, #104]	; (8015f5c <rfalInitialize+0xd4>)
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 8015ef6:	4b19      	ldr	r3, [pc, #100]	; (8015f5c <rfalInitialize+0xd4>)
 8015ef8:	2200      	movs	r2, #0
 8015efa:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 8015efc:	4b17      	ldr	r3, [pc, #92]	; (8015f5c <rfalInitialize+0xd4>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	609a      	str	r2, [r3, #8]
    gRFAL.timings.nTRFW      = 0U;
 8015f02:	4b16      	ldr	r3, [pc, #88]	; (8015f5c <rfalInitialize+0xd4>)
 8015f04:	2200      	movs	r2, #0
 8015f06:	751a      	strb	r2, [r3, #20]
    
    /* Destroy any previous pending timers */
    rfalTimerDestroy( gRFAL.tmr.GT );
    rfalTimerDestroy( gRFAL.tmr.txRx );
    rfalTimerDestroy( gRFAL.tmr.RXE );
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 8015f08:	4b14      	ldr	r3, [pc, #80]	; (8015f5c <rfalInitialize+0xd4>)
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	641a      	str	r2, [r3, #64]	; 0x40
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 8015f0e:	4b13      	ldr	r3, [pc, #76]	; (8015f5c <rfalInitialize+0xd4>)
 8015f10:	2200      	movs	r2, #0
 8015f12:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.tmr.RXE            = RFAL_TIMING_NONE;
 8015f14:	4b11      	ldr	r3, [pc, #68]	; (8015f5c <rfalInitialize+0xd4>)
 8015f16:	2200      	movs	r2, #0
 8015f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 8015f1a:	4b10      	ldr	r3, [pc, #64]	; (8015f5c <rfalInitialize+0xd4>)
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 8015f20:	4b0e      	ldr	r3, [pc, #56]	; (8015f5c <rfalInitialize+0xd4>)
 8015f22:	2200      	movs	r2, #0
 8015f24:	651a      	str	r2, [r3, #80]	; 0x50
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 8015f26:	4b0d      	ldr	r3, [pc, #52]	; (8015f5c <rfalInitialize+0xd4>)
 8015f28:	2200      	movs	r2, #0
 8015f2a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
#endif /* RFAL_FEATURE_NFCV */
    

#if RFAL_FEATURE_LISTEN_MODE
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 8015f2e:	4b0b      	ldr	r3, [pc, #44]	; (8015f5c <rfalInitialize+0xd4>)
 8015f30:	2200      	movs	r2, #0
 8015f32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 8015f36:	4b09      	ldr	r3, [pc, #36]	; (8015f5c <rfalInitialize+0xd4>)
 8015f38:	22ff      	movs	r2, #255	; 0xff
 8015f3a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    gRFAL.Lm.iniFlag         = false;
 8015f3e:	4b07      	ldr	r3, [pc, #28]	; (8015f5c <rfalInitialize+0xd4>)
 8015f40:	2200      	movs	r2, #0
 8015f42:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8015f46:	4b05      	ldr	r3, [pc, #20]	; (8015f5c <rfalInitialize+0xd4>)
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 8015f4e:	f000 f807 	bl	8015f60 <rfalCalibrate>
    
    return ERR_NONE;
 8015f52:	2300      	movs	r3, #0
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3708      	adds	r7, #8
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	20003618 	.word	0x20003618

08015f60 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8015f66:	4b0b      	ldr	r3, [pc, #44]	; (8015f94 <rfalCalibrate+0x34>)
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d101      	bne.n	8015f72 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 8015f6e:	2321      	movs	r3, #33	; 0x21
 8015f70:	e00c      	b.n	8015f8c <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 8015f72:	2200      	movs	r2, #0
 8015f74:	2180      	movs	r1, #128	; 0x80
 8015f76:	202c      	movs	r0, #44	; 0x2c
 8015f78:	f005 fb96 	bl	801b6a8 <st25r3916CheckReg>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d003      	beq.n	8015f8a <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 8015f82:	1dbb      	adds	r3, r7, #6
 8015f84:	4618      	mov	r0, r3
 8015f86:	f004 fdb1 	bl	801aaec <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 8015f8a:	2300      	movs	r3, #0
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3708      	adds	r7, #8
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	20003618 	.word	0x20003618

08015f98 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b082      	sub	sp, #8
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	71fb      	strb	r3, [r7, #7]
 8015fa2:	460b      	mov	r3, r1
 8015fa4:	71bb      	strb	r3, [r7, #6]
 8015fa6:	4613      	mov	r3, r2
 8015fa8:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 8015faa:	4b9b      	ldr	r3, [pc, #620]	; (8016218 <rfalSetMode+0x280>)
 8015fac:	781b      	ldrb	r3, [r3, #0]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d101      	bne.n	8015fb6 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 8015fb2:	2321      	movs	r3, #33	; 0x21
 8015fb4:	e12b      	b.n	801620e <rfalSetMode+0x276>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 8015fb6:	79bb      	ldrb	r3, [r7, #6]
 8015fb8:	2bff      	cmp	r3, #255	; 0xff
 8015fba:	d002      	beq.n	8015fc2 <rfalSetMode+0x2a>
 8015fbc:	797b      	ldrb	r3, [r7, #5]
 8015fbe:	2bff      	cmp	r3, #255	; 0xff
 8015fc0:	d101      	bne.n	8015fc6 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 8015fc2:	2307      	movs	r3, #7
 8015fc4:	e123      	b.n	801620e <rfalSetMode+0x276>
    }
   
    switch( mode )
 8015fc6:	79fb      	ldrb	r3, [r7, #7]
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	2b0c      	cmp	r3, #12
 8015fcc:	f200 810b 	bhi.w	80161e6 <rfalSetMode+0x24e>
 8015fd0:	a201      	add	r2, pc, #4	; (adr r2, 8015fd8 <rfalSetMode+0x40>)
 8015fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fd6:	bf00      	nop
 8015fd8:	0801600d 	.word	0x0801600d
 8015fdc:	0801602f 	.word	0x0801602f
 8015fe0:	08016051 	.word	0x08016051
 8015fe4:	08016087 	.word	0x08016087
 8015fe8:	080160bd 	.word	0x080160bd
 8015fec:	080160f3 	.word	0x080160f3
 8015ff0:	08016115 	.word	0x08016115
 8015ff4:	08016115 	.word	0x08016115
 8015ff8:	0801612f 	.word	0x0801612f
 8015ffc:	0801619f 	.word	0x0801619f
 8016000:	080161e3 	.word	0x080161e3
 8016004:	080161c1 	.word	0x080161c1
 8016008:	08016163 	.word	0x08016163
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 801600c:	2104      	movs	r1, #4
 801600e:	2002      	movs	r0, #2
 8016010:	f005 fa62 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 8016014:	2108      	movs	r1, #8
 8016016:	2003      	movs	r0, #3
 8016018:	f005 f90e 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801601c:	f240 1001 	movw	r0, #257	; 0x101
 8016020:	f7f5 ffe4 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8016024:	f44f 7081 	mov.w	r0, #258	; 0x102
 8016028:	f7f5 ffe0 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801602c:	e0dd      	b.n	80161ea <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 801602e:	2104      	movs	r1, #4
 8016030:	2002      	movs	r0, #2
 8016032:	f005 fa51 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 8016036:	2120      	movs	r1, #32
 8016038:	2003      	movs	r0, #3
 801603a:	f005 f8fd 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801603e:	f240 1001 	movw	r0, #257	; 0x101
 8016042:	f7f5 ffd3 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8016046:	f44f 7081 	mov.w	r0, #258	; 0x102
 801604a:	f7f5 ffcf 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801604e:	e0cc      	b.n	80161ea <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8016050:	2104      	movs	r1, #4
 8016052:	2002      	movs	r0, #2
 8016054:	f005 fa40 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8016058:	2110      	movs	r1, #16
 801605a:	2003      	movs	r0, #3
 801605c:	f005 f8ec 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 8016060:	2200      	movs	r2, #0
 8016062:	21fc      	movs	r1, #252	; 0xfc
 8016064:	2006      	movs	r0, #6
 8016066:	f005 fa9b 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 801606a:	2200      	movs	r2, #0
 801606c:	21f0      	movs	r1, #240	; 0xf0
 801606e:	2007      	movs	r0, #7
 8016070:	f005 fa96 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8016074:	f240 2001 	movw	r0, #513	; 0x201
 8016078:	f7f5 ffb8 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801607c:	f240 2002 	movw	r0, #514	; 0x202
 8016080:	f7f5 ffb4 	bl	800bfec <rfalSetAnalogConfig>
            break;
 8016084:	e0b1      	b.n	80161ea <rfalSetMode+0x252>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8016086:	2104      	movs	r1, #4
 8016088:	2002      	movs	r0, #2
 801608a:	f005 fa25 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 801608e:	2110      	movs	r1, #16
 8016090:	2003      	movs	r0, #3
 8016092:	f005 f8d1 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 8016096:	2200      	movs	r2, #0
 8016098:	21fc      	movs	r1, #252	; 0xfc
 801609a:	2006      	movs	r0, #6
 801609c:	f005 fa80 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 80160a0:	2220      	movs	r2, #32
 80160a2:	21f0      	movs	r1, #240	; 0xf0
 80160a4:	2007      	movs	r0, #7
 80160a6:	f005 fa7b 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80160aa:	f240 2001 	movw	r0, #513	; 0x201
 80160ae:	f7f5 ff9d 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80160b2:	f240 2002 	movw	r0, #514	; 0x202
 80160b6:	f7f5 ff99 	bl	800bfec <rfalSetAnalogConfig>
            break;
 80160ba:	e096      	b.n	80161ea <rfalSetMode+0x252>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80160bc:	2104      	movs	r1, #4
 80160be:	2002      	movs	r0, #2
 80160c0:	f005 fa0a 	bl	801b4d8 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 80160c4:	2110      	movs	r1, #16
 80160c6:	2003      	movs	r0, #3
 80160c8:	f005 f8b6 	bl	801b238 <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 80160cc:	2200      	movs	r2, #0
 80160ce:	21fc      	movs	r1, #252	; 0xfc
 80160d0:	2006      	movs	r0, #6
 80160d2:	f005 fa65 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 80160d6:	2230      	movs	r2, #48	; 0x30
 80160d8:	21f0      	movs	r1, #240	; 0xf0
 80160da:	2007      	movs	r0, #7
 80160dc:	f005 fa60 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80160e0:	f240 2001 	movw	r0, #513	; 0x201
 80160e4:	f7f5 ff82 	bl	800bfec <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80160e8:	f240 2002 	movw	r0, #514	; 0x202
 80160ec:	f7f5 ff7e 	bl	800bfec <rfalSetAnalogConfig>
                break;
 80160f0:	e07b      	b.n	80161ea <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80160f2:	2104      	movs	r1, #4
 80160f4:	2002      	movs	r0, #2
 80160f6:	f005 f9ef 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 80160fa:	2118      	movs	r1, #24
 80160fc:	2003      	movs	r0, #3
 80160fe:	f005 f89b 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8016102:	f240 4001 	movw	r0, #1025	; 0x401
 8016106:	f7f5 ff71 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 801610a:	f240 4002 	movw	r0, #1026	; 0x402
 801610e:	f7f5 ff6d 	bl	800bfec <rfalSetAnalogConfig>
            break;
 8016112:	e06a      	b.n	80161ea <rfalSetMode+0x252>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8016114:	2104      	movs	r1, #4
 8016116:	2002      	movs	r0, #2
 8016118:	f005 f9de 	bl	801b4d8 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801611c:	f241 0001 	movw	r0, #4097	; 0x1001
 8016120:	f7f5 ff64 	bl	800bfec <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8016124:	f241 0002 	movw	r0, #4098	; 0x1002
 8016128:	f7f5 ff60 	bl	800bfec <rfalSetAnalogConfig>
                break;
 801612c:	e05d      	b.n	80161ea <rfalSetMode+0x252>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 801612e:	2102      	movs	r1, #2
 8016130:	2003      	movs	r0, #3
 8016132:	f005 f881 	bl	801b238 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 8016136:	2200      	movs	r2, #0
 8016138:	2104      	movs	r1, #4
 801613a:	2012      	movs	r0, #18
 801613c:	f005 fa30 	bl	801b5a0 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 8016140:	2160      	movs	r1, #96	; 0x60
 8016142:	2040      	movs	r0, #64	; 0x40
 8016144:	f004 fec1 	bl	801aeca <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 8016148:	2180      	movs	r1, #128	; 0x80
 801614a:	2015      	movs	r0, #21
 801614c:	f005 f874 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8016150:	f640 0001 	movw	r0, #2049	; 0x801
 8016154:	f7f5 ff4a 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8016158:	f640 0002 	movw	r0, #2050	; 0x802
 801615c:	f7f5 ff46 	bl	800bfec <rfalSetAnalogConfig>
            break;
 8016160:	e043      	b.n	80161ea <rfalSetMode+0x252>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 8016162:	21ba      	movs	r1, #186	; 0xba
 8016164:	2003      	movs	r0, #3
 8016166:	f005 f867 	bl	801b238 <st25r3916WriteRegister>
        
            /* Set TARFG: 0 (75us+0ms=75us), as Target no Guard time needed */
            st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 801616a:	2100      	movs	r1, #0
 801616c:	2055      	movs	r0, #85	; 0x55
 801616e:	f005 f863 	bl	801b238 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 8016172:	2200      	movs	r2, #0
 8016174:	2104      	movs	r1, #4
 8016176:	2012      	movs	r0, #18
 8016178:	f005 fa12 	bl	801b5a0 <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 801617c:	2160      	movs	r1, #96	; 0x60
 801617e:	2040      	movs	r0, #64	; 0x40
 8016180:	f004 fea3 	bl	801aeca <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 8016184:	2180      	movs	r1, #128	; 0x80
 8016186:	2015      	movs	r0, #21
 8016188:	f005 f856 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 801618c:	f648 0001 	movw	r0, #34817	; 0x8801
 8016190:	f7f5 ff2c 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8016194:	f648 0002 	movw	r0, #34818	; 0x8802
 8016198:	f7f5 ff28 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801619c:	e025      	b.n	80161ea <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 801619e:	2104      	movs	r1, #4
 80161a0:	2002      	movs	r0, #2
 80161a2:	f005 f999 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 80161a6:	2188      	movs	r1, #136	; 0x88
 80161a8:	2003      	movs	r0, #3
 80161aa:	f005 f845 	bl	801b238 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80161ae:	f248 1001 	movw	r0, #33025	; 0x8101
 80161b2:	f7f5 ff1b 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80161b6:	f248 1002 	movw	r0, #33026	; 0x8102
 80161ba:	f7f5 ff17 	bl	800bfec <rfalSetAnalogConfig>
            break;
 80161be:	e014      	b.n	80161ea <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80161c0:	2104      	movs	r1, #4
 80161c2:	2002      	movs	r0, #2
 80161c4:	f005 f988 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 80161c8:	21a0      	movs	r1, #160	; 0xa0
 80161ca:	2003      	movs	r0, #3
 80161cc:	f005 f834 	bl	801b238 <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80161d0:	f248 4001 	movw	r0, #33793	; 0x8401
 80161d4:	f7f5 ff0a 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80161d8:	f248 4002 	movw	r0, #33794	; 0x8402
 80161dc:	f7f5 ff06 	bl	800bfec <rfalSetAnalogConfig>
            break;
 80161e0:	e003      	b.n	80161ea <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 80161e2:	2318      	movs	r3, #24
 80161e4:	e013      	b.n	801620e <rfalSetMode+0x276>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 80161e6:	230f      	movs	r3, #15
 80161e8:	e011      	b.n	801620e <rfalSetMode+0x276>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 80161ea:	4b0b      	ldr	r3, [pc, #44]	; (8016218 <rfalSetMode+0x280>)
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	bf38      	it	cc
 80161f2:	2302      	movcc	r3, #2
 80161f4:	b2da      	uxtb	r2, r3
 80161f6:	4b08      	ldr	r3, [pc, #32]	; (8016218 <rfalSetMode+0x280>)
 80161f8:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 80161fa:	4a07      	ldr	r2, [pc, #28]	; (8016218 <rfalSetMode+0x280>)
 80161fc:	79fb      	ldrb	r3, [r7, #7]
 80161fe:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 8016200:	797a      	ldrb	r2, [r7, #5]
 8016202:	79bb      	ldrb	r3, [r7, #6]
 8016204:	4611      	mov	r1, r2
 8016206:	4618      	mov	r0, r3
 8016208:	f000 f808 	bl	801621c <rfalSetBitRate>
 801620c:	4603      	mov	r3, r0
}
 801620e:	4618      	mov	r0, r3
 8016210:	3708      	adds	r7, #8
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	20003618 	.word	0x20003618

0801621c <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b088      	sub	sp, #32
 8016220:	af00      	add	r7, sp, #0
 8016222:	4603      	mov	r3, r0
 8016224:	460a      	mov	r2, r1
 8016226:	71fb      	strb	r3, [r7, #7]
 8016228:	4613      	mov	r3, r2
 801622a:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 801622c:	4ba4      	ldr	r3, [pc, #656]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d101      	bne.n	8016238 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 8016234:	2321      	movs	r3, #33	; 0x21
 8016236:	e2c2      	b.n	80167be <rfalSetBitRate+0x5a2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 8016238:	79fb      	ldrb	r3, [r7, #7]
 801623a:	2bff      	cmp	r3, #255	; 0xff
 801623c:	d102      	bne.n	8016244 <rfalSetBitRate+0x28>
 801623e:	4ba0      	ldr	r3, [pc, #640]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016240:	789b      	ldrb	r3, [r3, #2]
 8016242:	e000      	b.n	8016246 <rfalSetBitRate+0x2a>
 8016244:	79fb      	ldrb	r3, [r7, #7]
 8016246:	4a9e      	ldr	r2, [pc, #632]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016248:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 801624a:	79bb      	ldrb	r3, [r7, #6]
 801624c:	2bff      	cmp	r3, #255	; 0xff
 801624e:	d102      	bne.n	8016256 <rfalSetBitRate+0x3a>
 8016250:	4b9b      	ldr	r3, [pc, #620]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016252:	78db      	ldrb	r3, [r3, #3]
 8016254:	e000      	b.n	8016258 <rfalSetBitRate+0x3c>
 8016256:	79bb      	ldrb	r3, [r7, #6]
 8016258:	4a99      	ldr	r2, [pc, #612]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801625a:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 801625c:	4b98      	ldr	r3, [pc, #608]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801625e:	785b      	ldrb	r3, [r3, #1]
 8016260:	2b07      	cmp	r3, #7
 8016262:	d012      	beq.n	801628a <rfalSetBitRate+0x6e>
 8016264:	4b96      	ldr	r3, [pc, #600]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016266:	785b      	ldrb	r3, [r3, #1]
 8016268:	2b08      	cmp	r3, #8
 801626a:	d00e      	beq.n	801628a <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 801626c:	4b94      	ldr	r3, [pc, #592]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801626e:	789b      	ldrb	r3, [r3, #2]
 8016270:	4a93      	ldr	r2, [pc, #588]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016272:	78d2      	ldrb	r2, [r2, #3]
 8016274:	4611      	mov	r1, r2
 8016276:	4618      	mov	r0, r3
 8016278:	f004 fcdd 	bl	801ac36 <st25r3916SetBitrate>
 801627c:	4603      	mov	r3, r0
 801627e:	83fb      	strh	r3, [r7, #30]
 8016280:	8bfb      	ldrh	r3, [r7, #30]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d001      	beq.n	801628a <rfalSetBitRate+0x6e>
 8016286:	8bfb      	ldrh	r3, [r7, #30]
 8016288:	e299      	b.n	80167be <rfalSetBitRate+0x5a2>
    }
    
    
    switch( gRFAL.mode )
 801628a:	4b8d      	ldr	r3, [pc, #564]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801628c:	785b      	ldrb	r3, [r3, #1]
 801628e:	2b0d      	cmp	r3, #13
 8016290:	f200 8292 	bhi.w	80167b8 <rfalSetBitRate+0x59c>
 8016294:	a201      	add	r2, pc, #4	; (adr r2, 801629c <rfalSetBitRate+0x80>)
 8016296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801629a:	bf00      	nop
 801629c:	080167b5 	.word	0x080167b5
 80162a0:	080162d5 	.word	0x080162d5
 80162a4:	080162d5 	.word	0x080162d5
 80162a8:	0801635d 	.word	0x0801635d
 80162ac:	0801635d 	.word	0x0801635d
 80162b0:	0801635d 	.word	0x0801635d
 80162b4:	080163ed 	.word	0x080163ed
 80162b8:	0801647d 	.word	0x0801647d
 80162bc:	0801647d 	.word	0x0801647d
 80162c0:	0801658d 	.word	0x0801658d
 80162c4:	0801669d 	.word	0x0801669d
 80162c8:	080167b5 	.word	0x080167b5
 80162cc:	0801671d 	.word	0x0801671d
 80162d0:	0801661d 	.word	0x0801661d
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80162d4:	2008      	movs	r0, #8
 80162d6:	f7f5 fe89 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80162da:	4b79      	ldr	r3, [pc, #484]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80162dc:	789b      	ldrb	r3, [r3, #2]
 80162de:	2bea      	cmp	r3, #234	; 0xea
 80162e0:	d90c      	bls.n	80162fc <rfalSetBitRate+0xe0>
 80162e2:	4b77      	ldr	r3, [pc, #476]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80162e4:	789b      	ldrb	r3, [r3, #2]
 80162e6:	b29b      	uxth	r3, r3
 80162e8:	011b      	lsls	r3, r3, #4
 80162ea:	b29b      	uxth	r3, r3
 80162ec:	b2db      	uxtb	r3, r3
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80162f4:	f043 0301 	orr.w	r3, r3, #1
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	e00d      	b.n	8016318 <rfalSetBitRate+0xfc>
 80162fc:	4b70      	ldr	r3, [pc, #448]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80162fe:	789b      	ldrb	r3, [r3, #2]
 8016300:	b29b      	uxth	r3, r3
 8016302:	3301      	adds	r3, #1
 8016304:	b29b      	uxth	r3, r3
 8016306:	011b      	lsls	r3, r3, #4
 8016308:	b29b      	uxth	r3, r3
 801630a:	b2db      	uxtb	r3, r3
 801630c:	b29b      	uxth	r3, r3
 801630e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016312:	f043 0301 	orr.w	r3, r3, #1
 8016316:	b29b      	uxth	r3, r3
 8016318:	4618      	mov	r0, r3
 801631a:	f7f5 fe67 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801631e:	4b68      	ldr	r3, [pc, #416]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016320:	78db      	ldrb	r3, [r3, #3]
 8016322:	2bea      	cmp	r3, #234	; 0xea
 8016324:	d90a      	bls.n	801633c <rfalSetBitRate+0x120>
 8016326:	4b66      	ldr	r3, [pc, #408]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016328:	78db      	ldrb	r3, [r3, #3]
 801632a:	b29b      	uxth	r3, r3
 801632c:	011b      	lsls	r3, r3, #4
 801632e:	b29b      	uxth	r3, r3
 8016330:	b2db      	uxtb	r3, r3
 8016332:	b29b      	uxth	r3, r3
 8016334:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8016338:	b29b      	uxth	r3, r3
 801633a:	e00b      	b.n	8016354 <rfalSetBitRate+0x138>
 801633c:	4b60      	ldr	r3, [pc, #384]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801633e:	78db      	ldrb	r3, [r3, #3]
 8016340:	b29b      	uxth	r3, r3
 8016342:	3301      	adds	r3, #1
 8016344:	b29b      	uxth	r3, r3
 8016346:	011b      	lsls	r3, r3, #4
 8016348:	b29b      	uxth	r3, r3
 801634a:	b2db      	uxtb	r3, r3
 801634c:	b29b      	uxth	r3, r3
 801634e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8016352:	b29b      	uxth	r3, r3
 8016354:	4618      	mov	r0, r3
 8016356:	f7f5 fe49 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801635a:	e22f      	b.n	80167bc <rfalSetBitRate+0x5a0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 801635c:	2008      	movs	r0, #8
 801635e:	f7f5 fe45 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8016362:	4b57      	ldr	r3, [pc, #348]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016364:	789b      	ldrb	r3, [r3, #2]
 8016366:	2bea      	cmp	r3, #234	; 0xea
 8016368:	d90c      	bls.n	8016384 <rfalSetBitRate+0x168>
 801636a:	4b55      	ldr	r3, [pc, #340]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801636c:	789b      	ldrb	r3, [r3, #2]
 801636e:	b29b      	uxth	r3, r3
 8016370:	011b      	lsls	r3, r3, #4
 8016372:	b29b      	uxth	r3, r3
 8016374:	b2db      	uxtb	r3, r3
 8016376:	b29b      	uxth	r3, r3
 8016378:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801637c:	f043 0301 	orr.w	r3, r3, #1
 8016380:	b29b      	uxth	r3, r3
 8016382:	e00d      	b.n	80163a0 <rfalSetBitRate+0x184>
 8016384:	4b4e      	ldr	r3, [pc, #312]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016386:	789b      	ldrb	r3, [r3, #2]
 8016388:	b29b      	uxth	r3, r3
 801638a:	3301      	adds	r3, #1
 801638c:	b29b      	uxth	r3, r3
 801638e:	011b      	lsls	r3, r3, #4
 8016390:	b29b      	uxth	r3, r3
 8016392:	b2db      	uxtb	r3, r3
 8016394:	b29b      	uxth	r3, r3
 8016396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801639a:	f043 0301 	orr.w	r3, r3, #1
 801639e:	b29b      	uxth	r3, r3
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7f5 fe23 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80163a6:	4b46      	ldr	r3, [pc, #280]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80163a8:	78db      	ldrb	r3, [r3, #3]
 80163aa:	2bea      	cmp	r3, #234	; 0xea
 80163ac:	d90c      	bls.n	80163c8 <rfalSetBitRate+0x1ac>
 80163ae:	4b44      	ldr	r3, [pc, #272]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80163b0:	78db      	ldrb	r3, [r3, #3]
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	011b      	lsls	r3, r3, #4
 80163b6:	b29b      	uxth	r3, r3
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	b29b      	uxth	r3, r3
 80163bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80163c0:	f043 0302 	orr.w	r3, r3, #2
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	e00d      	b.n	80163e4 <rfalSetBitRate+0x1c8>
 80163c8:	4b3d      	ldr	r3, [pc, #244]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80163ca:	78db      	ldrb	r3, [r3, #3]
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	3301      	adds	r3, #1
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	011b      	lsls	r3, r3, #4
 80163d4:	b29b      	uxth	r3, r3
 80163d6:	b2db      	uxtb	r3, r3
 80163d8:	b29b      	uxth	r3, r3
 80163da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80163de:	f043 0302 	orr.w	r3, r3, #2
 80163e2:	b29b      	uxth	r3, r3
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7f5 fe01 	bl	800bfec <rfalSetAnalogConfig>
            break;
 80163ea:	e1e7      	b.n	80167bc <rfalSetBitRate+0x5a0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80163ec:	2008      	movs	r0, #8
 80163ee:	f7f5 fdfd 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80163f2:	4b33      	ldr	r3, [pc, #204]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80163f4:	789b      	ldrb	r3, [r3, #2]
 80163f6:	2bea      	cmp	r3, #234	; 0xea
 80163f8:	d90c      	bls.n	8016414 <rfalSetBitRate+0x1f8>
 80163fa:	4b31      	ldr	r3, [pc, #196]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80163fc:	789b      	ldrb	r3, [r3, #2]
 80163fe:	b29b      	uxth	r3, r3
 8016400:	011b      	lsls	r3, r3, #4
 8016402:	b29b      	uxth	r3, r3
 8016404:	b2db      	uxtb	r3, r3
 8016406:	b29b      	uxth	r3, r3
 8016408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801640c:	f043 0301 	orr.w	r3, r3, #1
 8016410:	b29b      	uxth	r3, r3
 8016412:	e00d      	b.n	8016430 <rfalSetBitRate+0x214>
 8016414:	4b2a      	ldr	r3, [pc, #168]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016416:	789b      	ldrb	r3, [r3, #2]
 8016418:	b29b      	uxth	r3, r3
 801641a:	3301      	adds	r3, #1
 801641c:	b29b      	uxth	r3, r3
 801641e:	011b      	lsls	r3, r3, #4
 8016420:	b29b      	uxth	r3, r3
 8016422:	b2db      	uxtb	r3, r3
 8016424:	b29b      	uxth	r3, r3
 8016426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801642a:	f043 0301 	orr.w	r3, r3, #1
 801642e:	b29b      	uxth	r3, r3
 8016430:	4618      	mov	r0, r3
 8016432:	f7f5 fddb 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8016436:	4b22      	ldr	r3, [pc, #136]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016438:	78db      	ldrb	r3, [r3, #3]
 801643a:	2bea      	cmp	r3, #234	; 0xea
 801643c:	d90c      	bls.n	8016458 <rfalSetBitRate+0x23c>
 801643e:	4b20      	ldr	r3, [pc, #128]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016440:	78db      	ldrb	r3, [r3, #3]
 8016442:	b29b      	uxth	r3, r3
 8016444:	011b      	lsls	r3, r3, #4
 8016446:	b29b      	uxth	r3, r3
 8016448:	b2db      	uxtb	r3, r3
 801644a:	b29b      	uxth	r3, r3
 801644c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016450:	f043 0302 	orr.w	r3, r3, #2
 8016454:	b29b      	uxth	r3, r3
 8016456:	e00d      	b.n	8016474 <rfalSetBitRate+0x258>
 8016458:	4b19      	ldr	r3, [pc, #100]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801645a:	78db      	ldrb	r3, [r3, #3]
 801645c:	b29b      	uxth	r3, r3
 801645e:	3301      	adds	r3, #1
 8016460:	b29b      	uxth	r3, r3
 8016462:	011b      	lsls	r3, r3, #4
 8016464:	b29b      	uxth	r3, r3
 8016466:	b2db      	uxtb	r3, r3
 8016468:	b29b      	uxth	r3, r3
 801646a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801646e:	f043 0302 	orr.w	r3, r3, #2
 8016472:	b29b      	uxth	r3, r3
 8016474:	4618      	mov	r0, r3
 8016476:	f7f5 fdb9 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801647a:	e19f      	b.n	80167bc <rfalSetBitRate+0x5a0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97))
 801647c:	4b10      	ldr	r3, [pc, #64]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801647e:	78db      	ldrb	r3, [r3, #3]
 8016480:	2bec      	cmp	r3, #236	; 0xec
 8016482:	d003      	beq.n	801648c <rfalSetBitRate+0x270>
 8016484:	4b0e      	ldr	r3, [pc, #56]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016486:	78db      	ldrb	r3, [r3, #3]
 8016488:	2beb      	cmp	r3, #235	; 0xeb
 801648a:	d107      	bne.n	801649c <rfalSetBitRate+0x280>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 801648c:	4b0c      	ldr	r3, [pc, #48]	; (80164c0 <rfalSetBitRate+0x2a4>)
 801648e:	789b      	ldrb	r3, [r3, #2]
 8016490:	2bed      	cmp	r3, #237	; 0xed
 8016492:	d005      	beq.n	80164a0 <rfalSetBitRate+0x284>
 8016494:	4b0a      	ldr	r3, [pc, #40]	; (80164c0 <rfalSetBitRate+0x2a4>)
 8016496:	789b      	ldrb	r3, [r3, #2]
 8016498:	2bec      	cmp	r3, #236	; 0xec
 801649a:	d001      	beq.n	80164a0 <rfalSetBitRate+0x284>
                {
                    return ERR_PARAM;
 801649c:	2307      	movs	r3, #7
 801649e:	e18e      	b.n	80167be <rfalSetBitRate+0x5a2>
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 80164a0:	4b07      	ldr	r3, [pc, #28]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80164a2:	789b      	ldrb	r3, [r3, #2]
 80164a4:	2bed      	cmp	r3, #237	; 0xed
 80164a6:	bf0c      	ite	eq
 80164a8:	2301      	moveq	r3, #1
 80164aa:	2300      	movne	r3, #0
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 80164b0:	4b03      	ldr	r3, [pc, #12]	; (80164c0 <rfalSetBitRate+0x2a4>)
 80164b2:	78db      	ldrb	r3, [r3, #3]
 80164b4:	2beb      	cmp	r3, #235	; 0xeb
 80164b6:	d105      	bne.n	80164c4 <rfalSetBitRate+0x2a8>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 80164b8:	2301      	movs	r3, #1
 80164ba:	613b      	str	r3, [r7, #16]
                            break;
 80164bc:	e005      	b.n	80164ca <rfalSetBitRate+0x2ae>
 80164be:	bf00      	nop
 80164c0:	20003618 	.word	0x20003618
                        default:
                            config.speedMode = 0;
 80164c4:	2300      	movs	r3, #0
 80164c6:	613b      	str	r3, [r7, #16]
                            break;
 80164c8:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 80164ca:	f107 0218 	add.w	r2, r7, #24
 80164ce:	f107 030c 	add.w	r3, r7, #12
 80164d2:	4611      	mov	r1, r2
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f5 feef 	bl	800c2b8 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 80164da:	69bb      	ldr	r3, [r7, #24]
 80164dc:	785b      	ldrb	r3, [r3, #1]
 80164de:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 80164e0:	69bb      	ldr	r3, [r7, #24]
 80164e2:	789b      	ldrb	r3, [r3, #2]
 80164e4:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 80164e6:	69bb      	ldr	r3, [r7, #24]
 80164e8:	78db      	ldrb	r3, [r3, #3]
 80164ea:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 80164ec:	69bb      	ldr	r3, [r7, #24]
 80164ee:	781b      	ldrb	r3, [r3, #0]
 80164f0:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 80164f2:	f107 0314 	add.w	r3, r7, #20
 80164f6:	4618      	mov	r0, r3
 80164f8:	f004 fd2c 	bl	801af54 <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80164fc:	2008      	movs	r0, #8
 80164fe:	f7f5 fd75 	bl	800bfec <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8016502:	4b8f      	ldr	r3, [pc, #572]	; (8016740 <rfalSetBitRate+0x524>)
 8016504:	789b      	ldrb	r3, [r3, #2]
 8016506:	2bea      	cmp	r3, #234	; 0xea
 8016508:	d90c      	bls.n	8016524 <rfalSetBitRate+0x308>
 801650a:	4b8d      	ldr	r3, [pc, #564]	; (8016740 <rfalSetBitRate+0x524>)
 801650c:	789b      	ldrb	r3, [r3, #2]
 801650e:	b29b      	uxth	r3, r3
 8016510:	011b      	lsls	r3, r3, #4
 8016512:	b29b      	uxth	r3, r3
 8016514:	b2db      	uxtb	r3, r3
 8016516:	b29b      	uxth	r3, r3
 8016518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801651c:	f043 0301 	orr.w	r3, r3, #1
 8016520:	b29b      	uxth	r3, r3
 8016522:	e00d      	b.n	8016540 <rfalSetBitRate+0x324>
 8016524:	4b86      	ldr	r3, [pc, #536]	; (8016740 <rfalSetBitRate+0x524>)
 8016526:	789b      	ldrb	r3, [r3, #2]
 8016528:	b29b      	uxth	r3, r3
 801652a:	3301      	adds	r3, #1
 801652c:	b29b      	uxth	r3, r3
 801652e:	011b      	lsls	r3, r3, #4
 8016530:	b29b      	uxth	r3, r3
 8016532:	b2db      	uxtb	r3, r3
 8016534:	b29b      	uxth	r3, r3
 8016536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801653a:	f043 0301 	orr.w	r3, r3, #1
 801653e:	b29b      	uxth	r3, r3
 8016540:	4618      	mov	r0, r3
 8016542:	f7f5 fd53 	bl	800bfec <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8016546:	4b7e      	ldr	r3, [pc, #504]	; (8016740 <rfalSetBitRate+0x524>)
 8016548:	78db      	ldrb	r3, [r3, #3]
 801654a:	2bea      	cmp	r3, #234	; 0xea
 801654c:	d90c      	bls.n	8016568 <rfalSetBitRate+0x34c>
 801654e:	4b7c      	ldr	r3, [pc, #496]	; (8016740 <rfalSetBitRate+0x524>)
 8016550:	78db      	ldrb	r3, [r3, #3]
 8016552:	b29b      	uxth	r3, r3
 8016554:	011b      	lsls	r3, r3, #4
 8016556:	b29b      	uxth	r3, r3
 8016558:	b2db      	uxtb	r3, r3
 801655a:	b29b      	uxth	r3, r3
 801655c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016560:	f043 0302 	orr.w	r3, r3, #2
 8016564:	b29b      	uxth	r3, r3
 8016566:	e00d      	b.n	8016584 <rfalSetBitRate+0x368>
 8016568:	4b75      	ldr	r3, [pc, #468]	; (8016740 <rfalSetBitRate+0x524>)
 801656a:	78db      	ldrb	r3, [r3, #3]
 801656c:	b29b      	uxth	r3, r3
 801656e:	3301      	adds	r3, #1
 8016570:	b29b      	uxth	r3, r3
 8016572:	011b      	lsls	r3, r3, #4
 8016574:	b29b      	uxth	r3, r3
 8016576:	b2db      	uxtb	r3, r3
 8016578:	b29b      	uxth	r3, r3
 801657a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801657e:	f043 0302 	orr.w	r3, r3, #2
 8016582:	b29b      	uxth	r3, r3
 8016584:	4618      	mov	r0, r3
 8016586:	f7f5 fd31 	bl	800bfec <rfalSetAnalogConfig>
                break;
 801658a:	e117      	b.n	80167bc <rfalSetBitRate+0x5a0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 801658c:	2008      	movs	r0, #8
 801658e:	f7f5 fd2d 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8016592:	4b6b      	ldr	r3, [pc, #428]	; (8016740 <rfalSetBitRate+0x524>)
 8016594:	789b      	ldrb	r3, [r3, #2]
 8016596:	2bea      	cmp	r3, #234	; 0xea
 8016598:	d90c      	bls.n	80165b4 <rfalSetBitRate+0x398>
 801659a:	4b69      	ldr	r3, [pc, #420]	; (8016740 <rfalSetBitRate+0x524>)
 801659c:	789b      	ldrb	r3, [r3, #2]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	011b      	lsls	r3, r3, #4
 80165a2:	b29b      	uxth	r3, r3
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80165ac:	f043 0301 	orr.w	r3, r3, #1
 80165b0:	b29b      	uxth	r3, r3
 80165b2:	e00d      	b.n	80165d0 <rfalSetBitRate+0x3b4>
 80165b4:	4b62      	ldr	r3, [pc, #392]	; (8016740 <rfalSetBitRate+0x524>)
 80165b6:	789b      	ldrb	r3, [r3, #2]
 80165b8:	b29b      	uxth	r3, r3
 80165ba:	3301      	adds	r3, #1
 80165bc:	b29b      	uxth	r3, r3
 80165be:	011b      	lsls	r3, r3, #4
 80165c0:	b29b      	uxth	r3, r3
 80165c2:	b2db      	uxtb	r3, r3
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80165ca:	f043 0301 	orr.w	r3, r3, #1
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7f5 fd0b 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80165d6:	4b5a      	ldr	r3, [pc, #360]	; (8016740 <rfalSetBitRate+0x524>)
 80165d8:	78db      	ldrb	r3, [r3, #3]
 80165da:	2bea      	cmp	r3, #234	; 0xea
 80165dc:	d90c      	bls.n	80165f8 <rfalSetBitRate+0x3dc>
 80165de:	4b58      	ldr	r3, [pc, #352]	; (8016740 <rfalSetBitRate+0x524>)
 80165e0:	78db      	ldrb	r3, [r3, #3]
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	011b      	lsls	r3, r3, #4
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	b29b      	uxth	r3, r3
 80165ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80165f0:	f043 0302 	orr.w	r3, r3, #2
 80165f4:	b29b      	uxth	r3, r3
 80165f6:	e00d      	b.n	8016614 <rfalSetBitRate+0x3f8>
 80165f8:	4b51      	ldr	r3, [pc, #324]	; (8016740 <rfalSetBitRate+0x524>)
 80165fa:	78db      	ldrb	r3, [r3, #3]
 80165fc:	b29b      	uxth	r3, r3
 80165fe:	3301      	adds	r3, #1
 8016600:	b29b      	uxth	r3, r3
 8016602:	011b      	lsls	r3, r3, #4
 8016604:	b29b      	uxth	r3, r3
 8016606:	b2db      	uxtb	r3, r3
 8016608:	b29b      	uxth	r3, r3
 801660a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801660e:	f043 0302 	orr.w	r3, r3, #2
 8016612:	b29b      	uxth	r3, r3
 8016614:	4618      	mov	r0, r3
 8016616:	f7f5 fce9 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801661a:	e0cf      	b.n	80167bc <rfalSetBitRate+0x5a0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 801661c:	2009      	movs	r0, #9
 801661e:	f7f5 fce5 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8016622:	4b47      	ldr	r3, [pc, #284]	; (8016740 <rfalSetBitRate+0x524>)
 8016624:	789b      	ldrb	r3, [r3, #2]
 8016626:	2bea      	cmp	r3, #234	; 0xea
 8016628:	d90a      	bls.n	8016640 <rfalSetBitRate+0x424>
 801662a:	4b45      	ldr	r3, [pc, #276]	; (8016740 <rfalSetBitRate+0x524>)
 801662c:	789b      	ldrb	r3, [r3, #2]
 801662e:	b29b      	uxth	r3, r3
 8016630:	011b      	lsls	r3, r3, #4
 8016632:	b29b      	uxth	r3, r3
 8016634:	b2db      	uxtb	r3, r3
 8016636:	b29a      	uxth	r2, r3
 8016638:	4b42      	ldr	r3, [pc, #264]	; (8016744 <rfalSetBitRate+0x528>)
 801663a:	4313      	orrs	r3, r2
 801663c:	b29b      	uxth	r3, r3
 801663e:	e00b      	b.n	8016658 <rfalSetBitRate+0x43c>
 8016640:	4b3f      	ldr	r3, [pc, #252]	; (8016740 <rfalSetBitRate+0x524>)
 8016642:	789b      	ldrb	r3, [r3, #2]
 8016644:	b29b      	uxth	r3, r3
 8016646:	3301      	adds	r3, #1
 8016648:	b29b      	uxth	r3, r3
 801664a:	011b      	lsls	r3, r3, #4
 801664c:	b29b      	uxth	r3, r3
 801664e:	b2db      	uxtb	r3, r3
 8016650:	b29a      	uxth	r2, r3
 8016652:	4b3c      	ldr	r3, [pc, #240]	; (8016744 <rfalSetBitRate+0x528>)
 8016654:	4313      	orrs	r3, r2
 8016656:	b29b      	uxth	r3, r3
 8016658:	4618      	mov	r0, r3
 801665a:	f7f5 fcc7 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 801665e:	4b38      	ldr	r3, [pc, #224]	; (8016740 <rfalSetBitRate+0x524>)
 8016660:	78db      	ldrb	r3, [r3, #3]
 8016662:	2bea      	cmp	r3, #234	; 0xea
 8016664:	d90a      	bls.n	801667c <rfalSetBitRate+0x460>
 8016666:	4b36      	ldr	r3, [pc, #216]	; (8016740 <rfalSetBitRate+0x524>)
 8016668:	78db      	ldrb	r3, [r3, #3]
 801666a:	b29b      	uxth	r3, r3
 801666c:	011b      	lsls	r3, r3, #4
 801666e:	b29b      	uxth	r3, r3
 8016670:	b2db      	uxtb	r3, r3
 8016672:	b29a      	uxth	r2, r3
 8016674:	4b34      	ldr	r3, [pc, #208]	; (8016748 <rfalSetBitRate+0x52c>)
 8016676:	4313      	orrs	r3, r2
 8016678:	b29b      	uxth	r3, r3
 801667a:	e00b      	b.n	8016694 <rfalSetBitRate+0x478>
 801667c:	4b30      	ldr	r3, [pc, #192]	; (8016740 <rfalSetBitRate+0x524>)
 801667e:	78db      	ldrb	r3, [r3, #3]
 8016680:	b29b      	uxth	r3, r3
 8016682:	3301      	adds	r3, #1
 8016684:	b29b      	uxth	r3, r3
 8016686:	011b      	lsls	r3, r3, #4
 8016688:	b29b      	uxth	r3, r3
 801668a:	b2db      	uxtb	r3, r3
 801668c:	b29a      	uxth	r2, r3
 801668e:	4b2e      	ldr	r3, [pc, #184]	; (8016748 <rfalSetBitRate+0x52c>)
 8016690:	4313      	orrs	r3, r2
 8016692:	b29b      	uxth	r3, r3
 8016694:	4618      	mov	r0, r3
 8016696:	f7f5 fca9 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801669a:	e08f      	b.n	80167bc <rfalSetBitRate+0x5a0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 801669c:	2009      	movs	r0, #9
 801669e:	f7f5 fca5 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80166a2:	4b27      	ldr	r3, [pc, #156]	; (8016740 <rfalSetBitRate+0x524>)
 80166a4:	789b      	ldrb	r3, [r3, #2]
 80166a6:	2bea      	cmp	r3, #234	; 0xea
 80166a8:	d90a      	bls.n	80166c0 <rfalSetBitRate+0x4a4>
 80166aa:	4b25      	ldr	r3, [pc, #148]	; (8016740 <rfalSetBitRate+0x524>)
 80166ac:	789b      	ldrb	r3, [r3, #2]
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	011b      	lsls	r3, r3, #4
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	4b24      	ldr	r3, [pc, #144]	; (801674c <rfalSetBitRate+0x530>)
 80166ba:	4313      	orrs	r3, r2
 80166bc:	b29b      	uxth	r3, r3
 80166be:	e00b      	b.n	80166d8 <rfalSetBitRate+0x4bc>
 80166c0:	4b1f      	ldr	r3, [pc, #124]	; (8016740 <rfalSetBitRate+0x524>)
 80166c2:	789b      	ldrb	r3, [r3, #2]
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	3301      	adds	r3, #1
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	011b      	lsls	r3, r3, #4
 80166cc:	b29b      	uxth	r3, r3
 80166ce:	b2db      	uxtb	r3, r3
 80166d0:	b29a      	uxth	r2, r3
 80166d2:	4b1e      	ldr	r3, [pc, #120]	; (801674c <rfalSetBitRate+0x530>)
 80166d4:	4313      	orrs	r3, r2
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	4618      	mov	r0, r3
 80166da:	f7f5 fc87 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80166de:	4b18      	ldr	r3, [pc, #96]	; (8016740 <rfalSetBitRate+0x524>)
 80166e0:	78db      	ldrb	r3, [r3, #3]
 80166e2:	2bea      	cmp	r3, #234	; 0xea
 80166e4:	d90a      	bls.n	80166fc <rfalSetBitRate+0x4e0>
 80166e6:	4b16      	ldr	r3, [pc, #88]	; (8016740 <rfalSetBitRate+0x524>)
 80166e8:	78db      	ldrb	r3, [r3, #3]
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	011b      	lsls	r3, r3, #4
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	b2db      	uxtb	r3, r3
 80166f2:	b29a      	uxth	r2, r3
 80166f4:	4b16      	ldr	r3, [pc, #88]	; (8016750 <rfalSetBitRate+0x534>)
 80166f6:	4313      	orrs	r3, r2
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	e00b      	b.n	8016714 <rfalSetBitRate+0x4f8>
 80166fc:	4b10      	ldr	r3, [pc, #64]	; (8016740 <rfalSetBitRate+0x524>)
 80166fe:	78db      	ldrb	r3, [r3, #3]
 8016700:	b29b      	uxth	r3, r3
 8016702:	3301      	adds	r3, #1
 8016704:	b29b      	uxth	r3, r3
 8016706:	011b      	lsls	r3, r3, #4
 8016708:	b29b      	uxth	r3, r3
 801670a:	b2db      	uxtb	r3, r3
 801670c:	b29a      	uxth	r2, r3
 801670e:	4b10      	ldr	r3, [pc, #64]	; (8016750 <rfalSetBitRate+0x534>)
 8016710:	4313      	orrs	r3, r2
 8016712:	b29b      	uxth	r3, r3
 8016714:	4618      	mov	r0, r3
 8016716:	f7f5 fc69 	bl	800bfec <rfalSetAnalogConfig>
            break;
 801671a:	e04f      	b.n	80167bc <rfalSetBitRate+0x5a0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 801671c:	2009      	movs	r0, #9
 801671e:	f7f5 fc65 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8016722:	4b07      	ldr	r3, [pc, #28]	; (8016740 <rfalSetBitRate+0x524>)
 8016724:	789b      	ldrb	r3, [r3, #2]
 8016726:	2bea      	cmp	r3, #234	; 0xea
 8016728:	d916      	bls.n	8016758 <rfalSetBitRate+0x53c>
 801672a:	4b05      	ldr	r3, [pc, #20]	; (8016740 <rfalSetBitRate+0x524>)
 801672c:	789b      	ldrb	r3, [r3, #2]
 801672e:	b29b      	uxth	r3, r3
 8016730:	011b      	lsls	r3, r3, #4
 8016732:	b29b      	uxth	r3, r3
 8016734:	b2db      	uxtb	r3, r3
 8016736:	b29a      	uxth	r2, r3
 8016738:	4b06      	ldr	r3, [pc, #24]	; (8016754 <rfalSetBitRate+0x538>)
 801673a:	4313      	orrs	r3, r2
 801673c:	b29b      	uxth	r3, r3
 801673e:	e017      	b.n	8016770 <rfalSetBitRate+0x554>
 8016740:	20003618 	.word	0x20003618
 8016744:	ffff8801 	.word	0xffff8801
 8016748:	ffff8802 	.word	0xffff8802
 801674c:	ffff8101 	.word	0xffff8101
 8016750:	ffff8102 	.word	0xffff8102
 8016754:	ffff8401 	.word	0xffff8401
 8016758:	4b1b      	ldr	r3, [pc, #108]	; (80167c8 <rfalSetBitRate+0x5ac>)
 801675a:	789b      	ldrb	r3, [r3, #2]
 801675c:	b29b      	uxth	r3, r3
 801675e:	3301      	adds	r3, #1
 8016760:	b29b      	uxth	r3, r3
 8016762:	011b      	lsls	r3, r3, #4
 8016764:	b29b      	uxth	r3, r3
 8016766:	b2db      	uxtb	r3, r3
 8016768:	b29a      	uxth	r2, r3
 801676a:	4b18      	ldr	r3, [pc, #96]	; (80167cc <rfalSetBitRate+0x5b0>)
 801676c:	4313      	orrs	r3, r2
 801676e:	b29b      	uxth	r3, r3
 8016770:	4618      	mov	r0, r3
 8016772:	f7f5 fc3b 	bl	800bfec <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8016776:	4b14      	ldr	r3, [pc, #80]	; (80167c8 <rfalSetBitRate+0x5ac>)
 8016778:	78db      	ldrb	r3, [r3, #3]
 801677a:	2bea      	cmp	r3, #234	; 0xea
 801677c:	d90a      	bls.n	8016794 <rfalSetBitRate+0x578>
 801677e:	4b12      	ldr	r3, [pc, #72]	; (80167c8 <rfalSetBitRate+0x5ac>)
 8016780:	78db      	ldrb	r3, [r3, #3]
 8016782:	b29b      	uxth	r3, r3
 8016784:	011b      	lsls	r3, r3, #4
 8016786:	b29b      	uxth	r3, r3
 8016788:	b2db      	uxtb	r3, r3
 801678a:	b29a      	uxth	r2, r3
 801678c:	4b10      	ldr	r3, [pc, #64]	; (80167d0 <rfalSetBitRate+0x5b4>)
 801678e:	4313      	orrs	r3, r2
 8016790:	b29b      	uxth	r3, r3
 8016792:	e00b      	b.n	80167ac <rfalSetBitRate+0x590>
 8016794:	4b0c      	ldr	r3, [pc, #48]	; (80167c8 <rfalSetBitRate+0x5ac>)
 8016796:	78db      	ldrb	r3, [r3, #3]
 8016798:	b29b      	uxth	r3, r3
 801679a:	3301      	adds	r3, #1
 801679c:	b29b      	uxth	r3, r3
 801679e:	011b      	lsls	r3, r3, #4
 80167a0:	b29b      	uxth	r3, r3
 80167a2:	b2db      	uxtb	r3, r3
 80167a4:	b29a      	uxth	r2, r3
 80167a6:	4b0a      	ldr	r3, [pc, #40]	; (80167d0 <rfalSetBitRate+0x5b4>)
 80167a8:	4313      	orrs	r3, r2
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7f5 fc1d 	bl	800bfec <rfalSetAnalogConfig>
            break;
 80167b2:	e003      	b.n	80167bc <rfalSetBitRate+0x5a0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 80167b4:	2321      	movs	r3, #33	; 0x21
 80167b6:	e002      	b.n	80167be <rfalSetBitRate+0x5a2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 80167b8:	230f      	movs	r3, #15
 80167ba:	e000      	b.n	80167be <rfalSetBitRate+0x5a2>
    }
    
    return ERR_NONE;
 80167bc:	2300      	movs	r3, #0
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3720      	adds	r7, #32
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	20003618 	.word	0x20003618
 80167cc:	ffff8401 	.word	0xffff8401
 80167d0:	ffff8402 	.word	0xffff8402

080167d4 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 80167d4:	b480      	push	{r7}
 80167d6:	b083      	sub	sp, #12
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 80167de:	4b0f      	ldr	r3, [pc, #60]	; (801681c <rfalGetBitRate+0x48>)
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d003      	beq.n	80167ee <rfalGetBitRate+0x1a>
 80167e6:	4b0d      	ldr	r3, [pc, #52]	; (801681c <rfalGetBitRate+0x48>)
 80167e8:	785b      	ldrb	r3, [r3, #1]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d101      	bne.n	80167f2 <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 80167ee:	2321      	movs	r3, #33	; 0x21
 80167f0:	e00e      	b.n	8016810 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d003      	beq.n	8016800 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 80167f8:	4b08      	ldr	r3, [pc, #32]	; (801681c <rfalGetBitRate+0x48>)
 80167fa:	789a      	ldrb	r2, [r3, #2]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d003      	beq.n	801680e <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 8016806:	4b05      	ldr	r3, [pc, #20]	; (801681c <rfalGetBitRate+0x48>)
 8016808:	78da      	ldrb	r2, [r3, #3]
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 801680e:	2300      	movs	r3, #0
}
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	bc80      	pop	{r7}
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop
 801681c:	20003618 	.word	0x20003618

08016820 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	4603      	mov	r3, r0
 8016828:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 801682a:	79fb      	ldrb	r3, [r7, #7]
 801682c:	2b01      	cmp	r3, #1
 801682e:	dc02      	bgt.n	8016836 <rfalSetErrorHandling+0x16>
 8016830:	2b00      	cmp	r3, #0
 8016832:	da03      	bge.n	801683c <rfalSetErrorHandling+0x1c>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8016834:	e00d      	b.n	8016852 <rfalSetErrorHandling+0x32>
    switch(eHandling)
 8016836:	2b02      	cmp	r3, #2
 8016838:	d005      	beq.n	8016846 <rfalSetErrorHandling+0x26>
            break;
 801683a:	e00a      	b.n	8016852 <rfalSetErrorHandling+0x32>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 801683c:	2180      	movs	r1, #128	; 0x80
 801683e:	2045      	movs	r0, #69	; 0x45
 8016840:	f004 fe4a 	bl	801b4d8 <st25r3916ClrRegisterBits>
            break;
 8016844:	e005      	b.n	8016852 <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 8016846:	2284      	movs	r2, #132	; 0x84
 8016848:	218f      	movs	r1, #143	; 0x8f
 801684a:	2045      	movs	r0, #69	; 0x45
 801684c:	f004 febf 	bl	801b5ce <st25r3916ModifyRegister>
            break;
 8016850:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 8016852:	4a03      	ldr	r2, [pc, #12]	; (8016860 <rfalSetErrorHandling+0x40>)
 8016854:	79fb      	ldrb	r3, [r7, #7]
 8016856:	71d3      	strb	r3, [r2, #7]
}
 8016858:	bf00      	nop
 801685a:	3708      	adds	r7, #8
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}
 8016860:	20003618 	.word	0x20003618

08016864 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	4a05      	ldr	r2, [pc, #20]	; (8016884 <rfalSetFDTPoll+0x20>)
 8016870:	4293      	cmp	r3, r2
 8016872:	bf28      	it	cs
 8016874:	4613      	movcs	r3, r2
 8016876:	4a04      	ldr	r2, [pc, #16]	; (8016888 <rfalSetFDTPoll+0x24>)
 8016878:	6113      	str	r3, [r2, #16]
}
 801687a:	bf00      	nop
 801687c:	370c      	adds	r7, #12
 801687e:	46bd      	mov	sp, r7
 8016880:	bc80      	pop	{r7}
 8016882:	4770      	bx	lr
 8016884:	0007fff8 	.word	0x0007fff8
 8016888:	20003618 	.word	0x20003618

0801688c <rfalGetFDTPoll>:


/*******************************************************************************/
uint32_t rfalGetFDTPoll( void )
{
 801688c:	b480      	push	{r7}
 801688e:	af00      	add	r7, sp, #0
    return gRFAL.timings.FDTPoll;
 8016890:	4b02      	ldr	r3, [pc, #8]	; (801689c <rfalGetFDTPoll+0x10>)
 8016892:	691b      	ldr	r3, [r3, #16]
}
 8016894:	4618      	mov	r0, r3
 8016896:	46bd      	mov	sp, r7
 8016898:	bc80      	pop	{r7}
 801689a:	4770      	bx	lr
 801689c:	20003618 	.word	0x20003618

080168a0 <rfalSetFDTListen>:


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 80168a0:	b480      	push	{r7}
 80168a2:	b083      	sub	sp, #12
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 80168ae:	bf28      	it	cs
 80168b0:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 80168b4:	4a03      	ldr	r2, [pc, #12]	; (80168c4 <rfalSetFDTListen+0x24>)
 80168b6:	60d3      	str	r3, [r2, #12]
}
 80168b8:	bf00      	nop
 80168ba:	370c      	adds	r7, #12
 80168bc:	46bd      	mov	sp, r7
 80168be:	bc80      	pop	{r7}
 80168c0:	4770      	bx	lr
 80168c2:	bf00      	nop
 80168c4:	20003618 	.word	0x20003618

080168c8 <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 80168c8:	b480      	push	{r7}
 80168ca:	b083      	sub	sp, #12
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	4a05      	ldr	r2, [pc, #20]	; (80168e8 <rfalSetGT+0x20>)
 80168d4:	4293      	cmp	r3, r2
 80168d6:	bf28      	it	cs
 80168d8:	4613      	movcs	r3, r2
 80168da:	4a04      	ldr	r2, [pc, #16]	; (80168ec <rfalSetGT+0x24>)
 80168dc:	6093      	str	r3, [r2, #8]
}
 80168de:	bf00      	nop
 80168e0:	370c      	adds	r7, #12
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bc80      	pop	{r7}
 80168e6:	4770      	bx	lr
 80168e8:	04d97480 	.word	0x04d97480
 80168ec:	20003618 	.word	0x20003618

080168f0 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 80168f4:	4b09      	ldr	r3, [pc, #36]	; (801691c <rfalIsGTExpired+0x2c>)
 80168f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d00c      	beq.n	8016916 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 80168fc:	4b07      	ldr	r3, [pc, #28]	; (801691c <rfalIsGTExpired+0x2c>)
 80168fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016900:	4618      	mov	r0, r3
 8016902:	f005 f987 	bl	801bc14 <timerIsExpired>
 8016906:	4603      	mov	r3, r0
 8016908:	f083 0301 	eor.w	r3, r3, #1
 801690c:	b2db      	uxtb	r3, r3
 801690e:	2b00      	cmp	r3, #0
 8016910:	d001      	beq.n	8016916 <rfalIsGTExpired+0x26>
        {
            return false;
 8016912:	2300      	movs	r3, #0
 8016914:	e000      	b.n	8016918 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 8016916:	2301      	movs	r3, #1
}
 8016918:	4618      	mov	r0, r3
 801691a:	bd80      	pop	{r7, pc}
 801691c:	20003618 	.word	0x20003618

08016920 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 8016926:	2280      	movs	r2, #128	; 0x80
 8016928:	2180      	movs	r1, #128	; 0x80
 801692a:	2002      	movs	r0, #2
 801692c:	f004 febc 	bl	801b6a8 <st25r3916CheckReg>
 8016930:	4603      	mov	r3, r0
 8016932:	f083 0301 	eor.w	r3, r3, #1
 8016936:	b2db      	uxtb	r3, r3
 8016938:	2b00      	cmp	r3, #0
 801693a:	d103      	bne.n	8016944 <rfalFieldOnAndStartGT+0x24>
 801693c:	4b2f      	ldr	r3, [pc, #188]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d101      	bne.n	8016948 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 8016944:	2321      	movs	r3, #33	; 0x21
 8016946:	e054      	b.n	80169f2 <rfalFieldOnAndStartGT+0xd2>
    }
    
    ret = ERR_NONE;
 8016948:	2300      	movs	r3, #0
 801694a:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 801694c:	2002      	movs	r0, #2
 801694e:	f7f5 fb4d 	bl	800bfec <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 8016952:	2208      	movs	r2, #8
 8016954:	2108      	movs	r1, #8
 8016956:	2002      	movs	r0, #2
 8016958:	f004 fea6 	bl	801b6a8 <st25r3916CheckReg>
 801695c:	4603      	mov	r3, r0
 801695e:	f083 0301 	eor.w	r3, r3, #1
 8016962:	b2db      	uxtb	r3, r3
 8016964:	2b00      	cmp	r3, #0
 8016966:	d106      	bne.n	8016976 <rfalFieldOnAndStartGT+0x56>
 8016968:	4b24      	ldr	r3, [pc, #144]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 801696a:	791b      	ldrb	r3, [r3, #4]
 801696c:	f083 0301 	eor.w	r3, r3, #1
 8016970:	b2db      	uxtb	r3, r3
 8016972:	2b00      	cmp	r3, #0
 8016974:	d026      	beq.n	80169c4 <rfalFieldOnAndStartGT+0xa4>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 8016976:	2100      	movs	r1, #0
 8016978:	2055      	movs	r0, #85	; 0x55
 801697a:	f004 fc5d 	bl	801b238 <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, gRFAL.timings.nTRFW );
 801697e:	4b1f      	ldr	r3, [pc, #124]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 8016980:	7d1b      	ldrb	r3, [r3, #20]
 8016982:	22ff      	movs	r2, #255	; 0xff
 8016984:	21ff      	movs	r1, #255	; 0xff
 8016986:	20c8      	movs	r0, #200	; 0xc8
 8016988:	f004 f996 	bl	801acb8 <st25r3916PerformCollisionAvoidance>
 801698c:	4603      	mov	r3, r0
 801698e:	80fb      	strh	r3, [r7, #6]
        
        /* n * TRFW timing shall vary  Activity 2.1  3.3.1.1 */
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8016990:	4b1a      	ldr	r3, [pc, #104]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 8016992:	7d1b      	ldrb	r3, [r3, #20]
 8016994:	3301      	adds	r3, #1
 8016996:	b2db      	uxtb	r3, r3
 8016998:	f003 0303 	and.w	r3, r3, #3
 801699c:	b2da      	uxtb	r2, r3
 801699e:	4b17      	ldr	r3, [pc, #92]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 80169a0:	751a      	strb	r2, [r3, #20]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 80169a2:	2208      	movs	r2, #8
 80169a4:	2108      	movs	r1, #8
 80169a6:	2002      	movs	r0, #2
 80169a8:	f004 fe7e 	bl	801b6a8 <st25r3916CheckReg>
 80169ac:	4603      	mov	r3, r0
 80169ae:	461a      	mov	r2, r3
 80169b0:	4b12      	ldr	r3, [pc, #72]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 80169b2:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 80169b4:	4b11      	ldr	r3, [pc, #68]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 80169b6:	791b      	ldrb	r3, [r3, #4]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d003      	beq.n	80169c4 <rfalFieldOnAndStartGT+0xa4>
        {
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 80169bc:	2148      	movs	r1, #72	; 0x48
 80169be:	2002      	movs	r0, #2
 80169c0:	f004 fdc1 	bl	801b546 <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 80169c4:	4b0d      	ldr	r3, [pc, #52]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 80169c6:	689b      	ldr	r3, [r3, #8]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d011      	beq.n	80169f0 <rfalFieldOnAndStartGT+0xd0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 80169cc:	4b0b      	ldr	r3, [pc, #44]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 80169ce:	689b      	ldr	r3, [r3, #8]
 80169d0:	f243 42f8 	movw	r2, #13560	; 0x34f8
 80169d4:	4293      	cmp	r3, r2
 80169d6:	bf38      	it	cc
 80169d8:	4613      	movcc	r3, r2
 80169da:	4a09      	ldr	r2, [pc, #36]	; (8016a00 <rfalFieldOnAndStartGT+0xe0>)
 80169dc:	fba2 2303 	umull	r2, r3, r2, r3
 80169e0:	0b1b      	lsrs	r3, r3, #12
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	4618      	mov	r0, r3
 80169e6:	f005 f907 	bl	801bbf8 <timerCalculateTimer>
 80169ea:	4603      	mov	r3, r0
 80169ec:	4a03      	ldr	r2, [pc, #12]	; (80169fc <rfalFieldOnAndStartGT+0xdc>)
 80169ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
    
    return ret;
 80169f0:	88fb      	ldrh	r3, [r7, #6]
}
 80169f2:	4618      	mov	r0, r3
 80169f4:	3708      	adds	r7, #8
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}
 80169fa:	bf00      	nop
 80169fc:	20003618 	.word	0x20003618
 8016a00:	4d542005 	.word	0x4d542005

08016a04 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 8016a08:	4b09      	ldr	r3, [pc, #36]	; (8016a30 <rfalFieldOff+0x2c>)
 8016a0a:	7e1b      	ldrb	r3, [r3, #24]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d001      	beq.n	8016a14 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 8016a10:	f000 faa4 	bl	8016f5c <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 8016a14:	2148      	movs	r1, #72	; 0x48
 8016a16:	2002      	movs	r0, #2
 8016a18:	f004 fd5e 	bl	801b4d8 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 8016a1c:	2003      	movs	r0, #3
 8016a1e:	f7f5 fae5 	bl	800bfec <rfalSetAnalogConfig>
    gRFAL.field = false;
 8016a22:	4b03      	ldr	r3, [pc, #12]	; (8016a30 <rfalFieldOff+0x2c>)
 8016a24:	2200      	movs	r2, #0
 8016a26:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 8016a28:	2300      	movs	r3, #0
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	bd80      	pop	{r7, pc}
 8016a2e:	bf00      	nop
 8016a30:	20003618 	.word	0x20003618

08016a34 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 8016a34:	b5b0      	push	{r4, r5, r7, lr}
 8016a36:	b084      	sub	sp, #16
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d101      	bne.n	8016a46 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 8016a42:	2307      	movs	r3, #7
 8016a44:	e12e      	b.n	8016ca4 <rfalStartTransceive+0x270>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 8016a46:	4b99      	ldr	r3, [pc, #612]	; (8016cac <rfalStartTransceive+0x278>)
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	f240 8129 	bls.w	8016ca2 <rfalStartTransceive+0x26e>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 8016a50:	2208      	movs	r2, #8
 8016a52:	2108      	movs	r1, #8
 8016a54:	2002      	movs	r0, #2
 8016a56:	f004 fe27 	bl	801b6a8 <st25r3916CheckReg>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	f083 0301 	eor.w	r3, r3, #1
 8016a60:	b2db      	uxtb	r3, r3
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d011      	beq.n	8016a8a <rfalStartTransceive+0x56>
 8016a66:	4b91      	ldr	r3, [pc, #580]	; (8016cac <rfalStartTransceive+0x278>)
 8016a68:	785b      	ldrb	r3, [r3, #1]
 8016a6a:	2b0a      	cmp	r3, #10
 8016a6c:	d00d      	beq.n	8016a8a <rfalStartTransceive+0x56>
 8016a6e:	4b8f      	ldr	r3, [pc, #572]	; (8016cac <rfalStartTransceive+0x278>)
 8016a70:	785b      	ldrb	r3, [r3, #1]
 8016a72:	2b0b      	cmp	r3, #11
 8016a74:	d009      	beq.n	8016a8a <rfalStartTransceive+0x56>
 8016a76:	4b8d      	ldr	r3, [pc, #564]	; (8016cac <rfalStartTransceive+0x278>)
 8016a78:	785b      	ldrb	r3, [r3, #1]
 8016a7a:	2b0c      	cmp	r3, #12
 8016a7c:	d005      	beq.n	8016a8a <rfalStartTransceive+0x56>
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d001      	beq.n	8016a8a <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 8016a86:	2321      	movs	r3, #33	; 0x21
 8016a88:	e10c      	b.n	8016ca4 <rfalStartTransceive+0x270>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 8016a8a:	4b88      	ldr	r3, [pc, #544]	; (8016cac <rfalStartTransceive+0x278>)
 8016a8c:	687a      	ldr	r2, [r7, #4]
 8016a8e:	f103 041c 	add.w	r4, r3, #28
 8016a92:	4615      	mov	r5, r2
 8016a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8016aa0:	4b82      	ldr	r3, [pc, #520]	; (8016cac <rfalStartTransceive+0x278>)
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d04b      	beq.n	8016b40 <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 8016aa8:	2340      	movs	r3, #64	; 0x40
 8016aaa:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8016aac:	4b7f      	ldr	r3, [pc, #508]	; (8016cac <rfalStartTransceive+0x278>)
 8016aae:	785b      	ldrb	r3, [r3, #1]
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d102      	bne.n	8016aba <rfalStartTransceive+0x86>
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	33d4      	adds	r3, #212	; 0xd4
 8016ab8:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8016aba:	4b7c      	ldr	r3, [pc, #496]	; (8016cac <rfalStartTransceive+0x278>)
 8016abc:	785b      	ldrb	r3, [r3, #1]
 8016abe:	2b02      	cmp	r3, #2
 8016ac0:	d102      	bne.n	8016ac8 <rfalStartTransceive+0x94>
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	33d4      	adds	r3, #212	; 0xd4
 8016ac6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 8016ac8:	4b78      	ldr	r3, [pc, #480]	; (8016cac <rfalStartTransceive+0x278>)
 8016aca:	785b      	ldrb	r3, [r3, #1]
 8016acc:	2b03      	cmp	r3, #3
 8016ace:	d103      	bne.n	8016ad8 <rfalStartTransceive+0xa4>
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016ad6:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 8016ad8:	4b74      	ldr	r3, [pc, #464]	; (8016cac <rfalStartTransceive+0x278>)
 8016ada:	785b      	ldrb	r3, [r3, #1]
 8016adc:	2b07      	cmp	r3, #7
 8016ade:	d102      	bne.n	8016ae6 <rfalStartTransceive+0xb2>
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	3340      	adds	r3, #64	; 0x40
 8016ae4:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 8016ae6:	2108      	movs	r1, #8
 8016ae8:	2012      	movs	r0, #18
 8016aea:	f004 fcf5 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 8016aee:	2200      	movs	r2, #0
 8016af0:	2104      	movs	r1, #4
 8016af2:	200a      	movs	r0, #10
 8016af4:	f004 fdd8 	bl	801b6a8 <st25r3916CheckReg>
 8016af8:	4603      	mov	r3, r0
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d00f      	beq.n	8016b1e <rfalStartTransceive+0xea>
 8016afe:	4b6b      	ldr	r3, [pc, #428]	; (8016cac <rfalStartTransceive+0x278>)
 8016b00:	785b      	ldrb	r3, [r3, #1]
 8016b02:	2b03      	cmp	r3, #3
 8016b04:	d10b      	bne.n	8016b1e <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	3380      	adds	r3, #128	; 0x80
 8016b0a:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 8016b0c:	2108      	movs	r1, #8
 8016b0e:	204c      	movs	r0, #76	; 0x4c
 8016b10:	f004 fd19 	bl	801b546 <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 8016b14:	2214      	movs	r2, #20
 8016b16:	211f      	movs	r1, #31
 8016b18:	2046      	movs	r0, #70	; 0x46
 8016b1a:	f004 fd41 	bl	801b5a0 <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 8016b1e:	4b63      	ldr	r3, [pc, #396]	; (8016cac <rfalStartTransceive+0x278>)
 8016b20:	68db      	ldr	r3, [r3, #12]
 8016b22:	68fa      	ldr	r2, [r7, #12]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d806      	bhi.n	8016b36 <rfalStartTransceive+0x102>
 8016b28:	4b60      	ldr	r3, [pc, #384]	; (8016cac <rfalStartTransceive+0x278>)
 8016b2a:	68da      	ldr	r2, [r3, #12]
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	099b      	lsrs	r3, r3, #6
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	e000      	b.n	8016b38 <rfalStartTransceive+0x104>
 8016b36:	2304      	movs	r3, #4
 8016b38:	4619      	mov	r1, r3
 8016b3a:	200f      	movs	r0, #15
 8016b3c:	f004 fb7c 	bl	801b238 <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8016b40:	4b5a      	ldr	r3, [pc, #360]	; (8016cac <rfalStartTransceive+0x278>)
 8016b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b48:	d04a      	beq.n	8016be0 <rfalStartTransceive+0x1ac>
 8016b4a:	4b58      	ldr	r3, [pc, #352]	; (8016cac <rfalStartTransceive+0x278>)
 8016b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d046      	beq.n	8016be0 <rfalStartTransceive+0x1ac>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 8016b52:	4b56      	ldr	r3, [pc, #344]	; (8016cac <rfalStartTransceive+0x278>)
 8016b54:	68da      	ldr	r2, [r3, #12]
 8016b56:	4b55      	ldr	r3, [pc, #340]	; (8016cac <rfalStartTransceive+0x278>)
 8016b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d301      	bcc.n	8016b62 <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 8016b5e:	2307      	movs	r3, #7
 8016b60:	e0a0      	b.n	8016ca4 <rfalStartTransceive+0x270>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 8016b62:	2340      	movs	r3, #64	; 0x40
 8016b64:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8016b66:	4b51      	ldr	r3, [pc, #324]	; (8016cac <rfalStartTransceive+0x278>)
 8016b68:	785b      	ldrb	r3, [r3, #1]
 8016b6a:	2b01      	cmp	r3, #1
 8016b6c:	d103      	bne.n	8016b76 <rfalStartTransceive+0x142>
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8016b74:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8016b76:	4b4d      	ldr	r3, [pc, #308]	; (8016cac <rfalStartTransceive+0x278>)
 8016b78:	785b      	ldrb	r3, [r3, #1]
 8016b7a:	2b02      	cmp	r3, #2
 8016b7c:	d103      	bne.n	8016b86 <rfalStartTransceive+0x152>
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8016b84:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 8016b86:	4b49      	ldr	r3, [pc, #292]	; (8016cac <rfalStartTransceive+0x278>)
 8016b88:	785b      	ldrb	r3, [r3, #1]
 8016b8a:	2b03      	cmp	r3, #3
 8016b8c:	d103      	bne.n	8016b96 <rfalStartTransceive+0x162>
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b94:	60fb      	str	r3, [r7, #12]
            if( (gRFAL.mode == RFAL_MODE_POLL_NFCF) || (gRFAL.mode == RFAL_MODE_POLL_ACTIVE_P2P) )
 8016b96:	4b45      	ldr	r3, [pc, #276]	; (8016cac <rfalStartTransceive+0x278>)
 8016b98:	785b      	ldrb	r3, [r3, #1]
 8016b9a:	2b06      	cmp	r3, #6
 8016b9c:	d003      	beq.n	8016ba6 <rfalStartTransceive+0x172>
 8016b9e:	4b43      	ldr	r3, [pc, #268]	; (8016cac <rfalStartTransceive+0x278>)
 8016ba0:	785b      	ldrb	r3, [r3, #1]
 8016ba2:	2b09      	cmp	r3, #9
 8016ba4:	d10b      	bne.n	8016bbe <rfalStartTransceive+0x18a>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 8016ba6:	4b41      	ldr	r3, [pc, #260]	; (8016cac <rfalStartTransceive+0x278>)
 8016ba8:	789b      	ldrb	r3, [r3, #2]
 8016baa:	2b01      	cmp	r3, #1
 8016bac:	d102      	bne.n	8016bb4 <rfalStartTransceive+0x180>
 8016bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016bb2:	e001      	b.n	8016bb8 <rfalStartTransceive+0x184>
 8016bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016bb8:	68fa      	ldr	r2, [r7, #12]
 8016bba:	4413      	add	r3, r2
 8016bbc:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 8016bbe:	4b3b      	ldr	r3, [pc, #236]	; (8016cac <rfalStartTransceive+0x278>)
 8016bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	4413      	add	r3, r2
 8016bc6:	4a3a      	ldr	r2, [pc, #232]	; (8016cb0 <rfalStartTransceive+0x27c>)
 8016bc8:	4293      	cmp	r3, r2
 8016bca:	bf28      	it	cs
 8016bcc:	4613      	movcs	r3, r2
 8016bce:	4a37      	ldr	r2, [pc, #220]	; (8016cac <rfalStartTransceive+0x278>)
 8016bd0:	6353      	str	r3, [r2, #52]	; 0x34
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 8016bd2:	4b36      	ldr	r3, [pc, #216]	; (8016cac <rfalStartTransceive+0x278>)
 8016bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bd6:	099b      	lsrs	r3, r3, #6
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f004 f921 	bl	801ae20 <st25r3916SetNoResponseTime>
 8016bde:	e002      	b.n	8016be6 <rfalStartTransceive+0x1b2>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 8016be0:	2000      	movs	r0, #0
 8016be2:	f004 f91d 	bl	801ae20 <st25r3916SetNoResponseTime>
        }
        
        
        gRFAL.state       = RFAL_STATE_TXRX;
 8016be6:	4b31      	ldr	r3, [pc, #196]	; (8016cac <rfalStartTransceive+0x278>)
 8016be8:	2203      	movs	r2, #3
 8016bea:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 8016bec:	4b2f      	ldr	r3, [pc, #188]	; (8016cac <rfalStartTransceive+0x278>)
 8016bee:	220b      	movs	r2, #11
 8016bf0:	761a      	strb	r2, [r3, #24]
        gRFAL.TxRx.status = ERR_BUSY;
 8016bf2:	4b2e      	ldr	r3, [pc, #184]	; (8016cac <rfalStartTransceive+0x278>)
 8016bf4:	2202      	movs	r2, #2
 8016bf6:	835a      	strh	r2, [r3, #26]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8016bf8:	4b2c      	ldr	r3, [pc, #176]	; (8016cac <rfalStartTransceive+0x278>)
 8016bfa:	785b      	ldrb	r3, [r3, #1]
 8016bfc:	2b07      	cmp	r3, #7
 8016bfe:	d003      	beq.n	8016c08 <rfalStartTransceive+0x1d4>
 8016c00:	4b2a      	ldr	r3, [pc, #168]	; (8016cac <rfalStartTransceive+0x278>)
 8016c02:	785b      	ldrb	r3, [r3, #1]
 8016c04:	2b08      	cmp	r3, #8
 8016c06:	d128      	bne.n	8016c5a <rfalStartTransceive+0x226>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 8016c08:	4a28      	ldr	r2, [pc, #160]	; (8016cac <rfalStartTransceive+0x278>)
 8016c0a:	4b28      	ldr	r3, [pc, #160]	; (8016cac <rfalStartTransceive+0x278>)
 8016c0c:	f502 7479 	add.w	r4, r2, #996	; 0x3e4
 8016c10:	f103 051c 	add.w	r5, r3, #28
 8016c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016c1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8016c20:	4b22      	ldr	r3, [pc, #136]	; (8016cac <rfalStartTransceive+0x278>)
 8016c22:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d001      	beq.n	8016c2e <rfalStartTransceive+0x1fa>
 8016c2a:	4b22      	ldr	r3, [pc, #136]	; (8016cb4 <rfalStartTransceive+0x280>)
 8016c2c:	e000      	b.n	8016c30 <rfalStartTransceive+0x1fc>
 8016c2e:	2300      	movs	r3, #0
 8016c30:	4a1e      	ldr	r2, [pc, #120]	; (8016cac <rfalStartTransceive+0x278>)
 8016c32:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 8016c34:	4b1d      	ldr	r3, [pc, #116]	; (8016cac <rfalStartTransceive+0x278>)
 8016c36:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 8016c3a:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8016c3c:	4b1b      	ldr	r3, [pc, #108]	; (8016cac <rfalStartTransceive+0x278>)
 8016c3e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8016c42:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 8016c46:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8016c4a:	4a18      	ldr	r2, [pc, #96]	; (8016cac <rfalStartTransceive+0x278>)
 8016c4c:	6313      	str	r3, [r2, #48]	; 0x30
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8016c4e:	4b17      	ldr	r3, [pc, #92]	; (8016cac <rfalStartTransceive+0x278>)
 8016c50:	69db      	ldr	r3, [r3, #28]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d001      	beq.n	8016c5a <rfalStartTransceive+0x226>
            {
                return  ERR_NONE;
 8016c56:	2300      	movs	r3, #0
 8016c58:	e024      	b.n	8016ca4 <rfalStartTransceive+0x270>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8016c5a:	4b14      	ldr	r3, [pc, #80]	; (8016cac <rfalStartTransceive+0x278>)
 8016c5c:	69db      	ldr	r3, [r3, #28]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d003      	beq.n	8016c6a <rfalStartTransceive+0x236>
 8016c62:	4b12      	ldr	r3, [pc, #72]	; (8016cac <rfalStartTransceive+0x278>)
 8016c64:	8c1b      	ldrh	r3, [r3, #32]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d119      	bne.n	8016c9e <rfalStartTransceive+0x26a>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 8016c6a:	f000 f993 	bl	8016f94 <rfalPrepareTransceive>
            
            /* In AP2P check the field status */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 8016c6e:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <rfalStartTransceive+0x278>)
 8016c70:	785b      	ldrb	r3, [r3, #1]
 8016c72:	2b09      	cmp	r3, #9
 8016c74:	d003      	beq.n	8016c7e <rfalStartTransceive+0x24a>
 8016c76:	4b0d      	ldr	r3, [pc, #52]	; (8016cac <rfalStartTransceive+0x278>)
 8016c78:	785b      	ldrb	r3, [r3, #1]
 8016c7a:	2b0d      	cmp	r3, #13
 8016c7c:	d106      	bne.n	8016c8c <rfalStartTransceive+0x258>
            {
                /* Disable our field upon a Rx reEnable, and start PPON2 manually */
                st25r3916TxOff();                
 8016c7e:	2108      	movs	r1, #8
 8016c80:	2002      	movs	r0, #2
 8016c82:	f004 fc29 	bl	801b4d8 <st25r3916ClrRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_START_PPON2_TIMER );
 8016c86:	20e4      	movs	r0, #228	; 0xe4
 8016c88:	f004 fbc5 	bl	801b416 <st25r3916ExecuteCommand>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8016c8c:	20d1      	movs	r0, #209	; 0xd1
 8016c8e:	f004 fbc2 	bl	801b416 <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 8016c92:	20e3      	movs	r0, #227	; 0xe3
 8016c94:	f004 fbbf 	bl	801b416 <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8016c98:	4b04      	ldr	r3, [pc, #16]	; (8016cac <rfalStartTransceive+0x278>)
 8016c9a:	2251      	movs	r2, #81	; 0x51
 8016c9c:	761a      	strb	r2, [r3, #24]
        }
        
        return ERR_NONE;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	e000      	b.n	8016ca4 <rfalStartTransceive+0x270>
    }
    
    return ERR_WRONG_STATE;
 8016ca2:	2321      	movs	r3, #33	; 0x21
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3710      	adds	r7, #16
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bdb0      	pop	{r4, r5, r7, pc}
 8016cac:	20003618 	.word	0x20003618
 8016cb0:	0ffff000 	.word	0x0ffff000
 8016cb4:	200037f0 	.word	0x200037f0

08016cb8 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 8016cb8:	b480      	push	{r7}
 8016cba:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 8016cbc:	4b08      	ldr	r3, [pc, #32]	; (8016ce0 <rfalIsTransceiveInTx+0x28>)
 8016cbe:	7e1b      	ldrb	r3, [r3, #24]
 8016cc0:	2b0a      	cmp	r3, #10
 8016cc2:	d905      	bls.n	8016cd0 <rfalIsTransceiveInTx+0x18>
 8016cc4:	4b06      	ldr	r3, [pc, #24]	; (8016ce0 <rfalIsTransceiveInTx+0x28>)
 8016cc6:	7e1b      	ldrb	r3, [r3, #24]
 8016cc8:	2b50      	cmp	r3, #80	; 0x50
 8016cca:	d801      	bhi.n	8016cd0 <rfalIsTransceiveInTx+0x18>
 8016ccc:	2301      	movs	r3, #1
 8016cce:	e000      	b.n	8016cd2 <rfalIsTransceiveInTx+0x1a>
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	f003 0301 	and.w	r3, r3, #1
 8016cd6:	b2db      	uxtb	r3, r3
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bc80      	pop	{r7}
 8016cde:	4770      	bx	lr
 8016ce0:	20003618 	.word	0x20003618

08016ce4 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 8016ce4:	b480      	push	{r7}
 8016ce6:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 8016ce8:	4b05      	ldr	r3, [pc, #20]	; (8016d00 <rfalIsTransceiveInRx+0x1c>)
 8016cea:	7e1b      	ldrb	r3, [r3, #24]
 8016cec:	2b50      	cmp	r3, #80	; 0x50
 8016cee:	bf8c      	ite	hi
 8016cf0:	2301      	movhi	r3, #1
 8016cf2:	2300      	movls	r3, #0
 8016cf4:	b2db      	uxtb	r3, r3
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bc80      	pop	{r7}
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	20003618 	.word	0x20003618

08016d04 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b08c      	sub	sp, #48	; 0x30
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	60f8      	str	r0, [r7, #12]
 8016d0c:	607a      	str	r2, [r7, #4]
 8016d0e:	461a      	mov	r2, r3
 8016d10:	460b      	mov	r3, r1
 8016d12:	817b      	strh	r3, [r7, #10]
 8016d14:	4613      	mov	r3, r2
 8016d16:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	613b      	str	r3, [r7, #16]
 8016d1c:	897b      	ldrh	r3, [r7, #10]
 8016d1e:	00db      	lsls	r3, r3, #3
 8016d20:	b29b      	uxth	r3, r3
 8016d22:	82bb      	strh	r3, [r7, #20]
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	61bb      	str	r3, [r7, #24]
 8016d28:	893b      	ldrh	r3, [r7, #8]
 8016d2a:	00db      	lsls	r3, r3, #3
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	83bb      	strh	r3, [r7, #28]
 8016d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d32:	623b      	str	r3, [r7, #32]
 8016d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d36:	627b      	str	r3, [r7, #36]	; 0x24
 8016d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8016d3c:	f107 0310 	add.w	r3, r7, #16
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7ff fe77 	bl	8016a34 <rfalStartTransceive>
 8016d46:	4603      	mov	r3, r0
 8016d48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8016d4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d001      	beq.n	8016d54 <rfalTransceiveBlockingTx+0x50>
 8016d50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016d52:	e002      	b.n	8016d5a <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 8016d54:	f000 f805 	bl	8016d62 <rfalTransceiveRunBlockingTx>
 8016d58:	4603      	mov	r3, r0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3730      	adds	r7, #48	; 0x30
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 8016d62:	b580      	push	{r7, lr}
 8016d64:	b082      	sub	sp, #8
 8016d66:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 8016d68:	f000 f8a4 	bl	8016eb4 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8016d6c:	f000 f892 	bl	8016e94 <rfalGetTransceiveStatus>
 8016d70:	4603      	mov	r3, r0
 8016d72:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 8016d74:	f7ff ffa0 	bl	8016cb8 <rfalIsTransceiveInTx>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d002      	beq.n	8016d84 <rfalTransceiveRunBlockingTx+0x22>
 8016d7e:	88fb      	ldrh	r3, [r7, #6]
 8016d80:	2b02      	cmp	r3, #2
 8016d82:	d0f1      	beq.n	8016d68 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 8016d84:	f7ff ffae 	bl	8016ce4 <rfalIsTransceiveInRx>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d001      	beq.n	8016d92 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	e000      	b.n	8016d94 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 8016d92:	88fb      	ldrh	r3, [r7, #6]
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	3708      	adds	r7, #8
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b082      	sub	sp, #8
 8016da0:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 8016da2:	f000 f887 	bl	8016eb4 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8016da6:	f000 f875 	bl	8016e94 <rfalGetTransceiveStatus>
 8016daa:	4603      	mov	r3, r0
 8016dac:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 8016dae:	f7ff ff99 	bl	8016ce4 <rfalIsTransceiveInRx>
 8016db2:	4603      	mov	r3, r0
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d002      	beq.n	8016dbe <rfalTransceiveBlockingRx+0x22>
 8016db8:	88fb      	ldrh	r3, [r7, #6]
 8016dba:	2b02      	cmp	r3, #2
 8016dbc:	d0f1      	beq.n	8016da2 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 8016dbe:	88fb      	ldrh	r3, [r7, #6]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3708      	adds	r7, #8
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b08a      	sub	sp, #40	; 0x28
 8016dcc:	af04      	add	r7, sp, #16
 8016dce:	60f8      	str	r0, [r7, #12]
 8016dd0:	607a      	str	r2, [r7, #4]
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	817b      	strh	r3, [r7, #10]
 8016dd8:	4613      	mov	r3, r2
 8016dda:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 8016ddc:	893a      	ldrh	r2, [r7, #8]
 8016dde:	8979      	ldrh	r1, [r7, #10]
 8016de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de2:	9302      	str	r3, [sp, #8]
 8016de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de6:	9301      	str	r3, [sp, #4]
 8016de8:	6a3b      	ldr	r3, [r7, #32]
 8016dea:	9300      	str	r3, [sp, #0]
 8016dec:	4613      	mov	r3, r2
 8016dee:	687a      	ldr	r2, [r7, #4]
 8016df0:	68f8      	ldr	r0, [r7, #12]
 8016df2:	f7ff ff87 	bl	8016d04 <rfalTransceiveBlockingTx>
 8016df6:	4603      	mov	r3, r0
 8016df8:	82fb      	strh	r3, [r7, #22]
 8016dfa:	8afb      	ldrh	r3, [r7, #22]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d001      	beq.n	8016e04 <rfalTransceiveBlockingTxRx+0x3c>
 8016e00:	8afb      	ldrh	r3, [r7, #22]
 8016e02:	e00e      	b.n	8016e22 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 8016e04:	f7ff ffca 	bl	8016d9c <rfalTransceiveBlockingRx>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 8016e0c:	6a3b      	ldr	r3, [r7, #32]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d006      	beq.n	8016e20 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 8016e12:	6a3b      	ldr	r3, [r7, #32]
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	3307      	adds	r3, #7
 8016e18:	08db      	lsrs	r3, r3, #3
 8016e1a:	b29a      	uxth	r2, r3
 8016e1c:	6a3b      	ldr	r3, [r7, #32]
 8016e1e:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 8016e20:	8afb      	ldrh	r3, [r7, #22]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3718      	adds	r7, #24
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
	...

08016e2c <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 8016e30:	4b17      	ldr	r3, [pc, #92]	; (8016e90 <rfalRunTransceiveWorker+0x64>)
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	2b03      	cmp	r3, #3
 8016e36:	d127      	bne.n	8016e88 <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 8016e38:	4b15      	ldr	r3, [pc, #84]	; (8016e90 <rfalRunTransceiveWorker+0x64>)
 8016e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d00d      	beq.n	8016e5c <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 8016e40:	4b13      	ldr	r3, [pc, #76]	; (8016e90 <rfalRunTransceiveWorker+0x64>)
 8016e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e44:	4618      	mov	r0, r3
 8016e46:	f004 fee5 	bl	801bc14 <timerIsExpired>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d005      	beq.n	8016e5c <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 8016e50:	4b0f      	ldr	r3, [pc, #60]	; (8016e90 <rfalRunTransceiveWorker+0x64>)
 8016e52:	2203      	movs	r2, #3
 8016e54:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016e56:	4b0e      	ldr	r3, [pc, #56]	; (8016e90 <rfalRunTransceiveWorker+0x64>)
 8016e58:	225a      	movs	r2, #90	; 0x5a
 8016e5a:	761a      	strb	r2, [r3, #24]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 8016e5c:	f7ff ff2c 	bl	8016cb8 <rfalIsTransceiveInTx>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d005      	beq.n	8016e72 <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 8016e66:	f000 f96d 	bl	8017144 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 8016e6a:	f000 f813 	bl	8016e94 <rfalGetTransceiveStatus>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	e00b      	b.n	8016e8a <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 8016e72:	f7ff ff37 	bl	8016ce4 <rfalIsTransceiveInRx>
 8016e76:	4603      	mov	r3, r0
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d005      	beq.n	8016e88 <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 8016e7c:	f000 fba6 	bl	80175cc <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 8016e80:	f000 f808 	bl	8016e94 <rfalGetTransceiveStatus>
 8016e84:	4603      	mov	r3, r0
 8016e86:	e000      	b.n	8016e8a <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 8016e88:	2321      	movs	r3, #33	; 0x21
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	bd80      	pop	{r7, pc}
 8016e8e:	bf00      	nop
 8016e90:	20003618 	.word	0x20003618

08016e94 <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 8016e94:	b480      	push	{r7}
 8016e96:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 8016e98:	4b05      	ldr	r3, [pc, #20]	; (8016eb0 <rfalGetTransceiveStatus+0x1c>)
 8016e9a:	7e1b      	ldrb	r3, [r3, #24]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d102      	bne.n	8016ea6 <rfalGetTransceiveStatus+0x12>
 8016ea0:	4b03      	ldr	r3, [pc, #12]	; (8016eb0 <rfalGetTransceiveStatus+0x1c>)
 8016ea2:	8b5b      	ldrh	r3, [r3, #26]
 8016ea4:	e000      	b.n	8016ea8 <rfalGetTransceiveStatus+0x14>
 8016ea6:	2302      	movs	r3, #2
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bc80      	pop	{r7}
 8016eae:	4770      	bx	lr
 8016eb0:	20003618 	.word	0x20003618

08016eb4 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 8016eb8:	4b0b      	ldr	r3, [pc, #44]	; (8016ee8 <rfalWorker+0x34>)
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	2b05      	cmp	r3, #5
 8016ebe:	d00c      	beq.n	8016eda <rfalWorker+0x26>
 8016ec0:	2b05      	cmp	r3, #5
 8016ec2:	dc0d      	bgt.n	8016ee0 <rfalWorker+0x2c>
 8016ec4:	2b03      	cmp	r3, #3
 8016ec6:	d002      	beq.n	8016ece <rfalWorker+0x1a>
 8016ec8:	2b04      	cmp	r3, #4
 8016eca:	d003      	beq.n	8016ed4 <rfalWorker+0x20>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8016ecc:	e008      	b.n	8016ee0 <rfalWorker+0x2c>
            rfalRunTransceiveWorker();
 8016ece:	f7ff ffad 	bl	8016e2c <rfalRunTransceiveWorker>
            break;
 8016ed2:	e006      	b.n	8016ee2 <rfalWorker+0x2e>
            rfalRunListenModeWorker();
 8016ed4:	f001 fd16 	bl	8018904 <rfalRunListenModeWorker>
            break;
 8016ed8:	e003      	b.n	8016ee2 <rfalWorker+0x2e>
            rfalRunWakeUpModeWorker();
 8016eda:	f002 fccd 	bl	8019878 <rfalRunWakeUpModeWorker>
            break;
 8016ede:	e000      	b.n	8016ee2 <rfalWorker+0x2e>
            break;
 8016ee0:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 8016ee2:	bf00      	nop
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	bf00      	nop
 8016ee8:	20003618 	.word	0x20003618

08016eec <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b082      	sub	sp, #8
 8016ef0:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 8016ef2:	f000 feef 	bl	8017cd4 <rfalFIFOStatusGetNumBytes>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8016efa:	4b17      	ldr	r3, [pc, #92]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016efc:	785b      	ldrb	r3, [r3, #1]
 8016efe:	2b01      	cmp	r3, #1
 8016f00:	d125      	bne.n	8016f4e <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 8016f02:	4b15      	ldr	r3, [pc, #84]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016f04:	8b5b      	ldrh	r3, [r3, #26]
 8016f06:	2b1b      	cmp	r3, #27
 8016f08:	d003      	beq.n	8016f12 <rfalErrorHandling+0x26>
 8016f0a:	4b13      	ldr	r3, [pc, #76]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016f0c:	8b5b      	ldrh	r3, [r3, #26]
 8016f0e:	2b15      	cmp	r3, #21
 8016f10:	d11d      	bne.n	8016f4e <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 8016f12:	f000 fefb 	bl	8017d0c <rfalFIFOStatusIsIncompleteByte>
 8016f16:	4603      	mov	r3, r0
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d018      	beq.n	8016f4e <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 8016f1c:	4b0e      	ldr	r3, [pc, #56]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f20:	88fa      	ldrh	r2, [r7, #6]
 8016f22:	4611      	mov	r1, r2
 8016f24:	4618      	mov	r0, r3
 8016f26:	f004 f9f4 	bl	801b312 <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 8016f2a:	4b0b      	ldr	r3, [pc, #44]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d007      	beq.n	8016f42 <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 8016f32:	f000 ff0f 	bl	8017d54 <rfalFIFOGetNumIncompleteBits>
 8016f36:	4603      	mov	r3, r0
 8016f38:	461a      	mov	r2, r3
 8016f3a:	4b07      	ldr	r3, [pc, #28]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f3e:	b292      	uxth	r2, r2
 8016f40:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 8016f42:	4b05      	ldr	r3, [pc, #20]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016f44:	2228      	movs	r2, #40	; 0x28
 8016f46:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8016f48:	4b03      	ldr	r3, [pc, #12]	; (8016f58 <rfalErrorHandling+0x6c>)
 8016f4a:	225a      	movs	r2, #90	; 0x5a
 8016f4c:	761a      	strb	r2, [r3, #24]
            }
        }
    }
    
}
 8016f4e:	bf00      	nop
 8016f50:	3708      	adds	r7, #8
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}
 8016f56:	bf00      	nop
 8016f58:	20003618 	.word	0x20003618

08016f5c <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 8016f60:	21e0      	movs	r1, #224	; 0xe0
 8016f62:	2005      	movs	r0, #5
 8016f64:	f004 fab8 	bl	801b4d8 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8016f68:	2108      	movs	r1, #8
 8016f6a:	200c      	movs	r0, #12
 8016f6c:	f004 faeb 	bl	801b546 <st25r3916SetRegisterBits>
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    rfalTimerDestroy( gRFAL.tmr.txRx );
    rfalTimerDestroy( gRFAL.tmr.RXE );
    gRFAL.tmr.txRx = RFAL_TIMING_NONE; 
 8016f70:	4b07      	ldr	r3, [pc, #28]	; (8016f90 <rfalCleanupTransceive+0x34>)
 8016f72:	2200      	movs	r2, #0
 8016f74:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.tmr.RXE  = RFAL_TIMING_NONE;
 8016f76:	4b06      	ldr	r3, [pc, #24]	; (8016f90 <rfalCleanupTransceive+0x34>)
 8016f78:	2200      	movs	r2, #0
 8016f7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 8016f7c:	4b04      	ldr	r3, [pc, #16]	; (8016f90 <rfalCleanupTransceive+0x34>)
 8016f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d002      	beq.n	8016f8a <rfalCleanupTransceive+0x2e>
    {
        gRFAL.callbacks.postTxRx();
 8016f84:	4b02      	ldr	r3, [pc, #8]	; (8016f90 <rfalCleanupTransceive+0x34>)
 8016f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f88:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 8016f8a:	bf00      	nop
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	bf00      	nop
 8016f90:	20003618 	.word	0x20003618

08016f94 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b082      	sub	sp, #8
 8016f98:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 8016f9a:	4b67      	ldr	r3, [pc, #412]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016f9c:	785b      	ldrb	r3, [r3, #1]
 8016f9e:	2b0a      	cmp	r3, #10
 8016fa0:	d00e      	beq.n	8016fc0 <rfalPrepareTransceive+0x2c>
 8016fa2:	4b65      	ldr	r3, [pc, #404]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016fa4:	785b      	ldrb	r3, [r3, #1]
 8016fa6:	2b0b      	cmp	r3, #11
 8016fa8:	d00a      	beq.n	8016fc0 <rfalPrepareTransceive+0x2c>
 8016faa:	4b63      	ldr	r3, [pc, #396]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016fac:	785b      	ldrb	r3, [r3, #1]
 8016fae:	2b0c      	cmp	r3, #12
 8016fb0:	d006      	beq.n	8016fc0 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8016fb2:	20c2      	movs	r0, #194	; 0xc2
 8016fb4:	f004 fa2f 	bl	801b416 <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 8016fb8:	20d5      	movs	r0, #213	; 0xd5
 8016fba:	f004 fa2c 	bl	801b416 <st25r3916ExecuteCommand>
 8016fbe:	e002      	b.n	8016fc6 <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8016fc0:	20db      	movs	r0, #219	; 0xdb
 8016fc2:	f004 fa28 	bl	801b416 <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8016fc6:	4b5c      	ldr	r3, [pc, #368]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016fc8:	785b      	ldrb	r3, [r3, #1]
 8016fca:	2b09      	cmp	r3, #9
 8016fcc:	d01c      	beq.n	8017008 <rfalPrepareTransceive+0x74>
 8016fce:	4b5a      	ldr	r3, [pc, #360]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016fd0:	785b      	ldrb	r3, [r3, #1]
 8016fd2:	2b0d      	cmp	r3, #13
 8016fd4:	d018      	beq.n	8017008 <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8016fd6:	4b58      	ldr	r3, [pc, #352]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016fd8:	691b      	ldr	r3, [r3, #16]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d014      	beq.n	8017008 <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8016fde:	4b56      	ldr	r3, [pc, #344]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016fe0:	691b      	ldr	r3, [r3, #16]
 8016fe2:	f240 423b 	movw	r2, #1083	; 0x43b
 8016fe6:	4293      	cmp	r3, r2
 8016fe8:	d804      	bhi.n	8016ff4 <rfalPrepareTransceive+0x60>
 8016fea:	4b53      	ldr	r3, [pc, #332]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016fec:	691b      	ldr	r3, [r3, #16]
 8016fee:	08db      	lsrs	r3, r3, #3
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	e005      	b.n	8017000 <rfalPrepareTransceive+0x6c>
 8016ff4:	4b50      	ldr	r3, [pc, #320]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8016ff6:	691b      	ldr	r3, [r3, #16]
 8016ff8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8016ffc:	08db      	lsrs	r3, r3, #3
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	2120      	movs	r1, #32
 8017002:	4618      	mov	r0, r3
 8017004:	f003 ff61 	bl	801aeca <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 8017008:	4b4b      	ldr	r3, [pc, #300]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 801700a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801700c:	2b00      	cmp	r3, #0
 801700e:	d002      	beq.n	8017016 <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 8017010:	4b49      	ldr	r3, [pc, #292]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8017012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017014:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 8017016:	4b49      	ldr	r3, [pc, #292]	; (801713c <rfalPrepareTransceive+0x1a8>)
 8017018:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 801701a:	2300      	movs	r3, #0
 801701c:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 801701e:	4b46      	ldr	r3, [pc, #280]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8017020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017022:	f003 0304 	and.w	r3, r3, #4
 8017026:	2b00      	cmp	r3, #0
 8017028:	d003      	beq.n	8017032 <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 801702a:	78fb      	ldrb	r3, [r7, #3]
 801702c:	f043 0320 	orr.w	r3, r3, #32
 8017030:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 8017032:	4b41      	ldr	r3, [pc, #260]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8017034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017036:	f003 0310 	and.w	r3, r3, #16
 801703a:	2b00      	cmp	r3, #0
 801703c:	d003      	beq.n	8017046 <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 801703e:	78fb      	ldrb	r3, [r7, #3]
 8017040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017044:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 8017046:	4b3c      	ldr	r3, [pc, #240]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8017048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801704a:	f003 0320 	and.w	r3, r3, #32
 801704e:	2b00      	cmp	r3, #0
 8017050:	d003      	beq.n	801705a <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 8017052:	78fb      	ldrb	r3, [r7, #3]
 8017054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017058:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 801705a:	78fb      	ldrb	r3, [r7, #3]
 801705c:	461a      	mov	r2, r3
 801705e:	21e0      	movs	r1, #224	; 0xe0
 8017060:	2005      	movs	r0, #5
 8017062:	f004 fa9d 	bl	801b5a0 <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 8017066:	4b34      	ldr	r3, [pc, #208]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8017068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801706a:	f003 0308 	and.w	r3, r3, #8
 801706e:	2b00      	cmp	r3, #0
 8017070:	d004      	beq.n	801707c <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8017072:	2108      	movs	r1, #8
 8017074:	200c      	movs	r0, #12
 8017076:	f004 fa2f 	bl	801b4d8 <st25r3916ClrRegisterBits>
 801707a:	e003      	b.n	8017084 <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 801707c:	2108      	movs	r1, #8
 801707e:	200c      	movs	r0, #12
 8017080:	f004 fa61 	bl	801b546 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 8017084:	4b2c      	ldr	r3, [pc, #176]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8017086:	79db      	ldrb	r3, [r3, #7]
 8017088:	2b02      	cmp	r3, #2
 801708a:	d108      	bne.n	801709e <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 801708c:	2102      	movs	r1, #2
 801708e:	2012      	movs	r0, #18
 8017090:	f004 fa59 	bl	801b546 <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	f043 0302 	orr.w	r3, r3, #2
 801709a:	607b      	str	r3, [r7, #4]
 801709c:	e003      	b.n	80170a6 <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 801709e:	2102      	movs	r1, #2
 80170a0:	2012      	movs	r0, #18
 80170a2:	f004 fa19 	bl	801b4d8 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 80170a6:	4b24      	ldr	r3, [pc, #144]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 80170a8:	785b      	ldrb	r3, [r3, #1]
 80170aa:	2b0a      	cmp	r3, #10
 80170ac:	d007      	beq.n	80170be <rfalPrepareTransceive+0x12a>
 80170ae:	4b22      	ldr	r3, [pc, #136]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 80170b0:	785b      	ldrb	r3, [r3, #1]
 80170b2:	2b0b      	cmp	r3, #11
 80170b4:	d003      	beq.n	80170be <rfalPrepareTransceive+0x12a>
 80170b6:	4b20      	ldr	r3, [pc, #128]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 80170b8:	785b      	ldrb	r3, [r3, #1]
 80170ba:	2b0c      	cmp	r3, #12
 80170bc:	d103      	bne.n	80170c6 <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 80170c4:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts and set RF Collsion Avoindance */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 80170c6:	4b1c      	ldr	r3, [pc, #112]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 80170c8:	785b      	ldrb	r3, [r3, #1]
 80170ca:	2b09      	cmp	r3, #9
 80170cc:	d003      	beq.n	80170d6 <rfalPrepareTransceive+0x142>
 80170ce:	4b1a      	ldr	r3, [pc, #104]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 80170d0:	785b      	ldrb	r3, [r3, #1]
 80170d2:	2b0d      	cmp	r3, #13
 80170d4:	d10a      	bne.n	80170ec <rfalPrepareTransceive+0x158>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80170dc:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80170e0:	607b      	str	r3, [r7, #4]
        
        /* Set n=0 for subsequent RF Collision Avoidance */
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
 80170e2:	2200      	movs	r2, #0
 80170e4:	2103      	movs	r1, #3
 80170e6:	200a      	movs	r0, #10
 80170e8:	f004 fa5a 	bl	801b5a0 <st25r3916ChangeRegisterBits>
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 80170ec:	4b12      	ldr	r3, [pc, #72]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 80170ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170f4:	d013      	beq.n	801711e <rfalPrepareTransceive+0x18a>
 80170f6:	4b10      	ldr	r3, [pc, #64]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 80170f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d00f      	beq.n	801711e <rfalPrepareTransceive+0x18a>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 80170fe:	4b0e      	ldr	r3, [pc, #56]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 8017100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017102:	4a0f      	ldr	r2, [pc, #60]	; (8017140 <rfalPrepareTransceive+0x1ac>)
 8017104:	fba2 2303 	umull	r2, r3, r2, r3
 8017108:	0b1b      	lsrs	r3, r3, #12
 801710a:	b29b      	uxth	r3, r3
 801710c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8017110:	b29b      	uxth	r3, r3
 8017112:	4618      	mov	r0, r3
 8017114:	f004 fd70 	bl	801bbf8 <timerCalculateTimer>
 8017118:	4603      	mov	r3, r0
 801711a:	4a07      	ldr	r2, [pc, #28]	; (8017138 <rfalPrepareTransceive+0x1a4>)
 801711c:	6493      	str	r3, [r2, #72]	; 0x48
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f004 fc52 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f004 fc99 	bl	801ba5c <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 801712a:	f000 fdc7 	bl	8017cbc <rfalFIFOStatusClear>
}
 801712e:	bf00      	nop
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}
 8017136:	bf00      	nop
 8017138:	20003618 	.word	0x20003618
 801713c:	00f04078 	.word	0x00f04078
 8017140:	4d542005 	.word	0x4d542005

08017144 <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 8017144:	b5b0      	push	{r4, r5, r7, lr}
 8017146:	b08a      	sub	sp, #40	; 0x28
 8017148:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 801714a:	2300      	movs	r3, #0
 801714c:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 801714e:	2300      	movs	r3, #0
 8017150:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8017152:	4ba0      	ldr	r3, [pc, #640]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017154:	7e1a      	ldrb	r2, [r3, #24]
 8017156:	4b9f      	ldr	r3, [pc, #636]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017158:	7e5b      	ldrb	r3, [r3, #25]
 801715a:	429a      	cmp	r2, r3
 801715c:	d003      	beq.n	8017166 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 801715e:	4b9d      	ldr	r3, [pc, #628]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017160:	7e1a      	ldrb	r2, [r3, #24]
 8017162:	4b9c      	ldr	r3, [pc, #624]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017164:	765a      	strb	r2, [r3, #25]
    }
    
    switch( gRFAL.TxRx.state )
 8017166:	4b9b      	ldr	r3, [pc, #620]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017168:	7e1b      	ldrb	r3, [r3, #24]
 801716a:	3b0b      	subs	r3, #11
 801716c:	2b08      	cmp	r3, #8
 801716e:	f200 8210 	bhi.w	8017592 <rfalTransceiveTx+0x44e>
 8017172:	a201      	add	r2, pc, #4	; (adr r2, 8017178 <rfalTransceiveTx+0x34>)
 8017174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017178:	0801719d 	.word	0x0801719d
 801717c:	080171a3 	.word	0x080171a3
 8017180:	080171c1 	.word	0x080171c1
 8017184:	080171e9 	.word	0x080171e9
 8017188:	08017367 	.word	0x08017367
 801718c:	080173a3 	.word	0x080173a3
 8017190:	080174e3 	.word	0x080174e3
 8017194:	0801751d 	.word	0x0801751d
 8017198:	08017569 	.word	0x08017569
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 801719c:	4b8d      	ldr	r3, [pc, #564]	; (80173d4 <rfalTransceiveTx+0x290>)
 801719e:	220c      	movs	r2, #12
 80171a0:	761a      	strb	r2, [r3, #24]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 80171a2:	f7ff fba5 	bl	80168f0 <rfalIsGTExpired>
 80171a6:	4603      	mov	r3, r0
 80171a8:	f083 0301 	eor.w	r3, r3, #1
 80171ac:	b2db      	uxtb	r3, r3
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	f040 81f6 	bne.w	80175a0 <rfalTransceiveTx+0x45c>
            {
                break;
            }
            
            rfalTimerDestroy( gRFAL.tmr.GT );
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 80171b4:	4b87      	ldr	r3, [pc, #540]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171b6:	2200      	movs	r2, #0
 80171b8:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 80171ba:	4b86      	ldr	r3, [pc, #536]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171bc:	220d      	movs	r2, #13
 80171be:	761a      	strb	r2, [r3, #24]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 80171c0:	4b84      	ldr	r3, [pc, #528]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171c2:	785b      	ldrb	r3, [r3, #1]
 80171c4:	2b09      	cmp	r3, #9
 80171c6:	d00c      	beq.n	80171e2 <rfalTransceiveTx+0x9e>
 80171c8:	4b82      	ldr	r3, [pc, #520]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171ca:	785b      	ldrb	r3, [r3, #1]
 80171cc:	2b0d      	cmp	r3, #13
 80171ce:	d008      	beq.n	80171e2 <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 80171d0:	2204      	movs	r2, #4
 80171d2:	2104      	movs	r1, #4
 80171d4:	2024      	movs	r0, #36	; 0x24
 80171d6:	f004 fa67 	bl	801b6a8 <st25r3916CheckReg>
 80171da:	4603      	mov	r3, r0
 80171dc:	2b00      	cmp	r3, #0
 80171de:	f040 81e1 	bne.w	80175a4 <rfalTransceiveTx+0x460>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 80171e2:	4b7c      	ldr	r3, [pc, #496]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171e4:	220e      	movs	r2, #14
 80171e6:	761a      	strb	r2, [r3, #24]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 80171e8:	f7ff fed4 	bl	8016f94 <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 80171ec:	4b79      	ldr	r3, [pc, #484]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171ee:	f44f 729c 	mov.w	r2, #312	; 0x138
 80171f2:	871a      	strh	r2, [r3, #56]	; 0x38

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80171f4:	4b77      	ldr	r3, [pc, #476]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171f6:	785b      	ldrb	r3, [r3, #1]
 80171f8:	2b07      	cmp	r3, #7
 80171fa:	d003      	beq.n	8017204 <rfalTransceiveTx+0xc0>
 80171fc:	4b75      	ldr	r3, [pc, #468]	; (80173d4 <rfalTransceiveTx+0x290>)
 80171fe:	785b      	ldrb	r3, [r3, #1]
 8017200:	2b08      	cmp	r3, #8
 8017202:	d151      	bne.n	80172a8 <rfalTransceiveTx+0x164>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 8017204:	4b73      	ldr	r3, [pc, #460]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017206:	2200      	movs	r2, #0
 8017208:	f8a3 23e0 	strh.w	r2, [r3, #992]	; 0x3e0
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 801720c:	4b71      	ldr	r3, [pc, #452]	; (80173d4 <rfalTransceiveTx+0x290>)
 801720e:	69d8      	ldr	r0, [r3, #28]
 8017210:	4b70      	ldr	r3, [pc, #448]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017212:	8c1b      	ldrh	r3, [r3, #32]
 8017214:	3307      	adds	r3, #7
 8017216:	08db      	lsrs	r3, r3, #3
 8017218:	b299      	uxth	r1, r3
 801721a:	4b6e      	ldr	r3, [pc, #440]	; (80173d4 <rfalTransceiveTx+0x290>)
 801721c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8017220:	f003 0301 	and.w	r3, r3, #1
 8017224:	2b00      	cmp	r3, #0
 8017226:	bf0c      	ite	eq
 8017228:	2301      	moveq	r3, #1
 801722a:	2300      	movne	r3, #0
 801722c:	b2da      	uxtb	r2, r3
 801722e:	4b69      	ldr	r3, [pc, #420]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017230:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8017234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017238:	2b00      	cmp	r3, #0
 801723a:	bf0c      	ite	eq
 801723c:	2301      	moveq	r3, #1
 801723e:	2300      	movne	r3, #0
 8017240:	b2dc      	uxtb	r4, r3
 8017242:	4b64      	ldr	r3, [pc, #400]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017244:	785b      	ldrb	r3, [r3, #1]
 8017246:	2b08      	cmp	r3, #8
 8017248:	bf0c      	ite	eq
 801724a:	2301      	moveq	r3, #1
 801724c:	2300      	movne	r3, #0
 801724e:	b2db      	uxtb	r3, r3
 8017250:	4d61      	ldr	r5, [pc, #388]	; (80173d8 <rfalTransceiveTx+0x294>)
 8017252:	9505      	str	r5, [sp, #20]
 8017254:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017258:	9504      	str	r5, [sp, #16]
 801725a:	4d60      	ldr	r5, [pc, #384]	; (80173dc <rfalTransceiveTx+0x298>)
 801725c:	9503      	str	r5, [sp, #12]
 801725e:	4d60      	ldr	r5, [pc, #384]	; (80173e0 <rfalTransceiveTx+0x29c>)
 8017260:	9502      	str	r5, [sp, #8]
 8017262:	4d60      	ldr	r5, [pc, #384]	; (80173e4 <rfalTransceiveTx+0x2a0>)
 8017264:	9501      	str	r5, [sp, #4]
 8017266:	9300      	str	r3, [sp, #0]
 8017268:	4623      	mov	r3, r4
 801726a:	f7f5 f84b 	bl	800c304 <iso15693VCDCode>
 801726e:	4603      	mov	r3, r0
 8017270:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8017272:	89fb      	ldrh	r3, [r7, #14]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d009      	beq.n	801728c <rfalTransceiveTx+0x148>
 8017278:	89fb      	ldrh	r3, [r7, #14]
 801727a:	2b0d      	cmp	r3, #13
 801727c:	d006      	beq.n	801728c <rfalTransceiveTx+0x148>
                {
                    gRFAL.TxRx.status = ret;
 801727e:	4a55      	ldr	r2, [pc, #340]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017280:	89fb      	ldrh	r3, [r7, #14]
 8017282:	8353      	strh	r3, [r2, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8017284:	4b53      	ldr	r3, [pc, #332]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017286:	2213      	movs	r2, #19
 8017288:	761a      	strb	r2, [r3, #24]
                    break;
 801728a:	e192      	b.n	80175b2 <rfalTransceiveTx+0x46e>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 801728c:	4b51      	ldr	r3, [pc, #324]	; (80173d4 <rfalTransceiveTx+0x290>)
 801728e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017290:	00db      	lsls	r3, r3, #3
 8017292:	b29b      	uxth	r3, r3
 8017294:	4618      	mov	r0, r3
 8017296:	f003 fd8d 	bl	801adb4 <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 801729a:	4b4e      	ldr	r3, [pc, #312]	; (80173d4 <rfalTransceiveTx+0x290>)
 801729c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801729e:	4619      	mov	r1, r3
 80172a0:	484e      	ldr	r0, [pc, #312]	; (80173dc <rfalTransceiveTx+0x298>)
 80172a2:	f004 f813 	bl	801b2cc <st25r3916WriteFifo>
 80172a6:	e01d      	b.n	80172e4 <rfalTransceiveTx+0x1a0>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 80172a8:	4b4a      	ldr	r3, [pc, #296]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172aa:	8c1b      	ldrh	r3, [r3, #32]
 80172ac:	3307      	adds	r3, #7
 80172ae:	08db      	lsrs	r3, r3, #3
 80172b0:	b29a      	uxth	r2, r3
 80172b2:	4b48      	ldr	r3, [pc, #288]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172b4:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 80172b6:	4b47      	ldr	r3, [pc, #284]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172b8:	8c1b      	ldrh	r3, [r3, #32]
 80172ba:	4618      	mov	r0, r3
 80172bc:	f003 fd7a 	bl	801adb4 <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 80172c0:	4b44      	ldr	r3, [pc, #272]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80172c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172c8:	bf28      	it	cs
 80172ca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80172ce:	b29a      	uxth	r2, r3
 80172d0:	4b40      	ldr	r3, [pc, #256]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172d2:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 80172d4:	4b3f      	ldr	r3, [pc, #252]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172d6:	69db      	ldr	r3, [r3, #28]
 80172d8:	4a3e      	ldr	r2, [pc, #248]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172da:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 80172dc:	4611      	mov	r1, r2
 80172de:	4618      	mov	r0, r3
 80172e0:	f003 fff4 	bl	801b2cc <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 80172e4:	4b3b      	ldr	r3, [pc, #236]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172e6:	795b      	ldrb	r3, [r3, #5]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d008      	beq.n	80172fe <rfalTransceiveTx+0x1ba>
 80172ec:	4b39      	ldr	r3, [pc, #228]	; (80173d4 <rfalTransceiveTx+0x290>)
 80172ee:	795b      	ldrb	r3, [r3, #5]
 80172f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172f4:	b2db      	uxtb	r3, r3
 80172f6:	4619      	mov	r1, r3
 80172f8:	2001      	movs	r0, #1
 80172fa:	f004 f8c8 	bl	801b48e <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 80172fe:	4b35      	ldr	r3, [pc, #212]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017300:	785b      	ldrb	r3, [r3, #1]
 8017302:	2b0a      	cmp	r3, #10
 8017304:	d007      	beq.n	8017316 <rfalTransceiveTx+0x1d2>
 8017306:	4b33      	ldr	r3, [pc, #204]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017308:	785b      	ldrb	r3, [r3, #1]
 801730a:	2b0b      	cmp	r3, #11
 801730c:	d003      	beq.n	8017316 <rfalTransceiveTx+0x1d2>
 801730e:	4b31      	ldr	r3, [pc, #196]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017310:	785b      	ldrb	r3, [r3, #1]
 8017312:	2b0c      	cmp	r3, #12
 8017314:	d10e      	bne.n	8017334 <rfalTransceiveTx+0x1f0>
            {
                if( !rfalIsExtFieldOn() )
 8017316:	f001 f951 	bl	80185bc <rfalIsExtFieldOn>
 801731a:	4603      	mov	r3, r0
 801731c:	f083 0301 	eor.w	r3, r3, #1
 8017320:	b2db      	uxtb	r3, r3
 8017322:	2b00      	cmp	r3, #0
 8017324:	d006      	beq.n	8017334 <rfalTransceiveTx+0x1f0>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 8017326:	4b2b      	ldr	r3, [pc, #172]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017328:	2225      	movs	r2, #37	; 0x25
 801732a:	835a      	strh	r2, [r3, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801732c:	4b29      	ldr	r3, [pc, #164]	; (80173d4 <rfalTransceiveTx+0x290>)
 801732e:	2213      	movs	r2, #19
 8017330:	761a      	strb	r2, [r3, #24]
                    break;
 8017332:	e13e      	b.n	80175b2 <rfalTransceiveTx+0x46e>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8017334:	4b27      	ldr	r3, [pc, #156]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017338:	f003 0301 	and.w	r3, r3, #1
 801733c:	2b00      	cmp	r3, #0
 801733e:	d003      	beq.n	8017348 <rfalTransceiveTx+0x204>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 8017340:	20c5      	movs	r0, #197	; 0xc5
 8017342:	f004 f868 	bl	801b416 <st25r3916ExecuteCommand>
 8017346:	e002      	b.n	801734e <rfalTransceiveTx+0x20a>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 8017348:	20c4      	movs	r0, #196	; 0xc4
 801734a:	f004 f864 	bl	801b416 <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 801734e:	4b21      	ldr	r3, [pc, #132]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017350:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8017352:	4b20      	ldr	r3, [pc, #128]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017354:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017356:	429a      	cmp	r2, r3
 8017358:	d201      	bcs.n	801735e <rfalTransceiveTx+0x21a>
 801735a:	220f      	movs	r2, #15
 801735c:	e000      	b.n	8017360 <rfalTransceiveTx+0x21c>
 801735e:	2211      	movs	r2, #17
 8017360:	4b1c      	ldr	r3, [pc, #112]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017362:	761a      	strb	r2, [r3, #24]
            break;
 8017364:	e125      	b.n	80175b2 <rfalTransceiveTx+0x46e>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 8017366:	2048      	movs	r0, #72	; 0x48
 8017368:	f004 fb2e 	bl	801b9c8 <st25r3916GetInterrupt>
 801736c:	4603      	mov	r3, r0
 801736e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	2b00      	cmp	r3, #0
 8017374:	f000 8118 	beq.w	80175a8 <rfalTransceiveTx+0x464>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801737e:	2b00      	cmp	r3, #0
 8017380:	d008      	beq.n	8017394 <rfalTransceiveTx+0x250>
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	f003 0308 	and.w	r3, r3, #8
 8017388:	2b00      	cmp	r3, #0
 801738a:	d103      	bne.n	8017394 <rfalTransceiveTx+0x250>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 801738c:	4b11      	ldr	r3, [pc, #68]	; (80173d4 <rfalTransceiveTx+0x290>)
 801738e:	2210      	movs	r2, #16
 8017390:	761a      	strb	r2, [r3, #24]
 8017392:	e006      	b.n	80173a2 <rfalTransceiveTx+0x25e>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8017394:	4b0f      	ldr	r3, [pc, #60]	; (80173d4 <rfalTransceiveTx+0x290>)
 8017396:	2203      	movs	r2, #3
 8017398:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 801739a:	4b0e      	ldr	r3, [pc, #56]	; (80173d4 <rfalTransceiveTx+0x290>)
 801739c:	2213      	movs	r2, #19
 801739e:	761a      	strb	r2, [r3, #24]
                break;
 80173a0:	e107      	b.n	80175b2 <rfalTransceiveTx+0x46e>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80173a2:	4b0c      	ldr	r3, [pc, #48]	; (80173d4 <rfalTransceiveTx+0x290>)
 80173a4:	785b      	ldrb	r3, [r3, #1]
 80173a6:	2b07      	cmp	r3, #7
 80173a8:	d003      	beq.n	80173b2 <rfalTransceiveTx+0x26e>
 80173aa:	4b0a      	ldr	r3, [pc, #40]	; (80173d4 <rfalTransceiveTx+0x290>)
 80173ac:	785b      	ldrb	r3, [r3, #1]
 80173ae:	2b08      	cmp	r3, #8
 80173b0:	d16c      	bne.n	801748c <rfalTransceiveTx+0x348>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 80173b2:	4b08      	ldr	r3, [pc, #32]	; (80173d4 <rfalTransceiveTx+0x290>)
 80173b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80173b6:	461a      	mov	r2, r3
 80173b8:	4b06      	ldr	r3, [pc, #24]	; (80173d4 <rfalTransceiveTx+0x290>)
 80173ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80173bc:	1ad3      	subs	r3, r2, r3
 80173be:	4a05      	ldr	r2, [pc, #20]	; (80173d4 <rfalTransceiveTx+0x290>)
 80173c0:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 80173c2:	4293      	cmp	r3, r2
 80173c4:	da10      	bge.n	80173e8 <rfalTransceiveTx+0x2a4>
 80173c6:	4b03      	ldr	r3, [pc, #12]	; (80173d4 <rfalTransceiveTx+0x290>)
 80173c8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80173ca:	4b02      	ldr	r3, [pc, #8]	; (80173d4 <rfalTransceiveTx+0x290>)
 80173cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80173ce:	1ad3      	subs	r3, r2, r3
 80173d0:	b29b      	uxth	r3, r3
 80173d2:	e00b      	b.n	80173ec <rfalTransceiveTx+0x2a8>
 80173d4:	20003618 	.word	0x20003618
 80173d8:	20003654 	.word	0x20003654
 80173dc:	200037f0 	.word	0x200037f0
 80173e0:	200039f8 	.word	0x200039f8
 80173e4:	20003652 	.word	0x20003652
 80173e8:	4b74      	ldr	r3, [pc, #464]	; (80175bc <rfalTransceiveTx+0x478>)
 80173ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80173ec:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 80173ee:	89bb      	ldrh	r3, [r7, #12]
 80173f0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80173f4:	bf28      	it	cs
 80173f6:	f44f 7302 	movcs.w	r3, #520	; 0x208
 80173fa:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 80173fc:	2300      	movs	r3, #0
 80173fe:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8017400:	4b6e      	ldr	r3, [pc, #440]	; (80175bc <rfalTransceiveTx+0x478>)
 8017402:	69d8      	ldr	r0, [r3, #28]
 8017404:	4b6d      	ldr	r3, [pc, #436]	; (80175bc <rfalTransceiveTx+0x478>)
 8017406:	8c1b      	ldrh	r3, [r3, #32]
 8017408:	3307      	adds	r3, #7
 801740a:	08db      	lsrs	r3, r3, #3
 801740c:	b299      	uxth	r1, r3
 801740e:	4b6b      	ldr	r3, [pc, #428]	; (80175bc <rfalTransceiveTx+0x478>)
 8017410:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8017414:	f003 0301 	and.w	r3, r3, #1
 8017418:	2b00      	cmp	r3, #0
 801741a:	bf0c      	ite	eq
 801741c:	2301      	moveq	r3, #1
 801741e:	2300      	movne	r3, #0
 8017420:	b2dc      	uxtb	r4, r3
 8017422:	4b66      	ldr	r3, [pc, #408]	; (80175bc <rfalTransceiveTx+0x478>)
 8017424:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8017428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801742c:	2b00      	cmp	r3, #0
 801742e:	bf0c      	ite	eq
 8017430:	2301      	moveq	r3, #1
 8017432:	2300      	movne	r3, #0
 8017434:	b2dd      	uxtb	r5, r3
 8017436:	4b61      	ldr	r3, [pc, #388]	; (80175bc <rfalTransceiveTx+0x478>)
 8017438:	785b      	ldrb	r3, [r3, #1]
 801743a:	2b08      	cmp	r3, #8
 801743c:	bf0c      	ite	eq
 801743e:	2301      	moveq	r3, #1
 8017440:	2300      	movne	r3, #0
 8017442:	b2db      	uxtb	r3, r3
 8017444:	1dba      	adds	r2, r7, #6
 8017446:	9205      	str	r2, [sp, #20]
 8017448:	89ba      	ldrh	r2, [r7, #12]
 801744a:	9204      	str	r2, [sp, #16]
 801744c:	4a5c      	ldr	r2, [pc, #368]	; (80175c0 <rfalTransceiveTx+0x47c>)
 801744e:	9203      	str	r2, [sp, #12]
 8017450:	4a5c      	ldr	r2, [pc, #368]	; (80175c4 <rfalTransceiveTx+0x480>)
 8017452:	9202      	str	r2, [sp, #8]
 8017454:	4a5c      	ldr	r2, [pc, #368]	; (80175c8 <rfalTransceiveTx+0x484>)
 8017456:	9201      	str	r2, [sp, #4]
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	462b      	mov	r3, r5
 801745c:	4622      	mov	r2, r4
 801745e:	f7f4 ff51 	bl	800c304 <iso15693VCDCode>
 8017462:	4603      	mov	r3, r0
 8017464:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 8017466:	89fb      	ldrh	r3, [r7, #14]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d009      	beq.n	8017480 <rfalTransceiveTx+0x33c>
 801746c:	89fb      	ldrh	r3, [r7, #14]
 801746e:	2b0d      	cmp	r3, #13
 8017470:	d006      	beq.n	8017480 <rfalTransceiveTx+0x33c>
                {
                    gRFAL.TxRx.status = ret;
 8017472:	4a52      	ldr	r2, [pc, #328]	; (80175bc <rfalTransceiveTx+0x478>)
 8017474:	89fb      	ldrh	r3, [r7, #14]
 8017476:	8353      	strh	r3, [r2, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8017478:	4b50      	ldr	r3, [pc, #320]	; (80175bc <rfalTransceiveTx+0x478>)
 801747a:	2213      	movs	r2, #19
 801747c:	761a      	strb	r2, [r3, #24]
                    break;
 801747e:	e098      	b.n	80175b2 <rfalTransceiveTx+0x46e>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 8017480:	88fb      	ldrh	r3, [r7, #6]
 8017482:	4619      	mov	r1, r3
 8017484:	484e      	ldr	r0, [pc, #312]	; (80175c0 <rfalTransceiveTx+0x47c>)
 8017486:	f003 ff21 	bl	801b2cc <st25r3916WriteFifo>
            {
 801748a:	e017      	b.n	80174bc <rfalTransceiveTx+0x378>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 801748c:	4b4b      	ldr	r3, [pc, #300]	; (80175bc <rfalTransceiveTx+0x478>)
 801748e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8017490:	461a      	mov	r2, r3
 8017492:	4b4a      	ldr	r3, [pc, #296]	; (80175bc <rfalTransceiveTx+0x478>)
 8017494:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017496:	4619      	mov	r1, r3
 8017498:	4b48      	ldr	r3, [pc, #288]	; (80175bc <rfalTransceiveTx+0x478>)
 801749a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801749c:	1acb      	subs	r3, r1, r3
 801749e:	4293      	cmp	r3, r2
 80174a0:	bfa8      	it	ge
 80174a2:	4613      	movge	r3, r2
 80174a4:	b29b      	uxth	r3, r3
 80174a6:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 80174a8:	4b44      	ldr	r3, [pc, #272]	; (80175bc <rfalTransceiveTx+0x478>)
 80174aa:	69db      	ldr	r3, [r3, #28]
 80174ac:	4a43      	ldr	r2, [pc, #268]	; (80175bc <rfalTransceiveTx+0x478>)
 80174ae:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 80174b0:	4413      	add	r3, r2
 80174b2:	88fa      	ldrh	r2, [r7, #6]
 80174b4:	4611      	mov	r1, r2
 80174b6:	4618      	mov	r0, r3
 80174b8:	f003 ff08 	bl	801b2cc <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 80174bc:	4b3f      	ldr	r3, [pc, #252]	; (80175bc <rfalTransceiveTx+0x478>)
 80174be:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80174c0:	88fb      	ldrh	r3, [r7, #6]
 80174c2:	4413      	add	r3, r2
 80174c4:	b29a      	uxth	r2, r3
 80174c6:	4b3d      	ldr	r3, [pc, #244]	; (80175bc <rfalTransceiveTx+0x478>)
 80174c8:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 80174ca:	4b3c      	ldr	r3, [pc, #240]	; (80175bc <rfalTransceiveTx+0x478>)
 80174cc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80174ce:	4b3b      	ldr	r3, [pc, #236]	; (80175bc <rfalTransceiveTx+0x478>)
 80174d0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80174d2:	429a      	cmp	r2, r3
 80174d4:	d201      	bcs.n	80174da <rfalTransceiveTx+0x396>
 80174d6:	220f      	movs	r2, #15
 80174d8:	e000      	b.n	80174dc <rfalTransceiveTx+0x398>
 80174da:	2211      	movs	r2, #17
 80174dc:	4b37      	ldr	r3, [pc, #220]	; (80175bc <rfalTransceiveTx+0x478>)
 80174de:	761a      	strb	r2, [r3, #24]
            break;
 80174e0:	e067      	b.n	80175b2 <rfalTransceiveTx+0x46e>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 80174e2:	2048      	movs	r0, #72	; 0x48
 80174e4:	f004 fa70 	bl	801b9c8 <st25r3916GetInterrupt>
 80174e8:	4603      	mov	r3, r0
 80174ea:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d05c      	beq.n	80175ac <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	f003 0308 	and.w	r3, r3, #8
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d003      	beq.n	8017504 <rfalTransceiveTx+0x3c0>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 80174fc:	4b2f      	ldr	r3, [pc, #188]	; (80175bc <rfalTransceiveTx+0x478>)
 80174fe:	2212      	movs	r2, #18
 8017500:	761a      	strb	r2, [r3, #24]
 8017502:	e00b      	b.n	801751c <rfalTransceiveTx+0x3d8>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801750a:	2b00      	cmp	r3, #0
 801750c:	d150      	bne.n	80175b0 <rfalTransceiveTx+0x46c>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 801750e:	4b2b      	ldr	r3, [pc, #172]	; (80175bc <rfalTransceiveTx+0x478>)
 8017510:	2203      	movs	r2, #3
 8017512:	835a      	strh	r2, [r3, #26]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8017514:	4b29      	ldr	r3, [pc, #164]	; (80175bc <rfalTransceiveTx+0x478>)
 8017516:	2213      	movs	r2, #19
 8017518:	761a      	strb	r2, [r3, #24]
               break;
 801751a:	e04a      	b.n	80175b2 <rfalTransceiveTx+0x46e>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 801751c:	4b27      	ldr	r3, [pc, #156]	; (80175bc <rfalTransceiveTx+0x478>)
 801751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017520:	2b00      	cmp	r3, #0
 8017522:	d110      	bne.n	8017546 <rfalTransceiveTx+0x402>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8017524:	4b25      	ldr	r3, [pc, #148]	; (80175bc <rfalTransceiveTx+0x478>)
 8017526:	799b      	ldrb	r3, [r3, #6]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d003      	beq.n	8017534 <rfalTransceiveTx+0x3f0>
 801752c:	2140      	movs	r1, #64	; 0x40
 801752e:	2001      	movs	r0, #1
 8017530:	f003 ffad 	bl	801b48e <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 8017534:	f7ff fd12 	bl	8016f5c <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 8017538:	4b20      	ldr	r3, [pc, #128]	; (80175bc <rfalTransceiveTx+0x478>)
 801753a:	2200      	movs	r2, #0
 801753c:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 801753e:	4b1f      	ldr	r3, [pc, #124]	; (80175bc <rfalTransceiveTx+0x478>)
 8017540:	2200      	movs	r2, #0
 8017542:	761a      	strb	r2, [r3, #24]
                break;
 8017544:	e035      	b.n	80175b2 <rfalTransceiveTx+0x46e>
            }
            
            rfalCheckEnableObsModeRx();
 8017546:	4b1d      	ldr	r3, [pc, #116]	; (80175bc <rfalTransceiveTx+0x478>)
 8017548:	799b      	ldrb	r3, [r3, #6]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d008      	beq.n	8017560 <rfalTransceiveTx+0x41c>
 801754e:	4b1b      	ldr	r3, [pc, #108]	; (80175bc <rfalTransceiveTx+0x478>)
 8017550:	799b      	ldrb	r3, [r3, #6]
 8017552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017556:	b2db      	uxtb	r3, r3
 8017558:	4619      	mov	r1, r3
 801755a:	2001      	movs	r0, #1
 801755c:	f003 ff97 	bl	801b48e <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 8017560:	4b16      	ldr	r3, [pc, #88]	; (80175bc <rfalTransceiveTx+0x478>)
 8017562:	2251      	movs	r2, #81	; 0x51
 8017564:	761a      	strb	r2, [r3, #24]
            break;
 8017566:	e024      	b.n	80175b2 <rfalTransceiveTx+0x46e>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8017568:	4b14      	ldr	r3, [pc, #80]	; (80175bc <rfalTransceiveTx+0x478>)
 801756a:	8b5b      	ldrh	r3, [r3, #26]
 801756c:	2b02      	cmp	r3, #2
 801756e:	d102      	bne.n	8017576 <rfalTransceiveTx+0x432>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 8017570:	4b12      	ldr	r3, [pc, #72]	; (80175bc <rfalTransceiveTx+0x478>)
 8017572:	2208      	movs	r2, #8
 8017574:	835a      	strh	r2, [r3, #26]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8017576:	4b11      	ldr	r3, [pc, #68]	; (80175bc <rfalTransceiveTx+0x478>)
 8017578:	799b      	ldrb	r3, [r3, #6]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d003      	beq.n	8017586 <rfalTransceiveTx+0x442>
 801757e:	2140      	movs	r1, #64	; 0x40
 8017580:	2001      	movs	r0, #1
 8017582:	f003 ff84 	bl	801b48e <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8017586:	f7ff fce9 	bl	8016f5c <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 801758a:	4b0c      	ldr	r3, [pc, #48]	; (80175bc <rfalTransceiveTx+0x478>)
 801758c:	2200      	movs	r2, #0
 801758e:	761a      	strb	r2, [r3, #24]
            break;
 8017590:	e00f      	b.n	80175b2 <rfalTransceiveTx+0x46e>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8017592:	4b0a      	ldr	r3, [pc, #40]	; (80175bc <rfalTransceiveTx+0x478>)
 8017594:	2208      	movs	r2, #8
 8017596:	835a      	strh	r2, [r3, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8017598:	4b08      	ldr	r3, [pc, #32]	; (80175bc <rfalTransceiveTx+0x478>)
 801759a:	2213      	movs	r2, #19
 801759c:	761a      	strb	r2, [r3, #24]
            break;
 801759e:	e008      	b.n	80175b2 <rfalTransceiveTx+0x46e>
                break;
 80175a0:	bf00      	nop
 80175a2:	e006      	b.n	80175b2 <rfalTransceiveTx+0x46e>
                   break;
 80175a4:	bf00      	nop
 80175a6:	e004      	b.n	80175b2 <rfalTransceiveTx+0x46e>
               break;  /* No interrupt to process */
 80175a8:	bf00      	nop
 80175aa:	e002      	b.n	80175b2 <rfalTransceiveTx+0x46e>
               break;  /* No interrupt to process */
 80175ac:	bf00      	nop
 80175ae:	e000      	b.n	80175b2 <rfalTransceiveTx+0x46e>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 80175b0:	bf00      	nop
    }
}
 80175b2:	bf00      	nop
 80175b4:	3710      	adds	r7, #16
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bdb0      	pop	{r4, r5, r7, pc}
 80175ba:	bf00      	nop
 80175bc:	20003618 	.word	0x20003618
 80175c0:	200037f0 	.word	0x200037f0
 80175c4:	200039f8 	.word	0x200039f8
 80175c8:	20003652 	.word	0x20003652

080175cc <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 80175cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175ce:	b089      	sub	sp, #36	; 0x24
 80175d0:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 80175d2:	2300      	movs	r3, #0
 80175d4:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 80175d6:	4baf      	ldr	r3, [pc, #700]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80175d8:	7e1a      	ldrb	r2, [r3, #24]
 80175da:	4bae      	ldr	r3, [pc, #696]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80175dc:	7e5b      	ldrb	r3, [r3, #25]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d003      	beq.n	80175ea <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 80175e2:	4bac      	ldr	r3, [pc, #688]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80175e4:	7e1a      	ldrb	r2, [r3, #24]
 80175e6:	4bab      	ldr	r3, [pc, #684]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80175e8:	765a      	strb	r2, [r3, #25]
    }
    
    switch( gRFAL.TxRx.state )
 80175ea:	4baa      	ldr	r3, [pc, #680]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80175ec:	7e1b      	ldrb	r3, [r3, #24]
 80175ee:	3b51      	subs	r3, #81	; 0x51
 80175f0:	2b09      	cmp	r3, #9
 80175f2:	f200 8339 	bhi.w	8017c68 <rfalTransceiveRx+0x69c>
 80175f6:	a201      	add	r2, pc, #4	; (adr r2, 80175fc <rfalTransceiveRx+0x30>)
 80175f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175fc:	08017625 	.word	0x08017625
 8017600:	08017bd5 	.word	0x08017bd5
 8017604:	0801765d 	.word	0x0801765d
 8017608:	08017701 	.word	0x08017701
 801760c:	08017b19 	.word	0x08017b19
 8017610:	080177df 	.word	0x080177df
 8017614:	08017913 	.word	0x08017913
 8017618:	08017c1f 	.word	0x08017c1f
 801761c:	08017af1 	.word	0x08017af1
 8017620:	08017bab 	.word	0x08017bab
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 8017624:	4b9b      	ldr	r3, [pc, #620]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017626:	2200      	movs	r2, #0
 8017628:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 801762a:	4b9a      	ldr	r3, [pc, #616]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801762c:	2200      	movs	r2, #0
 801762e:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8017630:	4b98      	ldr	r3, [pc, #608]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017634:	2b00      	cmp	r3, #0
 8017636:	d003      	beq.n	8017640 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 8017638:	4b96      	ldr	r3, [pc, #600]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801763c:	2200      	movs	r2, #0
 801763e:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 8017640:	4b94      	ldr	r3, [pc, #592]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017642:	785b      	ldrb	r3, [r3, #1]
 8017644:	2b09      	cmp	r3, #9
 8017646:	d003      	beq.n	8017650 <rfalTransceiveRx+0x84>
 8017648:	4b92      	ldr	r3, [pc, #584]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801764a:	785b      	ldrb	r3, [r3, #1]
 801764c:	2b0d      	cmp	r3, #13
 801764e:	d101      	bne.n	8017654 <rfalTransceiveRx+0x88>
 8017650:	2252      	movs	r2, #82	; 0x52
 8017652:	e000      	b.n	8017656 <rfalTransceiveRx+0x8a>
 8017654:	2253      	movs	r2, #83	; 0x53
 8017656:	4b8f      	ldr	r3, [pc, #572]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017658:	761a      	strb	r2, [r3, #24]
            break;
 801765a:	e315      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 801765c:	f644 0020 	movw	r0, #18464	; 0x4820
 8017660:	f004 f9b2 	bl	801b9c8 <st25r3916GetInterrupt>
 8017664:	4603      	mov	r3, r0
 8017666:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2b00      	cmp	r3, #0
 801766c:	f000 8303 	beq.w	8017c76 <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017676:	2b00      	cmp	r3, #0
 8017678:	d00b      	beq.n	8017692 <rfalTransceiveRx+0xc6>
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	f003 0320 	and.w	r3, r3, #32
 8017680:	2b00      	cmp	r3, #0
 8017682:	d106      	bne.n	8017692 <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 8017684:	4b83      	ldr	r3, [pc, #524]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017686:	2204      	movs	r2, #4
 8017688:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801768a:	4b82      	ldr	r3, [pc, #520]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801768c:	225a      	movs	r2, #90	; 0x5a
 801768e:	761a      	strb	r2, [r3, #24]
                break;
 8017690:	e2fa      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017698:	2b00      	cmp	r3, #0
 801769a:	d015      	beq.n	80176c8 <rfalTransceiveRx+0xfc>
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f003 0320 	and.w	r3, r3, #32
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d110      	bne.n	80176c8 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 80176a6:	4b7b      	ldr	r3, [pc, #492]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176a8:	785b      	ldrb	r3, [r3, #1]
 80176aa:	2b09      	cmp	r3, #9
 80176ac:	d003      	beq.n	80176b6 <rfalTransceiveRx+0xea>
 80176ae:	4b79      	ldr	r3, [pc, #484]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176b0:	785b      	ldrb	r3, [r3, #1]
 80176b2:	2b0d      	cmp	r3, #13
 80176b4:	d101      	bne.n	80176ba <rfalTransceiveRx+0xee>
 80176b6:	2204      	movs	r2, #4
 80176b8:	e000      	b.n	80176bc <rfalTransceiveRx+0xf0>
 80176ba:	2225      	movs	r2, #37	; 0x25
 80176bc:	4b75      	ldr	r3, [pc, #468]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176be:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80176c0:	4b74      	ldr	r3, [pc, #464]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176c2:	225a      	movs	r2, #90	; 0x5a
 80176c4:	761a      	strb	r2, [r3, #24]
                break;
 80176c6:	e2df      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f003 0320 	and.w	r3, r3, #32
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d00f      	beq.n	80176f2 <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 80176d2:	2032      	movs	r0, #50	; 0x32
 80176d4:	f004 fa90 	bl	801bbf8 <timerCalculateTimer>
 80176d8:	4603      	mov	r3, r0
 80176da:	4a6e      	ldr	r2, [pc, #440]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176dc:	6453      	str	r3, [r2, #68]	; 0x44
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 80176de:	4b6d      	ldr	r3, [pc, #436]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176e0:	2254      	movs	r2, #84	; 0x54
 80176e2:	761a      	strb	r2, [r3, #24]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80176ea:	f023 0320 	bic.w	r3, r3, #32
 80176ee:	607b      	str	r3, [r7, #4]
 80176f0:	e006      	b.n	8017700 <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 80176f2:	4b68      	ldr	r3, [pc, #416]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176f4:	2203      	movs	r2, #3
 80176f6:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80176f8:	4b66      	ldr	r3, [pc, #408]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80176fa:	225a      	movs	r2, #90	; 0x5a
 80176fc:	761a      	strb	r2, [r3, #24]
                break;
 80176fe:	e2c3      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8017700:	4b64      	ldr	r3, [pc, #400]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017704:	4618      	mov	r0, r3
 8017706:	f004 fa85 	bl	801bc14 <timerIsExpired>
 801770a:	4603      	mov	r3, r0
 801770c:	2b00      	cmp	r3, #0
 801770e:	d005      	beq.n	801771c <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 8017710:	4b60      	ldr	r3, [pc, #384]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017712:	2209      	movs	r2, #9
 8017714:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8017716:	4b5f      	ldr	r3, [pc, #380]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017718:	225a      	movs	r2, #90	; 0x5a
 801771a:	761a      	strb	r2, [r3, #24]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 801771c:	485e      	ldr	r0, [pc, #376]	; (8017898 <rfalTransceiveRx+0x2cc>)
 801771e:	f004 f953 	bl	801b9c8 <st25r3916GetInterrupt>
 8017722:	4602      	mov	r2, r0
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	4313      	orrs	r3, r2
 8017728:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2b00      	cmp	r3, #0
 801772e:	f000 82a4 	beq.w	8017c7a <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	f003 0302 	and.w	r3, r3, #2
 8017738:	2b00      	cmp	r3, #0
 801773a:	d02f      	beq.n	801779c <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 801773c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017740:	f004 f942 	bl	801b9c8 <st25r3916GetInterrupt>
 8017744:	4603      	mov	r3, r0
 8017746:	2b00      	cmp	r3, #0
 8017748:	d006      	beq.n	8017758 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 801774a:	4b52      	ldr	r3, [pc, #328]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801774c:	2204      	movs	r2, #4
 801774e:	835a      	strh	r2, [r3, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8017750:	4b50      	ldr	r3, [pc, #320]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017752:	225a      	movs	r2, #90	; 0x5a
 8017754:	761a      	strb	r2, [r3, #24]
                    break;
 8017756:	e297      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 8017758:	2200      	movs	r2, #0
 801775a:	2102      	movs	r1, #2
 801775c:	2024      	movs	r0, #36	; 0x24
 801775e:	f003 ffa3 	bl	801b6a8 <st25r3916CheckReg>
 8017762:	4603      	mov	r3, r0
 8017764:	2b00      	cmp	r3, #0
 8017766:	d006      	beq.n	8017776 <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 8017768:	4b4a      	ldr	r3, [pc, #296]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801776a:	2204      	movs	r2, #4
 801776c:	835a      	strh	r2, [r3, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801776e:	4b49      	ldr	r3, [pc, #292]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017770:	225a      	movs	r2, #90	; 0x5a
 8017772:	761a      	strb	r2, [r3, #24]
                    break;
 8017774:	e288      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 8017776:	2020      	movs	r0, #32
 8017778:	f004 f926 	bl	801b9c8 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 801777c:	2204      	movs	r2, #4
 801777e:	2104      	movs	r1, #4
 8017780:	2031      	movs	r0, #49	; 0x31
 8017782:	f003 ff91 	bl	801b6a8 <st25r3916CheckReg>
 8017786:	4603      	mov	r3, r0
 8017788:	2b00      	cmp	r3, #0
 801778a:	d003      	beq.n	8017794 <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 801778c:	4b41      	ldr	r3, [pc, #260]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801778e:	2254      	movs	r2, #84	; 0x54
 8017790:	761a      	strb	r2, [r3, #24]
                    break;
 8017792:	e279      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8017794:	4b3f      	ldr	r3, [pc, #252]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017796:	2253      	movs	r2, #83	; 0x53
 8017798:	761a      	strb	r2, [r3, #24]
                break;
 801779a:	e275      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d008      	beq.n	80177b8 <rfalTransceiveRx+0x1ec>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	f003 0310 	and.w	r3, r3, #16
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d103      	bne.n	80177b8 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 80177b0:	4b38      	ldr	r3, [pc, #224]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80177b2:	2255      	movs	r2, #85	; 0x55
 80177b4:	761a      	strb	r2, [r3, #24]
                break;
 80177b6:	e267      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d003      	beq.n	80177ca <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 80177c2:	4b34      	ldr	r3, [pc, #208]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80177c4:	2253      	movs	r2, #83	; 0x53
 80177c6:	761a      	strb	r2, [r3, #24]
                break;
 80177c8:	e25e      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 80177ca:	4834      	ldr	r0, [pc, #208]	; (801789c <rfalTransceiveRx+0x2d0>)
 80177cc:	f004 f8fc 	bl	801b9c8 <st25r3916GetInterrupt>
 80177d0:	4602      	mov	r2, r0
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	4313      	orrs	r3, r2
 80177d6:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 80177d8:	4b2e      	ldr	r3, [pc, #184]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80177da:	2256      	movs	r2, #86	; 0x56
 80177dc:	761a      	strb	r2, [r3, #24]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d008      	beq.n	80177fa <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 80177e8:	4b2a      	ldr	r3, [pc, #168]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80177ea:	2209      	movs	r2, #9
 80177ec:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80177ee:	4b29      	ldr	r3, [pc, #164]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80177f0:	2257      	movs	r2, #87	; 0x57
 80177f2:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 80177f4:	f7ff fb7a 	bl	8016eec <rfalErrorHandling>
                break;
 80177f8:	e246      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 80177fa:	4b26      	ldr	r3, [pc, #152]	; (8017894 <rfalTransceiveRx+0x2c8>)
 80177fc:	785b      	ldrb	r3, [r3, #1]
 80177fe:	2b09      	cmp	r3, #9
 8017800:	d01d      	beq.n	801783e <rfalTransceiveRx+0x272>
 8017802:	4b24      	ldr	r3, [pc, #144]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017804:	785b      	ldrb	r3, [r3, #1]
 8017806:	2b0d      	cmp	r3, #13
 8017808:	d019      	beq.n	801783e <rfalTransceiveRx+0x272>
 801780a:	4b22      	ldr	r3, [pc, #136]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801780c:	785b      	ldrb	r3, [r3, #1]
 801780e:	2b0a      	cmp	r3, #10
 8017810:	d015      	beq.n	801783e <rfalTransceiveRx+0x272>
 8017812:	4b20      	ldr	r3, [pc, #128]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017814:	785b      	ldrb	r3, [r3, #1]
 8017816:	2b0b      	cmp	r3, #11
 8017818:	d011      	beq.n	801783e <rfalTransceiveRx+0x272>
 801781a:	4b1e      	ldr	r3, [pc, #120]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801781c:	785b      	ldrb	r3, [r3, #1]
 801781e:	2b0c      	cmp	r3, #12
 8017820:	d00d      	beq.n	801783e <rfalTransceiveRx+0x272>
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017828:	2b00      	cmp	r3, #0
 801782a:	d008      	beq.n	801783e <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 801782c:	4b19      	ldr	r3, [pc, #100]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801782e:	2209      	movs	r2, #9
 8017830:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8017832:	4b18      	ldr	r3, [pc, #96]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017834:	2257      	movs	r2, #87	; 0x57
 8017836:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8017838:	f7ff fb58 	bl	8016eec <rfalErrorHandling>
                break;
 801783c:	e224      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017844:	2b00      	cmp	r3, #0
 8017846:	d008      	beq.n	801785a <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 8017848:	4b12      	ldr	r3, [pc, #72]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801784a:	221b      	movs	r2, #27
 801784c:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801784e:	4b11      	ldr	r3, [pc, #68]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017850:	2257      	movs	r2, #87	; 0x57
 8017852:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8017854:	f7ff fb4a 	bl	8016eec <rfalErrorHandling>
                break;
 8017858:	e216      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017860:	2b00      	cmp	r3, #0
 8017862:	d008      	beq.n	8017876 <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 8017864:	4b0b      	ldr	r3, [pc, #44]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017866:	2215      	movs	r2, #21
 8017868:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 801786a:	4b0a      	ldr	r3, [pc, #40]	; (8017894 <rfalTransceiveRx+0x2c8>)
 801786c:	2257      	movs	r2, #87	; 0x57
 801786e:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 8017870:	f7ff fb3c 	bl	8016eec <rfalErrorHandling>
                break;
 8017874:	e208      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	f003 0304 	and.w	r3, r3, #4
 801787c:	2b00      	cmp	r3, #0
 801787e:	d00f      	beq.n	80178a0 <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 8017880:	4b04      	ldr	r3, [pc, #16]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017882:	221d      	movs	r2, #29
 8017884:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8017886:	4b03      	ldr	r3, [pc, #12]	; (8017894 <rfalTransceiveRx+0x2c8>)
 8017888:	2257      	movs	r2, #87	; 0x57
 801788a:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 801788c:	f7ff fb2e 	bl	8016eec <rfalErrorHandling>
                break;
 8017890:	e1fa      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
 8017892:	bf00      	nop
 8017894:	20003618 	.word	0x20003618
 8017898:	08000852 	.word	0x08000852
 801789c:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 80178a0:	4b9c      	ldr	r3, [pc, #624]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178a2:	785b      	ldrb	r3, [r3, #1]
 80178a4:	2b0a      	cmp	r3, #10
 80178a6:	d007      	beq.n	80178b8 <rfalTransceiveRx+0x2ec>
 80178a8:	4b9a      	ldr	r3, [pc, #616]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178aa:	785b      	ldrb	r3, [r3, #1]
 80178ac:	2b0b      	cmp	r3, #11
 80178ae:	d003      	beq.n	80178b8 <rfalTransceiveRx+0x2ec>
 80178b0:	4b98      	ldr	r3, [pc, #608]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178b2:	785b      	ldrb	r3, [r3, #1]
 80178b4:	2b0c      	cmp	r3, #12
 80178b6:	d10b      	bne.n	80178d0 <rfalTransceiveRx+0x304>
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d006      	beq.n	80178d0 <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 80178c2:	4b94      	ldr	r3, [pc, #592]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178c4:	2225      	movs	r2, #37	; 0x25
 80178c6:	835a      	strh	r2, [r3, #26]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80178c8:	4b92      	ldr	r3, [pc, #584]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178ca:	225a      	movs	r2, #90	; 0x5a
 80178cc:	761a      	strb	r2, [r3, #24]
                 break;
 80178ce:	e1db      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f003 0310 	and.w	r3, r3, #16
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d014      	beq.n	8017904 <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 80178da:	f000 fa17 	bl	8017d0c <rfalFIFOStatusIsIncompleteByte>
 80178de:	4603      	mov	r3, r0
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d003      	beq.n	80178ec <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 80178e4:	4b8b      	ldr	r3, [pc, #556]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178e6:	2228      	movs	r2, #40	; 0x28
 80178e8:	835a      	strh	r2, [r3, #26]
 80178ea:	e007      	b.n	80178fc <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 80178ec:	f000 fa20 	bl	8017d30 <rfalFIFOStatusIsMissingPar>
 80178f0:	4603      	mov	r3, r0
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d002      	beq.n	80178fc <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 80178f6:	4b87      	ldr	r3, [pc, #540]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178f8:	2209      	movs	r2, #9
 80178fa:	835a      	strh	r2, [r3, #26]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 80178fc:	4b85      	ldr	r3, [pc, #532]	; (8017b14 <rfalTransceiveRx+0x548>)
 80178fe:	2257      	movs	r2, #87	; 0x57
 8017900:	761a      	strb	r2, [r3, #24]
 8017902:	e006      	b.n	8017912 <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 8017904:	4b83      	ldr	r3, [pc, #524]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017906:	2203      	movs	r2, #3
 8017908:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 801790a:	4b82      	ldr	r3, [pc, #520]	; (8017b14 <rfalTransceiveRx+0x548>)
 801790c:	225a      	movs	r2, #90	; 0x5a
 801790e:	761a      	strb	r2, [r3, #24]
                break;
 8017910:	e1ba      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 8017912:	f000 f9df 	bl	8017cd4 <rfalFIFOStatusGetNumBytes>
 8017916:	4603      	mov	r3, r0
 8017918:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 801791a:	4b7e      	ldr	r3, [pc, #504]	; (8017b14 <rfalTransceiveRx+0x548>)
 801791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801791e:	f003 0302 	and.w	r3, r3, #2
 8017922:	2b00      	cmp	r3, #0
 8017924:	d117      	bne.n	8017956 <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 8017926:	4b7b      	ldr	r3, [pc, #492]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017928:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801792a:	89fb      	ldrh	r3, [r7, #14]
 801792c:	4413      	add	r3, r2
 801792e:	b29b      	uxth	r3, r3
 8017930:	2b00      	cmp	r3, #0
 8017932:	d010      	beq.n	8017956 <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 8017934:	89fb      	ldrh	r3, [r7, #14]
 8017936:	2b02      	cmp	r3, #2
 8017938:	d903      	bls.n	8017942 <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 801793a:	89fb      	ldrh	r3, [r7, #14]
 801793c:	3b02      	subs	r3, #2
 801793e:	81fb      	strh	r3, [r7, #14]
 8017940:	e009      	b.n	8017956 <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 8017942:	4b74      	ldr	r3, [pc, #464]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017944:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017946:	2b02      	cmp	r3, #2
 8017948:	d905      	bls.n	8017956 <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 801794a:	4b72      	ldr	r3, [pc, #456]	; (8017b14 <rfalTransceiveRx+0x548>)
 801794c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801794e:	3b02      	subs	r3, #2
 8017950:	b29a      	uxth	r2, r3
 8017952:	4b70      	ldr	r3, [pc, #448]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017954:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8017956:	4b6f      	ldr	r3, [pc, #444]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017958:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801795a:	89fb      	ldrh	r3, [r7, #14]
 801795c:	4413      	add	r3, r2
 801795e:	b29a      	uxth	r2, r3
 8017960:	4b6c      	ldr	r3, [pc, #432]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017962:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8017964:	4b6b      	ldr	r3, [pc, #428]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017966:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017968:	4b6a      	ldr	r3, [pc, #424]	; (8017b14 <rfalTransceiveRx+0x548>)
 801796a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801796c:	3307      	adds	r3, #7
 801796e:	08db      	lsrs	r3, r3, #3
 8017970:	b29b      	uxth	r3, r3
 8017972:	429a      	cmp	r2, r3
 8017974:	d90f      	bls.n	8017996 <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8017976:	4b67      	ldr	r3, [pc, #412]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801797a:	3307      	adds	r3, #7
 801797c:	08db      	lsrs	r3, r3, #3
 801797e:	b29a      	uxth	r2, r3
 8017980:	4b64      	ldr	r3, [pc, #400]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017982:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 8017988:	4b62      	ldr	r3, [pc, #392]	; (8017b14 <rfalTransceiveRx+0x548>)
 801798a:	8b5b      	ldrh	r3, [r3, #26]
 801798c:	2b02      	cmp	r3, #2
 801798e:	d102      	bne.n	8017996 <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 8017990:	4b60      	ldr	r3, [pc, #384]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017992:	2201      	movs	r2, #1
 8017994:	835a      	strh	r2, [r3, #26]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8017996:	4b5f      	ldr	r3, [pc, #380]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801799a:	4a5e      	ldr	r2, [pc, #376]	; (8017b14 <rfalTransceiveRx+0x548>)
 801799c:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 801799e:	4413      	add	r3, r2
 80179a0:	89fa      	ldrh	r2, [r7, #14]
 80179a2:	4611      	mov	r1, r2
 80179a4:	4618      	mov	r0, r3
 80179a6:	f003 fcb4 	bl	801b312 <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 80179aa:	4b5a      	ldr	r3, [pc, #360]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d019      	beq.n	80179e6 <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 80179b2:	4b58      	ldr	r3, [pc, #352]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179b4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80179b6:	4b57      	ldr	r3, [pc, #348]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ba:	00d2      	lsls	r2, r2, #3
 80179bc:	b292      	uxth	r2, r2
 80179be:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 80179c0:	f000 f9a4 	bl	8017d0c <rfalFIFOStatusIsIncompleteByte>
 80179c4:	4603      	mov	r3, r0
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d00d      	beq.n	80179e6 <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 80179ca:	f000 f9c3 	bl	8017d54 <rfalFIFOGetNumIncompleteBits>
 80179ce:	4603      	mov	r3, r0
 80179d0:	f1c3 0208 	rsb	r2, r3, #8
 80179d4:	4b4f      	ldr	r3, [pc, #316]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179d8:	8819      	ldrh	r1, [r3, #0]
 80179da:	b292      	uxth	r2, r2
 80179dc:	4b4d      	ldr	r3, [pc, #308]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179e0:	1a8a      	subs	r2, r1, r2
 80179e2:	b292      	uxth	r2, r2
 80179e4:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 80179e6:	4b4b      	ldr	r3, [pc, #300]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179e8:	785b      	ldrb	r3, [r3, #1]
 80179ea:	2b07      	cmp	r3, #7
 80179ec:	d003      	beq.n	80179f6 <rfalTransceiveRx+0x42a>
 80179ee:	4b49      	ldr	r3, [pc, #292]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179f0:	785b      	ldrb	r3, [r3, #1]
 80179f2:	2b08      	cmp	r3, #8
 80179f4:	d165      	bne.n	8017ac2 <rfalTransceiveRx+0x4f6>
 80179f6:	4b47      	ldr	r3, [pc, #284]	; (8017b14 <rfalTransceiveRx+0x548>)
 80179f8:	8b5b      	ldrh	r3, [r3, #26]
 80179fa:	2b02      	cmp	r3, #2
 80179fc:	d161      	bne.n	8017ac2 <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 80179fe:	2300      	movs	r3, #0
 8017a00:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8017a02:	4b44      	ldr	r3, [pc, #272]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017a06:	4b43      	ldr	r3, [pc, #268]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a08:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 8017a0a:	4b42      	ldr	r3, [pc, #264]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a0c:	f8d3 53ec 	ldr.w	r5, [r3, #1004]	; 0x3ec
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 8017a10:	4b40      	ldr	r3, [pc, #256]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a12:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8017a16:	3307      	adds	r3, #7
 8017a18:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8017a1a:	b29e      	uxth	r6, r3
 8017a1c:	4b3d      	ldr	r3, [pc, #244]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a1e:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8017a22:	4a3c      	ldr	r2, [pc, #240]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a24:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 8017a28:	493a      	ldr	r1, [pc, #232]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a2a:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8017a2c:	2908      	cmp	r1, #8
 8017a2e:	bf0c      	ite	eq
 8017a30:	2101      	moveq	r1, #1
 8017a32:	2100      	movne	r1, #0
 8017a34:	b2c9      	uxtb	r1, r1
 8017a36:	9103      	str	r1, [sp, #12]
 8017a38:	9202      	str	r2, [sp, #8]
 8017a3a:	9301      	str	r3, [sp, #4]
 8017a3c:	1cbb      	adds	r3, r7, #2
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	4633      	mov	r3, r6
 8017a42:	462a      	mov	r2, r5
 8017a44:	4621      	mov	r1, r4
 8017a46:	f7f4 fdd3 	bl	800c5f0 <iso15693VICCDecode>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 8017a4e:	897b      	ldrh	r3, [r7, #10]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d002      	beq.n	8017a5a <rfalTransceiveRx+0x48e>
 8017a54:	897b      	ldrh	r3, [r7, #10]
 8017a56:	2b15      	cmp	r3, #21
 8017a58:	d11f      	bne.n	8017a9a <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 8017a5a:	4b2e      	ldr	r3, [pc, #184]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a5c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8017a60:	f003 0302 	and.w	r3, r3, #2
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d118      	bne.n	8017a9a <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8017a68:	4b2a      	ldr	r3, [pc, #168]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a6a:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8017a6e:	881b      	ldrh	r3, [r3, #0]
 8017a70:	f003 0307 	and.w	r3, r3, #7
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d10f      	bne.n	8017a9a <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 8017a7a:	4b26      	ldr	r3, [pc, #152]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a7c:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8017a80:	881b      	ldrh	r3, [r3, #0]
 8017a82:	2b0f      	cmp	r3, #15
 8017a84:	d909      	bls.n	8017a9a <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 8017a86:	4b23      	ldr	r3, [pc, #140]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a88:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8017a8c:	881a      	ldrh	r2, [r3, #0]
 8017a8e:	4b21      	ldr	r3, [pc, #132]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a90:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8017a94:	3a10      	subs	r2, #16
 8017a96:	b292      	uxth	r2, r2
 8017a98:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 8017a9a:	4a1e      	ldr	r2, [pc, #120]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a9c:	4b1d      	ldr	r3, [pc, #116]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017a9e:	f102 041c 	add.w	r4, r2, #28
 8017aa2:	f503 7579 	add.w	r5, r3, #996	; 0x3e4
 8017aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017aaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017aae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 8017ab2:	897b      	ldrh	r3, [r7, #10]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d001      	beq.n	8017abc <rfalTransceiveRx+0x4f0>
 8017ab8:	897b      	ldrh	r3, [r7, #10]
 8017aba:	e000      	b.n	8017abe <rfalTransceiveRx+0x4f2>
 8017abc:	2302      	movs	r3, #2
 8017abe:	4a15      	ldr	r2, [pc, #84]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017ac0:	8353      	strh	r3, [r2, #26]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 8017ac2:	4b14      	ldr	r3, [pc, #80]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017ac4:	8b5b      	ldrh	r3, [r3, #26]
 8017ac6:	2b02      	cmp	r3, #2
 8017ac8:	d003      	beq.n	8017ad2 <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 8017aca:	4b12      	ldr	r3, [pc, #72]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017acc:	225a      	movs	r2, #90	; 0x5a
 8017ace:	761a      	strb	r2, [r3, #24]
                break;
 8017ad0:	e0da      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 8017ad2:	4b10      	ldr	r3, [pc, #64]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017ad4:	785b      	ldrb	r3, [r3, #1]
 8017ad6:	2b09      	cmp	r3, #9
 8017ad8:	d003      	beq.n	8017ae2 <rfalTransceiveRx+0x516>
 8017ada:	4b0e      	ldr	r3, [pc, #56]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017adc:	785b      	ldrb	r3, [r3, #1]
 8017ade:	2b0d      	cmp	r3, #13
 8017ae0:	d103      	bne.n	8017aea <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 8017ae2:	4b0c      	ldr	r3, [pc, #48]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017ae4:	2258      	movs	r2, #88	; 0x58
 8017ae6:	761a      	strb	r2, [r3, #24]
                break;
 8017ae8:	e0ce      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8017aea:	4b0a      	ldr	r3, [pc, #40]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017aec:	2259      	movs	r2, #89	; 0x59
 8017aee:	761a      	strb	r2, [r3, #24]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8017af0:	4b08      	ldr	r3, [pc, #32]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017af2:	799b      	ldrb	r3, [r3, #6]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d003      	beq.n	8017b00 <rfalTransceiveRx+0x534>
 8017af8:	2140      	movs	r1, #64	; 0x40
 8017afa:	2001      	movs	r0, #1
 8017afc:	f003 fcc7 	bl	801b48e <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8017b00:	f7ff fa2c 	bl	8016f5c <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 8017b04:	4b03      	ldr	r3, [pc, #12]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017b06:	2200      	movs	r2, #0
 8017b08:	835a      	strh	r2, [r3, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 8017b0a:	4b02      	ldr	r3, [pc, #8]	; (8017b14 <rfalTransceiveRx+0x548>)
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	761a      	strb	r2, [r3, #24]
            break;
 8017b10:	e0ba      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
 8017b12:	bf00      	nop
 8017b14:	20003618 	.word	0x20003618
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8017b18:	2032      	movs	r0, #50	; 0x32
 8017b1a:	f004 f86d 	bl	801bbf8 <timerCalculateTimer>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	4a5b      	ldr	r2, [pc, #364]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b22:	6453      	str	r3, [r2, #68]	; 0x44
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 8017b24:	f000 f8d6 	bl	8017cd4 <rfalFIFOStatusGetNumBytes>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 8017b2c:	4b58      	ldr	r3, [pc, #352]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b2e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017b30:	89fb      	ldrh	r3, [r7, #14]
 8017b32:	4413      	add	r3, r2
 8017b34:	b29a      	uxth	r2, r3
 8017b36:	4b56      	ldr	r3, [pc, #344]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b38:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8017b3a:	4b55      	ldr	r3, [pc, #340]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b3c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017b3e:	4b54      	ldr	r3, [pc, #336]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b42:	3307      	adds	r3, #7
 8017b44:	08db      	lsrs	r3, r3, #3
 8017b46:	b29b      	uxth	r3, r3
 8017b48:	429a      	cmp	r2, r3
 8017b4a:	d909      	bls.n	8017b60 <rfalTransceiveRx+0x594>
 8017b4c:	4b50      	ldr	r3, [pc, #320]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b50:	3307      	adds	r3, #7
 8017b52:	08db      	lsrs	r3, r3, #3
 8017b54:	b29a      	uxth	r2, r3
 8017b56:	4b4e      	ldr	r3, [pc, #312]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017b5a:	1ad3      	subs	r3, r2, r3
 8017b5c:	b29b      	uxth	r3, r3
 8017b5e:	e000      	b.n	8017b62 <rfalTransceiveRx+0x596>
 8017b60:	89fb      	ldrh	r3, [r7, #14]
 8017b62:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 8017b64:	4b4a      	ldr	r3, [pc, #296]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b68:	4a49      	ldr	r2, [pc, #292]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b6a:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8017b6c:	4413      	add	r3, r2
 8017b6e:	89ba      	ldrh	r2, [r7, #12]
 8017b70:	4611      	mov	r1, r2
 8017b72:	4618      	mov	r0, r3
 8017b74:	f003 fbcd 	bl	801b312 <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 8017b78:	4b45      	ldr	r3, [pc, #276]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b7a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8017b7c:	89bb      	ldrh	r3, [r7, #12]
 8017b7e:	4413      	add	r3, r2
 8017b80:	b29a      	uxth	r2, r3
 8017b82:	4b43      	ldr	r3, [pc, #268]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017b84:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 8017b86:	89ba      	ldrh	r2, [r7, #12]
 8017b88:	89fb      	ldrh	r3, [r7, #14]
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	d207      	bcs.n	8017b9e <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 8017b8e:	89fa      	ldrh	r2, [r7, #14]
 8017b90:	89bb      	ldrh	r3, [r7, #12]
 8017b92:	1ad3      	subs	r3, r2, r3
 8017b94:	b29b      	uxth	r3, r3
 8017b96:	4619      	mov	r1, r3
 8017b98:	2000      	movs	r0, #0
 8017b9a:	f003 fbba 	bl	801b312 <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 8017b9e:	f000 f88d 	bl	8017cbc <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8017ba2:	4b3b      	ldr	r3, [pc, #236]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017ba4:	2254      	movs	r2, #84	; 0x54
 8017ba6:	761a      	strb	r2, [r3, #24]
            break;
 8017ba8:	e06e      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 8017baa:	4b39      	ldr	r3, [pc, #228]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017bac:	799b      	ldrb	r3, [r3, #6]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d003      	beq.n	8017bba <rfalTransceiveRx+0x5ee>
 8017bb2:	2140      	movs	r1, #64	; 0x40
 8017bb4:	2001      	movs	r0, #1
 8017bb6:	f003 fc6a 	bl	801b48e <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 8017bba:	f7ff f9cf 	bl	8016f5c <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 8017bbe:	4b34      	ldr	r3, [pc, #208]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017bc0:	8b5b      	ldrh	r3, [r3, #26]
 8017bc2:	2b02      	cmp	r3, #2
 8017bc4:	d102      	bne.n	8017bcc <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 8017bc6:	4b32      	ldr	r3, [pc, #200]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017bc8:	2208      	movs	r2, #8
 8017bca:	835a      	strh	r2, [r3, #26]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8017bcc:	4b30      	ldr	r3, [pc, #192]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017bce:	2200      	movs	r2, #0
 8017bd0:	761a      	strb	r2, [r3, #24]
            break;
 8017bd2:	e059      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 8017bd4:	482f      	ldr	r0, [pc, #188]	; (8017c94 <rfalTransceiveRx+0x6c8>)
 8017bd6:	f003 fef7 	bl	801b9c8 <st25r3916GetInterrupt>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d04c      	beq.n	8017c7e <rfalTransceiveRx+0x6b2>
            {    
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d002      	beq.n	8017bf4 <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8017bee:	4b28      	ldr	r3, [pc, #160]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017bf0:	2253      	movs	r2, #83	; 0x53
 8017bf2:	761a      	strb	r2, [r3, #24]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d005      	beq.n	8017c0a <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 8017bfe:	4b24      	ldr	r3, [pc, #144]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c00:	2204      	movs	r2, #4
 8017c02:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8017c04:	4b22      	ldr	r3, [pc, #136]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c06:	225a      	movs	r2, #90	; 0x5a
 8017c08:	761a      	strb	r2, [r3, #24]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	da38      	bge.n	8017c82 <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 8017c10:	4b1f      	ldr	r3, [pc, #124]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c12:	2225      	movs	r2, #37	; 0x25
 8017c14:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8017c16:	4b1e      	ldr	r3, [pc, #120]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c18:	225a      	movs	r2, #90	; 0x5a
 8017c1a:	761a      	strb	r2, [r3, #24]
            }
            break;
 8017c1c:	e031      	b.n	8017c82 <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 8017c1e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8017c22:	f003 fed1 	bl	801b9c8 <st25r3916GetInterrupt>
 8017c26:	4603      	mov	r3, r0
 8017c28:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d02a      	beq.n	8017c86 <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d003      	beq.n	8017c42 <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8017c3a:	4b15      	ldr	r3, [pc, #84]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c3c:	2259      	movs	r2, #89	; 0x59
 8017c3e:	761a      	strb	r2, [r3, #24]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 8017c40:	e022      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d006      	beq.n	8017c5a <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 8017c4c:	4b10      	ldr	r3, [pc, #64]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c4e:	221d      	movs	r2, #29
 8017c50:	835a      	strh	r2, [r3, #26]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8017c52:	4b0f      	ldr	r3, [pc, #60]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c54:	225a      	movs	r2, #90	; 0x5a
 8017c56:	761a      	strb	r2, [r3, #24]
            break;
 8017c58:	e016      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 8017c5a:	4b0d      	ldr	r3, [pc, #52]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c5c:	2203      	movs	r2, #3
 8017c5e:	835a      	strh	r2, [r3, #26]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8017c60:	4b0b      	ldr	r3, [pc, #44]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c62:	225a      	movs	r2, #90	; 0x5a
 8017c64:	761a      	strb	r2, [r3, #24]
            break;
 8017c66:	e00f      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 8017c68:	4b09      	ldr	r3, [pc, #36]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c6a:	2208      	movs	r2, #8
 8017c6c:	835a      	strh	r2, [r3, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8017c6e:	4b08      	ldr	r3, [pc, #32]	; (8017c90 <rfalTransceiveRx+0x6c4>)
 8017c70:	225a      	movs	r2, #90	; 0x5a
 8017c72:	761a      	strb	r2, [r3, #24]
            break;           
 8017c74:	e008      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 8017c76:	bf00      	nop
 8017c78:	e006      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 8017c7a:	bf00      	nop
 8017c7c:	e004      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 8017c7e:	bf00      	nop
 8017c80:	e002      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
            break;
 8017c82:	bf00      	nop
 8017c84:	e000      	b.n	8017c88 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 8017c86:	bf00      	nop
    }    
}
 8017c88:	bf00      	nop
 8017c8a:	3714      	adds	r7, #20
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c90:	20003618 	.word	0x20003618
 8017c94:	80005000 	.word	0x80005000

08017c98 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8017c9c:	4b05      	ldr	r3, [pc, #20]	; (8017cb4 <rfalFIFOStatusUpdate+0x1c>)
 8017c9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8017ca2:	2bff      	cmp	r3, #255	; 0xff
 8017ca4:	d104      	bne.n	8017cb0 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 8017ca6:	2202      	movs	r2, #2
 8017ca8:	4903      	ldr	r1, [pc, #12]	; (8017cb8 <rfalFIFOStatusUpdate+0x20>)
 8017caa:	201e      	movs	r0, #30
 8017cac:	f003 fa97 	bl	801b1de <st25r3916ReadMultipleRegisters>
    }
}
 8017cb0:	bf00      	nop
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	20003618 	.word	0x20003618
 8017cb8:	20003656 	.word	0x20003656

08017cbc <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 8017cbc:	b480      	push	{r7}
 8017cbe:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8017cc0:	4b03      	ldr	r3, [pc, #12]	; (8017cd0 <rfalFIFOStatusClear+0x14>)
 8017cc2:	22ff      	movs	r2, #255	; 0xff
 8017cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8017cc8:	bf00      	nop
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bc80      	pop	{r7}
 8017cce:	4770      	bx	lr
 8017cd0:	20003618 	.word	0x20003618

08017cd4 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 8017cda:	f7ff ffdd 	bl	8017c98 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 8017cde:	4b0a      	ldr	r3, [pc, #40]	; (8017d08 <rfalFIFOStatusGetNumBytes+0x34>)
 8017ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8017ce4:	099b      	lsrs	r3, r3, #6
 8017ce6:	b2db      	uxtb	r3, r3
 8017ce8:	b29b      	uxth	r3, r3
 8017cea:	021b      	lsls	r3, r3, #8
 8017cec:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 8017cee:	4b06      	ldr	r3, [pc, #24]	; (8017d08 <rfalFIFOStatusGetNumBytes+0x34>)
 8017cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017cf4:	b29a      	uxth	r2, r3
 8017cf6:	88fb      	ldrh	r3, [r7, #6]
 8017cf8:	4313      	orrs	r3, r2
 8017cfa:	80fb      	strh	r3, [r7, #6]
    return result;
 8017cfc:	88fb      	ldrh	r3, [r7, #6]
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	3708      	adds	r7, #8
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}
 8017d06:	bf00      	nop
 8017d08:	20003618 	.word	0x20003618

08017d0c <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8017d10:	f7ff ffc2 	bl	8017c98 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8017d14:	4b05      	ldr	r3, [pc, #20]	; (8017d2c <rfalFIFOStatusIsIncompleteByte+0x20>)
 8017d16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8017d1a:	f003 030e 	and.w	r3, r3, #14
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	bf14      	ite	ne
 8017d22:	2301      	movne	r3, #1
 8017d24:	2300      	moveq	r3, #0
 8017d26:	b2db      	uxtb	r3, r3
}
 8017d28:	4618      	mov	r0, r3
 8017d2a:	bd80      	pop	{r7, pc}
 8017d2c:	20003618 	.word	0x20003618

08017d30 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8017d34:	f7ff ffb0 	bl	8017c98 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 8017d38:	4b05      	ldr	r3, [pc, #20]	; (8017d50 <rfalFIFOStatusIsMissingPar+0x20>)
 8017d3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8017d3e:	f003 0301 	and.w	r3, r3, #1
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	bf14      	ite	ne
 8017d46:	2301      	movne	r3, #1
 8017d48:	2300      	moveq	r3, #0
 8017d4a:	b2db      	uxtb	r3, r3
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	bd80      	pop	{r7, pc}
 8017d50:	20003618 	.word	0x20003618

08017d54 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 8017d58:	f7ff ff9e 	bl	8017c98 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 8017d5c:	4b04      	ldr	r3, [pc, #16]	; (8017d70 <rfalFIFOGetNumIncompleteBits+0x1c>)
 8017d5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8017d62:	085b      	lsrs	r3, r3, #1
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	f003 0307 	and.w	r3, r3, #7
 8017d6a:	b2db      	uxtb	r3, r3
}
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	20003618 	.word	0x20003618

08017d74 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b086      	sub	sp, #24
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	60b9      	str	r1, [r7, #8]
 8017d7c:	607b      	str	r3, [r7, #4]
 8017d7e:	4603      	mov	r3, r0
 8017d80:	73fb      	strb	r3, [r7, #15]
 8017d82:	4613      	mov	r3, r2
 8017d84:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3916IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8017d86:	2208      	movs	r2, #8
 8017d88:	2108      	movs	r1, #8
 8017d8a:	2002      	movs	r0, #2
 8017d8c:	f003 fc8c 	bl	801b6a8 <st25r3916CheckReg>
 8017d90:	4603      	mov	r3, r0
 8017d92:	f083 0301 	eor.w	r3, r3, #1
 8017d96:	b2db      	uxtb	r3, r3
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d10b      	bne.n	8017db4 <rfalISO14443ATransceiveShortFrame+0x40>
 8017d9c:	4b73      	ldr	r3, [pc, #460]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017d9e:	781b      	ldrb	r3, [r3, #0]
 8017da0:	2b01      	cmp	r3, #1
 8017da2:	d907      	bls.n	8017db4 <rfalISO14443ATransceiveShortFrame+0x40>
 8017da4:	4b71      	ldr	r3, [pc, #452]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017da6:	785b      	ldrb	r3, [r3, #1]
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d005      	beq.n	8017db8 <rfalISO14443ATransceiveShortFrame+0x44>
 8017dac:	4b6f      	ldr	r3, [pc, #444]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017dae:	785b      	ldrb	r3, [r3, #1]
 8017db0:	2b02      	cmp	r3, #2
 8017db2:	d001      	beq.n	8017db8 <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 8017db4:	2321      	movs	r3, #33	; 0x21
 8017db6:	e0d4      	b.n	8017f62 <rfalISO14443ATransceiveShortFrame+0x1ee>
    }
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d006      	beq.n	8017dcc <rfalISO14443ATransceiveShortFrame+0x58>
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d003      	beq.n	8017dcc <rfalISO14443ATransceiveShortFrame+0x58>
 8017dc4:	6a3b      	ldr	r3, [r7, #32]
 8017dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dca:	d101      	bne.n	8017dd0 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 8017dcc:	2307      	movs	r3, #7
 8017dce:	e0c8      	b.n	8017f62 <rfalISO14443ATransceiveShortFrame+0x1ee>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 8017dd0:	7bfb      	ldrb	r3, [r7, #15]
 8017dd2:	2b26      	cmp	r3, #38	; 0x26
 8017dd4:	d004      	beq.n	8017de0 <rfalISO14443ATransceiveShortFrame+0x6c>
 8017dd6:	2b52      	cmp	r3, #82	; 0x52
 8017dd8:	d105      	bne.n	8017de6 <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3916_CMD_TRANSMIT_WUPA;
 8017dda:	23c7      	movs	r3, #199	; 0xc7
 8017ddc:	757b      	strb	r3, [r7, #21]
            break;
 8017dde:	e004      	b.n	8017dea <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3916_CMD_TRANSMIT_REQA;
 8017de0:	23c6      	movs	r3, #198	; 0xc6
 8017de2:	757b      	strb	r3, [r7, #21]
            break;
 8017de4:	e001      	b.n	8017dea <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 8017de6:	2307      	movs	r3, #7
 8017de8:	e0bb      	b.n	8017f62 <rfalISO14443ATransceiveShortFrame+0x1ee>
    }
    
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8017dea:	2180      	movs	r1, #128	; 0x80
 8017dec:	200a      	movs	r0, #10
 8017dee:	f003 fbaa 	bl	801b546 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 8017df2:	bf00      	nop
 8017df4:	f7fe fd7c 	bl	80168f0 <rfalIsGTExpired>
 8017df8:	4603      	mov	r3, r0
 8017dfa:	f083 0301 	eor.w	r3, r3, #1
 8017dfe:	b2db      	uxtb	r3, r3
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d1f7      	bne.n	8017df4 <rfalISO14443ATransceiveShortFrame+0x80>
    while( st25r3916IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 8017e04:	bf00      	nop
 8017e06:	2204      	movs	r2, #4
 8017e08:	2104      	movs	r1, #4
 8017e0a:	2024      	movs	r0, #36	; 0x24
 8017e0c:	f003 fc4c 	bl	801b6a8 <st25r3916CheckReg>
 8017e10:	4603      	mov	r3, r0
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d1f7      	bne.n	8017e06 <rfalISO14443ATransceiveShortFrame+0x92>

    rfalTimerDestroy( gRFAL.tmr.GT );
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8017e16:	4b55      	ldr	r3, [pc, #340]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e18:	2200      	movs	r2, #0
 8017e1a:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/        
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 8017e1c:	4b53      	ldr	r3, [pc, #332]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e1e:	2203      	movs	r2, #3
 8017e20:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 8017e22:	4a52      	ldr	r2, [pc, #328]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 8017e28:	7bbb      	ldrb	r3, [r7, #14]
 8017e2a:	b29a      	uxth	r2, r3
 8017e2c:	4b4f      	ldr	r3, [pc, #316]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 8017e30:	4a4e      	ldr	r2, [pc, #312]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	62d3      	str	r3, [r2, #44]	; 0x2c
    gRFAL.TxRx.ctx.fwt       = fwt;
 8017e36:	4a4d      	ldr	r2, [pc, #308]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e38:	6a3b      	ldr	r3, [r7, #32]
 8017e3a:	6353      	str	r3, [r2, #52]	; 0x34
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 8017e3c:	6a3b      	ldr	r3, [r7, #32]
 8017e3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8017e42:	4a4b      	ldr	r2, [pc, #300]	; (8017f70 <rfalISO14443ATransceiveShortFrame+0x1fc>)
 8017e44:	4293      	cmp	r3, r2
 8017e46:	bf28      	it	cs
 8017e48:	4613      	movcs	r3, r2
 8017e4a:	099b      	lsrs	r3, r3, #6
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f002 ffe7 	bl	801ae20 <st25r3916SetNoResponseTime>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8017e52:	4b46      	ldr	r3, [pc, #280]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e54:	68db      	ldr	r3, [r3, #12]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d014      	beq.n	8017e84 <rfalISO14443ATransceiveShortFrame+0x110>
    {
        
        /* Ensure that MRT is using 64/fc steps */
        st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 8017e5a:	2108      	movs	r1, #8
 8017e5c:	2012      	movs	r0, #18
 8017e5e:	f003 fb3b 	bl	801b4d8 <st25r3916ClrRegisterBits>
        
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 8017e62:	4b42      	ldr	r3, [pc, #264]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e64:	68db      	ldr	r3, [r3, #12]
 8017e66:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8017e6a:	d306      	bcc.n	8017e7a <rfalISO14443ATransceiveShortFrame+0x106>
 8017e6c:	4b3f      	ldr	r3, [pc, #252]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e6e:	68db      	ldr	r3, [r3, #12]
 8017e70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017e74:	099b      	lsrs	r3, r3, #6
 8017e76:	b2db      	uxtb	r3, r3
 8017e78:	e000      	b.n	8017e7c <rfalISO14443ATransceiveShortFrame+0x108>
 8017e7a:	2304      	movs	r3, #4
 8017e7c:	4619      	mov	r1, r3
 8017e7e:	200f      	movs	r0, #15
 8017e80:	f003 f9da 	bl	801b238 <st25r3916WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8017e84:	4b39      	ldr	r3, [pc, #228]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e86:	691b      	ldr	r3, [r3, #16]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d014      	beq.n	8017eb6 <rfalISO14443ATransceiveShortFrame+0x142>
    {
        /* Configure GPT to start at RX end */
        st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ) , ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8017e8c:	4b37      	ldr	r3, [pc, #220]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e8e:	691b      	ldr	r3, [r3, #16]
 8017e90:	f240 423b 	movw	r2, #1083	; 0x43b
 8017e94:	4293      	cmp	r3, r2
 8017e96:	d804      	bhi.n	8017ea2 <rfalISO14443ATransceiveShortFrame+0x12e>
 8017e98:	4b34      	ldr	r3, [pc, #208]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017e9a:	691b      	ldr	r3, [r3, #16]
 8017e9c:	08db      	lsrs	r3, r3, #3
 8017e9e:	b29b      	uxth	r3, r3
 8017ea0:	e005      	b.n	8017eae <rfalISO14443ATransceiveShortFrame+0x13a>
 8017ea2:	4b32      	ldr	r3, [pc, #200]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017ea4:	691b      	ldr	r3, [r3, #16]
 8017ea6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8017eaa:	08db      	lsrs	r3, r3, #3
 8017eac:	b29b      	uxth	r3, r3
 8017eae:	2120      	movs	r1, #32
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f003 f80a 	bl	801aeca <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 8017eb6:	f7ff f86d 	bl	8016f94 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 8017eba:	2004      	movs	r0, #4
 8017ebc:	f003 fd84 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 8017ec0:	2004      	movs	r0, #4
 8017ec2:	f003 fdcb 	bl	801ba5c <st25r3916EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 8017ec6:	4b29      	ldr	r3, [pc, #164]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017ec8:	795b      	ldrb	r3, [r3, #5]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d008      	beq.n	8017ee0 <rfalISO14443ATransceiveShortFrame+0x16c>
 8017ece:	4b27      	ldr	r3, [pc, #156]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017ed0:	795b      	ldrb	r3, [r3, #5]
 8017ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	4619      	mov	r1, r3
 8017eda:	2001      	movs	r0, #1
 8017edc:	f003 fad7 	bl	801b48e <st25r3916WriteTestRegister>
    
    /*******************************************************************************/
    /* Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3916 will report parity error, Note2 of the register */
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, 0);
 8017ee0:	2100      	movs	r1, #0
 8017ee2:	2023      	movs	r0, #35	; 0x23
 8017ee4:	f003 f9a8 	bl	801b238 <st25r3916WriteRegister>
    
    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3916ExecuteCommand( directCmd );
 8017ee8:	7d7b      	ldrb	r3, [r7, #21]
 8017eea:	4618      	mov	r0, r3
 8017eec:	f003 fa93 	bl	801b416 <st25r3916ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3916_SW_TMR_MIN_1MS ) ) == 0U )
 8017ef0:	6a3b      	ldr	r3, [r7, #32]
 8017ef2:	f646 12ef 	movw	r2, #27119	; 0x69ef
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	d906      	bls.n	8017f08 <rfalISO14443ATransceiveShortFrame+0x194>
 8017efa:	6a3b      	ldr	r3, [r7, #32]
 8017efc:	4a1d      	ldr	r2, [pc, #116]	; (8017f74 <rfalISO14443ATransceiveShortFrame+0x200>)
 8017efe:	fba2 2303 	umull	r2, r3, r2, r3
 8017f02:	0b1b      	lsrs	r3, r3, #12
 8017f04:	b29b      	uxth	r3, r3
 8017f06:	e000      	b.n	8017f0a <rfalISO14443ATransceiveShortFrame+0x196>
 8017f08:	2301      	movs	r3, #1
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	2008      	movs	r0, #8
 8017f0e:	f003 fd07 	bl	801b920 <st25r3916WaitForInterruptsTimed>
 8017f12:	4603      	mov	r3, r0
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d102      	bne.n	8017f1e <rfalISO14443ATransceiveShortFrame+0x1aa>
    {
        ret = ERR_IO;
 8017f18:	2303      	movs	r3, #3
 8017f1a:	82fb      	strh	r3, [r7, #22]
 8017f1c:	e019      	b.n	8017f52 <rfalISO14443ATransceiveShortFrame+0x1de>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 8017f1e:	4b13      	ldr	r3, [pc, #76]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017f20:	799b      	ldrb	r3, [r3, #6]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d008      	beq.n	8017f38 <rfalISO14443ATransceiveShortFrame+0x1c4>
 8017f26:	4b11      	ldr	r3, [pc, #68]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017f28:	799b      	ldrb	r3, [r3, #6]
 8017f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f2e:	b2db      	uxtb	r3, r3
 8017f30:	4619      	mov	r1, r3
 8017f32:	2001      	movs	r0, #1
 8017f34:	f003 faab 	bl	801b48e <st25r3916WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 8017f38:	4b0c      	ldr	r3, [pc, #48]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017f3a:	2203      	movs	r2, #3
 8017f3c:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8017f3e:	4b0b      	ldr	r3, [pc, #44]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017f40:	2251      	movs	r2, #81	; 0x51
 8017f42:	761a      	strb	r2, [r3, #24]
        gRFAL.TxRx.status = ERR_BUSY;
 8017f44:	4b09      	ldr	r3, [pc, #36]	; (8017f6c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 8017f46:	2202      	movs	r2, #2
 8017f48:	835a      	strh	r2, [r3, #26]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 8017f4a:	f7fe ff27 	bl	8016d9c <rfalTransceiveBlockingRx>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 8017f52:	2004      	movs	r0, #4
 8017f54:	f003 fd8e 	bl	801ba74 <st25r3916DisableInterrupts>
    
    /* ReEnable CRC on Rx */
    st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8017f58:	2180      	movs	r1, #128	; 0x80
 8017f5a:	200a      	movs	r0, #10
 8017f5c:	f003 fabc 	bl	801b4d8 <st25r3916ClrRegisterBits>
    
    return ret;
 8017f60:	8afb      	ldrh	r3, [r7, #22]
}
 8017f62:	4618      	mov	r0, r3
 8017f64:	3718      	adds	r7, #24
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
 8017f6a:	bf00      	nop
 8017f6c:	20003618 	.word	0x20003618
 8017f70:	0ffff000 	.word	0x0ffff000
 8017f74:	4d542005 	.word	0x4d542005

08017f78 <rfalISO14443ATransceiveAnticollisionFrame>:


/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b08e      	sub	sp, #56	; 0x38
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	60f8      	str	r0, [r7, #12]
 8017f80:	60b9      	str	r1, [r7, #8]
 8017f82:	607a      	str	r2, [r7, #4]
 8017f84:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 8017f86:	4b9a      	ldr	r3, [pc, #616]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 8017f88:	781b      	ldrb	r3, [r3, #0]
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	d903      	bls.n	8017f96 <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 8017f8e:	4b98      	ldr	r3, [pc, #608]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 8017f90:	785b      	ldrb	r3, [r3, #1]
 8017f92:	2b01      	cmp	r3, #1
 8017f94:	d001      	beq.n	8017f9a <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 8017f96:	2321      	movs	r3, #33	; 0x21
 8017f98:	e125      	b.n	80181e6 <rfalISO14443ATransceiveAnticollisionFrame+0x26e>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d008      	beq.n	8017fb2 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d005      	beq.n	8017fb2 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d002      	beq.n	8017fb2 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d101      	bne.n	8017fb6 <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 8017fb2:	2307      	movs	r3, #7
 8017fb4:	e117      	b.n	80181e6 <rfalISO14443ATransceiveAnticollisionFrame+0x26e>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8017fb6:	f240 1003 	movw	r0, #259	; 0x103
 8017fba:	f7f4 f817 	bl	800bfec <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3916SetRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 8017fbe:	2101      	movs	r1, #1
 8017fc0:	2005      	movs	r0, #5
 8017fc2:	f003 fac0 	bl	801b546 <st25r3916SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8017fc6:	2180      	movs	r1, #128	; 0x80
 8017fc8:	200a      	movs	r0, #10
 8017fca:	f003 fabc 	bl	801b546 <st25r3916SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 8017fce:	2303      	movs	r3, #3
 8017fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 8017fd6:	68bb      	ldr	r3, [r7, #8]
 8017fd8:	781b      	ldrb	r3, [r3, #0]
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	00db      	lsls	r3, r3, #3
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	b29b      	uxth	r3, r3
 8017fe6:	4413      	add	r3, r2
 8017fe8:	b29b      	uxth	r3, r3
 8017fea:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	461a      	mov	r2, r3
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	4413      	add	r3, r2
 8017ff6:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 8017ff8:	2328      	movs	r3, #40	; 0x28
 8017ffa:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 8018000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018002:	633b      	str	r3, [r7, #48]	; 0x30
    
    /* Disable Automatic Gain Control (AGC) for better detection of collisions if using Coherent Receiver */
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 8018004:	2204      	movs	r2, #4
 8018006:	2104      	movs	r1, #4
 8018008:	200a      	movs	r0, #10
 801800a:	f003 fb4d 	bl	801b6a8 <st25r3916CheckReg>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d001      	beq.n	8018018 <rfalISO14443ATransceiveAnticollisionFrame+0xa0>
 8018014:	2208      	movs	r2, #8
 8018016:	e000      	b.n	801801a <rfalISO14443ATransceiveAnticollisionFrame+0xa2>
 8018018:	2200      	movs	r2, #0
 801801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801801c:	4313      	orrs	r3, r2
 801801e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    
    rfalStartTransceive( &ctx );
 8018020:	f107 0318 	add.w	r3, r7, #24
 8018024:	4618      	mov	r0, r3
 8018026:	f7fe fd05 	bl	8016a34 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 801802a:	2004      	movs	r0, #4
 801802c:	f003 fccc 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 8018030:	2004      	movs	r0, #4
 8018032:	f003 fd13 	bl	801ba5c <st25r3916EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 8018036:	2300      	movs	r3, #0
 8018038:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	781b      	ldrb	r3, [r3, #0]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d02d      	beq.n	80180a0 <rfalISO14443ATransceiveAnticollisionFrame+0x128>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	461a      	mov	r2, r3
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	4413      	add	r3, r2
 801804e:	781b      	ldrb	r3, [r3, #0]
 8018050:	461a      	mov	r2, r3
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	781b      	ldrb	r3, [r3, #0]
 8018056:	f1c3 0308 	rsb	r3, r3, #8
 801805a:	409a      	lsls	r2, r3
 801805c:	68bb      	ldr	r3, [r7, #8]
 801805e:	781b      	ldrb	r3, [r3, #0]
 8018060:	4619      	mov	r1, r3
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	440b      	add	r3, r1
 8018066:	b2d2      	uxtb	r2, r2
 8018068:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 801806a:	68bb      	ldr	r3, [r7, #8]
 801806c:	781b      	ldrb	r3, [r3, #0]
 801806e:	461a      	mov	r2, r3
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	4413      	add	r3, r2
 8018074:	781b      	ldrb	r3, [r3, #0]
 8018076:	461a      	mov	r2, r3
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	f1c3 0308 	rsb	r3, r3, #8
 8018080:	411a      	asrs	r2, r3
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	781b      	ldrb	r3, [r3, #0]
 8018086:	4619      	mov	r1, r3
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	440b      	add	r3, r1
 801808c:	b2d2      	uxtb	r2, r2
 801808e:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	781b      	ldrb	r3, [r3, #0]
 8018094:	461a      	mov	r2, r3
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	4413      	add	r3, r2
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 80180a0:	f7fe fe5f 	bl	8016d62 <rfalTransceiveRunBlockingTx>
 80180a4:	4603      	mov	r3, r0
 80180a6:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 80180a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d14f      	bne.n	801814e <rfalISO14443ATransceiveAnticollisionFrame+0x1d6>
    {
       ret = rfalTransceiveBlockingRx();
 80180ae:	f7fe fe75 	bl	8016d9c <rfalTransceiveBlockingRx>
 80180b2:	4603      	mov	r3, r0
 80180b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	781b      	ldrb	r3, [r3, #0]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d031      	beq.n	8018122 <rfalISO14443ATransceiveAnticollisionFrame+0x1aa>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 80180be:	68bb      	ldr	r3, [r7, #8]
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	461a      	mov	r2, r3
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	4413      	add	r3, r2
 80180c8:	781b      	ldrb	r3, [r3, #0]
 80180ca:	461a      	mov	r2, r3
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	411a      	asrs	r2, r3
 80180d2:	68bb      	ldr	r3, [r7, #8]
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	4619      	mov	r1, r3
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	440b      	add	r3, r1
 80180dc:	b2d2      	uxtb	r2, r2
 80180de:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 80180e0:	68bb      	ldr	r3, [r7, #8]
 80180e2:	781b      	ldrb	r3, [r3, #0]
 80180e4:	461a      	mov	r2, r3
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	4413      	add	r3, r2
 80180ea:	781b      	ldrb	r3, [r3, #0]
 80180ec:	461a      	mov	r2, r3
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	781b      	ldrb	r3, [r3, #0]
 80180f2:	409a      	lsls	r2, r3
 80180f4:	68bb      	ldr	r3, [r7, #8]
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	4619      	mov	r1, r3
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	440b      	add	r3, r1
 80180fe:	b2d2      	uxtb	r2, r2
 8018100:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 8018102:	68bb      	ldr	r3, [r7, #8]
 8018104:	781b      	ldrb	r3, [r3, #0]
 8018106:	461a      	mov	r2, r3
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	4413      	add	r3, r2
 801810c:	7819      	ldrb	r1, [r3, #0]
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	781b      	ldrb	r3, [r3, #0]
 8018112:	461a      	mov	r2, r3
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	4413      	add	r3, r2
 8018118:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801811c:	430a      	orrs	r2, r1
 801811e:	b2d2      	uxtb	r2, r2
 8018120:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 8018122:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018124:	2b1d      	cmp	r3, #29
 8018126:	d112      	bne.n	801814e <rfalISO14443ATransceiveAnticollisionFrame+0x1d6>
       {                      
           /* read out collision register */
           st25r3916ReadRegister( ST25R3916_REG_COLLISION_STATUS, &collData);
 8018128:	f107 0317 	add.w	r3, r7, #23
 801812c:	4619      	mov	r1, r3
 801812e:	2020      	movs	r0, #32
 8018130:	f003 f844 	bl	801b1bc <st25r3916ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_byte_shift) & 0x0FU); // 4-bits Byte information
 8018134:	7dfb      	ldrb	r3, [r7, #23]
 8018136:	091b      	lsrs	r3, r3, #4
 8018138:	b2da      	uxtb	r2, r3
 801813a:	68bb      	ldr	r3, [r7, #8]
 801813c:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_bit_shift)  & 0x07U); // 3-bits bit information
 801813e:	7dfb      	ldrb	r3, [r7, #23]
 8018140:	085b      	lsrs	r3, r3, #1
 8018142:	b2db      	uxtb	r3, r3
 8018144:	f003 0307 	and.w	r3, r3, #7
 8018148:	b2da      	uxtb	r2, r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 801814e:	2004      	movs	r0, #4
 8018150:	f003 fc90 	bl	801ba74 <st25r3916DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 8018154:	2101      	movs	r1, #1
 8018156:	2005      	movs	r0, #5
 8018158:	f003 f9be 	bl	801b4d8 <st25r3916ClrRegisterBits>

    /* ReEnable CRC on Rx */
    st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 801815c:	2180      	movs	r1, #128	; 0x80
 801815e:	200a      	movs	r0, #10
 8018160:	f003 f9ba 	bl	801b4d8 <st25r3916ClrRegisterBits>
    /*******************************************************************************/
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 8018164:	4b22      	ldr	r3, [pc, #136]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 8018166:	789b      	ldrb	r3, [r3, #2]
 8018168:	2bea      	cmp	r3, #234	; 0xea
 801816a:	d90c      	bls.n	8018186 <rfalISO14443ATransceiveAnticollisionFrame+0x20e>
 801816c:	4b20      	ldr	r3, [pc, #128]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 801816e:	789b      	ldrb	r3, [r3, #2]
 8018170:	b29b      	uxth	r3, r3
 8018172:	011b      	lsls	r3, r3, #4
 8018174:	b29b      	uxth	r3, r3
 8018176:	b2db      	uxtb	r3, r3
 8018178:	b29b      	uxth	r3, r3
 801817a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801817e:	f043 0301 	orr.w	r3, r3, #1
 8018182:	b29b      	uxth	r3, r3
 8018184:	e00d      	b.n	80181a2 <rfalISO14443ATransceiveAnticollisionFrame+0x22a>
 8018186:	4b1a      	ldr	r3, [pc, #104]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 8018188:	789b      	ldrb	r3, [r3, #2]
 801818a:	b29b      	uxth	r3, r3
 801818c:	3301      	adds	r3, #1
 801818e:	b29b      	uxth	r3, r3
 8018190:	011b      	lsls	r3, r3, #4
 8018192:	b29b      	uxth	r3, r3
 8018194:	b2db      	uxtb	r3, r3
 8018196:	b29b      	uxth	r3, r3
 8018198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801819c:	f043 0301 	orr.w	r3, r3, #1
 80181a0:	b29b      	uxth	r3, r3
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7f3 ff22 	bl	800bfec <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 80181a8:	4b11      	ldr	r3, [pc, #68]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 80181aa:	78db      	ldrb	r3, [r3, #3]
 80181ac:	2bea      	cmp	r3, #234	; 0xea
 80181ae:	d90a      	bls.n	80181c6 <rfalISO14443ATransceiveAnticollisionFrame+0x24e>
 80181b0:	4b0f      	ldr	r3, [pc, #60]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 80181b2:	78db      	ldrb	r3, [r3, #3]
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	011b      	lsls	r3, r3, #4
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	b2db      	uxtb	r3, r3
 80181bc:	b29b      	uxth	r3, r3
 80181be:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	e00b      	b.n	80181de <rfalISO14443ATransceiveAnticollisionFrame+0x266>
 80181c6:	4b0a      	ldr	r3, [pc, #40]	; (80181f0 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 80181c8:	78db      	ldrb	r3, [r3, #3]
 80181ca:	b29b      	uxth	r3, r3
 80181cc:	3301      	adds	r3, #1
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	011b      	lsls	r3, r3, #4
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80181dc:	b29b      	uxth	r3, r3
 80181de:	4618      	mov	r0, r3
 80181e0:	f7f3 ff04 	bl	800bfec <rfalSetAnalogConfig>
    
    return ret;
 80181e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3738      	adds	r7, #56	; 0x38
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}
 80181ee:	bf00      	nop
 80181f0:	20003618 	.word	0x20003618

080181f4 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b08c      	sub	sp, #48	; 0x30
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	607a      	str	r2, [r7, #4]
 80181fe:	461a      	mov	r2, r3
 8018200:	460b      	mov	r3, r1
 8018202:	72fb      	strb	r3, [r7, #11]
 8018204:	4613      	mov	r3, r2
 8018206:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8018208:	4b55      	ldr	r3, [pc, #340]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 801820a:	781b      	ldrb	r3, [r3, #0]
 801820c:	2b01      	cmp	r3, #1
 801820e:	d903      	bls.n	8018218 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 8018210:	4b53      	ldr	r3, [pc, #332]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8018212:	785b      	ldrb	r3, [r3, #1]
 8018214:	2b07      	cmp	r3, #7
 8018216:	d001      	beq.n	801821c <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 8018218:	2321      	movs	r3, #33	; 0x21
 801821a:	e09d      	b.n	8018358 <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 801821c:	f241 0003 	movw	r0, #4099	; 0x1003
 8018220:	f7f3 fee4 	bl	800bfec <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 8018224:	4b4e      	ldr	r3, [pc, #312]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8018226:	2210      	movs	r2, #16
 8018228:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 801822c:	7afb      	ldrb	r3, [r7, #11]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d101      	bne.n	8018236 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 8018232:	220b      	movs	r2, #11
 8018234:	e000      	b.n	8018238 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 8018236:	220a      	movs	r2, #10
 8018238:	7afb      	ldrb	r3, [r7, #11]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d101      	bne.n	8018242 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 801823e:	2340      	movs	r3, #64	; 0x40
 8018240:	e000      	b.n	8018244 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 8018242:	2300      	movs	r3, #0
 8018244:	4313      	orrs	r3, r2
 8018246:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 801824c:	7afb      	ldrb	r3, [r7, #11]
 801824e:	b29b      	uxth	r3, r3
 8018250:	00db      	lsls	r3, r3, #3
 8018252:	b29b      	uxth	r3, r3
 8018254:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 801825a:	7abb      	ldrb	r3, [r7, #10]
 801825c:	b29b      	uxth	r3, r3
 801825e:	00db      	lsls	r3, r3, #3
 8018260:	b29b      	uxth	r3, r3
 8018262:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 8018264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018266:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 8018268:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 801826c:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 801826e:	f107 0310 	add.w	r3, r7, #16
 8018272:	4618      	mov	r0, r3
 8018274:	f7fe fbde 	bl	8016a34 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 8018278:	f7fe fd73 	bl	8016d62 <rfalTransceiveRunBlockingTx>
 801827c:	4603      	mov	r3, r0
 801827e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 8018280:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018282:	2b00      	cmp	r3, #0
 8018284:	d103      	bne.n	801828e <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 8018286:	f7fe fd89 	bl	8016d9c <rfalTransceiveBlockingRx>
 801828a:	4603      	mov	r3, r0
 801828c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 801828e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018290:	2b1d      	cmp	r3, #29
 8018292:	d005      	beq.n	80182a0 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 8018294:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018296:	2b15      	cmp	r3, #21
 8018298:	d002      	beq.n	80182a0 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 801829a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801829c:	2b09      	cmp	r3, #9
 801829e:	d112      	bne.n	80182c6 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 80182a0:	6a3b      	ldr	r3, [r7, #32]
 80182a2:	881b      	ldrh	r3, [r3, #0]
 80182a4:	3307      	adds	r3, #7
 80182a6:	08db      	lsrs	r3, r3, #3
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	2b0b      	cmp	r3, #11
 80182ac:	d80b      	bhi.n	80182c6 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 80182ae:	6a3b      	ldr	r3, [r7, #32]
 80182b0:	881b      	ldrh	r3, [r3, #0]
 80182b2:	3307      	adds	r3, #7
 80182b4:	08db      	lsrs	r3, r3, #3
 80182b6:	b29b      	uxth	r3, r3
 80182b8:	f1c3 030c 	rsb	r3, r3, #12
 80182bc:	089b      	lsrs	r3, r3, #2
 80182be:	b2db      	uxtb	r3, r3
 80182c0:	4618      	mov	r0, r3
 80182c2:	f7ea fe5d 	bl	8002f80 <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 80182c6:	4b26      	ldr	r3, [pc, #152]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 80182c8:	789b      	ldrb	r3, [r3, #2]
 80182ca:	2bea      	cmp	r3, #234	; 0xea
 80182cc:	d90c      	bls.n	80182e8 <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 80182ce:	4b24      	ldr	r3, [pc, #144]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 80182d0:	789b      	ldrb	r3, [r3, #2]
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	011b      	lsls	r3, r3, #4
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	b2db      	uxtb	r3, r3
 80182da:	b29b      	uxth	r3, r3
 80182dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80182e0:	f043 0301 	orr.w	r3, r3, #1
 80182e4:	b29b      	uxth	r3, r3
 80182e6:	e00d      	b.n	8018304 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 80182e8:	4b1d      	ldr	r3, [pc, #116]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 80182ea:	789b      	ldrb	r3, [r3, #2]
 80182ec:	b29b      	uxth	r3, r3
 80182ee:	3301      	adds	r3, #1
 80182f0:	b29b      	uxth	r3, r3
 80182f2:	011b      	lsls	r3, r3, #4
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	b2db      	uxtb	r3, r3
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80182fe:	f043 0301 	orr.w	r3, r3, #1
 8018302:	b29b      	uxth	r3, r3
 8018304:	4618      	mov	r0, r3
 8018306:	f7f3 fe71 	bl	800bfec <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 801830a:	4b15      	ldr	r3, [pc, #84]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 801830c:	78db      	ldrb	r3, [r3, #3]
 801830e:	2bea      	cmp	r3, #234	; 0xea
 8018310:	d90c      	bls.n	801832c <rfalISO15693TransceiveAnticollisionFrame+0x138>
 8018312:	4b13      	ldr	r3, [pc, #76]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8018314:	78db      	ldrb	r3, [r3, #3]
 8018316:	b29b      	uxth	r3, r3
 8018318:	011b      	lsls	r3, r3, #4
 801831a:	b29b      	uxth	r3, r3
 801831c:	b2db      	uxtb	r3, r3
 801831e:	b29b      	uxth	r3, r3
 8018320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018324:	f043 0302 	orr.w	r3, r3, #2
 8018328:	b29b      	uxth	r3, r3
 801832a:	e00d      	b.n	8018348 <rfalISO15693TransceiveAnticollisionFrame+0x154>
 801832c:	4b0c      	ldr	r3, [pc, #48]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 801832e:	78db      	ldrb	r3, [r3, #3]
 8018330:	b29b      	uxth	r3, r3
 8018332:	3301      	adds	r3, #1
 8018334:	b29b      	uxth	r3, r3
 8018336:	011b      	lsls	r3, r3, #4
 8018338:	b29b      	uxth	r3, r3
 801833a:	b2db      	uxtb	r3, r3
 801833c:	b29b      	uxth	r3, r3
 801833e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018342:	f043 0302 	orr.w	r3, r3, #2
 8018346:	b29b      	uxth	r3, r3
 8018348:	4618      	mov	r0, r3
 801834a:	f7f3 fe4f 	bl	800bfec <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 801834e:	4b04      	ldr	r3, [pc, #16]	; (8018360 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 8018350:	2200      	movs	r2, #0
 8018352:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    return ret;
 8018356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8018358:	4618      	mov	r0, r3
 801835a:	3730      	adds	r7, #48	; 0x30
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}
 8018360:	20003618 	.word	0x20003618

08018364 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b088      	sub	sp, #32
 8018368:	af02      	add	r7, sp, #8
 801836a:	60f8      	str	r0, [r7, #12]
 801836c:	460b      	mov	r3, r1
 801836e:	607a      	str	r2, [r7, #4]
 8018370:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 8018372:	7afa      	ldrb	r2, [r7, #11]
 8018374:	f107 0017 	add.w	r0, r7, #23
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	9300      	str	r3, [sp, #0]
 801837c:	4613      	mov	r3, r2
 801837e:	68fa      	ldr	r2, [r7, #12]
 8018380:	2100      	movs	r1, #0
 8018382:	f7ff ff37 	bl	80181f4 <rfalISO15693TransceiveAnticollisionFrame>
 8018386:	4603      	mov	r3, r0
}
 8018388:	4618      	mov	r0, r3
 801838a:	3718      	adds	r7, #24
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}

08018390 <rfalISO15693TransceiveEOF>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOF( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b08a      	sub	sp, #40	; 0x28
 8018394:	af04      	add	r7, sp, #16
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	460b      	mov	r3, r1
 801839a:	607a      	str	r2, [r7, #4]
 801839c:	72fb      	strb	r3, [r7, #11]
    ReturnCode ret;
    uint8_t    dummy;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 801839e:	4b10      	ldr	r3, [pc, #64]	; (80183e0 <rfalISO15693TransceiveEOF+0x50>)
 80183a0:	781b      	ldrb	r3, [r3, #0]
 80183a2:	2b01      	cmp	r3, #1
 80183a4:	d903      	bls.n	80183ae <rfalISO15693TransceiveEOF+0x1e>
 80183a6:	4b0e      	ldr	r3, [pc, #56]	; (80183e0 <rfalISO15693TransceiveEOF+0x50>)
 80183a8:	785b      	ldrb	r3, [r3, #1]
 80183aa:	2b07      	cmp	r3, #7
 80183ac:	d001      	beq.n	80183b2 <rfalISO15693TransceiveEOF+0x22>
    {
        return ERR_WRONG_STATE;
 80183ae:	2321      	movs	r3, #33	; 0x21
 80183b0:	e012      	b.n	80183d8 <rfalISO15693TransceiveEOF+0x48>
    }
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveBlockingTxRx( &dummy,
 80183b2:	7afb      	ldrb	r3, [r7, #11]
 80183b4:	b29a      	uxth	r2, r3
 80183b6:	f107 0015 	add.w	r0, r7, #21
 80183ba:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80183be:	9302      	str	r3, [sp, #8]
 80183c0:	2303      	movs	r3, #3
 80183c2:	9301      	str	r3, [sp, #4]
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	4613      	mov	r3, r2
 80183ca:	68fa      	ldr	r2, [r7, #12]
 80183cc:	2100      	movs	r1, #0
 80183ce:	f7fe fcfb 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 80183d2:	4603      	mov	r3, r0
 80183d4:	82fb      	strh	r3, [r7, #22]
                                      rxBuf,
                                      rxBufLen,
                                      actLen,
                                      ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_ON ),
                                      rfalConv64fcTo1fc(ISO15693_FWT) );
    return ret;
 80183d6:	8afb      	ldrh	r3, [r7, #22]
}
 80183d8:	4618      	mov	r0, r3
 80183da:	3718      	adds	r7, #24
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}
 80183e0:	20003618 	.word	0x20003618

080183e4 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b08c      	sub	sp, #48	; 0x30
 80183e8:	af04      	add	r7, sp, #16
 80183ea:	603b      	str	r3, [r7, #0]
 80183ec:	4603      	mov	r3, r0
 80183ee:	71fb      	strb	r3, [r7, #7]
 80183f0:	460b      	mov	r3, r1
 80183f2:	80bb      	strh	r3, [r7, #4]
 80183f4:	4613      	mov	r3, r2
 80183f6:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 80183f8:	4b6e      	ldr	r3, [pc, #440]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 80183fa:	781b      	ldrb	r3, [r3, #0]
 80183fc:	2b01      	cmp	r3, #1
 80183fe:	d903      	bls.n	8018408 <rfalFeliCaPoll+0x24>
 8018400:	4b6c      	ldr	r3, [pc, #432]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 8018402:	785b      	ldrb	r3, [r3, #1]
 8018404:	2b06      	cmp	r3, #6
 8018406:	d001      	beq.n	801840c <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 8018408:	2321      	movs	r3, #33	; 0x21
 801840a:	e0ce      	b.n	80185aa <rfalFeliCaPoll+0x1c6>
    }
    
    frameIdx    = 0;
 801840c:	2300      	movs	r3, #0
 801840e:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 8018410:	2300      	movs	r3, #0
 8018412:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 8018414:	2300      	movs	r3, #0
 8018416:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 8018418:	79fb      	ldrb	r3, [r7, #7]
 801841a:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */   
 801841c:	7e7b      	ldrb	r3, [r7, #25]
 801841e:	1c5a      	adds	r2, r3, #1
 8018420:	767a      	strb	r2, [r7, #25]
 8018422:	f107 0220 	add.w	r2, r7, #32
 8018426:	4413      	add	r3, r2
 8018428:	2200      	movs	r2, #0
 801842a:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 801842e:	88bb      	ldrh	r3, [r7, #4]
 8018430:	0a1b      	lsrs	r3, r3, #8
 8018432:	b29a      	uxth	r2, r3
 8018434:	7e7b      	ldrb	r3, [r7, #25]
 8018436:	1c59      	adds	r1, r3, #1
 8018438:	7679      	strb	r1, [r7, #25]
 801843a:	b2d2      	uxtb	r2, r2
 801843c:	f107 0120 	add.w	r1, r7, #32
 8018440:	440b      	add	r3, r1
 8018442:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 8018446:	7e7b      	ldrb	r3, [r7, #25]
 8018448:	1c5a      	adds	r2, r3, #1
 801844a:	767a      	strb	r2, [r7, #25]
 801844c:	88ba      	ldrh	r2, [r7, #4]
 801844e:	b2d2      	uxtb	r2, r2
 8018450:	f107 0120 	add.w	r1, r7, #32
 8018454:	440b      	add	r3, r1
 8018456:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 801845a:	7e7b      	ldrb	r3, [r7, #25]
 801845c:	1c5a      	adds	r2, r3, #1
 801845e:	767a      	strb	r2, [r7, #25]
 8018460:	f107 0220 	add.w	r2, r7, #32
 8018464:	4413      	add	r3, r2
 8018466:	79ba      	ldrb	r2, [r7, #6]
 8018468:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 801846c:	7e7b      	ldrb	r3, [r7, #25]
 801846e:	1c5a      	adds	r2, r3, #1
 8018470:	767a      	strb	r2, [r7, #25]
 8018472:	f107 0220 	add.w	r2, r7, #32
 8018476:	4413      	add	r3, r2
 8018478:	7efa      	ldrb	r2, [r7, #27]
 801847a:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 801847e:	4b4d      	ldr	r3, [pc, #308]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 8018480:	79db      	ldrb	r3, [r3, #7]
 8018482:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8018484:	2002      	movs	r0, #2
 8018486:	f7fe f9cb 	bl	8016820 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */       
    ret = rfalTransceiveBlockingTx( frame, 
 801848a:	7e7b      	ldrb	r3, [r7, #25]
 801848c:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses,
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 801848e:	7efb      	ldrb	r3, [r7, #27]
 8018490:	3303      	adds	r3, #3
    ret = rfalTransceiveBlockingTx( frame, 
 8018492:	039b      	lsls	r3, r3, #14
 8018494:	f107 0010 	add.w	r0, r7, #16
 8018498:	9302      	str	r3, [sp, #8]
 801849a:	2300      	movs	r3, #0
 801849c:	9301      	str	r3, [sp, #4]
 801849e:	f107 030e 	add.w	r3, r7, #14
 80184a2:	9300      	str	r3, [sp, #0]
 80184a4:	2314      	movs	r3, #20
 80184a6:	4a44      	ldr	r2, [pc, #272]	; (80185b8 <rfalFeliCaPoll+0x1d4>)
 80184a8:	f7fe fc2c 	bl	8016d04 <rfalTransceiveBlockingTx>
 80184ac:	4603      	mov	r3, r0
 80184ae:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 80184b0:	8bfb      	ldrh	r3, [r7, #30]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d145      	bne.n	8018542 <rfalFeliCaPoll+0x15e>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 80184b6:	f7fe fc71 	bl	8016d9c <rfalTransceiveBlockingRx>
 80184ba:	4603      	mov	r3, r0
 80184bc:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 80184be:	8bfb      	ldrh	r3, [r7, #30]
 80184c0:	2b04      	cmp	r3, #4
 80184c2:	d102      	bne.n	80184ca <rfalFeliCaPoll+0xe6>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 80184c4:	2301      	movs	r3, #1
 80184c6:	76bb      	strb	r3, [r7, #26]
 80184c8:	e030      	b.n	801852c <rfalFeliCaPoll+0x148>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 80184ca:	20d1      	movs	r0, #209	; 0xd1
 80184cc:	f002 ffa3 	bl	801b416 <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 80184d0:	20d5      	movs	r0, #213	; 0xd5
 80184d2:	f002 ffa0 	bl	801b416 <st25r3916ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 80184d6:	8bfb      	ldrh	r3, [r7, #30]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d10e      	bne.n	80184fa <rfalFeliCaPoll+0x116>
                {
                   devDetected++;
 80184dc:	7f7b      	ldrb	r3, [r7, #29]
 80184de:	3301      	adds	r3, #1
 80184e0:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 80184e2:	7f7a      	ldrb	r2, [r7, #29]
 80184e4:	4613      	mov	r3, r2
 80184e6:	009b      	lsls	r3, r3, #2
 80184e8:	4413      	add	r3, r2
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	3390      	adds	r3, #144	; 0x90
 80184ee:	4a31      	ldr	r2, [pc, #196]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 80184f0:	4413      	add	r3, r2
 80184f2:	3306      	adds	r3, #6
 80184f4:	4a2f      	ldr	r2, [pc, #188]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 80184f6:	6253      	str	r3, [r2, #36]	; 0x24
 80184f8:	e002      	b.n	8018500 <rfalFeliCaPoll+0x11c>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 80184fa:	7f3b      	ldrb	r3, [r7, #28]
 80184fc:	3301      	adds	r3, #1
 80184fe:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0x00 );
 8018500:	2200      	movs	r2, #0
 8018502:	2102      	movs	r1, #2
 8018504:	2024      	movs	r0, #36	; 0x24
 8018506:	f003 f8cf 	bl	801b6a8 <st25r3916CheckReg>
 801850a:	4603      	mov	r3, r0
 801850c:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 801850e:	7ebb      	ldrb	r3, [r7, #26]
 8018510:	f083 0301 	eor.w	r3, r3, #1
 8018514:	b2db      	uxtb	r3, r3
 8018516:	2b00      	cmp	r3, #0
 8018518:	d008      	beq.n	801852c <rfalFeliCaPoll+0x148>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 801851a:	4b26      	ldr	r3, [pc, #152]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 801851c:	2202      	movs	r2, #2
 801851e:	835a      	strh	r2, [r3, #26]
                    gRFAL.state       = RFAL_STATE_TXRX;
 8018520:	4b24      	ldr	r3, [pc, #144]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 8018522:	2203      	movs	r2, #3
 8018524:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8018526:	4b23      	ldr	r3, [pc, #140]	; (80185b4 <rfalFeliCaPoll+0x1d0>)
 8018528:	2251      	movs	r2, #81	; 0x51
 801852a:	761a      	strb	r2, [r3, #24]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 801852c:	7efb      	ldrb	r3, [r7, #27]
 801852e:	1e5a      	subs	r2, r3, #1
 8018530:	76fa      	strb	r2, [r7, #27]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d005      	beq.n	8018542 <rfalFeliCaPoll+0x15e>
 8018536:	7ebb      	ldrb	r3, [r7, #26]
 8018538:	f083 0301 	eor.w	r3, r3, #1
 801853c:	b2db      	uxtb	r3, r3
 801853e:	2b00      	cmp	r3, #0
 8018540:	d1b9      	bne.n	80184b6 <rfalFeliCaPoll+0xd2>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 8018542:	7e3b      	ldrb	r3, [r7, #24]
 8018544:	4618      	mov	r0, r3
 8018546:	f7fe f96b 	bl	8016820 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d017      	beq.n	8018580 <rfalFeliCaPoll+0x19c>
 8018550:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018554:	2b00      	cmp	r3, #0
 8018556:	d013      	beq.n	8018580 <rfalFeliCaPoll+0x19c>
 8018558:	7f7b      	ldrb	r3, [r7, #29]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d010      	beq.n	8018580 <rfalFeliCaPoll+0x19c>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 801855e:	7f7a      	ldrb	r2, [r7, #29]
 8018560:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018564:	4293      	cmp	r3, r2
 8018566:	bf28      	it	cs
 8018568:	4613      	movcs	r3, r2
 801856a:	b2db      	uxtb	r3, r3
 801856c:	461a      	mov	r2, r3
 801856e:	4613      	mov	r3, r2
 8018570:	009b      	lsls	r3, r3, #2
 8018572:	4413      	add	r3, r2
 8018574:	009b      	lsls	r3, r3, #2
 8018576:	461a      	mov	r2, r3
 8018578:	490f      	ldr	r1, [pc, #60]	; (80185b8 <rfalFeliCaPoll+0x1d4>)
 801857a:	6838      	ldr	r0, [r7, #0]
 801857c:	f003 fb98 	bl	801bcb0 <memcpy>
    }
    
    if( devicesDetected != NULL )
 8018580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018582:	2b00      	cmp	r3, #0
 8018584:	d002      	beq.n	801858c <rfalFeliCaPoll+0x1a8>
    {
        *devicesDetected = devDetected;
 8018586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018588:	7f7a      	ldrb	r2, [r7, #29]
 801858a:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 801858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801858e:	2b00      	cmp	r3, #0
 8018590:	d002      	beq.n	8018598 <rfalFeliCaPoll+0x1b4>
    {
        *collisionsDetected = colDetected;
 8018592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018594:	7f3a      	ldrb	r2, [r7, #28]
 8018596:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 8018598:	7f3b      	ldrb	r3, [r7, #28]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d104      	bne.n	80185a8 <rfalFeliCaPoll+0x1c4>
 801859e:	7f7b      	ldrb	r3, [r7, #29]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d101      	bne.n	80185a8 <rfalFeliCaPoll+0x1c4>
 80185a4:	8bfb      	ldrh	r3, [r7, #30]
 80185a6:	e000      	b.n	80185aa <rfalFeliCaPoll+0x1c6>
 80185a8:	2300      	movs	r3, #0
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	3720      	adds	r7, #32
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}
 80185b2:	bf00      	nop
 80185b4:	20003618 	.word	0x20003618
 80185b8:	200036ae 	.word	0x200036ae

080185bc <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 80185c0:	2240      	movs	r2, #64	; 0x40
 80185c2:	2140      	movs	r1, #64	; 0x40
 80185c4:	2031      	movs	r0, #49	; 0x31
 80185c6:	f003 f86f 	bl	801b6a8 <st25r3916CheckReg>
 80185ca:	4603      	mov	r3, r0
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	bd80      	pop	{r7, pc}

080185d0 <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b08c      	sub	sp, #48	; 0x30
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	60f8      	str	r0, [r7, #12]
 80185d8:	60b9      	str	r1, [r7, #8]
 80185da:	607a      	str	r2, [r7, #4]
 80185dc:	603b      	str	r3, [r7, #0]
    uint8_t*    pPTMem;
    uint8_t     autoResp;
    
    
    /* Check if RFAL is initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 80185de:	4b4f      	ldr	r3, [pc, #316]	; (801871c <rfalListenStart+0x14c>)
 80185e0:	781b      	ldrb	r3, [r3, #0]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d101      	bne.n	80185ea <rfalListenStart+0x1a>
    {
        return ERR_WRONG_STATE;
 80185e6:	2321      	movs	r3, #33	; 0x21
 80185e8:	e185      	b.n	80188f6 <rfalListenStart+0x326>
    }
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 80185ea:	4b4c      	ldr	r3, [pc, #304]	; (801871c <rfalListenStart+0x14c>)
 80185ec:	2200      	movs	r2, #0
 80185ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.mdIrqs = ST25R3916_IRQ_MASK_NONE;
 80185f2:	4b4a      	ldr	r3, [pc, #296]	; (801871c <rfalListenStart+0x14c>)
 80185f4:	2200      	movs	r2, #0
 80185f6:	661a      	str	r2, [r3, #96]	; 0x60
    gRFAL.Lm.mdReg  = (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_off);
 80185f8:	4b48      	ldr	r3, [pc, #288]	; (801871c <rfalListenStart+0x14c>)
 80185fa:	2200      	movs	r2, #0
 80185fc:	65da      	str	r2, [r3, #92]	; 0x5c
    
    
    /* By default disable all automatic responses */     
    autoResp = (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_rfu | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 80185fe:	230f      	movs	r3, #15
 8018600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_NFCA) != 0U )
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801860a:	2b00      	cmp	r3, #0
 801860c:	d06c      	beq.n	80186e8 <rfalListenStart+0x118>
    {
        /* Check if the conf has been provided */
        if( confA == NULL )
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d101      	bne.n	8018618 <rfalListenStart+0x48>
        {
            return ERR_PARAM;
 8018614:	2307      	movs	r3, #7
 8018616:	e16e      	b.n	80188f6 <rfalListenStart+0x326>
        }
        
        pPTMem = (uint8_t*)PTMem.PTMem_A;
 8018618:	f107 0310 	add.w	r3, r7, #16
 801861c:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /*******************************************************************************/
        /* Check and set supported NFCID Length */
        switch(confA->nfcidLen)
 801861e:	68bb      	ldr	r3, [r7, #8]
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	2b04      	cmp	r3, #4
 8018624:	d002      	beq.n	801862c <rfalListenStart+0x5c>
 8018626:	2b07      	cmp	r3, #7
 8018628:	d006      	beq.n	8018638 <rfalListenStart+0x68>
 801862a:	e00b      	b.n	8018644 <rfalListenStart+0x74>
        {
            case RFAL_LM_NFCID_LEN_04:
                st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_id_mask, ST25R3916_REG_AUX_nfc_id_4bytes );
 801862c:	2200      	movs	r2, #0
 801862e:	2130      	movs	r1, #48	; 0x30
 8018630:	200a      	movs	r0, #10
 8018632:	f002 ffb5 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                break;
 8018636:	e007      	b.n	8018648 <rfalListenStart+0x78>
                
            case RFAL_LM_NFCID_LEN_07:
                st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_id_mask, ST25R3916_REG_AUX_nfc_id_7bytes );
 8018638:	2210      	movs	r2, #16
 801863a:	2130      	movs	r1, #48	; 0x30
 801863c:	200a      	movs	r0, #10
 801863e:	f002 ffaf 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                break;
 8018642:	e001      	b.n	8018648 <rfalListenStart+0x78>
                
            default:
                return ERR_PARAM;
 8018644:	2307      	movs	r3, #7
 8018646:	e156      	b.n	80188f6 <rfalListenStart+0x326>
        }
        
        /*******************************************************************************/
        /* Set NFCID */
        ST_MEMCPY( pPTMem, confA->nfcid, RFAL_NFCID1_TRIPLE_LEN );
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	3301      	adds	r3, #1
 801864c:	220a      	movs	r2, #10
 801864e:	4619      	mov	r1, r3
 8018650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018652:	f003 fb2d 	bl	801bcb0 <memcpy>
        pPTMem = &pPTMem[RFAL_NFCID1_TRIPLE_LEN];                  /* MISRA 18.4 */
 8018656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018658:	330a      	adds	r3, #10
 801865a:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Set SENS_RES */
        ST_MEMCPY( pPTMem, confA->SENS_RES, RFAL_LM_SENS_RES_LEN );
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	330b      	adds	r3, #11
 8018660:	881b      	ldrh	r3, [r3, #0]
 8018662:	b29a      	uxth	r2, r3
 8018664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018666:	801a      	strh	r2, [r3, #0]
        pPTMem = &pPTMem[RFAL_LM_SENS_RES_LEN];             /* MISRA 18.4 */
 8018668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801866a:	3302      	adds	r3, #2
 801866c:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Set SEL_RES */
        *pPTMem++ = ( (confA->nfcidLen == RFAL_LM_NFCID_LEN_04) ? ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE ) : (confA->SEL_RES | RFAL_LM_NFCID_INCOMPLETE) );
 801866e:	68bb      	ldr	r3, [r7, #8]
 8018670:	781b      	ldrb	r3, [r3, #0]
 8018672:	2b04      	cmp	r3, #4
 8018674:	d105      	bne.n	8018682 <rfalListenStart+0xb2>
 8018676:	68bb      	ldr	r3, [r7, #8]
 8018678:	7b5b      	ldrb	r3, [r3, #13]
 801867a:	f023 0304 	bic.w	r3, r3, #4
 801867e:	b2da      	uxtb	r2, r3
 8018680:	e004      	b.n	801868c <rfalListenStart+0xbc>
 8018682:	68bb      	ldr	r3, [r7, #8]
 8018684:	7b5b      	ldrb	r3, [r3, #13]
 8018686:	f043 0304 	orr.w	r3, r3, #4
 801868a:	b2da      	uxtb	r2, r3
 801868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801868e:	1c59      	adds	r1, r3, #1
 8018690:	62b9      	str	r1, [r7, #40]	; 0x28
 8018692:	701a      	strb	r2, [r3, #0]
        *pPTMem++ = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	7b5a      	ldrb	r2, [r3, #13]
 8018698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869a:	1c59      	adds	r1, r3, #1
 801869c:	62b9      	str	r1, [r7, #40]	; 0x28
 801869e:	f022 0204 	bic.w	r2, r2, #4
 80186a2:	b2d2      	uxtb	r2, r2
 80186a4:	701a      	strb	r2, [r3, #0]
        *pPTMem++ = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	7b5a      	ldrb	r2, [r3, #13]
 80186aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ac:	1c59      	adds	r1, r3, #1
 80186ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80186b0:	f022 0204 	bic.w	r2, r2, #4
 80186b4:	b2d2      	uxtb	r2, r2
 80186b6:	701a      	strb	r2, [r3, #0]
        
        /* Write into PTMem-A */
        st25r3916WritePTMem( PTMem.PTMem_A, ST25R3916_PTM_A_LEN );
 80186b8:	f107 0310 	add.w	r3, r7, #16
 80186bc:	210f      	movs	r1, #15
 80186be:	4618      	mov	r0, r3
 80186c0:	f002 fe43 	bl	801b34a <st25r3916WritePTMem>
        
        
        /*******************************************************************************/
        /* Enable automatic responses for A */
        autoResp &= ~ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a;
 80186c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80186c8:	f023 0301 	bic.w	r3, r3, #1
 80186cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                
        /* Set Target mode, Bit Rate detection and Listen Mode for NFC-F */        
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off);
 80186d0:	4b12      	ldr	r3, [pc, #72]	; (801871c <rfalListenStart+0x14c>)
 80186d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186d4:	f043 03c8 	orr.w	r3, r3, #200	; 0xc8
 80186d8:	4a10      	ldr	r2, [pc, #64]	; (801871c <rfalListenStart+0x14c>)
 80186da:	65d3      	str	r3, [r2, #92]	; 0x5c
        
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RXE_PTA);
 80186dc:	4b0f      	ldr	r3, [pc, #60]	; (801871c <rfalListenStart+0x14c>)
 80186de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80186e0:	f043 5398 	orr.w	r3, r3, #318767104	; 0x13000000
 80186e4:	4a0d      	ldr	r2, [pc, #52]	; (801871c <rfalListenStart+0x14c>)
 80186e6:	6613      	str	r3, [r2, #96]	; 0x60
    }
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_NFCB) != 0U )
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d006      	beq.n	8018700 <rfalListenStart+0x130>
    {
        /* Check if the conf has been provided */
        if( confB == NULL )
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d101      	bne.n	80186fc <rfalListenStart+0x12c>
        {
            return ERR_PARAM;
 80186f8:	2307      	movs	r3, #7
 80186fa:	e0fc      	b.n	80188f6 <rfalListenStart+0x326>
        }
        
        return ERR_NOTSUPP;
 80186fc:	2318      	movs	r3, #24
 80186fe:	e0fa      	b.n	80188f6 <rfalListenStart+0x326>
    }
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_NFCF) != 0U )
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018706:	2b00      	cmp	r3, #0
 8018708:	f000 808b 	beq.w	8018822 <rfalListenStart+0x252>
    {
        pPTMem = (uint8_t*)PTMem.PTMem_F;
 801870c:	f107 0310 	add.w	r3, r7, #16
 8018710:	62bb      	str	r3, [r7, #40]	; 0x28
                       
        /* Check if the conf has been provided */
        if( confF == NULL )
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d103      	bne.n	8018720 <rfalListenStart+0x150>
        {
            return ERR_PARAM;
 8018718:	2307      	movs	r3, #7
 801871a:	e0ec      	b.n	80188f6 <rfalListenStart+0x326>
 801871c:	20003618 	.word	0x20003618
        }
        
        /*******************************************************************************/
        /* Set System Code */
        ST_MEMCPY( pPTMem, confF->SC, RFAL_LM_SENSF_SC_LEN );
 8018720:	683b      	ldr	r3, [r7, #0]
 8018722:	881b      	ldrh	r3, [r3, #0]
 8018724:	b29a      	uxth	r2, r3
 8018726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018728:	801a      	strh	r2, [r3, #0]
        pPTMem = &pPTMem[RFAL_LM_SENSF_SC_LEN];             /* MISRA 18.4 */
 801872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801872c:	3302      	adds	r3, #2
 801872e:	62bb      	str	r3, [r7, #40]	; 0x28
                            
        /* Set SENSF_RES */
        ST_MEMCPY( pPTMem, confF->SENSF_RES, RFAL_LM_SENSF_RES_LEN );
 8018730:	683b      	ldr	r3, [r7, #0]
 8018732:	3302      	adds	r3, #2
 8018734:	2213      	movs	r2, #19
 8018736:	4619      	mov	r1, r3
 8018738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801873a:	f003 fab9 	bl	801bcb0 <memcpy>

        /* Set RD bytes to 0x00 as ST25R3916 cannot support advances features */
        pPTMem[RFAL_LM_SENSF_RD0_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 46: 0x00                   */
 801873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018740:	3311      	adds	r3, #17
 8018742:	2200      	movs	r2, #0
 8018744:	701a      	strb	r2, [r3, #0]
        pPTMem[RFAL_LM_SENSF_RD1_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 47: No automatic bit rates */
 8018746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018748:	3312      	adds	r3, #18
 801874a:	2200      	movs	r2, #0
 801874c:	701a      	strb	r2, [r3, #0]
        
        pPTMem = &pPTMem[RFAL_LM_SENS_RES_LEN];             /* MISRA 18.4 */
 801874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018750:	3302      	adds	r3, #2
 8018752:	62bb      	str	r3, [r7, #40]	; 0x28
                               
        /* Write into PTMem-F */
        st25r3916WritePTMemF( PTMem.PTMem_F, ST25R3916_PTM_F_LEN );
 8018754:	f107 0310 	add.w	r3, r7, #16
 8018758:	2115      	movs	r1, #21
 801875a:	4618      	mov	r0, r3
 801875c:	f002 fe17 	bl	801b38e <st25r3916WritePTMemF>
        
        
        /*******************************************************************************/
        /* Write 24 TSN "Random" Numbers at first initialization and let it rollover   */
        if( !gRFAL.Lm.iniFlag )
 8018760:	4b67      	ldr	r3, [pc, #412]	; (8018900 <rfalListenStart+0x330>)
 8018762:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8018766:	f083 0301 	eor.w	r3, r3, #1
 801876a:	b2db      	uxtb	r3, r3
 801876c:	2b00      	cmp	r3, #0
 801876e:	d044      	beq.n	80187fa <rfalListenStart+0x22a>
        {
            pPTMem = (uint8_t*)PTMem.TSN;
 8018770:	f107 0310 	add.w	r3, r7, #16
 8018774:	62bb      	str	r3, [r7, #40]	; 0x28
            
            *pPTMem++ = 0x12;
 8018776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018778:	1c5a      	adds	r2, r3, #1
 801877a:	62ba      	str	r2, [r7, #40]	; 0x28
 801877c:	2212      	movs	r2, #18
 801877e:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x34;
 8018780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018782:	1c5a      	adds	r2, r3, #1
 8018784:	62ba      	str	r2, [r7, #40]	; 0x28
 8018786:	2234      	movs	r2, #52	; 0x34
 8018788:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x56;
 801878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801878c:	1c5a      	adds	r2, r3, #1
 801878e:	62ba      	str	r2, [r7, #40]	; 0x28
 8018790:	2256      	movs	r2, #86	; 0x56
 8018792:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x78;
 8018794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018796:	1c5a      	adds	r2, r3, #1
 8018798:	62ba      	str	r2, [r7, #40]	; 0x28
 801879a:	2278      	movs	r2, #120	; 0x78
 801879c:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x9A;
 801879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a0:	1c5a      	adds	r2, r3, #1
 80187a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80187a4:	229a      	movs	r2, #154	; 0x9a
 80187a6:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0xBC;
 80187a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187aa:	1c5a      	adds	r2, r3, #1
 80187ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80187ae:	22bc      	movs	r2, #188	; 0xbc
 80187b0:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0xDF;
 80187b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b4:	1c5a      	adds	r2, r3, #1
 80187b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80187b8:	22df      	movs	r2, #223	; 0xdf
 80187ba:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x21;
 80187bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187be:	1c5a      	adds	r2, r3, #1
 80187c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80187c2:	2221      	movs	r2, #33	; 0x21
 80187c4:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x43;
 80187c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c8:	1c5a      	adds	r2, r3, #1
 80187ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80187cc:	2243      	movs	r2, #67	; 0x43
 80187ce:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x65;
 80187d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d2:	1c5a      	adds	r2, r3, #1
 80187d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80187d6:	2265      	movs	r2, #101	; 0x65
 80187d8:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x87;
 80187da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187dc:	1c5a      	adds	r2, r3, #1
 80187de:	62ba      	str	r2, [r7, #40]	; 0x28
 80187e0:	2287      	movs	r2, #135	; 0x87
 80187e2:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0xA9;
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	1c5a      	adds	r2, r3, #1
 80187e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80187ea:	22a9      	movs	r2, #169	; 0xa9
 80187ec:	701a      	strb	r2, [r3, #0]
            
            /* Write into PTMem-TSN */
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 80187ee:	f107 0310 	add.w	r3, r7, #16
 80187f2:	210c      	movs	r1, #12
 80187f4:	4618      	mov	r0, r3
 80187f6:	f002 fdec 	bl	801b3d2 <st25r3916WritePTMemTSN>
        }
        
        /*******************************************************************************/
        /* Enable automatic responses for F */
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r);
 80187fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80187fe:	f023 0304 	bic.w	r3, r3, #4
 8018802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        
        /* Set Target mode, Bit Rate detection and Listen Mode for NFC-F */
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_nfc_ar_off);
 8018806:	4b3e      	ldr	r3, [pc, #248]	; (8018900 <rfalListenStart+0x330>)
 8018808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801880a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801880e:	4a3c      	ldr	r2, [pc, #240]	; (8018900 <rfalListenStart+0x330>)
 8018810:	65d3      	str	r3, [r2, #92]	; 0x5c
        
        /* In CE NFC-F any data without error will be passed to FIFO, to support CUP */
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_RXE);
 8018812:	4b3b      	ldr	r3, [pc, #236]	; (8018900 <rfalListenStart+0x330>)
 8018814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018816:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 801881a:	f043 0310 	orr.w	r3, r3, #16
 801881e:	4a38      	ldr	r2, [pc, #224]	; (8018900 <rfalListenStart+0x330>)
 8018820:	6613      	str	r3, [r2, #96]	; 0x60
    }
    

    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018828:	2b00      	cmp	r3, #0
 801882a:	d021      	beq.n	8018870 <rfalListenStart+0x2a0>
    {
        /* Enable Reception of P2P frames */
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 801882c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018830:	f023 0308 	bic.w	r3, r3, #8
 8018834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        
        /* Set Target mode, Bit Rate detection and Automatic Response RF Collision Avoidance */
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 8018838:	4b31      	ldr	r3, [pc, #196]	; (8018900 <rfalListenStart+0x330>)
 801883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801883c:	f043 03e9 	orr.w	r3, r3, #233	; 0xe9
 8018840:	4a2f      	ldr	r2, [pc, #188]	; (8018900 <rfalListenStart+0x330>)
 8018842:	65d3      	str	r3, [r2, #92]	; 0x5c
        
        /* n * TRFW timing shall vary  Activity 2.1  3.4.1.1 */
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, gRFAL.timings.nTRFW);
 8018844:	4b2e      	ldr	r3, [pc, #184]	; (8018900 <rfalListenStart+0x330>)
 8018846:	7d1b      	ldrb	r3, [r3, #20]
 8018848:	461a      	mov	r2, r3
 801884a:	2103      	movs	r1, #3
 801884c:	200a      	movs	r0, #10
 801884e:	f002 fea7 	bl	801b5a0 <st25r3916ChangeRegisterBits>
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8018852:	4b2b      	ldr	r3, [pc, #172]	; (8018900 <rfalListenStart+0x330>)
 8018854:	7d1b      	ldrb	r3, [r3, #20]
 8018856:	3301      	adds	r3, #1
 8018858:	b2db      	uxtb	r3, r3
 801885a:	f003 0303 	and.w	r3, r3, #3
 801885e:	b2da      	uxtb	r2, r3
 8018860:	4b27      	ldr	r3, [pc, #156]	; (8018900 <rfalListenStart+0x330>)
 8018862:	751a      	strb	r2, [r3, #20]
        
        gRFAL.Lm.mdIrqs |= ( ST25R3916_IRQ_MASK_RXE );
 8018864:	4b26      	ldr	r3, [pc, #152]	; (8018900 <rfalListenStart+0x330>)
 8018866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018868:	f043 0310 	orr.w	r3, r3, #16
 801886c:	4a24      	ldr	r2, [pc, #144]	; (8018900 <rfalListenStart+0x330>)
 801886e:	6613      	str	r3, [r2, #96]	; 0x60
    }
    
    
    /* Check if one of the modes were selected */
    if( (gRFAL.Lm.mdReg & ST25R3916_REG_MODE_targ) == ST25R3916_REG_MODE_targ_targ )
 8018870:	4b23      	ldr	r3, [pc, #140]	; (8018900 <rfalListenStart+0x330>)
 8018872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018878:	2b00      	cmp	r3, #0
 801887a:	d03b      	beq.n	80188f4 <rfalListenStart+0x324>
    {
        gRFAL.state     = RFAL_STATE_LM;
 801887c:	4b20      	ldr	r3, [pc, #128]	; (8018900 <rfalListenStart+0x330>)
 801887e:	2204      	movs	r2, #4
 8018880:	701a      	strb	r2, [r3, #0]
        gRFAL.Lm.mdMask = lmMask;
 8018882:	4a1f      	ldr	r2, [pc, #124]	; (8018900 <rfalListenStart+0x330>)
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	6593      	str	r3, [r2, #88]	; 0x58
        
        gRFAL.Lm.rxBuf    = rxBuf;
 8018888:	4a1d      	ldr	r2, [pc, #116]	; (8018900 <rfalListenStart+0x330>)
 801888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801888c:	6693      	str	r3, [r2, #104]	; 0x68
        gRFAL.Lm.rxBufLen = rxBufLen;
 801888e:	4a1c      	ldr	r2, [pc, #112]	; (8018900 <rfalListenStart+0x330>)
 8018890:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018892:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
        gRFAL.Lm.rxLen    = rxLen;
 8018896:	4a1a      	ldr	r2, [pc, #104]	; (8018900 <rfalListenStart+0x330>)
 8018898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801889a:	6713      	str	r3, [r2, #112]	; 0x70
        *gRFAL.Lm.rxLen   = 0;
 801889c:	4b18      	ldr	r3, [pc, #96]	; (8018900 <rfalListenStart+0x330>)
 801889e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188a0:	2200      	movs	r2, #0
 80188a2:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 80188a4:	4b16      	ldr	r3, [pc, #88]	; (8018900 <rfalListenStart+0x330>)
 80188a6:	2200      	movs	r2, #0
 80188a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        gRFAL.Lm.iniFlag  = true;
 80188ac:	4b14      	ldr	r3, [pc, #80]	; (8018900 <rfalListenStart+0x330>)
 80188ae:	2201      	movs	r2, #1
 80188b0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        
        /* Apply the Automatic Responses configuration */
        st25r3916ChangeRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_rfu | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p ), autoResp );
 80188b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188b8:	461a      	mov	r2, r3
 80188ba:	210f      	movs	r1, #15
 80188bc:	2008      	movs	r0, #8
 80188be:	f002 fe6f 	bl	801b5a0 <st25r3916ChangeRegisterBits>
        
        /* Disable GPT trigger source */
        st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger );
 80188c2:	2200      	movs	r2, #0
 80188c4:	21e0      	movs	r1, #224	; 0xe0
 80188c6:	2012      	movs	r0, #18
 80188c8:	f002 fe6a 	bl	801b5a0 <st25r3916ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3916SetRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step_512 );
 80188cc:	2108      	movs	r1, #8
 80188ce:	2012      	movs	r0, #18
 80188d0:	f002 fe39 	bl	801b546 <st25r3916SetRegisterBits>
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 80188d4:	2102      	movs	r1, #2
 80188d6:	200f      	movs	r0, #15
 80188d8:	f002 fcae 	bl	801b238 <st25r3916WriteRegister>
        
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 80188dc:	21e0      	movs	r1, #224	; 0xe0
 80188de:	2005      	movs	r0, #5
 80188e0:	f002 fdfa 	bl	801b4d8 <st25r3916ClrRegisterBits>
        
        /* External Field Detector enabled as Automatics on rfalInitialize() */
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );        
 80188e4:	2006      	movs	r0, #6
 80188e6:	f7f3 fb81 	bl	800bfec <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 80188ea:	2001      	movs	r0, #1
 80188ec:	f000 fbcc 	bl	8019088 <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 80188f0:	2300      	movs	r3, #0
 80188f2:	e000      	b.n	80188f6 <rfalListenStart+0x326>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 80188f4:	2305      	movs	r3, #5
}
 80188f6:	4618      	mov	r0, r3
 80188f8:	3730      	adds	r7, #48	; 0x30
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd80      	pop	{r7, pc}
 80188fe:	bf00      	nop
 8018900:	20003618 	.word	0x20003618

08018904 <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 8018904:	b590      	push	{r4, r7, lr}
 8018906:	b083      	sub	sp, #12
 8018908:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 801890a:	4bae      	ldr	r3, [pc, #696]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 801890c:	781b      	ldrb	r3, [r3, #0]
 801890e:	2b04      	cmp	r3, #4
 8018910:	d001      	beq.n	8018916 <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 8018912:	2321      	movs	r3, #33	; 0x21
 8018914:	e2ee      	b.n	8018ef4 <rfalRunListenModeWorker+0x5f0>
    }
    
    switch( gRFAL.Lm.state )
 8018916:	4bab      	ldr	r3, [pc, #684]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018918:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801891c:	3b01      	subs	r3, #1
 801891e:	2b0f      	cmp	r3, #15
 8018920:	f200 82c6 	bhi.w	8018eb0 <rfalRunListenModeWorker+0x5ac>
 8018924:	a201      	add	r2, pc, #4	; (adr r2, 801892c <rfalRunListenModeWorker+0x28>)
 8018926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801892a:	bf00      	nop
 801892c:	0801896d 	.word	0x0801896d
 8018930:	08018993 	.word	0x08018993
 8018934:	08018c51 	.word	0x08018c51
 8018938:	08018eb1 	.word	0x08018eb1
 801893c:	08018b6b 	.word	0x08018b6b
 8018940:	08018c89 	.word	0x08018c89
 8018944:	08018eb5 	.word	0x08018eb5
 8018948:	08018eb5 	.word	0x08018eb5
 801894c:	08018eb5 	.word	0x08018eb5
 8018950:	08018eb5 	.word	0x08018eb5
 8018954:	08018eb5 	.word	0x08018eb5
 8018958:	08018d8f 	.word	0x08018d8f
 801895c:	08018d8f 	.word	0x08018d8f
 8018960:	08018e6d 	.word	0x08018e6d
 8018964:	08018c89 	.word	0x08018c89
 8018968:	08018d8f 	.word	0x08018d8f
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EON ) );
 801896c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8018970:	f003 f82a 	bl	801b9c8 <st25r3916GetInterrupt>
 8018974:	4603      	mov	r3, r0
 8018976:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	2b00      	cmp	r3, #0
 801897c:	f000 829c 	beq.w	8018eb8 <rfalRunListenModeWorker+0x5b4>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018986:	2b00      	cmp	r3, #0
 8018988:	f000 8298 	beq.w	8018ebc <rfalRunListenModeWorker+0x5b8>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 801898c:	2002      	movs	r0, #2
 801898e:	f000 fb7b 	bl	8019088 <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 8018992:	488d      	ldr	r0, [pc, #564]	; (8018bc8 <rfalRunListenModeWorker+0x2c4>)
 8018994:	f003 f818 	bl	801b9c8 <st25r3916GetInterrupt>
 8018998:	4603      	mov	r3, r0
 801899a:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	f000 828e 	beq.w	8018ec0 <rfalRunListenModeWorker+0x5bc>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d011      	beq.n	80189d2 <rfalRunListenModeWorker+0xce>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 80189ae:	1cbb      	adds	r3, r7, #2
 80189b0:	4619      	mov	r1, r3
 80189b2:	2024      	movs	r0, #36	; 0x24
 80189b4:	f002 fc02 	bl	801b1bc <st25r3916ReadRegister>
                newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 80189b8:	78bb      	ldrb	r3, [r7, #2]
 80189ba:	091b      	lsrs	r3, r3, #4
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 80189c0:	78bb      	ldrb	r3, [r7, #2]
 80189c2:	2b02      	cmp	r3, #2
 80189c4:	d901      	bls.n	80189ca <rfalRunListenModeWorker+0xc6>
                {
                    newBr = ST25R3916_REG_BIT_RATE_rxrate_424;
 80189c6:	2302      	movs	r3, #2
 80189c8:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 80189ca:	78ba      	ldrb	r2, [r7, #2]
 80189cc:	4b7d      	ldr	r3, [pc, #500]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 80189ce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d008      	beq.n	80189ee <rfalRunListenModeWorker+0xea>
 80189dc:	4b79      	ldr	r3, [pc, #484]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 80189de:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80189e2:	2bff      	cmp	r3, #255	; 0xff
 80189e4:	d003      	beq.n	80189ee <rfalRunListenModeWorker+0xea>
            {
                rfalListenSetState( RFAL_LM_STATE_READY_F );
 80189e6:	2005      	movs	r0, #5
 80189e8:	f000 fb4e 	bl	8019088 <rfalListenSetState>
 80189ec:	e0bc      	b.n	8018b68 <rfalRunListenModeWorker+0x264>
            }
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	f003 0310 	and.w	r3, r3, #16
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f000 8082 	beq.w	8018afe <rfalRunListenModeWorker+0x1fa>
 80189fa:	4b72      	ldr	r3, [pc, #456]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 80189fc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018a00:	2bff      	cmp	r3, #255	; 0xff
 8018a02:	d07c      	beq.n	8018afe <rfalRunListenModeWorker+0x1fa>
            {
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1 ) );
 8018a04:	4871      	ldr	r0, [pc, #452]	; (8018bcc <rfalRunListenModeWorker+0x2c8>)
 8018a06:	f002 ffdf 	bl	801b9c8 <st25r3916GetInterrupt>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U))
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d109      	bne.n	8018a2c <rfalRunListenModeWorker+0x128>
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d104      	bne.n	8018a2c <rfalRunListenModeWorker+0x128>
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d00a      	beq.n	8018a42 <rfalRunListenModeWorker+0x13e>
                {
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8018a2c:	20db      	movs	r0, #219	; 0xdb
 8018a2e:	f002 fcf2 	bl	801b416 <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8018a32:	20d1      	movs	r0, #209	; 0xd1
 8018a34:	f002 fcef 	bl	801b416 <st25r3916ExecuteCommand>
                    st25r3916TxOff();
 8018a38:	2108      	movs	r1, #8
 8018a3a:	2002      	movs	r0, #2
 8018a3c:	f002 fd4c 	bl	801b4d8 <st25r3916ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 8018a40:	e257      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                }
                
                /* Retrieve received data */
                *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8018a42:	4b60      	ldr	r3, [pc, #384]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a44:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8018a46:	f002 f9cc 	bl	801ade2 <st25r3916GetNumFIFOBytes>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	8023      	strh	r3, [r4, #0]
                st25r3916ReadFifo( gRFAL.Lm.rxBuf, MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8018a4e:	4b5d      	ldr	r3, [pc, #372]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a50:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8018a52:	4b5c      	ldr	r3, [pc, #368]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a54:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8018a58:	3307      	adds	r3, #7
 8018a5a:	08db      	lsrs	r3, r3, #3
 8018a5c:	b29a      	uxth	r2, r3
 8018a5e:	4b59      	ldr	r3, [pc, #356]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a62:	881b      	ldrh	r3, [r3, #0]
 8018a64:	4293      	cmp	r3, r2
 8018a66:	bf28      	it	cs
 8018a68:	4613      	movcs	r3, r2
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	4619      	mov	r1, r3
 8018a6e:	f002 fc50 	bl	801b312 <st25r3916ReadFifo>
                
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* In bitrate detection mode CRC is now checked for NFC-A frames               */
                if( (*gRFAL.Lm.rxLen > RFAL_CRC_LEN) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8018a72:	4b54      	ldr	r3, [pc, #336]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a76:	881b      	ldrh	r3, [r3, #0]
 8018a78:	2b02      	cmp	r3, #2
 8018a7a:	d91c      	bls.n	8018ab6 <rfalRunListenModeWorker+0x1b2>
 8018a7c:	4b51      	ldr	r3, [pc, #324]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a7e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d117      	bne.n	8018ab6 <rfalRunListenModeWorker+0x1b2>
                {
                    if( rfalCrcCalculateCcitt( RFAL_ISO14443A_CRC_INTVAL, gRFAL.Lm.rxBuf, *gRFAL.Lm.rxLen ) != 0U )
 8018a86:	4b4f      	ldr	r3, [pc, #316]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a88:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8018a8a:	4b4e      	ldr	r3, [pc, #312]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a8e:	881b      	ldrh	r3, [r3, #0]
 8018a90:	461a      	mov	r2, r3
 8018a92:	f246 3063 	movw	r0, #25443	; 0x6363
 8018a96:	f7f3 fbb7 	bl	800c208 <rfalCrcCalculateCcitt>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d00a      	beq.n	8018ab6 <rfalRunListenModeWorker+0x1b2>
                    {
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8018aa0:	20db      	movs	r0, #219	; 0xdb
 8018aa2:	f002 fcb8 	bl	801b416 <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8018aa6:	20d1      	movs	r0, #209	; 0xd1
 8018aa8:	f002 fcb5 	bl	801b416 <st25r3916ExecuteCommand>
                        st25r3916TxOff();
 8018aac:	2108      	movs	r1, #8
 8018aae:	2002      	movs	r0, #2
 8018ab0:	f002 fd12 	bl	801b4d8 <st25r3916ClrRegisterBits>
                        break; /* A bad reception occurred, remain in same state */
 8018ab4:	e21d      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    }
                }
                /*******************************************************************************/
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 8018ab6:	4b43      	ldr	r3, [pc, #268]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018aba:	8819      	ldrh	r1, [r3, #0]
 8018abc:	4b41      	ldr	r3, [pc, #260]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ac0:	881b      	ldrh	r3, [r3, #0]
 8018ac2:	2b02      	cmp	r3, #2
 8018ac4:	bf28      	it	cs
 8018ac6:	2302      	movcs	r3, #2
 8018ac8:	b29a      	uxth	r2, r3
 8018aca:	4b3e      	ldr	r3, [pc, #248]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ace:	1a8a      	subs	r2, r1, r2
 8018ad0:	b292      	uxth	r2, r2
 8018ad2:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 8018ad4:	4b3b      	ldr	r3, [pc, #236]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ad8:	881a      	ldrh	r2, [r3, #0]
 8018ada:	4b3a      	ldr	r3, [pc, #232]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ade:	00d2      	lsls	r2, r2, #3
 8018ae0:	b292      	uxth	r2, r2
 8018ae2:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 8018ae4:	4b37      	ldr	r3, [pc, #220]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018ae6:	2201      	movs	r2, #1
 8018ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 8018aec:	4b35      	ldr	r3, [pc, #212]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018aee:	799b      	ldrb	r3, [r3, #6]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d039      	beq.n	8018b68 <rfalRunListenModeWorker+0x264>
 8018af4:	2140      	movs	r1, #64	; 0x40
 8018af6:	2001      	movs	r0, #1
 8018af8:	f002 fcc9 	bl	801b48e <st25r3916WriteTestRegister>
 8018afc:	e034      	b.n	8018b68 <rfalRunListenModeWorker+0x264>
            }
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d01b      	beq.n	8018b40 <rfalRunListenModeWorker+0x23c>
 8018b08:	4b2e      	ldr	r3, [pc, #184]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018b0a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018b0e:	2bff      	cmp	r3, #255	; 0xff
 8018b10:	d016      	beq.n	8018b40 <rfalRunListenModeWorker+0x23c>
            {
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8018b12:	4b2c      	ldr	r3, [pc, #176]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d023      	beq.n	8018b66 <rfalRunListenModeWorker+0x262>
 8018b1e:	4b29      	ldr	r3, [pc, #164]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018b20:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d11e      	bne.n	8018b66 <rfalRunListenModeWorker+0x262>
                {
                    st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 8018b28:	1cfb      	adds	r3, r7, #3
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	2021      	movs	r0, #33	; 0x21
 8018b2e:	f002 fb45 	bl	801b1bc <st25r3916ReadRegister>
                    if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_idle )
 8018b32:	78fb      	ldrb	r3, [r7, #3]
 8018b34:	2b01      	cmp	r3, #1
 8018b36:	d916      	bls.n	8018b66 <rfalRunListenModeWorker+0x262>
                    {                            
                        rfalListenSetState( RFAL_LM_STATE_READY_A );
 8018b38:	2003      	movs	r0, #3
 8018b3a:	f000 faa5 	bl	8019088 <rfalListenSetState>
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8018b3e:	e012      	b.n	8018b66 <rfalRunListenModeWorker+0x262>
                    }
                }
            }
            else if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	f000 81bc 	beq.w	8018ec4 <rfalRunListenModeWorker+0x5c0>
 8018b4c:	4b1d      	ldr	r3, [pc, #116]	; (8018bc4 <rfalRunListenModeWorker+0x2c0>)
 8018b4e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8018b52:	f083 0301 	eor.w	r3, r3, #1
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	f000 81b3 	beq.w	8018ec4 <rfalRunListenModeWorker+0x5c0>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8018b5e:	2001      	movs	r0, #1
 8018b60:	f000 fa92 	bl	8019088 <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 8018b64:	e1ae      	b.n	8018ec4 <rfalRunListenModeWorker+0x5c0>
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8018b66:	bf00      	nop
            break;
 8018b68:	e1ac      	b.n	8018ec4 <rfalRunListenModeWorker+0x5c0>
            
            /*******************************************************************************/
            case RFAL_LM_STATE_READY_F:
                
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 8018b6a:	4819      	ldr	r0, [pc, #100]	; (8018bd0 <rfalRunListenModeWorker+0x2cc>)
 8018b6c:	f002 ff2c 	bl	801b9c8 <st25r3916GetInterrupt>
 8018b70:	4603      	mov	r3, r0
 8018b72:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	f000 81a6 	beq.w	8018ec8 <rfalRunListenModeWorker+0x5c4>
                {
                    break;  /* No interrupt to process */
                }

                if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	f040 81a2 	bne.w	8018ecc <rfalRunListenModeWorker+0x5c8>
                {
                    break;
                }
                else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	f003 0310 	and.w	r3, r3, #16
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d054      	beq.n	8018c3c <rfalRunListenModeWorker+0x338>
                {
                    /* Retrieve the error flags/irqs */
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8018b92:	f44f 0030 	mov.w	r0, #11534336	; 0xb00000
 8018b96:	f002 ff17 	bl	801b9c8 <st25r3916GetInterrupt>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	4313      	orrs	r3, r2
 8018ba0:	607b      	str	r3, [r7, #4]
                    
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U) )
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d104      	bne.n	8018bb6 <rfalRunListenModeWorker+0x2b2>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d00e      	beq.n	8018bd4 <rfalRunListenModeWorker+0x2d0>
                    {
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8018bb6:	20db      	movs	r0, #219	; 0xdb
 8018bb8:	f002 fc2d 	bl	801b416 <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8018bbc:	20d1      	movs	r0, #209	; 0xd1
 8018bbe:	f002 fc2a 	bl	801b416 <st25r3916ExecuteCommand>
                        break; /* A bad reception occurred, remain in same state */
 8018bc2:	e196      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
 8018bc4:	20003618 	.word	0x20003618
 8018bc8:	18000910 	.word	0x18000910
 8018bcc:	08f00810 	.word	0x08f00810
 8018bd0:	08000810 	.word	0x08000810
                    }
                    
                    /* Retrieve received data */
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8018bd4:	4bb2      	ldr	r3, [pc, #712]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018bd6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8018bd8:	f002 f903 	bl	801ade2 <st25r3916GetNumFIFOBytes>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	8023      	strh	r3, [r4, #0]
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8018be0:	4baf      	ldr	r3, [pc, #700]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018be2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8018be4:	4bae      	ldr	r3, [pc, #696]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018be6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8018bea:	3307      	adds	r3, #7
 8018bec:	08db      	lsrs	r3, r3, #3
 8018bee:	b29a      	uxth	r2, r3
 8018bf0:	4bab      	ldr	r3, [pc, #684]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bf4:	881b      	ldrh	r3, [r3, #0]
 8018bf6:	4293      	cmp	r3, r2
 8018bf8:	bf28      	it	cs
 8018bfa:	4613      	movcs	r3, r2
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	4619      	mov	r1, r3
 8018c00:	f002 fb87 	bl	801b312 <st25r3916ReadFifo>
                    
                    /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                    *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 8018c04:	4ba6      	ldr	r3, [pc, #664]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c08:	8819      	ldrh	r1, [r3, #0]
 8018c0a:	4ba5      	ldr	r3, [pc, #660]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c0e:	881b      	ldrh	r3, [r3, #0]
 8018c10:	2b02      	cmp	r3, #2
 8018c12:	bf28      	it	cs
 8018c14:	2302      	movcs	r3, #2
 8018c16:	b29a      	uxth	r2, r3
 8018c18:	4ba1      	ldr	r3, [pc, #644]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c1c:	1a8a      	subs	r2, r1, r2
 8018c1e:	b292      	uxth	r2, r2
 8018c20:	801a      	strh	r2, [r3, #0]
                    *gRFAL.Lm.rxLen  = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 8018c22:	4b9f      	ldr	r3, [pc, #636]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c26:	881a      	ldrh	r2, [r3, #0]
 8018c28:	4b9d      	ldr	r3, [pc, #628]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c2c:	00d2      	lsls	r2, r2, #3
 8018c2e:	b292      	uxth	r2, r2
 8018c30:	801a      	strh	r2, [r3, #0]
                    gRFAL.Lm.dataFlag = true;
 8018c32:	4b9b      	ldr	r3, [pc, #620]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018c34:	2201      	movs	r2, #1
 8018c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 8018c3a:	e149      	b.n	8018ed0 <rfalRunListenModeWorker+0x5cc>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	f000 8144 	beq.w	8018ed0 <rfalRunListenModeWorker+0x5cc>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8018c48:	2001      	movs	r0, #1
 8018c4a:	f000 fa1d 	bl	8019088 <rfalListenSetState>
                break;
 8018c4e:	e13f      	b.n	8018ed0 <rfalRunListenModeWorker+0x5cc>
                
            /*******************************************************************************/
            case RFAL_LM_STATE_READY_A:
                
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A  ) );
 8018c50:	4894      	ldr	r0, [pc, #592]	; (8018ea4 <rfalRunListenModeWorker+0x5a0>)
 8018c52:	f002 feb9 	bl	801b9c8 <st25r3916GetInterrupt>
 8018c56:	4603      	mov	r3, r0
 8018c58:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	f000 8139 	beq.w	8018ed4 <rfalRunListenModeWorker+0x5d0>
                {
                    break;  /* No interrupt to process */
                }
                
                if( (irqs & ST25R3916_IRQ_MASK_WU_A) != 0U )
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d003      	beq.n	8018c74 <rfalRunListenModeWorker+0x370>
                {                    
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_A );
 8018c6c:	2006      	movs	r0, #6
 8018c6e:	f000 fa0b 	bl	8019088 <rfalListenSetState>
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 8018c72:	e131      	b.n	8018ed8 <rfalRunListenModeWorker+0x5d4>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	f000 812c 	beq.w	8018ed8 <rfalRunListenModeWorker+0x5d4>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8018c80:	2001      	movs	r0, #1
 8018c82:	f000 fa01 	bl	8019088 <rfalListenSetState>
                break;
 8018c86:	e127      	b.n	8018ed8 <rfalRunListenModeWorker+0x5d4>
            
            /*******************************************************************************/                
            case RFAL_LM_STATE_ACTIVE_A:
            case RFAL_LM_STATE_ACTIVE_Ax:
                
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 8018c88:	f44f 6001 	mov.w	r0, #2064	; 0x810
 8018c8c:	f002 fe9c 	bl	801b9c8 <st25r3916GetInterrupt>
 8018c90:	4603      	mov	r3, r0
 8018c92:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	f000 8120 	beq.w	8018edc <rfalRunListenModeWorker+0x5d8>
                {                        
                    break;  /* No interrupt to process */
                }

                if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f003 0310 	and.w	r3, r3, #16
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d069      	beq.n	8018d7a <rfalRunListenModeWorker+0x476>
                {
                    /* Retrieve the error flags/irqs */
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8018ca6:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8018caa:	f002 fe8d 	bl	801b9c8 <st25r3916GetInterrupt>
 8018cae:	4602      	mov	r2, r0
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	4313      	orrs	r3, r2
 8018cb4:	607b      	str	r3, [r7, #4]
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8018cb6:	4b7a      	ldr	r3, [pc, #488]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018cb8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8018cba:	f002 f892 	bl	801ade2 <st25r3916GetNumFIFOBytes>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	8023      	strh	r3, [r4, #0]
                    
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d10e      	bne.n	8018cea <rfalRunListenModeWorker+0x3e6>
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d109      	bne.n	8018cea <rfalRunListenModeWorker+0x3e6>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d104      	bne.n	8018cea <rfalRunListenModeWorker+0x3e6>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 8018ce0:	4b6f      	ldr	r3, [pc, #444]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ce4:	881b      	ldrh	r3, [r3, #0]
 8018ce6:	2b02      	cmp	r3, #2
 8018ce8:	d820      	bhi.n	8018d2c <rfalRunListenModeWorker+0x428>
                    {
                        /* Clear rx context and FIFO */
                        *gRFAL.Lm.rxLen = 0;
 8018cea:	4b6d      	ldr	r3, [pc, #436]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cee:	2200      	movs	r2, #0
 8018cf0:	801a      	strh	r2, [r3, #0]
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8018cf2:	20db      	movs	r0, #219	; 0xdb
 8018cf4:	f002 fb8f 	bl	801b416 <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8018cf8:	20d1      	movs	r0, #209	; 0xd1
 8018cfa:	f002 fb8c 	bl	801b416 <st25r3916ExecuteCommand>
                        
                        /* Check if we should go to IDLE or Sleep */ 
                        if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_Ax )
 8018cfe:	4b68      	ldr	r3, [pc, #416]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018d04:	2b0f      	cmp	r3, #15
 8018d06:	d10a      	bne.n	8018d1e <rfalRunListenModeWorker+0x41a>
                        {
                            rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gRFAL.Lm.rxBuf, gRFAL.Lm.rxBufLen, gRFAL.Lm.rxLen );
 8018d08:	4b65      	ldr	r3, [pc, #404]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d0a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8018d0c:	4b64      	ldr	r3, [pc, #400]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d0e:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8018d12:	4b63      	ldr	r3, [pc, #396]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d16:	200c      	movs	r0, #12
 8018d18:	f000 f922 	bl	8018f60 <rfalListenSleepStart>
 8018d1c:	e002      	b.n	8018d24 <rfalRunListenModeWorker+0x420>
                        }
                        else
                        {
                            rfalListenSetState( RFAL_LM_STATE_IDLE );
 8018d1e:	2002      	movs	r0, #2
 8018d20:	f000 f9b2 	bl	8019088 <rfalListenSetState>
                        }
                        
                        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_RXE );
 8018d24:	2010      	movs	r0, #16
 8018d26:	f002 fea5 	bl	801ba74 <st25r3916DisableInterrupts>
                        break;
 8018d2a:	e0e2      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    }

                    /* Remove CRC from length */
                    *gRFAL.Lm.rxLen -= RFAL_CRC_LEN;
 8018d2c:	4b5c      	ldr	r3, [pc, #368]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d30:	881a      	ldrh	r2, [r3, #0]
 8018d32:	4b5b      	ldr	r3, [pc, #364]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d36:	3a02      	subs	r2, #2
 8018d38:	b292      	uxth	r2, r2
 8018d3a:	801a      	strh	r2, [r3, #0]
                    
                    /* Retrieve received data */
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );                    
 8018d3c:	4b58      	ldr	r3, [pc, #352]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8018d40:	4b57      	ldr	r3, [pc, #348]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d42:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8018d46:	3307      	adds	r3, #7
 8018d48:	08db      	lsrs	r3, r3, #3
 8018d4a:	b29a      	uxth	r2, r3
 8018d4c:	4b54      	ldr	r3, [pc, #336]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d50:	881b      	ldrh	r3, [r3, #0]
 8018d52:	4293      	cmp	r3, r2
 8018d54:	bf28      	it	cs
 8018d56:	4613      	movcs	r3, r2
 8018d58:	b29b      	uxth	r3, r3
 8018d5a:	4619      	mov	r1, r3
 8018d5c:	f002 fad9 	bl	801b312 <st25r3916ReadFifo>
                    *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 8018d60:	4b4f      	ldr	r3, [pc, #316]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d64:	881a      	ldrh	r2, [r3, #0]
 8018d66:	4b4e      	ldr	r3, [pc, #312]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d6a:	00d2      	lsls	r2, r2, #3
 8018d6c:	b292      	uxth	r2, r2
 8018d6e:	801a      	strh	r2, [r3, #0]
                    gRFAL.Lm.dataFlag = true;
 8018d70:	4b4b      	ldr	r3, [pc, #300]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018d72:	2201      	movs	r2, #1
 8018d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 8018d78:	e0b2      	b.n	8018ee0 <rfalRunListenModeWorker+0x5dc>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	f000 80ad 	beq.w	8018ee0 <rfalRunListenModeWorker+0x5dc>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8018d86:	2001      	movs	r0, #1
 8018d88:	f000 f97e 	bl	8019088 <rfalListenSetState>
                break;
 8018d8c:	e0a8      	b.n	8018ee0 <rfalRunListenModeWorker+0x5dc>
            /*******************************************************************************/
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
                
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 8018d8e:	4846      	ldr	r0, [pc, #280]	; (8018ea8 <rfalRunListenModeWorker+0x5a4>)
 8018d90:	f002 fe1a 	bl	801b9c8 <st25r3916GetInterrupt>
 8018d94:	4603      	mov	r3, r0
 8018d96:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	f000 80a2 	beq.w	8018ee4 <rfalRunListenModeWorker+0x5e0>
                {
                    break;  /* No interrupt to process */
                }
                
                if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d011      	beq.n	8018dce <rfalRunListenModeWorker+0x4ca>
                {
                    uint8_t    newBr;
                    /* Retrieve detected bitrate */
                    st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 8018daa:	1c7b      	adds	r3, r7, #1
 8018dac:	4619      	mov	r1, r3
 8018dae:	2024      	movs	r0, #36	; 0x24
 8018db0:	f002 fa04 	bl	801b1bc <st25r3916ReadRegister>
                    newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8018db4:	787b      	ldrb	r3, [r7, #1]
 8018db6:	091b      	lsrs	r3, r3, #4
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	707b      	strb	r3, [r7, #1]
    
                    if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 8018dbc:	787b      	ldrb	r3, [r7, #1]
 8018dbe:	2b02      	cmp	r3, #2
 8018dc0:	d901      	bls.n	8018dc6 <rfalRunListenModeWorker+0x4c2>
                    {
                        newBr = ST25R3916_REG_BIT_RATE_rxrate_424;
 8018dc2:	2302      	movs	r3, #2
 8018dc4:	707b      	strb	r3, [r7, #1]
                    }
    
                    gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 8018dc6:	787a      	ldrb	r2, [r7, #1]
 8018dc8:	4b35      	ldr	r3, [pc, #212]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018dca:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                }
                
                if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d008      	beq.n	8018dea <rfalRunListenModeWorker+0x4e6>
 8018dd8:	4b31      	ldr	r3, [pc, #196]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018dda:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018dde:	2bff      	cmp	r3, #255	; 0xff
 8018de0:	d003      	beq.n	8018dea <rfalRunListenModeWorker+0x4e6>
                {
                    rfalListenSetState( RFAL_LM_STATE_READY_F );
 8018de2:	2005      	movs	r0, #5
 8018de4:	f000 f950 	bl	8019088 <rfalListenSetState>
 8018de8:	e03f      	b.n	8018e6a <rfalRunListenModeWorker+0x566>
                }
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	f003 0310 	and.w	r3, r3, #16
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d00f      	beq.n	8018e14 <rfalRunListenModeWorker+0x510>
 8018df4:	4b2a      	ldr	r3, [pc, #168]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018df6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018dfa:	2bff      	cmp	r3, #255	; 0xff
 8018dfc:	d00a      	beq.n	8018e14 <rfalRunListenModeWorker+0x510>
                {
                    /* Clear rx context and FIFO */
                    *gRFAL.Lm.rxLen = 0;
 8018dfe:	4b28      	ldr	r3, [pc, #160]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e02:	2200      	movs	r2, #0
 8018e04:	801a      	strh	r2, [r3, #0]
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8018e06:	20db      	movs	r0, #219	; 0xdb
 8018e08:	f002 fb05 	bl	801b416 <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8018e0c:	20d1      	movs	r0, #209	; 0xd1
 8018e0e:	f002 fb02 	bl	801b416 <st25r3916ExecuteCommand>
 8018e12:	e02a      	b.n	8018e6a <rfalRunListenModeWorker+0x566>
                    
                    /* REMARK: In order to support CUP or proprietary frames, handling could be added here */
                }
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d01b      	beq.n	8018e56 <rfalRunListenModeWorker+0x552>
 8018e1e:	4b20      	ldr	r3, [pc, #128]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018e20:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018e24:	2bff      	cmp	r3, #255	; 0xff
 8018e26:	d016      	beq.n	8018e56 <rfalRunListenModeWorker+0x552>
                {
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8018e28:	4b1d      	ldr	r3, [pc, #116]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d019      	beq.n	8018e68 <rfalRunListenModeWorker+0x564>
 8018e34:	4b1a      	ldr	r3, [pc, #104]	; (8018ea0 <rfalRunListenModeWorker+0x59c>)
 8018e36:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d114      	bne.n	8018e68 <rfalRunListenModeWorker+0x564>
                    {
                        st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 8018e3e:	1cfb      	adds	r3, r7, #3
 8018e40:	4619      	mov	r1, r3
 8018e42:	2021      	movs	r0, #33	; 0x21
 8018e44:	f002 f9ba 	bl	801b1bc <st25r3916ReadRegister>
                        if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_halt )
 8018e48:	78fb      	ldrb	r3, [r7, #3]
 8018e4a:	2b09      	cmp	r3, #9
 8018e4c:	d90c      	bls.n	8018e68 <rfalRunListenModeWorker+0x564>
                        {
                            rfalListenSetState( RFAL_LM_STATE_READY_Ax );
 8018e4e:	200e      	movs	r0, #14
 8018e50:	f000 f91a 	bl	8019088 <rfalListenSetState>
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8018e54:	e008      	b.n	8018e68 <rfalRunListenModeWorker+0x564>
                        }
                    }
                }
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d043      	beq.n	8018ee8 <rfalRunListenModeWorker+0x5e4>
                {
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8018e60:	2001      	movs	r0, #1
 8018e62:	f000 f911 	bl	8019088 <rfalListenSetState>
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 8018e66:	e03f      	b.n	8018ee8 <rfalRunListenModeWorker+0x5e4>
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8018e68:	bf00      	nop
                break;
 8018e6a:	e03d      	b.n	8018ee8 <rfalRunListenModeWorker+0x5e4>
            
            /*******************************************************************************/
            case RFAL_LM_STATE_READY_Ax:
                
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A_X  ) );
 8018e6c:	480f      	ldr	r0, [pc, #60]	; (8018eac <rfalRunListenModeWorker+0x5a8>)
 8018e6e:	f002 fdab 	bl	801b9c8 <st25r3916GetInterrupt>
 8018e72:	4603      	mov	r3, r0
 8018e74:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d037      	beq.n	8018eec <rfalRunListenModeWorker+0x5e8>
                {
                    break;  /* No interrupt to process */
                }
                
                if( (irqs & ST25R3916_IRQ_MASK_WU_A_X) != 0U )
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d003      	beq.n	8018e8e <rfalRunListenModeWorker+0x58a>
                {                    
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_Ax );
 8018e86:	200f      	movs	r0, #15
 8018e88:	f000 f8fe 	bl	8019088 <rfalListenSetState>
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 8018e8c:	e030      	b.n	8018ef0 <rfalRunListenModeWorker+0x5ec>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d02b      	beq.n	8018ef0 <rfalRunListenModeWorker+0x5ec>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8018e98:	2001      	movs	r0, #1
 8018e9a:	f000 f8f5 	bl	8019088 <rfalListenSetState>
                break;
 8018e9e:	e027      	b.n	8018ef0 <rfalRunListenModeWorker+0x5ec>
 8018ea0:	20003618 	.word	0x20003618
 8018ea4:	01000800 	.word	0x01000800
 8018ea8:	18000910 	.word	0x18000910
 8018eac:	02000800 	.word	0x02000800
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8018eb0:	2321      	movs	r3, #33	; 0x21
 8018eb2:	e01f      	b.n	8018ef4 <rfalRunListenModeWorker+0x5f0>
                break;
 8018eb4:	bf00      	nop
 8018eb6:	e01c      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
              break;  /* No interrupt to process */
 8018eb8:	bf00      	nop
 8018eba:	e01a      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                break;
 8018ebc:	bf00      	nop
 8018ebe:	e018      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                break;  /* No interrupt to process */
 8018ec0:	bf00      	nop
 8018ec2:	e016      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
            break;
 8018ec4:	bf00      	nop
 8018ec6:	e014      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 8018ec8:	bf00      	nop
 8018eca:	e012      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    break;
 8018ecc:	bf00      	nop
 8018ece:	e010      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                break;
 8018ed0:	bf00      	nop
 8018ed2:	e00e      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 8018ed4:	bf00      	nop
 8018ed6:	e00c      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                break;
 8018ed8:	bf00      	nop
 8018eda:	e00a      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 8018edc:	bf00      	nop
 8018ede:	e008      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                break;
 8018ee0:	bf00      	nop
 8018ee2:	e006      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 8018ee4:	bf00      	nop
 8018ee6:	e004      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                break;
 8018ee8:	bf00      	nop
 8018eea:	e002      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 8018eec:	bf00      	nop
 8018eee:	e000      	b.n	8018ef2 <rfalRunListenModeWorker+0x5ee>
                break;
 8018ef0:	bf00      	nop
    }
    return ERR_NONE;
 8018ef2:	2300      	movs	r3, #0
}
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	370c      	adds	r7, #12
 8018ef8:	46bd      	mov	sp, r7
 8018efa:	bd90      	pop	{r4, r7, pc}

08018efc <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	af00      	add	r7, sp, #0
    
    /* Check if RFAL is initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 8018f00:	4b15      	ldr	r3, [pc, #84]	; (8018f58 <rfalListenStop+0x5c>)
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d101      	bne.n	8018f0c <rfalListenStop+0x10>
    {
        return ERR_WRONG_STATE;
 8018f08:	2321      	movs	r3, #33	; 0x21
 8018f0a:	e022      	b.n	8018f52 <rfalListenStop+0x56>
    }
    
    gRFAL.Lm.state = RFAL_LM_STATE_NOT_INIT;
 8018f0c:	4b12      	ldr	r3, [pc, #72]	; (8018f58 <rfalListenStop+0x5c>)
 8018f0e:	2200      	movs	r2, #0
 8018f10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 8018f14:	4b10      	ldr	r3, [pc, #64]	; (8018f58 <rfalListenStop+0x5c>)
 8018f16:	799b      	ldrb	r3, [r3, #6]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d003      	beq.n	8018f24 <rfalListenStop+0x28>
 8018f1c:	2140      	movs	r1, #64	; 0x40
 8018f1e:	2001      	movs	r0, #1
 8018f20:	f002 fab5 	bl	801b48e <st25r3916WriteTestRegister>
	
    /* Re-Enable the Oscillator if not running */
    st25r3916OscOn();
 8018f24:	f001 fd76 	bl	801aa14 <st25r3916OscOn>
    
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 8018f28:	f7fd fd6c 	bl	8016a04 <rfalFieldOff>
    
    /* Disable all automatic responses */
    st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_rfu | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p) );
 8018f2c:	210f      	movs	r1, #15
 8018f2e:	2008      	movs	r0, #8
 8018f30:	f002 fb09 	bl	801b546 <st25r3916SetRegisterBits>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_om_iso14443a | ST25R3916_REG_MODE_tr_am_ook | ST25R3916_REG_MODE_nfc_ar_off) );
 8018f34:	2108      	movs	r1, #8
 8018f36:	2003      	movs	r0, #3
 8018f38:	f002 f97e 	bl	801b238 <st25r3916WriteRegister>
    
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 | ST25R3916_IRQ_MASK_OSC ) );
 8018f3c:	4807      	ldr	r0, [pc, #28]	; (8018f5c <rfalListenStop+0x60>)
 8018f3e:	f002 fd99 	bl	801ba74 <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 ) );
 8018f42:	f04f 50f8 	mov.w	r0, #520093696	; 0x1f000000
 8018f46:	f002 fd3f 	bl	801b9c8 <st25r3916GetInterrupt>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 8018f4a:	2007      	movs	r0, #7
 8018f4c:	f7f3 f84e 	bl	800bfec <rfalSetAnalogConfig>
    
    return ERR_NONE;
 8018f50:	2300      	movs	r3, #0
}
 8018f52:	4618      	mov	r0, r3
 8018f54:	bd80      	pop	{r7, pc}
 8018f56:	bf00      	nop
 8018f58:	20003618 	.word	0x20003618
 8018f5c:	1f000080 	.word	0x1f000080

08018f60 <rfalListenSleepStart>:

/*******************************************************************************/
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	60b9      	str	r1, [r7, #8]
 8018f68:	607b      	str	r3, [r7, #4]
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	73fb      	strb	r3, [r7, #15]
 8018f6e:	4613      	mov	r3, r2
 8018f70:	81bb      	strh	r3, [r7, #12]
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 8018f72:	4b34      	ldr	r3, [pc, #208]	; (8019044 <rfalListenSleepStart+0xe4>)
 8018f74:	781b      	ldrb	r3, [r3, #0]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d101      	bne.n	8018f7e <rfalListenSleepStart+0x1e>
    {
        return ERR_WRONG_STATE;
 8018f7a:	2321      	movs	r3, #33	; 0x21
 8018f7c:	e05d      	b.n	801903a <rfalListenSleepStart+0xda>
    }
    
    switch(sleepSt)
 8018f7e:	7bfb      	ldrb	r3, [r7, #15]
 8018f80:	2b10      	cmp	r3, #16
 8018f82:	d013      	beq.n	8018fac <rfalListenSleepStart+0x4c>
 8018f84:	2b10      	cmp	r3, #16
 8018f86:	dc20      	bgt.n	8018fca <rfalListenSleepStart+0x6a>
 8018f88:	2b0c      	cmp	r3, #12
 8018f8a:	d002      	beq.n	8018f92 <rfalListenSleepStart+0x32>
 8018f8c:	2b0d      	cmp	r3, #13
 8018f8e:	d01a      	beq.n	8018fc6 <rfalListenSleepStart+0x66>
 8018f90:	e01b      	b.n	8018fca <rfalListenSleepStart+0x6a>
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_SLEEP_A:
            
            /* Enable automatic responses for A */
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8018f92:	2101      	movs	r1, #1
 8018f94:	2008      	movs	r0, #8
 8018f96:	f002 fa9f 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Reset NFCA target */
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 8018f9a:	20ce      	movs	r0, #206	; 0xce
 8018f9c:	f002 fa3b 	bl	801b416 <st25r3916ExecuteCommand>
            
            
            /* Set Target mode, Bit Rate detection and Listen Mode for NFC-A */
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                     ,
 8018fa0:	22c8      	movs	r2, #200	; 0xc8
 8018fa2:	21fb      	movs	r1, #251	; 0xfb
 8018fa4:	2003      	movs	r0, #3
 8018fa6:	f002 fafb 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                     (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask)                       ,
                                     (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off)  );
            break;
 8018faa:	e010      	b.n	8018fce <rfalListenSleepStart+0x6e>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_SLEEP_AF:
            
            /* Enable automatic responses for A + F */
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8018fac:	2105      	movs	r1, #5
 8018fae:	2008      	movs	r0, #8
 8018fb0:	f002 fa92 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Reset NFCA target state */
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 8018fb4:	20ce      	movs	r0, #206	; 0xce
 8018fb6:	f002 fa2e 	bl	801b416 <st25r3916ExecuteCommand>
            
            /* Set Target mode, Bit Rate detection, Listen Mode for NFC-A and NFC-F */
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                                           ,
 8018fba:	22e8      	movs	r2, #232	; 0xe8
 8018fbc:	21fb      	movs	r1, #251	; 0xfb
 8018fbe:	2003      	movs	r0, #3
 8018fc0:	f002 faee 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                     (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask)                                             ,
                                     (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off)  );
            break;
 8018fc4:	e003      	b.n	8018fce <rfalListenSleepStart+0x6e>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_SLEEP_B:
            /* REMARK: Support for CE-B would be added here  */
            return ERR_NOT_IMPLEMENTED;                    
 8018fc6:	230f      	movs	r3, #15
 8018fc8:	e037      	b.n	801903a <rfalListenSleepStart+0xda>
            
        /*******************************************************************************/
        default:
            return ERR_PARAM;
 8018fca:	2307      	movs	r3, #7
 8018fcc:	e035      	b.n	801903a <rfalListenSleepStart+0xda>
            
    }
    
    
    /* Ensure that the  NFCIP1 mode is disabled */
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 8018fce:	2120      	movs	r1, #32
 8018fd0:	2005      	movs	r0, #5
 8018fd2:	f002 fa81 	bl	801b4d8 <st25r3916ClrRegisterBits>
    
    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8018fd6:	20d1      	movs	r0, #209	; 0xd1
 8018fd8:	f002 fa1d 	bl	801b416 <st25r3916ExecuteCommand>
    
    
    /* Clear and enable required IRQs */
    st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | 
                                     ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_EOF  | gRFAL.Lm.mdIrqs ) );
 8018fdc:	4b19      	ldr	r3, [pc, #100]	; (8019044 <rfalListenSleepStart+0xe4>)
 8018fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | 
 8018fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018fe4:	f443 53c9 	orr.w	r3, r3, #6432	; 0x1920
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f002 fd29 	bl	801ba40 <st25r3916ClearAndEnableInterrupts>
    
    /* Check whether the field was turn off right after the Sleep request */
    if( !rfalIsExtFieldOn() )
 8018fee:	f7ff fae5 	bl	80185bc <rfalIsExtFieldOn>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	f083 0301 	eor.w	r3, r3, #1
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d003      	beq.n	8019006 <rfalListenSleepStart+0xa6>
    {
        /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, RFAL_LM_STATE_NOT_INIT );*/
        
        rfalListenStop();
 8018ffe:	f7ff ff7d 	bl	8018efc <rfalListenStop>
        return ERR_LINK_LOSS;
 8019002:	2325      	movs	r3, #37	; 0x25
 8019004:	e019      	b.n	801903a <rfalListenSleepStart+0xda>
    }
    
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, sleepSt );*/

    /* Set the new Sleep State*/
    gRFAL.Lm.state    = sleepSt;
 8019006:	4a0f      	ldr	r2, [pc, #60]	; (8019044 <rfalListenSleepStart+0xe4>)
 8019008:	7bfb      	ldrb	r3, [r7, #15]
 801900a:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    gRFAL.state       = RFAL_STATE_LM;
 801900e:	4b0d      	ldr	r3, [pc, #52]	; (8019044 <rfalListenSleepStart+0xe4>)
 8019010:	2204      	movs	r2, #4
 8019012:	701a      	strb	r2, [r3, #0]
    
    gRFAL.Lm.rxBuf    = rxBuf;
 8019014:	4a0b      	ldr	r2, [pc, #44]	; (8019044 <rfalListenSleepStart+0xe4>)
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	6693      	str	r3, [r2, #104]	; 0x68
    gRFAL.Lm.rxBufLen = rxBufLen;
 801901a:	4a0a      	ldr	r2, [pc, #40]	; (8019044 <rfalListenSleepStart+0xe4>)
 801901c:	89bb      	ldrh	r3, [r7, #12]
 801901e:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
    gRFAL.Lm.rxLen    = rxLen;
 8019022:	4a08      	ldr	r2, [pc, #32]	; (8019044 <rfalListenSleepStart+0xe4>)
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6713      	str	r3, [r2, #112]	; 0x70
    *gRFAL.Lm.rxLen   = 0;
 8019028:	4b06      	ldr	r3, [pc, #24]	; (8019044 <rfalListenSleepStart+0xe4>)
 801902a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801902c:	2200      	movs	r2, #0
 801902e:	801a      	strh	r2, [r3, #0]
    gRFAL.Lm.dataFlag = false;
 8019030:	4b04      	ldr	r3, [pc, #16]	; (8019044 <rfalListenSleepStart+0xe4>)
 8019032:	2200      	movs	r2, #0
 8019034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
             
    return ERR_NONE;
 8019038:	2300      	movs	r3, #0
}
 801903a:	4618      	mov	r0, r3
 801903c:	3710      	adds	r7, #16
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}
 8019042:	bf00      	nop
 8019044:	20003618 	.word	0x20003618

08019048 <rfalListenGetState>:

/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 8019048:	b480      	push	{r7}
 801904a:	b083      	sub	sp, #12
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d004      	beq.n	8019062 <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 8019058:	4b0a      	ldr	r3, [pc, #40]	; (8019084 <rfalListenGetState+0x3c>)
 801905a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801905e:	683b      	ldr	r3, [r7, #0]
 8019060:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d004      	beq.n	8019072 <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 8019068:	4b06      	ldr	r3, [pc, #24]	; (8019084 <rfalListenGetState+0x3c>)
 801906a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 8019072:	4b04      	ldr	r3, [pc, #16]	; (8019084 <rfalListenGetState+0x3c>)
 8019074:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 8019078:	4618      	mov	r0, r3
 801907a:	370c      	adds	r7, #12
 801907c:	46bd      	mov	sp, r7
 801907e:	bc80      	pop	{r7}
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop
 8019084:	20003618 	.word	0x20003618

08019088 <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b084      	sub	sp, #16
 801908c:	af00      	add	r7, sp, #0
 801908e:	4603      	mov	r3, r0
 8019090:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    rfalLmState newState;
    bool        reSetState;

    /* Check if RFAL is initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 8019092:	4bba      	ldr	r3, [pc, #744]	; (801937c <rfalListenSetState+0x2f4>)
 8019094:	781b      	ldrb	r3, [r3, #0]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d101      	bne.n	801909e <rfalListenSetState+0x16>
    {
        return ERR_WRONG_STATE;
 801909a:	2321      	movs	r3, #33	; 0x21
 801909c:	e16a      	b.n	8019374 <rfalListenSetState+0x2ec>
    }
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 801909e:	4bb7      	ldr	r3, [pc, #732]	; (801937c <rfalListenSetState+0x2f4>)
 80190a0:	2200      	movs	r2, #0
 80190a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    newState          = newSt;
 80190a6:	79fb      	ldrb	r3, [r7, #7]
 80190a8:	737b      	strb	r3, [r7, #13]
    ret               = ERR_NONE;
 80190aa:	2300      	movs	r3, #0
 80190ac:	81fb      	strh	r3, [r7, #14]

    do{
        reSetState = false;
 80190ae:	2300      	movs	r3, #0
 80190b0:	733b      	strb	r3, [r7, #12]

        /*******************************************************************************/
        switch( newState )
 80190b2:	7b7b      	ldrb	r3, [r7, #13]
 80190b4:	3b01      	subs	r3, #1
 80190b6:	2b0f      	cmp	r3, #15
 80190b8:	f200 814e 	bhi.w	8019358 <rfalListenSetState+0x2d0>
 80190bc:	a201      	add	r2, pc, #4	; (adr r2, 80190c4 <rfalListenSetState+0x3c>)
 80190be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190c2:	bf00      	nop
 80190c4:	08019105 	.word	0x08019105
 80190c8:	080191b7 	.word	0x080191b7
 80190cc:	080192f7 	.word	0x080192f7
 80190d0:	08019359 	.word	0x08019359
 80190d4:	08019287 	.word	0x08019287
 80190d8:	08019333 	.word	0x08019333
 80190dc:	0801935d 	.word	0x0801935d
 80190e0:	0801935d 	.word	0x0801935d
 80190e4:	080192dd 	.word	0x080192dd
 80190e8:	0801935d 	.word	0x0801935d
 80190ec:	0801934b 	.word	0x0801934b
 80190f0:	08019355 	.word	0x08019355
 80190f4:	08019355 	.word	0x08019355
 80190f8:	080192f7 	.word	0x080192f7
 80190fc:	08019333 	.word	0x08019333
 8019100:	08019355 	.word	0x08019355
        {
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /* Enable the receiver and reset logic */
                st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_rx_en );
 8019104:	2140      	movs	r1, #64	; 0x40
 8019106:	2002      	movs	r0, #2
 8019108:	f002 fa1d 	bl	801b546 <st25r3916SetRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 801910c:	20c2      	movs	r0, #194	; 0xc2
 801910e:	f002 f982 	bl	801b416 <st25r3916ExecuteCommand>
                
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U )
 8019112:	4b9a      	ldr	r3, [pc, #616]	; (801937c <rfalListenSetState+0x2f4>)
 8019114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801911a:	2b00      	cmp	r3, #0
 801911c:	d006      	beq.n	801912c <rfalListenSetState+0xa4>
                {
                    /* Enable automatic responses for A */
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a );
 801911e:	2101      	movs	r1, #1
 8019120:	2008      	movs	r0, #8
 8019122:	f002 f9d9 	bl	801b4d8 <st25r3916ClrRegisterBits>
                    
                    /* Prepares the NFCIP-1 Passive target logic to wait in the Sense/Idle state */
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 8019126:	20cd      	movs	r0, #205	; 0xcd
 8019128:	f002 f975 	bl	801b416 <st25r3916ExecuteCommand>
                }
                
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCF) != 0U )
 801912c:	4b93      	ldr	r3, [pc, #588]	; (801937c <rfalListenSetState+0x2f4>)
 801912e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019134:	2b00      	cmp	r3, #0
 8019136:	d003      	beq.n	8019140 <rfalListenSetState+0xb8>
                {
                    /* Enable automatic responses for F */
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 8019138:	2104      	movs	r1, #4
 801913a:	2008      	movs	r0, #8
 801913c:	f002 f9cc 	bl	801b4d8 <st25r3916ClrRegisterBits>
                }
                
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8019140:	4b8e      	ldr	r3, [pc, #568]	; (801937c <rfalListenSetState+0x2f4>)
 8019142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019148:	2b00      	cmp	r3, #0
 801914a:	d008      	beq.n	801915e <rfalListenSetState+0xd6>
                {
                    /* Ensure automatic response RF Collision Avoidance is back to only after Rx */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 801914c:	2201      	movs	r2, #1
 801914e:	2103      	movs	r1, #3
 8019150:	2003      	movs	r0, #3
 8019152:	f002 fa25 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                    
                    /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                    st25r3916TxOff();
 8019156:	2108      	movs	r1, #8
 8019158:	2002      	movs	r0, #2
 801915a:	f002 f9bd 	bl	801b4d8 <st25r3916ClrRegisterBits>
                }
                
                /*******************************************************************************/
                /* Ensure that the  NFCIP1 mode is disabled */
                st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 801915e:	2120      	movs	r1, #32
 8019160:	2005      	movs	r0, #5
 8019162:	f002 f9b9 	bl	801b4d8 <st25r3916ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8019166:	f04f 30ff 	mov.w	r0, #4294967295
 801916a:	f002 fc83 	bl	801ba74 <st25r3916DisableInterrupts>
                
                st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_OSC |
                                                    ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_EOF  | gRFAL.Lm.mdIrqs ) );
 801916e:	4b83      	ldr	r3, [pc, #524]	; (801937c <rfalListenSetState+0x2f4>)
 8019170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_OSC |
 8019172:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019176:	f443 53cd 	orr.w	r3, r3, #6560	; 0x19a0
 801917a:	4618      	mov	r0, r3
 801917c:	f002 fc60 	bl	801ba40 <st25r3916ClearAndEnableInterrupts>
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8019180:	4b7e      	ldr	r3, [pc, #504]	; (801937c <rfalListenSetState+0x2f4>)
 8019182:	22ff      	movs	r2, #255	; 0xff
 8019184:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                
                
                /*******************************************************************************/
                /* Apply the initial mode */
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 8019188:	4b7c      	ldr	r3, [pc, #496]	; (801937c <rfalListenSetState+0x2f4>)
 801918a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801918c:	b2db      	uxtb	r3, r3
 801918e:	461a      	mov	r2, r3
 8019190:	21fb      	movs	r1, #251	; 0xfb
 8019192:	2003      	movs	r0, #3
 8019194:	f002 fa04 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 8019198:	f7ff fa10 	bl	80185bc <rfalIsExtFieldOn>
 801919c:	4603      	mov	r3, r0
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d004      	beq.n	80191ac <rfalListenSetState+0x124>
                {
                    reSetState = true;
 80191a2:	2301      	movs	r3, #1
 80191a4:	733b      	strb	r3, [r7, #12]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 80191a6:	2302      	movs	r3, #2
 80191a8:	737b      	strb	r3, [r7, #13]
                else
                {
                    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_tx_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_en) );
                }
            #endif
                break;
 80191aa:	e0da      	b.n	8019362 <rfalListenSetState+0x2da>
                    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_tx_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_en) );
 80191ac:	21c8      	movs	r1, #200	; 0xc8
 80191ae:	2002      	movs	r0, #2
 80191b0:	f002 f992 	bl	801b4d8 <st25r3916ClrRegisterBits>
                break;
 80191b4:	e0d5      	b.n	8019362 <rfalListenSetState+0x2da>
            /*******************************************************************************/
            case RFAL_LM_STATE_IDLE:
            
                /*******************************************************************************/
                /* Check if device is coming from Low Power bit rate detection */
                if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en )  )
 80191b6:	2280      	movs	r2, #128	; 0x80
 80191b8:	2180      	movs	r1, #128	; 0x80
 80191ba:	2002      	movs	r0, #2
 80191bc:	f002 fa74 	bl	801b6a8 <st25r3916CheckReg>
 80191c0:	4603      	mov	r3, r0
 80191c2:	f083 0301 	eor.w	r3, r3, #1
 80191c6:	b2db      	uxtb	r3, r3
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d018      	beq.n	80191fe <rfalListenSetState+0x176>
                {
                    /* Exit Low Power mode and confirm the temporarily enable */
                    st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en) );
 80191cc:	21c0      	movs	r1, #192	; 0xc0
 80191ce:	2002      	movs	r0, #2
 80191d0:	f002 f9b9 	bl	801b546 <st25r3916SetRegisterBits>
                
                    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok )  )
 80191d4:	2210      	movs	r2, #16
 80191d6:	2110      	movs	r1, #16
 80191d8:	2031      	movs	r0, #49	; 0x31
 80191da:	f002 fa65 	bl	801b6a8 <st25r3916CheckReg>
 80191de:	4603      	mov	r3, r0
 80191e0:	f083 0301 	eor.w	r3, r3, #1
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d00c      	beq.n	8019204 <rfalListenSetState+0x17c>
                    {
                        /* Wait for Oscilator ready */
                        if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE ) == 0U )
 80191ea:	210a      	movs	r1, #10
 80191ec:	2080      	movs	r0, #128	; 0x80
 80191ee:	f002 fb97 	bl	801b920 <st25r3916WaitForInterruptsTimed>
 80191f2:	4603      	mov	r3, r0
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d105      	bne.n	8019204 <rfalListenSetState+0x17c>
                        {
                            ret = ERR_IO;
 80191f8:	2303      	movs	r3, #3
 80191fa:	81fb      	strh	r3, [r7, #14]
                            break;
 80191fc:	e0b1      	b.n	8019362 <rfalListenSetState+0x2da>
                        }
                    }
                }
                else
                {
                    st25r3916GetInterrupt(ST25R3916_IRQ_MASK_OSC);
 80191fe:	2080      	movs	r0, #128	; 0x80
 8019200:	f002 fbe2 	bl	801b9c8 <st25r3916GetInterrupt>
                 *      Avoidance keeping our field On; upon a Protocol error upper layer sets 
                 *      again the state to IDLE to clear dataFlag and wait for next data.
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8019204:	4b5d      	ldr	r3, [pc, #372]	; (801937c <rfalListenSetState+0x2f4>)
 8019206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801920c:	2b00      	cmp	r3, #0
 801920e:	d01a      	beq.n	8019246 <rfalListenSetState+0x1be>
                {
                    /* Ensure nfc_ar is reseted and back to only after Rx */
                    st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8019210:	20c2      	movs	r0, #194	; 0xc2
 8019212:	f002 f900 	bl	801b416 <st25r3916ExecuteCommand>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 8019216:	2201      	movs	r2, #1
 8019218:	2103      	movs	r1, #3
 801921a:	2003      	movs	r0, #3
 801921c:	f002 f9c0 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                    
                    /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                    st25r3916TxOff();
 8019220:	2108      	movs	r1, #8
 8019222:	2002      	movs	r0, #2
 8019224:	f002 f958 	bl	801b4d8 <st25r3916ClrRegisterBits>
                    
                    /* If external Field is no longer detected go back to POWER_OFF */
                    if( !st25r3916IsExtFieldOn() )
 8019228:	2240      	movs	r2, #64	; 0x40
 801922a:	2140      	movs	r1, #64	; 0x40
 801922c:	2031      	movs	r0, #49	; 0x31
 801922e:	f002 fa3b 	bl	801b6a8 <st25r3916CheckReg>
 8019232:	4603      	mov	r3, r0
 8019234:	f083 0301 	eor.w	r3, r3, #1
 8019238:	b2db      	uxtb	r3, r3
 801923a:	2b00      	cmp	r3, #0
 801923c:	d003      	beq.n	8019246 <rfalListenSetState+0x1be>
                    {
                        reSetState = true;
 801923e:	2301      	movs	r3, #1
 8019240:	733b      	strb	r3, [r7, #12]
                        newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 8019242:	2301      	movs	r3, #1
 8019244:	737b      	strb	r3, [r7, #13]
                    }
                }
                /*******************************************************************************/
                
                /* If we are in ACTIVE_A, reEnable Listen for A before going to IDLE, otherwise do nothing */
                if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_A )
 8019246:	4b4d      	ldr	r3, [pc, #308]	; (801937c <rfalListenSetState+0x2f4>)
 8019248:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801924c:	2b06      	cmp	r3, #6
 801924e:	d106      	bne.n	801925e <rfalListenSetState+0x1d6>
                {
                    /* Enable automatic responses for A and Reset NFCA target state */
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8019250:	2101      	movs	r1, #1
 8019252:	2008      	movs	r0, #8
 8019254:	f002 f940 	bl	801b4d8 <st25r3916ClrRegisterBits>
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 8019258:	20cd      	movs	r0, #205	; 0xcd
 801925a:	f002 f8dc 	bl	801b416 <st25r3916ExecuteCommand>
                }
                
                /* ReEnable the receiver */
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 801925e:	20db      	movs	r0, #219	; 0xdb
 8019260:	f002 f8d9 	bl	801b416 <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8019264:	20d1      	movs	r0, #209	; 0xd1
 8019266:	f002 f8d6 	bl	801b416 <st25r3916ExecuteCommand>
    			
                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 801926a:	4b44      	ldr	r3, [pc, #272]	; (801937c <rfalListenSetState+0x2f4>)
 801926c:	799b      	ldrb	r3, [r3, #6]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d076      	beq.n	8019360 <rfalListenSetState+0x2d8>
 8019272:	4b42      	ldr	r3, [pc, #264]	; (801937c <rfalListenSetState+0x2f4>)
 8019274:	799b      	ldrb	r3, [r3, #6]
 8019276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801927a:	b2db      	uxtb	r3, r3
 801927c:	4619      	mov	r1, r3
 801927e:	2001      	movs	r0, #1
 8019280:	f002 f905 	bl	801b48e <st25r3916WriteTestRegister>
                break;
 8019284:	e06c      	b.n	8019360 <rfalListenSetState+0x2d8>
                /* If we're coming from BitRate detection mode, the Bit Rate Definition reg 
                 * still has the last bit rate used.
                 * If a frame is received between setting the mode to Listen NFCA and 
                 * setting Bit Rate Definition reg, it will raise a framing error.
                 * Set the bitrate immediately, and then the normal SetMode procedure          */
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 8019286:	4b3d      	ldr	r3, [pc, #244]	; (801937c <rfalListenSetState+0x2f4>)
 8019288:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801928c:	4a3b      	ldr	r2, [pc, #236]	; (801937c <rfalListenSetState+0x2f4>)
 801928e:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8019292:	4611      	mov	r1, r2
 8019294:	4618      	mov	r0, r3
 8019296:	f001 fcce 	bl	801ac36 <st25r3916SetBitrate>
                /*******************************************************************************/
                
                /* Disable automatic responses for NFC-A */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 801929a:	2101      	movs	r1, #1
 801929c:	2008      	movs	r0, #8
 801929e:	f002 f952 	bl	801b546 <st25r3916SetRegisterBits>
                
                /* Set Mode NFC-F only */
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 80192a2:	4b36      	ldr	r3, [pc, #216]	; (801937c <rfalListenSetState+0x2f4>)
 80192a4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80192a8:	4a34      	ldr	r2, [pc, #208]	; (801937c <rfalListenSetState+0x2f4>)
 80192aa:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 80192ae:	4619      	mov	r1, r3
 80192b0:	200c      	movs	r0, #12
 80192b2:	f7fc fe71 	bl	8015f98 <rfalSetMode>
 80192b6:	4603      	mov	r3, r0
 80192b8:	81fb      	strh	r3, [r7, #14]
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 80192ba:	4b30      	ldr	r3, [pc, #192]	; (801937c <rfalListenSetState+0x2f4>)
 80192bc:	2204      	movs	r2, #4
 80192be:	701a      	strb	r2, [r3, #0]
                
                /* ReEnable the receiver */
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 80192c0:	20db      	movs	r0, #219	; 0xdb
 80192c2:	f002 f8a8 	bl	801b416 <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 80192c6:	20d1      	movs	r0, #209	; 0xd1
 80192c8:	f002 f8a5 	bl	801b416 <st25r3916ExecuteCommand>
                
                /* Clear any previous transmission errors (if Reader polled for other/unsupported technologies) */
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 80192cc:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 80192d0:	f002 fb7a 	bl	801b9c8 <st25r3916GetInterrupt>
                
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );     /* Start looking for any incoming data */
 80192d4:	2010      	movs	r0, #16
 80192d6:	f002 fbc1 	bl	801ba5c <st25r3916EnableInterrupts>
                break;
 80192da:	e042      	b.n	8019362 <rfalListenSetState+0x2da>
                
            /*******************************************************************************/
            case RFAL_LM_STATE_CARDEMU_3:
                
                /* Set Listen NFCF mode  */
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 80192dc:	4b27      	ldr	r3, [pc, #156]	; (801937c <rfalListenSetState+0x2f4>)
 80192de:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80192e2:	4a26      	ldr	r2, [pc, #152]	; (801937c <rfalListenSetState+0x2f4>)
 80192e4:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 80192e8:	4619      	mov	r1, r3
 80192ea:	200c      	movs	r0, #12
 80192ec:	f7fc fe54 	bl	8015f98 <rfalSetMode>
 80192f0:	4603      	mov	r3, r0
 80192f2:	81fb      	strh	r3, [r7, #14]
                break;
 80192f4:	e035      	b.n	8019362 <rfalListenSetState+0x2da>
                /* If we're coming from BitRate detection mode, the Bit Rate Definition reg 
                 * still has the last bit rate used.
                 * If a frame is received between setting the mode to Listen NFCA and 
                 * setting Bit Rate Definition reg, it will raise a framing error.
                 * Set the bitrate immediately, and then the normal SetMode procedure          */
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 80192f6:	4b21      	ldr	r3, [pc, #132]	; (801937c <rfalListenSetState+0x2f4>)
 80192f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80192fc:	4a1f      	ldr	r2, [pc, #124]	; (801937c <rfalListenSetState+0x2f4>)
 80192fe:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8019302:	4611      	mov	r1, r2
 8019304:	4618      	mov	r0, r3
 8019306:	f001 fc96 	bl	801ac36 <st25r3916SetBitrate>
                /*******************************************************************************/
                
                /* Disable automatic responses for NFC-F */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 801930a:	2104      	movs	r1, #4
 801930c:	2008      	movs	r0, #8
 801930e:	f002 f91a 	bl	801b546 <st25r3916SetRegisterBits>
                
                /* Set Mode NFC-A only */
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCA, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8019312:	4b1a      	ldr	r3, [pc, #104]	; (801937c <rfalListenSetState+0x2f4>)
 8019314:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019318:	4a18      	ldr	r2, [pc, #96]	; (801937c <rfalListenSetState+0x2f4>)
 801931a:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 801931e:	4619      	mov	r1, r3
 8019320:	200a      	movs	r0, #10
 8019322:	f7fc fe39 	bl	8015f98 <rfalSetMode>
 8019326:	4603      	mov	r3, r0
 8019328:	81fb      	strh	r3, [r7, #14]
                
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 801932a:	4b14      	ldr	r3, [pc, #80]	; (801937c <rfalListenSetState+0x2f4>)
 801932c:	2204      	movs	r2, #4
 801932e:	701a      	strb	r2, [r3, #0]
                break;
 8019330:	e017      	b.n	8019362 <rfalListenSetState+0x2da>
            /*******************************************************************************/
            case RFAL_LM_STATE_ACTIVE_Ax:
            case RFAL_LM_STATE_ACTIVE_A:
                
                /* Disable automatic responses for A */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8019332:	2101      	movs	r1, #1
 8019334:	2008      	movs	r0, #8
 8019336:	f002 f906 	bl	801b546 <st25r3916SetRegisterBits>
                
                /* Clear any previous transmission errors (if Reader polled for other/unsupported technologies) */
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 801933a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 801933e:	f002 fb43 	bl	801b9c8 <st25r3916GetInterrupt>
                
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );    /* Start looking for any incoming data */
 8019342:	2010      	movs	r0, #16
 8019344:	f002 fb8a 	bl	801ba5c <st25r3916EnableInterrupts>
                break;
 8019348:	e00b      	b.n	8019362 <rfalListenSetState+0x2da>
                
            case RFAL_LM_STATE_TARGET_F:
                /* Disable Automatic response SENSF_REQ */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 801934a:	2104      	movs	r1, #4
 801934c:	2008      	movs	r0, #8
 801934e:	f002 f8fa 	bl	801b546 <st25r3916SetRegisterBits>
                break;
 8019352:	e006      	b.n	8019362 <rfalListenSetState+0x2da>
            /*******************************************************************************/    
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
                /* These sleep states have to be set by the rfalListenSleepStart() method */
                return ERR_REQUEST;
 8019354:	2305      	movs	r3, #5
 8019356:	e00d      	b.n	8019374 <rfalListenSetState+0x2ec>
                /* States not handled by the LM, just keep state context */
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 8019358:	2321      	movs	r3, #33	; 0x21
 801935a:	e00b      	b.n	8019374 <rfalListenSetState+0x2ec>
                break;
 801935c:	bf00      	nop
 801935e:	e000      	b.n	8019362 <rfalListenSetState+0x2da>
                break;
 8019360:	bf00      	nop
        }
    }
    while( reSetState );
 8019362:	7b3b      	ldrb	r3, [r7, #12]
 8019364:	2b00      	cmp	r3, #0
 8019366:	f47f aea2 	bne.w	80190ae <rfalListenSetState+0x26>
    
    gRFAL.Lm.state = newState;
 801936a:	4a04      	ldr	r2, [pc, #16]	; (801937c <rfalListenSetState+0x2f4>)
 801936c:	7b7b      	ldrb	r3, [r7, #13]
 801936e:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    
    return ret;
 8019372:	89fb      	ldrh	r3, [r7, #14]
}
 8019374:	4618      	mov	r0, r3
 8019376:	3710      	adds	r7, #16
 8019378:	46bd      	mov	sp, r7
 801937a:	bd80      	pop	{r7, pc}
 801937c:	20003618 	.word	0x20003618

08019380 <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 8019380:	b5b0      	push	{r4, r5, r7, lr}
 8019382:	b086      	sub	sp, #24
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
    uint8_t                aux;
    uint8_t                reg;
    uint32_t               irqs;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 8019388:	4ba4      	ldr	r3, [pc, #656]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801938a:	781b      	ldrb	r3, [r3, #0]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d101      	bne.n	8019394 <rfalWakeUpModeStart+0x14>
    {
        return ERR_WRONG_STATE;
 8019390:	2321      	movs	r3, #33	; 0x21
 8019392:	e217      	b.n	80197c4 <rfalWakeUpModeStart+0x444>
    }
    
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d134      	bne.n	8019404 <rfalWakeUpModeStart+0x84>
    {
        gRFAL.wum.cfg.period           = RFAL_WUM_PERIOD_200MS;
 801939a:	4ba0      	ldr	r3, [pc, #640]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801939c:	2211      	movs	r2, #17
 801939e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        gRFAL.wum.cfg.irqTout          = false;
 80193a2:	4b9e      	ldr	r3, [pc, #632]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193a4:	2200      	movs	r2, #0
 80193a6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        gRFAL.wum.cfg.indAmp.enabled   = true;
 80193aa:	4b9c      	ldr	r3, [pc, #624]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193ac:	2201      	movs	r2, #1
 80193ae:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        gRFAL.wum.cfg.indPha.enabled   = false;
 80193b2:	4b9a      	ldr	r3, [pc, #616]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193b4:	2200      	movs	r2, #0
 80193b6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
        gRFAL.wum.cfg.cap.enabled      = false;
 80193ba:	4b98      	ldr	r3, [pc, #608]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193bc:	2200      	movs	r2, #0
 80193be:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 80193c2:	4b96      	ldr	r3, [pc, #600]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193c4:	2202      	movs	r2, #2
 80193c6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 80193ca:	4b94      	ldr	r3, [pc, #592]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193cc:	22ff      	movs	r2, #255	; 0xff
 80193ce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 80193d2:	4b92      	ldr	r3, [pc, #584]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193d4:	2200      	movs	r2, #0
 80193d6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        
        /*******************************************************************************/
        /* Check if AAT is enabled and if so make use of the SW Tag Detection          */
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_aat_en, ST25R3916_REG_IO_CONF2_aat_en ) )
 80193da:	2220      	movs	r2, #32
 80193dc:	2120      	movs	r1, #32
 80193de:	2001      	movs	r0, #1
 80193e0:	f002 f962 	bl	801b6a8 <st25r3916CheckReg>
 80193e4:	4603      	mov	r3, r0
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d01d      	beq.n	8019426 <rfalWakeUpModeStart+0xa6>
        {
            gRFAL.wum.cfg.swTagDetect     = true;
 80193ea:	4b8c      	ldr	r3, [pc, #560]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193ec:	2201      	movs	r2, #1
 80193ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            gRFAL.wum.cfg.indAmp.autoAvg  = true;
 80193f2:	4b8a      	ldr	r3, [pc, #552]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193f4:	2201      	movs	r2, #1
 80193f6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            gRFAL.wum.cfg.indAmp.aaWeight = RFAL_WUM_AA_WEIGHT_16;
 80193fa:	4b88      	ldr	r3, [pc, #544]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80193fc:	2202      	movs	r2, #2
 80193fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8019402:	e010      	b.n	8019426 <rfalWakeUpModeStart+0xa6>
        }
    }
    else
    {
        gRFAL.wum.cfg = *config;
 8019404:	4b85      	ldr	r3, [pc, #532]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019406:	687a      	ldr	r2, [r7, #4]
 8019408:	337a      	adds	r3, #122	; 0x7a
 801940a:	6814      	ldr	r4, [r2, #0]
 801940c:	6850      	ldr	r0, [r2, #4]
 801940e:	6891      	ldr	r1, [r2, #8]
 8019410:	68d5      	ldr	r5, [r2, #12]
 8019412:	601c      	str	r4, [r3, #0]
 8019414:	6058      	str	r0, [r3, #4]
 8019416:	6099      	str	r1, [r3, #8]
 8019418:	60dd      	str	r5, [r3, #12]
 801941a:	6914      	ldr	r4, [r2, #16]
 801941c:	6950      	ldr	r0, [r2, #20]
 801941e:	6991      	ldr	r1, [r2, #24]
 8019420:	611c      	str	r4, [r3, #16]
 8019422:	6158      	str	r0, [r3, #20]
 8019424:	6199      	str	r1, [r3, #24]
    }
    
    /* Check for valid configuration */
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8019426:	4b7d      	ldr	r3, [pc, #500]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019428:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 801942c:	f083 0301 	eor.w	r3, r3, #1
 8019430:	b2db      	uxtb	r3, r3
 8019432:	2b00      	cmp	r3, #0
 8019434:	d00f      	beq.n	8019456 <rfalWakeUpModeStart+0xd6>
 8019436:	4b79      	ldr	r3, [pc, #484]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019438:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801943c:	f083 0301 	eor.w	r3, r3, #1
 8019440:	b2db      	uxtb	r3, r3
 8019442:	2b00      	cmp	r3, #0
 8019444:	d007      	beq.n	8019456 <rfalWakeUpModeStart+0xd6>
 8019446:	4b75      	ldr	r3, [pc, #468]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019448:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 801944c:	f083 0301 	eor.w	r3, r3, #1
 8019450:	b2db      	uxtb	r3, r3
 8019452:	2b00      	cmp	r3, #0
 8019454:	d127      	bne.n	80194a6 <rfalWakeUpModeStart+0x126>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 8019456:	4b71      	ldr	r3, [pc, #452]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019458:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 801945c:	2b00      	cmp	r3, #0
 801945e:	d009      	beq.n	8019474 <rfalWakeUpModeStart+0xf4>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 8019460:	4b6e      	ldr	r3, [pc, #440]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019462:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8019466:	2b00      	cmp	r3, #0
 8019468:	d11d      	bne.n	80194a6 <rfalWakeUpModeStart+0x126>
 801946a:	4b6c      	ldr	r3, [pc, #432]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801946c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8019470:	2b00      	cmp	r3, #0
 8019472:	d118      	bne.n	80194a6 <rfalWakeUpModeStart+0x126>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                      ||
 8019474:	4b69      	ldr	r3, [pc, #420]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019476:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 801947a:	2b00      	cmp	r3, #0
 801947c:	d004      	beq.n	8019488 <rfalWakeUpModeStart+0x108>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                      ||
 801947e:	4b67      	ldr	r3, [pc, #412]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019480:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8019484:	2b00      	cmp	r3, #0
 8019486:	d10e      	bne.n	80194a6 <rfalWakeUpModeStart+0x126>
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8019488:	4b64      	ldr	r3, [pc, #400]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801948a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                      ||
 801948e:	2bff      	cmp	r3, #255	; 0xff
 8019490:	d809      	bhi.n	80194a6 <rfalWakeUpModeStart+0x126>
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8019492:	4b62      	ldr	r3, [pc, #392]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019494:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8019498:	2bff      	cmp	r3, #255	; 0xff
 801949a:	d804      	bhi.n	80194a6 <rfalWakeUpModeStart+0x126>
          (gRFAL.wum.cfg.cap.reference    > RFAL_WUM_REFERENCE_AUTO)    )                                )
 801949c:	4b5f      	ldr	r3, [pc, #380]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801949e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80194a2:	2bff      	cmp	r3, #255	; 0xff
 80194a4:	d901      	bls.n	80194aa <rfalWakeUpModeStart+0x12a>
    {
        return ERR_PARAM;
 80194a6:	2307      	movs	r3, #7
 80194a8:	e18c      	b.n	80197c4 <rfalWakeUpModeStart+0x444>
    }
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 80194aa:	2300      	movs	r3, #0
 80194ac:	613b      	str	r3, [r7, #16]
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3916TxRxOff();
 80194ae:	2148      	movs	r1, #72	; 0x48
 80194b0:	2002      	movs	r0, #2
 80194b2:	f002 f811 	bl	801b4d8 <st25r3916ClrRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask );
 80194b6:	2103      	movs	r1, #3
 80194b8:	2002      	movs	r0, #2
 80194ba:	f002 f80d 	bl	801b4d8 <st25r3916ClrRegisterBits>
    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask), (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_iso14443a) );
 80194be:	2208      	movs	r2, #8
 80194c0:	21f8      	movs	r1, #248	; 0xf8
 80194c2:	2003      	movs	r0, #3
 80194c4:	f002 f86c 	bl	801b5a0 <st25r3916ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 80194c8:	2004      	movs	r0, #4
 80194ca:	f7f2 fd8f 	bl	800bfec <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 80194ce:	4b53      	ldr	r3, [pc, #332]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80194d0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80194d4:	011b      	lsls	r3, r3, #4
 80194d6:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 80194d8:	4b50      	ldr	r3, [pc, #320]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80194da:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80194de:	2b0f      	cmp	r3, #15
 80194e0:	d802      	bhi.n	80194e8 <rfalWakeUpModeStart+0x168>
 80194e2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80194e6:	e000      	b.n	80194ea <rfalWakeUpModeStart+0x16a>
 80194e8:	2200      	movs	r2, #0
 80194ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80194ee:	4313      	orrs	r3, r2
 80194f0:	b25b      	sxtb	r3, r3
 80194f2:	75fb      	strb	r3, [r7, #23]
    
    if( gRFAL.wum.cfg.irqTout || gRFAL.wum.cfg.swTagDetect )
 80194f4:	4b49      	ldr	r3, [pc, #292]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80194f6:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d104      	bne.n	8019508 <rfalWakeUpModeStart+0x188>
 80194fe:	4b47      	ldr	r3, [pc, #284]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019500:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8019504:	2b00      	cmp	r3, #0
 8019506:	d007      	beq.n	8019518 <rfalWakeUpModeStart+0x198>
    {
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 8019508:	7dfb      	ldrb	r3, [r7, #23]
 801950a:	f043 0308 	orr.w	r3, r3, #8
 801950e:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WT;
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019516:	613b      	str	r3, [r7, #16]
    }
       
    
    /* Check if HW Wake-up is to be used or SW Tag detection */
    if( gRFAL.wum.cfg.swTagDetect )
 8019518:	4b40      	ldr	r3, [pc, #256]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801951a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801951e:	2b00      	cmp	r3, #0
 8019520:	d00c      	beq.n	801953c <rfalWakeUpModeStart+0x1bc>
    {
        gRFAL.wum.cfg.indAmp.reference = 0U;
 8019522:	4b3e      	ldr	r3, [pc, #248]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019524:	2200      	movs	r2, #0
 8019526:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
        gRFAL.wum.cfg.indPha.reference = 0U;
 801952a:	4b3c      	ldr	r3, [pc, #240]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801952c:	2200      	movs	r2, #0
 801952e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        gRFAL.wum.cfg.cap.reference    = 0U;
 8019532:	4b3a      	ldr	r3, [pc, #232]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019534:	2200      	movs	r2, #0
 8019536:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 801953a:	e127      	b.n	801978c <rfalWakeUpModeStart+0x40c>
    }
    else
    {
        /*******************************************************************************/
        /* Check if Inductive Amplitude is to be performed */
        if( gRFAL.wum.cfg.indAmp.enabled )
 801953c:	4b37      	ldr	r3, [pc, #220]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801953e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8019542:	2b00      	cmp	r3, #0
 8019544:	d058      	beq.n	80195f8 <rfalWakeUpModeStart+0x278>
        {
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 8019546:	4b35      	ldr	r3, [pc, #212]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019548:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 801954c:	011b      	lsls	r3, r3, #4
 801954e:	b2db      	uxtb	r3, r3
 8019550:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 8019552:	4b32      	ldr	r3, [pc, #200]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019554:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8019558:	2b00      	cmp	r3, #0
 801955a:	d001      	beq.n	8019560 <rfalWakeUpModeStart+0x1e0>
 801955c:	2208      	movs	r2, #8
 801955e:	e000      	b.n	8019562 <rfalWakeUpModeStart+0x1e2>
 8019560:	2200      	movs	r2, #0
 8019562:	7bfb      	ldrb	r3, [r7, #15]
 8019564:	b25b      	sxtb	r3, r3
 8019566:	4313      	orrs	r3, r2
 8019568:	b25b      	sxtb	r3, r3
 801956a:	b2db      	uxtb	r3, r3
 801956c:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 801956e:	4b2b      	ldr	r3, [pc, #172]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019570:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019574:	005b      	lsls	r3, r3, #1
 8019576:	b2db      	uxtb	r3, r3
 8019578:	b25b      	sxtb	r3, r3
 801957a:	f003 0306 	and.w	r3, r3, #6
 801957e:	b25a      	sxtb	r2, r3
 8019580:	7bfb      	ldrb	r3, [r7, #15]
 8019582:	b25b      	sxtb	r3, r3
 8019584:	4313      	orrs	r3, r2
 8019586:	b25b      	sxtb	r3, r3
 8019588:	b2db      	uxtb	r3, r3
 801958a:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 801958c:	4b23      	ldr	r3, [pc, #140]	; (801961c <rfalWakeUpModeStart+0x29c>)
 801958e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8019592:	b25a      	sxtb	r2, r3
 8019594:	7bfb      	ldrb	r3, [r7, #15]
 8019596:	b25b      	sxtb	r3, r3
 8019598:	4313      	orrs	r3, r2
 801959a:	b25b      	sxtb	r3, r3
 801959c:	b2db      	uxtb	r3, r3
 801959e:	73fb      	strb	r3, [r7, #15]
            
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 80195a0:	7bfb      	ldrb	r3, [r7, #15]
 80195a2:	4619      	mov	r1, r3
 80195a4:	2033      	movs	r0, #51	; 0x33
 80195a6:	f001 fe47 	bl	801b238 <st25r3916WriteRegister>
            
            /* Only need to set the reference if not using Auto Average */
            if( !gRFAL.wum.cfg.indAmp.autoAvg )
 80195aa:	4b1c      	ldr	r3, [pc, #112]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80195ac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80195b0:	f083 0301 	eor.w	r3, r3, #1
 80195b4:	b2db      	uxtb	r3, r3
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d016      	beq.n	80195e8 <rfalWakeUpModeStart+0x268>
            {
                if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 80195ba:	4b18      	ldr	r3, [pc, #96]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80195bc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80195c0:	2bff      	cmp	r3, #255	; 0xff
 80195c2:	d109      	bne.n	80195d8 <rfalWakeUpModeStart+0x258>
                {
                    st25r3916MeasureAmplitude( &aux );
 80195c4:	f107 030f 	add.w	r3, r7, #15
 80195c8:	4618      	mov	r0, r3
 80195ca:	f001 fada 	bl	801ab82 <st25r3916MeasureAmplitude>
                    gRFAL.wum.cfg.indAmp.reference = aux;
 80195ce:	7bfb      	ldrb	r3, [r7, #15]
 80195d0:	b29a      	uxth	r2, r3
 80195d2:	4b12      	ldr	r3, [pc, #72]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80195d4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                }
                st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indAmp.reference );
 80195d8:	4b10      	ldr	r3, [pc, #64]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80195da:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	4619      	mov	r1, r3
 80195e2:	2034      	movs	r0, #52	; 0x34
 80195e4:	f001 fe28 	bl	801b238 <st25r3916WriteRegister>
            }
            
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wam;
 80195e8:	7dfb      	ldrb	r3, [r7, #23]
 80195ea:	f043 0304 	orr.w	r3, r3, #4
 80195ee:	75fb      	strb	r3, [r7, #23]
            irqs |= ST25R3916_IRQ_MASK_WAM;
 80195f0:	693b      	ldr	r3, [r7, #16]
 80195f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80195f6:	613b      	str	r3, [r7, #16]
        }
        
        /*******************************************************************************/
        /* Check if Inductive Phase is to be performed */
        if( gRFAL.wum.cfg.indPha.enabled )
 80195f8:	4b08      	ldr	r3, [pc, #32]	; (801961c <rfalWakeUpModeStart+0x29c>)
 80195fa:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d05a      	beq.n	80196b8 <rfalWakeUpModeStart+0x338>
        {
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 8019602:	4b06      	ldr	r3, [pc, #24]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019604:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8019608:	011b      	lsls	r3, r3, #4
 801960a:	b2db      	uxtb	r3, r3
 801960c:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 801960e:	4b03      	ldr	r3, [pc, #12]	; (801961c <rfalWakeUpModeStart+0x29c>)
 8019610:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8019614:	2b00      	cmp	r3, #0
 8019616:	d003      	beq.n	8019620 <rfalWakeUpModeStart+0x2a0>
 8019618:	2208      	movs	r2, #8
 801961a:	e002      	b.n	8019622 <rfalWakeUpModeStart+0x2a2>
 801961c:	20003618 	.word	0x20003618
 8019620:	2200      	movs	r2, #0
 8019622:	7bfb      	ldrb	r3, [r7, #15]
 8019624:	b25b      	sxtb	r3, r3
 8019626:	4313      	orrs	r3, r2
 8019628:	b25b      	sxtb	r3, r3
 801962a:	b2db      	uxtb	r3, r3
 801962c:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 801962e:	4b67      	ldr	r3, [pc, #412]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 8019630:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8019634:	005b      	lsls	r3, r3, #1
 8019636:	b2db      	uxtb	r3, r3
 8019638:	b25b      	sxtb	r3, r3
 801963a:	f003 0306 	and.w	r3, r3, #6
 801963e:	b25a      	sxtb	r2, r3
 8019640:	7bfb      	ldrb	r3, [r7, #15]
 8019642:	b25b      	sxtb	r3, r3
 8019644:	4313      	orrs	r3, r2
 8019646:	b25b      	sxtb	r3, r3
 8019648:	b2db      	uxtb	r3, r3
 801964a:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 801964c:	4b5f      	ldr	r3, [pc, #380]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 801964e:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8019652:	b25a      	sxtb	r2, r3
 8019654:	7bfb      	ldrb	r3, [r7, #15]
 8019656:	b25b      	sxtb	r3, r3
 8019658:	4313      	orrs	r3, r2
 801965a:	b25b      	sxtb	r3, r3
 801965c:	b2db      	uxtb	r3, r3
 801965e:	73fb      	strb	r3, [r7, #15]
            
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 8019660:	7bfb      	ldrb	r3, [r7, #15]
 8019662:	4619      	mov	r1, r3
 8019664:	2037      	movs	r0, #55	; 0x37
 8019666:	f001 fde7 	bl	801b238 <st25r3916WriteRegister>
            
            /* Only need to set the reference if not using Auto Average */
            if( !gRFAL.wum.cfg.indPha.autoAvg )
 801966a:	4b58      	ldr	r3, [pc, #352]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 801966c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8019670:	f083 0301 	eor.w	r3, r3, #1
 8019674:	b2db      	uxtb	r3, r3
 8019676:	2b00      	cmp	r3, #0
 8019678:	d016      	beq.n	80196a8 <rfalWakeUpModeStart+0x328>
            {
                if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801967a:	4b54      	ldr	r3, [pc, #336]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 801967c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8019680:	2bff      	cmp	r3, #255	; 0xff
 8019682:	d109      	bne.n	8019698 <rfalWakeUpModeStart+0x318>
                {
                    st25r3916MeasurePhase( &aux );
 8019684:	f107 030f 	add.w	r3, r7, #15
 8019688:	4618      	mov	r0, r3
 801968a:	f001 fa89 	bl	801aba0 <st25r3916MeasurePhase>
                    gRFAL.wum.cfg.indPha.reference = aux;
 801968e:	7bfb      	ldrb	r3, [r7, #15]
 8019690:	b29a      	uxth	r2, r3
 8019692:	4b4e      	ldr	r3, [pc, #312]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 8019694:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
                
                }
                st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indPha.reference );
 8019698:	4b4c      	ldr	r3, [pc, #304]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 801969a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801969e:	b2db      	uxtb	r3, r3
 80196a0:	4619      	mov	r1, r3
 80196a2:	2038      	movs	r0, #56	; 0x38
 80196a4:	f001 fdc8 	bl	801b238 <st25r3916WriteRegister>
            }
            
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wph;
 80196a8:	7dfb      	ldrb	r3, [r7, #23]
 80196aa:	f043 0302 	orr.w	r3, r3, #2
 80196ae:	75fb      	strb	r3, [r7, #23]
            irqs |= ST25R3916_IRQ_MASK_WPH;
 80196b0:	693b      	ldr	r3, [r7, #16]
 80196b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80196b6:	613b      	str	r3, [r7, #16]
        }
        
        /*******************************************************************************/
        /* Check if Capacitive is to be performed */
        if( gRFAL.wum.cfg.cap.enabled )
 80196b8:	4b44      	ldr	r3, [pc, #272]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 80196ba:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d064      	beq.n	801978c <rfalWakeUpModeStart+0x40c>
        {
            /*******************************************************************************/
            /* Perform Capacitive sensor calibration */
            
            /* Disable Oscillator and Field */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_tx_en) );
 80196c2:	2188      	movs	r1, #136	; 0x88
 80196c4:	2002      	movs	r0, #2
 80196c6:	f001 ff07 	bl	801b4d8 <st25r3916ClrRegisterBits>
            
            /* Sensor gain should be configured on Analog Config: RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON */
            
            /* Perform calibration procedure */
            st25r3916CalibrateCapacitiveSensor( NULL );
 80196ca:	2000      	movs	r0, #0
 80196cc:	f001 fa86 	bl	801abdc <st25r3916CalibrateCapacitiveSensor>
            
            
            /*******************************************************************************/
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 80196d0:	4b3e      	ldr	r3, [pc, #248]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 80196d2:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80196d6:	011b      	lsls	r3, r3, #4
 80196d8:	b2db      	uxtb	r3, r3
 80196da:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 80196dc:	4b3b      	ldr	r3, [pc, #236]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 80196de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d001      	beq.n	80196ea <rfalWakeUpModeStart+0x36a>
 80196e6:	2208      	movs	r2, #8
 80196e8:	e000      	b.n	80196ec <rfalWakeUpModeStart+0x36c>
 80196ea:	2200      	movs	r2, #0
 80196ec:	7bfb      	ldrb	r3, [r7, #15]
 80196ee:	b25b      	sxtb	r3, r3
 80196f0:	4313      	orrs	r3, r2
 80196f2:	b25b      	sxtb	r3, r3
 80196f4:	b2db      	uxtb	r3, r3
 80196f6:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 80196f8:	4b34      	ldr	r3, [pc, #208]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 80196fa:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80196fe:	005b      	lsls	r3, r3, #1
 8019700:	b2db      	uxtb	r3, r3
 8019702:	b25b      	sxtb	r3, r3
 8019704:	f003 0306 	and.w	r3, r3, #6
 8019708:	b25a      	sxtb	r2, r3
 801970a:	7bfb      	ldrb	r3, [r7, #15]
 801970c:	b25b      	sxtb	r3, r3
 801970e:	4313      	orrs	r3, r2
 8019710:	b25b      	sxtb	r3, r3
 8019712:	b2db      	uxtb	r3, r3
 8019714:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8019716:	4b2d      	ldr	r3, [pc, #180]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 8019718:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 801971c:	b25a      	sxtb	r2, r3
 801971e:	7bfb      	ldrb	r3, [r7, #15]
 8019720:	b25b      	sxtb	r3, r3
 8019722:	4313      	orrs	r3, r2
 8019724:	b25b      	sxtb	r3, r3
 8019726:	b2db      	uxtb	r3, r3
 8019728:	73fb      	strb	r3, [r7, #15]
            
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 801972a:	7bfb      	ldrb	r3, [r7, #15]
 801972c:	4619      	mov	r1, r3
 801972e:	203b      	movs	r0, #59	; 0x3b
 8019730:	f001 fd82 	bl	801b238 <st25r3916WriteRegister>
            
            /* Only need to set the reference if not using Auto Average */
            if( !gRFAL.wum.cfg.cap.autoAvg || gRFAL.wum.cfg.swTagDetect )
 8019734:	4b25      	ldr	r3, [pc, #148]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 8019736:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 801973a:	f083 0301 	eor.w	r3, r3, #1
 801973e:	b2db      	uxtb	r3, r3
 8019740:	2b00      	cmp	r3, #0
 8019742:	d104      	bne.n	801974e <rfalWakeUpModeStart+0x3ce>
 8019744:	4b21      	ldr	r3, [pc, #132]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 8019746:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801974a:	2b00      	cmp	r3, #0
 801974c:	d016      	beq.n	801977c <rfalWakeUpModeStart+0x3fc>
            {
                if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801974e:	4b1f      	ldr	r3, [pc, #124]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 8019750:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8019754:	2bff      	cmp	r3, #255	; 0xff
 8019756:	d109      	bne.n	801976c <rfalWakeUpModeStart+0x3ec>
                {
                    st25r3916MeasureCapacitance( &aux );
 8019758:	f107 030f 	add.w	r3, r7, #15
 801975c:	4618      	mov	r0, r3
 801975e:	f001 fa2e 	bl	801abbe <st25r3916MeasureCapacitance>
                    gRFAL.wum.cfg.cap.reference = aux;
 8019762:	7bfb      	ldrb	r3, [r7, #15]
 8019764:	b29a      	uxth	r2, r3
 8019766:	4b19      	ldr	r3, [pc, #100]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 8019768:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
                }
                st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.cap.reference );
 801976c:	4b17      	ldr	r3, [pc, #92]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 801976e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8019772:	b2db      	uxtb	r3, r3
 8019774:	4619      	mov	r1, r3
 8019776:	203c      	movs	r0, #60	; 0x3c
 8019778:	f001 fd5e 	bl	801b238 <st25r3916WriteRegister>
            }
            
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wcap;
 801977c:	7dfb      	ldrb	r3, [r7, #23]
 801977e:	f043 0301 	orr.w	r3, r3, #1
 8019782:	75fb      	strb	r3, [r7, #23]
            irqs |= ST25R3916_IRQ_MASK_WCAP;
 8019784:	693b      	ldr	r3, [r7, #16]
 8019786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801978a:	613b      	str	r3, [r7, #16]
        }
    }

    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 801978c:	f04f 30ff 	mov.w	r0, #4294967295
 8019790:	f002 f970 	bl	801ba74 <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( irqs );
 8019794:	6938      	ldr	r0, [r7, #16]
 8019796:	f002 f917 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( irqs );
 801979a:	6938      	ldr	r0, [r7, #16]
 801979c:	f002 f95e 	bl	801ba5c <st25r3916EnableInterrupts>
    
    
    /* Enable Low Power Wake-Up Mode (Disable: Oscilattor, Tx, Rx and External Field Detector) */
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, reg );
 80197a0:	7dfb      	ldrb	r3, [r7, #23]
 80197a2:	4619      	mov	r1, r3
 80197a4:	2032      	movs	r0, #50	; 0x32
 80197a6:	f001 fd47 	bl	801b238 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL , 
 80197aa:	2204      	movs	r2, #4
 80197ac:	21cf      	movs	r1, #207	; 0xcf
 80197ae:	2002      	movs	r0, #2
 80197b0:	f001 fef6 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                                (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_tx_en | 
                                 ST25R3916_REG_OP_CONTROL_en_fd_mask | ST25R3916_REG_OP_CONTROL_wu                              ) , 
                                 ST25R3916_REG_OP_CONTROL_wu );
    
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 80197b4:	4b05      	ldr	r3, [pc, #20]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 80197b6:	2201      	movs	r2, #1
 80197b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    gRFAL.state     = RFAL_STATE_WUM;
 80197bc:	4b03      	ldr	r3, [pc, #12]	; (80197cc <rfalWakeUpModeStart+0x44c>)
 80197be:	2205      	movs	r2, #5
 80197c0:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 80197c2:	2300      	movs	r3, #0
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3718      	adds	r7, #24
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bdb0      	pop	{r4, r5, r7, pc}
 80197cc:	20003618 	.word	0x20003618

080197d0 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 80197d0:	b480      	push	{r7}
 80197d2:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 80197d4:	4b05      	ldr	r3, [pc, #20]	; (80197ec <rfalWakeUpModeHasWoke+0x1c>)
 80197d6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80197da:	2b01      	cmp	r3, #1
 80197dc:	bf8c      	ite	hi
 80197de:	2301      	movhi	r3, #1
 80197e0:	2300      	movls	r3, #0
 80197e2:	b2db      	uxtb	r3, r3
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bc80      	pop	{r7}
 80197ea:	4770      	bx	lr
 80197ec:	20003618 	.word	0x20003618

080197f0 <rfalWakeUpModeFilter>:


/*******************************************************************************/
static uint16_t rfalWakeUpModeFilter( uint16_t curRef, uint16_t curVal, uint8_t weight )
{
 80197f0:	b480      	push	{r7}
 80197f2:	b085      	sub	sp, #20
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	4603      	mov	r3, r0
 80197f8:	80fb      	strh	r3, [r7, #6]
 80197fa:	460b      	mov	r3, r1
 80197fc:	80bb      	strh	r3, [r7, #4]
 80197fe:	4613      	mov	r3, r2
 8019800:	70fb      	strb	r3, [r7, #3]
    uint16_t newRef;    
    
    /* Perform the averaging|filter as describded in ST25R3916 DS */
    
    /* Avoid signed arithmetics by spliting in two cases */
    if( curVal > curRef )
 8019802:	88ba      	ldrh	r2, [r7, #4]
 8019804:	88fb      	ldrh	r3, [r7, #6]
 8019806:	429a      	cmp	r2, r3
 8019808:	d91a      	bls.n	8019840 <rfalWakeUpModeFilter+0x50>
    {
        newRef = curRef + (( curVal - curRef ) / weight );
 801980a:	88ba      	ldrh	r2, [r7, #4]
 801980c:	88fb      	ldrh	r3, [r7, #6]
 801980e:	1ad2      	subs	r2, r2, r3
 8019810:	78fb      	ldrb	r3, [r7, #3]
 8019812:	fb92 f3f3 	sdiv	r3, r2, r3
 8019816:	b29a      	uxth	r2, r3
 8019818:	88fb      	ldrh	r3, [r7, #6]
 801981a:	4413      	add	r3, r2
 801981c:	81fb      	strh	r3, [r7, #14]
        
        /* In order for the reference to converge to final value   *
         * increment once the diff is smaller that the weight      */
        if( (curVal != curRef) && (curRef == newRef) )
 801981e:	88ba      	ldrh	r2, [r7, #4]
 8019820:	88fb      	ldrh	r3, [r7, #6]
 8019822:	429a      	cmp	r2, r3
 8019824:	d022      	beq.n	801986c <rfalWakeUpModeFilter+0x7c>
 8019826:	88fa      	ldrh	r2, [r7, #6]
 8019828:	89fb      	ldrh	r3, [r7, #14]
 801982a:	429a      	cmp	r2, r3
 801982c:	d11e      	bne.n	801986c <rfalWakeUpModeFilter+0x7c>
        {
            newRef &= 0xFF00U;
 801982e:	89fb      	ldrh	r3, [r7, #14]
 8019830:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8019834:	81fb      	strh	r3, [r7, #14]
            newRef += 0x0100U;
 8019836:	89fb      	ldrh	r3, [r7, #14]
 8019838:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801983c:	81fb      	strh	r3, [r7, #14]
 801983e:	e015      	b.n	801986c <rfalWakeUpModeFilter+0x7c>
        }
    }
    else
    {
        newRef = curRef - (( curRef - curVal ) / weight );
 8019840:	88fa      	ldrh	r2, [r7, #6]
 8019842:	88bb      	ldrh	r3, [r7, #4]
 8019844:	1ad2      	subs	r2, r2, r3
 8019846:	78fb      	ldrb	r3, [r7, #3]
 8019848:	fb92 f3f3 	sdiv	r3, r2, r3
 801984c:	b29b      	uxth	r3, r3
 801984e:	88fa      	ldrh	r2, [r7, #6]
 8019850:	1ad3      	subs	r3, r2, r3
 8019852:	81fb      	strh	r3, [r7, #14]
        
        /* In order for the reference to converge to final value   *
         * decrement once the diff is smaller that the weight      */
        if( (curVal != curRef) && (curRef == newRef) )
 8019854:	88ba      	ldrh	r2, [r7, #4]
 8019856:	88fb      	ldrh	r3, [r7, #6]
 8019858:	429a      	cmp	r2, r3
 801985a:	d007      	beq.n	801986c <rfalWakeUpModeFilter+0x7c>
 801985c:	88fa      	ldrh	r2, [r7, #6]
 801985e:	89fb      	ldrh	r3, [r7, #14]
 8019860:	429a      	cmp	r2, r3
 8019862:	d103      	bne.n	801986c <rfalWakeUpModeFilter+0x7c>
        {
            newRef &= 0xFF00U;
 8019864:	89fb      	ldrh	r3, [r7, #14]
 8019866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801986a:	81fb      	strh	r3, [r7, #14]
        }
    }
    
    return newRef;
 801986c:	89fb      	ldrh	r3, [r7, #14]
}
 801986e:	4618      	mov	r0, r3
 8019870:	3714      	adds	r7, #20
 8019872:	46bd      	mov	sp, r7
 8019874:	bc80      	pop	{r7}
 8019876:	4770      	bx	lr

08019878 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b084      	sub	sp, #16
 801987c:	af00      	add	r7, sp, #0
    uint32_t irqs;
    uint8_t  reg;
    uint16_t value;
    uint16_t delta;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 801987e:	4b7c      	ldr	r3, [pc, #496]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019880:	781b      	ldrb	r3, [r3, #0]
 8019882:	2b05      	cmp	r3, #5
 8019884:	f040 80ea 	bne.w	8019a5c <rfalRunWakeUpModeWorker+0x1e4>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 8019888:	4b79      	ldr	r3, [pc, #484]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 801988a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801988e:	3b01      	subs	r3, #1
 8019890:	2b01      	cmp	r3, #1
 8019892:	f200 80e5 	bhi.w	8019a60 <rfalRunWakeUpModeWorker+0x1e8>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP ) );
 8019896:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 801989a:	f002 f895 	bl	801b9c8 <st25r3916GetInterrupt>
 801989e:	60f8      	str	r0, [r7, #12]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	f000 80de 	beq.w	8019a64 <rfalRunWakeUpModeWorker+0x1ec>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3916_IRQ_MASK_WAM) != 0U)
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d008      	beq.n	80198c4 <rfalRunWakeUpModeWorker+0x4c>
            {
                st25r3916ReadRegister( ST25R3916_REG_AMPLITUDE_MEASURE_RESULT, &reg );
 80198b2:	1dfb      	adds	r3, r7, #7
 80198b4:	4619      	mov	r1, r3
 80198b6:	2036      	movs	r0, #54	; 0x36
 80198b8:	f001 fc80 	bl	801b1bc <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80198bc:	4b6c      	ldr	r3, [pc, #432]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80198be:	2202      	movs	r2, #2
 80198c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WPH) != 0U)
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d008      	beq.n	80198e0 <rfalRunWakeUpModeWorker+0x68>
            {
                st25r3916ReadRegister( ST25R3916_REG_PHASE_MEASURE_RESULT, &reg );
 80198ce:	1dfb      	adds	r3, r7, #7
 80198d0:	4619      	mov	r1, r3
 80198d2:	203a      	movs	r0, #58	; 0x3a
 80198d4:	f001 fc72 	bl	801b1bc <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80198d8:	4b65      	ldr	r3, [pc, #404]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80198da:	2202      	movs	r2, #2
 80198dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WCAP) != 0U)
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d008      	beq.n	80198fc <rfalRunWakeUpModeWorker+0x84>
            {
                st25r3916ReadRegister( ST25R3916_REG_CAPACITANCE_MEASURE_RESULT, &reg );
 80198ea:	1dfb      	adds	r3, r7, #7
 80198ec:	4619      	mov	r1, r3
 80198ee:	203e      	movs	r0, #62	; 0x3e
 80198f0:	f001 fc64 	bl	801b1bc <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;                
 80198f4:	4b5e      	ldr	r3, [pc, #376]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80198f6:	2202      	movs	r2, #2
 80198f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WT) != 0U)
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019902:	2b00      	cmp	r3, #0
 8019904:	f000 80b0 	beq.w	8019a68 <rfalRunWakeUpModeWorker+0x1f0>
            {
                /*******************************************************************************/
                if( gRFAL.wum.cfg.swTagDetect )
 8019908:	4b59      	ldr	r3, [pc, #356]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 801990a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801990e:	2b00      	cmp	r3, #0
 8019910:	f000 80aa 	beq.w	8019a68 <rfalRunWakeUpModeWorker+0x1f0>
                {
                    /* Enable Ready mode and wait the settle time */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), ST25R3916_REG_OP_CONTROL_en );
 8019914:	2280      	movs	r2, #128	; 0x80
 8019916:	2184      	movs	r1, #132	; 0x84
 8019918:	2002      	movs	r0, #2
 801991a:	f001 fe41 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                    platformDelay( RFAL_ST25R3916_AAT_SETTLE );
 801991e:	2005      	movs	r0, #5
 8019920:	f7e9 fb2e 	bl	8002f80 <HAL_Delay>
                    
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indAmp.enabled )
 8019924:	4b52      	ldr	r3, [pc, #328]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019926:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801992a:	2b00      	cmp	r3, #0
 801992c:	d045      	beq.n	80199ba <rfalRunWakeUpModeWorker+0x142>
                    {
                        /* Perform amplitude measurement */
                        st25r3916MeasureAmplitude( &reg );
 801992e:	1dfb      	adds	r3, r7, #7
 8019930:	4618      	mov	r0, r3
 8019932:	f001 f926 	bl	801ab82 <st25r3916MeasureAmplitude>
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
 8019936:	79fb      	ldrb	r3, [r7, #7]
 8019938:	b29b      	uxth	r3, r3
 801993a:	021b      	lsls	r3, r3, #8
 801993c:	817b      	strh	r3, [r7, #10]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 801993e:	4b4c      	ldr	r3, [pc, #304]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019940:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8019944:	b29b      	uxth	r3, r3
 8019946:	021b      	lsls	r3, r3, #8
 8019948:	813b      	strh	r3, [r7, #8]
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indAmp.reference == 0U )
 801994a:	4b49      	ldr	r3, [pc, #292]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 801994c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8019950:	2b00      	cmp	r3, #0
 8019952:	d103      	bne.n	801995c <rfalRunWakeUpModeWorker+0xe4>
                        {
                            gRFAL.wum.cfg.indAmp.reference = value;
 8019954:	4a46      	ldr	r2, [pc, #280]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019956:	897b      	ldrh	r3, [r7, #10]
 8019958:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 801995c:	897a      	ldrh	r2, [r7, #10]
 801995e:	4b44      	ldr	r3, [pc, #272]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019960:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8019964:	4619      	mov	r1, r3
 8019966:	893b      	ldrh	r3, [r7, #8]
 8019968:	440b      	add	r3, r1
 801996a:	429a      	cmp	r2, r3
 801996c:	da08      	bge.n	8019980 <rfalRunWakeUpModeWorker+0x108>
                            ( value <= (gRFAL.wum.cfg.indAmp.reference - delta) )   )
 801996e:	897a      	ldrh	r2, [r7, #10]
 8019970:	4b3f      	ldr	r3, [pc, #252]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019972:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8019976:	4619      	mov	r1, r3
 8019978:	893b      	ldrh	r3, [r7, #8]
 801997a:	1acb      	subs	r3, r1, r3
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 801997c:	429a      	cmp	r2, r3
 801997e:	dc04      	bgt.n	801998a <rfalRunWakeUpModeWorker+0x112>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8019980:	4b3b      	ldr	r3, [pc, #236]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019982:	2202      	movs	r2, #2
 8019984:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                            break;
 8019988:	e06f      	b.n	8019a6a <rfalRunWakeUpModeWorker+0x1f2>
                        }
                        
                        /* Update moving reference if enabled */
                        if( gRFAL.wum.cfg.indAmp.autoAvg )
 801998a:	4b39      	ldr	r3, [pc, #228]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 801998c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8019990:	2b00      	cmp	r3, #0
 8019992:	d012      	beq.n	80199ba <rfalRunWakeUpModeWorker+0x142>
                        {
                            gRFAL.wum.cfg.indAmp.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indAmp.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indAmp.aaWeight) );
 8019994:	4b36      	ldr	r3, [pc, #216]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019996:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801999a:	4a35      	ldr	r2, [pc, #212]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 801999c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80199a0:	4611      	mov	r1, r2
 80199a2:	2204      	movs	r2, #4
 80199a4:	408a      	lsls	r2, r1
 80199a6:	b2d2      	uxtb	r2, r2
 80199a8:	8979      	ldrh	r1, [r7, #10]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f7ff ff20 	bl	80197f0 <rfalWakeUpModeFilter>
 80199b0:	4603      	mov	r3, r0
 80199b2:	461a      	mov	r2, r3
 80199b4:	4b2e      	ldr	r3, [pc, #184]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80199b6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                        }
                    }
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indPha.enabled )
 80199ba:	4b2d      	ldr	r3, [pc, #180]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80199bc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d045      	beq.n	8019a50 <rfalRunWakeUpModeWorker+0x1d8>
                    {
                        /* Perform Phase measurement */
                        st25r3916MeasurePhase( &reg );
 80199c4:	1dfb      	adds	r3, r7, #7
 80199c6:	4618      	mov	r0, r3
 80199c8:	f001 f8ea 	bl	801aba0 <st25r3916MeasurePhase>
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
 80199cc:	79fb      	ldrb	r3, [r7, #7]
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	021b      	lsls	r3, r3, #8
 80199d2:	817b      	strh	r3, [r7, #10]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 80199d4:	4b26      	ldr	r3, [pc, #152]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80199d6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80199da:	b29b      	uxth	r3, r3
 80199dc:	021b      	lsls	r3, r3, #8
 80199de:	813b      	strh	r3, [r7, #8]
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indPha.reference == 0U )
 80199e0:	4b23      	ldr	r3, [pc, #140]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80199e2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d103      	bne.n	80199f2 <rfalRunWakeUpModeWorker+0x17a>
                        {
                            gRFAL.wum.cfg.indPha.reference = value;
 80199ea:	4a21      	ldr	r2, [pc, #132]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80199ec:	897b      	ldrh	r3, [r7, #10]
 80199ee:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 80199f2:	897a      	ldrh	r2, [r7, #10]
 80199f4:	4b1e      	ldr	r3, [pc, #120]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 80199f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80199fa:	4619      	mov	r1, r3
 80199fc:	893b      	ldrh	r3, [r7, #8]
 80199fe:	440b      	add	r3, r1
 8019a00:	429a      	cmp	r2, r3
 8019a02:	da08      	bge.n	8019a16 <rfalRunWakeUpModeWorker+0x19e>
                            ( value <= (gRFAL.wum.cfg.indPha.reference - delta) )   )
 8019a04:	897a      	ldrh	r2, [r7, #10]
 8019a06:	4b1a      	ldr	r3, [pc, #104]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019a08:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8019a0c:	4619      	mov	r1, r3
 8019a0e:	893b      	ldrh	r3, [r7, #8]
 8019a10:	1acb      	subs	r3, r1, r3
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 8019a12:	429a      	cmp	r2, r3
 8019a14:	dc04      	bgt.n	8019a20 <rfalRunWakeUpModeWorker+0x1a8>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8019a16:	4b16      	ldr	r3, [pc, #88]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019a18:	2202      	movs	r2, #2
 8019a1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                            break;
 8019a1e:	e024      	b.n	8019a6a <rfalRunWakeUpModeWorker+0x1f2>
                        }
                        
                        /* Update moving reference if enabled */
                        if( gRFAL.wum.cfg.indPha.autoAvg )
 8019a20:	4b13      	ldr	r3, [pc, #76]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019a22:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d012      	beq.n	8019a50 <rfalRunWakeUpModeWorker+0x1d8>
                        {
                            gRFAL.wum.cfg.indPha.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indPha.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indPha.aaWeight) );
 8019a2a:	4b11      	ldr	r3, [pc, #68]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019a2c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8019a30:	4a0f      	ldr	r2, [pc, #60]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019a32:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8019a36:	4611      	mov	r1, r2
 8019a38:	2204      	movs	r2, #4
 8019a3a:	408a      	lsls	r2, r1
 8019a3c:	b2d2      	uxtb	r2, r2
 8019a3e:	8979      	ldrh	r1, [r7, #10]
 8019a40:	4618      	mov	r0, r3
 8019a42:	f7ff fed5 	bl	80197f0 <rfalWakeUpModeFilter>
 8019a46:	4603      	mov	r3, r0
 8019a48:	461a      	mov	r2, r3
 8019a4a:	4b09      	ldr	r3, [pc, #36]	; (8019a70 <rfalRunWakeUpModeWorker+0x1f8>)
 8019a4c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
                        }
                    }
                    
                    /* Re-Enable low power Wake-Up mode for wto to trigger another measurement(s) */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_wu) );
 8019a50:	2204      	movs	r2, #4
 8019a52:	2184      	movs	r1, #132	; 0x84
 8019a54:	2002      	movs	r0, #2
 8019a56:	f001 fda3 	bl	801b5a0 <st25r3916ChangeRegisterBits>
                }
            }
            break;
 8019a5a:	e005      	b.n	8019a68 <rfalRunWakeUpModeWorker+0x1f0>
        return;
 8019a5c:	bf00      	nop
 8019a5e:	e004      	b.n	8019a6a <rfalRunWakeUpModeWorker+0x1f2>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8019a60:	bf00      	nop
 8019a62:	e002      	b.n	8019a6a <rfalRunWakeUpModeWorker+0x1f2>
               break;  /* No interrupt to process */
 8019a64:	bf00      	nop
 8019a66:	e000      	b.n	8019a6a <rfalRunWakeUpModeWorker+0x1f2>
            break;
 8019a68:	bf00      	nop
    }
}
 8019a6a:	3710      	adds	r7, #16
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bd80      	pop	{r7, pc}
 8019a70:	20003618 	.word	0x20003618

08019a74 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	af00      	add	r7, sp, #0
    /* Check if RFAL is in Wake-up mode */
    if( gRFAL.state != RFAL_STATE_WUM )
 8019a78:	4b0f      	ldr	r3, [pc, #60]	; (8019ab8 <rfalWakeUpModeStop+0x44>)
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	2b05      	cmp	r3, #5
 8019a7e:	d001      	beq.n	8019a84 <rfalWakeUpModeStop+0x10>
    {
        return ERR_WRONG_STATE;
 8019a80:	2321      	movs	r3, #33	; 0x21
 8019a82:	e016      	b.n	8019ab2 <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8019a84:	4b0c      	ldr	r3, [pc, #48]	; (8019ab8 <rfalWakeUpModeStop+0x44>)
 8019a86:	2200      	movs	r2, #0
 8019a88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    
    /* Disable Wake-Up Mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8019a8c:	2104      	movs	r1, #4
 8019a8e:	2002      	movs	r0, #2
 8019a90:	f001 fd22 	bl	801b4d8 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP) );
 8019a94:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 8019a98:	f001 ffec 	bl	801ba74 <st25r3916DisableInterrupts>
    
    /* Re-Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8019a9c:	2203      	movs	r2, #3
 8019a9e:	2103      	movs	r1, #3
 8019aa0:	2002      	movs	r0, #2
 8019aa2:	f001 fd7d 	bl	801b5a0 <st25r3916ChangeRegisterBits>
    
    /* Re-Enable the Oscillator */
    st25r3916OscOn();
 8019aa6:	f000 ffb5 	bl	801aa14 <st25r3916OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 8019aaa:	2005      	movs	r0, #5
 8019aac:	f7f2 fa9e 	bl	800bfec <rfalSetAnalogConfig>
      
    return ERR_NONE;
 8019ab0:	2300      	movs	r3, #0
}
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	bd80      	pop	{r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	20003618 	.word	0x20003618

08019abc <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b082      	sub	sp, #8
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	80fb      	strh	r3, [r7, #6]
 8019ac6:	460b      	mov	r3, r1
 8019ac8:	717b      	strb	r3, [r7, #5]
 8019aca:	4613      	mov	r3, r2
 8019acc:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 8019ace:	88fb      	ldrh	r3, [r7, #6]
 8019ad0:	b2db      	uxtb	r3, r3
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f001 fe08 	bl	801b6e8 <st25r3916IsRegValid>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	f083 0301 	eor.w	r3, r3, #1
 8019ade:	b2db      	uxtb	r3, r3
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d001      	beq.n	8019ae8 <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 8019ae4:	2307      	movs	r3, #7
 8019ae6:	e007      	b.n	8019af8 <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 8019ae8:	88fb      	ldrh	r3, [r7, #6]
 8019aea:	b2db      	uxtb	r3, r3
 8019aec:	793a      	ldrb	r2, [r7, #4]
 8019aee:	7979      	ldrb	r1, [r7, #5]
 8019af0:	4618      	mov	r0, r3
 8019af2:	f001 fd55 	bl	801b5a0 <st25r3916ChangeRegisterBits>
 8019af6:	4603      	mov	r3, r0
}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3708      	adds	r7, #8
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}

08019b00 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b082      	sub	sp, #8
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	4603      	mov	r3, r0
 8019b08:	80fb      	strh	r3, [r7, #6]
 8019b0a:	460b      	mov	r3, r1
 8019b0c:	717b      	strb	r3, [r7, #5]
 8019b0e:	4613      	mov	r3, r2
 8019b10:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 8019b12:	88fb      	ldrh	r3, [r7, #6]
 8019b14:	b2db      	uxtb	r3, r3
 8019b16:	793a      	ldrb	r2, [r7, #4]
 8019b18:	7979      	ldrb	r1, [r7, #5]
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f001 fd8c 	bl	801b638 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 8019b20:	2300      	movs	r3, #0
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	3708      	adds	r7, #8
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}

08019b2a <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8019b2a:	b580      	push	{r7, lr}
 8019b2c:	b086      	sub	sp, #24
 8019b2e:	af00      	add	r7, sp, #0
 8019b30:	4603      	mov	r3, r0
 8019b32:	60b9      	str	r1, [r7, #8]
 8019b34:	607a      	str	r2, [r7, #4]
 8019b36:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 8019b38:	2300      	movs	r3, #0
 8019b3a:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	75fb      	strb	r3, [r7, #23]
 8019b40:	e072      	b.n	8019c28 <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 8019b42:	2001      	movs	r0, #1
 8019b44:	f7e9 fa1c 	bl	8002f80 <HAL_Delay>
        
        if( i==0U )
 8019b48:	7dfb      	ldrb	r3, [r7, #23]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d107      	bne.n	8019b5e <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 8019b4e:	f107 0312 	add.w	r3, r7, #18
 8019b52:	4618      	mov	r0, r3
 8019b54:	f000 f8c6 	bl	8019ce4 <rfalSt25tbPollerPcall>
 8019b58:	4603      	mov	r3, r0
 8019b5a:	82bb      	strh	r3, [r7, #20]
 8019b5c:	e008      	b.n	8019b70 <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 8019b5e:	f107 0212 	add.w	r2, r7, #18
 8019b62:	7dfb      	ldrb	r3, [r7, #23]
 8019b64:	4611      	mov	r1, r2
 8019b66:	4618      	mov	r0, r3
 8019b68:	f000 f8e2 	bl	8019d30 <rfalSt25tbPollerSlotMarker>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 8019b70:	8abb      	ldrh	r3, [r7, #20]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d148      	bne.n	8019c08 <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	461a      	mov	r2, r3
 8019b7c:	4613      	mov	r3, r2
 8019b7e:	009b      	lsls	r3, r3, #2
 8019b80:	4413      	add	r3, r2
 8019b82:	005b      	lsls	r3, r3, #1
 8019b84:	461a      	mov	r2, r3
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	4413      	add	r3, r2
 8019b8a:	7cba      	ldrb	r2, [r7, #18]
 8019b8c:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	781b      	ldrb	r3, [r3, #0]
 8019b92:	461a      	mov	r2, r3
 8019b94:	4613      	mov	r3, r2
 8019b96:	009b      	lsls	r3, r3, #2
 8019b98:	4413      	add	r3, r2
 8019b9a:	005b      	lsls	r3, r3, #1
 8019b9c:	461a      	mov	r2, r3
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	4413      	add	r3, r2
 8019ba2:	2200      	movs	r2, #0
 8019ba4:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 8019ba6:	7cbb      	ldrb	r3, [r7, #18]
 8019ba8:	4618      	mov	r0, r3
 8019baa:	f000 f8f4 	bl	8019d96 <rfalSt25tbPollerSelect>
 8019bae:	4603      	mov	r3, r0
 8019bb0:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	781b      	ldrb	r3, [r3, #0]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d00b      	beq.n	8019bd2 <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	781b      	ldrb	r3, [r3, #0]
 8019bbe:	461a      	mov	r2, r3
 8019bc0:	4613      	mov	r3, r2
 8019bc2:	009b      	lsls	r3, r3, #2
 8019bc4:	4413      	add	r3, r2
 8019bc6:	005b      	lsls	r3, r3, #1
 8019bc8:	3b0a      	subs	r3, #10
 8019bca:	68ba      	ldr	r2, [r7, #8]
 8019bcc:	4413      	add	r3, r2
 8019bce:	2201      	movs	r2, #1
 8019bd0:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 8019bd2:	8abb      	ldrh	r3, [r7, #20]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d10d      	bne.n	8019bf4 <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	781b      	ldrb	r3, [r3, #0]
 8019bdc:	461a      	mov	r2, r3
 8019bde:	4613      	mov	r3, r2
 8019be0:	009b      	lsls	r3, r3, #2
 8019be2:	4413      	add	r3, r2
 8019be4:	005b      	lsls	r3, r3, #1
 8019be6:	461a      	mov	r2, r3
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	4413      	add	r3, r2
 8019bec:	3301      	adds	r3, #1
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f000 f8fd 	bl	8019dee <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 8019bf4:	8abb      	ldrh	r3, [r7, #20]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d10e      	bne.n	8019c18 <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	3301      	adds	r3, #1
 8019c00:	b2da      	uxtb	r2, r3
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	701a      	strb	r2, [r3, #0]
 8019c06:	e007      	b.n	8019c18 <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8019c08:	8abb      	ldrh	r3, [r7, #20]
 8019c0a:	2b15      	cmp	r3, #21
 8019c0c:	d002      	beq.n	8019c14 <rfalSt25tbPollerDoCollisionResolution+0xea>
 8019c0e:	8abb      	ldrh	r3, [r7, #20]
 8019c10:	2b09      	cmp	r3, #9
 8019c12:	d101      	bne.n	8019c18 <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 8019c14:	2301      	movs	r3, #1
 8019c16:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	7bfa      	ldrb	r2, [r7, #15]
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	d906      	bls.n	8019c30 <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8019c22:	7dfb      	ldrb	r3, [r7, #23]
 8019c24:	3301      	adds	r3, #1
 8019c26:	75fb      	strb	r3, [r7, #23]
 8019c28:	7dfb      	ldrb	r3, [r7, #23]
 8019c2a:	2b0f      	cmp	r3, #15
 8019c2c:	d989      	bls.n	8019b42 <rfalSt25tbPollerDoCollisionResolution+0x18>
 8019c2e:	e000      	b.n	8019c32 <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 8019c30:	bf00      	nop
        }
    }
    return col;
 8019c32:	7cfb      	ldrb	r3, [r7, #19]
}
 8019c34:	4618      	mov	r0, r3
 8019c36:	3718      	adds	r7, #24
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	bd80      	pop	{r7, pc}

08019c3c <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 8019c40:	f7fa fc82 	bl	8014548 <rfalNfcbPollerInitialize>
 8019c44:	4603      	mov	r3, r0
}
 8019c46:	4618      	mov	r0, r3
 8019c48:	bd80      	pop	{r7, pc}

08019c4a <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 8019c4a:	b580      	push	{r7, lr}
 8019c4c:	b084      	sub	sp, #16
 8019c4e:	af00      	add	r7, sp, #0
 8019c50:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 8019c52:	2300      	movs	r3, #0
 8019c54:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 8019c56:	f107 030d 	add.w	r3, r7, #13
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f000 f815 	bl	8019c8a <rfalSt25tbPollerInitiate>
 8019c60:	4603      	mov	r3, r0
 8019c62:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8019c64:	89fb      	ldrh	r3, [r7, #14]
 8019c66:	2b15      	cmp	r3, #21
 8019c68:	d002      	beq.n	8019c70 <rfalSt25tbPollerCheckPresence+0x26>
 8019c6a:	89fb      	ldrh	r3, [r7, #14]
 8019c6c:	2b09      	cmp	r3, #9
 8019c6e:	d101      	bne.n	8019c74 <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 8019c70:	2300      	movs	r3, #0
 8019c72:	e006      	b.n	8019c82 <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d002      	beq.n	8019c80 <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 8019c7a:	7b7a      	ldrb	r2, [r7, #13]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8019c80:	89fb      	ldrh	r3, [r7, #14]
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	3710      	adds	r7, #16
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}

08019c8a <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 8019c8a:	b580      	push	{r7, lr}
 8019c8c:	b08a      	sub	sp, #40	; 0x28
 8019c8e:	af04      	add	r7, sp, #16
 8019c90:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 8019c92:	2306      	movs	r3, #6
 8019c94:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 8019c96:	2300      	movs	r3, #0
 8019c98:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8019c9a:	f107 020c 	add.w	r2, r7, #12
 8019c9e:	f107 0010 	add.w	r0, r7, #16
 8019ca2:	f241 036d 	movw	r3, #4205	; 0x106d
 8019ca6:	9302      	str	r3, [sp, #8]
 8019ca8:	2300      	movs	r3, #0
 8019caa:	9301      	str	r3, [sp, #4]
 8019cac:	f107 0314 	add.w	r3, r7, #20
 8019cb0:	9300      	str	r3, [sp, #0]
 8019cb2:	2303      	movs	r3, #3
 8019cb4:	2102      	movs	r1, #2
 8019cb6:	f7fd f887 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8019cbe:	8afb      	ldrh	r3, [r7, #22]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d104      	bne.n	8019cce <rfalSt25tbPollerInitiate+0x44>
 8019cc4:	8abb      	ldrh	r3, [r7, #20]
 8019cc6:	2b01      	cmp	r3, #1
 8019cc8:	d001      	beq.n	8019cce <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 8019cca:	230b      	movs	r3, #11
 8019ccc:	e006      	b.n	8019cdc <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d002      	beq.n	8019cda <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 8019cd4:	7b3a      	ldrb	r2, [r7, #12]
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8019cda:	8afb      	ldrh	r3, [r7, #22]
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3718      	adds	r7, #24
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}

08019ce4 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b088      	sub	sp, #32
 8019ce8:	af04      	add	r7, sp, #16
 8019cea:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 8019cec:	2306      	movs	r3, #6
 8019cee:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 8019cf0:	2304      	movs	r3, #4
 8019cf2:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8019cf4:	f107 0008 	add.w	r0, r7, #8
 8019cf8:	f241 036d 	movw	r3, #4205	; 0x106d
 8019cfc:	9302      	str	r3, [sp, #8]
 8019cfe:	2300      	movs	r3, #0
 8019d00:	9301      	str	r3, [sp, #4]
 8019d02:	f107 030c 	add.w	r3, r7, #12
 8019d06:	9300      	str	r3, [sp, #0]
 8019d08:	2301      	movs	r3, #1
 8019d0a:	687a      	ldr	r2, [r7, #4]
 8019d0c:	2102      	movs	r1, #2
 8019d0e:	f7fd f85b 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8019d12:	4603      	mov	r3, r0
 8019d14:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8019d16:	89fb      	ldrh	r3, [r7, #14]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d104      	bne.n	8019d26 <rfalSt25tbPollerPcall+0x42>
 8019d1c:	89bb      	ldrh	r3, [r7, #12]
 8019d1e:	2b01      	cmp	r3, #1
 8019d20:	d001      	beq.n	8019d26 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 8019d22:	230b      	movs	r3, #11
 8019d24:	e000      	b.n	8019d28 <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 8019d26:	89fb      	ldrh	r3, [r7, #14]
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	3710      	adds	r7, #16
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}

08019d30 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b088      	sub	sp, #32
 8019d34:	af04      	add	r7, sp, #16
 8019d36:	4603      	mov	r3, r0
 8019d38:	6039      	str	r1, [r7, #0]
 8019d3a:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 8019d3c:	79fb      	ldrb	r3, [r7, #7]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d002      	beq.n	8019d48 <rfalSt25tbPollerSlotMarker+0x18>
 8019d42:	79fb      	ldrb	r3, [r7, #7]
 8019d44:	2b0f      	cmp	r3, #15
 8019d46:	d901      	bls.n	8019d4c <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 8019d48:	2307      	movs	r3, #7
 8019d4a:	e020      	b.n	8019d8e <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 8019d4c:	79fb      	ldrb	r3, [r7, #7]
 8019d4e:	011b      	lsls	r3, r3, #4
 8019d50:	b2db      	uxtb	r3, r3
 8019d52:	f043 0306 	orr.w	r3, r3, #6
 8019d56:	b2db      	uxtb	r3, r3
 8019d58:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8019d5a:	f107 000b 	add.w	r0, r7, #11
 8019d5e:	f241 036d 	movw	r3, #4205	; 0x106d
 8019d62:	9302      	str	r3, [sp, #8]
 8019d64:	2300      	movs	r3, #0
 8019d66:	9301      	str	r3, [sp, #4]
 8019d68:	f107 030c 	add.w	r3, r7, #12
 8019d6c:	9300      	str	r3, [sp, #0]
 8019d6e:	2301      	movs	r3, #1
 8019d70:	683a      	ldr	r2, [r7, #0]
 8019d72:	2101      	movs	r1, #1
 8019d74:	f7fd f828 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8019d78:	4603      	mov	r3, r0
 8019d7a:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8019d7c:	89fb      	ldrh	r3, [r7, #14]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d104      	bne.n	8019d8c <rfalSt25tbPollerSlotMarker+0x5c>
 8019d82:	89bb      	ldrh	r3, [r7, #12]
 8019d84:	2b01      	cmp	r3, #1
 8019d86:	d001      	beq.n	8019d8c <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 8019d88:	230b      	movs	r3, #11
 8019d8a:	e000      	b.n	8019d8e <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 8019d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8019d8e:	4618      	mov	r0, r3
 8019d90:	3710      	adds	r7, #16
 8019d92:	46bd      	mov	sp, r7
 8019d94:	bd80      	pop	{r7, pc}

08019d96 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 8019d96:	b580      	push	{r7, lr}
 8019d98:	b08a      	sub	sp, #40	; 0x28
 8019d9a:	af04      	add	r7, sp, #16
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 8019da0:	230e      	movs	r3, #14
 8019da2:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 8019da4:	79fb      	ldrb	r3, [r7, #7]
 8019da6:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8019da8:	f107 020f 	add.w	r2, r7, #15
 8019dac:	f107 0010 	add.w	r0, r7, #16
 8019db0:	f241 036d 	movw	r3, #4205	; 0x106d
 8019db4:	9302      	str	r3, [sp, #8]
 8019db6:	2300      	movs	r3, #0
 8019db8:	9301      	str	r3, [sp, #4]
 8019dba:	f107 0314 	add.w	r3, r7, #20
 8019dbe:	9300      	str	r3, [sp, #0]
 8019dc0:	2301      	movs	r3, #1
 8019dc2:	2102      	movs	r1, #2
 8019dc4:	f7fd f800 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8019dc8:	4603      	mov	r3, r0
 8019dca:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 8019dcc:	8afb      	ldrh	r3, [r7, #22]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d108      	bne.n	8019de4 <rfalSt25tbPollerSelect+0x4e>
 8019dd2:	8abb      	ldrh	r3, [r7, #20]
 8019dd4:	2b01      	cmp	r3, #1
 8019dd6:	d103      	bne.n	8019de0 <rfalSt25tbPollerSelect+0x4a>
 8019dd8:	7bfb      	ldrb	r3, [r7, #15]
 8019dda:	79fa      	ldrb	r2, [r7, #7]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d001      	beq.n	8019de4 <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 8019de0:	230b      	movs	r3, #11
 8019de2:	e000      	b.n	8019de6 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 8019de4:	8afb      	ldrh	r3, [r7, #22]
}
 8019de6:	4618      	mov	r0, r3
 8019de8:	3718      	adds	r7, #24
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}

08019dee <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 8019dee:	b580      	push	{r7, lr}
 8019df0:	b088      	sub	sp, #32
 8019df2:	af04      	add	r7, sp, #16
 8019df4:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 8019df6:	230b      	movs	r3, #11
 8019df8:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8019dfa:	f107 000b 	add.w	r0, r7, #11
 8019dfe:	f241 036d 	movw	r3, #4205	; 0x106d
 8019e02:	9302      	str	r3, [sp, #8]
 8019e04:	2300      	movs	r3, #0
 8019e06:	9301      	str	r3, [sp, #4]
 8019e08:	f107 030c 	add.w	r3, r7, #12
 8019e0c:	9300      	str	r3, [sp, #0]
 8019e0e:	2308      	movs	r3, #8
 8019e10:	687a      	ldr	r2, [r7, #4]
 8019e12:	2101      	movs	r1, #1
 8019e14:	f7fc ffd8 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 8019e1c:	89fb      	ldrh	r3, [r7, #14]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d104      	bne.n	8019e2c <rfalSt25tbPollerGetUID+0x3e>
 8019e22:	89bb      	ldrh	r3, [r7, #12]
 8019e24:	2b08      	cmp	r3, #8
 8019e26:	d001      	beq.n	8019e2c <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 8019e28:	230b      	movs	r3, #11
 8019e2a:	e000      	b.n	8019e2e <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 8019e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8019e2e:	4618      	mov	r0, r3
 8019e30:	3710      	adds	r7, #16
 8019e32:	46bd      	mov	sp, r7
 8019e34:	bd80      	pop	{r7, pc}

08019e36 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8019e36:	b580      	push	{r7, lr}
 8019e38:	b086      	sub	sp, #24
 8019e3a:	af00      	add	r7, sp, #0
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	60b9      	str	r1, [r7, #8]
 8019e40:	607a      	str	r2, [r7, #4]
 8019e42:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 8019e44:	68bb      	ldr	r3, [r7, #8]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d005      	beq.n	8019e56 <rfalSt25tbPollerCollisionResolution+0x20>
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d002      	beq.n	8019e56 <rfalSt25tbPollerCollisionResolution+0x20>
 8019e50:	7bfb      	ldrb	r3, [r7, #15]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d101      	bne.n	8019e5a <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 8019e56:	2307      	movs	r3, #7
 8019e58:	e05c      	b.n	8019f14 <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	2200      	movs	r2, #0
 8019e5e:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 8019e60:	f107 0314 	add.w	r3, r7, #20
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7ff ff10 	bl	8019c8a <rfalSt25tbPollerInitiate>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 8019e6e:	8afb      	ldrh	r3, [r7, #22]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d139      	bne.n	8019ee8 <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	781b      	ldrb	r3, [r3, #0]
 8019e78:	461a      	mov	r2, r3
 8019e7a:	4613      	mov	r3, r2
 8019e7c:	009b      	lsls	r3, r3, #2
 8019e7e:	4413      	add	r3, r2
 8019e80:	005b      	lsls	r3, r3, #1
 8019e82:	461a      	mov	r2, r3
 8019e84:	68bb      	ldr	r3, [r7, #8]
 8019e86:	4413      	add	r3, r2
 8019e88:	7d3a      	ldrb	r2, [r7, #20]
 8019e8a:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	781b      	ldrb	r3, [r3, #0]
 8019e90:	461a      	mov	r2, r3
 8019e92:	4613      	mov	r3, r2
 8019e94:	009b      	lsls	r3, r3, #2
 8019e96:	4413      	add	r3, r2
 8019e98:	005b      	lsls	r3, r3, #1
 8019e9a:	461a      	mov	r2, r3
 8019e9c:	68bb      	ldr	r3, [r7, #8]
 8019e9e:	4413      	add	r3, r2
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 8019ea4:	7d3b      	ldrb	r3, [r7, #20]
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f7ff ff75 	bl	8019d96 <rfalSt25tbPollerSelect>
 8019eac:	4603      	mov	r3, r0
 8019eae:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 8019eb0:	8afb      	ldrh	r3, [r7, #22]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d10f      	bne.n	8019ed6 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	461a      	mov	r2, r3
 8019ebc:	4613      	mov	r3, r2
 8019ebe:	009b      	lsls	r3, r3, #2
 8019ec0:	4413      	add	r3, r2
 8019ec2:	005b      	lsls	r3, r3, #1
 8019ec4:	461a      	mov	r2, r3
 8019ec6:	68bb      	ldr	r3, [r7, #8]
 8019ec8:	4413      	add	r3, r2
 8019eca:	3301      	adds	r3, #1
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7ff ff8e 	bl	8019dee <rfalSt25tbPollerGetUID>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 8019ed6:	8afb      	ldrh	r3, [r7, #22]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d105      	bne.n	8019ee8 <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	781b      	ldrb	r3, [r3, #0]
 8019ee0:	3301      	adds	r3, #1
 8019ee2:	b2da      	uxtb	r2, r3
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	7bfa      	ldrb	r2, [r7, #15]
 8019eee:	429a      	cmp	r2, r3
 8019ef0:	d90f      	bls.n	8019f12 <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 8019ef2:	7bfb      	ldrb	r3, [r7, #15]
 8019ef4:	687a      	ldr	r2, [r7, #4]
 8019ef6:	68b9      	ldr	r1, [r7, #8]
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7ff fe16 	bl	8019b2a <rfalSt25tbPollerDoCollisionResolution>
 8019efe:	4603      	mov	r3, r0
 8019f00:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 8019f02:	7d7b      	ldrb	r3, [r7, #21]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d004      	beq.n	8019f12 <rfalSt25tbPollerCollisionResolution+0xdc>
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	781b      	ldrb	r3, [r3, #0]
 8019f0c:	7bfa      	ldrb	r2, [r7, #15]
 8019f0e:	429a      	cmp	r2, r3
 8019f10:	d8ef      	bhi.n	8019ef2 <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 8019f12:	2300      	movs	r3, #0
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	3718      	adds	r7, #24
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd80      	pop	{r7, pc}

08019f1c <rfalST25xVPollerM24LRReadSingleBlock>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b08c      	sub	sp, #48	; 0x30
 8019f20:	af06      	add	r7, sp, #24
 8019f22:	60b9      	str	r1, [r7, #8]
 8019f24:	607b      	str	r3, [r7, #4]
 8019f26:	4603      	mov	r3, r0
 8019f28:	73fb      	strb	r3, [r7, #15]
 8019f2a:	4613      	mov	r3, r2
 8019f2c:	81bb      	strh	r3, [r7, #12]
    uint8_t data[RFAL_NFCV_BLOCKNUM_M24LR_LEN];
    uint8_t dataLen;
    
    dataLen = 0;
 8019f2e:	2300      	movs	r3, #0
 8019f30:	75fb      	strb	r3, [r7, #23]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 8019f32:	7dfb      	ldrb	r3, [r7, #23]
 8019f34:	1c5a      	adds	r2, r3, #1
 8019f36:	75fa      	strb	r2, [r7, #23]
 8019f38:	89ba      	ldrh	r2, [r7, #12]
 8019f3a:	b2d2      	uxtb	r2, r2
 8019f3c:	f107 0118 	add.w	r1, r7, #24
 8019f40:	440b      	add	r3, r1
 8019f42:	f803 2c04 	strb.w	r2, [r3, #-4]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 8019f46:	89bb      	ldrh	r3, [r7, #12]
 8019f48:	0a1b      	lsrs	r3, r3, #8
 8019f4a:	b29a      	uxth	r2, r3
 8019f4c:	7dfb      	ldrb	r3, [r7, #23]
 8019f4e:	1c59      	adds	r1, r3, #1
 8019f50:	75f9      	strb	r1, [r7, #23]
 8019f52:	b2d2      	uxtb	r2, r2
 8019f54:	f107 0118 	add.w	r1, r7, #24
 8019f58:	440b      	add	r3, r1
 8019f5a:	f803 2c04 	strb.w	r2, [r3, #-4]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 8019f5e:	7bfb      	ldrb	r3, [r7, #15]
 8019f60:	f043 0308 	orr.w	r3, r3, #8
 8019f64:	b2d9      	uxtb	r1, r3
 8019f66:	7dfb      	ldrb	r3, [r7, #23]
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f6c:	9204      	str	r2, [sp, #16]
 8019f6e:	8c3a      	ldrh	r2, [r7, #32]
 8019f70:	9203      	str	r2, [sp, #12]
 8019f72:	687a      	ldr	r2, [r7, #4]
 8019f74:	9202      	str	r2, [sp, #8]
 8019f76:	9301      	str	r3, [sp, #4]
 8019f78:	f107 0314 	add.w	r3, r7, #20
 8019f7c:	9300      	str	r3, [sp, #0]
 8019f7e:	68bb      	ldr	r3, [r7, #8]
 8019f80:	2200      	movs	r2, #0
 8019f82:	2020      	movs	r0, #32
 8019f84:	f7fb fe8a 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 8019f88:	4603      	mov	r3, r0
}
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	3718      	adds	r7, #24
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	bd80      	pop	{r7, pc}

08019f92 <rfalST25xVPollerM24LRWriteSingleBlock>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRWriteSingleBlock( uint8_t flags, const uint8_t* uid, uint16_t blockNum, const uint8_t* wrData, uint8_t blockLen )
{
 8019f92:	b580      	push	{r7, lr}
 8019f94:	b09e      	sub	sp, #120	; 0x78
 8019f96:	af06      	add	r7, sp, #24
 8019f98:	60b9      	str	r1, [r7, #8]
 8019f9a:	607b      	str	r3, [r7, #4]
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	73fb      	strb	r3, [r7, #15]
 8019fa0:	4613      	mov	r3, r2
 8019fa2:	81bb      	strh	r3, [r7, #12]
    uint8_t            dataLen;
    uint16_t           rcvLen;
    rfalNfcvGenericRes res;
    
    /* Check for valid parameters */
    if( (blockLen == 0U) || (blockLen > (uint8_t)RFAL_NFCV_MAX_BLOCK_LEN) || (wrData == NULL) )
 8019fa4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d006      	beq.n	8019fba <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 8019fac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8019fb0:	2b20      	cmp	r3, #32
 8019fb2:	d802      	bhi.n	8019fba <rfalST25xVPollerM24LRWriteSingleBlock+0x28>
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d101      	bne.n	8019fbe <rfalST25xVPollerM24LRWriteSingleBlock+0x2c>
    {
        return ERR_PARAM;
 8019fba:	2307      	movs	r3, #7
 8019fbc:	e047      	b.n	801a04e <rfalST25xVPollerM24LRWriteSingleBlock+0xbc>
    }
    
    dataLen = 0U;
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)blockNum;         /* Set M24LR Block Number (16 bits) LSB */
 8019fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019fc8:	1c5a      	adds	r2, r3, #1
 8019fca:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
 8019fce:	89ba      	ldrh	r2, [r7, #12]
 8019fd0:	b2d2      	uxtb	r2, r2
 8019fd2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019fd6:	440b      	add	r3, r1
 8019fd8:	f803 2c24 	strb.w	r2, [r3, #-36]
    data[dataLen++] = (uint8_t)(blockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 8019fdc:	89bb      	ldrh	r3, [r7, #12]
 8019fde:	0a1b      	lsrs	r3, r3, #8
 8019fe0:	b29a      	uxth	r2, r3
 8019fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019fe6:	1c59      	adds	r1, r3, #1
 8019fe8:	f887 105f 	strb.w	r1, [r7, #95]	; 0x5f
 8019fec:	b2d2      	uxtb	r2, r2
 8019fee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019ff2:	440b      	add	r3, r1
 8019ff4:	f803 2c24 	strb.w	r2, [r3, #-36]
    ST_MEMCPY( &data[dataLen], wrData, blockLen ); /* Append Block data to write       */
 8019ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019ffc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801a000:	4413      	add	r3, r2
 801a002:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801a006:	6879      	ldr	r1, [r7, #4]
 801a008:	4618      	mov	r0, r3
 801a00a:	f001 fe51 	bl	801bcb0 <memcpy>
    dataLen += blockLen;
 801a00e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801a012:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a016:	4413      	add	r3, r2
 801a018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, (uint8_t*)&res, sizeof(rfalNfcvGenericRes), &rcvLen );
 801a01c:	7bfb      	ldrb	r3, [r7, #15]
 801a01e:	f043 0308 	orr.w	r3, r3, #8
 801a022:	b2d9      	uxtb	r1, r3
 801a024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a028:	b29b      	uxth	r3, r3
 801a02a:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801a02e:	9204      	str	r2, [sp, #16]
 801a030:	222a      	movs	r2, #42	; 0x2a
 801a032:	9203      	str	r2, [sp, #12]
 801a034:	f107 0210 	add.w	r2, r7, #16
 801a038:	9202      	str	r2, [sp, #8]
 801a03a:	9301      	str	r3, [sp, #4]
 801a03c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a040:	9300      	str	r3, [sp, #0]
 801a042:	68bb      	ldr	r3, [r7, #8]
 801a044:	2200      	movs	r2, #0
 801a046:	2021      	movs	r0, #33	; 0x21
 801a048:	f7fb fe28 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 801a04c:	4603      	mov	r3, r0
}
 801a04e:	4618      	mov	r0, r3
 801a050:	3760      	adds	r7, #96	; 0x60
 801a052:	46bd      	mov	sp, r7
 801a054:	bd80      	pop	{r7, pc}

0801a056 <rfalST25xVPollerM24LRReadMultipleBlocks>:

/*******************************************************************************/
ReturnCode rfalST25xVPollerM24LRReadMultipleBlocks( uint8_t flags, const uint8_t* uid, uint16_t firstBlockNum, uint8_t numOfBlocks, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 801a056:	b580      	push	{r7, lr}
 801a058:	b08a      	sub	sp, #40	; 0x28
 801a05a:	af06      	add	r7, sp, #24
 801a05c:	6039      	str	r1, [r7, #0]
 801a05e:	4611      	mov	r1, r2
 801a060:	461a      	mov	r2, r3
 801a062:	4603      	mov	r3, r0
 801a064:	71fb      	strb	r3, [r7, #7]
 801a066:	460b      	mov	r3, r1
 801a068:	80bb      	strh	r3, [r7, #4]
 801a06a:	4613      	mov	r3, r2
 801a06c:	71bb      	strb	r3, [r7, #6]
    uint8_t data[(RFAL_NFCV_BLOCKNUM_M24LR_LEN + RFAL_NFCV_BLOCKNUM_M24LR_LEN)];
    uint8_t dataLen;
    
    dataLen = 0U;
 801a06e:	2300      	movs	r3, #0
 801a070:	73fb      	strb	r3, [r7, #15]
    
    /* Compute Request Data */
    data[dataLen++] = (uint8_t)firstBlockNum;         /* Set M24LR Block Number (16 bits) LSB */
 801a072:	7bfb      	ldrb	r3, [r7, #15]
 801a074:	1c5a      	adds	r2, r3, #1
 801a076:	73fa      	strb	r2, [r7, #15]
 801a078:	88ba      	ldrh	r2, [r7, #4]
 801a07a:	b2d2      	uxtb	r2, r2
 801a07c:	f107 0110 	add.w	r1, r7, #16
 801a080:	440b      	add	r3, r1
 801a082:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = (uint8_t)(firstBlockNum >> 8U); /* Set M24LR Block Number (16 bits) MSB */
 801a086:	88bb      	ldrh	r3, [r7, #4]
 801a088:	0a1b      	lsrs	r3, r3, #8
 801a08a:	b29a      	uxth	r2, r3
 801a08c:	7bfb      	ldrb	r3, [r7, #15]
 801a08e:	1c59      	adds	r1, r3, #1
 801a090:	73f9      	strb	r1, [r7, #15]
 801a092:	b2d2      	uxtb	r2, r2
 801a094:	f107 0110 	add.w	r1, r7, #16
 801a098:	440b      	add	r3, r1
 801a09a:	f803 2c08 	strb.w	r2, [r3, #-8]
    data[dataLen++] = numOfBlocks;                    /* Set number of blocks to read         */
 801a09e:	7bfb      	ldrb	r3, [r7, #15]
 801a0a0:	1c5a      	adds	r2, r3, #1
 801a0a2:	73fa      	strb	r2, [r7, #15]
 801a0a4:	f107 0210 	add.w	r2, r7, #16
 801a0a8:	4413      	add	r3, r2
 801a0aa:	79ba      	ldrb	r2, [r7, #6]
 801a0ac:	f803 2c08 	strb.w	r2, [r3, #-8]
    
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS, (flags | (uint8_t)RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT), RFAL_NFCV_PARAM_SKIP, uid, data, dataLen, rxBuf, rxBufLen, rcvLen );
 801a0b0:	79fb      	ldrb	r3, [r7, #7]
 801a0b2:	f043 0308 	orr.w	r3, r3, #8
 801a0b6:	b2d9      	uxtb	r1, r3
 801a0b8:	7bfb      	ldrb	r3, [r7, #15]
 801a0ba:	b29b      	uxth	r3, r3
 801a0bc:	6a3a      	ldr	r2, [r7, #32]
 801a0be:	9204      	str	r2, [sp, #16]
 801a0c0:	8bba      	ldrh	r2, [r7, #28]
 801a0c2:	9203      	str	r2, [sp, #12]
 801a0c4:	69ba      	ldr	r2, [r7, #24]
 801a0c6:	9202      	str	r2, [sp, #8]
 801a0c8:	9301      	str	r3, [sp, #4]
 801a0ca:	f107 0308 	add.w	r3, r7, #8
 801a0ce:	9300      	str	r3, [sp, #0]
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	2023      	movs	r0, #35	; 0x23
 801a0d6:	f7fb fde1 	bl	8015c9c <rfalNfcvPollerTransceiveReq>
 801a0da:	4603      	mov	r3, r0
}
 801a0dc:	4618      	mov	r0, r3
 801a0de:	3710      	adds	r7, #16
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	bd80      	pop	{r7, pc}

0801a0e4 <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 801a0e4:	b580      	push	{r7, lr}
 801a0e6:	b082      	sub	sp, #8
 801a0e8:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	2100      	movs	r1, #0
 801a0ee:	2002      	movs	r0, #2
 801a0f0:	f7fb ff52 	bl	8015f98 <rfalSetMode>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	80fb      	strh	r3, [r7, #6]
 801a0f8:	88fb      	ldrh	r3, [r7, #6]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d001      	beq.n	801a102 <rfalT1TPollerInitialize+0x1e>
 801a0fe:	88fb      	ldrh	r3, [r7, #6]
 801a100:	e00e      	b.n	801a120 <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 801a102:	2001      	movs	r0, #1
 801a104:	f7fc fb8c 	bl	8016820 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 801a108:	2000      	movs	r0, #0
 801a10a:	f7fc fbdd 	bl	80168c8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 801a10e:	f240 4094 	movw	r0, #1172	; 0x494
 801a112:	f7fc fbc5 	bl	80168a0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 801a116:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a11a:	f7fc fba3 	bl	8016864 <rfalSetFDTPoll>
    
    return ERR_NONE;
 801a11e:	2300      	movs	r3, #0
}
 801a120:	4618      	mov	r0, r3
 801a122:	3708      	adds	r7, #8
 801a124:	46bd      	mov	sp, r7
 801a126:	bd80      	pop	{r7, pc}

0801a128 <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 801a128:	b580      	push	{r7, lr}
 801a12a:	b08a      	sub	sp, #40	; 0x28
 801a12c:	af04      	add	r7, sp, #16
 801a12e:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d101      	bne.n	801a13a <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 801a136:	2307      	movs	r3, #7
 801a138:	e02a      	b.n	801a190 <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 801a13a:	f107 030c 	add.w	r3, r7, #12
 801a13e:	2207      	movs	r2, #7
 801a140:	2100      	movs	r1, #0
 801a142:	4618      	mov	r0, r3
 801a144:	f001 fddc 	bl	801bd00 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 801a148:	2378      	movs	r3, #120	; 0x78
 801a14a:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 801a14c:	f107 000c 	add.w	r0, r7, #12
 801a150:	f640 13a8 	movw	r3, #2472	; 0x9a8
 801a154:	9302      	str	r3, [sp, #8]
 801a156:	2300      	movs	r3, #0
 801a158:	9301      	str	r3, [sp, #4]
 801a15a:	f107 030a 	add.w	r3, r7, #10
 801a15e:	9300      	str	r3, [sp, #0]
 801a160:	2306      	movs	r3, #6
 801a162:	687a      	ldr	r2, [r7, #4]
 801a164:	2107      	movs	r1, #7
 801a166:	f7fc fe2f 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801a16a:	4603      	mov	r3, r0
 801a16c:	82fb      	strh	r3, [r7, #22]
 801a16e:	8afb      	ldrh	r3, [r7, #22]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d001      	beq.n	801a178 <rfalT1TPollerRid+0x50>
 801a174:	8afb      	ldrh	r3, [r7, #22]
 801a176:	e00b      	b.n	801a190 <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 801a178:	897b      	ldrh	r3, [r7, #10]
 801a17a:	2b06      	cmp	r3, #6
 801a17c:	d105      	bne.n	801a18a <rfalT1TPollerRid+0x62>
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a186:	2b10      	cmp	r3, #16
 801a188:	d001      	beq.n	801a18e <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 801a18a:	230b      	movs	r3, #11
 801a18c:	e000      	b.n	801a190 <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 801a18e:	2300      	movs	r3, #0
}
 801a190:	4618      	mov	r0, r3
 801a192:	3718      	adds	r7, #24
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}

0801a198 <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 801a198:	b580      	push	{r7, lr}
 801a19a:	b08a      	sub	sp, #40	; 0x28
 801a19c:	af04      	add	r7, sp, #16
 801a19e:	60b9      	str	r1, [r7, #8]
 801a1a0:	607b      	str	r3, [r7, #4]
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	73fb      	strb	r3, [r7, #15]
 801a1a6:	4613      	mov	r3, r2
 801a1a8:	81bb      	strh	r3, [r7, #12]
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 801a1aa:	68bb      	ldr	r3, [r7, #8]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d002      	beq.n	801a1b6 <rfalT2TPollerRead+0x1e>
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d101      	bne.n	801a1ba <rfalT2TPollerRead+0x22>
    {
        return ERR_PARAM;
 801a1b6:	2307      	movs	r3, #7
 801a1b8:	e023      	b.n	801a202 <rfalT2TPollerRead+0x6a>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 801a1ba:	2330      	movs	r3, #48	; 0x30
 801a1bc:	753b      	strb	r3, [r7, #20]
    req.blNo = blockNum;
 801a1be:	7bfb      	ldrb	r3, [r7, #15]
 801a1c0:	757b      	strb	r3, [r7, #21]
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801a1c2:	89ba      	ldrh	r2, [r7, #12]
 801a1c4:	f107 0014 	add.w	r0, r7, #20
 801a1c8:	4b10      	ldr	r3, [pc, #64]	; (801a20c <rfalT2TPollerRead+0x74>)
 801a1ca:	9302      	str	r3, [sp, #8]
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	9301      	str	r3, [sp, #4]
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	9300      	str	r3, [sp, #0]
 801a1d4:	4613      	mov	r3, r2
 801a1d6:	68ba      	ldr	r2, [r7, #8]
 801a1d8:	2102      	movs	r1, #2
 801a1da:	f7fc fdf5 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801a1de:	4603      	mov	r3, r0
 801a1e0:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801a1e2:	8afb      	ldrh	r3, [r7, #22]
 801a1e4:	2b28      	cmp	r3, #40	; 0x28
 801a1e6:	d10b      	bne.n	801a200 <rfalT2TPollerRead+0x68>
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	2b01      	cmp	r3, #1
 801a1ee:	d107      	bne.n	801a200 <rfalT2TPollerRead+0x68>
 801a1f0:	68bb      	ldr	r3, [r7, #8]
 801a1f2:	781b      	ldrb	r3, [r3, #0]
 801a1f4:	f003 030f 	and.w	r3, r3, #15
 801a1f8:	2b0a      	cmp	r3, #10
 801a1fa:	d001      	beq.n	801a200 <rfalT2TPollerRead+0x68>
    {
        return ERR_PROTO;
 801a1fc:	230b      	movs	r3, #11
 801a1fe:	e000      	b.n	801a202 <rfalT2TPollerRead+0x6a>
    }
    return ret;
 801a200:	8afb      	ldrh	r3, [r7, #22]
 }
 801a202:	4618      	mov	r0, r3
 801a204:	3718      	adds	r7, #24
 801a206:	46bd      	mov	sp, r7
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	bf00      	nop
 801a20c:	000108d8 	.word	0x000108d8

0801a210 <rfalT2TPollerWrite>:
 
 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerWrite( uint8_t blockNum, const uint8_t* wrData )
 {
 801a210:	b580      	push	{r7, lr}
 801a212:	b08a      	sub	sp, #40	; 0x28
 801a214:	af04      	add	r7, sp, #16
 801a216:	4603      	mov	r3, r0
 801a218:	6039      	str	r1, [r7, #0]
 801a21a:	71fb      	strb	r3, [r7, #7]
    ReturnCode         ret;
    rfalT2TWriteReq    req;
    uint8_t            res;
    uint16_t           rxLen;
    
    req.code = (uint8_t)RFAL_T2T_CMD_WRITE;
 801a21c:	23a2      	movs	r3, #162	; 0xa2
 801a21e:	743b      	strb	r3, [r7, #16]
    req.blNo = blockNum;
 801a220:	79fb      	ldrb	r3, [r7, #7]
 801a222:	747b      	strb	r3, [r7, #17]
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY(req.data, wrData, RFAL_T2T_WRITE_DATA_LEN);
 801a228:	f8c7 3012 	str.w	r3, [r7, #18]
    
     
    /* Transceive WRITE Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TWriteReq), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 801a22c:	f107 020f 	add.w	r2, r7, #15
 801a230:	f107 0010 	add.w	r0, r7, #16
 801a234:	4b11      	ldr	r3, [pc, #68]	; (801a27c <rfalT2TPollerWrite+0x6c>)
 801a236:	9302      	str	r3, [sp, #8]
 801a238:	2300      	movs	r3, #0
 801a23a:	9301      	str	r3, [sp, #4]
 801a23c:	f107 030c 	add.w	r3, r7, #12
 801a240:	9300      	str	r3, [sp, #0]
 801a242:	2301      	movs	r3, #1
 801a244:	2106      	movs	r1, #6
 801a246:	f7fc fdbf 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801a24a:	4603      	mov	r3, r0
 801a24c:	82fb      	strh	r3, [r7, #22]
    
    /* Check for a valid ACK */
    if( (ret == ERR_INCOMPLETE_BYTE) || (ret == ERR_NONE) )
 801a24e:	8afb      	ldrh	r3, [r7, #22]
 801a250:	2b28      	cmp	r3, #40	; 0x28
 801a252:	d002      	beq.n	801a25a <rfalT2TPollerWrite+0x4a>
 801a254:	8afb      	ldrh	r3, [r7, #22]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d10b      	bne.n	801a272 <rfalT2TPollerWrite+0x62>
    {
        ret = ERR_PROTO;
 801a25a:	230b      	movs	r3, #11
 801a25c:	82fb      	strh	r3, [r7, #22]
        
        if( (rxLen == RFAL_T2T_ACK_NACK_LEN) && ((res & RFAL_T2T_ACK_MASK) == RFAL_T2T_ACK) )
 801a25e:	89bb      	ldrh	r3, [r7, #12]
 801a260:	2b01      	cmp	r3, #1
 801a262:	d106      	bne.n	801a272 <rfalT2TPollerWrite+0x62>
 801a264:	7bfb      	ldrb	r3, [r7, #15]
 801a266:	f003 030f 	and.w	r3, r3, #15
 801a26a:	2b0a      	cmp	r3, #10
 801a26c:	d101      	bne.n	801a272 <rfalT2TPollerWrite+0x62>
        {
            ret = ERR_NONE;
 801a26e:	2300      	movs	r3, #0
 801a270:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    return ret;
 801a272:	8afb      	ldrh	r3, [r7, #22]
 }
 801a274:	4618      	mov	r0, r3
 801a276:	3718      	adds	r7, #24
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}
 801a27c:	000108d8 	.word	0x000108d8

0801a280 <rfalT2TPollerSectorSelect>:

 
 /*******************************************************************************/
 ReturnCode rfalT2TPollerSectorSelect( uint8_t sectorNum )
 {
 801a280:	b580      	push	{r7, lr}
 801a282:	b08a      	sub	sp, #40	; 0x28
 801a284:	af04      	add	r7, sp, #16
 801a286:	4603      	mov	r3, r0
 801a288:	71fb      	strb	r3, [r7, #7]
    uint8_t                  res;
    uint16_t                 rxLen;
    
    
    /* Compute SECTOR SELECT Packet 1  */
    p1Req.code  = (uint8_t)RFAL_T2T_CMD_SECTOR_SELECT;
 801a28a:	23c2      	movs	r3, #194	; 0xc2
 801a28c:	753b      	strb	r3, [r7, #20]
    p1Req.byte2 = RFAL_T2T_SECTOR_SELECT_P1_BYTE2;
 801a28e:	23ff      	movs	r3, #255	; 0xff
 801a290:	757b      	strb	r3, [r7, #21]
    
    /* Transceive SECTOR SELECT Packet 1 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p1Req, sizeof(rfalT2TSectorSelectP1Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801a292:	f107 020f 	add.w	r2, r7, #15
 801a296:	f107 0014 	add.w	r0, r7, #20
 801a29a:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801a29e:	9302      	str	r3, [sp, #8]
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	9301      	str	r3, [sp, #4]
 801a2a4:	f107 030c 	add.w	r3, r7, #12
 801a2a8:	9300      	str	r3, [sp, #0]
 801a2aa:	2301      	movs	r3, #1
 801a2ac:	2102      	movs	r1, #2
 801a2ae:	f7fc fd8b 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	82fb      	strh	r3, [r7, #22]
    
    /* Check and report any transmission error */
    if( (ret != ERR_INCOMPLETE_BYTE) && (ret != ERR_NONE) )
 801a2b6:	8afb      	ldrh	r3, [r7, #22]
 801a2b8:	2b28      	cmp	r3, #40	; 0x28
 801a2ba:	d004      	beq.n	801a2c6 <rfalT2TPollerSectorSelect+0x46>
 801a2bc:	8afb      	ldrh	r3, [r7, #22]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d001      	beq.n	801a2c6 <rfalT2TPollerSectorSelect+0x46>
    {
        return ret;
 801a2c2:	8afb      	ldrh	r3, [r7, #22]
 801a2c4:	e036      	b.n	801a334 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* Ensure that an ACK was received */
    if( (ret != ERR_INCOMPLETE_BYTE) || (rxLen != RFAL_T2T_ACK_NACK_LEN) || ((res & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 801a2c6:	8afb      	ldrh	r3, [r7, #22]
 801a2c8:	2b28      	cmp	r3, #40	; 0x28
 801a2ca:	d107      	bne.n	801a2dc <rfalT2TPollerSectorSelect+0x5c>
 801a2cc:	89bb      	ldrh	r3, [r7, #12]
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d104      	bne.n	801a2dc <rfalT2TPollerSectorSelect+0x5c>
 801a2d2:	7bfb      	ldrb	r3, [r7, #15]
 801a2d4:	f003 030f 	and.w	r3, r3, #15
 801a2d8:	2b0a      	cmp	r3, #10
 801a2da:	d001      	beq.n	801a2e0 <rfalT2TPollerSectorSelect+0x60>
    {
        return ERR_PROTO;
 801a2dc:	230b      	movs	r3, #11
 801a2de:	e029      	b.n	801a334 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    
    /* Compute SECTOR SELECT Packet 2  */
    p2Req.secNo  = sectorNum;
 801a2e0:	79fb      	ldrb	r3, [r7, #7]
 801a2e2:	743b      	strb	r3, [r7, #16]
    ST_MEMSET( &p2Req.rfu, 0x00, RFAL_T2T_SECTOR_SELECT_P2_RFU_LEN );
 801a2e4:	f107 0310 	add.w	r3, r7, #16
 801a2e8:	3301      	adds	r3, #1
 801a2ea:	2203      	movs	r2, #3
 801a2ec:	2100      	movs	r1, #0
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f001 fd06 	bl	801bd00 <memset>
    
    
    /* Transceive SECTOR SELECT Packet 2 */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&p2Req, sizeof(rfalT2TSectorSelectP2Req), &res, sizeof(uint8_t), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_SL_MAX );
 801a2f4:	f107 020f 	add.w	r2, r7, #15
 801a2f8:	f107 0010 	add.w	r0, r7, #16
 801a2fc:	f243 43f8 	movw	r3, #13560	; 0x34f8
 801a300:	9302      	str	r3, [sp, #8]
 801a302:	2300      	movs	r3, #0
 801a304:	9301      	str	r3, [sp, #4]
 801a306:	f107 030c 	add.w	r3, r7, #12
 801a30a:	9300      	str	r3, [sp, #0]
 801a30c:	2301      	movs	r3, #1
 801a30e:	2104      	movs	r1, #4
 801a310:	f7fc fd5a 	bl	8016dc8 <rfalTransceiveBlockingTxRx>
 801a314:	4603      	mov	r3, r0
 801a316:	82fb      	strh	r3, [r7, #22]
    
    /* T2T 1.0 5.4.1.14 The Reader/Writer SHALL treat any response received before the end of PATT2T,SL,MAX as a Protocol Error */
    if( (ret == ERR_NONE) || (ret == ERR_INCOMPLETE_BYTE) )
 801a318:	8afb      	ldrh	r3, [r7, #22]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d002      	beq.n	801a324 <rfalT2TPollerSectorSelect+0xa4>
 801a31e:	8afb      	ldrh	r3, [r7, #22]
 801a320:	2b28      	cmp	r3, #40	; 0x28
 801a322:	d101      	bne.n	801a328 <rfalT2TPollerSectorSelect+0xa8>
    {
        return ERR_PROTO;
 801a324:	230b      	movs	r3, #11
 801a326:	e005      	b.n	801a334 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    /* T2T 1.0 5.4.1.13 The Reader/Writer SHALL treat the transmission of the SECTOR SELECT Command Packet 2 as being successful when it receives no response until PATT2T,SL,MAX. */ 
    if( ret == ERR_TIMEOUT )
 801a328:	8afb      	ldrh	r3, [r7, #22]
 801a32a:	2b04      	cmp	r3, #4
 801a32c:	d101      	bne.n	801a332 <rfalT2TPollerSectorSelect+0xb2>
    {
        return ERR_NONE;
 801a32e:	2300      	movs	r3, #0
 801a330:	e000      	b.n	801a334 <rfalT2TPollerSectorSelect+0xb4>
    }
    
    return ret;
 801a332:	8afb      	ldrh	r3, [r7, #22]
 }
 801a334:	4618      	mov	r0, r3
 801a336:	3718      	adds	r7, #24
 801a338:	46bd      	mov	sp, r7
 801a33a:	bd80      	pop	{r7, pc}

0801a33c <rfalT4TPollerComposeCAPDU>:
 ******************************************************************************
 */

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeCAPDU( const rfalT4tCApduParam *apduParam )
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b084      	sub	sp, #16
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
    uint8_t                  hdrLen;
    uint16_t                 msgIt;
    
    if( (apduParam == NULL) || (apduParam->cApduBuf == NULL) || (apduParam->cApduLen == NULL) )
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d007      	beq.n	801a35a <rfalT4TPollerComposeCAPDU+0x1e>
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	689b      	ldr	r3, [r3, #8]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d003      	beq.n	801a35a <rfalT4TPollerComposeCAPDU+0x1e>
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	68db      	ldr	r3, [r3, #12]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d101      	bne.n	801a35e <rfalT4TPollerComposeCAPDU+0x22>
    {
        return ERR_PARAM;
 801a35a:	2307      	movs	r3, #7
 801a35c:	e085      	b.n	801a46a <rfalT4TPollerComposeCAPDU+0x12e>
    }
    
    msgIt                  = 0;
 801a35e:	2300      	movs	r3, #0
 801a360:	81fb      	strh	r3, [r7, #14]
    *(apduParam->cApduLen) = 0;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	68db      	ldr	r3, [r3, #12]
 801a366:	2200      	movs	r2, #0
 801a368:	801a      	strh	r2, [r3, #0]
    
    /*******************************************************************************/
    /* Compute Command-APDU  according to the format   T4T 1.0 5.1.2 & ISO7816-4 2013 Table 1 */
    
    /* Check if Data is present */
    if( apduParam->LcFlag )
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	795b      	ldrb	r3, [r3, #5]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d026      	beq.n	801a3c0 <rfalT4TPollerComposeCAPDU+0x84>
    {
        if( apduParam->Lc == 0U )
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	791b      	ldrb	r3, [r3, #4]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d101      	bne.n	801a37e <rfalT4TPollerComposeCAPDU+0x42>
        {
            /* Extented field coding not supported */
            return ERR_PARAM;
 801a37a:	2307      	movs	r3, #7
 801a37c:	e075      	b.n	801a46a <rfalT4TPollerComposeCAPDU+0x12e>
        {
            return ERR_PARAM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
        }
        
        /* Calculate the header length a place the data/body where it should be */
        hdrLen = RFAL_T4T_MAX_CAPDU_PROLOGUE_LEN + RFAL_T4T_LC_LEN;
 801a37e:	2305      	movs	r3, #5
 801a380:	737b      	strb	r3, [r7, #13]
        
        /* make sure not to exceed buffer size */
        if( ((uint16_t)hdrLen + (uint16_t)apduParam->Lc + (apduParam->LeFlag ? RFAL_T4T_LC_LEN : 0U)) > RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 801a382:	7b7b      	ldrb	r3, [r7, #13]
 801a384:	687a      	ldr	r2, [r7, #4]
 801a386:	7912      	ldrb	r2, [r2, #4]
 801a388:	4413      	add	r3, r2
 801a38a:	461a      	mov	r2, r3
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	79db      	ldrb	r3, [r3, #7]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d001      	beq.n	801a398 <rfalT4TPollerComposeCAPDU+0x5c>
 801a394:	2301      	movs	r3, #1
 801a396:	e000      	b.n	801a39a <rfalT4TPollerComposeCAPDU+0x5e>
 801a398:	2300      	movs	r3, #0
 801a39a:	4413      	add	r3, r2
 801a39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3a0:	d901      	bls.n	801a3a6 <rfalT4TPollerComposeCAPDU+0x6a>
        {
            return ERR_NOMEM; /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset */ 
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	e061      	b.n	801a46a <rfalT4TPollerComposeCAPDU+0x12e>
        }
        ST_MEMMOVE( &apduParam->cApduBuf->apdu[hdrLen], apduParam->cApduBuf->apdu, apduParam->Lc );
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	689a      	ldr	r2, [r3, #8]
 801a3aa:	7b7b      	ldrb	r3, [r7, #13]
 801a3ac:	4413      	add	r3, r2
 801a3ae:	1cd8      	adds	r0, r3, #3
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	689b      	ldr	r3, [r3, #8]
 801a3b4:	1cd9      	adds	r1, r3, #3
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	791b      	ldrb	r3, [r3, #4]
 801a3ba:	461a      	mov	r2, r3
 801a3bc:	f001 fc86 	bl	801bccc <memmove>
    }
    
    /* Prepend the ADPDU's header */
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->CLA;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	689a      	ldr	r2, [r3, #8]
 801a3c4:	89fb      	ldrh	r3, [r7, #14]
 801a3c6:	1c59      	adds	r1, r3, #1
 801a3c8:	81f9      	strh	r1, [r7, #14]
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	7819      	ldrb	r1, [r3, #0]
 801a3d0:	1813      	adds	r3, r2, r0
 801a3d2:	460a      	mov	r2, r1
 801a3d4:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->INS;
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	689a      	ldr	r2, [r3, #8]
 801a3da:	89fb      	ldrh	r3, [r7, #14]
 801a3dc:	1c59      	adds	r1, r3, #1
 801a3de:	81f9      	strh	r1, [r7, #14]
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	7859      	ldrb	r1, [r3, #1]
 801a3e6:	1813      	adds	r3, r2, r0
 801a3e8:	460a      	mov	r2, r1
 801a3ea:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P1;
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	689a      	ldr	r2, [r3, #8]
 801a3f0:	89fb      	ldrh	r3, [r7, #14]
 801a3f2:	1c59      	adds	r1, r3, #1
 801a3f4:	81f9      	strh	r1, [r7, #14]
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	7899      	ldrb	r1, [r3, #2]
 801a3fc:	1813      	adds	r3, r2, r0
 801a3fe:	460a      	mov	r2, r1
 801a400:	70da      	strb	r2, [r3, #3]
    apduParam->cApduBuf->apdu[msgIt++] = apduParam->P2;
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	689a      	ldr	r2, [r3, #8]
 801a406:	89fb      	ldrh	r3, [r7, #14]
 801a408:	1c59      	adds	r1, r3, #1
 801a40a:	81f9      	strh	r1, [r7, #14]
 801a40c:	4618      	mov	r0, r3
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	78d9      	ldrb	r1, [r3, #3]
 801a412:	1813      	adds	r3, r2, r0
 801a414:	460a      	mov	r2, r1
 801a416:	70da      	strb	r2, [r3, #3]
    
    
    /* Check if Data field length is to be added */
    if( apduParam->LcFlag )
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	795b      	ldrb	r3, [r3, #5]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d010      	beq.n	801a442 <rfalT4TPollerComposeCAPDU+0x106>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Lc;
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	689a      	ldr	r2, [r3, #8]
 801a424:	89fb      	ldrh	r3, [r7, #14]
 801a426:	1c59      	adds	r1, r3, #1
 801a428:	81f9      	strh	r1, [r7, #14]
 801a42a:	4618      	mov	r0, r3
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	7919      	ldrb	r1, [r3, #4]
 801a430:	1813      	adds	r3, r2, r0
 801a432:	460a      	mov	r2, r1
 801a434:	70da      	strb	r2, [r3, #3]
        msgIt += apduParam->Lc;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	791b      	ldrb	r3, [r3, #4]
 801a43a:	b29a      	uxth	r2, r3
 801a43c:	89fb      	ldrh	r3, [r7, #14]
 801a43e:	4413      	add	r3, r2
 801a440:	81fb      	strh	r3, [r7, #14]
    }
    
    /* Check if Expected Response Length is to be added */
    if( apduParam->LeFlag )
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	79db      	ldrb	r3, [r3, #7]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d00a      	beq.n	801a460 <rfalT4TPollerComposeCAPDU+0x124>
    {
        apduParam->cApduBuf->apdu[msgIt++] = apduParam->Le;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	689a      	ldr	r2, [r3, #8]
 801a44e:	89fb      	ldrh	r3, [r7, #14]
 801a450:	1c59      	adds	r1, r3, #1
 801a452:	81f9      	strh	r1, [r7, #14]
 801a454:	4618      	mov	r0, r3
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	7999      	ldrb	r1, [r3, #6]
 801a45a:	1813      	adds	r3, r2, r0
 801a45c:	460a      	mov	r2, r1
 801a45e:	70da      	strb	r2, [r3, #3]
    }
    
    *(apduParam->cApduLen) = msgIt;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	68db      	ldr	r3, [r3, #12]
 801a464:	89fa      	ldrh	r2, [r7, #14]
 801a466:	801a      	strh	r2, [r3, #0]
    
    return ERR_NONE;
 801a468:	2300      	movs	r3, #0
}
 801a46a:	4618      	mov	r0, r3
 801a46c:	3710      	adds	r7, #16
 801a46e:	46bd      	mov	sp, r7
 801a470:	bd80      	pop	{r7, pc}

0801a472 <rfalT4TPollerParseRAPDU>:


/*******************************************************************************/
ReturnCode rfalT4TPollerParseRAPDU( rfalT4tRApduParam *apduParam )
{
 801a472:	b480      	push	{r7}
 801a474:	b083      	sub	sp, #12
 801a476:	af00      	add	r7, sp, #0
 801a478:	6078      	str	r0, [r7, #4]
    if( (apduParam == NULL) || (apduParam->rApduBuf == NULL) )
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d003      	beq.n	801a488 <rfalT4TPollerParseRAPDU+0x16>
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d101      	bne.n	801a48c <rfalT4TPollerParseRAPDU+0x1a>
    {
        return ERR_PARAM;
 801a488:	2307      	movs	r3, #7
 801a48a:	e029      	b.n	801a4e0 <rfalT4TPollerParseRAPDU+0x6e>
    }
    
    if( apduParam->rcvdLen < RFAL_T4T_MAX_RAPDU_SW1SW2_LEN )
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	889b      	ldrh	r3, [r3, #4]
 801a490:	2b01      	cmp	r3, #1
 801a492:	d801      	bhi.n	801a498 <rfalT4TPollerParseRAPDU+0x26>
    {
        return ERR_PROTO;
 801a494:	230b      	movs	r3, #11
 801a496:	e023      	b.n	801a4e0 <rfalT4TPollerParseRAPDU+0x6e>
    }

    apduParam->rApduBodyLen = (apduParam->rcvdLen - (uint16_t)RFAL_T4T_MAX_RAPDU_SW1SW2_LEN);
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	889b      	ldrh	r3, [r3, #4]
 801a49c:	3b02      	subs	r3, #2
 801a49e:	b29a      	uxth	r2, r3
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	80da      	strh	r2, [r3, #6]
    apduParam->statusWord   = GETU16( &apduParam->rApduBuf->apdu[ apduParam->rApduBodyLen ] );
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	687a      	ldr	r2, [r7, #4]
 801a4aa:	88d2      	ldrh	r2, [r2, #6]
 801a4ac:	4413      	add	r3, r2
 801a4ae:	78db      	ldrb	r3, [r3, #3]
 801a4b0:	021b      	lsls	r3, r3, #8
 801a4b2:	b21a      	sxth	r2, r3
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	6879      	ldr	r1, [r7, #4]
 801a4ba:	88c9      	ldrh	r1, [r1, #6]
 801a4bc:	440b      	add	r3, r1
 801a4be:	3303      	adds	r3, #3
 801a4c0:	3301      	adds	r3, #1
 801a4c2:	781b      	ldrb	r3, [r3, #0]
 801a4c4:	b21b      	sxth	r3, r3
 801a4c6:	4313      	orrs	r3, r2
 801a4c8:	b21b      	sxth	r3, r3
 801a4ca:	b29a      	uxth	r2, r3
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	811a      	strh	r2, [r3, #8]

    /* Check SW1 SW2    T4T 1.0 5.1.3 NOTE */
    if( apduParam->statusWord == RFAL_T4T_ISO7816_STATUS_COMPLETE )
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	891b      	ldrh	r3, [r3, #8]
 801a4d4:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 801a4d8:	d101      	bne.n	801a4de <rfalT4TPollerParseRAPDU+0x6c>
    {
        return ERR_NONE;
 801a4da:	2300      	movs	r3, #0
 801a4dc:	e000      	b.n	801a4e0 <rfalT4TPollerParseRAPDU+0x6e>
    }

    return ERR_REQUEST;
 801a4de:	2305      	movs	r3, #5
}
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	370c      	adds	r7, #12
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bc80      	pop	{r7}
 801a4e8:	4770      	bx	lr

0801a4ea <rfalT4TPollerComposeSelectAppl>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectAppl( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* aid, uint8_t aidLen, uint16_t *cApduLen )
{   
 801a4ea:	b580      	push	{r7, lr}
 801a4ec:	b088      	sub	sp, #32
 801a4ee:	af00      	add	r7, sp, #0
 801a4f0:	60f8      	str	r0, [r7, #12]
 801a4f2:	60b9      	str	r1, [r7, #8]
 801a4f4:	603b      	str	r3, [r7, #0]
 801a4f6:	4613      	mov	r3, r2
 801a4f8:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  07h AID    00h */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801a4fe:	23a4      	movs	r3, #164	; 0xa4
 801a500:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_DF_NAME;
 801a502:	2304      	movs	r3, #4
 801a504:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801a506:	2300      	movs	r3, #0
 801a508:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = aidLen;
 801a50a:	79fb      	ldrb	r3, [r7, #7]
 801a50c:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801a50e:	2300      	movs	r3, #0
 801a510:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801a512:	2301      	movs	r3, #1
 801a514:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801a516:	2301      	movs	r3, #1
 801a518:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	61fb      	str	r3, [r7, #28]
    
    if( aidLen > 0U )
 801a522:	79fb      	ldrb	r3, [r7, #7]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d006      	beq.n	801a536 <rfalT4TPollerComposeSelectAppl+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, aid, aidLen );
 801a528:	69bb      	ldr	r3, [r7, #24]
 801a52a:	3303      	adds	r3, #3
 801a52c:	79fa      	ldrb	r2, [r7, #7]
 801a52e:	68b9      	ldr	r1, [r7, #8]
 801a530:	4618      	mov	r0, r3
 801a532:	f001 fbbd 	bl	801bcb0 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801a536:	f107 0310 	add.w	r3, r7, #16
 801a53a:	4618      	mov	r0, r3
 801a53c:	f7ff fefe 	bl	801a33c <rfalT4TPollerComposeCAPDU>
 801a540:	4603      	mov	r3, r0
}
 801a542:	4618      	mov	r0, r3
 801a544:	3720      	adds	r7, #32
 801a546:	46bd      	mov	sp, r7
 801a548:	bd80      	pop	{r7, pc}

0801a54a <rfalT4TPollerComposeSelectFile>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFile( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801a54a:	b580      	push	{r7, lr}
 801a54c:	b088      	sub	sp, #32
 801a54e:	af00      	add	r7, sp, #0
 801a550:	60f8      	str	r0, [r7, #12]
 801a552:	60b9      	str	r1, [r7, #8]
 801a554:	603b      	str	r3, [r7, #0]
 801a556:	4613      	mov	r3, r2
 801a558:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;

    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 0Ch  02h FID    -   */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801a55a:	2300      	movs	r3, #0
 801a55c:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801a55e:	23a4      	movs	r3, #164	; 0xa4
 801a560:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801a562:	2300      	movs	r3, #0
 801a564:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_NO_RESPONSE_DATA;
 801a566:	230c      	movs	r3, #12
 801a568:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801a56a:	79fb      	ldrb	r3, [r7, #7]
 801a56c:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801a56e:	2300      	movs	r3, #0
 801a570:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801a572:	2301      	movs	r3, #1
 801a574:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801a576:	2300      	movs	r3, #0
 801a578:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801a57e:	683b      	ldr	r3, [r7, #0]
 801a580:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801a582:	79fb      	ldrb	r3, [r7, #7]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d006      	beq.n	801a596 <rfalT4TPollerComposeSelectFile+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801a588:	69bb      	ldr	r3, [r7, #24]
 801a58a:	3303      	adds	r3, #3
 801a58c:	79fa      	ldrb	r2, [r7, #7]
 801a58e:	68b9      	ldr	r1, [r7, #8]
 801a590:	4618      	mov	r0, r3
 801a592:	f001 fb8d 	bl	801bcb0 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801a596:	f107 0310 	add.w	r3, r7, #16
 801a59a:	4618      	mov	r0, r3
 801a59c:	f7ff fece 	bl	801a33c <rfalT4TPollerComposeCAPDU>
 801a5a0:	4603      	mov	r3, r0
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3720      	adds	r7, #32
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bd80      	pop	{r7, pc}

0801a5aa <rfalT4TPollerComposeSelectFileV1Mapping>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeSelectFileV1Mapping( rfalIsoDepApduBufFormat *cApduBuf, const uint8_t* fid, uint8_t fidLen, uint16_t *cApduLen )
{   
 801a5aa:	b580      	push	{r7, lr}
 801a5ac:	b088      	sub	sp, #32
 801a5ae:	af00      	add	r7, sp, #0
 801a5b0:	60f8      	str	r0, [r7, #12]
 801a5b2:	60b9      	str	r1, [r7, #8]
 801a5b4:	603b      	str	r3, [r7, #0]
 801a5b6:	4613      	mov	r3, r2
 801a5b8:	71fb      	strb	r3, [r7, #7]
    rfalT4tCApduParam cAPDU;
    
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h A4h 00h 00h  02h FID    -   */      
    cAPDU.CLA      = RFAL_T4T_CLA;
 801a5ba:	2300      	movs	r3, #0
 801a5bc:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_SELECT;
 801a5be:	23a4      	movs	r3, #164	; 0xa4
 801a5c0:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = RFAL_T4T_ISO7816_P1_SELECT_BY_FILEID;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = RFAL_T4T_ISO7816_P2_SELECT_FIRST_OR_ONLY_OCCURENCE | RFAL_T4T_ISO7816_P2_SELECT_RETURN_FCI_TEMPLATE;
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = fidLen;
 801a5ca:	79fb      	ldrb	r3, [r7, #7]
 801a5cc:	753b      	strb	r3, [r7, #20]
    cAPDU.Le       = 0x00;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = true;
 801a5d2:	2301      	movs	r3, #1
 801a5d4:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	61fb      	str	r3, [r7, #28]
    
    if( fidLen > 0U )
 801a5e2:	79fb      	ldrb	r3, [r7, #7]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d006      	beq.n	801a5f6 <rfalT4TPollerComposeSelectFileV1Mapping+0x4c>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, fid, fidLen );
 801a5e8:	69bb      	ldr	r3, [r7, #24]
 801a5ea:	3303      	adds	r3, #3
 801a5ec:	79fa      	ldrb	r2, [r7, #7]
 801a5ee:	68b9      	ldr	r1, [r7, #8]
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f001 fb5d 	bl	801bcb0 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801a5f6:	f107 0310 	add.w	r3, r7, #16
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f7ff fe9e 	bl	801a33c <rfalT4TPollerComposeCAPDU>
 801a600:	4603      	mov	r3, r0
}
 801a602:	4618      	mov	r0, r3
 801a604:	3720      	adds	r7, #32
 801a606:	46bd      	mov	sp, r7
 801a608:	bd80      	pop	{r7, pc}

0801a60a <rfalT4TPollerComposeReadData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801a60a:	b580      	push	{r7, lr}
 801a60c:	b088      	sub	sp, #32
 801a60e:	af00      	add	r7, sp, #0
 801a610:	60f8      	str	r0, [r7, #12]
 801a612:	607b      	str	r3, [r7, #4]
 801a614:	460b      	mov	r3, r1
 801a616:	817b      	strh	r3, [r7, #10]
 801a618:	4613      	mov	r3, r2
 801a61a:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;
  
    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h B0h [Offset] -   -      len */     
    cAPDU.CLA      = RFAL_T4T_CLA;
 801a61c:	2300      	movs	r3, #0
 801a61e:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY;
 801a620:	23b0      	movs	r3, #176	; 0xb0
 801a622:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801a624:	897b      	ldrh	r3, [r7, #10]
 801a626:	0a1b      	lsrs	r3, r3, #8
 801a628:	b29b      	uxth	r3, r3
 801a62a:	b2db      	uxtb	r3, r3
 801a62c:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801a62e:	897b      	ldrh	r3, [r7, #10]
 801a630:	b2db      	uxtb	r3, r3
 801a632:	74fb      	strb	r3, [r7, #19]
    cAPDU.Le       = expLen;
 801a634:	7a7b      	ldrb	r3, [r7, #9]
 801a636:	75bb      	strb	r3, [r7, #22]
    cAPDU.LcFlag   = false;
 801a638:	2300      	movs	r3, #0
 801a63a:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = true;
 801a63c:	2301      	movs	r3, #1
 801a63e:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	61fb      	str	r3, [r7, #28]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801a648:	f107 0310 	add.w	r3, r7, #16
 801a64c:	4618      	mov	r0, r3
 801a64e:	f7ff fe75 	bl	801a33c <rfalT4TPollerComposeCAPDU>
 801a652:	4603      	mov	r3, r0
}
 801a654:	4618      	mov	r0, r3
 801a656:	3720      	adds	r7, #32
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}

0801a65c <rfalT4TPollerComposeReadDataODO>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeReadDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, uint8_t expLen, uint16_t *cApduLen )
{    
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b08a      	sub	sp, #40	; 0x28
 801a660:	af00      	add	r7, sp, #0
 801a662:	60f8      	str	r0, [r7, #12]
 801a664:	60b9      	str	r1, [r7, #8]
 801a666:	603b      	str	r3, [r7, #0]
 801a668:	4613      	mov	r3, r2
 801a66a:	71fb      	strb	r3, [r7, #7]
    uint8_t           dataIt;

    /* CLA INS P1  P2  Lc  Data         Le */
    /* 00h B1h 00h 00h Lc  54 03 xxyyzz len */
    /*                          [Offset]    */    
    cAPDU.CLA      = RFAL_T4T_CLA;
 801a66c:	2300      	movs	r3, #0
 801a66e:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_READBINARY_ODO;
 801a670:	23b1      	movs	r3, #177	; 0xb1
 801a672:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801a674:	2300      	movs	r3, #0
 801a676:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801a678:	2300      	movs	r3, #0
 801a67a:	75fb      	strb	r3, [r7, #23]
    cAPDU.Le       = expLen;
 801a67c:	79fb      	ldrb	r3, [r7, #7]
 801a67e:	76bb      	strb	r3, [r7, #26]
    cAPDU.LcFlag   = true;
 801a680:	2301      	movs	r3, #1
 801a682:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = true;
 801a684:	2301      	movs	r3, #1
 801a686:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	623b      	str	r3, [r7, #32]
    
    dataIt = 0U;
 801a690:	2300      	movs	r3, #0
 801a692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801a696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a69a:	1c5a      	adds	r2, r3, #1
 801a69c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a6a0:	461a      	mov	r2, r3
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	4413      	add	r3, r2
 801a6a6:	2254      	movs	r2, #84	; 0x54
 801a6a8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801a6aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6ae:	1c5a      	adds	r2, r3, #1
 801a6b0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a6b4:	461a      	mov	r2, r3
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	4413      	add	r3, r2
 801a6ba:	2203      	movs	r2, #3
 801a6bc:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801a6be:	68bb      	ldr	r3, [r7, #8]
 801a6c0:	0c1a      	lsrs	r2, r3, #16
 801a6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6c6:	1c59      	adds	r1, r3, #1
 801a6c8:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801a6cc:	4619      	mov	r1, r3
 801a6ce:	b2d2      	uxtb	r2, r2
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	440b      	add	r3, r1
 801a6d4:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801a6d6:	68bb      	ldr	r3, [r7, #8]
 801a6d8:	0a1a      	lsrs	r2, r3, #8
 801a6da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6de:	1c59      	adds	r1, r3, #1
 801a6e0:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801a6e4:	4619      	mov	r1, r3
 801a6e6:	b2d2      	uxtb	r2, r2
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	440b      	add	r3, r1
 801a6ec:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801a6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6f2:	1c5a      	adds	r2, r3, #1
 801a6f4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a6f8:	4619      	mov	r1, r3
 801a6fa:	68bb      	ldr	r3, [r7, #8]
 801a6fc:	b2da      	uxtb	r2, r3
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	440b      	add	r3, r1
 801a702:	70da      	strb	r2, [r3, #3]
    cAPDU.Lc                 = dataIt;
 801a704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a708:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801a70a:	f107 0314 	add.w	r3, r7, #20
 801a70e:	4618      	mov	r0, r3
 801a710:	f7ff fe14 	bl	801a33c <rfalT4TPollerComposeCAPDU>
 801a714:	4603      	mov	r3, r0
}
 801a716:	4618      	mov	r0, r3
 801a718:	3728      	adds	r7, #40	; 0x28
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}

0801a71e <rfalT4TPollerComposeWriteData>:


/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteData( rfalIsoDepApduBufFormat *cApduBuf, uint16_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801a71e:	b580      	push	{r7, lr}
 801a720:	b088      	sub	sp, #32
 801a722:	af00      	add	r7, sp, #0
 801a724:	60f8      	str	r0, [r7, #12]
 801a726:	607a      	str	r2, [r7, #4]
 801a728:	461a      	mov	r2, r3
 801a72a:	460b      	mov	r3, r1
 801a72c:	817b      	strh	r3, [r7, #10]
 801a72e:	4613      	mov	r3, r2
 801a730:	727b      	strb	r3, [r7, #9]
    rfalT4tCApduParam cAPDU;


    /* CLA INS P1  P2   Lc  Data   Le  */
    /* 00h D6h [Offset] len Data   -   */         
    cAPDU.CLA      = RFAL_T4T_CLA;
 801a732:	2300      	movs	r3, #0
 801a734:	743b      	strb	r3, [r7, #16]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY;
 801a736:	23d6      	movs	r3, #214	; 0xd6
 801a738:	747b      	strb	r3, [r7, #17]
    cAPDU.P1       = (uint8_t)((offset >> 8U) & 0xFFU);
 801a73a:	897b      	ldrh	r3, [r7, #10]
 801a73c:	0a1b      	lsrs	r3, r3, #8
 801a73e:	b29b      	uxth	r3, r3
 801a740:	b2db      	uxtb	r3, r3
 801a742:	74bb      	strb	r3, [r7, #18]
    cAPDU.P2       = (uint8_t)((offset >> 0U) & 0xFFU);
 801a744:	897b      	ldrh	r3, [r7, #10]
 801a746:	b2db      	uxtb	r3, r3
 801a748:	74fb      	strb	r3, [r7, #19]
    cAPDU.Lc       = dataLen;
 801a74a:	7a7b      	ldrb	r3, [r7, #9]
 801a74c:	753b      	strb	r3, [r7, #20]
    cAPDU.LcFlag   = true;
 801a74e:	2301      	movs	r3, #1
 801a750:	757b      	strb	r3, [r7, #21]
    cAPDU.LeFlag   = false;
 801a752:	2300      	movs	r3, #0
 801a754:	75fb      	strb	r3, [r7, #23]
    cAPDU.cApduBuf = cApduBuf;
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	61bb      	str	r3, [r7, #24]
    cAPDU.cApduLen = cApduLen;
 801a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a75c:	61fb      	str	r3, [r7, #28]
    
    if( dataLen > 0U )
 801a75e:	7a7b      	ldrb	r3, [r7, #9]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d006      	beq.n	801a772 <rfalT4TPollerComposeWriteData+0x54>
    {
        ST_MEMCPY( cAPDU.cApduBuf->apdu, data, dataLen );
 801a764:	69bb      	ldr	r3, [r7, #24]
 801a766:	3303      	adds	r3, #3
 801a768:	7a7a      	ldrb	r2, [r7, #9]
 801a76a:	6879      	ldr	r1, [r7, #4]
 801a76c:	4618      	mov	r0, r3
 801a76e:	f001 fa9f 	bl	801bcb0 <memcpy>
    }
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801a772:	f107 0310 	add.w	r3, r7, #16
 801a776:	4618      	mov	r0, r3
 801a778:	f7ff fde0 	bl	801a33c <rfalT4TPollerComposeCAPDU>
 801a77c:	4603      	mov	r3, r0
}
 801a77e:	4618      	mov	r0, r3
 801a780:	3720      	adds	r7, #32
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}

0801a786 <rfalT4TPollerComposeWriteDataODO>:

/*******************************************************************************/ 
ReturnCode rfalT4TPollerComposeWriteDataODO( rfalIsoDepApduBufFormat *cApduBuf, uint32_t offset, const uint8_t* data, uint8_t dataLen, uint16_t *cApduLen )
{    
 801a786:	b580      	push	{r7, lr}
 801a788:	b08a      	sub	sp, #40	; 0x28
 801a78a:	af00      	add	r7, sp, #0
 801a78c:	60f8      	str	r0, [r7, #12]
 801a78e:	60b9      	str	r1, [r7, #8]
 801a790:	607a      	str	r2, [r7, #4]
 801a792:	70fb      	strb	r3, [r7, #3]
    uint8_t           dataIt;
        
    /* CLA INS P1  P2   Lc  Data                     Le  */
    /* 00h D7h 00h 00h  len 54 03 xxyyzz 53 Ld data  -   */
    /*                           [offset]     [data]     */
    cAPDU.CLA      = RFAL_T4T_CLA;
 801a794:	2300      	movs	r3, #0
 801a796:	753b      	strb	r3, [r7, #20]
    cAPDU.INS      = (uint8_t)RFAL_T4T_INS_UPDATEBINARY_ODO;
 801a798:	23d7      	movs	r3, #215	; 0xd7
 801a79a:	757b      	strb	r3, [r7, #21]
    cAPDU.P1       = 0x00U;
 801a79c:	2300      	movs	r3, #0
 801a79e:	75bb      	strb	r3, [r7, #22]
    cAPDU.P2       = 0x00U;
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	75fb      	strb	r3, [r7, #23]
    cAPDU.LcFlag   = true;
 801a7a4:	2301      	movs	r3, #1
 801a7a6:	767b      	strb	r3, [r7, #25]
    cAPDU.LeFlag   = false;
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	76fb      	strb	r3, [r7, #27]
    cAPDU.cApduBuf = cApduBuf;
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	61fb      	str	r3, [r7, #28]
    cAPDU.cApduLen = cApduLen;
 801a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7b2:	623b      	str	r3, [r7, #32]
        
    dataIt = 0U;
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cApduBuf->apdu[dataIt++] = RFAL_T4T_OFFSET_DO;
 801a7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7be:	1c5a      	adds	r2, r3, #1
 801a7c0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a7c4:	461a      	mov	r2, r3
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	4413      	add	r3, r2
 801a7ca:	2254      	movs	r2, #84	; 0x54
 801a7cc:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_LENGTH_DO;
 801a7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7d2:	1c5a      	adds	r2, r3, #1
 801a7d4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a7d8:	461a      	mov	r2, r3
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	4413      	add	r3, r2
 801a7de:	2203      	movs	r2, #3
 801a7e0:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 16U);
 801a7e2:	68bb      	ldr	r3, [r7, #8]
 801a7e4:	0c1a      	lsrs	r2, r3, #16
 801a7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7ea:	1c59      	adds	r1, r3, #1
 801a7ec:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801a7f0:	4619      	mov	r1, r3
 801a7f2:	b2d2      	uxtb	r2, r2
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	440b      	add	r3, r1
 801a7f8:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset >> 8U);
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	0a1a      	lsrs	r2, r3, #8
 801a7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a802:	1c59      	adds	r1, r3, #1
 801a804:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 801a808:	4619      	mov	r1, r3
 801a80a:	b2d2      	uxtb	r2, r2
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	440b      	add	r3, r1
 801a810:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = (uint8_t)(offset);
 801a812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a816:	1c5a      	adds	r2, r3, #1
 801a818:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a81c:	4619      	mov	r1, r3
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	b2da      	uxtb	r2, r3
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	440b      	add	r3, r1
 801a826:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = RFAL_T4T_DATA_DO;
 801a828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a82c:	1c5a      	adds	r2, r3, #1
 801a82e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a832:	461a      	mov	r2, r3
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	4413      	add	r3, r2
 801a838:	2253      	movs	r2, #83	; 0x53
 801a83a:	70da      	strb	r2, [r3, #3]
    cApduBuf->apdu[dataIt++] = dataLen;
 801a83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a840:	1c5a      	adds	r2, r3, #1
 801a842:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 801a846:	461a      	mov	r2, r3
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	4413      	add	r3, r2
 801a84c:	78fa      	ldrb	r2, [r7, #3]
 801a84e:	70da      	strb	r2, [r3, #3]
    
    if( (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_T4T_MAX_LC) ||  (((uint32_t)dataLen + (uint32_t)dataIt) >= RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN) )
 801a850:	78fa      	ldrb	r2, [r7, #3]
 801a852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a856:	4413      	add	r3, r2
 801a858:	2bfe      	cmp	r3, #254	; 0xfe
 801a85a:	d806      	bhi.n	801a86a <rfalT4TPollerComposeWriteDataODO+0xe4>
 801a85c:	78fa      	ldrb	r2, [r7, #3]
 801a85e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a862:	4413      	add	r3, r2
 801a864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a868:	d301      	bcc.n	801a86e <rfalT4TPollerComposeWriteDataODO+0xe8>
    {
        return (ERR_NOMEM);
 801a86a:	2301      	movs	r3, #1
 801a86c:	e01b      	b.n	801a8a6 <rfalT4TPollerComposeWriteDataODO+0x120>
    }
    
    if( dataLen > 0U )
 801a86e:	78fb      	ldrb	r3, [r7, #3]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d009      	beq.n	801a888 <rfalT4TPollerComposeWriteDataODO+0x102>
    {
        ST_MEMCPY( &cAPDU.cApduBuf->apdu[dataIt], data, dataLen );
 801a874:	69fa      	ldr	r2, [r7, #28]
 801a876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a87a:	4413      	add	r3, r2
 801a87c:	3303      	adds	r3, #3
 801a87e:	78fa      	ldrb	r2, [r7, #3]
 801a880:	6879      	ldr	r1, [r7, #4]
 801a882:	4618      	mov	r0, r3
 801a884:	f001 fa14 	bl	801bcb0 <memcpy>
    }
    dataIt += dataLen;
 801a888:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a88c:	78fb      	ldrb	r3, [r7, #3]
 801a88e:	4413      	add	r3, r2
 801a890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    cAPDU.Lc = dataIt;
 801a894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a898:	763b      	strb	r3, [r7, #24]
    
    return rfalT4TPollerComposeCAPDU( &cAPDU );
 801a89a:	f107 0314 	add.w	r3, r7, #20
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7ff fd4c 	bl	801a33c <rfalT4TPollerComposeCAPDU>
 801a8a4:	4603      	mov	r3, r0
}
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	3728      	adds	r7, #40	; 0x28
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	bd80      	pop	{r7, pc}
	...

0801a8b0 <NFC06A1_LED_OFF>:
  * @brief     This function light off selected Led
  * @param[in] led : Led to be lit off
  * @return    None
  */
void NFC06A1_LED_OFF(const NFC06A1_Led_E led)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b082      	sub	sp, #8
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(NFC06A1_Led[led].NFC06A1_LED_PIN_PORT, NFC06A1_Led[led].NFC06A1_LED_PIN, GPIO_PIN_RESET);
 801a8ba:	79fb      	ldrb	r3, [r7, #7]
 801a8bc:	4a07      	ldr	r2, [pc, #28]	; (801a8dc <NFC06A1_LED_OFF+0x2c>)
 801a8be:	00db      	lsls	r3, r3, #3
 801a8c0:	4413      	add	r3, r2
 801a8c2:	6858      	ldr	r0, [r3, #4]
 801a8c4:	79fb      	ldrb	r3, [r7, #7]
 801a8c6:	4a05      	ldr	r2, [pc, #20]	; (801a8dc <NFC06A1_LED_OFF+0x2c>)
 801a8c8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	4619      	mov	r1, r3
 801a8d0:	f7e8 ff55 	bl	800377e <HAL_GPIO_WritePin>
}
 801a8d4:	bf00      	nop
 801a8d6:	3708      	adds	r7, #8
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}
 801a8dc:	2000011c 	.word	0x2000011c

0801a8e0 <NFC06A1_LED_Toggle>:
  * @brief     Toggles the selected LED
  * @param[in] led : Specifies the Led to be toggled
  * @return    None
  */
void NFC06A1_LED_Toggle(const NFC06A1_Led_E led)
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b082      	sub	sp, #8
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(NFC06A1_Led[led].NFC06A1_LED_PIN_PORT, NFC06A1_Led[led].NFC06A1_LED_PIN);
 801a8ea:	79fb      	ldrb	r3, [r7, #7]
 801a8ec:	4a07      	ldr	r2, [pc, #28]	; (801a90c <NFC06A1_LED_Toggle+0x2c>)
 801a8ee:	00db      	lsls	r3, r3, #3
 801a8f0:	4413      	add	r3, r2
 801a8f2:	685a      	ldr	r2, [r3, #4]
 801a8f4:	79fb      	ldrb	r3, [r7, #7]
 801a8f6:	4905      	ldr	r1, [pc, #20]	; (801a90c <NFC06A1_LED_Toggle+0x2c>)
 801a8f8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	4610      	mov	r0, r2
 801a900:	f7e8 ff55 	bl	80037ae <HAL_GPIO_TogglePin>
}
 801a904:	bf00      	nop
 801a906:	3708      	adds	r7, #8
 801a908:	46bd      	mov	sp, r7
 801a90a:	bd80      	pop	{r7, pc}
 801a90c:	2000011c 	.word	0x2000011c

0801a910 <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b082      	sub	sp, #8
 801a914:	af00      	add	r7, sp, #0
 801a916:	603b      	str	r3, [r7, #0]
 801a918:	4603      	mov	r3, r0
 801a91a:	71fb      	strb	r3, [r7, #7]
 801a91c:	460b      	mov	r3, r1
 801a91e:	71bb      	strb	r3, [r7, #6]
 801a920:	4613      	mov	r3, r2
 801a922:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 801a924:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801a928:	f001 f84e 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 801a92c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801a930:	f001 f894 	bl	801ba5c <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 801a934:	79fb      	ldrb	r3, [r7, #7]
 801a936:	4618      	mov	r0, r3
 801a938:	f000 fd6d 	bl	801b416 <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 801a93c:	797b      	ldrb	r3, [r7, #5]
 801a93e:	b29b      	uxth	r3, r3
 801a940:	4619      	mov	r1, r3
 801a942:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801a946:	f000 ffeb 	bl	801b920 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 801a94a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801a94e:	f001 f891 	bl	801ba74 <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 801a952:	683b      	ldr	r3, [r7, #0]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d004      	beq.n	801a962 <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 801a958:	79bb      	ldrb	r3, [r7, #6]
 801a95a:	6839      	ldr	r1, [r7, #0]
 801a95c:	4618      	mov	r0, r3
 801a95e:	f000 fc2d 	bl	801b1bc <st25r3916ReadRegister>
    }

    return ERR_NONE;
 801a962:	2300      	movs	r3, #0

}
 801a964:	4618      	mov	r0, r3
 801a966:	3708      	adds	r7, #8
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd80      	pop	{r7, pc}

0801a96c <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b082      	sub	sp, #8
 801a970:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    ReturnCode ret;

    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 801a972:	20c1      	movs	r0, #193	; 0xc1
 801a974:	f000 fd4f 	bl	801b416 <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_drv_lvl);
 801a978:	2104      	movs	r1, #4
 801a97a:	2001      	movs	r0, #1
 801a97c:	f000 fc5c 	bl	801b238 <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */

    if( !st25r3916CheckChipID( NULL ) )
 801a980:	2000      	movs	r0, #0
 801a982:	f000 fabf 	bl	801af04 <st25r3916CheckChipID>
 801a986:	4603      	mov	r3, r0
 801a988:	f083 0301 	eor.w	r3, r3, #1
 801a98c:	b2db      	uxtb	r3, r3
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d003      	beq.n	801a99a <st25r3916Initialize+0x2e>
    {
        platformErrorHandle();
 801a992:	f7e7 ffd8 	bl	8002946 <Error_Handler>
        return ERR_HW_MISMATCH;
 801a996:	2324      	movs	r3, #36	; 0x24
 801a998:	e036      	b.n	801aa08 <st25r3916Initialize+0x9c>
    }

    st25r3916InitInterrupts();
 801a99a:	f000 fef7 	bl	801b78c <st25r3916InitInterrupts>
    st25r3916ledInit();
 801a99e:	f001 f8a9 	bl	801baf4 <st25r3916ledInit>


    gST25R3916NRT_64fcs = 0;
 801a9a2:	4b1b      	ldr	r3, [pc, #108]	; (801aa10 <st25r3916Initialize+0xa4>)
 801a9a4:	2200      	movs	r2, #0
 801a9a6:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 801a9a8:	2118      	movs	r1, #24
 801a9aa:	2001      	movs	r0, #1
 801a9ac:	f000 fdcb 	bl	801b546 <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */

    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 801a9b0:	2210      	movs	r2, #16
 801a9b2:	2110      	movs	r1, #16
 801a9b4:	2004      	movs	r0, #4
 801a9b6:	f000 fe3f 	bl	801b638 <st25r3916ChangeTestRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, 0U );
    /*******************************************************************************/
#endif /* ST25R_SELFTEST */

    /* Enable Oscillator and wait until it gets stable */
    ret = st25r3916OscOn();
 801a9ba:	f000 f82b 	bl	801aa14 <st25r3916OscOn>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	80fb      	strh	r3, [r7, #6]
    if( ret != ERR_NONE )
 801a9c2:	88fb      	ldrh	r3, [r7, #6]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d003      	beq.n	801a9d0 <st25r3916Initialize+0x64>
    {
        platformErrorHandle();
 801a9c8:	f7e7 ffbd 	bl	8002946 <Error_Handler>
        return ret;
 801a9cc:	88fb      	ldrh	r3, [r7, #6]
 801a9ce:	e01b      	b.n	801aa08 <st25r3916Initialize+0x9c>
    }

    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 801a9d0:	2000      	movs	r0, #0
 801a9d2:	f000 f865 	bl	801aaa0 <st25r3916MeasureVoltage>
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	80bb      	strh	r3, [r7, #4]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 801a9da:	88bb      	ldrh	r3, [r7, #4]
 801a9dc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801a9e0:	d201      	bcs.n	801a9e6 <st25r3916Initialize+0x7a>
 801a9e2:	2380      	movs	r3, #128	; 0x80
 801a9e4:	e000      	b.n	801a9e8 <st25r3916Initialize+0x7c>
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	2180      	movs	r1, #128	; 0x80
 801a9ec:	2001      	movs	r0, #1
 801a9ee:	f000 fdd7 	bl	801b5a0 <st25r3916ChangeRegisterBits>

    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 801a9f2:	2148      	movs	r1, #72	; 0x48
 801a9f4:	2002      	movs	r0, #2
 801a9f6:	f000 fd6f 	bl	801b4d8 <st25r3916ClrRegisterBits>
    /*******************************************************************************/
#endif /* ST25R_SELFTEST_TIMER */


    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 801a9fa:	f04f 30ff 	mov.w	r0, #4294967295
 801a9fe:	f001 f839 	bl	801ba74 <st25r3916DisableInterrupts>

    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 801aa02:	f001 f843 	bl	801ba8c <st25r3916ClearInterrupts>

    return ERR_NONE;
 801aa06:	2300      	movs	r3, #0
}
 801aa08:	4618      	mov	r0, r3
 801aa0a:	3708      	adds	r7, #8
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd80      	pop	{r7, pc}
 801aa10:	20003a1c 	.word	0x20003a1c

0801aa14 <st25r3916OscOn>:
}


/*******************************************************************************/
ReturnCode st25r3916OscOn( void )
{
 801aa14:	b580      	push	{r7, lr}
 801aa16:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 801aa18:	2280      	movs	r2, #128	; 0x80
 801aa1a:	2180      	movs	r1, #128	; 0x80
 801aa1c:	2002      	movs	r0, #2
 801aa1e:	f000 fe43 	bl	801b6a8 <st25r3916CheckReg>
 801aa22:	4603      	mov	r3, r0
 801aa24:	f083 0301 	eor.w	r3, r3, #1
 801aa28:	b2db      	uxtb	r3, r3
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d010      	beq.n	801aa50 <st25r3916OscOn+0x3c>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 801aa2e:	2080      	movs	r0, #128	; 0x80
 801aa30:	f000 ffca 	bl	801b9c8 <st25r3916GetInterrupt>

        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 801aa34:	2080      	movs	r0, #128	; 0x80
 801aa36:	f001 f811 	bl	801ba5c <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 801aa3a:	2180      	movs	r1, #128	; 0x80
 801aa3c:	2002      	movs	r0, #2
 801aa3e:	f000 fd82 	bl	801b546 <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
 801aa42:	210a      	movs	r1, #10
 801aa44:	2080      	movs	r0, #128	; 0x80
 801aa46:	f000 ff6b 	bl	801b920 <st25r3916WaitForInterruptsTimed>
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 801aa4a:	2080      	movs	r0, #128	; 0x80
 801aa4c:	f001 f812 	bl	801ba74 <st25r3916DisableInterrupts>
    }

    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok ) )
 801aa50:	2210      	movs	r2, #16
 801aa52:	2110      	movs	r1, #16
 801aa54:	2031      	movs	r0, #49	; 0x31
 801aa56:	f000 fe27 	bl	801b6a8 <st25r3916CheckReg>
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	f083 0301 	eor.w	r3, r3, #1
 801aa60:	b2db      	uxtb	r3, r3
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d001      	beq.n	801aa6a <st25r3916OscOn+0x56>
    {
        return ERR_SYSTEM;
 801aa66:	2308      	movs	r3, #8
 801aa68:	e000      	b.n	801aa6c <st25r3916OscOn+0x58>
    }

    return ERR_NONE;
 801aa6a:	2300      	movs	r3, #0
}
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b084      	sub	sp, #16
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	4603      	mov	r3, r0
 801aa78:	71fb      	strb	r3, [r7, #7]
    uint8_t result;

    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 801aa7a:	79fb      	ldrb	r3, [r7, #7]
 801aa7c:	461a      	mov	r2, r3
 801aa7e:	2107      	movs	r1, #7
 801aa80:	202c      	movs	r0, #44	; 0x2c
 801aa82:	f000 fd8d 	bl	801b5a0 <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 801aa86:	f107 030f 	add.w	r3, r7, #15
 801aa8a:	2264      	movs	r2, #100	; 0x64
 801aa8c:	2125      	movs	r1, #37	; 0x25
 801aa8e:	20df      	movs	r0, #223	; 0xdf
 801aa90:	f7ff ff3e 	bl	801a910 <st25r3916ExecuteCommandAndGetResult>

    return result;
 801aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa96:	4618      	mov	r0, r3
 801aa98:	3710      	adds	r7, #16
 801aa9a:	46bd      	mov	sp, r7
 801aa9c:	bd80      	pop	{r7, pc}
	...

0801aaa0 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b084      	sub	sp, #16
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	4603      	mov	r3, r0
 801aaa8:	71fb      	strb	r3, [r7, #7]
    uint8_t result;
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 801aaaa:	79fb      	ldrb	r3, [r7, #7]
 801aaac:	4618      	mov	r0, r3
 801aaae:	f7ff ffdf 	bl	801aa70 <st25r3916MeasurePowerSupply>
 801aab2:	4603      	mov	r3, r0
 801aab4:	73fb      	strb	r3, [r7, #15]

    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 801aab6:	7bfb      	ldrb	r3, [r7, #15]
 801aab8:	b29b      	uxth	r3, r3
 801aaba:	461a      	mov	r2, r3
 801aabc:	0052      	lsls	r2, r2, #1
 801aabe:	441a      	add	r2, r3
 801aac0:	00d2      	lsls	r2, r2, #3
 801aac2:	1ad3      	subs	r3, r2, r3
 801aac4:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 801aac6:	7bfb      	ldrb	r3, [r7, #15]
 801aac8:	009b      	lsls	r3, r3, #2
 801aaca:	3305      	adds	r3, #5
 801aacc:	4a06      	ldr	r2, [pc, #24]	; (801aae8 <st25r3916MeasureVoltage+0x48>)
 801aace:	fba2 2303 	umull	r2, r3, r2, r3
 801aad2:	08db      	lsrs	r3, r3, #3
 801aad4:	b29a      	uxth	r2, r3
 801aad6:	89bb      	ldrh	r3, [r7, #12]
 801aad8:	4413      	add	r3, r2
 801aada:	81bb      	strh	r3, [r7, #12]

    return mV;
 801aadc:	89bb      	ldrh	r3, [r7, #12]
}
 801aade:	4618      	mov	r0, r3
 801aae0:	3710      	adds	r7, #16
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}
 801aae6:	bf00      	nop
 801aae8:	cccccccd 	.word	0xcccccccd

0801aaec <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b084      	sub	sp, #16
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 801aaf4:	2180      	movs	r1, #128	; 0x80
 801aaf6:	202c      	movs	r0, #44	; 0x2c
 801aaf8:	f000 fd25 	bl	801b546 <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 801aafc:	2180      	movs	r1, #128	; 0x80
 801aafe:	202c      	movs	r0, #44	; 0x2c
 801ab00:	f000 fcea 	bl	801b4d8 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 801ab04:	f107 030f 	add.w	r3, r7, #15
 801ab08:	2206      	movs	r2, #6
 801ab0a:	216c      	movs	r1, #108	; 0x6c
 801ab0c:	20d6      	movs	r0, #214	; 0xd6
 801ab0e:	f7ff feff 	bl	801a910 <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 801ab12:	7bfb      	ldrb	r3, [r7, #15]
 801ab14:	091b      	lsrs	r3, r3, #4
 801ab16:	b2db      	uxtb	r3, r3
 801ab18:	73fb      	strb	r3, [r7, #15]

    if( result_mV != NULL )
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d02b      	beq.n	801ab78 <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 801ab20:	2280      	movs	r2, #128	; 0x80
 801ab22:	2180      	movs	r1, #128	; 0x80
 801ab24:	2001      	movs	r0, #1
 801ab26:	f000 fdbf 	bl	801b6a8 <st25r3916CheckReg>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d00d      	beq.n	801ab4c <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 801ab30:	7bfb      	ldrb	r3, [r7, #15]
 801ab32:	2b04      	cmp	r3, #4
 801ab34:	d903      	bls.n	801ab3e <st25r3916AdjustRegulators+0x52>
 801ab36:	7bfb      	ldrb	r3, [r7, #15]
 801ab38:	3b05      	subs	r3, #5
 801ab3a:	b2db      	uxtb	r3, r3
 801ab3c:	e000      	b.n	801ab40 <st25r3916AdjustRegulators+0x54>
 801ab3e:	7bfb      	ldrb	r3, [r7, #15]
 801ab40:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	f44f 6216 	mov.w	r2, #2400	; 0x960
 801ab48:	801a      	strh	r2, [r3, #0]
 801ab4a:	e003      	b.n	801ab54 <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801ab52:	801a      	strh	r2, [r3, #0]
        }

        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	881a      	ldrh	r2, [r3, #0]
 801ab58:	7bfb      	ldrb	r3, [r7, #15]
 801ab5a:	b29b      	uxth	r3, r3
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	0089      	lsls	r1, r1, #2
 801ab60:	440b      	add	r3, r1
 801ab62:	4619      	mov	r1, r3
 801ab64:	0088      	lsls	r0, r1, #2
 801ab66:	4619      	mov	r1, r3
 801ab68:	4603      	mov	r3, r0
 801ab6a:	440b      	add	r3, r1
 801ab6c:	009b      	lsls	r3, r3, #2
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	4413      	add	r3, r2
 801ab72:	b29a      	uxth	r2, r3
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 801ab78:	2300      	movs	r3, #0
}
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	3710      	adds	r7, #16
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	bd80      	pop	{r7, pc}

0801ab82 <st25r3916MeasureAmplitude>:


/*******************************************************************************/
ReturnCode st25r3916MeasureAmplitude( uint8_t* result )
{
 801ab82:	b580      	push	{r7, lr}
 801ab84:	b082      	sub	sp, #8
 801ab86:	af00      	add	r7, sp, #0
 801ab88:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_AMPLITUDE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_AMPLITUDE, result );
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	220a      	movs	r2, #10
 801ab8e:	2125      	movs	r1, #37	; 0x25
 801ab90:	20d3      	movs	r0, #211	; 0xd3
 801ab92:	f7ff febd 	bl	801a910 <st25r3916ExecuteCommandAndGetResult>
 801ab96:	4603      	mov	r3, r0
}
 801ab98:	4618      	mov	r0, r3
 801ab9a:	3708      	adds	r7, #8
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}

0801aba0 <st25r3916MeasurePhase>:


/*******************************************************************************/
ReturnCode st25r3916MeasurePhase( uint8_t* result )
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b082      	sub	sp, #8
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_PHASE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_PHASE, result );
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	220a      	movs	r2, #10
 801abac:	2125      	movs	r1, #37	; 0x25
 801abae:	20d9      	movs	r0, #217	; 0xd9
 801abb0:	f7ff feae 	bl	801a910 <st25r3916ExecuteCommandAndGetResult>
 801abb4:	4603      	mov	r3, r0
}
 801abb6:	4618      	mov	r0, r3
 801abb8:	3708      	adds	r7, #8
 801abba:	46bd      	mov	sp, r7
 801abbc:	bd80      	pop	{r7, pc}

0801abbe <st25r3916MeasureCapacitance>:


/*******************************************************************************/
ReturnCode st25r3916MeasureCapacitance( uint8_t* result )
{
 801abbe:	b580      	push	{r7, lr}
 801abc0:	b082      	sub	sp, #8
 801abc2:	af00      	add	r7, sp, #0
 801abc4:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_CAPACITANCE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_CAPACITANCE, result );
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	220a      	movs	r2, #10
 801abca:	2125      	movs	r1, #37	; 0x25
 801abcc:	20de      	movs	r0, #222	; 0xde
 801abce:	f7ff fe9f 	bl	801a910 <st25r3916ExecuteCommandAndGetResult>
 801abd2:	4603      	mov	r3, r0
}
 801abd4:	4618      	mov	r0, r3
 801abd6:	3708      	adds	r7, #8
 801abd8:	46bd      	mov	sp, r7
 801abda:	bd80      	pop	{r7, pc}

0801abdc <st25r3916CalibrateCapacitiveSensor>:


/*******************************************************************************/
ReturnCode st25r3916CalibrateCapacitiveSensor( uint8_t* result )
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b084      	sub	sp, #16
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;

    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 801abe4:	21f8      	movs	r1, #248	; 0xf8
 801abe6:	202f      	movs	r0, #47	; 0x2f
 801abe8:	f000 fc76 	bl	801b4d8 <st25r3916ClrRegisterBits>

    /* Execute automatic calibration */
    ret = st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_CALIBRATE_C_SENSOR, ST25R3916_REG_CAP_SENSOR_RESULT, ST25R3916_TOUT_CALIBRATE_CAP_SENSOR, &res );
 801abec:	f107 030d 	add.w	r3, r7, #13
 801abf0:	2204      	movs	r2, #4
 801abf2:	2130      	movs	r1, #48	; 0x30
 801abf4:	20dd      	movs	r0, #221	; 0xdd
 801abf6:	f7ff fe8b 	bl	801a910 <st25r3916ExecuteCommandAndGetResult>
 801abfa:	4603      	mov	r3, r0
 801abfc:	81fb      	strh	r3, [r7, #14]

    /* Check wether the calibration was successull */
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 801abfe:	7b7b      	ldrb	r3, [r7, #13]
 801ac00:	f003 0304 	and.w	r3, r3, #4
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d007      	beq.n	801ac18 <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 801ac08:	7b7b      	ldrb	r3, [r7, #13]
 801ac0a:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d102      	bne.n	801ac18 <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 801ac12:	89fb      	ldrh	r3, [r7, #14]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d001      	beq.n	801ac1c <st25r3916CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 801ac18:	2303      	movs	r3, #3
 801ac1a:	e008      	b.n	801ac2e <st25r3916CalibrateCapacitiveSensor+0x52>
    }

    if( result != NULL )
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d004      	beq.n	801ac2c <st25r3916CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_shift);
 801ac22:	7b7b      	ldrb	r3, [r7, #13]
 801ac24:	08db      	lsrs	r3, r3, #3
 801ac26:	b2da      	uxtb	r2, r3
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	701a      	strb	r2, [r3, #0]
    }

    return ERR_NONE;
 801ac2c:	2300      	movs	r3, #0
}
 801ac2e:	4618      	mov	r0, r3
 801ac30:	3710      	adds	r7, #16
 801ac32:	46bd      	mov	sp, r7
 801ac34:	bd80      	pop	{r7, pc}

0801ac36 <st25r3916SetBitrate>:


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 801ac36:	b580      	push	{r7, lr}
 801ac38:	b084      	sub	sp, #16
 801ac3a:	af00      	add	r7, sp, #0
 801ac3c:	4603      	mov	r3, r0
 801ac3e:	460a      	mov	r2, r1
 801ac40:	71fb      	strb	r3, [r7, #7]
 801ac42:	4613      	mov	r3, r2
 801ac44:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 801ac46:	f107 030f 	add.w	r3, r7, #15
 801ac4a:	4619      	mov	r1, r3
 801ac4c:	2004      	movs	r0, #4
 801ac4e:	f000 fab5 	bl	801b1bc <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 801ac52:	79bb      	ldrb	r3, [r7, #6]
 801ac54:	2bff      	cmp	r3, #255	; 0xff
 801ac56:	d00e      	beq.n	801ac76 <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 801ac58:	79bb      	ldrb	r3, [r7, #6]
 801ac5a:	2b03      	cmp	r3, #3
 801ac5c:	d901      	bls.n	801ac62 <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 801ac5e:	2307      	movs	r3, #7
 801ac60:	e025      	b.n	801acae <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 801ac62:	7bfb      	ldrb	r3, [r7, #15]
 801ac64:	f023 0303 	bic.w	r3, r3, #3
 801ac68:	b2db      	uxtb	r3, r3
 801ac6a:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 801ac6c:	7bfa      	ldrb	r2, [r7, #15]
 801ac6e:	79bb      	ldrb	r3, [r7, #6]
 801ac70:	4313      	orrs	r3, r2
 801ac72:	b2db      	uxtb	r3, r3
 801ac74:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 801ac76:	79fb      	ldrb	r3, [r7, #7]
 801ac78:	2bff      	cmp	r3, #255	; 0xff
 801ac7a:	d012      	beq.n	801aca2 <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 801ac7c:	79fb      	ldrb	r3, [r7, #7]
 801ac7e:	2b07      	cmp	r3, #7
 801ac80:	d901      	bls.n	801ac86 <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 801ac82:	2307      	movs	r3, #7
 801ac84:	e013      	b.n	801acae <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 801ac86:	7bfb      	ldrb	r3, [r7, #15]
 801ac88:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801ac8c:	b2db      	uxtb	r3, r3
 801ac8e:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 801ac90:	79fb      	ldrb	r3, [r7, #7]
 801ac92:	011b      	lsls	r3, r3, #4
 801ac94:	b25a      	sxtb	r2, r3
 801ac96:	7bfb      	ldrb	r3, [r7, #15]
 801ac98:	b25b      	sxtb	r3, r3
 801ac9a:	4313      	orrs	r3, r2
 801ac9c:	b25b      	sxtb	r3, r3
 801ac9e:	b2db      	uxtb	r3, r3
 801aca0:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );
 801aca2:	7bfb      	ldrb	r3, [r7, #15]
 801aca4:	4619      	mov	r1, r3
 801aca6:	2004      	movs	r0, #4
 801aca8:	f000 fac6 	bl	801b238 <st25r3916WriteRegister>
 801acac:	4603      	mov	r3, r0
}
 801acae:	4618      	mov	r0, r3
 801acb0:	3710      	adds	r7, #16
 801acb2:	46bd      	mov	sp, r7
 801acb4:	bd80      	pop	{r7, pc}
	...

0801acb8 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 801acb8:	b590      	push	{r4, r7, lr}
 801acba:	b085      	sub	sp, #20
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	4604      	mov	r4, r0
 801acc0:	4608      	mov	r0, r1
 801acc2:	4611      	mov	r1, r2
 801acc4:	461a      	mov	r2, r3
 801acc6:	4623      	mov	r3, r4
 801acc8:	71fb      	strb	r3, [r7, #7]
 801acca:	4603      	mov	r3, r0
 801accc:	71bb      	strb	r3, [r7, #6]
 801acce:	460b      	mov	r3, r1
 801acd0:	717b      	strb	r3, [r7, #5]
 801acd2:	4613      	mov	r3, r2
 801acd4:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;

    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 801acd6:	79fb      	ldrb	r3, [r7, #7]
 801acd8:	2bc8      	cmp	r3, #200	; 0xc8
 801acda:	d004      	beq.n	801ace6 <st25r3916PerformCollisionAvoidance+0x2e>
 801acdc:	79fb      	ldrb	r3, [r7, #7]
 801acde:	2bc9      	cmp	r3, #201	; 0xc9
 801ace0:	d001      	beq.n	801ace6 <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 801ace2:	2307      	movs	r3, #7
 801ace4:	e05d      	b.n	801ada2 <st25r3916PerformCollisionAvoidance+0xea>
    }

    err = ERR_INTERNAL;
 801ace6:	230c      	movs	r3, #12
 801ace8:	81bb      	strh	r3, [r7, #12]


    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 801acea:	79bb      	ldrb	r3, [r7, #6]
 801acec:	2bff      	cmp	r3, #255	; 0xff
 801acee:	d102      	bne.n	801acf6 <st25r3916PerformCollisionAvoidance+0x3e>
 801acf0:	797b      	ldrb	r3, [r7, #5]
 801acf2:	2bff      	cmp	r3, #255	; 0xff
 801acf4:	d01e      	beq.n	801ad34 <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 801acf6:	2300      	movs	r3, #0
 801acf8:	73fb      	strb	r3, [r7, #15]

        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 801acfa:	79bb      	ldrb	r3, [r7, #6]
 801acfc:	2bff      	cmp	r3, #255	; 0xff
 801acfe:	d003      	beq.n	801ad08 <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 801ad00:	7bfb      	ldrb	r3, [r7, #15]
 801ad02:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801ad06:	73fb      	strb	r3, [r7, #15]
        }

        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 801ad08:	797b      	ldrb	r3, [r7, #5]
 801ad0a:	2bff      	cmp	r3, #255	; 0xff
 801ad0c:	d003      	beq.n	801ad16 <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 801ad0e:	7bfb      	ldrb	r3, [r7, #15]
 801ad10:	f043 030f 	orr.w	r3, r3, #15
 801ad14:	73fb      	strb	r3, [r7, #15]
        }

        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 801ad16:	79bb      	ldrb	r3, [r7, #6]
 801ad18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ad1c:	b2da      	uxtb	r2, r3
 801ad1e:	797b      	ldrb	r3, [r7, #5]
 801ad20:	f003 030f 	and.w	r3, r3, #15
 801ad24:	b2db      	uxtb	r3, r3
 801ad26:	4313      	orrs	r3, r2
 801ad28:	b2da      	uxtb	r2, r3
 801ad2a:	7bfb      	ldrb	r3, [r7, #15]
 801ad2c:	4619      	mov	r1, r3
 801ad2e:	202a      	movs	r0, #42	; 0x2a
 801ad30:	f000 fc36 	bl	801b5a0 <st25r3916ChangeRegisterBits>
    }

    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 801ad34:	793b      	ldrb	r3, [r7, #4]
 801ad36:	461a      	mov	r2, r3
 801ad38:	2103      	movs	r1, #3
 801ad3a:	200a      	movs	r0, #10
 801ad3c:	f000 fc30 	bl	801b5a0 <st25r3916ChangeRegisterBits>

    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 801ad40:	481a      	ldr	r0, [pc, #104]	; (801adac <st25r3916PerformCollisionAvoidance+0xf4>)
 801ad42:	f000 fe41 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 801ad46:	4819      	ldr	r0, [pc, #100]	; (801adac <st25r3916PerformCollisionAvoidance+0xf4>)
 801ad48:	f000 fe88 	bl	801ba5c <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( FieldONCmd );
 801ad4c:	79fb      	ldrb	r3, [r7, #7]
 801ad4e:	4618      	mov	r0, r3
 801ad50:	f000 fb61 	bl	801b416 <st25r3916ExecuteCommand>

    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's
     * field is now on, or a CAC indicating a collision */
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );
 801ad54:	210a      	movs	r1, #10
 801ad56:	4816      	ldr	r0, [pc, #88]	; (801adb0 <st25r3916PerformCollisionAvoidance+0xf8>)
 801ad58:	f000 fde2 	bl	801b920 <st25r3916WaitForInterruptsTimed>
 801ad5c:	60b8      	str	r0, [r7, #8]

    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 801ad5e:	68bb      	ldr	r3, [r7, #8]
 801ad60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d002      	beq.n	801ad6e <st25r3916PerformCollisionAvoidance+0xb6>
    {
        err = ERR_RF_COLLISION;
 801ad68:	231d      	movs	r3, #29
 801ad6a:	81bb      	strh	r3, [r7, #12]
 801ad6c:	e011      	b.n	801ad92 <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d00c      	beq.n	801ad92 <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );
 801ad78:	210a      	movs	r1, #10
 801ad7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ad7e:	f000 fdcf 	bl	801b920 <st25r3916WaitForInterruptsTimed>
 801ad82:	60b8      	str	r0, [r7, #8]

        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 801ad84:	68bb      	ldr	r3, [r7, #8]
 801ad86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d001      	beq.n	801ad92 <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 801ad8e:	2300      	movs	r3, #0
 801ad90:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 801ad92:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801ad96:	f000 fe17 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 801ad9a:	4804      	ldr	r0, [pc, #16]	; (801adac <st25r3916PerformCollisionAvoidance+0xf4>)
 801ad9c:	f000 fe6a 	bl	801ba74 <st25r3916DisableInterrupts>

    return err;
 801ada0:	89bb      	ldrh	r3, [r7, #12]
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	3714      	adds	r7, #20
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd90      	pop	{r4, r7, pc}
 801adaa:	bf00      	nop
 801adac:	20000600 	.word	0x20000600
 801adb0:	20000400 	.word	0x20000400

0801adb4 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b082      	sub	sp, #8
 801adb8:	af00      	add	r7, sp, #0
 801adba:	4603      	mov	r3, r0
 801adbc:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 801adbe:	88fb      	ldrh	r3, [r7, #6]
 801adc0:	b2db      	uxtb	r3, r3
 801adc2:	4619      	mov	r1, r3
 801adc4:	2023      	movs	r0, #35	; 0x23
 801adc6:	f000 fa37 	bl	801b238 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 801adca:	88fb      	ldrh	r3, [r7, #6]
 801adcc:	0a1b      	lsrs	r3, r3, #8
 801adce:	b29b      	uxth	r3, r3
 801add0:	b2db      	uxtb	r3, r3
 801add2:	4619      	mov	r1, r3
 801add4:	2022      	movs	r0, #34	; 0x22
 801add6:	f000 fa2f 	bl	801b238 <st25r3916WriteRegister>
}
 801adda:	bf00      	nop
 801addc:	3708      	adds	r7, #8
 801adde:	46bd      	mov	sp, r7
 801ade0:	bd80      	pop	{r7, pc}

0801ade2 <st25r3916GetNumFIFOBytes>:


/*******************************************************************************/
uint16_t st25r3916GetNumFIFOBytes( void )
{
 801ade2:	b580      	push	{r7, lr}
 801ade4:	b082      	sub	sp, #8
 801ade6:	af00      	add	r7, sp, #0
    uint8_t  reg;
    uint16_t result;


    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS2, &reg );
 801ade8:	1d7b      	adds	r3, r7, #5
 801adea:	4619      	mov	r1, r3
 801adec:	201f      	movs	r0, #31
 801adee:	f000 f9e5 	bl	801b1bc <st25r3916ReadRegister>
    reg    = ((reg & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift);
 801adf2:	797b      	ldrb	r3, [r7, #5]
 801adf4:	099b      	lsrs	r3, r3, #6
 801adf6:	b2db      	uxtb	r3, r3
 801adf8:	717b      	strb	r3, [r7, #5]
    result = ((uint16_t)reg << 8);
 801adfa:	797b      	ldrb	r3, [r7, #5]
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	021b      	lsls	r3, r3, #8
 801ae00:	80fb      	strh	r3, [r7, #6]

    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS1, &reg );
 801ae02:	1d7b      	adds	r3, r7, #5
 801ae04:	4619      	mov	r1, r3
 801ae06:	201e      	movs	r0, #30
 801ae08:	f000 f9d8 	bl	801b1bc <st25r3916ReadRegister>
    result |= (((uint16_t)reg) & 0x00FFU);
 801ae0c:	797b      	ldrb	r3, [r7, #5]
 801ae0e:	b29a      	uxth	r2, r3
 801ae10:	88fb      	ldrh	r3, [r7, #6]
 801ae12:	4313      	orrs	r3, r2
 801ae14:	80fb      	strh	r3, [r7, #6]

    return result;
 801ae16:	88fb      	ldrh	r3, [r7, #6]
}
 801ae18:	4618      	mov	r0, r3
 801ae1a:	3708      	adds	r7, #8
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd80      	pop	{r7, pc}

0801ae20 <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b084      	sub	sp, #16
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	81fb      	strh	r3, [r7, #14]

    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 801ae30:	4a19      	ldr	r2, [pc, #100]	; (801ae98 <st25r3916SetNoResponseTime+0x78>)
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 801ae36:	2300      	movs	r3, #0
 801ae38:	737b      	strb	r3, [r7, #13]


    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ae40:	d312      	bcc.n	801ae68 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 801ae42:	2301      	movs	r3, #1
 801ae44:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 801ae46:	68bb      	ldr	r3, [r7, #8]
 801ae48:	333f      	adds	r3, #63	; 0x3f
 801ae4a:	099b      	lsrs	r3, r3, #6
 801ae4c:	60bb      	str	r3, [r7, #8]

        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ae54:	d304      	bcc.n	801ae60 <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 801ae56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae5a:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 801ae5c:	2307      	movs	r3, #7
 801ae5e:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 801ae60:	68bb      	ldr	r3, [r7, #8]
 801ae62:	019b      	lsls	r3, r3, #6
 801ae64:	4a0c      	ldr	r2, [pc, #48]	; (801ae98 <st25r3916SetNoResponseTime+0x78>)
 801ae66:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 801ae68:	7b7b      	ldrb	r3, [r7, #13]
 801ae6a:	461a      	mov	r2, r3
 801ae6c:	2101      	movs	r1, #1
 801ae6e:	2012      	movs	r0, #18
 801ae70:	f000 fb96 	bl	801b5a0 <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 801ae74:	68bb      	ldr	r3, [r7, #8]
 801ae76:	0a1b      	lsrs	r3, r3, #8
 801ae78:	b2db      	uxtb	r3, r3
 801ae7a:	4619      	mov	r1, r3
 801ae7c:	2010      	movs	r0, #16
 801ae7e:	f000 f9db 	bl	801b238 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 801ae82:	68bb      	ldr	r3, [r7, #8]
 801ae84:	b2db      	uxtb	r3, r3
 801ae86:	4619      	mov	r1, r3
 801ae88:	2011      	movs	r0, #17
 801ae8a:	f000 f9d5 	bl	801b238 <st25r3916WriteRegister>

    return err;
 801ae8e:	89fb      	ldrh	r3, [r7, #14]
}
 801ae90:	4618      	mov	r0, r3
 801ae92:	3710      	adds	r7, #16
 801ae94:	46bd      	mov	sp, r7
 801ae96:	bd80      	pop	{r7, pc}
 801ae98:	20003a1c 	.word	0x20003a1c

0801ae9c <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b082      	sub	sp, #8
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	4603      	mov	r3, r0
 801aea4:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 801aea6:	88fb      	ldrh	r3, [r7, #6]
 801aea8:	0a1b      	lsrs	r3, r3, #8
 801aeaa:	b29b      	uxth	r3, r3
 801aeac:	b2db      	uxtb	r3, r3
 801aeae:	4619      	mov	r1, r3
 801aeb0:	2013      	movs	r0, #19
 801aeb2:	f000 f9c1 	bl	801b238 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 801aeb6:	88fb      	ldrh	r3, [r7, #6]
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	4619      	mov	r1, r3
 801aebc:	2014      	movs	r0, #20
 801aebe:	f000 f9bb 	bl	801b238 <st25r3916WriteRegister>
}
 801aec2:	bf00      	nop
 801aec4:	3708      	adds	r7, #8
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}

0801aeca <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 801aeca:	b580      	push	{r7, lr}
 801aecc:	b082      	sub	sp, #8
 801aece:	af00      	add	r7, sp, #0
 801aed0:	4603      	mov	r3, r0
 801aed2:	460a      	mov	r2, r1
 801aed4:	80fb      	strh	r3, [r7, #6]
 801aed6:	4613      	mov	r3, r2
 801aed8:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 801aeda:	88fb      	ldrh	r3, [r7, #6]
 801aedc:	4618      	mov	r0, r3
 801aede:	f7ff ffdd 	bl	801ae9c <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 801aee2:	797b      	ldrb	r3, [r7, #5]
 801aee4:	461a      	mov	r2, r3
 801aee6:	21e0      	movs	r1, #224	; 0xe0
 801aee8:	2012      	movs	r0, #18
 801aeea:	f000 fb59 	bl	801b5a0 <st25r3916ChangeRegisterBits>

    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 801aeee:	797b      	ldrb	r3, [r7, #5]
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d102      	bne.n	801aefa <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 801aef4:	20e0      	movs	r0, #224	; 0xe0
 801aef6:	f000 fa8e 	bl	801b416 <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 801aefa:	2300      	movs	r3, #0
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3708      	adds	r7, #8
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}

0801af04 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b084      	sub	sp, #16
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
    uint8_t ID;

    ID = 0;
 801af0c:	2300      	movs	r3, #0
 801af0e:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 801af10:	f107 030f 	add.w	r3, r7, #15
 801af14:	4619      	mov	r1, r3
 801af16:	203f      	movs	r0, #63	; 0x3f
 801af18:	f000 f950 	bl	801b1bc <st25r3916ReadRegister>

    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 801af1c:	7bfb      	ldrb	r3, [r7, #15]
 801af1e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801af22:	2b28      	cmp	r3, #40	; 0x28
 801af24:	d001      	beq.n	801af2a <st25r3916CheckChipID+0x26>
    {
        return false;
 801af26:	2300      	movs	r3, #0
 801af28:	e00e      	b.n	801af48 <st25r3916CheckChipID+0x44>
    }

    if(rev != NULL)
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d005      	beq.n	801af3c <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 801af30:	7bfb      	ldrb	r3, [r7, #15]
 801af32:	f003 0307 	and.w	r3, r3, #7
 801af36:	b2da      	uxtb	r2, r3
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	701a      	strb	r2, [r3, #0]
    }
    printf("str253916 ID [0x%02x]\r\n",ID);
 801af3c:	7bfb      	ldrb	r3, [r7, #15]
 801af3e:	4619      	mov	r1, r3
 801af40:	4803      	ldr	r0, [pc, #12]	; (801af50 <st25r3916CheckChipID+0x4c>)
 801af42:	f000 fee5 	bl	801bd10 <iprintf>
    return true;
 801af46:	2301      	movs	r3, #1
}
 801af48:	4618      	mov	r0, r3
 801af4a:	3710      	adds	r7, #16
 801af4c:	46bd      	mov	sp, r7
 801af4e:	bd80      	pop	{r7, pc}
 801af50:	0801e178 	.word	0x0801e178

0801af54 <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 801af5c:	2300      	movs	r3, #0
 801af5e:	73fb      	strb	r3, [r7, #15]

    if( config->useBPSK != 0U )
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d016      	beq.n	801af96 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 801af68:	2378      	movs	r3, #120	; 0x78
 801af6a:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	785b      	ldrb	r3, [r3, #1]
 801af70:	2b01      	cmp	r3, #1
 801af72:	d903      	bls.n	801af7c <st25r3916StreamConfigure+0x28>
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	785b      	ldrb	r3, [r3, #1]
 801af78:	2b04      	cmp	r3, #4
 801af7a:	d901      	bls.n	801af80 <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 801af7c:	2307      	movs	r3, #7
 801af7e:	e053      	b.n	801b028 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	785b      	ldrb	r3, [r3, #1]
 801af84:	f1c3 0304 	rsb	r3, r3, #4
 801af88:	b2db      	uxtb	r3, r3
 801af8a:	015b      	lsls	r3, r3, #5
 801af8c:	b2da      	uxtb	r2, r3
 801af8e:	7bfb      	ldrb	r3, [r7, #15]
 801af90:	4313      	orrs	r3, r2
 801af92:	73fb      	strb	r3, [r7, #15]
 801af94:	e01b      	b.n	801afce <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 801af96:	2370      	movs	r3, #112	; 0x70
 801af98:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	785b      	ldrb	r3, [r3, #1]
 801af9e:	2b02      	cmp	r3, #2
 801afa0:	d903      	bls.n	801afaa <st25r3916StreamConfigure+0x56>
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	785b      	ldrb	r3, [r3, #1]
 801afa6:	2b06      	cmp	r3, #6
 801afa8:	d901      	bls.n	801afae <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 801afaa:	2307      	movs	r3, #7
 801afac:	e03c      	b.n	801b028 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	785b      	ldrb	r3, [r3, #1]
 801afb2:	f1c3 0306 	rsb	r3, r3, #6
 801afb6:	b2db      	uxtb	r3, r3
 801afb8:	015b      	lsls	r3, r3, #5
 801afba:	b2da      	uxtb	r2, r3
 801afbc:	7bfb      	ldrb	r3, [r7, #15]
 801afbe:	4313      	orrs	r3, r2
 801afc0:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	78db      	ldrb	r3, [r3, #3]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d101      	bne.n	801afce <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 801afca:	2307      	movs	r3, #7
 801afcc:	e02c      	b.n	801b028 <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	789b      	ldrb	r3, [r3, #2]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d003      	beq.n	801afde <st25r3916StreamConfigure+0x8a>
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	789b      	ldrb	r3, [r3, #2]
 801afda:	2b07      	cmp	r3, #7
 801afdc:	d901      	bls.n	801afe2 <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 801afde:	2307      	movs	r3, #7
 801afe0:	e022      	b.n	801b028 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	789b      	ldrb	r3, [r3, #2]
 801afe6:	f1c3 0307 	rsb	r3, r3, #7
 801afea:	b2da      	uxtb	r2, r3
 801afec:	7bfb      	ldrb	r3, [r7, #15]
 801afee:	4313      	orrs	r3, r2
 801aff0:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	78db      	ldrb	r3, [r3, #3]
 801aff6:	2b03      	cmp	r3, #3
 801aff8:	d901      	bls.n	801affe <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 801affa:	2307      	movs	r3, #7
 801affc:	e014      	b.n	801b028 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	78db      	ldrb	r3, [r3, #3]
 801b002:	00db      	lsls	r3, r3, #3
 801b004:	b25a      	sxtb	r2, r3
 801b006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b00a:	4313      	orrs	r3, r2
 801b00c:	b25b      	sxtb	r3, r3
 801b00e:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 801b010:	7bfb      	ldrb	r3, [r7, #15]
 801b012:	4619      	mov	r1, r3
 801b014:	2009      	movs	r0, #9
 801b016:	f000 f90f 	bl	801b238 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 801b01a:	7bbb      	ldrb	r3, [r7, #14]
 801b01c:	461a      	mov	r2, r3
 801b01e:	2178      	movs	r1, #120	; 0x78
 801b020:	2003      	movs	r0, #3
 801b022:	f000 fabd 	bl	801b5a0 <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 801b026:	2300      	movs	r3, #0
}
 801b028:	4618      	mov	r0, r3
 801b02a:	3710      	adds	r7, #16
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bd80      	pop	{r7, pc}

0801b030 <__NVIC_EnableIRQ>:
{
 801b030:	b480      	push	{r7}
 801b032:	b083      	sub	sp, #12
 801b034:	af00      	add	r7, sp, #0
 801b036:	4603      	mov	r3, r0
 801b038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b03e:	2b00      	cmp	r3, #0
 801b040:	db0b      	blt.n	801b05a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b042:	79fb      	ldrb	r3, [r7, #7]
 801b044:	f003 021f 	and.w	r2, r3, #31
 801b048:	4906      	ldr	r1, [pc, #24]	; (801b064 <__NVIC_EnableIRQ+0x34>)
 801b04a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b04e:	095b      	lsrs	r3, r3, #5
 801b050:	2001      	movs	r0, #1
 801b052:	fa00 f202 	lsl.w	r2, r0, r2
 801b056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b05a:	bf00      	nop
 801b05c:	370c      	adds	r7, #12
 801b05e:	46bd      	mov	sp, r7
 801b060:	bc80      	pop	{r7}
 801b062:	4770      	bx	lr
 801b064:	e000e100 	.word	0xe000e100

0801b068 <__NVIC_DisableIRQ>:
{
 801b068:	b480      	push	{r7}
 801b06a:	b083      	sub	sp, #12
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	4603      	mov	r3, r0
 801b070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b076:	2b00      	cmp	r3, #0
 801b078:	db12      	blt.n	801b0a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b07a:	79fb      	ldrb	r3, [r7, #7]
 801b07c:	f003 021f 	and.w	r2, r3, #31
 801b080:	490a      	ldr	r1, [pc, #40]	; (801b0ac <__NVIC_DisableIRQ+0x44>)
 801b082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b086:	095b      	lsrs	r3, r3, #5
 801b088:	2001      	movs	r0, #1
 801b08a:	fa00 f202 	lsl.w	r2, r0, r2
 801b08e:	3320      	adds	r3, #32
 801b090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801b094:	f3bf 8f4f 	dsb	sy
}
 801b098:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b09a:	f3bf 8f6f 	isb	sy
}
 801b09e:	bf00      	nop
}
 801b0a0:	bf00      	nop
 801b0a2:	370c      	adds	r7, #12
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bc80      	pop	{r7}
 801b0a8:	4770      	bx	lr
 801b0aa:	bf00      	nop
 801b0ac:	e000e100 	.word	0xe000e100

0801b0b0 <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25RComm();
 801b0b4:	4b0c      	ldr	r3, [pc, #48]	; (801b0e8 <st25r3916comStart+0x38>)
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	3301      	adds	r3, #1
 801b0ba:	b2da      	uxtb	r2, r3
 801b0bc:	4b0a      	ldr	r3, [pc, #40]	; (801b0e8 <st25r3916comStart+0x38>)
 801b0be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801b0c0:	f3bf 8f4f 	dsb	sy
}
 801b0c4:	bf00      	nop
 801b0c6:	200a      	movs	r0, #10
 801b0c8:	f7ff ffce 	bl	801b068 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801b0cc:	f3bf 8f4f 	dsb	sy
}
 801b0d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b0d2:	f3bf 8f6f 	isb	sy
}
 801b0d6:	bf00      	nop
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 801b0d8:	2200      	movs	r2, #0
 801b0da:	2110      	movs	r1, #16
 801b0dc:	4803      	ldr	r0, [pc, #12]	; (801b0ec <st25r3916comStart+0x3c>)
 801b0de:	f7e8 fb4e 	bl	800377e <HAL_GPIO_WritePin>
        comBufIt = 0;                                  /* reset local buffer position   */
    #endif /* ST25R_COM_SINGLETXRX */

#endif /* RFAL_USE_I2C */

}
 801b0e2:	bf00      	nop
 801b0e4:	bd80      	pop	{r7, pc}
 801b0e6:	bf00      	nop
 801b0e8:	20002950 	.word	0x20002950
 801b0ec:	40010800 	.word	0x40010800

0801b0f0 <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 801b0f4:	2201      	movs	r2, #1
 801b0f6:	2110      	movs	r1, #16
 801b0f8:	4808      	ldr	r0, [pc, #32]	; (801b11c <st25r3916comStop+0x2c>)
 801b0fa:	f7e8 fb40 	bl	800377e <HAL_GPIO_WritePin>
#endif /* RFAL_USE_I2C */

    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25RComm();
 801b0fe:	4b08      	ldr	r3, [pc, #32]	; (801b120 <st25r3916comStop+0x30>)
 801b100:	781b      	ldrb	r3, [r3, #0]
 801b102:	3b01      	subs	r3, #1
 801b104:	b2da      	uxtb	r2, r3
 801b106:	4b06      	ldr	r3, [pc, #24]	; (801b120 <st25r3916comStop+0x30>)
 801b108:	701a      	strb	r2, [r3, #0]
 801b10a:	4b05      	ldr	r3, [pc, #20]	; (801b120 <st25r3916comStop+0x30>)
 801b10c:	781b      	ldrb	r3, [r3, #0]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d102      	bne.n	801b118 <st25r3916comStop+0x28>
 801b112:	200a      	movs	r0, #10
 801b114:	f7ff ff8c 	bl	801b030 <__NVIC_EnableIRQ>
}
 801b118:	bf00      	nop
 801b11a:	bd80      	pop	{r7, pc}
 801b11c:	40010800 	.word	0x40010800
 801b120:	20002950 	.word	0x20002950

0801b124 <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 801b124:	b580      	push	{r7, lr}
 801b126:	b082      	sub	sp, #8
 801b128:	af00      	add	r7, sp, #0
 801b12a:	6078      	str	r0, [r7, #4]
 801b12c:	4608      	mov	r0, r1
 801b12e:	4611      	mov	r1, r2
 801b130:	461a      	mov	r2, r3
 801b132:	4603      	mov	r3, r0
 801b134:	807b      	strh	r3, [r7, #2]
 801b136:	460b      	mov	r3, r1
 801b138:	707b      	strb	r3, [r7, #1]
 801b13a:	4613      	mov	r3, r2
 801b13c:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);

    if( txLen > 0U )
 801b13e:	887b      	ldrh	r3, [r7, #2]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d005      	beq.n	801b150 <st25r3916comTx+0x2c>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
            }

        #else
            platformSpiTxRx( txBuf, NULL, txLen );
 801b144:	887b      	ldrh	r3, [r7, #2]
 801b146:	461a      	mov	r2, r3
 801b148:	2100      	movs	r1, #0
 801b14a:	6878      	ldr	r0, [r7, #4]
 801b14c:	f7e7 fc80 	bl	8002a50 <BSP_SPI_SendRecv>
        #endif /* ST25R_COM_SINGLETXRX */

#endif /* RFAL_USE_I2C */
    }
}
 801b150:	bf00      	nop
 801b152:	3708      	adds	r7, #8
 801b154:	46bd      	mov	sp, r7
 801b156:	bd80      	pop	{r7, pc}

0801b158 <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
 801b160:	460b      	mov	r3, r1
 801b162:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 801b164:	887b      	ldrh	r3, [r7, #2]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d00e      	beq.n	801b188 <st25r3916comRx+0x30>
    #ifdef ST25R_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
    #else
        if( rxBuf != NULL)
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d005      	beq.n	801b17c <st25r3916comRx+0x24>
        {
            ST_MEMSET( rxBuf, 0x00, rxLen );                                                    /* clear outgoing buffer                                  */
 801b170:	887b      	ldrh	r3, [r7, #2]
 801b172:	461a      	mov	r2, r3
 801b174:	2100      	movs	r1, #0
 801b176:	6878      	ldr	r0, [r7, #4]
 801b178:	f000 fdc2 	bl	801bd00 <memset>
        }
        platformSpiTxRx( NULL, rxBuf, rxLen );
 801b17c:	887b      	ldrh	r3, [r7, #2]
 801b17e:	461a      	mov	r2, r3
 801b180:	6879      	ldr	r1, [r7, #4]
 801b182:	2000      	movs	r0, #0
 801b184:	f7e7 fc64 	bl	8002a50 <BSP_SPI_SendRecv>
    #endif /* ST25R_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 801b188:	bf00      	nop
 801b18a:	3708      	adds	r7, #8
 801b18c:	46bd      	mov	sp, r7
 801b18e:	bd80      	pop	{r7, pc}

0801b190 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b084      	sub	sp, #16
 801b194:	af00      	add	r7, sp, #0
 801b196:	4603      	mov	r3, r0
 801b198:	71fb      	strb	r3, [r7, #7]
 801b19a:	460b      	mov	r3, r1
 801b19c:	71bb      	strb	r3, [r7, #6]
 801b19e:	4613      	mov	r3, r2
 801b1a0:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 801b1a2:	79fb      	ldrb	r3, [r7, #7]
 801b1a4:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 801b1a6:	797b      	ldrb	r3, [r7, #5]
 801b1a8:	79ba      	ldrb	r2, [r7, #6]
 801b1aa:	f107 000f 	add.w	r0, r7, #15
 801b1ae:	2101      	movs	r1, #1
 801b1b0:	f7ff ffb8 	bl	801b124 <st25r3916comTx>
}
 801b1b4:	bf00      	nop
 801b1b6:	3710      	adds	r7, #16
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	bd80      	pop	{r7, pc}

0801b1bc <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 801b1bc:	b580      	push	{r7, lr}
 801b1be:	b082      	sub	sp, #8
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	6039      	str	r1, [r7, #0]
 801b1c6:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 801b1c8:	79fb      	ldrb	r3, [r7, #7]
 801b1ca:	2201      	movs	r2, #1
 801b1cc:	6839      	ldr	r1, [r7, #0]
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f000 f805 	bl	801b1de <st25r3916ReadMultipleRegisters>
 801b1d4:	4603      	mov	r3, r0
}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	3708      	adds	r7, #8
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd80      	pop	{r7, pc}

0801b1de <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 801b1de:	b580      	push	{r7, lr}
 801b1e0:	b082      	sub	sp, #8
 801b1e2:	af00      	add	r7, sp, #0
 801b1e4:	4603      	mov	r3, r0
 801b1e6:	6039      	str	r1, [r7, #0]
 801b1e8:	71fb      	strb	r3, [r7, #7]
 801b1ea:	4613      	mov	r3, r2
 801b1ec:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 801b1ee:	79bb      	ldrb	r3, [r7, #6]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d01c      	beq.n	801b22e <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 801b1f4:	f7ff ff5c 	bl	801b0b0 <st25r3916comStart>

        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 801b1f8:	79fb      	ldrb	r3, [r7, #7]
 801b1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d004      	beq.n	801b20c <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 801b202:	2200      	movs	r2, #0
 801b204:	2100      	movs	r1, #0
 801b206:	20fb      	movs	r0, #251	; 0xfb
 801b208:	f7ff ffc2 	bl	801b190 <st25r3916comTxByte>
        }

        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 801b20c:	79fb      	ldrb	r3, [r7, #7]
 801b20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b212:	b2db      	uxtb	r3, r3
 801b214:	2200      	movs	r2, #0
 801b216:	2101      	movs	r1, #1
 801b218:	4618      	mov	r0, r3
 801b21a:	f7ff ffb9 	bl	801b190 <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 801b21e:	79bb      	ldrb	r3, [r7, #6]
 801b220:	b29b      	uxth	r3, r3
 801b222:	4619      	mov	r1, r3
 801b224:	6838      	ldr	r0, [r7, #0]
 801b226:	f7ff ff97 	bl	801b158 <st25r3916comRx>
        st25r3916comStop();
 801b22a:	f7ff ff61 	bl	801b0f0 <st25r3916comStop>
    }

    return ERR_NONE;
 801b22e:	2300      	movs	r3, #0
}
 801b230:	4618      	mov	r0, r3
 801b232:	3708      	adds	r7, #8
 801b234:	46bd      	mov	sp, r7
 801b236:	bd80      	pop	{r7, pc}

0801b238 <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b084      	sub	sp, #16
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	4603      	mov	r3, r0
 801b240:	460a      	mov	r2, r1
 801b242:	71fb      	strb	r3, [r7, #7]
 801b244:	4613      	mov	r3, r2
 801b246:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 801b248:	79bb      	ldrb	r3, [r7, #6]
 801b24a:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 801b24c:	f107 010f 	add.w	r1, r7, #15
 801b250:	79fb      	ldrb	r3, [r7, #7]
 801b252:	2201      	movs	r2, #1
 801b254:	4618      	mov	r0, r3
 801b256:	f000 f805 	bl	801b264 <st25r3916WriteMultipleRegisters>
 801b25a:	4603      	mov	r3, r0
}
 801b25c:	4618      	mov	r0, r3
 801b25e:	3710      	adds	r7, #16
 801b260:	46bd      	mov	sp, r7
 801b262:	bd80      	pop	{r7, pc}

0801b264 <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b082      	sub	sp, #8
 801b268:	af00      	add	r7, sp, #0
 801b26a:	4603      	mov	r3, r0
 801b26c:	6039      	str	r1, [r7, #0]
 801b26e:	71fb      	strb	r3, [r7, #7]
 801b270:	4613      	mov	r3, r2
 801b272:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 801b274:	79bb      	ldrb	r3, [r7, #6]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d023      	beq.n	801b2c2 <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 801b27a:	f7ff ff19 	bl	801b0b0 <st25r3916comStart>

        if( (reg & ST25R3916_SPACE_B) != 0U )
 801b27e:	79fb      	ldrb	r3, [r7, #7]
 801b280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b284:	2b00      	cmp	r3, #0
 801b286:	d004      	beq.n	801b292 <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 801b288:	2201      	movs	r2, #1
 801b28a:	2100      	movs	r1, #0
 801b28c:	20fb      	movs	r0, #251	; 0xfb
 801b28e:	f7ff ff7f 	bl	801b190 <st25r3916comTxByte>
        }

        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 801b292:	79fb      	ldrb	r3, [r7, #7]
 801b294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b298:	b2db      	uxtb	r3, r3
 801b29a:	2201      	movs	r2, #1
 801b29c:	2100      	movs	r1, #0
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f7ff ff76 	bl	801b190 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 801b2a4:	79bb      	ldrb	r3, [r7, #6]
 801b2a6:	b299      	uxth	r1, r3
 801b2a8:	2301      	movs	r3, #1
 801b2aa:	2201      	movs	r2, #1
 801b2ac:	6838      	ldr	r0, [r7, #0]
 801b2ae:	f7ff ff39 	bl	801b124 <st25r3916comTx>
        st25r3916comStop();
 801b2b2:	f7ff ff1d 	bl	801b0f0 <st25r3916comStop>

        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 801b2b6:	79ba      	ldrb	r2, [r7, #6]
 801b2b8:	79fb      	ldrb	r3, [r7, #7]
 801b2ba:	6839      	ldr	r1, [r7, #0]
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f000 fc5b 	bl	801bb78 <st25r3916ledEvtWrMultiReg>
    }

    return ERR_NONE;
 801b2c2:	2300      	movs	r3, #0
}
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	3708      	adds	r7, #8
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	bd80      	pop	{r7, pc}

0801b2cc <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 801b2cc:	b580      	push	{r7, lr}
 801b2ce:	b082      	sub	sp, #8
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	6078      	str	r0, [r7, #4]
 801b2d4:	460b      	mov	r3, r1
 801b2d6:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 801b2d8:	887b      	ldrh	r3, [r7, #2]
 801b2da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b2de:	d901      	bls.n	801b2e4 <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 801b2e0:	2307      	movs	r3, #7
 801b2e2:	e012      	b.n	801b30a <st25r3916WriteFifo+0x3e>
    }

    if( length > 0U )
 801b2e4:	887b      	ldrh	r3, [r7, #2]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d00e      	beq.n	801b308 <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 801b2ea:	f7ff fee1 	bl	801b0b0 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 801b2ee:	2201      	movs	r2, #1
 801b2f0:	2100      	movs	r1, #0
 801b2f2:	2080      	movs	r0, #128	; 0x80
 801b2f4:	f7ff ff4c 	bl	801b190 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 801b2f8:	8879      	ldrh	r1, [r7, #2]
 801b2fa:	2301      	movs	r3, #1
 801b2fc:	2201      	movs	r2, #1
 801b2fe:	6878      	ldr	r0, [r7, #4]
 801b300:	f7ff ff10 	bl	801b124 <st25r3916comTx>
        st25r3916comStop();
 801b304:	f7ff fef4 	bl	801b0f0 <st25r3916comStop>
    }

    return ERR_NONE;
 801b308:	2300      	movs	r3, #0
}
 801b30a:	4618      	mov	r0, r3
 801b30c:	3708      	adds	r7, #8
 801b30e:	46bd      	mov	sp, r7
 801b310:	bd80      	pop	{r7, pc}

0801b312 <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 801b312:	b580      	push	{r7, lr}
 801b314:	b082      	sub	sp, #8
 801b316:	af00      	add	r7, sp, #0
 801b318:	6078      	str	r0, [r7, #4]
 801b31a:	460b      	mov	r3, r1
 801b31c:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 801b31e:	887b      	ldrh	r3, [r7, #2]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d00d      	beq.n	801b340 <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 801b324:	f7ff fec4 	bl	801b0b0 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 801b328:	2200      	movs	r2, #0
 801b32a:	2101      	movs	r1, #1
 801b32c:	209f      	movs	r0, #159	; 0x9f
 801b32e:	f7ff ff2f 	bl	801b190 <st25r3916comTxByte>

        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 801b332:	887b      	ldrh	r3, [r7, #2]
 801b334:	4619      	mov	r1, r3
 801b336:	6878      	ldr	r0, [r7, #4]
 801b338:	f7ff ff0e 	bl	801b158 <st25r3916comRx>
        st25r3916comStop();
 801b33c:	f7ff fed8 	bl	801b0f0 <st25r3916comStop>
    }

    return ERR_NONE;
 801b340:	2300      	movs	r3, #0
}
 801b342:	4618      	mov	r0, r3
 801b344:	3708      	adds	r7, #8
 801b346:	46bd      	mov	sp, r7
 801b348:	bd80      	pop	{r7, pc}

0801b34a <st25r3916WritePTMem>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMem( const uint8_t* values, uint16_t length )
{
 801b34a:	b580      	push	{r7, lr}
 801b34c:	b082      	sub	sp, #8
 801b34e:	af00      	add	r7, sp, #0
 801b350:	6078      	str	r0, [r7, #4]
 801b352:	460b      	mov	r3, r1
 801b354:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_PTM_LEN )
 801b356:	887b      	ldrh	r3, [r7, #2]
 801b358:	2b30      	cmp	r3, #48	; 0x30
 801b35a:	d901      	bls.n	801b360 <st25r3916WritePTMem+0x16>
    {
        return ERR_PARAM;
 801b35c:	2307      	movs	r3, #7
 801b35e:	e012      	b.n	801b386 <st25r3916WritePTMem+0x3c>
    }

    if( length > 0U )
 801b360:	887b      	ldrh	r3, [r7, #2]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d00e      	beq.n	801b384 <st25r3916WritePTMem+0x3a>
    {
        st25r3916comStart();
 801b366:	f7ff fea3 	bl	801b0b0 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_PT_A_CONFIG_LOAD, false, true );
 801b36a:	2201      	movs	r2, #1
 801b36c:	2100      	movs	r1, #0
 801b36e:	20a0      	movs	r0, #160	; 0xa0
 801b370:	f7ff ff0e 	bl	801b190 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 801b374:	8879      	ldrh	r1, [r7, #2]
 801b376:	2301      	movs	r3, #1
 801b378:	2201      	movs	r2, #1
 801b37a:	6878      	ldr	r0, [r7, #4]
 801b37c:	f7ff fed2 	bl	801b124 <st25r3916comTx>
        st25r3916comStop();
 801b380:	f7ff feb6 	bl	801b0f0 <st25r3916comStop>
    }

    return ERR_NONE;
 801b384:	2300      	movs	r3, #0
}
 801b386:	4618      	mov	r0, r3
 801b388:	3708      	adds	r7, #8
 801b38a:	46bd      	mov	sp, r7
 801b38c:	bd80      	pop	{r7, pc}

0801b38e <st25r3916WritePTMemF>:
}


/*******************************************************************************/
ReturnCode st25r3916WritePTMemF( const uint8_t* values, uint16_t length )
{
 801b38e:	b580      	push	{r7, lr}
 801b390:	b082      	sub	sp, #8
 801b392:	af00      	add	r7, sp, #0
 801b394:	6078      	str	r0, [r7, #4]
 801b396:	460b      	mov	r3, r1
 801b398:	807b      	strh	r3, [r7, #2]
    if( length > (ST25R3916_PTM_F_LEN + ST25R3916_PTM_TSN_LEN) )
 801b39a:	887b      	ldrh	r3, [r7, #2]
 801b39c:	2b21      	cmp	r3, #33	; 0x21
 801b39e:	d901      	bls.n	801b3a4 <st25r3916WritePTMemF+0x16>
    {
        return ERR_PARAM;
 801b3a0:	2307      	movs	r3, #7
 801b3a2:	e012      	b.n	801b3ca <st25r3916WritePTMemF+0x3c>
    }

    if( length > 0U )
 801b3a4:	887b      	ldrh	r3, [r7, #2]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d00e      	beq.n	801b3c8 <st25r3916WritePTMemF+0x3a>
    {
        st25r3916comStart();
 801b3aa:	f7ff fe81 	bl	801b0b0 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_PT_F_CONFIG_LOAD, false, true );
 801b3ae:	2201      	movs	r2, #1
 801b3b0:	2100      	movs	r1, #0
 801b3b2:	20a8      	movs	r0, #168	; 0xa8
 801b3b4:	f7ff feec 	bl	801b190 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 801b3b8:	8879      	ldrh	r1, [r7, #2]
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	2201      	movs	r2, #1
 801b3be:	6878      	ldr	r0, [r7, #4]
 801b3c0:	f7ff feb0 	bl	801b124 <st25r3916comTx>
        st25r3916comStop();
 801b3c4:	f7ff fe94 	bl	801b0f0 <st25r3916comStop>
    }

    return ERR_NONE;
 801b3c8:	2300      	movs	r3, #0
}
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	3708      	adds	r7, #8
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bd80      	pop	{r7, pc}

0801b3d2 <st25r3916WritePTMemTSN>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMemTSN( const uint8_t* values, uint16_t length )
{
 801b3d2:	b580      	push	{r7, lr}
 801b3d4:	b082      	sub	sp, #8
 801b3d6:	af00      	add	r7, sp, #0
 801b3d8:	6078      	str	r0, [r7, #4]
 801b3da:	460b      	mov	r3, r1
 801b3dc:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_PTM_TSN_LEN )
 801b3de:	887b      	ldrh	r3, [r7, #2]
 801b3e0:	2b0c      	cmp	r3, #12
 801b3e2:	d901      	bls.n	801b3e8 <st25r3916WritePTMemTSN+0x16>
    {
        return ERR_PARAM;
 801b3e4:	2307      	movs	r3, #7
 801b3e6:	e012      	b.n	801b40e <st25r3916WritePTMemTSN+0x3c>
    }

    if(length > 0U)
 801b3e8:	887b      	ldrh	r3, [r7, #2]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d00e      	beq.n	801b40c <st25r3916WritePTMemTSN+0x3a>
    {
        st25r3916comStart();
 801b3ee:	f7ff fe5f 	bl	801b0b0 <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_PT_TSN_DATA_LOAD, false, true );
 801b3f2:	2201      	movs	r2, #1
 801b3f4:	2100      	movs	r1, #0
 801b3f6:	20ac      	movs	r0, #172	; 0xac
 801b3f8:	f7ff feca 	bl	801b190 <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 801b3fc:	8879      	ldrh	r1, [r7, #2]
 801b3fe:	2301      	movs	r3, #1
 801b400:	2201      	movs	r2, #1
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f7ff fe8e 	bl	801b124 <st25r3916comTx>
        st25r3916comStop();
 801b408:	f7ff fe72 	bl	801b0f0 <st25r3916comStop>
    }

    return ERR_NONE;
 801b40c:	2300      	movs	r3, #0
}
 801b40e:	4618      	mov	r0, r3
 801b410:	3708      	adds	r7, #8
 801b412:	46bd      	mov	sp, r7
 801b414:	bd80      	pop	{r7, pc}

0801b416 <st25r3916ExecuteCommand>:


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 801b416:	b580      	push	{r7, lr}
 801b418:	b082      	sub	sp, #8
 801b41a:	af00      	add	r7, sp, #0
 801b41c:	4603      	mov	r3, r0
 801b41e:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 801b420:	f7ff fe46 	bl	801b0b0 <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 801b424:	79fb      	ldrb	r3, [r7, #7]
 801b426:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801b42a:	b2db      	uxtb	r3, r3
 801b42c:	2201      	movs	r2, #1
 801b42e:	2101      	movs	r1, #1
 801b430:	4618      	mov	r0, r3
 801b432:	f7ff fead 	bl	801b190 <st25r3916comTxByte>
    st25r3916comStop();
 801b436:	f7ff fe5b 	bl	801b0f0 <st25r3916comStop>

    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 801b43a:	79fb      	ldrb	r3, [r7, #7]
 801b43c:	4618      	mov	r0, r3
 801b43e:	f000 fbbd 	bl	801bbbc <st25r3916ledEvtCmd>

    return ERR_NONE;
 801b442:	2300      	movs	r3, #0
}
 801b444:	4618      	mov	r0, r3
 801b446:	3708      	adds	r7, #8
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}

0801b44c <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b082      	sub	sp, #8
 801b450:	af00      	add	r7, sp, #0
 801b452:	4603      	mov	r3, r0
 801b454:	6039      	str	r1, [r7, #0]
 801b456:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 801b458:	f7ff fe2a 	bl	801b0b0 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 801b45c:	2200      	movs	r2, #0
 801b45e:	2100      	movs	r1, #0
 801b460:	20fc      	movs	r0, #252	; 0xfc
 801b462:	f7ff fe95 	bl	801b190 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 801b466:	79fb      	ldrb	r3, [r7, #7]
 801b468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b46c:	b2db      	uxtb	r3, r3
 801b46e:	2200      	movs	r2, #0
 801b470:	2101      	movs	r1, #1
 801b472:	4618      	mov	r0, r3
 801b474:	f7ff fe8c 	bl	801b190 <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 801b478:	2101      	movs	r1, #1
 801b47a:	6838      	ldr	r0, [r7, #0]
 801b47c:	f7ff fe6c 	bl	801b158 <st25r3916comRx>
    st25r3916comStop();
 801b480:	f7ff fe36 	bl	801b0f0 <st25r3916comStop>

    return ERR_NONE;
 801b484:	2300      	movs	r3, #0
}
 801b486:	4618      	mov	r0, r3
 801b488:	3708      	adds	r7, #8
 801b48a:	46bd      	mov	sp, r7
 801b48c:	bd80      	pop	{r7, pc}

0801b48e <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 801b48e:	b580      	push	{r7, lr}
 801b490:	b084      	sub	sp, #16
 801b492:	af00      	add	r7, sp, #0
 801b494:	4603      	mov	r3, r0
 801b496:	460a      	mov	r2, r1
 801b498:	71fb      	strb	r3, [r7, #7]
 801b49a:	4613      	mov	r3, r2
 801b49c:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 801b49e:	79bb      	ldrb	r3, [r7, #6]
 801b4a0:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 801b4a2:	f7ff fe05 	bl	801b0b0 <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 801b4a6:	2201      	movs	r2, #1
 801b4a8:	2100      	movs	r1, #0
 801b4aa:	20fc      	movs	r0, #252	; 0xfc
 801b4ac:	f7ff fe70 	bl	801b190 <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 801b4b0:	79fb      	ldrb	r3, [r7, #7]
 801b4b2:	2201      	movs	r2, #1
 801b4b4:	2100      	movs	r1, #0
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f7ff fe6a 	bl	801b190 <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 801b4bc:	f107 000f 	add.w	r0, r7, #15
 801b4c0:	2301      	movs	r3, #1
 801b4c2:	2201      	movs	r2, #1
 801b4c4:	2101      	movs	r1, #1
 801b4c6:	f7ff fe2d 	bl	801b124 <st25r3916comTx>
    st25r3916comStop();
 801b4ca:	f7ff fe11 	bl	801b0f0 <st25r3916comStop>

    return ERR_NONE;
 801b4ce:	2300      	movs	r3, #0
}
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	3710      	adds	r7, #16
 801b4d4:	46bd      	mov	sp, r7
 801b4d6:	bd80      	pop	{r7, pc}

0801b4d8 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b084      	sub	sp, #16
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	4603      	mov	r3, r0
 801b4e0:	460a      	mov	r2, r1
 801b4e2:	71fb      	strb	r3, [r7, #7]
 801b4e4:	4613      	mov	r3, r2
 801b4e6:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 801b4e8:	f107 020d 	add.w	r2, r7, #13
 801b4ec:	79fb      	ldrb	r3, [r7, #7]
 801b4ee:	4611      	mov	r1, r2
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f7ff fe63 	bl	801b1bc <st25r3916ReadRegister>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	81fb      	strh	r3, [r7, #14]
 801b4fa:	89fb      	ldrh	r3, [r7, #14]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d001      	beq.n	801b504 <st25r3916ClrRegisterBits+0x2c>
 801b500:	89fb      	ldrh	r3, [r7, #14]
 801b502:	e01c      	b.n	801b53e <st25r3916ClrRegisterBits+0x66>

    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 801b504:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b508:	43db      	mvns	r3, r3
 801b50a:	b25a      	sxtb	r2, r3
 801b50c:	7b7b      	ldrb	r3, [r7, #13]
 801b50e:	b25b      	sxtb	r3, r3
 801b510:	4013      	ands	r3, r2
 801b512:	b25a      	sxtb	r2, r3
 801b514:	7b7b      	ldrb	r3, [r7, #13]
 801b516:	b25b      	sxtb	r3, r3
 801b518:	429a      	cmp	r2, r3
 801b51a:	d101      	bne.n	801b520 <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 801b51c:	2300      	movs	r3, #0
 801b51e:	e00e      	b.n	801b53e <st25r3916ClrRegisterBits+0x66>
    }

    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 801b520:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b524:	43db      	mvns	r3, r3
 801b526:	b25a      	sxtb	r2, r3
 801b528:	7b7b      	ldrb	r3, [r7, #13]
 801b52a:	b25b      	sxtb	r3, r3
 801b52c:	4013      	ands	r3, r2
 801b52e:	b25b      	sxtb	r3, r3
 801b530:	b2da      	uxtb	r2, r3
 801b532:	79fb      	ldrb	r3, [r7, #7]
 801b534:	4611      	mov	r1, r2
 801b536:	4618      	mov	r0, r3
 801b538:	f7ff fe7e 	bl	801b238 <st25r3916WriteRegister>
 801b53c:	4603      	mov	r3, r0
}
 801b53e:	4618      	mov	r0, r3
 801b540:	3710      	adds	r7, #16
 801b542:	46bd      	mov	sp, r7
 801b544:	bd80      	pop	{r7, pc}

0801b546 <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 801b546:	b580      	push	{r7, lr}
 801b548:	b084      	sub	sp, #16
 801b54a:	af00      	add	r7, sp, #0
 801b54c:	4603      	mov	r3, r0
 801b54e:	460a      	mov	r2, r1
 801b550:	71fb      	strb	r3, [r7, #7]
 801b552:	4613      	mov	r3, r2
 801b554:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 801b556:	f107 020d 	add.w	r2, r7, #13
 801b55a:	79fb      	ldrb	r3, [r7, #7]
 801b55c:	4611      	mov	r1, r2
 801b55e:	4618      	mov	r0, r3
 801b560:	f7ff fe2c 	bl	801b1bc <st25r3916ReadRegister>
 801b564:	4603      	mov	r3, r0
 801b566:	81fb      	strh	r3, [r7, #14]
 801b568:	89fb      	ldrh	r3, [r7, #14]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d001      	beq.n	801b572 <st25r3916SetRegisterBits+0x2c>
 801b56e:	89fb      	ldrh	r3, [r7, #14]
 801b570:	e012      	b.n	801b598 <st25r3916SetRegisterBits+0x52>

    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 801b572:	7b7a      	ldrb	r2, [r7, #13]
 801b574:	79bb      	ldrb	r3, [r7, #6]
 801b576:	4313      	orrs	r3, r2
 801b578:	b2da      	uxtb	r2, r3
 801b57a:	7b7b      	ldrb	r3, [r7, #13]
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d101      	bne.n	801b584 <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 801b580:	2300      	movs	r3, #0
 801b582:	e009      	b.n	801b598 <st25r3916SetRegisterBits+0x52>
    }

    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 801b584:	7b7a      	ldrb	r2, [r7, #13]
 801b586:	79bb      	ldrb	r3, [r7, #6]
 801b588:	4313      	orrs	r3, r2
 801b58a:	b2da      	uxtb	r2, r3
 801b58c:	79fb      	ldrb	r3, [r7, #7]
 801b58e:	4611      	mov	r1, r2
 801b590:	4618      	mov	r0, r3
 801b592:	f7ff fe51 	bl	801b238 <st25r3916WriteRegister>
 801b596:	4603      	mov	r3, r0
}
 801b598:	4618      	mov	r0, r3
 801b59a:	3710      	adds	r7, #16
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bd80      	pop	{r7, pc}

0801b5a0 <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	b082      	sub	sp, #8
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	4603      	mov	r3, r0
 801b5a8:	71fb      	strb	r3, [r7, #7]
 801b5aa:	460b      	mov	r3, r1
 801b5ac:	71bb      	strb	r3, [r7, #6]
 801b5ae:	4613      	mov	r3, r2
 801b5b0:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 801b5b2:	79ba      	ldrb	r2, [r7, #6]
 801b5b4:	797b      	ldrb	r3, [r7, #5]
 801b5b6:	4013      	ands	r3, r2
 801b5b8:	b2da      	uxtb	r2, r3
 801b5ba:	79b9      	ldrb	r1, [r7, #6]
 801b5bc:	79fb      	ldrb	r3, [r7, #7]
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f000 f805 	bl	801b5ce <st25r3916ModifyRegister>
 801b5c4:	4603      	mov	r3, r0
}
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	3708      	adds	r7, #8
 801b5ca:	46bd      	mov	sp, r7
 801b5cc:	bd80      	pop	{r7, pc}

0801b5ce <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 801b5ce:	b580      	push	{r7, lr}
 801b5d0:	b084      	sub	sp, #16
 801b5d2:	af00      	add	r7, sp, #0
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	71fb      	strb	r3, [r7, #7]
 801b5d8:	460b      	mov	r3, r1
 801b5da:	71bb      	strb	r3, [r7, #6]
 801b5dc:	4613      	mov	r3, r2
 801b5de:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 801b5e0:	f107 020c 	add.w	r2, r7, #12
 801b5e4:	79fb      	ldrb	r3, [r7, #7]
 801b5e6:	4611      	mov	r1, r2
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	f7ff fde7 	bl	801b1bc <st25r3916ReadRegister>
 801b5ee:	4603      	mov	r3, r0
 801b5f0:	81fb      	strh	r3, [r7, #14]
 801b5f2:	89fb      	ldrh	r3, [r7, #14]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d001      	beq.n	801b5fc <st25r3916ModifyRegister+0x2e>
 801b5f8:	89fb      	ldrh	r3, [r7, #14]
 801b5fa:	e019      	b.n	801b630 <st25r3916ModifyRegister+0x62>

    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 801b5fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b600:	43db      	mvns	r3, r3
 801b602:	b25a      	sxtb	r2, r3
 801b604:	7b3b      	ldrb	r3, [r7, #12]
 801b606:	b25b      	sxtb	r3, r3
 801b608:	4013      	ands	r3, r2
 801b60a:	b25b      	sxtb	r3, r3
 801b60c:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 801b60e:	7b7a      	ldrb	r2, [r7, #13]
 801b610:	797b      	ldrb	r3, [r7, #5]
 801b612:	4313      	orrs	r3, r2
 801b614:	737b      	strb	r3, [r7, #13]

    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 801b616:	7b3b      	ldrb	r3, [r7, #12]
 801b618:	7b7a      	ldrb	r2, [r7, #13]
 801b61a:	429a      	cmp	r2, r3
 801b61c:	d101      	bne.n	801b622 <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 801b61e:	2300      	movs	r3, #0
 801b620:	e006      	b.n	801b630 <st25r3916ModifyRegister+0x62>
    }

    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 801b622:	7b7a      	ldrb	r2, [r7, #13]
 801b624:	79fb      	ldrb	r3, [r7, #7]
 801b626:	4611      	mov	r1, r2
 801b628:	4618      	mov	r0, r3
 801b62a:	f7ff fe05 	bl	801b238 <st25r3916WriteRegister>
 801b62e:	4603      	mov	r3, r0
}
 801b630:	4618      	mov	r0, r3
 801b632:	3710      	adds	r7, #16
 801b634:	46bd      	mov	sp, r7
 801b636:	bd80      	pop	{r7, pc}

0801b638 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b084      	sub	sp, #16
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	4603      	mov	r3, r0
 801b640:	71fb      	strb	r3, [r7, #7]
 801b642:	460b      	mov	r3, r1
 801b644:	71bb      	strb	r3, [r7, #6]
 801b646:	4613      	mov	r3, r2
 801b648:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 801b64a:	f107 020c 	add.w	r2, r7, #12
 801b64e:	79fb      	ldrb	r3, [r7, #7]
 801b650:	4611      	mov	r1, r2
 801b652:	4618      	mov	r0, r3
 801b654:	f7ff fefa 	bl	801b44c <st25r3916ReadTestRegister>
 801b658:	4603      	mov	r3, r0
 801b65a:	81fb      	strh	r3, [r7, #14]
 801b65c:	89fb      	ldrh	r3, [r7, #14]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d001      	beq.n	801b666 <st25r3916ChangeTestRegisterBits+0x2e>
 801b662:	89fb      	ldrh	r3, [r7, #14]
 801b664:	e01c      	b.n	801b6a0 <st25r3916ChangeTestRegisterBits+0x68>

    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 801b666:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b66a:	43db      	mvns	r3, r3
 801b66c:	b25a      	sxtb	r2, r3
 801b66e:	7b3b      	ldrb	r3, [r7, #12]
 801b670:	b25b      	sxtb	r3, r3
 801b672:	4013      	ands	r3, r2
 801b674:	b25b      	sxtb	r3, r3
 801b676:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 801b678:	797a      	ldrb	r2, [r7, #5]
 801b67a:	79bb      	ldrb	r3, [r7, #6]
 801b67c:	4013      	ands	r3, r2
 801b67e:	b2da      	uxtb	r2, r3
 801b680:	7b7b      	ldrb	r3, [r7, #13]
 801b682:	4313      	orrs	r3, r2
 801b684:	737b      	strb	r3, [r7, #13]

    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 801b686:	7b3b      	ldrb	r3, [r7, #12]
 801b688:	7b7a      	ldrb	r2, [r7, #13]
 801b68a:	429a      	cmp	r2, r3
 801b68c:	d101      	bne.n	801b692 <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 801b68e:	2300      	movs	r3, #0
 801b690:	e006      	b.n	801b6a0 <st25r3916ChangeTestRegisterBits+0x68>
    }

    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 801b692:	7b7a      	ldrb	r2, [r7, #13]
 801b694:	79fb      	ldrb	r3, [r7, #7]
 801b696:	4611      	mov	r1, r2
 801b698:	4618      	mov	r0, r3
 801b69a:	f7ff fef8 	bl	801b48e <st25r3916WriteTestRegister>
 801b69e:	4603      	mov	r3, r0
}
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	3710      	adds	r7, #16
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}

0801b6a8 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b084      	sub	sp, #16
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	4603      	mov	r3, r0
 801b6b0:	71fb      	strb	r3, [r7, #7]
 801b6b2:	460b      	mov	r3, r1
 801b6b4:	71bb      	strb	r3, [r7, #6]
 801b6b6:	4613      	mov	r3, r2
 801b6b8:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;

    regVal = 0;
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 801b6be:	f107 020f 	add.w	r2, r7, #15
 801b6c2:	79fb      	ldrb	r3, [r7, #7]
 801b6c4:	4611      	mov	r1, r2
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	f7ff fd78 	bl	801b1bc <st25r3916ReadRegister>

    return ( (regVal & mask) == val );
 801b6cc:	7bfa      	ldrb	r2, [r7, #15]
 801b6ce:	79bb      	ldrb	r3, [r7, #6]
 801b6d0:	4013      	ands	r3, r2
 801b6d2:	b2db      	uxtb	r3, r3
 801b6d4:	797a      	ldrb	r2, [r7, #5]
 801b6d6:	429a      	cmp	r2, r3
 801b6d8:	bf0c      	ite	eq
 801b6da:	2301      	moveq	r3, #1
 801b6dc:	2300      	movne	r3, #0
 801b6de:	b2db      	uxtb	r3, r3
}
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	3710      	adds	r7, #16
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	bd80      	pop	{r7, pc}

0801b6e8 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 801b6e8:	b480      	push	{r7}
 801b6ea:	b083      	sub	sp, #12
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 801b6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	da01      	bge.n	801b6fe <st25r3916IsRegValid+0x16>
    {
        return false;
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	e000      	b.n	801b700 <st25r3916IsRegValid+0x18>
    }
    return true;
 801b6fe:	2301      	movs	r3, #1
}
 801b700:	4618      	mov	r0, r3
 801b702:	370c      	adds	r7, #12
 801b704:	46bd      	mov	sp, r7
 801b706:	bc80      	pop	{r7}
 801b708:	4770      	bx	lr
	...

0801b70c <__NVIC_EnableIRQ>:
{
 801b70c:	b480      	push	{r7}
 801b70e:	b083      	sub	sp, #12
 801b710:	af00      	add	r7, sp, #0
 801b712:	4603      	mov	r3, r0
 801b714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	db0b      	blt.n	801b736 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b71e:	79fb      	ldrb	r3, [r7, #7]
 801b720:	f003 021f 	and.w	r2, r3, #31
 801b724:	4906      	ldr	r1, [pc, #24]	; (801b740 <__NVIC_EnableIRQ+0x34>)
 801b726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b72a:	095b      	lsrs	r3, r3, #5
 801b72c:	2001      	movs	r0, #1
 801b72e:	fa00 f202 	lsl.w	r2, r0, r2
 801b732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b736:	bf00      	nop
 801b738:	370c      	adds	r7, #12
 801b73a:	46bd      	mov	sp, r7
 801b73c:	bc80      	pop	{r7}
 801b73e:	4770      	bx	lr
 801b740:	e000e100 	.word	0xe000e100

0801b744 <__NVIC_DisableIRQ>:
{
 801b744:	b480      	push	{r7}
 801b746:	b083      	sub	sp, #12
 801b748:	af00      	add	r7, sp, #0
 801b74a:	4603      	mov	r3, r0
 801b74c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b752:	2b00      	cmp	r3, #0
 801b754:	db12      	blt.n	801b77c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b756:	79fb      	ldrb	r3, [r7, #7]
 801b758:	f003 021f 	and.w	r2, r3, #31
 801b75c:	490a      	ldr	r1, [pc, #40]	; (801b788 <__NVIC_DisableIRQ+0x44>)
 801b75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b762:	095b      	lsrs	r3, r3, #5
 801b764:	2001      	movs	r0, #1
 801b766:	fa00 f202 	lsl.w	r2, r0, r2
 801b76a:	3320      	adds	r3, #32
 801b76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801b770:	f3bf 8f4f 	dsb	sy
}
 801b774:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b776:	f3bf 8f6f 	isb	sy
}
 801b77a:	bf00      	nop
}
 801b77c:	bf00      	nop
 801b77e:	370c      	adds	r7, #12
 801b780:	46bd      	mov	sp, r7
 801b782:	bc80      	pop	{r7}
 801b784:	4770      	bx	lr
 801b786:	bf00      	nop
 801b788:	e000e100 	.word	0xe000e100

0801b78c <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 801b78c:	b480      	push	{r7}
 801b78e:	af00      	add	r7, sp, #0
    platformIrqST25RPinInitialize();
    platformIrqST25RSetCallback( st25r3916Isr );


    st25r3916interrupt.callback     = NULL;
 801b790:	4b07      	ldr	r3, [pc, #28]	; (801b7b0 <st25r3916InitInterrupts+0x24>)
 801b792:	2200      	movs	r2, #0
 801b794:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 801b796:	4b06      	ldr	r3, [pc, #24]	; (801b7b0 <st25r3916InitInterrupts+0x24>)
 801b798:	2200      	movs	r2, #0
 801b79a:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 801b79c:	4b04      	ldr	r3, [pc, #16]	; (801b7b0 <st25r3916InitInterrupts+0x24>)
 801b79e:	2200      	movs	r2, #0
 801b7a0:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 801b7a2:	4b03      	ldr	r3, [pc, #12]	; (801b7b0 <st25r3916InitInterrupts+0x24>)
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	60da      	str	r2, [r3, #12]
}
 801b7a8:	bf00      	nop
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	bc80      	pop	{r7}
 801b7ae:	4770      	bx	lr
 801b7b0:	20003a20 	.word	0x20003a20

0801b7b4 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 801b7b8:	f000 f80c 	bl	801b7d4 <st25r3916CheckForReceivedInterrupts>

    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 801b7bc:	4b04      	ldr	r3, [pc, #16]	; (801b7d0 <st25r3916Isr+0x1c>)
 801b7be:	685b      	ldr	r3, [r3, #4]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d002      	beq.n	801b7ca <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 801b7c4:	4b02      	ldr	r3, [pc, #8]	; (801b7d0 <st25r3916Isr+0x1c>)
 801b7c6:	685b      	ldr	r3, [r3, #4]
 801b7c8:	4798      	blx	r3
    }
}
 801b7ca:	bf00      	nop
 801b7cc:	bd80      	pop	{r7, pc}
 801b7ce:	bf00      	nop
 801b7d0:	20003a20 	.word	0x20003a20

0801b7d4 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b082      	sub	sp, #8
 801b7d8:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 801b7da:	2300      	movs	r3, #0
 801b7dc:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 801b7de:	463b      	mov	r3, r7
 801b7e0:	2204      	movs	r2, #4
 801b7e2:	21ff      	movs	r1, #255	; 0xff
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f000 fa8b 	bl	801bd00 <memset>


    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 801b7ea:	e019      	b.n	801b820 <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 801b7ec:	463b      	mov	r3, r7
 801b7ee:	2204      	movs	r2, #4
 801b7f0:	4619      	mov	r1, r3
 801b7f2:	201a      	movs	r0, #26
 801b7f4:	f7ff fcf3 	bl	801b1de <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 801b7f8:	783b      	ldrb	r3, [r7, #0]
 801b7fa:	461a      	mov	r2, r3
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	4313      	orrs	r3, r2
 801b800:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 801b802:	787b      	ldrb	r3, [r7, #1]
 801b804:	021b      	lsls	r3, r3, #8
 801b806:	687a      	ldr	r2, [r7, #4]
 801b808:	4313      	orrs	r3, r2
 801b80a:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 801b80c:	78bb      	ldrb	r3, [r7, #2]
 801b80e:	041b      	lsls	r3, r3, #16
 801b810:	687a      	ldr	r2, [r7, #4]
 801b812:	4313      	orrs	r3, r2
 801b814:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 801b816:	78fb      	ldrb	r3, [r7, #3]
 801b818:	061b      	lsls	r3, r3, #24
 801b81a:	687a      	ldr	r2, [r7, #4]
 801b81c:	4313      	orrs	r3, r2
 801b81e:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 801b820:	2110      	movs	r1, #16
 801b822:	481a      	ldr	r0, [pc, #104]	; (801b88c <st25r3916CheckForReceivedInterrupts+0xb8>)
 801b824:	f7e7 ff94 	bl	8003750 <HAL_GPIO_ReadPin>
 801b828:	4603      	mov	r3, r0
 801b82a:	2b01      	cmp	r3, #1
 801b82c:	d0de      	beq.n	801b7ec <st25r3916CheckForReceivedInterrupts+0x18>
   }

   /* Forward all interrupts, even masked ones to application */
   platformProtectST25RIrqStatus();
 801b82e:	4b18      	ldr	r3, [pc, #96]	; (801b890 <st25r3916CheckForReceivedInterrupts+0xbc>)
 801b830:	781b      	ldrb	r3, [r3, #0]
 801b832:	3301      	adds	r3, #1
 801b834:	b2da      	uxtb	r2, r3
 801b836:	4b16      	ldr	r3, [pc, #88]	; (801b890 <st25r3916CheckForReceivedInterrupts+0xbc>)
 801b838:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801b83a:	f3bf 8f4f 	dsb	sy
}
 801b83e:	bf00      	nop
 801b840:	200a      	movs	r0, #10
 801b842:	f7ff ff7f 	bl	801b744 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801b846:	f3bf 8f4f 	dsb	sy
}
 801b84a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b84c:	f3bf 8f6f 	isb	sy
}
 801b850:	bf00      	nop
   st25r3916interrupt.status |= irqStatus;
 801b852:	4b10      	ldr	r3, [pc, #64]	; (801b894 <st25r3916CheckForReceivedInterrupts+0xc0>)
 801b854:	689a      	ldr	r2, [r3, #8]
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	4313      	orrs	r3, r2
 801b85a:	4a0e      	ldr	r2, [pc, #56]	; (801b894 <st25r3916CheckForReceivedInterrupts+0xc0>)
 801b85c:	6093      	str	r3, [r2, #8]
   platformUnprotectST25RIrqStatus();
 801b85e:	4b0c      	ldr	r3, [pc, #48]	; (801b890 <st25r3916CheckForReceivedInterrupts+0xbc>)
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	3b01      	subs	r3, #1
 801b864:	b2da      	uxtb	r2, r3
 801b866:	4b0a      	ldr	r3, [pc, #40]	; (801b890 <st25r3916CheckForReceivedInterrupts+0xbc>)
 801b868:	701a      	strb	r2, [r3, #0]
 801b86a:	4b09      	ldr	r3, [pc, #36]	; (801b890 <st25r3916CheckForReceivedInterrupts+0xbc>)
 801b86c:	781b      	ldrb	r3, [r3, #0]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d102      	bne.n	801b878 <st25r3916CheckForReceivedInterrupts+0xa4>
 801b872:	200a      	movs	r0, #10
 801b874:	f7ff ff4a 	bl	801b70c <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 801b878:	4b06      	ldr	r3, [pc, #24]	; (801b894 <st25r3916CheckForReceivedInterrupts+0xc0>)
 801b87a:	689b      	ldr	r3, [r3, #8]
 801b87c:	4618      	mov	r0, r3
 801b87e:	f000 f945 	bl	801bb0c <st25r3916ledEvtIrq>
}
 801b882:	bf00      	nop
 801b884:	3708      	adds	r7, #8
 801b886:	46bd      	mov	sp, r7
 801b888:	bd80      	pop	{r7, pc}
 801b88a:	bf00      	nop
 801b88c:	40011000 	.word	0x40011000
 801b890:	20002950 	.word	0x20002950
 801b894:	20003a20 	.word	0x20003a20

0801b898 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 801b898:	b580      	push	{r7, lr}
 801b89a:	b086      	sub	sp, #24
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
 801b8a0:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;


    old_mask = st25r3916interrupt.mask;
 801b8a2:	4b1e      	ldr	r3, [pc, #120]	; (801b91c <st25r3916ModifyInterrupts+0x84>)
 801b8a4:	68db      	ldr	r3, [r3, #12]
 801b8a6:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	43da      	mvns	r2, r3
 801b8ac:	683b      	ldr	r3, [r7, #0]
 801b8ae:	401a      	ands	r2, r3
 801b8b0:	6939      	ldr	r1, [r7, #16]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	400b      	ands	r3, r1
 801b8b6:	4313      	orrs	r3, r2
 801b8b8:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 801b8ba:	4b18      	ldr	r3, [pc, #96]	; (801b91c <st25r3916ModifyInterrupts+0x84>)
 801b8bc:	68da      	ldr	r2, [r3, #12]
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	43db      	mvns	r3, r3
 801b8c2:	4013      	ands	r3, r2
 801b8c4:	4a15      	ldr	r2, [pc, #84]	; (801b91c <st25r3916ModifyInterrupts+0x84>)
 801b8c6:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 801b8c8:	4b14      	ldr	r3, [pc, #80]	; (801b91c <st25r3916ModifyInterrupts+0x84>)
 801b8ca:	68da      	ldr	r2, [r3, #12]
 801b8cc:	683b      	ldr	r3, [r7, #0]
 801b8ce:	4313      	orrs	r3, r2
 801b8d0:	4a12      	ldr	r2, [pc, #72]	; (801b91c <st25r3916ModifyInterrupts+0x84>)
 801b8d2:	60d3      	str	r3, [r2, #12]

    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	75fb      	strb	r3, [r7, #23]
 801b8d8:	e019      	b.n	801b90e <st25r3916ModifyInterrupts+0x76>
    {
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 801b8da:	7dfb      	ldrb	r3, [r7, #23]
 801b8dc:	00db      	lsls	r3, r3, #3
 801b8de:	68fa      	ldr	r2, [r7, #12]
 801b8e0:	fa22 f303 	lsr.w	r3, r2, r3
 801b8e4:	b2db      	uxtb	r3, r3
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d00d      	beq.n	801b906 <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }

        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 801b8ea:	7dfb      	ldrb	r3, [r7, #23]
 801b8ec:	3316      	adds	r3, #22
 801b8ee:	b2d8      	uxtb	r0, r3
 801b8f0:	4b0a      	ldr	r3, [pc, #40]	; (801b91c <st25r3916ModifyInterrupts+0x84>)
 801b8f2:	68da      	ldr	r2, [r3, #12]
 801b8f4:	7dfb      	ldrb	r3, [r7, #23]
 801b8f6:	00db      	lsls	r3, r3, #3
 801b8f8:	fa22 f303 	lsr.w	r3, r2, r3
 801b8fc:	b2db      	uxtb	r3, r3
 801b8fe:	4619      	mov	r1, r3
 801b900:	f7ff fc9a 	bl	801b238 <st25r3916WriteRegister>
 801b904:	e000      	b.n	801b908 <st25r3916ModifyInterrupts+0x70>
            continue;
 801b906:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 801b908:	7dfb      	ldrb	r3, [r7, #23]
 801b90a:	3301      	adds	r3, #1
 801b90c:	75fb      	strb	r3, [r7, #23]
 801b90e:	7dfb      	ldrb	r3, [r7, #23]
 801b910:	2b03      	cmp	r3, #3
 801b912:	d9e2      	bls.n	801b8da <st25r3916ModifyInterrupts+0x42>
    }
    return;
 801b914:	bf00      	nop
}
 801b916:	3718      	adds	r7, #24
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}
 801b91c:	20003a20 	.word	0x20003a20

0801b920 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
 801b928:	460b      	mov	r3, r1
 801b92a:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;

    tmrDelay = platformTimerCreate( tmo );
 801b92c:	887b      	ldrh	r3, [r7, #2]
 801b92e:	4618      	mov	r0, r3
 801b930:	f000 f962 	bl	801bbf8 <timerCalculateTimer>
 801b934:	60f8      	str	r0, [r7, #12]

    /* Run until specific interrupt has happen or the timer has expired */
    do
    {
        status = (st25r3916interrupt.status & mask);
 801b936:	4b22      	ldr	r3, [pc, #136]	; (801b9c0 <st25r3916WaitForInterruptsTimed+0xa0>)
 801b938:	689b      	ldr	r3, [r3, #8]
 801b93a:	687a      	ldr	r2, [r7, #4]
 801b93c:	4013      	ands	r3, r2
 801b93e:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 801b940:	68f8      	ldr	r0, [r7, #12]
 801b942:	f000 f967 	bl	801bc14 <timerIsExpired>
 801b946:	4603      	mov	r3, r0
 801b948:	f083 0301 	eor.w	r3, r3, #1
 801b94c:	b2db      	uxtb	r3, r3
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d102      	bne.n	801b958 <st25r3916WaitForInterruptsTimed+0x38>
 801b952:	887b      	ldrh	r3, [r7, #2]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d102      	bne.n	801b95e <st25r3916WaitForInterruptsTimed+0x3e>
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d0eb      	beq.n	801b936 <st25r3916WaitForInterruptsTimed+0x16>

    platformTimerDestroy( tmrDelay );

    status = st25r3916interrupt.status & mask;
 801b95e:	4b18      	ldr	r3, [pc, #96]	; (801b9c0 <st25r3916WaitForInterruptsTimed+0xa0>)
 801b960:	689b      	ldr	r3, [r3, #8]
 801b962:	687a      	ldr	r2, [r7, #4]
 801b964:	4013      	ands	r3, r2
 801b966:	60bb      	str	r3, [r7, #8]

    platformProtectST25RIrqStatus();
 801b968:	4b16      	ldr	r3, [pc, #88]	; (801b9c4 <st25r3916WaitForInterruptsTimed+0xa4>)
 801b96a:	781b      	ldrb	r3, [r3, #0]
 801b96c:	3301      	adds	r3, #1
 801b96e:	b2da      	uxtb	r2, r3
 801b970:	4b14      	ldr	r3, [pc, #80]	; (801b9c4 <st25r3916WaitForInterruptsTimed+0xa4>)
 801b972:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801b974:	f3bf 8f4f 	dsb	sy
}
 801b978:	bf00      	nop
 801b97a:	200a      	movs	r0, #10
 801b97c:	f7ff fee2 	bl	801b744 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801b980:	f3bf 8f4f 	dsb	sy
}
 801b984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b986:	f3bf 8f6f 	isb	sy
}
 801b98a:	bf00      	nop
    st25r3916interrupt.status &= ~status;
 801b98c:	4b0c      	ldr	r3, [pc, #48]	; (801b9c0 <st25r3916WaitForInterruptsTimed+0xa0>)
 801b98e:	689a      	ldr	r2, [r3, #8]
 801b990:	68bb      	ldr	r3, [r7, #8]
 801b992:	43db      	mvns	r3, r3
 801b994:	4013      	ands	r3, r2
 801b996:	4a0a      	ldr	r2, [pc, #40]	; (801b9c0 <st25r3916WaitForInterruptsTimed+0xa0>)
 801b998:	6093      	str	r3, [r2, #8]
    platformUnprotectST25RIrqStatus();
 801b99a:	4b0a      	ldr	r3, [pc, #40]	; (801b9c4 <st25r3916WaitForInterruptsTimed+0xa4>)
 801b99c:	781b      	ldrb	r3, [r3, #0]
 801b99e:	3b01      	subs	r3, #1
 801b9a0:	b2da      	uxtb	r2, r3
 801b9a2:	4b08      	ldr	r3, [pc, #32]	; (801b9c4 <st25r3916WaitForInterruptsTimed+0xa4>)
 801b9a4:	701a      	strb	r2, [r3, #0]
 801b9a6:	4b07      	ldr	r3, [pc, #28]	; (801b9c4 <st25r3916WaitForInterruptsTimed+0xa4>)
 801b9a8:	781b      	ldrb	r3, [r3, #0]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d102      	bne.n	801b9b4 <st25r3916WaitForInterruptsTimed+0x94>
 801b9ae:	200a      	movs	r0, #10
 801b9b0:	f7ff feac 	bl	801b70c <__NVIC_EnableIRQ>

    return status;
 801b9b4:	68bb      	ldr	r3, [r7, #8]
}
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	3710      	adds	r7, #16
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	bd80      	pop	{r7, pc}
 801b9be:	bf00      	nop
 801b9c0:	20003a20 	.word	0x20003a20
 801b9c4:	20002950 	.word	0x20002950

0801b9c8 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b084      	sub	sp, #16
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 801b9d0:	4b19      	ldr	r3, [pc, #100]	; (801ba38 <st25r3916GetInterrupt+0x70>)
 801b9d2:	689b      	ldr	r3, [r3, #8]
 801b9d4:	687a      	ldr	r2, [r7, #4]
 801b9d6:	4013      	ands	r3, r2
 801b9d8:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d025      	beq.n	801ba2c <st25r3916GetInterrupt+0x64>
    {
        platformProtectST25RIrqStatus();
 801b9e0:	4b16      	ldr	r3, [pc, #88]	; (801ba3c <st25r3916GetInterrupt+0x74>)
 801b9e2:	781b      	ldrb	r3, [r3, #0]
 801b9e4:	3301      	adds	r3, #1
 801b9e6:	b2da      	uxtb	r2, r3
 801b9e8:	4b14      	ldr	r3, [pc, #80]	; (801ba3c <st25r3916GetInterrupt+0x74>)
 801b9ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801b9ec:	f3bf 8f4f 	dsb	sy
}
 801b9f0:	bf00      	nop
 801b9f2:	200a      	movs	r0, #10
 801b9f4:	f7ff fea6 	bl	801b744 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801b9f8:	f3bf 8f4f 	dsb	sy
}
 801b9fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b9fe:	f3bf 8f6f 	isb	sy
}
 801ba02:	bf00      	nop
        st25r3916interrupt.status &= ~irqs;
 801ba04:	4b0c      	ldr	r3, [pc, #48]	; (801ba38 <st25r3916GetInterrupt+0x70>)
 801ba06:	689a      	ldr	r2, [r3, #8]
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	43db      	mvns	r3, r3
 801ba0c:	4013      	ands	r3, r2
 801ba0e:	4a0a      	ldr	r2, [pc, #40]	; (801ba38 <st25r3916GetInterrupt+0x70>)
 801ba10:	6093      	str	r3, [r2, #8]
        platformUnprotectST25RIrqStatus();
 801ba12:	4b0a      	ldr	r3, [pc, #40]	; (801ba3c <st25r3916GetInterrupt+0x74>)
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	3b01      	subs	r3, #1
 801ba18:	b2da      	uxtb	r2, r3
 801ba1a:	4b08      	ldr	r3, [pc, #32]	; (801ba3c <st25r3916GetInterrupt+0x74>)
 801ba1c:	701a      	strb	r2, [r3, #0]
 801ba1e:	4b07      	ldr	r3, [pc, #28]	; (801ba3c <st25r3916GetInterrupt+0x74>)
 801ba20:	781b      	ldrb	r3, [r3, #0]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d102      	bne.n	801ba2c <st25r3916GetInterrupt+0x64>
 801ba26:	200a      	movs	r0, #10
 801ba28:	f7ff fe70 	bl	801b70c <__NVIC_EnableIRQ>
    }

    return irqs;
 801ba2c:	68fb      	ldr	r3, [r7, #12]
}
 801ba2e:	4618      	mov	r0, r3
 801ba30:	3710      	adds	r7, #16
 801ba32:	46bd      	mov	sp, r7
 801ba34:	bd80      	pop	{r7, pc}
 801ba36:	bf00      	nop
 801ba38:	20003a20 	.word	0x20003a20
 801ba3c:	20002950 	.word	0x20002950

0801ba40 <st25r3916ClearAndEnableInterrupts>:


/*******************************************************************************/
void st25r3916ClearAndEnableInterrupts( uint32_t mask )
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b082      	sub	sp, #8
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
    st25r3916GetInterrupt( mask );
 801ba48:	6878      	ldr	r0, [r7, #4]
 801ba4a:	f7ff ffbd 	bl	801b9c8 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( mask );
 801ba4e:	6878      	ldr	r0, [r7, #4]
 801ba50:	f000 f804 	bl	801ba5c <st25r3916EnableInterrupts>
}
 801ba54:	bf00      	nop
 801ba56:	3708      	adds	r7, #8
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	bd80      	pop	{r7, pc}

0801ba5c <st25r3916EnableInterrupts>:


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b082      	sub	sp, #8
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 801ba64:	2100      	movs	r1, #0
 801ba66:	6878      	ldr	r0, [r7, #4]
 801ba68:	f7ff ff16 	bl	801b898 <st25r3916ModifyInterrupts>
}
 801ba6c:	bf00      	nop
 801ba6e:	3708      	adds	r7, #8
 801ba70:	46bd      	mov	sp, r7
 801ba72:	bd80      	pop	{r7, pc}

0801ba74 <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 801ba74:	b580      	push	{r7, lr}
 801ba76:	b082      	sub	sp, #8
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 801ba7c:	6879      	ldr	r1, [r7, #4]
 801ba7e:	2000      	movs	r0, #0
 801ba80:	f7ff ff0a 	bl	801b898 <st25r3916ModifyInterrupts>
}
 801ba84:	bf00      	nop
 801ba86:	3708      	adds	r7, #8
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd80      	pop	{r7, pc}

0801ba8c <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	b082      	sub	sp, #8
 801ba90:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 801ba92:	1d3b      	adds	r3, r7, #4
 801ba94:	2204      	movs	r2, #4
 801ba96:	4619      	mov	r1, r3
 801ba98:	201a      	movs	r0, #26
 801ba9a:	f7ff fba0 	bl	801b1de <st25r3916ReadMultipleRegisters>

    platformProtectST25RIrqStatus();
 801ba9e:	4b13      	ldr	r3, [pc, #76]	; (801baec <st25r3916ClearInterrupts+0x60>)
 801baa0:	781b      	ldrb	r3, [r3, #0]
 801baa2:	3301      	adds	r3, #1
 801baa4:	b2da      	uxtb	r2, r3
 801baa6:	4b11      	ldr	r3, [pc, #68]	; (801baec <st25r3916ClearInterrupts+0x60>)
 801baa8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801baaa:	f3bf 8f4f 	dsb	sy
}
 801baae:	bf00      	nop
 801bab0:	200a      	movs	r0, #10
 801bab2:	f7ff fe47 	bl	801b744 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801bab6:	f3bf 8f4f 	dsb	sy
}
 801baba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801babc:	f3bf 8f6f 	isb	sy
}
 801bac0:	bf00      	nop
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 801bac2:	4b0b      	ldr	r3, [pc, #44]	; (801baf0 <st25r3916ClearInterrupts+0x64>)
 801bac4:	2200      	movs	r2, #0
 801bac6:	609a      	str	r2, [r3, #8]
    platformUnprotectST25RIrqStatus();
 801bac8:	4b08      	ldr	r3, [pc, #32]	; (801baec <st25r3916ClearInterrupts+0x60>)
 801baca:	781b      	ldrb	r3, [r3, #0]
 801bacc:	3b01      	subs	r3, #1
 801bace:	b2da      	uxtb	r2, r3
 801bad0:	4b06      	ldr	r3, [pc, #24]	; (801baec <st25r3916ClearInterrupts+0x60>)
 801bad2:	701a      	strb	r2, [r3, #0]
 801bad4:	4b05      	ldr	r3, [pc, #20]	; (801baec <st25r3916ClearInterrupts+0x60>)
 801bad6:	781b      	ldrb	r3, [r3, #0]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d103      	bne.n	801bae4 <st25r3916ClearInterrupts+0x58>
 801badc:	200a      	movs	r0, #10
 801bade:	f7ff fe15 	bl	801b70c <__NVIC_EnableIRQ>
    return;
 801bae2:	bf00      	nop
 801bae4:	bf00      	nop
}
 801bae6:	3708      	adds	r7, #8
 801bae8:	46bd      	mov	sp, r7
 801baea:	bd80      	pop	{r7, pc}
 801baec:	20002950 	.word	0x20002950
 801baf0:	20003a20 	.word	0x20003a20

0801baf4 <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();

    st25r3916ledRxOff();
    st25r3916ledFieldOff();
 801baf8:	2200      	movs	r2, #0
 801bafa:	2180      	movs	r1, #128	; 0x80
 801bafc:	4802      	ldr	r0, [pc, #8]	; (801bb08 <st25r3916ledInit+0x14>)
 801bafe:	f7e7 fe3e 	bl	800377e <HAL_GPIO_WritePin>
}
 801bb02:	bf00      	nop
 801bb04:	bd80      	pop	{r7, pc}
 801bb06:	bf00      	nop
 801bb08:	40012000 	.word	0x40012000

0801bb0c <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b082      	sub	sp, #8
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_TXE | ST25R3916_IRQ_MASK_CAT) ) != 0U )
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	f403 7302 	and.w	r3, r3, #520	; 0x208
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d004      	beq.n	801bb28 <st25r3916ledEvtIrq+0x1c>
    {
        st25r3916ledFieldOn();
 801bb1e:	2201      	movs	r2, #1
 801bb20:	2180      	movs	r1, #128	; 0x80
 801bb22:	4803      	ldr	r0, [pc, #12]	; (801bb30 <st25r3916ledEvtIrq+0x24>)
 801bb24:	f7e7 fe2b 	bl	800377e <HAL_GPIO_WritePin>
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U )
    {
        st25r3916ledRxOff();
    }
}
 801bb28:	bf00      	nop
 801bb2a:	3708      	adds	r7, #8
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}
 801bb30:	40012000 	.word	0x40012000

0801bb34 <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b082      	sub	sp, #8
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	4603      	mov	r3, r0
 801bb3c:	460a      	mov	r2, r1
 801bb3e:	71fb      	strb	r3, [r7, #7]
 801bb40:	4613      	mov	r3, r2
 801bb42:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 801bb44:	79fb      	ldrb	r3, [r7, #7]
 801bb46:	2b02      	cmp	r3, #2
 801bb48:	d110      	bne.n	801bb6c <st25r3916ledEvtWrReg+0x38>
    {
        if( (ST25R3916_REG_OP_CONTROL_tx_en & val) != 0U )
 801bb4a:	79bb      	ldrb	r3, [r7, #6]
 801bb4c:	f003 0308 	and.w	r3, r3, #8
 801bb50:	b2db      	uxtb	r3, r3
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d005      	beq.n	801bb62 <st25r3916ledEvtWrReg+0x2e>
        {
            st25r3916ledFieldOn();
 801bb56:	2201      	movs	r2, #1
 801bb58:	2180      	movs	r1, #128	; 0x80
 801bb5a:	4806      	ldr	r0, [pc, #24]	; (801bb74 <st25r3916ledEvtWrReg+0x40>)
 801bb5c:	f7e7 fe0f 	bl	800377e <HAL_GPIO_WritePin>
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 801bb60:	e004      	b.n	801bb6c <st25r3916ledEvtWrReg+0x38>
            st25r3916ledFieldOff();
 801bb62:	2200      	movs	r2, #0
 801bb64:	2180      	movs	r1, #128	; 0x80
 801bb66:	4803      	ldr	r0, [pc, #12]	; (801bb74 <st25r3916ledEvtWrReg+0x40>)
 801bb68:	f7e7 fe09 	bl	800377e <HAL_GPIO_WritePin>
}
 801bb6c:	bf00      	nop
 801bb6e:	3708      	adds	r7, #8
 801bb70:	46bd      	mov	sp, r7
 801bb72:	bd80      	pop	{r7, pc}
 801bb74:	40012000 	.word	0x40012000

0801bb78 <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b084      	sub	sp, #16
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	4603      	mov	r3, r0
 801bb80:	6039      	str	r1, [r7, #0]
 801bb82:	71fb      	strb	r3, [r7, #7]
 801bb84:	4613      	mov	r3, r2
 801bb86:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    for(i=0; i<(len); i++)
 801bb88:	2300      	movs	r3, #0
 801bb8a:	73fb      	strb	r3, [r7, #15]
 801bb8c:	e00d      	b.n	801bbaa <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 801bb8e:	79fa      	ldrb	r2, [r7, #7]
 801bb90:	7bfb      	ldrb	r3, [r7, #15]
 801bb92:	4413      	add	r3, r2
 801bb94:	b2d8      	uxtb	r0, r3
 801bb96:	7bfb      	ldrb	r3, [r7, #15]
 801bb98:	683a      	ldr	r2, [r7, #0]
 801bb9a:	4413      	add	r3, r2
 801bb9c:	781b      	ldrb	r3, [r3, #0]
 801bb9e:	4619      	mov	r1, r3
 801bba0:	f7ff ffc8 	bl	801bb34 <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 801bba4:	7bfb      	ldrb	r3, [r7, #15]
 801bba6:	3301      	adds	r3, #1
 801bba8:	73fb      	strb	r3, [r7, #15]
 801bbaa:	7bfa      	ldrb	r2, [r7, #15]
 801bbac:	79bb      	ldrb	r3, [r7, #6]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	d3ed      	bcc.n	801bb8e <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 801bbb2:	bf00      	nop
 801bbb4:	bf00      	nop
 801bbb6:	3710      	adds	r7, #16
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bd80      	pop	{r7, pc}

0801bbbc <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 801bbbc:	b580      	push	{r7, lr}
 801bbbe:	b082      	sub	sp, #8
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	4603      	mov	r3, r0
 801bbc4:	71fb      	strb	r3, [r7, #7]
    if( (cmd >= ST25R3916_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 801bbc6:	79fb      	ldrb	r3, [r7, #7]
 801bbc8:	2bc3      	cmp	r3, #195	; 0xc3
 801bbca:	d907      	bls.n	801bbdc <st25r3916ledEvtCmd+0x20>
 801bbcc:	79fb      	ldrb	r3, [r7, #7]
 801bbce:	2bc9      	cmp	r3, #201	; 0xc9
 801bbd0:	d804      	bhi.n	801bbdc <st25r3916ledEvtCmd+0x20>
    {
        st25r3916ledFieldOff();
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	2180      	movs	r1, #128	; 0x80
 801bbd6:	4807      	ldr	r0, [pc, #28]	; (801bbf4 <st25r3916ledEvtCmd+0x38>)
 801bbd8:	f7e7 fdd1 	bl	800377e <HAL_GPIO_WritePin>
    if( cmd == ST25R3916_CMD_UNMASK_RECEIVE_DATA )
    {
        st25r3916ledRxOff();
    }

    if( cmd == ST25R3916_CMD_SET_DEFAULT )
 801bbdc:	79fb      	ldrb	r3, [r7, #7]
 801bbde:	2bc1      	cmp	r3, #193	; 0xc1
 801bbe0:	d104      	bne.n	801bbec <st25r3916ledEvtCmd+0x30>
    {
        st25r3916ledFieldOff();
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	2180      	movs	r1, #128	; 0x80
 801bbe6:	4803      	ldr	r0, [pc, #12]	; (801bbf4 <st25r3916ledEvtCmd+0x38>)
 801bbe8:	f7e7 fdc9 	bl	800377e <HAL_GPIO_WritePin>
        st25r3916ledRxOff();
    }
}
 801bbec:	bf00      	nop
 801bbee:	3708      	adds	r7, #8
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	bd80      	pop	{r7, pc}
 801bbf4:	40012000 	.word	0x40012000

0801bbf8 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b082      	sub	sp, #8
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	4603      	mov	r3, r0
 801bc00:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 801bc02:	f7e7 f9b3 	bl	8002f6c <HAL_GetTick>
 801bc06:	4602      	mov	r2, r0
 801bc08:	88fb      	ldrh	r3, [r7, #6]
 801bc0a:	4413      	add	r3, r2
}
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	3708      	adds	r7, #8
 801bc10:	46bd      	mov	sp, r7
 801bc12:	bd80      	pop	{r7, pc}

0801bc14 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b084      	sub	sp, #16
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;

  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 801bc1c:	f7e7 f9a6 	bl	8002f6c <HAL_GetTick>
 801bc20:	4602      	mov	r2, r0
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	1a9b      	subs	r3, r3, r2
 801bc26:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */

  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 801bc2c:	68bb      	ldr	r3, [r7, #8]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	da01      	bge.n	801bc36 <timerIsExpired+0x22>
  {
    return true;
 801bc32:	2301      	movs	r3, #1
 801bc34:	e000      	b.n	801bc38 <timerIsExpired+0x24>
  }

  return false;
 801bc36:	2300      	movs	r3, #0
}
 801bc38:	4618      	mov	r0, r3
 801bc3a:	3710      	adds	r7, #16
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bd80      	pop	{r7, pc}

0801bc40 <__errno>:
 801bc40:	4b01      	ldr	r3, [pc, #4]	; (801bc48 <__errno+0x8>)
 801bc42:	6818      	ldr	r0, [r3, #0]
 801bc44:	4770      	bx	lr
 801bc46:	bf00      	nop
 801bc48:	2000014c 	.word	0x2000014c

0801bc4c <__libc_init_array>:
 801bc4c:	b570      	push	{r4, r5, r6, lr}
 801bc4e:	2600      	movs	r6, #0
 801bc50:	4d0c      	ldr	r5, [pc, #48]	; (801bc84 <__libc_init_array+0x38>)
 801bc52:	4c0d      	ldr	r4, [pc, #52]	; (801bc88 <__libc_init_array+0x3c>)
 801bc54:	1b64      	subs	r4, r4, r5
 801bc56:	10a4      	asrs	r4, r4, #2
 801bc58:	42a6      	cmp	r6, r4
 801bc5a:	d109      	bne.n	801bc70 <__libc_init_array+0x24>
 801bc5c:	f001 f88a 	bl	801cd74 <_init>
 801bc60:	2600      	movs	r6, #0
 801bc62:	4d0a      	ldr	r5, [pc, #40]	; (801bc8c <__libc_init_array+0x40>)
 801bc64:	4c0a      	ldr	r4, [pc, #40]	; (801bc90 <__libc_init_array+0x44>)
 801bc66:	1b64      	subs	r4, r4, r5
 801bc68:	10a4      	asrs	r4, r4, #2
 801bc6a:	42a6      	cmp	r6, r4
 801bc6c:	d105      	bne.n	801bc7a <__libc_init_array+0x2e>
 801bc6e:	bd70      	pop	{r4, r5, r6, pc}
 801bc70:	f855 3b04 	ldr.w	r3, [r5], #4
 801bc74:	4798      	blx	r3
 801bc76:	3601      	adds	r6, #1
 801bc78:	e7ee      	b.n	801bc58 <__libc_init_array+0xc>
 801bc7a:	f855 3b04 	ldr.w	r3, [r5], #4
 801bc7e:	4798      	blx	r3
 801bc80:	3601      	adds	r6, #1
 801bc82:	e7f2      	b.n	801bc6a <__libc_init_array+0x1e>
 801bc84:	0801ea2c 	.word	0x0801ea2c
 801bc88:	0801ea2c 	.word	0x0801ea2c
 801bc8c:	0801ea2c 	.word	0x0801ea2c
 801bc90:	0801ea30 	.word	0x0801ea30

0801bc94 <memcmp>:
 801bc94:	b530      	push	{r4, r5, lr}
 801bc96:	2400      	movs	r4, #0
 801bc98:	3901      	subs	r1, #1
 801bc9a:	42a2      	cmp	r2, r4
 801bc9c:	d101      	bne.n	801bca2 <memcmp+0xe>
 801bc9e:	2000      	movs	r0, #0
 801bca0:	e005      	b.n	801bcae <memcmp+0x1a>
 801bca2:	5d03      	ldrb	r3, [r0, r4]
 801bca4:	3401      	adds	r4, #1
 801bca6:	5d0d      	ldrb	r5, [r1, r4]
 801bca8:	42ab      	cmp	r3, r5
 801bcaa:	d0f6      	beq.n	801bc9a <memcmp+0x6>
 801bcac:	1b58      	subs	r0, r3, r5
 801bcae:	bd30      	pop	{r4, r5, pc}

0801bcb0 <memcpy>:
 801bcb0:	440a      	add	r2, r1
 801bcb2:	4291      	cmp	r1, r2
 801bcb4:	f100 33ff 	add.w	r3, r0, #4294967295
 801bcb8:	d100      	bne.n	801bcbc <memcpy+0xc>
 801bcba:	4770      	bx	lr
 801bcbc:	b510      	push	{r4, lr}
 801bcbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bcc2:	4291      	cmp	r1, r2
 801bcc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bcc8:	d1f9      	bne.n	801bcbe <memcpy+0xe>
 801bcca:	bd10      	pop	{r4, pc}

0801bccc <memmove>:
 801bccc:	4288      	cmp	r0, r1
 801bcce:	b510      	push	{r4, lr}
 801bcd0:	eb01 0402 	add.w	r4, r1, r2
 801bcd4:	d902      	bls.n	801bcdc <memmove+0x10>
 801bcd6:	4284      	cmp	r4, r0
 801bcd8:	4623      	mov	r3, r4
 801bcda:	d807      	bhi.n	801bcec <memmove+0x20>
 801bcdc:	1e43      	subs	r3, r0, #1
 801bcde:	42a1      	cmp	r1, r4
 801bce0:	d008      	beq.n	801bcf4 <memmove+0x28>
 801bce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bcea:	e7f8      	b.n	801bcde <memmove+0x12>
 801bcec:	4601      	mov	r1, r0
 801bcee:	4402      	add	r2, r0
 801bcf0:	428a      	cmp	r2, r1
 801bcf2:	d100      	bne.n	801bcf6 <memmove+0x2a>
 801bcf4:	bd10      	pop	{r4, pc}
 801bcf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bcfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bcfe:	e7f7      	b.n	801bcf0 <memmove+0x24>

0801bd00 <memset>:
 801bd00:	4603      	mov	r3, r0
 801bd02:	4402      	add	r2, r0
 801bd04:	4293      	cmp	r3, r2
 801bd06:	d100      	bne.n	801bd0a <memset+0xa>
 801bd08:	4770      	bx	lr
 801bd0a:	f803 1b01 	strb.w	r1, [r3], #1
 801bd0e:	e7f9      	b.n	801bd04 <memset+0x4>

0801bd10 <iprintf>:
 801bd10:	b40f      	push	{r0, r1, r2, r3}
 801bd12:	4b0a      	ldr	r3, [pc, #40]	; (801bd3c <iprintf+0x2c>)
 801bd14:	b513      	push	{r0, r1, r4, lr}
 801bd16:	681c      	ldr	r4, [r3, #0]
 801bd18:	b124      	cbz	r4, 801bd24 <iprintf+0x14>
 801bd1a:	69a3      	ldr	r3, [r4, #24]
 801bd1c:	b913      	cbnz	r3, 801bd24 <iprintf+0x14>
 801bd1e:	4620      	mov	r0, r4
 801bd20:	f000 fa72 	bl	801c208 <__sinit>
 801bd24:	ab05      	add	r3, sp, #20
 801bd26:	4620      	mov	r0, r4
 801bd28:	9a04      	ldr	r2, [sp, #16]
 801bd2a:	68a1      	ldr	r1, [r4, #8]
 801bd2c:	9301      	str	r3, [sp, #4]
 801bd2e:	f000 fc3d 	bl	801c5ac <_vfiprintf_r>
 801bd32:	b002      	add	sp, #8
 801bd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd38:	b004      	add	sp, #16
 801bd3a:	4770      	bx	lr
 801bd3c:	2000014c 	.word	0x2000014c

0801bd40 <putchar>:
 801bd40:	b538      	push	{r3, r4, r5, lr}
 801bd42:	4b08      	ldr	r3, [pc, #32]	; (801bd64 <putchar+0x24>)
 801bd44:	4605      	mov	r5, r0
 801bd46:	681c      	ldr	r4, [r3, #0]
 801bd48:	b124      	cbz	r4, 801bd54 <putchar+0x14>
 801bd4a:	69a3      	ldr	r3, [r4, #24]
 801bd4c:	b913      	cbnz	r3, 801bd54 <putchar+0x14>
 801bd4e:	4620      	mov	r0, r4
 801bd50:	f000 fa5a 	bl	801c208 <__sinit>
 801bd54:	4629      	mov	r1, r5
 801bd56:	4620      	mov	r0, r4
 801bd58:	68a2      	ldr	r2, [r4, #8]
 801bd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd5e:	f000 beeb 	b.w	801cb38 <_putc_r>
 801bd62:	bf00      	nop
 801bd64:	2000014c 	.word	0x2000014c

0801bd68 <_puts_r>:
 801bd68:	b570      	push	{r4, r5, r6, lr}
 801bd6a:	460e      	mov	r6, r1
 801bd6c:	4605      	mov	r5, r0
 801bd6e:	b118      	cbz	r0, 801bd78 <_puts_r+0x10>
 801bd70:	6983      	ldr	r3, [r0, #24]
 801bd72:	b90b      	cbnz	r3, 801bd78 <_puts_r+0x10>
 801bd74:	f000 fa48 	bl	801c208 <__sinit>
 801bd78:	69ab      	ldr	r3, [r5, #24]
 801bd7a:	68ac      	ldr	r4, [r5, #8]
 801bd7c:	b913      	cbnz	r3, 801bd84 <_puts_r+0x1c>
 801bd7e:	4628      	mov	r0, r5
 801bd80:	f000 fa42 	bl	801c208 <__sinit>
 801bd84:	4b2c      	ldr	r3, [pc, #176]	; (801be38 <_puts_r+0xd0>)
 801bd86:	429c      	cmp	r4, r3
 801bd88:	d120      	bne.n	801bdcc <_puts_r+0x64>
 801bd8a:	686c      	ldr	r4, [r5, #4]
 801bd8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd8e:	07db      	lsls	r3, r3, #31
 801bd90:	d405      	bmi.n	801bd9e <_puts_r+0x36>
 801bd92:	89a3      	ldrh	r3, [r4, #12]
 801bd94:	0598      	lsls	r0, r3, #22
 801bd96:	d402      	bmi.n	801bd9e <_puts_r+0x36>
 801bd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd9a:	f000 fad3 	bl	801c344 <__retarget_lock_acquire_recursive>
 801bd9e:	89a3      	ldrh	r3, [r4, #12]
 801bda0:	0719      	lsls	r1, r3, #28
 801bda2:	d51d      	bpl.n	801bde0 <_puts_r+0x78>
 801bda4:	6923      	ldr	r3, [r4, #16]
 801bda6:	b1db      	cbz	r3, 801bde0 <_puts_r+0x78>
 801bda8:	3e01      	subs	r6, #1
 801bdaa:	68a3      	ldr	r3, [r4, #8]
 801bdac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bdb0:	3b01      	subs	r3, #1
 801bdb2:	60a3      	str	r3, [r4, #8]
 801bdb4:	bb39      	cbnz	r1, 801be06 <_puts_r+0x9e>
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	da38      	bge.n	801be2c <_puts_r+0xc4>
 801bdba:	4622      	mov	r2, r4
 801bdbc:	210a      	movs	r1, #10
 801bdbe:	4628      	mov	r0, r5
 801bdc0:	f000 f848 	bl	801be54 <__swbuf_r>
 801bdc4:	3001      	adds	r0, #1
 801bdc6:	d011      	beq.n	801bdec <_puts_r+0x84>
 801bdc8:	250a      	movs	r5, #10
 801bdca:	e011      	b.n	801bdf0 <_puts_r+0x88>
 801bdcc:	4b1b      	ldr	r3, [pc, #108]	; (801be3c <_puts_r+0xd4>)
 801bdce:	429c      	cmp	r4, r3
 801bdd0:	d101      	bne.n	801bdd6 <_puts_r+0x6e>
 801bdd2:	68ac      	ldr	r4, [r5, #8]
 801bdd4:	e7da      	b.n	801bd8c <_puts_r+0x24>
 801bdd6:	4b1a      	ldr	r3, [pc, #104]	; (801be40 <_puts_r+0xd8>)
 801bdd8:	429c      	cmp	r4, r3
 801bdda:	bf08      	it	eq
 801bddc:	68ec      	ldreq	r4, [r5, #12]
 801bdde:	e7d5      	b.n	801bd8c <_puts_r+0x24>
 801bde0:	4621      	mov	r1, r4
 801bde2:	4628      	mov	r0, r5
 801bde4:	f000 f888 	bl	801bef8 <__swsetup_r>
 801bde8:	2800      	cmp	r0, #0
 801bdea:	d0dd      	beq.n	801bda8 <_puts_r+0x40>
 801bdec:	f04f 35ff 	mov.w	r5, #4294967295
 801bdf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bdf2:	07da      	lsls	r2, r3, #31
 801bdf4:	d405      	bmi.n	801be02 <_puts_r+0x9a>
 801bdf6:	89a3      	ldrh	r3, [r4, #12]
 801bdf8:	059b      	lsls	r3, r3, #22
 801bdfa:	d402      	bmi.n	801be02 <_puts_r+0x9a>
 801bdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bdfe:	f000 faa2 	bl	801c346 <__retarget_lock_release_recursive>
 801be02:	4628      	mov	r0, r5
 801be04:	bd70      	pop	{r4, r5, r6, pc}
 801be06:	2b00      	cmp	r3, #0
 801be08:	da04      	bge.n	801be14 <_puts_r+0xac>
 801be0a:	69a2      	ldr	r2, [r4, #24]
 801be0c:	429a      	cmp	r2, r3
 801be0e:	dc06      	bgt.n	801be1e <_puts_r+0xb6>
 801be10:	290a      	cmp	r1, #10
 801be12:	d004      	beq.n	801be1e <_puts_r+0xb6>
 801be14:	6823      	ldr	r3, [r4, #0]
 801be16:	1c5a      	adds	r2, r3, #1
 801be18:	6022      	str	r2, [r4, #0]
 801be1a:	7019      	strb	r1, [r3, #0]
 801be1c:	e7c5      	b.n	801bdaa <_puts_r+0x42>
 801be1e:	4622      	mov	r2, r4
 801be20:	4628      	mov	r0, r5
 801be22:	f000 f817 	bl	801be54 <__swbuf_r>
 801be26:	3001      	adds	r0, #1
 801be28:	d1bf      	bne.n	801bdaa <_puts_r+0x42>
 801be2a:	e7df      	b.n	801bdec <_puts_r+0x84>
 801be2c:	250a      	movs	r5, #10
 801be2e:	6823      	ldr	r3, [r4, #0]
 801be30:	1c5a      	adds	r2, r3, #1
 801be32:	6022      	str	r2, [r4, #0]
 801be34:	701d      	strb	r5, [r3, #0]
 801be36:	e7db      	b.n	801bdf0 <_puts_r+0x88>
 801be38:	0801e9b8 	.word	0x0801e9b8
 801be3c:	0801e9d8 	.word	0x0801e9d8
 801be40:	0801e998 	.word	0x0801e998

0801be44 <puts>:
 801be44:	4b02      	ldr	r3, [pc, #8]	; (801be50 <puts+0xc>)
 801be46:	4601      	mov	r1, r0
 801be48:	6818      	ldr	r0, [r3, #0]
 801be4a:	f7ff bf8d 	b.w	801bd68 <_puts_r>
 801be4e:	bf00      	nop
 801be50:	2000014c 	.word	0x2000014c

0801be54 <__swbuf_r>:
 801be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be56:	460e      	mov	r6, r1
 801be58:	4614      	mov	r4, r2
 801be5a:	4605      	mov	r5, r0
 801be5c:	b118      	cbz	r0, 801be66 <__swbuf_r+0x12>
 801be5e:	6983      	ldr	r3, [r0, #24]
 801be60:	b90b      	cbnz	r3, 801be66 <__swbuf_r+0x12>
 801be62:	f000 f9d1 	bl	801c208 <__sinit>
 801be66:	4b21      	ldr	r3, [pc, #132]	; (801beec <__swbuf_r+0x98>)
 801be68:	429c      	cmp	r4, r3
 801be6a:	d12b      	bne.n	801bec4 <__swbuf_r+0x70>
 801be6c:	686c      	ldr	r4, [r5, #4]
 801be6e:	69a3      	ldr	r3, [r4, #24]
 801be70:	60a3      	str	r3, [r4, #8]
 801be72:	89a3      	ldrh	r3, [r4, #12]
 801be74:	071a      	lsls	r2, r3, #28
 801be76:	d52f      	bpl.n	801bed8 <__swbuf_r+0x84>
 801be78:	6923      	ldr	r3, [r4, #16]
 801be7a:	b36b      	cbz	r3, 801bed8 <__swbuf_r+0x84>
 801be7c:	6923      	ldr	r3, [r4, #16]
 801be7e:	6820      	ldr	r0, [r4, #0]
 801be80:	b2f6      	uxtb	r6, r6
 801be82:	1ac0      	subs	r0, r0, r3
 801be84:	6963      	ldr	r3, [r4, #20]
 801be86:	4637      	mov	r7, r6
 801be88:	4283      	cmp	r3, r0
 801be8a:	dc04      	bgt.n	801be96 <__swbuf_r+0x42>
 801be8c:	4621      	mov	r1, r4
 801be8e:	4628      	mov	r0, r5
 801be90:	f000 f926 	bl	801c0e0 <_fflush_r>
 801be94:	bb30      	cbnz	r0, 801bee4 <__swbuf_r+0x90>
 801be96:	68a3      	ldr	r3, [r4, #8]
 801be98:	3001      	adds	r0, #1
 801be9a:	3b01      	subs	r3, #1
 801be9c:	60a3      	str	r3, [r4, #8]
 801be9e:	6823      	ldr	r3, [r4, #0]
 801bea0:	1c5a      	adds	r2, r3, #1
 801bea2:	6022      	str	r2, [r4, #0]
 801bea4:	701e      	strb	r6, [r3, #0]
 801bea6:	6963      	ldr	r3, [r4, #20]
 801bea8:	4283      	cmp	r3, r0
 801beaa:	d004      	beq.n	801beb6 <__swbuf_r+0x62>
 801beac:	89a3      	ldrh	r3, [r4, #12]
 801beae:	07db      	lsls	r3, r3, #31
 801beb0:	d506      	bpl.n	801bec0 <__swbuf_r+0x6c>
 801beb2:	2e0a      	cmp	r6, #10
 801beb4:	d104      	bne.n	801bec0 <__swbuf_r+0x6c>
 801beb6:	4621      	mov	r1, r4
 801beb8:	4628      	mov	r0, r5
 801beba:	f000 f911 	bl	801c0e0 <_fflush_r>
 801bebe:	b988      	cbnz	r0, 801bee4 <__swbuf_r+0x90>
 801bec0:	4638      	mov	r0, r7
 801bec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bec4:	4b0a      	ldr	r3, [pc, #40]	; (801bef0 <__swbuf_r+0x9c>)
 801bec6:	429c      	cmp	r4, r3
 801bec8:	d101      	bne.n	801bece <__swbuf_r+0x7a>
 801beca:	68ac      	ldr	r4, [r5, #8]
 801becc:	e7cf      	b.n	801be6e <__swbuf_r+0x1a>
 801bece:	4b09      	ldr	r3, [pc, #36]	; (801bef4 <__swbuf_r+0xa0>)
 801bed0:	429c      	cmp	r4, r3
 801bed2:	bf08      	it	eq
 801bed4:	68ec      	ldreq	r4, [r5, #12]
 801bed6:	e7ca      	b.n	801be6e <__swbuf_r+0x1a>
 801bed8:	4621      	mov	r1, r4
 801beda:	4628      	mov	r0, r5
 801bedc:	f000 f80c 	bl	801bef8 <__swsetup_r>
 801bee0:	2800      	cmp	r0, #0
 801bee2:	d0cb      	beq.n	801be7c <__swbuf_r+0x28>
 801bee4:	f04f 37ff 	mov.w	r7, #4294967295
 801bee8:	e7ea      	b.n	801bec0 <__swbuf_r+0x6c>
 801beea:	bf00      	nop
 801beec:	0801e9b8 	.word	0x0801e9b8
 801bef0:	0801e9d8 	.word	0x0801e9d8
 801bef4:	0801e998 	.word	0x0801e998

0801bef8 <__swsetup_r>:
 801bef8:	4b32      	ldr	r3, [pc, #200]	; (801bfc4 <__swsetup_r+0xcc>)
 801befa:	b570      	push	{r4, r5, r6, lr}
 801befc:	681d      	ldr	r5, [r3, #0]
 801befe:	4606      	mov	r6, r0
 801bf00:	460c      	mov	r4, r1
 801bf02:	b125      	cbz	r5, 801bf0e <__swsetup_r+0x16>
 801bf04:	69ab      	ldr	r3, [r5, #24]
 801bf06:	b913      	cbnz	r3, 801bf0e <__swsetup_r+0x16>
 801bf08:	4628      	mov	r0, r5
 801bf0a:	f000 f97d 	bl	801c208 <__sinit>
 801bf0e:	4b2e      	ldr	r3, [pc, #184]	; (801bfc8 <__swsetup_r+0xd0>)
 801bf10:	429c      	cmp	r4, r3
 801bf12:	d10f      	bne.n	801bf34 <__swsetup_r+0x3c>
 801bf14:	686c      	ldr	r4, [r5, #4]
 801bf16:	89a3      	ldrh	r3, [r4, #12]
 801bf18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf1c:	0719      	lsls	r1, r3, #28
 801bf1e:	d42c      	bmi.n	801bf7a <__swsetup_r+0x82>
 801bf20:	06dd      	lsls	r5, r3, #27
 801bf22:	d411      	bmi.n	801bf48 <__swsetup_r+0x50>
 801bf24:	2309      	movs	r3, #9
 801bf26:	6033      	str	r3, [r6, #0]
 801bf28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bf2c:	f04f 30ff 	mov.w	r0, #4294967295
 801bf30:	81a3      	strh	r3, [r4, #12]
 801bf32:	e03e      	b.n	801bfb2 <__swsetup_r+0xba>
 801bf34:	4b25      	ldr	r3, [pc, #148]	; (801bfcc <__swsetup_r+0xd4>)
 801bf36:	429c      	cmp	r4, r3
 801bf38:	d101      	bne.n	801bf3e <__swsetup_r+0x46>
 801bf3a:	68ac      	ldr	r4, [r5, #8]
 801bf3c:	e7eb      	b.n	801bf16 <__swsetup_r+0x1e>
 801bf3e:	4b24      	ldr	r3, [pc, #144]	; (801bfd0 <__swsetup_r+0xd8>)
 801bf40:	429c      	cmp	r4, r3
 801bf42:	bf08      	it	eq
 801bf44:	68ec      	ldreq	r4, [r5, #12]
 801bf46:	e7e6      	b.n	801bf16 <__swsetup_r+0x1e>
 801bf48:	0758      	lsls	r0, r3, #29
 801bf4a:	d512      	bpl.n	801bf72 <__swsetup_r+0x7a>
 801bf4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf4e:	b141      	cbz	r1, 801bf62 <__swsetup_r+0x6a>
 801bf50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bf54:	4299      	cmp	r1, r3
 801bf56:	d002      	beq.n	801bf5e <__swsetup_r+0x66>
 801bf58:	4630      	mov	r0, r6
 801bf5a:	f000 fa59 	bl	801c410 <_free_r>
 801bf5e:	2300      	movs	r3, #0
 801bf60:	6363      	str	r3, [r4, #52]	; 0x34
 801bf62:	89a3      	ldrh	r3, [r4, #12]
 801bf64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bf68:	81a3      	strh	r3, [r4, #12]
 801bf6a:	2300      	movs	r3, #0
 801bf6c:	6063      	str	r3, [r4, #4]
 801bf6e:	6923      	ldr	r3, [r4, #16]
 801bf70:	6023      	str	r3, [r4, #0]
 801bf72:	89a3      	ldrh	r3, [r4, #12]
 801bf74:	f043 0308 	orr.w	r3, r3, #8
 801bf78:	81a3      	strh	r3, [r4, #12]
 801bf7a:	6923      	ldr	r3, [r4, #16]
 801bf7c:	b94b      	cbnz	r3, 801bf92 <__swsetup_r+0x9a>
 801bf7e:	89a3      	ldrh	r3, [r4, #12]
 801bf80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bf84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf88:	d003      	beq.n	801bf92 <__swsetup_r+0x9a>
 801bf8a:	4621      	mov	r1, r4
 801bf8c:	4630      	mov	r0, r6
 801bf8e:	f000 f9ff 	bl	801c390 <__smakebuf_r>
 801bf92:	89a0      	ldrh	r0, [r4, #12]
 801bf94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf98:	f010 0301 	ands.w	r3, r0, #1
 801bf9c:	d00a      	beq.n	801bfb4 <__swsetup_r+0xbc>
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	60a3      	str	r3, [r4, #8]
 801bfa2:	6963      	ldr	r3, [r4, #20]
 801bfa4:	425b      	negs	r3, r3
 801bfa6:	61a3      	str	r3, [r4, #24]
 801bfa8:	6923      	ldr	r3, [r4, #16]
 801bfaa:	b943      	cbnz	r3, 801bfbe <__swsetup_r+0xc6>
 801bfac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bfb0:	d1ba      	bne.n	801bf28 <__swsetup_r+0x30>
 801bfb2:	bd70      	pop	{r4, r5, r6, pc}
 801bfb4:	0781      	lsls	r1, r0, #30
 801bfb6:	bf58      	it	pl
 801bfb8:	6963      	ldrpl	r3, [r4, #20]
 801bfba:	60a3      	str	r3, [r4, #8]
 801bfbc:	e7f4      	b.n	801bfa8 <__swsetup_r+0xb0>
 801bfbe:	2000      	movs	r0, #0
 801bfc0:	e7f7      	b.n	801bfb2 <__swsetup_r+0xba>
 801bfc2:	bf00      	nop
 801bfc4:	2000014c 	.word	0x2000014c
 801bfc8:	0801e9b8 	.word	0x0801e9b8
 801bfcc:	0801e9d8 	.word	0x0801e9d8
 801bfd0:	0801e998 	.word	0x0801e998

0801bfd4 <__sflush_r>:
 801bfd4:	898a      	ldrh	r2, [r1, #12]
 801bfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfda:	4605      	mov	r5, r0
 801bfdc:	0710      	lsls	r0, r2, #28
 801bfde:	460c      	mov	r4, r1
 801bfe0:	d458      	bmi.n	801c094 <__sflush_r+0xc0>
 801bfe2:	684b      	ldr	r3, [r1, #4]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	dc05      	bgt.n	801bff4 <__sflush_r+0x20>
 801bfe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	dc02      	bgt.n	801bff4 <__sflush_r+0x20>
 801bfee:	2000      	movs	r0, #0
 801bff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bff6:	2e00      	cmp	r6, #0
 801bff8:	d0f9      	beq.n	801bfee <__sflush_r+0x1a>
 801bffa:	2300      	movs	r3, #0
 801bffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c000:	682f      	ldr	r7, [r5, #0]
 801c002:	602b      	str	r3, [r5, #0]
 801c004:	d032      	beq.n	801c06c <__sflush_r+0x98>
 801c006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c008:	89a3      	ldrh	r3, [r4, #12]
 801c00a:	075a      	lsls	r2, r3, #29
 801c00c:	d505      	bpl.n	801c01a <__sflush_r+0x46>
 801c00e:	6863      	ldr	r3, [r4, #4]
 801c010:	1ac0      	subs	r0, r0, r3
 801c012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c014:	b10b      	cbz	r3, 801c01a <__sflush_r+0x46>
 801c016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c018:	1ac0      	subs	r0, r0, r3
 801c01a:	2300      	movs	r3, #0
 801c01c:	4602      	mov	r2, r0
 801c01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c020:	4628      	mov	r0, r5
 801c022:	6a21      	ldr	r1, [r4, #32]
 801c024:	47b0      	blx	r6
 801c026:	1c43      	adds	r3, r0, #1
 801c028:	89a3      	ldrh	r3, [r4, #12]
 801c02a:	d106      	bne.n	801c03a <__sflush_r+0x66>
 801c02c:	6829      	ldr	r1, [r5, #0]
 801c02e:	291d      	cmp	r1, #29
 801c030:	d82c      	bhi.n	801c08c <__sflush_r+0xb8>
 801c032:	4a2a      	ldr	r2, [pc, #168]	; (801c0dc <__sflush_r+0x108>)
 801c034:	40ca      	lsrs	r2, r1
 801c036:	07d6      	lsls	r6, r2, #31
 801c038:	d528      	bpl.n	801c08c <__sflush_r+0xb8>
 801c03a:	2200      	movs	r2, #0
 801c03c:	6062      	str	r2, [r4, #4]
 801c03e:	6922      	ldr	r2, [r4, #16]
 801c040:	04d9      	lsls	r1, r3, #19
 801c042:	6022      	str	r2, [r4, #0]
 801c044:	d504      	bpl.n	801c050 <__sflush_r+0x7c>
 801c046:	1c42      	adds	r2, r0, #1
 801c048:	d101      	bne.n	801c04e <__sflush_r+0x7a>
 801c04a:	682b      	ldr	r3, [r5, #0]
 801c04c:	b903      	cbnz	r3, 801c050 <__sflush_r+0x7c>
 801c04e:	6560      	str	r0, [r4, #84]	; 0x54
 801c050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c052:	602f      	str	r7, [r5, #0]
 801c054:	2900      	cmp	r1, #0
 801c056:	d0ca      	beq.n	801bfee <__sflush_r+0x1a>
 801c058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c05c:	4299      	cmp	r1, r3
 801c05e:	d002      	beq.n	801c066 <__sflush_r+0x92>
 801c060:	4628      	mov	r0, r5
 801c062:	f000 f9d5 	bl	801c410 <_free_r>
 801c066:	2000      	movs	r0, #0
 801c068:	6360      	str	r0, [r4, #52]	; 0x34
 801c06a:	e7c1      	b.n	801bff0 <__sflush_r+0x1c>
 801c06c:	6a21      	ldr	r1, [r4, #32]
 801c06e:	2301      	movs	r3, #1
 801c070:	4628      	mov	r0, r5
 801c072:	47b0      	blx	r6
 801c074:	1c41      	adds	r1, r0, #1
 801c076:	d1c7      	bne.n	801c008 <__sflush_r+0x34>
 801c078:	682b      	ldr	r3, [r5, #0]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d0c4      	beq.n	801c008 <__sflush_r+0x34>
 801c07e:	2b1d      	cmp	r3, #29
 801c080:	d001      	beq.n	801c086 <__sflush_r+0xb2>
 801c082:	2b16      	cmp	r3, #22
 801c084:	d101      	bne.n	801c08a <__sflush_r+0xb6>
 801c086:	602f      	str	r7, [r5, #0]
 801c088:	e7b1      	b.n	801bfee <__sflush_r+0x1a>
 801c08a:	89a3      	ldrh	r3, [r4, #12]
 801c08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c090:	81a3      	strh	r3, [r4, #12]
 801c092:	e7ad      	b.n	801bff0 <__sflush_r+0x1c>
 801c094:	690f      	ldr	r7, [r1, #16]
 801c096:	2f00      	cmp	r7, #0
 801c098:	d0a9      	beq.n	801bfee <__sflush_r+0x1a>
 801c09a:	0793      	lsls	r3, r2, #30
 801c09c:	bf18      	it	ne
 801c09e:	2300      	movne	r3, #0
 801c0a0:	680e      	ldr	r6, [r1, #0]
 801c0a2:	bf08      	it	eq
 801c0a4:	694b      	ldreq	r3, [r1, #20]
 801c0a6:	eba6 0807 	sub.w	r8, r6, r7
 801c0aa:	600f      	str	r7, [r1, #0]
 801c0ac:	608b      	str	r3, [r1, #8]
 801c0ae:	f1b8 0f00 	cmp.w	r8, #0
 801c0b2:	dd9c      	ble.n	801bfee <__sflush_r+0x1a>
 801c0b4:	4643      	mov	r3, r8
 801c0b6:	463a      	mov	r2, r7
 801c0b8:	4628      	mov	r0, r5
 801c0ba:	6a21      	ldr	r1, [r4, #32]
 801c0bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c0be:	47b0      	blx	r6
 801c0c0:	2800      	cmp	r0, #0
 801c0c2:	dc06      	bgt.n	801c0d2 <__sflush_r+0xfe>
 801c0c4:	89a3      	ldrh	r3, [r4, #12]
 801c0c6:	f04f 30ff 	mov.w	r0, #4294967295
 801c0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c0ce:	81a3      	strh	r3, [r4, #12]
 801c0d0:	e78e      	b.n	801bff0 <__sflush_r+0x1c>
 801c0d2:	4407      	add	r7, r0
 801c0d4:	eba8 0800 	sub.w	r8, r8, r0
 801c0d8:	e7e9      	b.n	801c0ae <__sflush_r+0xda>
 801c0da:	bf00      	nop
 801c0dc:	20400001 	.word	0x20400001

0801c0e0 <_fflush_r>:
 801c0e0:	b538      	push	{r3, r4, r5, lr}
 801c0e2:	690b      	ldr	r3, [r1, #16]
 801c0e4:	4605      	mov	r5, r0
 801c0e6:	460c      	mov	r4, r1
 801c0e8:	b913      	cbnz	r3, 801c0f0 <_fflush_r+0x10>
 801c0ea:	2500      	movs	r5, #0
 801c0ec:	4628      	mov	r0, r5
 801c0ee:	bd38      	pop	{r3, r4, r5, pc}
 801c0f0:	b118      	cbz	r0, 801c0fa <_fflush_r+0x1a>
 801c0f2:	6983      	ldr	r3, [r0, #24]
 801c0f4:	b90b      	cbnz	r3, 801c0fa <_fflush_r+0x1a>
 801c0f6:	f000 f887 	bl	801c208 <__sinit>
 801c0fa:	4b14      	ldr	r3, [pc, #80]	; (801c14c <_fflush_r+0x6c>)
 801c0fc:	429c      	cmp	r4, r3
 801c0fe:	d11b      	bne.n	801c138 <_fflush_r+0x58>
 801c100:	686c      	ldr	r4, [r5, #4]
 801c102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d0ef      	beq.n	801c0ea <_fflush_r+0xa>
 801c10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c10c:	07d0      	lsls	r0, r2, #31
 801c10e:	d404      	bmi.n	801c11a <_fflush_r+0x3a>
 801c110:	0599      	lsls	r1, r3, #22
 801c112:	d402      	bmi.n	801c11a <_fflush_r+0x3a>
 801c114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c116:	f000 f915 	bl	801c344 <__retarget_lock_acquire_recursive>
 801c11a:	4628      	mov	r0, r5
 801c11c:	4621      	mov	r1, r4
 801c11e:	f7ff ff59 	bl	801bfd4 <__sflush_r>
 801c122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c124:	4605      	mov	r5, r0
 801c126:	07da      	lsls	r2, r3, #31
 801c128:	d4e0      	bmi.n	801c0ec <_fflush_r+0xc>
 801c12a:	89a3      	ldrh	r3, [r4, #12]
 801c12c:	059b      	lsls	r3, r3, #22
 801c12e:	d4dd      	bmi.n	801c0ec <_fflush_r+0xc>
 801c130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c132:	f000 f908 	bl	801c346 <__retarget_lock_release_recursive>
 801c136:	e7d9      	b.n	801c0ec <_fflush_r+0xc>
 801c138:	4b05      	ldr	r3, [pc, #20]	; (801c150 <_fflush_r+0x70>)
 801c13a:	429c      	cmp	r4, r3
 801c13c:	d101      	bne.n	801c142 <_fflush_r+0x62>
 801c13e:	68ac      	ldr	r4, [r5, #8]
 801c140:	e7df      	b.n	801c102 <_fflush_r+0x22>
 801c142:	4b04      	ldr	r3, [pc, #16]	; (801c154 <_fflush_r+0x74>)
 801c144:	429c      	cmp	r4, r3
 801c146:	bf08      	it	eq
 801c148:	68ec      	ldreq	r4, [r5, #12]
 801c14a:	e7da      	b.n	801c102 <_fflush_r+0x22>
 801c14c:	0801e9b8 	.word	0x0801e9b8
 801c150:	0801e9d8 	.word	0x0801e9d8
 801c154:	0801e998 	.word	0x0801e998

0801c158 <std>:
 801c158:	2300      	movs	r3, #0
 801c15a:	b510      	push	{r4, lr}
 801c15c:	4604      	mov	r4, r0
 801c15e:	e9c0 3300 	strd	r3, r3, [r0]
 801c162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c166:	6083      	str	r3, [r0, #8]
 801c168:	8181      	strh	r1, [r0, #12]
 801c16a:	6643      	str	r3, [r0, #100]	; 0x64
 801c16c:	81c2      	strh	r2, [r0, #14]
 801c16e:	6183      	str	r3, [r0, #24]
 801c170:	4619      	mov	r1, r3
 801c172:	2208      	movs	r2, #8
 801c174:	305c      	adds	r0, #92	; 0x5c
 801c176:	f7ff fdc3 	bl	801bd00 <memset>
 801c17a:	4b05      	ldr	r3, [pc, #20]	; (801c190 <std+0x38>)
 801c17c:	6224      	str	r4, [r4, #32]
 801c17e:	6263      	str	r3, [r4, #36]	; 0x24
 801c180:	4b04      	ldr	r3, [pc, #16]	; (801c194 <std+0x3c>)
 801c182:	62a3      	str	r3, [r4, #40]	; 0x28
 801c184:	4b04      	ldr	r3, [pc, #16]	; (801c198 <std+0x40>)
 801c186:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c188:	4b04      	ldr	r3, [pc, #16]	; (801c19c <std+0x44>)
 801c18a:	6323      	str	r3, [r4, #48]	; 0x30
 801c18c:	bd10      	pop	{r4, pc}
 801c18e:	bf00      	nop
 801c190:	0801cbe9 	.word	0x0801cbe9
 801c194:	0801cc0b 	.word	0x0801cc0b
 801c198:	0801cc43 	.word	0x0801cc43
 801c19c:	0801cc67 	.word	0x0801cc67

0801c1a0 <_cleanup_r>:
 801c1a0:	4901      	ldr	r1, [pc, #4]	; (801c1a8 <_cleanup_r+0x8>)
 801c1a2:	f000 b8af 	b.w	801c304 <_fwalk_reent>
 801c1a6:	bf00      	nop
 801c1a8:	0801c0e1 	.word	0x0801c0e1

0801c1ac <__sfmoreglue>:
 801c1ac:	b570      	push	{r4, r5, r6, lr}
 801c1ae:	2568      	movs	r5, #104	; 0x68
 801c1b0:	1e4a      	subs	r2, r1, #1
 801c1b2:	4355      	muls	r5, r2
 801c1b4:	460e      	mov	r6, r1
 801c1b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c1ba:	f000 f975 	bl	801c4a8 <_malloc_r>
 801c1be:	4604      	mov	r4, r0
 801c1c0:	b140      	cbz	r0, 801c1d4 <__sfmoreglue+0x28>
 801c1c2:	2100      	movs	r1, #0
 801c1c4:	e9c0 1600 	strd	r1, r6, [r0]
 801c1c8:	300c      	adds	r0, #12
 801c1ca:	60a0      	str	r0, [r4, #8]
 801c1cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c1d0:	f7ff fd96 	bl	801bd00 <memset>
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	bd70      	pop	{r4, r5, r6, pc}

0801c1d8 <__sfp_lock_acquire>:
 801c1d8:	4801      	ldr	r0, [pc, #4]	; (801c1e0 <__sfp_lock_acquire+0x8>)
 801c1da:	f000 b8b3 	b.w	801c344 <__retarget_lock_acquire_recursive>
 801c1de:	bf00      	nop
 801c1e0:	20003cdc 	.word	0x20003cdc

0801c1e4 <__sfp_lock_release>:
 801c1e4:	4801      	ldr	r0, [pc, #4]	; (801c1ec <__sfp_lock_release+0x8>)
 801c1e6:	f000 b8ae 	b.w	801c346 <__retarget_lock_release_recursive>
 801c1ea:	bf00      	nop
 801c1ec:	20003cdc 	.word	0x20003cdc

0801c1f0 <__sinit_lock_acquire>:
 801c1f0:	4801      	ldr	r0, [pc, #4]	; (801c1f8 <__sinit_lock_acquire+0x8>)
 801c1f2:	f000 b8a7 	b.w	801c344 <__retarget_lock_acquire_recursive>
 801c1f6:	bf00      	nop
 801c1f8:	20003cd7 	.word	0x20003cd7

0801c1fc <__sinit_lock_release>:
 801c1fc:	4801      	ldr	r0, [pc, #4]	; (801c204 <__sinit_lock_release+0x8>)
 801c1fe:	f000 b8a2 	b.w	801c346 <__retarget_lock_release_recursive>
 801c202:	bf00      	nop
 801c204:	20003cd7 	.word	0x20003cd7

0801c208 <__sinit>:
 801c208:	b510      	push	{r4, lr}
 801c20a:	4604      	mov	r4, r0
 801c20c:	f7ff fff0 	bl	801c1f0 <__sinit_lock_acquire>
 801c210:	69a3      	ldr	r3, [r4, #24]
 801c212:	b11b      	cbz	r3, 801c21c <__sinit+0x14>
 801c214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c218:	f7ff bff0 	b.w	801c1fc <__sinit_lock_release>
 801c21c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c220:	6523      	str	r3, [r4, #80]	; 0x50
 801c222:	4b13      	ldr	r3, [pc, #76]	; (801c270 <__sinit+0x68>)
 801c224:	4a13      	ldr	r2, [pc, #76]	; (801c274 <__sinit+0x6c>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	62a2      	str	r2, [r4, #40]	; 0x28
 801c22a:	42a3      	cmp	r3, r4
 801c22c:	bf08      	it	eq
 801c22e:	2301      	moveq	r3, #1
 801c230:	4620      	mov	r0, r4
 801c232:	bf08      	it	eq
 801c234:	61a3      	streq	r3, [r4, #24]
 801c236:	f000 f81f 	bl	801c278 <__sfp>
 801c23a:	6060      	str	r0, [r4, #4]
 801c23c:	4620      	mov	r0, r4
 801c23e:	f000 f81b 	bl	801c278 <__sfp>
 801c242:	60a0      	str	r0, [r4, #8]
 801c244:	4620      	mov	r0, r4
 801c246:	f000 f817 	bl	801c278 <__sfp>
 801c24a:	2200      	movs	r2, #0
 801c24c:	2104      	movs	r1, #4
 801c24e:	60e0      	str	r0, [r4, #12]
 801c250:	6860      	ldr	r0, [r4, #4]
 801c252:	f7ff ff81 	bl	801c158 <std>
 801c256:	2201      	movs	r2, #1
 801c258:	2109      	movs	r1, #9
 801c25a:	68a0      	ldr	r0, [r4, #8]
 801c25c:	f7ff ff7c 	bl	801c158 <std>
 801c260:	2202      	movs	r2, #2
 801c262:	2112      	movs	r1, #18
 801c264:	68e0      	ldr	r0, [r4, #12]
 801c266:	f7ff ff77 	bl	801c158 <std>
 801c26a:	2301      	movs	r3, #1
 801c26c:	61a3      	str	r3, [r4, #24]
 801c26e:	e7d1      	b.n	801c214 <__sinit+0xc>
 801c270:	0801e994 	.word	0x0801e994
 801c274:	0801c1a1 	.word	0x0801c1a1

0801c278 <__sfp>:
 801c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c27a:	4607      	mov	r7, r0
 801c27c:	f7ff ffac 	bl	801c1d8 <__sfp_lock_acquire>
 801c280:	4b1e      	ldr	r3, [pc, #120]	; (801c2fc <__sfp+0x84>)
 801c282:	681e      	ldr	r6, [r3, #0]
 801c284:	69b3      	ldr	r3, [r6, #24]
 801c286:	b913      	cbnz	r3, 801c28e <__sfp+0x16>
 801c288:	4630      	mov	r0, r6
 801c28a:	f7ff ffbd 	bl	801c208 <__sinit>
 801c28e:	3648      	adds	r6, #72	; 0x48
 801c290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c294:	3b01      	subs	r3, #1
 801c296:	d503      	bpl.n	801c2a0 <__sfp+0x28>
 801c298:	6833      	ldr	r3, [r6, #0]
 801c29a:	b30b      	cbz	r3, 801c2e0 <__sfp+0x68>
 801c29c:	6836      	ldr	r6, [r6, #0]
 801c29e:	e7f7      	b.n	801c290 <__sfp+0x18>
 801c2a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c2a4:	b9d5      	cbnz	r5, 801c2dc <__sfp+0x64>
 801c2a6:	4b16      	ldr	r3, [pc, #88]	; (801c300 <__sfp+0x88>)
 801c2a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c2ac:	60e3      	str	r3, [r4, #12]
 801c2ae:	6665      	str	r5, [r4, #100]	; 0x64
 801c2b0:	f000 f847 	bl	801c342 <__retarget_lock_init_recursive>
 801c2b4:	f7ff ff96 	bl	801c1e4 <__sfp_lock_release>
 801c2b8:	2208      	movs	r2, #8
 801c2ba:	4629      	mov	r1, r5
 801c2bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c2c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c2c4:	6025      	str	r5, [r4, #0]
 801c2c6:	61a5      	str	r5, [r4, #24]
 801c2c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c2cc:	f7ff fd18 	bl	801bd00 <memset>
 801c2d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c2d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c2d8:	4620      	mov	r0, r4
 801c2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2dc:	3468      	adds	r4, #104	; 0x68
 801c2de:	e7d9      	b.n	801c294 <__sfp+0x1c>
 801c2e0:	2104      	movs	r1, #4
 801c2e2:	4638      	mov	r0, r7
 801c2e4:	f7ff ff62 	bl	801c1ac <__sfmoreglue>
 801c2e8:	4604      	mov	r4, r0
 801c2ea:	6030      	str	r0, [r6, #0]
 801c2ec:	2800      	cmp	r0, #0
 801c2ee:	d1d5      	bne.n	801c29c <__sfp+0x24>
 801c2f0:	f7ff ff78 	bl	801c1e4 <__sfp_lock_release>
 801c2f4:	230c      	movs	r3, #12
 801c2f6:	603b      	str	r3, [r7, #0]
 801c2f8:	e7ee      	b.n	801c2d8 <__sfp+0x60>
 801c2fa:	bf00      	nop
 801c2fc:	0801e994 	.word	0x0801e994
 801c300:	ffff0001 	.word	0xffff0001

0801c304 <_fwalk_reent>:
 801c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c308:	4606      	mov	r6, r0
 801c30a:	4688      	mov	r8, r1
 801c30c:	2700      	movs	r7, #0
 801c30e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c316:	f1b9 0901 	subs.w	r9, r9, #1
 801c31a:	d505      	bpl.n	801c328 <_fwalk_reent+0x24>
 801c31c:	6824      	ldr	r4, [r4, #0]
 801c31e:	2c00      	cmp	r4, #0
 801c320:	d1f7      	bne.n	801c312 <_fwalk_reent+0xe>
 801c322:	4638      	mov	r0, r7
 801c324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c328:	89ab      	ldrh	r3, [r5, #12]
 801c32a:	2b01      	cmp	r3, #1
 801c32c:	d907      	bls.n	801c33e <_fwalk_reent+0x3a>
 801c32e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c332:	3301      	adds	r3, #1
 801c334:	d003      	beq.n	801c33e <_fwalk_reent+0x3a>
 801c336:	4629      	mov	r1, r5
 801c338:	4630      	mov	r0, r6
 801c33a:	47c0      	blx	r8
 801c33c:	4307      	orrs	r7, r0
 801c33e:	3568      	adds	r5, #104	; 0x68
 801c340:	e7e9      	b.n	801c316 <_fwalk_reent+0x12>

0801c342 <__retarget_lock_init_recursive>:
 801c342:	4770      	bx	lr

0801c344 <__retarget_lock_acquire_recursive>:
 801c344:	4770      	bx	lr

0801c346 <__retarget_lock_release_recursive>:
 801c346:	4770      	bx	lr

0801c348 <__swhatbuf_r>:
 801c348:	b570      	push	{r4, r5, r6, lr}
 801c34a:	460e      	mov	r6, r1
 801c34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c350:	4614      	mov	r4, r2
 801c352:	2900      	cmp	r1, #0
 801c354:	461d      	mov	r5, r3
 801c356:	b096      	sub	sp, #88	; 0x58
 801c358:	da07      	bge.n	801c36a <__swhatbuf_r+0x22>
 801c35a:	2300      	movs	r3, #0
 801c35c:	602b      	str	r3, [r5, #0]
 801c35e:	89b3      	ldrh	r3, [r6, #12]
 801c360:	061a      	lsls	r2, r3, #24
 801c362:	d410      	bmi.n	801c386 <__swhatbuf_r+0x3e>
 801c364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c368:	e00e      	b.n	801c388 <__swhatbuf_r+0x40>
 801c36a:	466a      	mov	r2, sp
 801c36c:	f000 fca2 	bl	801ccb4 <_fstat_r>
 801c370:	2800      	cmp	r0, #0
 801c372:	dbf2      	blt.n	801c35a <__swhatbuf_r+0x12>
 801c374:	9a01      	ldr	r2, [sp, #4]
 801c376:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c37a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c37e:	425a      	negs	r2, r3
 801c380:	415a      	adcs	r2, r3
 801c382:	602a      	str	r2, [r5, #0]
 801c384:	e7ee      	b.n	801c364 <__swhatbuf_r+0x1c>
 801c386:	2340      	movs	r3, #64	; 0x40
 801c388:	2000      	movs	r0, #0
 801c38a:	6023      	str	r3, [r4, #0]
 801c38c:	b016      	add	sp, #88	; 0x58
 801c38e:	bd70      	pop	{r4, r5, r6, pc}

0801c390 <__smakebuf_r>:
 801c390:	898b      	ldrh	r3, [r1, #12]
 801c392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c394:	079d      	lsls	r5, r3, #30
 801c396:	4606      	mov	r6, r0
 801c398:	460c      	mov	r4, r1
 801c39a:	d507      	bpl.n	801c3ac <__smakebuf_r+0x1c>
 801c39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c3a0:	6023      	str	r3, [r4, #0]
 801c3a2:	6123      	str	r3, [r4, #16]
 801c3a4:	2301      	movs	r3, #1
 801c3a6:	6163      	str	r3, [r4, #20]
 801c3a8:	b002      	add	sp, #8
 801c3aa:	bd70      	pop	{r4, r5, r6, pc}
 801c3ac:	466a      	mov	r2, sp
 801c3ae:	ab01      	add	r3, sp, #4
 801c3b0:	f7ff ffca 	bl	801c348 <__swhatbuf_r>
 801c3b4:	9900      	ldr	r1, [sp, #0]
 801c3b6:	4605      	mov	r5, r0
 801c3b8:	4630      	mov	r0, r6
 801c3ba:	f000 f875 	bl	801c4a8 <_malloc_r>
 801c3be:	b948      	cbnz	r0, 801c3d4 <__smakebuf_r+0x44>
 801c3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3c4:	059a      	lsls	r2, r3, #22
 801c3c6:	d4ef      	bmi.n	801c3a8 <__smakebuf_r+0x18>
 801c3c8:	f023 0303 	bic.w	r3, r3, #3
 801c3cc:	f043 0302 	orr.w	r3, r3, #2
 801c3d0:	81a3      	strh	r3, [r4, #12]
 801c3d2:	e7e3      	b.n	801c39c <__smakebuf_r+0xc>
 801c3d4:	4b0d      	ldr	r3, [pc, #52]	; (801c40c <__smakebuf_r+0x7c>)
 801c3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 801c3d8:	89a3      	ldrh	r3, [r4, #12]
 801c3da:	6020      	str	r0, [r4, #0]
 801c3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c3e0:	81a3      	strh	r3, [r4, #12]
 801c3e2:	9b00      	ldr	r3, [sp, #0]
 801c3e4:	6120      	str	r0, [r4, #16]
 801c3e6:	6163      	str	r3, [r4, #20]
 801c3e8:	9b01      	ldr	r3, [sp, #4]
 801c3ea:	b15b      	cbz	r3, 801c404 <__smakebuf_r+0x74>
 801c3ec:	4630      	mov	r0, r6
 801c3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c3f2:	f000 fc71 	bl	801ccd8 <_isatty_r>
 801c3f6:	b128      	cbz	r0, 801c404 <__smakebuf_r+0x74>
 801c3f8:	89a3      	ldrh	r3, [r4, #12]
 801c3fa:	f023 0303 	bic.w	r3, r3, #3
 801c3fe:	f043 0301 	orr.w	r3, r3, #1
 801c402:	81a3      	strh	r3, [r4, #12]
 801c404:	89a0      	ldrh	r0, [r4, #12]
 801c406:	4305      	orrs	r5, r0
 801c408:	81a5      	strh	r5, [r4, #12]
 801c40a:	e7cd      	b.n	801c3a8 <__smakebuf_r+0x18>
 801c40c:	0801c1a1 	.word	0x0801c1a1

0801c410 <_free_r>:
 801c410:	b538      	push	{r3, r4, r5, lr}
 801c412:	4605      	mov	r5, r0
 801c414:	2900      	cmp	r1, #0
 801c416:	d043      	beq.n	801c4a0 <_free_r+0x90>
 801c418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c41c:	1f0c      	subs	r4, r1, #4
 801c41e:	2b00      	cmp	r3, #0
 801c420:	bfb8      	it	lt
 801c422:	18e4      	addlt	r4, r4, r3
 801c424:	f000 fc88 	bl	801cd38 <__malloc_lock>
 801c428:	4a1e      	ldr	r2, [pc, #120]	; (801c4a4 <_free_r+0x94>)
 801c42a:	6813      	ldr	r3, [r2, #0]
 801c42c:	4610      	mov	r0, r2
 801c42e:	b933      	cbnz	r3, 801c43e <_free_r+0x2e>
 801c430:	6063      	str	r3, [r4, #4]
 801c432:	6014      	str	r4, [r2, #0]
 801c434:	4628      	mov	r0, r5
 801c436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c43a:	f000 bc83 	b.w	801cd44 <__malloc_unlock>
 801c43e:	42a3      	cmp	r3, r4
 801c440:	d90a      	bls.n	801c458 <_free_r+0x48>
 801c442:	6821      	ldr	r1, [r4, #0]
 801c444:	1862      	adds	r2, r4, r1
 801c446:	4293      	cmp	r3, r2
 801c448:	bf01      	itttt	eq
 801c44a:	681a      	ldreq	r2, [r3, #0]
 801c44c:	685b      	ldreq	r3, [r3, #4]
 801c44e:	1852      	addeq	r2, r2, r1
 801c450:	6022      	streq	r2, [r4, #0]
 801c452:	6063      	str	r3, [r4, #4]
 801c454:	6004      	str	r4, [r0, #0]
 801c456:	e7ed      	b.n	801c434 <_free_r+0x24>
 801c458:	461a      	mov	r2, r3
 801c45a:	685b      	ldr	r3, [r3, #4]
 801c45c:	b10b      	cbz	r3, 801c462 <_free_r+0x52>
 801c45e:	42a3      	cmp	r3, r4
 801c460:	d9fa      	bls.n	801c458 <_free_r+0x48>
 801c462:	6811      	ldr	r1, [r2, #0]
 801c464:	1850      	adds	r0, r2, r1
 801c466:	42a0      	cmp	r0, r4
 801c468:	d10b      	bne.n	801c482 <_free_r+0x72>
 801c46a:	6820      	ldr	r0, [r4, #0]
 801c46c:	4401      	add	r1, r0
 801c46e:	1850      	adds	r0, r2, r1
 801c470:	4283      	cmp	r3, r0
 801c472:	6011      	str	r1, [r2, #0]
 801c474:	d1de      	bne.n	801c434 <_free_r+0x24>
 801c476:	6818      	ldr	r0, [r3, #0]
 801c478:	685b      	ldr	r3, [r3, #4]
 801c47a:	4401      	add	r1, r0
 801c47c:	6011      	str	r1, [r2, #0]
 801c47e:	6053      	str	r3, [r2, #4]
 801c480:	e7d8      	b.n	801c434 <_free_r+0x24>
 801c482:	d902      	bls.n	801c48a <_free_r+0x7a>
 801c484:	230c      	movs	r3, #12
 801c486:	602b      	str	r3, [r5, #0]
 801c488:	e7d4      	b.n	801c434 <_free_r+0x24>
 801c48a:	6820      	ldr	r0, [r4, #0]
 801c48c:	1821      	adds	r1, r4, r0
 801c48e:	428b      	cmp	r3, r1
 801c490:	bf01      	itttt	eq
 801c492:	6819      	ldreq	r1, [r3, #0]
 801c494:	685b      	ldreq	r3, [r3, #4]
 801c496:	1809      	addeq	r1, r1, r0
 801c498:	6021      	streq	r1, [r4, #0]
 801c49a:	6063      	str	r3, [r4, #4]
 801c49c:	6054      	str	r4, [r2, #4]
 801c49e:	e7c9      	b.n	801c434 <_free_r+0x24>
 801c4a0:	bd38      	pop	{r3, r4, r5, pc}
 801c4a2:	bf00      	nop
 801c4a4:	20003a30 	.word	0x20003a30

0801c4a8 <_malloc_r>:
 801c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4aa:	1ccd      	adds	r5, r1, #3
 801c4ac:	f025 0503 	bic.w	r5, r5, #3
 801c4b0:	3508      	adds	r5, #8
 801c4b2:	2d0c      	cmp	r5, #12
 801c4b4:	bf38      	it	cc
 801c4b6:	250c      	movcc	r5, #12
 801c4b8:	2d00      	cmp	r5, #0
 801c4ba:	4606      	mov	r6, r0
 801c4bc:	db01      	blt.n	801c4c2 <_malloc_r+0x1a>
 801c4be:	42a9      	cmp	r1, r5
 801c4c0:	d903      	bls.n	801c4ca <_malloc_r+0x22>
 801c4c2:	230c      	movs	r3, #12
 801c4c4:	6033      	str	r3, [r6, #0]
 801c4c6:	2000      	movs	r0, #0
 801c4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4ca:	f000 fc35 	bl	801cd38 <__malloc_lock>
 801c4ce:	4921      	ldr	r1, [pc, #132]	; (801c554 <_malloc_r+0xac>)
 801c4d0:	680a      	ldr	r2, [r1, #0]
 801c4d2:	4614      	mov	r4, r2
 801c4d4:	b99c      	cbnz	r4, 801c4fe <_malloc_r+0x56>
 801c4d6:	4f20      	ldr	r7, [pc, #128]	; (801c558 <_malloc_r+0xb0>)
 801c4d8:	683b      	ldr	r3, [r7, #0]
 801c4da:	b923      	cbnz	r3, 801c4e6 <_malloc_r+0x3e>
 801c4dc:	4621      	mov	r1, r4
 801c4de:	4630      	mov	r0, r6
 801c4e0:	f000 fb72 	bl	801cbc8 <_sbrk_r>
 801c4e4:	6038      	str	r0, [r7, #0]
 801c4e6:	4629      	mov	r1, r5
 801c4e8:	4630      	mov	r0, r6
 801c4ea:	f000 fb6d 	bl	801cbc8 <_sbrk_r>
 801c4ee:	1c43      	adds	r3, r0, #1
 801c4f0:	d123      	bne.n	801c53a <_malloc_r+0x92>
 801c4f2:	230c      	movs	r3, #12
 801c4f4:	4630      	mov	r0, r6
 801c4f6:	6033      	str	r3, [r6, #0]
 801c4f8:	f000 fc24 	bl	801cd44 <__malloc_unlock>
 801c4fc:	e7e3      	b.n	801c4c6 <_malloc_r+0x1e>
 801c4fe:	6823      	ldr	r3, [r4, #0]
 801c500:	1b5b      	subs	r3, r3, r5
 801c502:	d417      	bmi.n	801c534 <_malloc_r+0x8c>
 801c504:	2b0b      	cmp	r3, #11
 801c506:	d903      	bls.n	801c510 <_malloc_r+0x68>
 801c508:	6023      	str	r3, [r4, #0]
 801c50a:	441c      	add	r4, r3
 801c50c:	6025      	str	r5, [r4, #0]
 801c50e:	e004      	b.n	801c51a <_malloc_r+0x72>
 801c510:	6863      	ldr	r3, [r4, #4]
 801c512:	42a2      	cmp	r2, r4
 801c514:	bf0c      	ite	eq
 801c516:	600b      	streq	r3, [r1, #0]
 801c518:	6053      	strne	r3, [r2, #4]
 801c51a:	4630      	mov	r0, r6
 801c51c:	f000 fc12 	bl	801cd44 <__malloc_unlock>
 801c520:	f104 000b 	add.w	r0, r4, #11
 801c524:	1d23      	adds	r3, r4, #4
 801c526:	f020 0007 	bic.w	r0, r0, #7
 801c52a:	1ac2      	subs	r2, r0, r3
 801c52c:	d0cc      	beq.n	801c4c8 <_malloc_r+0x20>
 801c52e:	1a1b      	subs	r3, r3, r0
 801c530:	50a3      	str	r3, [r4, r2]
 801c532:	e7c9      	b.n	801c4c8 <_malloc_r+0x20>
 801c534:	4622      	mov	r2, r4
 801c536:	6864      	ldr	r4, [r4, #4]
 801c538:	e7cc      	b.n	801c4d4 <_malloc_r+0x2c>
 801c53a:	1cc4      	adds	r4, r0, #3
 801c53c:	f024 0403 	bic.w	r4, r4, #3
 801c540:	42a0      	cmp	r0, r4
 801c542:	d0e3      	beq.n	801c50c <_malloc_r+0x64>
 801c544:	1a21      	subs	r1, r4, r0
 801c546:	4630      	mov	r0, r6
 801c548:	f000 fb3e 	bl	801cbc8 <_sbrk_r>
 801c54c:	3001      	adds	r0, #1
 801c54e:	d1dd      	bne.n	801c50c <_malloc_r+0x64>
 801c550:	e7cf      	b.n	801c4f2 <_malloc_r+0x4a>
 801c552:	bf00      	nop
 801c554:	20003a30 	.word	0x20003a30
 801c558:	20003a34 	.word	0x20003a34

0801c55c <__sfputc_r>:
 801c55c:	6893      	ldr	r3, [r2, #8]
 801c55e:	b410      	push	{r4}
 801c560:	3b01      	subs	r3, #1
 801c562:	2b00      	cmp	r3, #0
 801c564:	6093      	str	r3, [r2, #8]
 801c566:	da07      	bge.n	801c578 <__sfputc_r+0x1c>
 801c568:	6994      	ldr	r4, [r2, #24]
 801c56a:	42a3      	cmp	r3, r4
 801c56c:	db01      	blt.n	801c572 <__sfputc_r+0x16>
 801c56e:	290a      	cmp	r1, #10
 801c570:	d102      	bne.n	801c578 <__sfputc_r+0x1c>
 801c572:	bc10      	pop	{r4}
 801c574:	f7ff bc6e 	b.w	801be54 <__swbuf_r>
 801c578:	6813      	ldr	r3, [r2, #0]
 801c57a:	1c58      	adds	r0, r3, #1
 801c57c:	6010      	str	r0, [r2, #0]
 801c57e:	7019      	strb	r1, [r3, #0]
 801c580:	4608      	mov	r0, r1
 801c582:	bc10      	pop	{r4}
 801c584:	4770      	bx	lr

0801c586 <__sfputs_r>:
 801c586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c588:	4606      	mov	r6, r0
 801c58a:	460f      	mov	r7, r1
 801c58c:	4614      	mov	r4, r2
 801c58e:	18d5      	adds	r5, r2, r3
 801c590:	42ac      	cmp	r4, r5
 801c592:	d101      	bne.n	801c598 <__sfputs_r+0x12>
 801c594:	2000      	movs	r0, #0
 801c596:	e007      	b.n	801c5a8 <__sfputs_r+0x22>
 801c598:	463a      	mov	r2, r7
 801c59a:	4630      	mov	r0, r6
 801c59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5a0:	f7ff ffdc 	bl	801c55c <__sfputc_r>
 801c5a4:	1c43      	adds	r3, r0, #1
 801c5a6:	d1f3      	bne.n	801c590 <__sfputs_r+0xa>
 801c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c5ac <_vfiprintf_r>:
 801c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5b0:	460d      	mov	r5, r1
 801c5b2:	4614      	mov	r4, r2
 801c5b4:	4698      	mov	r8, r3
 801c5b6:	4606      	mov	r6, r0
 801c5b8:	b09d      	sub	sp, #116	; 0x74
 801c5ba:	b118      	cbz	r0, 801c5c4 <_vfiprintf_r+0x18>
 801c5bc:	6983      	ldr	r3, [r0, #24]
 801c5be:	b90b      	cbnz	r3, 801c5c4 <_vfiprintf_r+0x18>
 801c5c0:	f7ff fe22 	bl	801c208 <__sinit>
 801c5c4:	4b89      	ldr	r3, [pc, #548]	; (801c7ec <_vfiprintf_r+0x240>)
 801c5c6:	429d      	cmp	r5, r3
 801c5c8:	d11b      	bne.n	801c602 <_vfiprintf_r+0x56>
 801c5ca:	6875      	ldr	r5, [r6, #4]
 801c5cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5ce:	07d9      	lsls	r1, r3, #31
 801c5d0:	d405      	bmi.n	801c5de <_vfiprintf_r+0x32>
 801c5d2:	89ab      	ldrh	r3, [r5, #12]
 801c5d4:	059a      	lsls	r2, r3, #22
 801c5d6:	d402      	bmi.n	801c5de <_vfiprintf_r+0x32>
 801c5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5da:	f7ff feb3 	bl	801c344 <__retarget_lock_acquire_recursive>
 801c5de:	89ab      	ldrh	r3, [r5, #12]
 801c5e0:	071b      	lsls	r3, r3, #28
 801c5e2:	d501      	bpl.n	801c5e8 <_vfiprintf_r+0x3c>
 801c5e4:	692b      	ldr	r3, [r5, #16]
 801c5e6:	b9eb      	cbnz	r3, 801c624 <_vfiprintf_r+0x78>
 801c5e8:	4629      	mov	r1, r5
 801c5ea:	4630      	mov	r0, r6
 801c5ec:	f7ff fc84 	bl	801bef8 <__swsetup_r>
 801c5f0:	b1c0      	cbz	r0, 801c624 <_vfiprintf_r+0x78>
 801c5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5f4:	07dc      	lsls	r4, r3, #31
 801c5f6:	d50e      	bpl.n	801c616 <_vfiprintf_r+0x6a>
 801c5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5fc:	b01d      	add	sp, #116	; 0x74
 801c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c602:	4b7b      	ldr	r3, [pc, #492]	; (801c7f0 <_vfiprintf_r+0x244>)
 801c604:	429d      	cmp	r5, r3
 801c606:	d101      	bne.n	801c60c <_vfiprintf_r+0x60>
 801c608:	68b5      	ldr	r5, [r6, #8]
 801c60a:	e7df      	b.n	801c5cc <_vfiprintf_r+0x20>
 801c60c:	4b79      	ldr	r3, [pc, #484]	; (801c7f4 <_vfiprintf_r+0x248>)
 801c60e:	429d      	cmp	r5, r3
 801c610:	bf08      	it	eq
 801c612:	68f5      	ldreq	r5, [r6, #12]
 801c614:	e7da      	b.n	801c5cc <_vfiprintf_r+0x20>
 801c616:	89ab      	ldrh	r3, [r5, #12]
 801c618:	0598      	lsls	r0, r3, #22
 801c61a:	d4ed      	bmi.n	801c5f8 <_vfiprintf_r+0x4c>
 801c61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c61e:	f7ff fe92 	bl	801c346 <__retarget_lock_release_recursive>
 801c622:	e7e9      	b.n	801c5f8 <_vfiprintf_r+0x4c>
 801c624:	2300      	movs	r3, #0
 801c626:	9309      	str	r3, [sp, #36]	; 0x24
 801c628:	2320      	movs	r3, #32
 801c62a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c62e:	2330      	movs	r3, #48	; 0x30
 801c630:	f04f 0901 	mov.w	r9, #1
 801c634:	f8cd 800c 	str.w	r8, [sp, #12]
 801c638:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801c7f8 <_vfiprintf_r+0x24c>
 801c63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c640:	4623      	mov	r3, r4
 801c642:	469a      	mov	sl, r3
 801c644:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c648:	b10a      	cbz	r2, 801c64e <_vfiprintf_r+0xa2>
 801c64a:	2a25      	cmp	r2, #37	; 0x25
 801c64c:	d1f9      	bne.n	801c642 <_vfiprintf_r+0x96>
 801c64e:	ebba 0b04 	subs.w	fp, sl, r4
 801c652:	d00b      	beq.n	801c66c <_vfiprintf_r+0xc0>
 801c654:	465b      	mov	r3, fp
 801c656:	4622      	mov	r2, r4
 801c658:	4629      	mov	r1, r5
 801c65a:	4630      	mov	r0, r6
 801c65c:	f7ff ff93 	bl	801c586 <__sfputs_r>
 801c660:	3001      	adds	r0, #1
 801c662:	f000 80aa 	beq.w	801c7ba <_vfiprintf_r+0x20e>
 801c666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c668:	445a      	add	r2, fp
 801c66a:	9209      	str	r2, [sp, #36]	; 0x24
 801c66c:	f89a 3000 	ldrb.w	r3, [sl]
 801c670:	2b00      	cmp	r3, #0
 801c672:	f000 80a2 	beq.w	801c7ba <_vfiprintf_r+0x20e>
 801c676:	2300      	movs	r3, #0
 801c678:	f04f 32ff 	mov.w	r2, #4294967295
 801c67c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c680:	f10a 0a01 	add.w	sl, sl, #1
 801c684:	9304      	str	r3, [sp, #16]
 801c686:	9307      	str	r3, [sp, #28]
 801c688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c68c:	931a      	str	r3, [sp, #104]	; 0x68
 801c68e:	4654      	mov	r4, sl
 801c690:	2205      	movs	r2, #5
 801c692:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c696:	4858      	ldr	r0, [pc, #352]	; (801c7f8 <_vfiprintf_r+0x24c>)
 801c698:	f000 fb40 	bl	801cd1c <memchr>
 801c69c:	9a04      	ldr	r2, [sp, #16]
 801c69e:	b9d8      	cbnz	r0, 801c6d8 <_vfiprintf_r+0x12c>
 801c6a0:	06d1      	lsls	r1, r2, #27
 801c6a2:	bf44      	itt	mi
 801c6a4:	2320      	movmi	r3, #32
 801c6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6aa:	0713      	lsls	r3, r2, #28
 801c6ac:	bf44      	itt	mi
 801c6ae:	232b      	movmi	r3, #43	; 0x2b
 801c6b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6b4:	f89a 3000 	ldrb.w	r3, [sl]
 801c6b8:	2b2a      	cmp	r3, #42	; 0x2a
 801c6ba:	d015      	beq.n	801c6e8 <_vfiprintf_r+0x13c>
 801c6bc:	4654      	mov	r4, sl
 801c6be:	2000      	movs	r0, #0
 801c6c0:	f04f 0c0a 	mov.w	ip, #10
 801c6c4:	9a07      	ldr	r2, [sp, #28]
 801c6c6:	4621      	mov	r1, r4
 801c6c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c6cc:	3b30      	subs	r3, #48	; 0x30
 801c6ce:	2b09      	cmp	r3, #9
 801c6d0:	d94e      	bls.n	801c770 <_vfiprintf_r+0x1c4>
 801c6d2:	b1b0      	cbz	r0, 801c702 <_vfiprintf_r+0x156>
 801c6d4:	9207      	str	r2, [sp, #28]
 801c6d6:	e014      	b.n	801c702 <_vfiprintf_r+0x156>
 801c6d8:	eba0 0308 	sub.w	r3, r0, r8
 801c6dc:	fa09 f303 	lsl.w	r3, r9, r3
 801c6e0:	4313      	orrs	r3, r2
 801c6e2:	46a2      	mov	sl, r4
 801c6e4:	9304      	str	r3, [sp, #16]
 801c6e6:	e7d2      	b.n	801c68e <_vfiprintf_r+0xe2>
 801c6e8:	9b03      	ldr	r3, [sp, #12]
 801c6ea:	1d19      	adds	r1, r3, #4
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	9103      	str	r1, [sp, #12]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	bfbb      	ittet	lt
 801c6f4:	425b      	neglt	r3, r3
 801c6f6:	f042 0202 	orrlt.w	r2, r2, #2
 801c6fa:	9307      	strge	r3, [sp, #28]
 801c6fc:	9307      	strlt	r3, [sp, #28]
 801c6fe:	bfb8      	it	lt
 801c700:	9204      	strlt	r2, [sp, #16]
 801c702:	7823      	ldrb	r3, [r4, #0]
 801c704:	2b2e      	cmp	r3, #46	; 0x2e
 801c706:	d10c      	bne.n	801c722 <_vfiprintf_r+0x176>
 801c708:	7863      	ldrb	r3, [r4, #1]
 801c70a:	2b2a      	cmp	r3, #42	; 0x2a
 801c70c:	d135      	bne.n	801c77a <_vfiprintf_r+0x1ce>
 801c70e:	9b03      	ldr	r3, [sp, #12]
 801c710:	3402      	adds	r4, #2
 801c712:	1d1a      	adds	r2, r3, #4
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	9203      	str	r2, [sp, #12]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	bfb8      	it	lt
 801c71c:	f04f 33ff 	movlt.w	r3, #4294967295
 801c720:	9305      	str	r3, [sp, #20]
 801c722:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c808 <_vfiprintf_r+0x25c>
 801c726:	2203      	movs	r2, #3
 801c728:	4650      	mov	r0, sl
 801c72a:	7821      	ldrb	r1, [r4, #0]
 801c72c:	f000 faf6 	bl	801cd1c <memchr>
 801c730:	b140      	cbz	r0, 801c744 <_vfiprintf_r+0x198>
 801c732:	2340      	movs	r3, #64	; 0x40
 801c734:	eba0 000a 	sub.w	r0, r0, sl
 801c738:	fa03 f000 	lsl.w	r0, r3, r0
 801c73c:	9b04      	ldr	r3, [sp, #16]
 801c73e:	3401      	adds	r4, #1
 801c740:	4303      	orrs	r3, r0
 801c742:	9304      	str	r3, [sp, #16]
 801c744:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c748:	2206      	movs	r2, #6
 801c74a:	482c      	ldr	r0, [pc, #176]	; (801c7fc <_vfiprintf_r+0x250>)
 801c74c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c750:	f000 fae4 	bl	801cd1c <memchr>
 801c754:	2800      	cmp	r0, #0
 801c756:	d03f      	beq.n	801c7d8 <_vfiprintf_r+0x22c>
 801c758:	4b29      	ldr	r3, [pc, #164]	; (801c800 <_vfiprintf_r+0x254>)
 801c75a:	bb1b      	cbnz	r3, 801c7a4 <_vfiprintf_r+0x1f8>
 801c75c:	9b03      	ldr	r3, [sp, #12]
 801c75e:	3307      	adds	r3, #7
 801c760:	f023 0307 	bic.w	r3, r3, #7
 801c764:	3308      	adds	r3, #8
 801c766:	9303      	str	r3, [sp, #12]
 801c768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c76a:	443b      	add	r3, r7
 801c76c:	9309      	str	r3, [sp, #36]	; 0x24
 801c76e:	e767      	b.n	801c640 <_vfiprintf_r+0x94>
 801c770:	460c      	mov	r4, r1
 801c772:	2001      	movs	r0, #1
 801c774:	fb0c 3202 	mla	r2, ip, r2, r3
 801c778:	e7a5      	b.n	801c6c6 <_vfiprintf_r+0x11a>
 801c77a:	2300      	movs	r3, #0
 801c77c:	f04f 0c0a 	mov.w	ip, #10
 801c780:	4619      	mov	r1, r3
 801c782:	3401      	adds	r4, #1
 801c784:	9305      	str	r3, [sp, #20]
 801c786:	4620      	mov	r0, r4
 801c788:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c78c:	3a30      	subs	r2, #48	; 0x30
 801c78e:	2a09      	cmp	r2, #9
 801c790:	d903      	bls.n	801c79a <_vfiprintf_r+0x1ee>
 801c792:	2b00      	cmp	r3, #0
 801c794:	d0c5      	beq.n	801c722 <_vfiprintf_r+0x176>
 801c796:	9105      	str	r1, [sp, #20]
 801c798:	e7c3      	b.n	801c722 <_vfiprintf_r+0x176>
 801c79a:	4604      	mov	r4, r0
 801c79c:	2301      	movs	r3, #1
 801c79e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c7a2:	e7f0      	b.n	801c786 <_vfiprintf_r+0x1da>
 801c7a4:	ab03      	add	r3, sp, #12
 801c7a6:	9300      	str	r3, [sp, #0]
 801c7a8:	462a      	mov	r2, r5
 801c7aa:	4630      	mov	r0, r6
 801c7ac:	4b15      	ldr	r3, [pc, #84]	; (801c804 <_vfiprintf_r+0x258>)
 801c7ae:	a904      	add	r1, sp, #16
 801c7b0:	f3af 8000 	nop.w
 801c7b4:	4607      	mov	r7, r0
 801c7b6:	1c78      	adds	r0, r7, #1
 801c7b8:	d1d6      	bne.n	801c768 <_vfiprintf_r+0x1bc>
 801c7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c7bc:	07d9      	lsls	r1, r3, #31
 801c7be:	d405      	bmi.n	801c7cc <_vfiprintf_r+0x220>
 801c7c0:	89ab      	ldrh	r3, [r5, #12]
 801c7c2:	059a      	lsls	r2, r3, #22
 801c7c4:	d402      	bmi.n	801c7cc <_vfiprintf_r+0x220>
 801c7c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c7c8:	f7ff fdbd 	bl	801c346 <__retarget_lock_release_recursive>
 801c7cc:	89ab      	ldrh	r3, [r5, #12]
 801c7ce:	065b      	lsls	r3, r3, #25
 801c7d0:	f53f af12 	bmi.w	801c5f8 <_vfiprintf_r+0x4c>
 801c7d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7d6:	e711      	b.n	801c5fc <_vfiprintf_r+0x50>
 801c7d8:	ab03      	add	r3, sp, #12
 801c7da:	9300      	str	r3, [sp, #0]
 801c7dc:	462a      	mov	r2, r5
 801c7de:	4630      	mov	r0, r6
 801c7e0:	4b08      	ldr	r3, [pc, #32]	; (801c804 <_vfiprintf_r+0x258>)
 801c7e2:	a904      	add	r1, sp, #16
 801c7e4:	f000 f882 	bl	801c8ec <_printf_i>
 801c7e8:	e7e4      	b.n	801c7b4 <_vfiprintf_r+0x208>
 801c7ea:	bf00      	nop
 801c7ec:	0801e9b8 	.word	0x0801e9b8
 801c7f0:	0801e9d8 	.word	0x0801e9d8
 801c7f4:	0801e998 	.word	0x0801e998
 801c7f8:	0801e9f8 	.word	0x0801e9f8
 801c7fc:	0801ea02 	.word	0x0801ea02
 801c800:	00000000 	.word	0x00000000
 801c804:	0801c587 	.word	0x0801c587
 801c808:	0801e9fe 	.word	0x0801e9fe

0801c80c <_printf_common>:
 801c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c810:	4616      	mov	r6, r2
 801c812:	4699      	mov	r9, r3
 801c814:	688a      	ldr	r2, [r1, #8]
 801c816:	690b      	ldr	r3, [r1, #16]
 801c818:	4607      	mov	r7, r0
 801c81a:	4293      	cmp	r3, r2
 801c81c:	bfb8      	it	lt
 801c81e:	4613      	movlt	r3, r2
 801c820:	6033      	str	r3, [r6, #0]
 801c822:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c826:	460c      	mov	r4, r1
 801c828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c82c:	b10a      	cbz	r2, 801c832 <_printf_common+0x26>
 801c82e:	3301      	adds	r3, #1
 801c830:	6033      	str	r3, [r6, #0]
 801c832:	6823      	ldr	r3, [r4, #0]
 801c834:	0699      	lsls	r1, r3, #26
 801c836:	bf42      	ittt	mi
 801c838:	6833      	ldrmi	r3, [r6, #0]
 801c83a:	3302      	addmi	r3, #2
 801c83c:	6033      	strmi	r3, [r6, #0]
 801c83e:	6825      	ldr	r5, [r4, #0]
 801c840:	f015 0506 	ands.w	r5, r5, #6
 801c844:	d106      	bne.n	801c854 <_printf_common+0x48>
 801c846:	f104 0a19 	add.w	sl, r4, #25
 801c84a:	68e3      	ldr	r3, [r4, #12]
 801c84c:	6832      	ldr	r2, [r6, #0]
 801c84e:	1a9b      	subs	r3, r3, r2
 801c850:	42ab      	cmp	r3, r5
 801c852:	dc28      	bgt.n	801c8a6 <_printf_common+0x9a>
 801c854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c858:	1e13      	subs	r3, r2, #0
 801c85a:	6822      	ldr	r2, [r4, #0]
 801c85c:	bf18      	it	ne
 801c85e:	2301      	movne	r3, #1
 801c860:	0692      	lsls	r2, r2, #26
 801c862:	d42d      	bmi.n	801c8c0 <_printf_common+0xb4>
 801c864:	4649      	mov	r1, r9
 801c866:	4638      	mov	r0, r7
 801c868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c86c:	47c0      	blx	r8
 801c86e:	3001      	adds	r0, #1
 801c870:	d020      	beq.n	801c8b4 <_printf_common+0xa8>
 801c872:	6823      	ldr	r3, [r4, #0]
 801c874:	68e5      	ldr	r5, [r4, #12]
 801c876:	f003 0306 	and.w	r3, r3, #6
 801c87a:	2b04      	cmp	r3, #4
 801c87c:	bf18      	it	ne
 801c87e:	2500      	movne	r5, #0
 801c880:	6832      	ldr	r2, [r6, #0]
 801c882:	f04f 0600 	mov.w	r6, #0
 801c886:	68a3      	ldr	r3, [r4, #8]
 801c888:	bf08      	it	eq
 801c88a:	1aad      	subeq	r5, r5, r2
 801c88c:	6922      	ldr	r2, [r4, #16]
 801c88e:	bf08      	it	eq
 801c890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c894:	4293      	cmp	r3, r2
 801c896:	bfc4      	itt	gt
 801c898:	1a9b      	subgt	r3, r3, r2
 801c89a:	18ed      	addgt	r5, r5, r3
 801c89c:	341a      	adds	r4, #26
 801c89e:	42b5      	cmp	r5, r6
 801c8a0:	d11a      	bne.n	801c8d8 <_printf_common+0xcc>
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	e008      	b.n	801c8b8 <_printf_common+0xac>
 801c8a6:	2301      	movs	r3, #1
 801c8a8:	4652      	mov	r2, sl
 801c8aa:	4649      	mov	r1, r9
 801c8ac:	4638      	mov	r0, r7
 801c8ae:	47c0      	blx	r8
 801c8b0:	3001      	adds	r0, #1
 801c8b2:	d103      	bne.n	801c8bc <_printf_common+0xb0>
 801c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 801c8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8bc:	3501      	adds	r5, #1
 801c8be:	e7c4      	b.n	801c84a <_printf_common+0x3e>
 801c8c0:	2030      	movs	r0, #48	; 0x30
 801c8c2:	18e1      	adds	r1, r4, r3
 801c8c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c8c8:	1c5a      	adds	r2, r3, #1
 801c8ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c8ce:	4422      	add	r2, r4
 801c8d0:	3302      	adds	r3, #2
 801c8d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c8d6:	e7c5      	b.n	801c864 <_printf_common+0x58>
 801c8d8:	2301      	movs	r3, #1
 801c8da:	4622      	mov	r2, r4
 801c8dc:	4649      	mov	r1, r9
 801c8de:	4638      	mov	r0, r7
 801c8e0:	47c0      	blx	r8
 801c8e2:	3001      	adds	r0, #1
 801c8e4:	d0e6      	beq.n	801c8b4 <_printf_common+0xa8>
 801c8e6:	3601      	adds	r6, #1
 801c8e8:	e7d9      	b.n	801c89e <_printf_common+0x92>
	...

0801c8ec <_printf_i>:
 801c8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c8f0:	460c      	mov	r4, r1
 801c8f2:	7e27      	ldrb	r7, [r4, #24]
 801c8f4:	4691      	mov	r9, r2
 801c8f6:	2f78      	cmp	r7, #120	; 0x78
 801c8f8:	4680      	mov	r8, r0
 801c8fa:	469a      	mov	sl, r3
 801c8fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c8fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c902:	d807      	bhi.n	801c914 <_printf_i+0x28>
 801c904:	2f62      	cmp	r7, #98	; 0x62
 801c906:	d80a      	bhi.n	801c91e <_printf_i+0x32>
 801c908:	2f00      	cmp	r7, #0
 801c90a:	f000 80d9 	beq.w	801cac0 <_printf_i+0x1d4>
 801c90e:	2f58      	cmp	r7, #88	; 0x58
 801c910:	f000 80a4 	beq.w	801ca5c <_printf_i+0x170>
 801c914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c91c:	e03a      	b.n	801c994 <_printf_i+0xa8>
 801c91e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c922:	2b15      	cmp	r3, #21
 801c924:	d8f6      	bhi.n	801c914 <_printf_i+0x28>
 801c926:	a001      	add	r0, pc, #4	; (adr r0, 801c92c <_printf_i+0x40>)
 801c928:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c92c:	0801c985 	.word	0x0801c985
 801c930:	0801c999 	.word	0x0801c999
 801c934:	0801c915 	.word	0x0801c915
 801c938:	0801c915 	.word	0x0801c915
 801c93c:	0801c915 	.word	0x0801c915
 801c940:	0801c915 	.word	0x0801c915
 801c944:	0801c999 	.word	0x0801c999
 801c948:	0801c915 	.word	0x0801c915
 801c94c:	0801c915 	.word	0x0801c915
 801c950:	0801c915 	.word	0x0801c915
 801c954:	0801c915 	.word	0x0801c915
 801c958:	0801caa7 	.word	0x0801caa7
 801c95c:	0801c9c9 	.word	0x0801c9c9
 801c960:	0801ca89 	.word	0x0801ca89
 801c964:	0801c915 	.word	0x0801c915
 801c968:	0801c915 	.word	0x0801c915
 801c96c:	0801cac9 	.word	0x0801cac9
 801c970:	0801c915 	.word	0x0801c915
 801c974:	0801c9c9 	.word	0x0801c9c9
 801c978:	0801c915 	.word	0x0801c915
 801c97c:	0801c915 	.word	0x0801c915
 801c980:	0801ca91 	.word	0x0801ca91
 801c984:	680b      	ldr	r3, [r1, #0]
 801c986:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c98a:	1d1a      	adds	r2, r3, #4
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	600a      	str	r2, [r1, #0]
 801c990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c994:	2301      	movs	r3, #1
 801c996:	e0a4      	b.n	801cae2 <_printf_i+0x1f6>
 801c998:	6825      	ldr	r5, [r4, #0]
 801c99a:	6808      	ldr	r0, [r1, #0]
 801c99c:	062e      	lsls	r6, r5, #24
 801c99e:	f100 0304 	add.w	r3, r0, #4
 801c9a2:	d50a      	bpl.n	801c9ba <_printf_i+0xce>
 801c9a4:	6805      	ldr	r5, [r0, #0]
 801c9a6:	600b      	str	r3, [r1, #0]
 801c9a8:	2d00      	cmp	r5, #0
 801c9aa:	da03      	bge.n	801c9b4 <_printf_i+0xc8>
 801c9ac:	232d      	movs	r3, #45	; 0x2d
 801c9ae:	426d      	negs	r5, r5
 801c9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c9b4:	230a      	movs	r3, #10
 801c9b6:	485e      	ldr	r0, [pc, #376]	; (801cb30 <_printf_i+0x244>)
 801c9b8:	e019      	b.n	801c9ee <_printf_i+0x102>
 801c9ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c9be:	6805      	ldr	r5, [r0, #0]
 801c9c0:	600b      	str	r3, [r1, #0]
 801c9c2:	bf18      	it	ne
 801c9c4:	b22d      	sxthne	r5, r5
 801c9c6:	e7ef      	b.n	801c9a8 <_printf_i+0xbc>
 801c9c8:	680b      	ldr	r3, [r1, #0]
 801c9ca:	6825      	ldr	r5, [r4, #0]
 801c9cc:	1d18      	adds	r0, r3, #4
 801c9ce:	6008      	str	r0, [r1, #0]
 801c9d0:	0628      	lsls	r0, r5, #24
 801c9d2:	d501      	bpl.n	801c9d8 <_printf_i+0xec>
 801c9d4:	681d      	ldr	r5, [r3, #0]
 801c9d6:	e002      	b.n	801c9de <_printf_i+0xf2>
 801c9d8:	0669      	lsls	r1, r5, #25
 801c9da:	d5fb      	bpl.n	801c9d4 <_printf_i+0xe8>
 801c9dc:	881d      	ldrh	r5, [r3, #0]
 801c9de:	2f6f      	cmp	r7, #111	; 0x6f
 801c9e0:	bf0c      	ite	eq
 801c9e2:	2308      	moveq	r3, #8
 801c9e4:	230a      	movne	r3, #10
 801c9e6:	4852      	ldr	r0, [pc, #328]	; (801cb30 <_printf_i+0x244>)
 801c9e8:	2100      	movs	r1, #0
 801c9ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c9ee:	6866      	ldr	r6, [r4, #4]
 801c9f0:	2e00      	cmp	r6, #0
 801c9f2:	bfa8      	it	ge
 801c9f4:	6821      	ldrge	r1, [r4, #0]
 801c9f6:	60a6      	str	r6, [r4, #8]
 801c9f8:	bfa4      	itt	ge
 801c9fa:	f021 0104 	bicge.w	r1, r1, #4
 801c9fe:	6021      	strge	r1, [r4, #0]
 801ca00:	b90d      	cbnz	r5, 801ca06 <_printf_i+0x11a>
 801ca02:	2e00      	cmp	r6, #0
 801ca04:	d04d      	beq.n	801caa2 <_printf_i+0x1b6>
 801ca06:	4616      	mov	r6, r2
 801ca08:	fbb5 f1f3 	udiv	r1, r5, r3
 801ca0c:	fb03 5711 	mls	r7, r3, r1, r5
 801ca10:	5dc7      	ldrb	r7, [r0, r7]
 801ca12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ca16:	462f      	mov	r7, r5
 801ca18:	42bb      	cmp	r3, r7
 801ca1a:	460d      	mov	r5, r1
 801ca1c:	d9f4      	bls.n	801ca08 <_printf_i+0x11c>
 801ca1e:	2b08      	cmp	r3, #8
 801ca20:	d10b      	bne.n	801ca3a <_printf_i+0x14e>
 801ca22:	6823      	ldr	r3, [r4, #0]
 801ca24:	07df      	lsls	r7, r3, #31
 801ca26:	d508      	bpl.n	801ca3a <_printf_i+0x14e>
 801ca28:	6923      	ldr	r3, [r4, #16]
 801ca2a:	6861      	ldr	r1, [r4, #4]
 801ca2c:	4299      	cmp	r1, r3
 801ca2e:	bfde      	ittt	le
 801ca30:	2330      	movle	r3, #48	; 0x30
 801ca32:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ca36:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ca3a:	1b92      	subs	r2, r2, r6
 801ca3c:	6122      	str	r2, [r4, #16]
 801ca3e:	464b      	mov	r3, r9
 801ca40:	4621      	mov	r1, r4
 801ca42:	4640      	mov	r0, r8
 801ca44:	f8cd a000 	str.w	sl, [sp]
 801ca48:	aa03      	add	r2, sp, #12
 801ca4a:	f7ff fedf 	bl	801c80c <_printf_common>
 801ca4e:	3001      	adds	r0, #1
 801ca50:	d14c      	bne.n	801caec <_printf_i+0x200>
 801ca52:	f04f 30ff 	mov.w	r0, #4294967295
 801ca56:	b004      	add	sp, #16
 801ca58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca5c:	4834      	ldr	r0, [pc, #208]	; (801cb30 <_printf_i+0x244>)
 801ca5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ca62:	680e      	ldr	r6, [r1, #0]
 801ca64:	6823      	ldr	r3, [r4, #0]
 801ca66:	f856 5b04 	ldr.w	r5, [r6], #4
 801ca6a:	061f      	lsls	r7, r3, #24
 801ca6c:	600e      	str	r6, [r1, #0]
 801ca6e:	d514      	bpl.n	801ca9a <_printf_i+0x1ae>
 801ca70:	07d9      	lsls	r1, r3, #31
 801ca72:	bf44      	itt	mi
 801ca74:	f043 0320 	orrmi.w	r3, r3, #32
 801ca78:	6023      	strmi	r3, [r4, #0]
 801ca7a:	b91d      	cbnz	r5, 801ca84 <_printf_i+0x198>
 801ca7c:	6823      	ldr	r3, [r4, #0]
 801ca7e:	f023 0320 	bic.w	r3, r3, #32
 801ca82:	6023      	str	r3, [r4, #0]
 801ca84:	2310      	movs	r3, #16
 801ca86:	e7af      	b.n	801c9e8 <_printf_i+0xfc>
 801ca88:	6823      	ldr	r3, [r4, #0]
 801ca8a:	f043 0320 	orr.w	r3, r3, #32
 801ca8e:	6023      	str	r3, [r4, #0]
 801ca90:	2378      	movs	r3, #120	; 0x78
 801ca92:	4828      	ldr	r0, [pc, #160]	; (801cb34 <_printf_i+0x248>)
 801ca94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ca98:	e7e3      	b.n	801ca62 <_printf_i+0x176>
 801ca9a:	065e      	lsls	r6, r3, #25
 801ca9c:	bf48      	it	mi
 801ca9e:	b2ad      	uxthmi	r5, r5
 801caa0:	e7e6      	b.n	801ca70 <_printf_i+0x184>
 801caa2:	4616      	mov	r6, r2
 801caa4:	e7bb      	b.n	801ca1e <_printf_i+0x132>
 801caa6:	680b      	ldr	r3, [r1, #0]
 801caa8:	6826      	ldr	r6, [r4, #0]
 801caaa:	1d1d      	adds	r5, r3, #4
 801caac:	6960      	ldr	r0, [r4, #20]
 801caae:	600d      	str	r5, [r1, #0]
 801cab0:	0635      	lsls	r5, r6, #24
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	d501      	bpl.n	801caba <_printf_i+0x1ce>
 801cab6:	6018      	str	r0, [r3, #0]
 801cab8:	e002      	b.n	801cac0 <_printf_i+0x1d4>
 801caba:	0671      	lsls	r1, r6, #25
 801cabc:	d5fb      	bpl.n	801cab6 <_printf_i+0x1ca>
 801cabe:	8018      	strh	r0, [r3, #0]
 801cac0:	2300      	movs	r3, #0
 801cac2:	4616      	mov	r6, r2
 801cac4:	6123      	str	r3, [r4, #16]
 801cac6:	e7ba      	b.n	801ca3e <_printf_i+0x152>
 801cac8:	680b      	ldr	r3, [r1, #0]
 801caca:	1d1a      	adds	r2, r3, #4
 801cacc:	600a      	str	r2, [r1, #0]
 801cace:	681e      	ldr	r6, [r3, #0]
 801cad0:	2100      	movs	r1, #0
 801cad2:	4630      	mov	r0, r6
 801cad4:	6862      	ldr	r2, [r4, #4]
 801cad6:	f000 f921 	bl	801cd1c <memchr>
 801cada:	b108      	cbz	r0, 801cae0 <_printf_i+0x1f4>
 801cadc:	1b80      	subs	r0, r0, r6
 801cade:	6060      	str	r0, [r4, #4]
 801cae0:	6863      	ldr	r3, [r4, #4]
 801cae2:	6123      	str	r3, [r4, #16]
 801cae4:	2300      	movs	r3, #0
 801cae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801caea:	e7a8      	b.n	801ca3e <_printf_i+0x152>
 801caec:	4632      	mov	r2, r6
 801caee:	4649      	mov	r1, r9
 801caf0:	4640      	mov	r0, r8
 801caf2:	6923      	ldr	r3, [r4, #16]
 801caf4:	47d0      	blx	sl
 801caf6:	3001      	adds	r0, #1
 801caf8:	d0ab      	beq.n	801ca52 <_printf_i+0x166>
 801cafa:	6823      	ldr	r3, [r4, #0]
 801cafc:	079b      	lsls	r3, r3, #30
 801cafe:	d413      	bmi.n	801cb28 <_printf_i+0x23c>
 801cb00:	68e0      	ldr	r0, [r4, #12]
 801cb02:	9b03      	ldr	r3, [sp, #12]
 801cb04:	4298      	cmp	r0, r3
 801cb06:	bfb8      	it	lt
 801cb08:	4618      	movlt	r0, r3
 801cb0a:	e7a4      	b.n	801ca56 <_printf_i+0x16a>
 801cb0c:	2301      	movs	r3, #1
 801cb0e:	4632      	mov	r2, r6
 801cb10:	4649      	mov	r1, r9
 801cb12:	4640      	mov	r0, r8
 801cb14:	47d0      	blx	sl
 801cb16:	3001      	adds	r0, #1
 801cb18:	d09b      	beq.n	801ca52 <_printf_i+0x166>
 801cb1a:	3501      	adds	r5, #1
 801cb1c:	68e3      	ldr	r3, [r4, #12]
 801cb1e:	9903      	ldr	r1, [sp, #12]
 801cb20:	1a5b      	subs	r3, r3, r1
 801cb22:	42ab      	cmp	r3, r5
 801cb24:	dcf2      	bgt.n	801cb0c <_printf_i+0x220>
 801cb26:	e7eb      	b.n	801cb00 <_printf_i+0x214>
 801cb28:	2500      	movs	r5, #0
 801cb2a:	f104 0619 	add.w	r6, r4, #25
 801cb2e:	e7f5      	b.n	801cb1c <_printf_i+0x230>
 801cb30:	0801ea09 	.word	0x0801ea09
 801cb34:	0801ea1a 	.word	0x0801ea1a

0801cb38 <_putc_r>:
 801cb38:	b570      	push	{r4, r5, r6, lr}
 801cb3a:	460d      	mov	r5, r1
 801cb3c:	4614      	mov	r4, r2
 801cb3e:	4606      	mov	r6, r0
 801cb40:	b118      	cbz	r0, 801cb4a <_putc_r+0x12>
 801cb42:	6983      	ldr	r3, [r0, #24]
 801cb44:	b90b      	cbnz	r3, 801cb4a <_putc_r+0x12>
 801cb46:	f7ff fb5f 	bl	801c208 <__sinit>
 801cb4a:	4b1c      	ldr	r3, [pc, #112]	; (801cbbc <_putc_r+0x84>)
 801cb4c:	429c      	cmp	r4, r3
 801cb4e:	d124      	bne.n	801cb9a <_putc_r+0x62>
 801cb50:	6874      	ldr	r4, [r6, #4]
 801cb52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb54:	07d8      	lsls	r0, r3, #31
 801cb56:	d405      	bmi.n	801cb64 <_putc_r+0x2c>
 801cb58:	89a3      	ldrh	r3, [r4, #12]
 801cb5a:	0599      	lsls	r1, r3, #22
 801cb5c:	d402      	bmi.n	801cb64 <_putc_r+0x2c>
 801cb5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb60:	f7ff fbf0 	bl	801c344 <__retarget_lock_acquire_recursive>
 801cb64:	68a3      	ldr	r3, [r4, #8]
 801cb66:	3b01      	subs	r3, #1
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	60a3      	str	r3, [r4, #8]
 801cb6c:	da05      	bge.n	801cb7a <_putc_r+0x42>
 801cb6e:	69a2      	ldr	r2, [r4, #24]
 801cb70:	4293      	cmp	r3, r2
 801cb72:	db1c      	blt.n	801cbae <_putc_r+0x76>
 801cb74:	b2eb      	uxtb	r3, r5
 801cb76:	2b0a      	cmp	r3, #10
 801cb78:	d019      	beq.n	801cbae <_putc_r+0x76>
 801cb7a:	6823      	ldr	r3, [r4, #0]
 801cb7c:	1c5a      	adds	r2, r3, #1
 801cb7e:	6022      	str	r2, [r4, #0]
 801cb80:	701d      	strb	r5, [r3, #0]
 801cb82:	b2ed      	uxtb	r5, r5
 801cb84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb86:	07da      	lsls	r2, r3, #31
 801cb88:	d405      	bmi.n	801cb96 <_putc_r+0x5e>
 801cb8a:	89a3      	ldrh	r3, [r4, #12]
 801cb8c:	059b      	lsls	r3, r3, #22
 801cb8e:	d402      	bmi.n	801cb96 <_putc_r+0x5e>
 801cb90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb92:	f7ff fbd8 	bl	801c346 <__retarget_lock_release_recursive>
 801cb96:	4628      	mov	r0, r5
 801cb98:	bd70      	pop	{r4, r5, r6, pc}
 801cb9a:	4b09      	ldr	r3, [pc, #36]	; (801cbc0 <_putc_r+0x88>)
 801cb9c:	429c      	cmp	r4, r3
 801cb9e:	d101      	bne.n	801cba4 <_putc_r+0x6c>
 801cba0:	68b4      	ldr	r4, [r6, #8]
 801cba2:	e7d6      	b.n	801cb52 <_putc_r+0x1a>
 801cba4:	4b07      	ldr	r3, [pc, #28]	; (801cbc4 <_putc_r+0x8c>)
 801cba6:	429c      	cmp	r4, r3
 801cba8:	bf08      	it	eq
 801cbaa:	68f4      	ldreq	r4, [r6, #12]
 801cbac:	e7d1      	b.n	801cb52 <_putc_r+0x1a>
 801cbae:	4629      	mov	r1, r5
 801cbb0:	4622      	mov	r2, r4
 801cbb2:	4630      	mov	r0, r6
 801cbb4:	f7ff f94e 	bl	801be54 <__swbuf_r>
 801cbb8:	4605      	mov	r5, r0
 801cbba:	e7e3      	b.n	801cb84 <_putc_r+0x4c>
 801cbbc:	0801e9b8 	.word	0x0801e9b8
 801cbc0:	0801e9d8 	.word	0x0801e9d8
 801cbc4:	0801e998 	.word	0x0801e998

0801cbc8 <_sbrk_r>:
 801cbc8:	b538      	push	{r3, r4, r5, lr}
 801cbca:	2300      	movs	r3, #0
 801cbcc:	4d05      	ldr	r5, [pc, #20]	; (801cbe4 <_sbrk_r+0x1c>)
 801cbce:	4604      	mov	r4, r0
 801cbd0:	4608      	mov	r0, r1
 801cbd2:	602b      	str	r3, [r5, #0]
 801cbd4:	f7e6 f892 	bl	8002cfc <_sbrk>
 801cbd8:	1c43      	adds	r3, r0, #1
 801cbda:	d102      	bne.n	801cbe2 <_sbrk_r+0x1a>
 801cbdc:	682b      	ldr	r3, [r5, #0]
 801cbde:	b103      	cbz	r3, 801cbe2 <_sbrk_r+0x1a>
 801cbe0:	6023      	str	r3, [r4, #0]
 801cbe2:	bd38      	pop	{r3, r4, r5, pc}
 801cbe4:	20003ce0 	.word	0x20003ce0

0801cbe8 <__sread>:
 801cbe8:	b510      	push	{r4, lr}
 801cbea:	460c      	mov	r4, r1
 801cbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cbf0:	f000 f8ae 	bl	801cd50 <_read_r>
 801cbf4:	2800      	cmp	r0, #0
 801cbf6:	bfab      	itete	ge
 801cbf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cbfa:	89a3      	ldrhlt	r3, [r4, #12]
 801cbfc:	181b      	addge	r3, r3, r0
 801cbfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cc02:	bfac      	ite	ge
 801cc04:	6563      	strge	r3, [r4, #84]	; 0x54
 801cc06:	81a3      	strhlt	r3, [r4, #12]
 801cc08:	bd10      	pop	{r4, pc}

0801cc0a <__swrite>:
 801cc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc0e:	461f      	mov	r7, r3
 801cc10:	898b      	ldrh	r3, [r1, #12]
 801cc12:	4605      	mov	r5, r0
 801cc14:	05db      	lsls	r3, r3, #23
 801cc16:	460c      	mov	r4, r1
 801cc18:	4616      	mov	r6, r2
 801cc1a:	d505      	bpl.n	801cc28 <__swrite+0x1e>
 801cc1c:	2302      	movs	r3, #2
 801cc1e:	2200      	movs	r2, #0
 801cc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc24:	f000 f868 	bl	801ccf8 <_lseek_r>
 801cc28:	89a3      	ldrh	r3, [r4, #12]
 801cc2a:	4632      	mov	r2, r6
 801cc2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cc30:	81a3      	strh	r3, [r4, #12]
 801cc32:	4628      	mov	r0, r5
 801cc34:	463b      	mov	r3, r7
 801cc36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc3e:	f000 b817 	b.w	801cc70 <_write_r>

0801cc42 <__sseek>:
 801cc42:	b510      	push	{r4, lr}
 801cc44:	460c      	mov	r4, r1
 801cc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc4a:	f000 f855 	bl	801ccf8 <_lseek_r>
 801cc4e:	1c43      	adds	r3, r0, #1
 801cc50:	89a3      	ldrh	r3, [r4, #12]
 801cc52:	bf15      	itete	ne
 801cc54:	6560      	strne	r0, [r4, #84]	; 0x54
 801cc56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cc5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cc5e:	81a3      	strheq	r3, [r4, #12]
 801cc60:	bf18      	it	ne
 801cc62:	81a3      	strhne	r3, [r4, #12]
 801cc64:	bd10      	pop	{r4, pc}

0801cc66 <__sclose>:
 801cc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc6a:	f000 b813 	b.w	801cc94 <_close_r>
	...

0801cc70 <_write_r>:
 801cc70:	b538      	push	{r3, r4, r5, lr}
 801cc72:	4604      	mov	r4, r0
 801cc74:	4608      	mov	r0, r1
 801cc76:	4611      	mov	r1, r2
 801cc78:	2200      	movs	r2, #0
 801cc7a:	4d05      	ldr	r5, [pc, #20]	; (801cc90 <_write_r+0x20>)
 801cc7c:	602a      	str	r2, [r5, #0]
 801cc7e:	461a      	mov	r2, r3
 801cc80:	f7e5 fff0 	bl	8002c64 <_write>
 801cc84:	1c43      	adds	r3, r0, #1
 801cc86:	d102      	bne.n	801cc8e <_write_r+0x1e>
 801cc88:	682b      	ldr	r3, [r5, #0]
 801cc8a:	b103      	cbz	r3, 801cc8e <_write_r+0x1e>
 801cc8c:	6023      	str	r3, [r4, #0]
 801cc8e:	bd38      	pop	{r3, r4, r5, pc}
 801cc90:	20003ce0 	.word	0x20003ce0

0801cc94 <_close_r>:
 801cc94:	b538      	push	{r3, r4, r5, lr}
 801cc96:	2300      	movs	r3, #0
 801cc98:	4d05      	ldr	r5, [pc, #20]	; (801ccb0 <_close_r+0x1c>)
 801cc9a:	4604      	mov	r4, r0
 801cc9c:	4608      	mov	r0, r1
 801cc9e:	602b      	str	r3, [r5, #0]
 801cca0:	f7e5 fffc 	bl	8002c9c <_close>
 801cca4:	1c43      	adds	r3, r0, #1
 801cca6:	d102      	bne.n	801ccae <_close_r+0x1a>
 801cca8:	682b      	ldr	r3, [r5, #0]
 801ccaa:	b103      	cbz	r3, 801ccae <_close_r+0x1a>
 801ccac:	6023      	str	r3, [r4, #0]
 801ccae:	bd38      	pop	{r3, r4, r5, pc}
 801ccb0:	20003ce0 	.word	0x20003ce0

0801ccb4 <_fstat_r>:
 801ccb4:	b538      	push	{r3, r4, r5, lr}
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	4d06      	ldr	r5, [pc, #24]	; (801ccd4 <_fstat_r+0x20>)
 801ccba:	4604      	mov	r4, r0
 801ccbc:	4608      	mov	r0, r1
 801ccbe:	4611      	mov	r1, r2
 801ccc0:	602b      	str	r3, [r5, #0]
 801ccc2:	f7e5 fff6 	bl	8002cb2 <_fstat>
 801ccc6:	1c43      	adds	r3, r0, #1
 801ccc8:	d102      	bne.n	801ccd0 <_fstat_r+0x1c>
 801ccca:	682b      	ldr	r3, [r5, #0]
 801cccc:	b103      	cbz	r3, 801ccd0 <_fstat_r+0x1c>
 801ccce:	6023      	str	r3, [r4, #0]
 801ccd0:	bd38      	pop	{r3, r4, r5, pc}
 801ccd2:	bf00      	nop
 801ccd4:	20003ce0 	.word	0x20003ce0

0801ccd8 <_isatty_r>:
 801ccd8:	b538      	push	{r3, r4, r5, lr}
 801ccda:	2300      	movs	r3, #0
 801ccdc:	4d05      	ldr	r5, [pc, #20]	; (801ccf4 <_isatty_r+0x1c>)
 801ccde:	4604      	mov	r4, r0
 801cce0:	4608      	mov	r0, r1
 801cce2:	602b      	str	r3, [r5, #0]
 801cce4:	f7e5 fff4 	bl	8002cd0 <_isatty>
 801cce8:	1c43      	adds	r3, r0, #1
 801ccea:	d102      	bne.n	801ccf2 <_isatty_r+0x1a>
 801ccec:	682b      	ldr	r3, [r5, #0]
 801ccee:	b103      	cbz	r3, 801ccf2 <_isatty_r+0x1a>
 801ccf0:	6023      	str	r3, [r4, #0]
 801ccf2:	bd38      	pop	{r3, r4, r5, pc}
 801ccf4:	20003ce0 	.word	0x20003ce0

0801ccf8 <_lseek_r>:
 801ccf8:	b538      	push	{r3, r4, r5, lr}
 801ccfa:	4604      	mov	r4, r0
 801ccfc:	4608      	mov	r0, r1
 801ccfe:	4611      	mov	r1, r2
 801cd00:	2200      	movs	r2, #0
 801cd02:	4d05      	ldr	r5, [pc, #20]	; (801cd18 <_lseek_r+0x20>)
 801cd04:	602a      	str	r2, [r5, #0]
 801cd06:	461a      	mov	r2, r3
 801cd08:	f7e5 ffec 	bl	8002ce4 <_lseek>
 801cd0c:	1c43      	adds	r3, r0, #1
 801cd0e:	d102      	bne.n	801cd16 <_lseek_r+0x1e>
 801cd10:	682b      	ldr	r3, [r5, #0]
 801cd12:	b103      	cbz	r3, 801cd16 <_lseek_r+0x1e>
 801cd14:	6023      	str	r3, [r4, #0]
 801cd16:	bd38      	pop	{r3, r4, r5, pc}
 801cd18:	20003ce0 	.word	0x20003ce0

0801cd1c <memchr>:
 801cd1c:	4603      	mov	r3, r0
 801cd1e:	b510      	push	{r4, lr}
 801cd20:	b2c9      	uxtb	r1, r1
 801cd22:	4402      	add	r2, r0
 801cd24:	4293      	cmp	r3, r2
 801cd26:	4618      	mov	r0, r3
 801cd28:	d101      	bne.n	801cd2e <memchr+0x12>
 801cd2a:	2000      	movs	r0, #0
 801cd2c:	e003      	b.n	801cd36 <memchr+0x1a>
 801cd2e:	7804      	ldrb	r4, [r0, #0]
 801cd30:	3301      	adds	r3, #1
 801cd32:	428c      	cmp	r4, r1
 801cd34:	d1f6      	bne.n	801cd24 <memchr+0x8>
 801cd36:	bd10      	pop	{r4, pc}

0801cd38 <__malloc_lock>:
 801cd38:	4801      	ldr	r0, [pc, #4]	; (801cd40 <__malloc_lock+0x8>)
 801cd3a:	f7ff bb03 	b.w	801c344 <__retarget_lock_acquire_recursive>
 801cd3e:	bf00      	nop
 801cd40:	20003cd8 	.word	0x20003cd8

0801cd44 <__malloc_unlock>:
 801cd44:	4801      	ldr	r0, [pc, #4]	; (801cd4c <__malloc_unlock+0x8>)
 801cd46:	f7ff bafe 	b.w	801c346 <__retarget_lock_release_recursive>
 801cd4a:	bf00      	nop
 801cd4c:	20003cd8 	.word	0x20003cd8

0801cd50 <_read_r>:
 801cd50:	b538      	push	{r3, r4, r5, lr}
 801cd52:	4604      	mov	r4, r0
 801cd54:	4608      	mov	r0, r1
 801cd56:	4611      	mov	r1, r2
 801cd58:	2200      	movs	r2, #0
 801cd5a:	4d05      	ldr	r5, [pc, #20]	; (801cd70 <_read_r+0x20>)
 801cd5c:	602a      	str	r2, [r5, #0]
 801cd5e:	461a      	mov	r2, r3
 801cd60:	f7e5 ff63 	bl	8002c2a <_read>
 801cd64:	1c43      	adds	r3, r0, #1
 801cd66:	d102      	bne.n	801cd6e <_read_r+0x1e>
 801cd68:	682b      	ldr	r3, [r5, #0]
 801cd6a:	b103      	cbz	r3, 801cd6e <_read_r+0x1e>
 801cd6c:	6023      	str	r3, [r4, #0]
 801cd6e:	bd38      	pop	{r3, r4, r5, pc}
 801cd70:	20003ce0 	.word	0x20003ce0

0801cd74 <_init>:
 801cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd76:	bf00      	nop
 801cd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd7a:	bc08      	pop	{r3}
 801cd7c:	469e      	mov	lr, r3
 801cd7e:	4770      	bx	lr

0801cd80 <_fini>:
 801cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd82:	bf00      	nop
 801cd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd86:	bc08      	pop	{r3}
 801cd88:	469e      	mov	lr, r3
 801cd8a:	4770      	bx	lr
