
TestZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f5c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08013140  08013140  00023140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138d4  080138d4  0003011c  2**0
                  CONTENTS
  4 .ARM          00000000  080138d4  080138d4  0003011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080138d4  080138d4  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138d4  080138d4  000238d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138d8  080138d8  000238d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080138dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000190c  2000011c  080139f8  0003011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a28  080139f8  00031a28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f31e  00000000  00000000  00030145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060cc  00000000  00000000  0005f463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00065530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000250ed  00000000  00000000  00066b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024129  00000000  00000000  0008bc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b2bfa  00000000  00000000  000afdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001629a8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000013f8  00000000  00000000  00162a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060cc  00000000  00000000  00163df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000011c 	.word	0x2000011c
 8000200:	00000000 	.word	0x00000000
 8000204:	08013128 	.word	0x08013128

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000120 	.word	0x20000120
 8000220:	08013128 	.word	0x08013128

08000224 <cmdCompare>:
  * @retval True : Same command.
  * @retval False : Different command.
  *****************************************************************************
  */
static bool cmdCompare(uint8_t *cmd, uint8_t *find, uint16_t len)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	4613      	mov	r3, r2
 8000230:	80fb      	strh	r3, [r7, #6]
  for(int i = 0; i < 20; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	e00f      	b.n	8000258 <cmdCompare+0x34>
  {
    if(!memcmp(&cmd[i],find, len))
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	4413      	add	r3, r2
 800023e:	88fa      	ldrh	r2, [r7, #6]
 8000240:	68b9      	ldr	r1, [r7, #8]
 8000242:	4618      	mov	r0, r3
 8000244:	f011 ff5c 	bl	8012100 <memcmp>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d101      	bne.n	8000252 <cmdCompare+0x2e>
    {
      return true;
 800024e:	2301      	movs	r3, #1
 8000250:	e006      	b.n	8000260 <cmdCompare+0x3c>
  for(int i = 0; i < 20; i++)
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	3301      	adds	r3, #1
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	2b13      	cmp	r3, #19
 800025c:	ddec      	ble.n	8000238 <cmdCompare+0x14>
    }
  }
  return false;
 800025e:	2300      	movs	r3, #0
}
 8000260:	4618      	mov	r0, r3
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <demoCeT4TSelect>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT4TSelect(uint8_t *cmdData, uint8_t *rspData)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
  bool success = false;
 8000272:	2300      	movs	r3, #0
 8000274:	77fb      	strb	r3, [r7, #31]
   * Select App by Name NDEF 4 ST:  00 A4 04 00 07 A0 00 00 00 03 00 00 00
   * Select CC FID:                 00 A4 00 0C 02 xx xx
   * Select NDEF FID:               00 A4 00 0C 02 xx xx
   */
  
  uint8_t aid[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};
 8000276:	4a3e      	ldr	r2, [pc, #248]	; (8000370 <demoCeT4TSelect+0x108>)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000280:	6018      	str	r0, [r3, #0]
 8000282:	3304      	adds	r3, #4
 8000284:	8019      	strh	r1, [r3, #0]
 8000286:	3302      	adds	r3, #2
 8000288:	0c0a      	lsrs	r2, r1, #16
 800028a:	701a      	strb	r2, [r3, #0]
  uint8_t fidCC[] = {FID_CC >> 8 , FID_CC & 0xFF};
 800028c:	f240 33e1 	movw	r3, #993	; 0x3e1
 8000290:	82bb      	strh	r3, [r7, #20]
  uint8_t fidNDEF[] = {FID_NDEF >> 8, FID_NDEF & 0xFF};
 8000292:	f240 43e1 	movw	r3, #1249	; 0x4e1
 8000296:	823b      	strh	r3, [r7, #16]
  uint8_t selectFileId[] = {0xA4, 0x00, 0x0C, 0x02, 0x00, 0x01 };
 8000298:	4a36      	ldr	r2, [pc, #216]	; (8000374 <demoCeT4TSelect+0x10c>)
 800029a:	f107 0308 	add.w	r3, r7, #8
 800029e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a2:	6018      	str	r0, [r3, #0]
 80002a4:	3304      	adds	r3, #4
 80002a6:	8019      	strh	r1, [r3, #0]

  if(cmdCompare( cmdData, aid, sizeof(aid)))
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	2207      	movs	r2, #7
 80002ae:	4619      	mov	r1, r3
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f7ff ffb7 	bl	8000224 <cmdCompare>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d005      	beq.n	80002c8 <demoCeT4TSelect+0x60>
  { /* Select Appli */
      nState = STATE_APP_SELECTED;
 80002bc:	4b2e      	ldr	r3, [pc, #184]	; (8000378 <demoCeT4TSelect+0x110>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
      success = true;
 80002c2:	2301      	movs	r3, #1
 80002c4:	77fb      	strb	r3, [r7, #31]
 80002c6:	e03c      	b.n	8000342 <demoCeT4TSelect+0xda>
  }
  else if((nState >= STATE_APP_SELECTED) && cmdCompare(cmdData, fidCC, sizeof(fidCC)))
 80002c8:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <demoCeT4TSelect+0x110>)
 80002ca:	f993 3000 	ldrsb.w	r3, [r3]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	dd12      	ble.n	80002f8 <demoCeT4TSelect+0x90>
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	2202      	movs	r2, #2
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f7ff ffa2 	bl	8000224 <cmdCompare>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d008      	beq.n	80002f8 <demoCeT4TSelect+0x90>
  { /* Select CC */
      nState = STATE_CC_SELECTED;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <demoCeT4TSelect+0x110>)
 80002e8:	2202      	movs	r2, #2
 80002ea:	701a      	strb	r2, [r3, #0]
      nSelectedIdx = 0;
 80002ec:	4b23      	ldr	r3, [pc, #140]	; (800037c <demoCeT4TSelect+0x114>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
      success = true;
 80002f2:	2301      	movs	r3, #1
 80002f4:	77fb      	strb	r3, [r7, #31]
 80002f6:	e024      	b.n	8000342 <demoCeT4TSelect+0xda>
  }
  else if((nState >= STATE_APP_SELECTED) && (cmdCompare(cmdData,fidNDEF,sizeof(fidNDEF)) || cmdCompare(cmdData,selectFileId,sizeof(selectFileId))))
 80002f8:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <demoCeT4TSelect+0x110>)
 80002fa:	f993 3000 	ldrsb.w	r3, [r3]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	dd1c      	ble.n	800033c <demoCeT4TSelect+0xd4>
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2202      	movs	r2, #2
 8000308:	4619      	mov	r1, r3
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f7ff ff8a 	bl	8000224 <cmdCompare>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d109      	bne.n	800032a <demoCeT4TSelect+0xc2>
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2206      	movs	r2, #6
 800031c:	4619      	mov	r1, r3
 800031e:	6878      	ldr	r0, [r7, #4]
 8000320:	f7ff ff80 	bl	8000224 <cmdCompare>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d008      	beq.n	800033c <demoCeT4TSelect+0xd4>
  { /* Select NDEF */
      nState = STATE_FID_SELECTED;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <demoCeT4TSelect+0x110>)
 800032c:	2203      	movs	r2, #3
 800032e:	701a      	strb	r2, [r3, #0]
      nSelectedIdx = 1;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <demoCeT4TSelect+0x114>)
 8000332:	2201      	movs	r2, #1
 8000334:	601a      	str	r2, [r3, #0]
      success = true;
 8000336:	2301      	movs	r3, #1
 8000338:	77fb      	strb	r3, [r7, #31]
 800033a:	e002      	b.n	8000342 <demoCeT4TSelect+0xda>
  }
  else
  {
      nState = STATE_IDLE;
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <demoCeT4TSelect+0x110>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
  }

  rspData[0] = (success ? (char)0x90 : 0x6A);
 8000342:	7ffb      	ldrb	r3, [r7, #31]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <demoCeT4TSelect+0xe4>
 8000348:	2290      	movs	r2, #144	; 0x90
 800034a:	e000      	b.n	800034e <demoCeT4TSelect+0xe6>
 800034c:	226a      	movs	r2, #106	; 0x6a
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	701a      	strb	r2, [r3, #0]
  rspData[1] = (success ? (char)0x00 : 0x82);
 8000352:	7ffb      	ldrb	r3, [r7, #31]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <demoCeT4TSelect+0xf4>
 8000358:	2200      	movs	r2, #0
 800035a:	e000      	b.n	800035e <demoCeT4TSelect+0xf6>
 800035c:	2282      	movs	r2, #130	; 0x82
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	701a      	strb	r2, [r3, #0]
  
  return 2;
 8000364:	2302      	movs	r3, #2
}
 8000366:	4618      	mov	r0, r3
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	08013140 	.word	0x08013140
 8000374:	08013148 	.word	0x08013148
 8000378:	20000940 	.word	0x20000940
 800037c:	20000000 	.word	0x20000000

08000380 <demoCeT4TRead>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT4TRead(uint8_t *cmdData, uint8_t *rspData)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  /*
   * Cmd: CLA(1) | INS(1) | P1(1).. offset inside file high | P2(1).. offset inside file high | Le(1).. nBytes to read
   * Rsp: BytesRead | SW12
   */
  unsigned short offset = (cmdData[2] << 8) | cmdData[3];
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3302      	adds	r3, #2
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	021b      	lsls	r3, r3, #8
 8000392:	b21a      	sxth	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3303      	adds	r3, #3
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b21b      	sxth	r3, r3
 800039c:	4313      	orrs	r3, r2
 800039e:	b21b      	sxth	r3, r3
 80003a0:	81bb      	strh	r3, [r7, #12]
  unsigned short toRead = cmdData[4];
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3304      	adds	r3, #4
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	81fb      	strh	r3, [r7, #14]
  uint8_t * ppbMemory;

  /* Any file selected */
  if(nSelectedIdx < 0 || nSelectedIdx >= nFiles)
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <demoCeT4TRead+0xbc>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db05      	blt.n	80003be <demoCeT4TRead+0x3e>
 80003b2:	4b22      	ldr	r3, [pc, #136]	; (800043c <demoCeT4TRead+0xbc>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <demoCeT4TRead+0xc0>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	db08      	blt.n	80003d0 <demoCeT4TRead+0x50>
  {
      rspData[0] = ((char)0x6A);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	226a      	movs	r2, #106	; 0x6a
 80003c2:	701a      	strb	r2, [r3, #0]
      rspData[1] = ((char)0x82);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	2282      	movs	r2, #130	; 0x82
 80003ca:	701a      	strb	r2, [r3, #0]
      return 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	e031      	b.n	8000434 <demoCeT4TRead+0xb4>
  }

  /* offset + length exceed file size */
  if((unsigned long)(offset + toRead) > pdwFileSize[nSelectedIdx])
 80003d0:	89ba      	ldrh	r2, [r7, #12]
 80003d2:	89fb      	ldrh	r3, [r7, #14]
 80003d4:	4413      	add	r3, r2
 80003d6:	4619      	mov	r1, r3
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <demoCeT4TRead+0xbc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a19      	ldr	r2, [pc, #100]	; (8000444 <demoCeT4TRead+0xc4>)
 80003de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <demoCeT4TRead+0x78>
  {
      toRead = pdwFileSize[nSelectedIdx] - offset;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <demoCeT4TRead+0xbc>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a16      	ldr	r2, [pc, #88]	; (8000444 <demoCeT4TRead+0xc4>)
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	89bb      	ldrh	r3, [r7, #12]
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	81fb      	strh	r3, [r7, #14]
  }

  ppbMemory = (nSelectedIdx == 0 ? ccfile : ndefFile);
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <demoCeT4TRead+0xbc>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d101      	bne.n	8000404 <demoCeT4TRead+0x84>
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <demoCeT4TRead+0xc8>)
 8000402:	e000      	b.n	8000406 <demoCeT4TRead+0x86>
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <demoCeT4TRead+0xcc>)
 8000406:	60bb      	str	r3, [r7, #8]
  /* read data */
  memcpy(rspData, &ppbMemory[offset], toRead);
 8000408:	89bb      	ldrh	r3, [r7, #12]
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	4413      	add	r3, r2
 800040e:	89fa      	ldrh	r2, [r7, #14]
 8000410:	4619      	mov	r1, r3
 8000412:	6838      	ldr	r0, [r7, #0]
 8000414:	f011 fe82 	bl	801211c <memcpy>

  rspData[toRead] = ((char)0x90);
 8000418:	89fb      	ldrh	r3, [r7, #14]
 800041a:	683a      	ldr	r2, [r7, #0]
 800041c:	4413      	add	r3, r2
 800041e:	2290      	movs	r2, #144	; 0x90
 8000420:	701a      	strb	r2, [r3, #0]
  rspData[toRead+1] = ((char)0x00);
 8000422:	89fb      	ldrh	r3, [r7, #14]
 8000424:	3301      	adds	r3, #1
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
  return toRead + 2;
 800042e:	89fb      	ldrh	r3, [r7, #14]
 8000430:	3302      	adds	r3, #2
 8000432:	b29b      	uxth	r3, r3
}
 8000434:	4618      	mov	r0, r3
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000000 	.word	0x20000000
 8000440:	20000004 	.word	0x20000004
 8000444:	20000018 	.word	0x20000018
 8000448:	20000008 	.word	0x20000008
 800044c:	20000140 	.word	0x20000140

08000450 <demoCeT4TUpdate>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT4TUpdate(uint8_t *cmdData, uint8_t *rspData)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t offset = (cmdData[2] << 8) | cmdData[3];
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3302      	adds	r3, #2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	021b      	lsls	r3, r3, #8
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	3203      	adds	r2, #3
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	4313      	orrs	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]
  uint32_t length = cmdData[4];
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3304      	adds	r3, #4
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	60bb      	str	r3, [r7, #8]

  if(nSelectedIdx != 1)
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <demoCeT4TUpdate+0x90>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d008      	beq.n	800048e <demoCeT4TUpdate+0x3e>
  {
    rspData[0] = ((char)0x6A);
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	226a      	movs	r2, #106	; 0x6a
 8000480:	701a      	strb	r2, [r3, #0]
    rspData[1] = ((char)0x82);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	2282      	movs	r2, #130	; 0x82
 8000488:	701a      	strb	r2, [r3, #0]
    return 2;
 800048a:	2302      	movs	r3, #2
 800048c:	e023      	b.n	80004d6 <demoCeT4TUpdate+0x86>
  }

  if((unsigned long)(offset + length) > pdwFileSize[nSelectedIdx])
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	441a      	add	r2, r3
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <demoCeT4TUpdate+0x90>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4912      	ldr	r1, [pc, #72]	; (80004e4 <demoCeT4TUpdate+0x94>)
 800049a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d908      	bls.n	80004b4 <demoCeT4TUpdate+0x64>
  {
    rspData[0] = ((char)0x62);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	2262      	movs	r2, #98	; 0x62
 80004a6:	701a      	strb	r2, [r3, #0]
    rspData[1] = ((char)0x82);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	2282      	movs	r2, #130	; 0x82
 80004ae:	701a      	strb	r2, [r3, #0]
    return 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	e010      	b.n	80004d6 <demoCeT4TUpdate+0x86>
  }

  memcpy((ndefFile + offset), &cmdData[5], length);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <demoCeT4TUpdate+0x98>)
 80004b8:	1898      	adds	r0, r3, r2
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3305      	adds	r3, #5
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	4619      	mov	r1, r3
 80004c2:	f011 fe2b 	bl	801211c <memcpy>

  rspData[0] = ((char)0x90);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2290      	movs	r2, #144	; 0x90
 80004ca:	701a      	strb	r2, [r3, #0]
  rspData[1] = ((char)0x00);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
  return 2;
 80004d4:	2302      	movs	r3, #2
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000018 	.word	0x20000018
 80004e8:	20000140 	.word	0x20000140

080004ec <demoCeT3TCheck>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT3TCheck(uint8_t *cmdData, uint8_t *rspData)
{
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	6018      	str	r0, [r3, #0]
 80004f8:	463b      	mov	r3, r7
 80004fa:	6019      	str	r1, [r3, #0]
   * Cmd: cmd | NFCID2 | NoS | Service code list | NoB | Block list
   * Rsp: rsp | NFCID2 | Status Flag 1 | Status Flag 2 | NoB | Block Data
   */
  uint8_t *block;
  uint16_t blocknb[256];
  uint32_t idx = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  uint32_t cnt = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  uint32_t nbmax = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

  /* Command response */
  rspData[idx++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION + 1;
 800050e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 8000518:	463a      	mov	r2, r7
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	4413      	add	r3, r2
 800051e:	2207      	movs	r2, #7
 8000520:	701a      	strb	r2, [r3, #0]
  
  /* NFCID 2 bytes */
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3302      	adds	r3, #2
 8000528:	2208      	movs	r2, #8
 800052a:	4619      	mov	r1, r3
 800052c:	48a5      	ldr	r0, [pc, #660]	; (80007c4 <demoCeT3TCheck+0x2d8>)
 800052e:	f011 fde7 	bl	8012100 <memcmp>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d116      	bne.n	8000566 <demoCeT3TCheck+0x7a>
  {
    ST_MEMCPY( &rspData[idx], &gNfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 8000538:	463b      	mov	r3, r7
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000540:	4413      	add	r3, r2
 8000542:	49a0      	ldr	r1, [pc, #640]	; (80007c4 <demoCeT3TCheck+0x2d8>)
 8000544:	461a      	mov	r2, r3
 8000546:	460b      	mov	r3, r1
 8000548:	cb03      	ldmia	r3!, {r0, r1}
 800054a:	6010      	str	r0, [r2, #0]
 800054c:	6051      	str	r1, [r2, #4]
    idx += RFAL_NFCF_NFCID2_LEN;
 800054e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000552:	3308      	adds	r3, #8
 8000554:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    /* If NFCID2 in command is different, no answer */
    return 0;
  }

  /* Check for command errors */
  if( (cmdData[10] != 1) || ((cmdData[11] != 0x09) && (cmdData[11] != 0x0B)) 
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	330a      	adds	r3, #10
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d11c      	bne.n	800059e <demoCeT3TCheck+0xb2>
 8000564:	e001      	b.n	800056a <demoCeT3TCheck+0x7e>
    return 0;
 8000566:	2300      	movs	r3, #0
 8000568:	e127      	b.n	80007ba <demoCeT3TCheck+0x2ce>
  if( (cmdData[10] != 1) || ((cmdData[11] != 0x09) && (cmdData[11] != 0x0B)) 
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	330b      	adds	r3, #11
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b09      	cmp	r3, #9
 8000574:	d005      	beq.n	8000582 <demoCeT3TCheck+0x96>
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	330b      	adds	r3, #11
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b0b      	cmp	r3, #11
 8000580:	d10d      	bne.n	800059e <demoCeT3TCheck+0xb2>
            || (cmdData[13] == 0) || (cmdData[13] > InformationBlock[1]) )
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	330d      	adds	r3, #13
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d007      	beq.n	800059e <demoCeT3TCheck+0xb2>
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	330d      	adds	r3, #13
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	4b8c      	ldr	r3, [pc, #560]	; (80007c8 <demoCeT3TCheck+0x2dc>)
 8000598:	785b      	ldrb	r3, [r3, #1]
 800059a:	429a      	cmp	r2, r3
 800059c:	d917      	bls.n	80005ce <demoCeT3TCheck+0xe2>
  {
    rspData[idx++] = 0xFF;
 800059e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 80005a8:	463a      	mov	r2, r7
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	22ff      	movs	r2, #255	; 0xff
 80005b0:	701a      	strb	r2, [r3, #0]
    rspData[idx++] = 0xFF;
 80005b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 80005bc:	463a      	mov	r2, r7
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	22ff      	movs	r2, #255	; 0xff
 80005c4:	701a      	strb	r2, [r3, #0]
    return idx;
 80005c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	e0f5      	b.n	80007ba <demoCeT3TCheck+0x2ce>
  }
  else
  { 
    rspData[idx++] = 0x00;
 80005ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 80005d8:	463a      	mov	r2, r7
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
    rspData[idx++] = 0x00;
 80005e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 80005ec:	463a      	mov	r2, r7
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	4413      	add	r3, r2
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
  }

  /* Nob */
  rspData[idx++] = cmdData[13];
 80005f6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 8000600:	463a      	mov	r2, r7
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	4413      	add	r3, r2
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	7b52      	ldrb	r2, [r2, #13]
 800060c:	701a      	strb	r2, [r3, #0]
  
  /* Retrieving block to read */
  block = &cmdData[14];
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	330e      	adds	r3, #14
 8000614:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8000618:	2300      	movs	r3, #0
 800061a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800061e:	e079      	b.n	8000714 <demoCeT3TCheck+0x228>
  {
    /* Check block list element size */
    if( *block & 0x80 )
 8000620:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b25b      	sxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	da10      	bge.n	800064e <demoCeT3TCheck+0x162>
    {
      /* 2-byte Block List element */
      blocknb[cnt] = *(block + 1);
 800062c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000630:	3301      	adds	r3, #1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b299      	uxth	r1, r3
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800063e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      block += 2;
 8000642:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000646:	3302      	adds	r3, #2
 8000648:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800064c:	e030      	b.n	80006b0 <demoCeT3TCheck+0x1c4>
    }
    else
    {
      /* 3-byte Block List element */
      blocknb[cnt] = *(block + 1);
 800064e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000652:	3301      	adds	r3, #1
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b299      	uxth	r1, r3
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000660:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      blocknb[cnt] <<= 8;
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800066c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b299      	uxth	r1, r3
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800067c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      blocknb[cnt] |= *(block + 2);
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000688:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800068c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000690:	3302      	adds	r3, #2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b29b      	uxth	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	b299      	uxth	r1, r3
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80006a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      block += 3;
 80006a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006aa:	3303      	adds	r3, #3
 80006ac:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    }
    
    /* Return error if Blocknb > NmaxB */
    nbmax = InformationBlock[3];
 80006b0:	4b45      	ldr	r3, [pc, #276]	; (80007c8 <demoCeT3TCheck+0x2dc>)
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    nbmax = (nbmax << 8) | InformationBlock[4];
 80006b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	4a42      	ldr	r2, [pc, #264]	; (80007c8 <demoCeT3TCheck+0x2dc>)
 80006c0:	7912      	ldrb	r2, [r2, #4]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    if( blocknb[cnt] > nbmax )
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80006d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006d4:	461a      	mov	r2, r3
 80006d6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80006da:	4293      	cmp	r3, r2
 80006dc:	d215      	bcs.n	800070a <demoCeT3TCheck+0x21e>
    {
      rspData[idx - 3] = 0xFF;
 80006de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80006e2:	3b03      	subs	r3, #3
 80006e4:	463a      	mov	r2, r7
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	701a      	strb	r2, [r3, #0]
      rspData[idx - 2] = 0x70;
 80006ee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80006f2:	3b02      	subs	r3, #2
 80006f4:	463a      	mov	r2, r7
 80006f6:	6812      	ldr	r2, [r2, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	2270      	movs	r2, #112	; 0x70
 80006fc:	701a      	strb	r2, [r3, #0]
      return (idx - 1);
 80006fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000702:	b29b      	uxth	r3, r3
 8000704:	3b01      	subs	r3, #1
 8000706:	b29b      	uxth	r3, r3
 8000708:	e057      	b.n	80007ba <demoCeT3TCheck+0x2ce>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800070a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800070e:	3301      	adds	r3, #1
 8000710:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	330d      	adds	r3, #13
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000722:	4293      	cmp	r3, r2
 8000724:	f4ff af7c 	bcc.w	8000620 <demoCeT3TCheck+0x134>
    }
  }

  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800072e:	e038      	b.n	80007a2 <demoCeT3TCheck+0x2b6>
  {
    if( blocknb[cnt] == 0x0000 )
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000738:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d112      	bne.n	8000766 <demoCeT3TCheck+0x27a>
    {
      /* Read information block */
      ST_MEMCPY( &rspData[idx], InformationBlock, sizeof(InformationBlock));
 8000740:	463b      	mov	r3, r7
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000748:	4413      	add	r3, r2
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <demoCeT3TCheck+0x2dc>)
 800074c:	461c      	mov	r4, r3
 800074e:	4615      	mov	r5, r2
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	6020      	str	r0, [r4, #0]
 8000754:	6061      	str	r1, [r4, #4]
 8000756:	60a2      	str	r2, [r4, #8]
 8000758:	60e3      	str	r3, [r4, #12]
      idx += sizeof(InformationBlock);
 800075a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800075e:	3310      	adds	r3, #16
 8000760:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000764:	e018      	b.n	8000798 <demoCeT3TCheck+0x2ac>
    }
    else
    {
      /* Read ndef block */
      ST_MEMCPY( &rspData[idx], &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], T3T_BLOCK_SIZE);
 8000766:	463b      	mov	r3, r7
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800076e:	18d0      	adds	r0, r2, r3
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000778:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800077c:	3b01      	subs	r3, #1
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	3302      	adds	r3, #2
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <demoCeT3TCheck+0x2e0>)
 8000784:	4413      	add	r3, r2
 8000786:	2210      	movs	r2, #16
 8000788:	4619      	mov	r1, r3
 800078a:	f011 fcc7 	bl	801211c <memcpy>
      idx += T3T_BLOCK_SIZE;
 800078e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000792:	3310      	adds	r3, #16
 8000794:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8000798:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	330d      	adds	r3, #13
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d3bd      	bcc.n	8000730 <demoCeT3TCheck+0x244>
    }
  }

  return idx;
 80007b4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80007b8:	b29b      	uxth	r3, r3
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bdb0      	pop	{r4, r5, r7, pc}
 80007c4:	20000138 	.word	0x20000138
 80007c8:	20000020 	.word	0x20000020
 80007cc:	20000140 	.word	0x20000140

080007d0 <demoCeT3TUpdate>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT3TUpdate(uint8_t *cmdData, uint8_t *rspData)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	6018      	str	r0, [r3, #0]
 80007dc:	463b      	mov	r3, r7
 80007de:	6019      	str	r1, [r3, #0]
   * Cmd: cmd | NFCID2 | NoS | Service code list | NoB | Block list | Block Data
   * Rsp: rsp | NFCID2 | Status Flag 1 | Status Flag 2
   */
  uint8_t *block;
  uint16_t blocknb[256];
  uint32_t idx = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  uint32_t cnt = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  uint32_t nbmax = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

  /* Command response */
  rspData[idx++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION + 1;
 80007f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 80007fc:	463a      	mov	r2, r7
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	4413      	add	r3, r2
 8000802:	2209      	movs	r2, #9
 8000804:	701a      	strb	r2, [r3, #0]
  
  /* NFCID 2 bytes */
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3302      	adds	r3, #2
 800080c:	2208      	movs	r2, #8
 800080e:	4619      	mov	r1, r3
 8000810:	48a2      	ldr	r0, [pc, #648]	; (8000a9c <demoCeT3TUpdate+0x2cc>)
 8000812:	f011 fc75 	bl	8012100 <memcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d116      	bne.n	800084a <demoCeT3TUpdate+0x7a>
  {
    ST_MEMCPY( &rspData[idx], gNfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 800081c:	463b      	mov	r3, r7
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000824:	4413      	add	r3, r2
 8000826:	499d      	ldr	r1, [pc, #628]	; (8000a9c <demoCeT3TUpdate+0x2cc>)
 8000828:	461a      	mov	r2, r3
 800082a:	460b      	mov	r3, r1
 800082c:	cb03      	ldmia	r3!, {r0, r1}
 800082e:	6010      	str	r0, [r2, #0]
 8000830:	6051      	str	r1, [r2, #4]
    idx += RFAL_NFCF_NFCID2_LEN;
 8000832:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000836:	3308      	adds	r3, #8
 8000838:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    /* If NFCID2 in command is different, no answer */
    return 0;
  }
  
  /* Check for command errors */
  if( (cmdData[10] != 1) || (cmdData[11] != 0x09)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	330a      	adds	r3, #10
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d116      	bne.n	8000876 <demoCeT3TUpdate+0xa6>
 8000848:	e001      	b.n	800084e <demoCeT3TUpdate+0x7e>
    return 0;
 800084a:	2300      	movs	r3, #0
 800084c:	e120      	b.n	8000a90 <demoCeT3TUpdate+0x2c0>
  if( (cmdData[10] != 1) || (cmdData[11] != 0x09)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	330b      	adds	r3, #11
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b09      	cmp	r3, #9
 8000858:	d10d      	bne.n	8000876 <demoCeT3TUpdate+0xa6>
            || (cmdData[13] == 0) || (cmdData[13] > InformationBlock[2]) )
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	330d      	adds	r3, #13
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d007      	beq.n	8000876 <demoCeT3TUpdate+0xa6>
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	330d      	adds	r3, #13
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	4b8c      	ldr	r3, [pc, #560]	; (8000aa0 <demoCeT3TUpdate+0x2d0>)
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	429a      	cmp	r2, r3
 8000874:	d917      	bls.n	80008a6 <demoCeT3TUpdate+0xd6>
  {
    rspData[idx++] = 0xFF;
 8000876:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000880:	463a      	mov	r2, r7
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	4413      	add	r3, r2
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	701a      	strb	r2, [r3, #0]
    rspData[idx++] = 0xFF;
 800088a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000894:	463a      	mov	r2, r7
 8000896:	6812      	ldr	r2, [r2, #0]
 8000898:	4413      	add	r3, r2
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	701a      	strb	r2, [r3, #0]
    return idx;
 800089e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	e0f4      	b.n	8000a90 <demoCeT3TUpdate+0x2c0>
  }
  else
  { 
    rspData[idx++] = 0x00;
 80008a6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 80008b0:	463a      	mov	r2, r7
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	4413      	add	r3, r2
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
    rspData[idx++] = 0x00;
 80008ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 80008c4:	463a      	mov	r2, r7
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
  }

  
  /* Retrieving block to read */
  block = &cmdData[14];
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	330e      	adds	r3, #14
 80008d4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80008de:	e077      	b.n	80009d0 <demoCeT3TUpdate+0x200>
  {
    /* Check block list element size */
    if( *block & 0x80 )
 80008e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da10      	bge.n	800090e <demoCeT3TUpdate+0x13e>
    {
      /* 2-byte Block List element */
      blocknb[cnt] = *(block + 1);
 80008ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80008f0:	3301      	adds	r3, #1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b299      	uxth	r1, r3
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80008fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      block += 2;
 8000902:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000906:	3302      	adds	r3, #2
 8000908:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800090c:	e030      	b.n	8000970 <demoCeT3TUpdate+0x1a0>
    }
    else
    {
      /* 3-byte Block List element */
      blocknb[cnt] = *(block + 1);
 800090e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000912:	3301      	adds	r3, #1
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b299      	uxth	r1, r3
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000920:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      blocknb[cnt] <<= 8;
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800092c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b299      	uxth	r1, r3
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800093c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      blocknb[cnt] |= *(block + 2);
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000948:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800094c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000950:	3302      	adds	r3, #2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b29b      	uxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b299      	uxth	r1, r3
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000962:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      block += 3;
 8000966:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800096a:	3303      	adds	r3, #3
 800096c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    }
    /* Return error if Blocknb > NmaxB */
    nbmax = InformationBlock[3];
 8000970:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <demoCeT3TUpdate+0x2d0>)
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    nbmax = (nbmax << 8) | InformationBlock[4];
 8000978:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <demoCeT3TUpdate+0x2d0>)
 8000980:	7912      	ldrb	r2, [r2, #4]
 8000982:	4313      	orrs	r3, r2
 8000984:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    if( blocknb[cnt] > nbmax )
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000990:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000994:	461a      	mov	r2, r3
 8000996:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800099a:	4293      	cmp	r3, r2
 800099c:	d213      	bcs.n	80009c6 <demoCeT3TUpdate+0x1f6>
    {
      rspData[idx - 2] = 0xFF;
 800099e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80009a2:	3b02      	subs	r3, #2
 80009a4:	463a      	mov	r2, r7
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	701a      	strb	r2, [r3, #0]
      rspData[idx - 1] = 0x70;
 80009ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80009b2:	3b01      	subs	r3, #1
 80009b4:	463a      	mov	r2, r7
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	2270      	movs	r2, #112	; 0x70
 80009bc:	701a      	strb	r2, [r3, #0]
      return idx;
 80009be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	e064      	b.n	8000a90 <demoCeT3TUpdate+0x2c0>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 80009c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80009ca:	3301      	adds	r3, #1
 80009cc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	330d      	adds	r3, #13
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80009de:	4293      	cmp	r3, r2
 80009e0:	f4ff af7e 	bcc.w	80008e0 <demoCeT3TUpdate+0x110>
    }
  }
  
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80009ea:	e031      	b.n	8000a50 <demoCeT3TUpdate+0x280>
  {
    if( blocknb[cnt] == 0x0000 )
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80009f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10e      	bne.n	8000a1a <demoCeT3TUpdate+0x24a>
    {
      /* Write information block */
      ST_MEMCPY( InformationBlock, block, T3T_BLOCK_SIZE);
 80009fc:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <demoCeT3TUpdate+0x2d0>)
 80009fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a02:	4614      	mov	r4, r2
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	6859      	ldr	r1, [r3, #4]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      block += T3T_BLOCK_SIZE;
 8000a0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a12:	3310      	adds	r3, #16
 8000a14:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000a18:	e015      	b.n	8000a46 <demoCeT3TUpdate+0x276>
    }
    else
    {
      /* Read ndef block */
      ST_MEMCPY( &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], block, T3T_BLOCK_SIZE);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000a22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <demoCeT3TUpdate+0x2d4>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	2210      	movs	r2, #16
 8000a32:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000a36:	4618      	mov	r0, r3
 8000a38:	f011 fb70 	bl	801211c <memcpy>
      block += T3T_BLOCK_SIZE;
 8000a3c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000a40:	3310      	adds	r3, #16
 8000a42:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8000a46:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	330d      	adds	r3, #13
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d3c4      	bcc.n	80009ec <demoCeT3TUpdate+0x21c>
    }
  }

    /* Status flag answer */
  rspData[idx++] = 0x00;
 8000a62:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000a6c:	463a      	mov	r2, r7
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
  rspData[idx++] = 0x00;
 8000a76:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000a80:	463a      	mov	r2, r7
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
  
  return idx;
 8000a8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000a8e:	b29b      	uxth	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000138 	.word	0x20000138
 8000aa0:	20000020 	.word	0x20000020
 8000aa4:	20000140 	.word	0x20000140

08000aa8 <demoCeInit>:
  *
  * @return None
  *****************************************************************************
  */
void demoCeInit( uint8_t* nfcfNfcid )
{
 8000aa8:	b4b0      	push	{r4, r5, r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    ST_MEMCPY(gNfcfNfcid, nfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <demoCeInit+0x38>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6810      	ldr	r0, [r2, #0]
 8000ab6:	6851      	ldr	r1, [r2, #4]
 8000ab8:	c303      	stmia	r3!, {r0, r1}
    ST_MEMCPY(ndefFile, (uint8_t *)ndef_uri, sizeof(ndef_uri) );
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <demoCeInit+0x3c>)
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <demoCeInit+0x40>)
 8000abe:	4614      	mov	r4, r2
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000aca:	6020      	str	r0, [r4, #0]
 8000acc:	3404      	adds	r4, #4
 8000ace:	8021      	strh	r1, [r4, #0]
 8000ad0:	3402      	adds	r4, #2
 8000ad2:	0c0b      	lsrs	r3, r1, #16
 8000ad4:	7023      	strb	r3, [r4, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bcb0      	pop	{r4, r5, r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000138 	.word	0x20000138
 8000ae4:	20000140 	.word	0x20000140
 8000ae8:	0801380c 	.word	0x0801380c

08000aec <demoCeT4T>:
  *
  * @return Response size.
  *****************************************************************************
  */
uint16_t demoCeT4T(uint8_t *rxData, uint16_t rxDataLen, uint8_t *txBuf, uint16_t txBufLen )
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	461a      	mov	r2, r3
 8000af8:	460b      	mov	r3, r1
 8000afa:	817b      	strh	r3, [r7, #10]
 8000afc:	4613      	mov	r3, r2
 8000afe:	813b      	strh	r3, [r7, #8]
  if( (rxData == NULL) || (rxDataLen < 4) || (txBuf == NULL) || (txBufLen < 2) )
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <demoCeT4T+0x2c>
 8000b06:	897b      	ldrh	r3, [r7, #10]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d905      	bls.n	8000b18 <demoCeT4T+0x2c>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <demoCeT4T+0x2c>
 8000b12:	893b      	ldrh	r3, [r7, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d801      	bhi.n	8000b1c <demoCeT4T+0x30>
  {
    return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e02c      	b.n	8000b76 <demoCeT4T+0x8a>
  }
    
  if(rxData[0] == T4T_CLA_00)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d11d      	bne.n	8000b60 <demoCeT4T+0x74>
  {
      switch(rxData[1])
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2bd6      	cmp	r3, #214	; 0xd6
 8000b2c:	d012      	beq.n	8000b54 <demoCeT4T+0x68>
 8000b2e:	2bd6      	cmp	r3, #214	; 0xd6
 8000b30:	dc18      	bgt.n	8000b64 <demoCeT4T+0x78>
 8000b32:	2ba4      	cmp	r3, #164	; 0xa4
 8000b34:	d002      	beq.n	8000b3c <demoCeT4T+0x50>
 8000b36:	2bb0      	cmp	r3, #176	; 0xb0
 8000b38:	d006      	beq.n	8000b48 <demoCeT4T+0x5c>

          case T4T_INS_UPDATE:
              return demoCeT4TUpdate(rxData, txBuf);

          default:
              break;
 8000b3a:	e013      	b.n	8000b64 <demoCeT4T+0x78>
              return demoCeT4TSelect(rxData, txBuf);
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fb92 	bl	8000268 <demoCeT4TSelect>
 8000b44:	4603      	mov	r3, r0
 8000b46:	e016      	b.n	8000b76 <demoCeT4T+0x8a>
              return demoCeT4TRead(rxData, txBuf);
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff fc18 	bl	8000380 <demoCeT4TRead>
 8000b50:	4603      	mov	r3, r0
 8000b52:	e010      	b.n	8000b76 <demoCeT4T+0x8a>
              return demoCeT4TUpdate(rxData, txBuf);
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fc7a 	bl	8000450 <demoCeT4TUpdate>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	e00a      	b.n	8000b76 <demoCeT4T+0x8a>
      }
  }
 8000b60:	bf00      	nop
 8000b62:	e000      	b.n	8000b66 <demoCeT4T+0x7a>
              break;
 8000b64:	bf00      	nop

  /* Function not supported ...  */
  txBuf[0] = ((char)0x68);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2268      	movs	r2, #104	; 0x68
 8000b6a:	701a      	strb	r2, [r3, #0]
  txBuf[1] = ((char)0x00);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
  return 2;
 8000b74:	2302      	movs	r3, #2
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <demoCeT3T>:
  *
  * @return Response size.
  *****************************************************************************
  */
uint16_t demoCeT3T(uint8_t *rxData, uint16_t rxDataLen, uint8_t *txBuf, uint16_t txBufLen )
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b084      	sub	sp, #16
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	817b      	strh	r3, [r7, #10]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	813b      	strh	r3, [r7, #8]
    if( (rxData == NULL) || (rxDataLen < 4) || (txBuf == NULL) || (txBufLen < 2) )
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <demoCeT3T+0x2c>
 8000b98:	897b      	ldrh	r3, [r7, #10]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d905      	bls.n	8000baa <demoCeT3T+0x2c>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <demoCeT3T+0x2c>
 8000ba4:	893b      	ldrh	r3, [r7, #8]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d801      	bhi.n	8000bae <demoCeT3T+0x30>
    {
        return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e01b      	b.n	8000be6 <demoCeT3T+0x68>
    }
        
    switch(rxData[1])
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	d00b      	beq.n	8000bd0 <demoCeT3T+0x52>
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d00f      	beq.n	8000bdc <demoCeT3T+0x5e>

        case RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION:
            return demoCeT3TUpdate(rxData, txBuf);

        default:
            break;
 8000bbc:	bf00      	nop
    }

  /* Function not supported ...  */
  txBuf[0] = ((char)0xFF);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	22ff      	movs	r2, #255	; 0xff
 8000bc2:	701a      	strb	r2, [r3, #0]
  txBuf[1] = ((char)0xFF);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	22ff      	movs	r2, #255	; 0xff
 8000bca:	701a      	strb	r2, [r3, #0]
  return 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e00a      	b.n	8000be6 <demoCeT3T+0x68>
            return demoCeT3TCheck(rxData, txBuf);
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fc8a 	bl	80004ec <demoCeT3TCheck>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	e004      	b.n	8000be6 <demoCeT3T+0x68>
            return demoCeT3TUpdate(rxData, txBuf);
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff fdf6 	bl	80007d0 <demoCeT3TUpdate>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <demoNotif>:
 *
 *  This function receives the event notifications from RFAL
 *****************************************************************************
 */
static void demoNotif( rfalNfcState st )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
    uint8_t       devCnt;
    rfalNfcDevice *dev;


    if( st == RFAL_NFC_STATE_WAKEUP_MODE )
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d103      	bne.n	8000c08 <demoNotif+0x18>
    {
        platformLog("Wake Up mode started \r\n");
 8000c00:	4810      	ldr	r0, [pc, #64]	; (8000c44 <demoNotif+0x54>)
 8000c02:	f011 fb41 	bl	8012288 <puts>
        rfalNfcGetDevicesFound( &dev, &devCnt );
        rfalNfcSelect( 0 );

        platformLog("Multiple Tags detected: %d \r\n", devCnt);
    }
}
 8000c06:	e019      	b.n	8000c3c <demoNotif+0x4c>
    else if( st == RFAL_NFC_STATE_POLL_TECHDETECT )
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b0a      	cmp	r3, #10
 8000c0c:	d103      	bne.n	8000c16 <demoNotif+0x26>
        platformLog("Wake Up mode terminated. Polling for devices \r\n");
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <demoNotif+0x58>)
 8000c10:	f011 fb3a 	bl	8012288 <puts>
}
 8000c14:	e012      	b.n	8000c3c <demoNotif+0x4c>
    else if( st == RFAL_NFC_STATE_POLL_SELECT )
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b0c      	cmp	r3, #12
 8000c1a:	d10f      	bne.n	8000c3c <demoNotif+0x4c>
        rfalNfcGetDevicesFound( &dev, &devCnt );
 8000c1c:	f107 020f 	add.w	r2, r7, #15
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f006 f852 	bl	8006cd0 <rfalNfcGetDevicesFound>
        rfalNfcSelect( 0 );
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f006 f82b 	bl	8006c88 <rfalNfcSelect>
        platformLog("Multiple Tags detected: %d \r\n", devCnt);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <demoNotif+0x5c>)
 8000c38:	f011 faa0 	bl	801217c <iprintf>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08013150 	.word	0x08013150
 8000c48:	08013168 	.word	0x08013168
 8000c4c:	08013198 	.word	0x08013198

08000c50 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
    ReturnCode err;

    err = rfalNfcInitialize();
 8000c56:	f005 ff3d 	bl	8006ad4 <rfalNfcInitialize>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f040 80bd 	bne.w	8000de0 <demoIni+0x190>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000c66:	4b61      	ldr	r3, [pc, #388]	; (8000dec <demoIni+0x19c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000c6c:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <demoIni+0x19c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 8000c72:	4b5e      	ldr	r3, [pc, #376]	; (8000dec <demoIni+0x19c>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	721a      	strb	r2, [r3, #8]
        discParam.ap2pBR        = RFAL_BR_424;
 8000c78:	4b5c      	ldr	r3, [pc, #368]	; (8000dec <demoIni+0x19c>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        discParam.maxBR         = RFAL_BR_KEEP;
 8000c80:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <demoIni+0x19c>)
 8000c82:	22ff      	movs	r2, #255	; 0xff
 8000c84:	71da      	strb	r2, [r3, #7]

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8000c86:	4b59      	ldr	r3, [pc, #356]	; (8000dec <demoIni+0x19c>)
 8000c88:	4959      	ldr	r1, [pc, #356]	; (8000df0 <demoIni+0x1a0>)
 8000c8a:	f103 0209 	add.w	r2, r3, #9
 8000c8e:	460b      	mov	r3, r1
 8000c90:	cb03      	ldmia	r3!, {r0, r1}
 8000c92:	6010      	str	r0, [r2, #0]
 8000c94:	6051      	str	r1, [r2, #4]
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	8113      	strh	r3, [r2, #8]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000c9a:	4b54      	ldr	r3, [pc, #336]	; (8000dec <demoIni+0x19c>)
 8000c9c:	4a55      	ldr	r2, [pc, #340]	; (8000df4 <demoIni+0x1a4>)
 8000c9e:	f103 0513 	add.w	r5, r3, #19
 8000ca2:	4614      	mov	r4, r2
 8000ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca6:	6028      	str	r0, [r5, #0]
 8000ca8:	6069      	str	r1, [r5, #4]
 8000caa:	60aa      	str	r2, [r5, #8]
 8000cac:	60eb      	str	r3, [r5, #12]
 8000cae:	6820      	ldr	r0, [r4, #0]
 8000cb0:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8000cb2:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <demoIni+0x19c>)
 8000cb4:	2214      	movs	r2, #20
 8000cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        discParam.notifyCb             = demoNotif;
 8000cba:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <demoIni+0x19c>)
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <demoIni+0x1a8>)
 8000cbe:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.wakeupEnabled        = false;
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <demoIni+0x19c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8000cc8:	4b48      	ldr	r3, [pc, #288]	; (8000dec <demoIni+0x19c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.totalDuration        = 1000U;
 8000cd0:	4b46      	ldr	r3, [pc, #280]	; (8000dec <demoIni+0x19c>)
 8000cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cd6:	809a      	strh	r2, [r3, #4]
        discParam.techs2Find           = 0;
 8000cd8:	4b44      	ldr	r3, [pc, #272]	; (8000dec <demoIni+0x19c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	805a      	strh	r2, [r3, #2]
#if RFAL_FEATURE_NFCA
        discParam.techs2Find          |= RFAL_NFC_POLL_TECH_A;
 8000cde:	4b43      	ldr	r3, [pc, #268]	; (8000dec <demoIni+0x19c>)
 8000ce0:	885b      	ldrh	r3, [r3, #2]
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b40      	ldr	r3, [pc, #256]	; (8000dec <demoIni+0x19c>)
 8000cea:	805a      	strh	r2, [r3, #2]
#endif
#if RFAL_FEATURE_NFCB
        discParam.techs2Find          |= RFAL_NFC_POLL_TECH_B;
 8000cec:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <demoIni+0x19c>)
 8000cee:	885b      	ldrh	r3, [r3, #2]
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <demoIni+0x19c>)
 8000cf8:	805a      	strh	r2, [r3, #2]
#endif
#if RFAL_FEATURE_NFCF
        discParam.techs2Find          |= RFAL_NFC_POLL_TECH_F;
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <demoIni+0x19c>)
 8000cfc:	885b      	ldrh	r3, [r3, #2]
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b39      	ldr	r3, [pc, #228]	; (8000dec <demoIni+0x19c>)
 8000d06:	805a      	strh	r2, [r3, #2]
#endif
#if RFAL_FEATURE_NFCV
        discParam.techs2Find          |= RFAL_NFC_POLL_TECH_V;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <demoIni+0x19c>)
 8000d0a:	885b      	ldrh	r3, [r3, #2]
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <demoIni+0x19c>)
 8000d14:	805a      	strh	r2, [r3, #2]
#endif
#if RFAL_FEATURE_ST25TB
        discParam.techs2Find          |= RFAL_NFC_POLL_TECH_ST25TB;
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <demoIni+0x19c>)
 8000d18:	885b      	ldrh	r3, [r3, #2]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <demoIni+0x19c>)
 8000d22:	805a      	strh	r2, [r3, #2]
        discParam.techs2Find           = 0;
#endif

#if defined(ST25R3911) || defined(ST25R3916)  /* AP2P */
#if RFAL_FEATURE_NFC_DEP
        discParam.techs2Find |= RFAL_NFC_POLL_TECH_AP2P;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <demoIni+0x19c>)
 8000d26:	885b      	ldrh	r3, [r3, #2]
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <demoIni+0x19c>)
 8000d30:	805a      	strh	r2, [r3, #2]
#if RFAL_FEATURE_LISTEN_MODE
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_AP2P;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <demoIni+0x19c>)
 8000d34:	885b      	ldrh	r3, [r3, #2]
 8000d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <demoIni+0x19c>)
 8000d42:	805a      	strh	r2, [r3, #2]
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <demoIni+0x1ac>)
 8000d46:	881a      	ldrh	r2, [r3, #0]
#endif /* ST25R3911 || ST25R3916 */

#if RFAL_FEATURE_LISTEN_MODE
#if defined(ST25R3916) || defined(ST25R95)    /* CE */
        /* Set configuration for NFC-A CE */
        ST_MEMCPY( discParam.lmConfigPA.SENS_RES, ceNFCA_SENS_RES, RFAL_LM_SENS_RES_LEN );     /* Set SENS_RES / ATQA */
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <demoIni+0x19c>)
 8000d4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <demoIni+0x1b0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
        ST_MEMCPY( discParam.lmConfigPA.nfcid, ceNFCA_NFCID, RFAL_LM_NFCID_LEN_04 );           /* Set NFCID / UID */
 8000d52:	4a26      	ldr	r2, [pc, #152]	; (8000dec <demoIni+0x19c>)
 8000d54:	f8c2 3046 	str.w	r3, [r2, #70]	; 0x46
        discParam.lmConfigPA.nfcidLen = RFAL_LM_NFCID_LEN_04;                                  /* Set NFCID length to 7 bytes */
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <demoIni+0x19c>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        discParam.lmConfigPA.SEL_RES  = ceNFCA_SEL_RES;                                        /* Set SEL_RES / SAK */
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <demoIni+0x1b4>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <demoIni+0x19c>)
 8000d66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_A;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <demoIni+0x19c>)
 8000d6c:	885b      	ldrh	r3, [r3, #2]
 8000d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <demoIni+0x19c>)
 8000d76:	805a      	strh	r2, [r3, #2]
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <demoIni+0x1b8>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
#endif /* ST25R3916 || ST25R95*/
#if defined(ST25R3916)
        /* Set configuration for NFC-F CE */
        ST_MEMCPY( discParam.lmConfigPF.SC, ceNFCF_SC, RFAL_LM_SENSF_SC_LEN );                 /* Set System Code */
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <demoIni+0x19c>)
 8000d7e:	f8a2 3053 	strh.w	r3, [r2, #83]	; 0x53
        ST_MEMCPY( &ceNFCF_SENSF_RES[RFAL_NFCF_CMD_LEN], ceNFCF_nfcid2, RFAL_NFCID2_LEN );     /* Load NFCID2 on SENSF_RES */
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <demoIni+0x1bc>)
 8000d84:	4922      	ldr	r1, [pc, #136]	; (8000e10 <demoIni+0x1c0>)
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	460b      	mov	r3, r1
 8000d8a:	cb03      	ldmia	r3!, {r0, r1}
 8000d8c:	6010      	str	r0, [r2, #0]
 8000d8e:	6051      	str	r1, [r2, #4]
        ST_MEMCPY( discParam.lmConfigPF.SENSF_RES, ceNFCF_SENSF_RES, RFAL_LM_SENSF_RES_LEN );  /* Set SENSF_RES / Poll Response */
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <demoIni+0x19c>)
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <demoIni+0x1bc>)
 8000d94:	f103 0555 	add.w	r5, r3, #85	; 0x55
 8000d98:	4614      	mov	r4, r2
 8000d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9c:	6028      	str	r0, [r5, #0]
 8000d9e:	6069      	str	r1, [r5, #4]
 8000da0:	60aa      	str	r2, [r5, #8]
 8000da2:	60eb      	str	r3, [r5, #12]
 8000da4:	8823      	ldrh	r3, [r4, #0]
 8000da6:	78a2      	ldrb	r2, [r4, #2]
 8000da8:	822b      	strh	r3, [r5, #16]
 8000daa:	4613      	mov	r3, r2
 8000dac:	74ab      	strb	r3, [r5, #18]

        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_F;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <demoIni+0x19c>)
 8000db0:	885b      	ldrh	r3, [r3, #2]
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <demoIni+0x19c>)
 8000dba:	805a      	strh	r2, [r3, #2]
#endif /* ST25R3916 */
#endif /* RFAL_FEATURE_LISTEN_MODE */

        /* Check for valid configuration by calling Discover once */
        err = rfalNfcDiscover( &discParam );
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <demoIni+0x19c>)
 8000dbe:	f005 fea5 	bl	8006b0c <rfalNfcDiscover>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
        rfalNfcDeactivate( false );
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f005 ff38 	bl	8006c3c <rfalNfcDeactivate>

        if( err != ERR_NONE )
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <demoIni+0x186>
        {
            return false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e005      	b.n	8000de2 <demoIni+0x192>
        }

        state = DEMO_ST_START_DISCOVERY;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <demoIni+0x1c4>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
        return true;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <demoIni+0x192>
    }
    return false;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000944 	.word	0x20000944
 8000df0:	20000030 	.word	0x20000030
 8000df4:	2000003c 	.word	0x2000003c
 8000df8:	08000bf1 	.word	0x08000bf1
 8000dfc:	20000054 	.word	0x20000054
 8000e00:	20000050 	.word	0x20000050
 8000e04:	20000056 	.word	0x20000056
 8000e08:	20000060 	.word	0x20000060
 8000e0c:	20000064 	.word	0x20000064
 8000e10:	20000058 	.word	0x20000058
 8000e14:	200009d0 	.word	0x200009d0

08000e18 <demoCE>:
    }
}
//add yinke
//static void demoCE( rfalNfcDevice *nfcDev )
void demoCE( rfalNfcDevice *nfcDev )
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b0a1      	sub	sp, #132	; 0x84
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	6078      	str	r0, [r7, #4]
    uint16_t *rcvLen;
    uint8_t  txBuf[100];
    uint16_t txLen;

#if defined(ST25R3916)
    demoCeInit( ceNFCF_nfcid2 );
 8000e20:	484a      	ldr	r0, [pc, #296]	; (8000f4c <demoCE+0x134>)
 8000e22:	f7ff fe41 	bl	8000aa8 <demoCeInit>
#endif /* ST25R3916 */

    do
    {
        rfalNfcWorker();
 8000e26:	f005 ff79 	bl	8006d1c <rfalNfcWorker>

        switch( rfalNfcGetState() )
 8000e2a:	f005 ff47 	bl	8006cbc <rfalNfcGetState>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	3b02      	subs	r3, #2
 8000e32:	2b1f      	cmp	r3, #31
 8000e34:	d87a      	bhi.n	8000f2c <demoCE+0x114>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <demoCE+0x24>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000f45 	.word	0x08000f45
 8000e40:	08000f2d 	.word	0x08000f2d
 8000e44:	08000f2d 	.word	0x08000f2d
 8000e48:	08000f2d 	.word	0x08000f2d
 8000e4c:	08000f2d 	.word	0x08000f2d
 8000e50:	08000f2d 	.word	0x08000f2d
 8000e54:	08000f2d 	.word	0x08000f2d
 8000e58:	08000f2d 	.word	0x08000f2d
 8000e5c:	08000f2d 	.word	0x08000f2d
 8000e60:	08000f2d 	.word	0x08000f2d
 8000e64:	08000f2d 	.word	0x08000f2d
 8000e68:	08000f2d 	.word	0x08000f2d
 8000e6c:	08000f2d 	.word	0x08000f2d
 8000e70:	08000f2d 	.word	0x08000f2d
 8000e74:	08000f2d 	.word	0x08000f2d
 8000e78:	08000f2d 	.word	0x08000f2d
 8000e7c:	08000f2d 	.word	0x08000f2d
 8000e80:	08000f2d 	.word	0x08000f2d
 8000e84:	08000f2d 	.word	0x08000f2d
 8000e88:	08000f2d 	.word	0x08000f2d
 8000e8c:	08000f2d 	.word	0x08000f2d
 8000e90:	08000f2d 	.word	0x08000f2d
 8000e94:	08000f2d 	.word	0x08000f2d
 8000e98:	08000f2d 	.word	0x08000f2d
 8000e9c:	08000f2d 	.word	0x08000f2d
 8000ea0:	08000f2d 	.word	0x08000f2d
 8000ea4:	08000f2d 	.word	0x08000f2d
 8000ea8:	08000f2d 	.word	0x08000f2d
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000ed9 	.word	0x08000ed9
 8000eb4:	08000f2d 	.word	0x08000f2d
 8000eb8:	08000ed9 	.word	0x08000ed9
        {
            case RFAL_NFC_STATE_ACTIVATED:
                err = demoTransceiveBlocking( NULL, 0, &rxData, &rcvLen, 0);
 8000ebc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ec0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	9100      	str	r1, [sp, #0]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f840 	bl	8000f50 <demoTransceiveBlocking>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                break;
 8000ed6:	e02a      	b.n	8000f2e <demoCE+0x116>

            case RFAL_NFC_STATE_DATAEXCHANGE:
            case RFAL_NFC_STATE_DATAEXCHANGE_DONE:

                txLen = ( (nfcDev->type == RFAL_NFC_POLL_TYPE_NFCA) ? demoCeT4T( rxData, *rcvLen, txBuf, sizeof(txBuf) ): demoCeT3T( rxData, *rcvLen, txBuf, sizeof(txBuf) ) );
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b0a      	cmp	r3, #10
 8000ede:	d109      	bne.n	8000ef4 <demoCE+0xdc>
 8000ee0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ee4:	8819      	ldrh	r1, [r3, #0]
 8000ee6:	f107 0208 	add.w	r2, r7, #8
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	f7ff fdfe 	bl	8000aec <demoCeT4T>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	e008      	b.n	8000f06 <demoCE+0xee>
 8000ef4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ef8:	8819      	ldrh	r1, [r3, #0]
 8000efa:	f107 0208 	add.w	r2, r7, #8
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	f7ff fe3d 	bl	8000b7e <demoCeT3T>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                err   = demoTransceiveBlocking( txBuf, txLen, &rxData, &rcvLen, RFAL_FWT_NONE );
 8000f0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f0e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000f12:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8000f16:	f107 0008 	add.w	r0, r7, #8
 8000f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f1e:	9400      	str	r4, [sp, #0]
 8000f20:	f000 f816 	bl	8000f50 <demoTransceiveBlocking>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                break;
 8000f2a:	e000      	b.n	8000f2e <demoCE+0x116>
            case RFAL_NFC_STATE_START_DISCOVERY:
                return;

            case RFAL_NFC_STATE_LISTEN_SLEEP:
            default:
                break;
 8000f2c:	bf00      	nop
        }
    }
    while( (err == ERR_NONE) || (err == ERR_SLEEP_REQ) );
 8000f2e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f43f af77 	beq.w	8000e26 <demoCE+0xe>
 8000f38:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	f43f af72 	beq.w	8000e26 <demoCE+0xe>
 8000f42:	e000      	b.n	8000f46 <demoCE+0x12e>
                return;
 8000f44:	bf00      	nop

#else
    NO_WARNING(nfcDev);
#endif /* RFAL_FEATURE_LISTEN_MODE */
}
 8000f46:	377c      	adds	r7, #124	; 0x7c
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	20000058 	.word	0x20000058

08000f50 <demoTransceiveBlocking>:
 *  \return ERR_NONE      : No error, activation successful
 *
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	817b      	strh	r3, [r7, #10]
    ReturnCode err;

    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 8000f60:	8979      	ldrh	r1, [r7, #10]
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f006 f8ea 	bl	8007144 <rfalNfcDataExchangeStart>
 8000f70:	4603      	mov	r3, r0
 8000f72:	82fb      	strh	r3, [r7, #22]
    if( err == ERR_NONE )
 8000f74:	8afb      	ldrh	r3, [r7, #22]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d108      	bne.n	8000f8c <demoTransceiveBlocking+0x3c>
    {
        do{
            rfalNfcWorker();
 8000f7a:	f005 fecf 	bl	8006d1c <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 8000f7e:	f006 fa29 	bl	80073d4 <rfalNfcDataExchangeGetStatus>
 8000f82:	4603      	mov	r3, r0
 8000f84:	82fb      	strh	r3, [r7, #22]
        }
        while( err == ERR_BUSY );
 8000f86:	8afb      	ldrh	r3, [r7, #22]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d0f6      	beq.n	8000f7a <demoTransceiveBlocking+0x2a>
    }
    return err;
 8000f8c:	8afb      	ldrh	r3, [r7, #22]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fac:	4b67      	ldr	r3, [pc, #412]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a66      	ldr	r2, [pc, #408]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b64      	ldr	r3, [pc, #400]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b61      	ldr	r3, [pc, #388]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a60      	ldr	r2, [pc, #384]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b5e      	ldr	r3, [pc, #376]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fdc:	4b5b      	ldr	r3, [pc, #364]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a5a      	ldr	r2, [pc, #360]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b58      	ldr	r3, [pc, #352]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b55      	ldr	r3, [pc, #340]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a54      	ldr	r2, [pc, #336]	; (800114c <MX_GPIO_Init+0x1b4>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b52      	ldr	r3, [pc, #328]	; (800114c <MX_GPIO_Init+0x1b4>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <MX_GPIO_Init+0x1b4>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a4e      	ldr	r2, [pc, #312]	; (800114c <MX_GPIO_Init+0x1b4>)
 8001012:	f043 0320 	orr.w	r3, r3, #32
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b4c      	ldr	r3, [pc, #304]	; (800114c <MX_GPIO_Init+0x1b4>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001024:	4b49      	ldr	r3, [pc, #292]	; (800114c <MX_GPIO_Init+0x1b4>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a48      	ldr	r2, [pc, #288]	; (800114c <MX_GPIO_Init+0x1b4>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <MX_GPIO_Init+0x1b4>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2120      	movs	r1, #32
 8001040:	4843      	ldr	r0, [pc, #268]	; (8001150 <MX_GPIO_Init+0x1b8>)
 8001042:	f001 f894 	bl	800216e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	4842      	ldr	r0, [pc, #264]	; (8001154 <MX_GPIO_Init+0x1bc>)
 800104c:	f001 f88f 	bl	800216e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001056:	4840      	ldr	r0, [pc, #256]	; (8001158 <MX_GPIO_Init+0x1c0>)
 8001058:	f001 f889 	bl	800216e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001062:	483e      	ldr	r0, [pc, #248]	; (800115c <MX_GPIO_Init+0x1c4>)
 8001064:	f001 f883 	bl	800216e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED4_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	21a8      	movs	r1, #168	; 0xa8
 800106c:	483c      	ldr	r0, [pc, #240]	; (8001160 <MX_GPIO_Init+0x1c8>)
 800106e:	f001 f87e 	bl	800216e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8001072:	2310      	movs	r3, #16
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	4619      	mov	r1, r3
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <MX_GPIO_Init+0x1b8>)
 8001086:	f000 fec7 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800108a:	2320      	movs	r3, #32
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4619      	mov	r1, r3
 80010a0:	482b      	ldr	r0, [pc, #172]	; (8001150 <MX_GPIO_Init+0x1b8>)
 80010a2:	f000 feb9 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80010a6:	2310      	movs	r3, #16
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4619      	mov	r1, r3
 80010bc:	4825      	ldr	r0, [pc, #148]	; (8001154 <MX_GPIO_Init+0x1bc>)
 80010be:	f000 feab 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_IRQ_Pin;
 80010c2:	2310      	movs	r3, #16
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <MX_GPIO_Init+0x1cc>)
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ca:	2302      	movs	r3, #2
 80010cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4824      	ldr	r0, [pc, #144]	; (8001168 <MX_GPIO_Init+0x1d0>)
 80010d6:	f000 fe9f 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4819      	ldr	r0, [pc, #100]	; (8001158 <MX_GPIO_Init+0x1c0>)
 80010f4:	f000 fe90 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 80010f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4619      	mov	r1, r3
 8001110:	4812      	ldr	r0, [pc, #72]	; (800115c <MX_GPIO_Init+0x1c4>)
 8001112:	f000 fe81 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin;
 8001116:	23a8      	movs	r3, #168	; 0xa8
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_GPIO_Init+0x1c8>)
 800112e:	f000 fe73 	bl	8001e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	200a      	movs	r0, #10
 8001138:	f000 fd2b 	bl	8001b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800113c:	200a      	movs	r0, #10
 800113e:	f000 fd44 	bl	8001bca <HAL_NVIC_EnableIRQ>

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40011800 	.word	0x40011800
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011400 	.word	0x40011400
 8001160:	40012000 	.word	0x40012000
 8001164:	10110000 	.word	0x10110000
 8001168:	40011000 	.word	0x40011000

0800116c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001174:	1d39      	adds	r1, r7, #4
 8001176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117a:	2201      	movs	r2, #1
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <__io_putchar+0x20>)
 800117e:	f001 ff72 	bl	8003066 <HAL_UART_Transmit>
 	return ch;
 8001182:	687b      	ldr	r3, [r7, #4]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200019d4 	.word	0x200019d4

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0a0      	sub	sp, #128	; 0x80
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f000 fb89 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f887 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f7ff fefb 	bl	8000f98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011a2:	f000 fadf 	bl	8001764 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80011a6:	f000 f8cb 	bl	8001340 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &uartrxdata, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	4937      	ldr	r1, [pc, #220]	; (800128c <main+0xfc>)
 80011ae:	4838      	ldr	r0, [pc, #224]	; (8001290 <main+0x100>)
 80011b0:	f001 ffeb 	bl	800318a <HAL_UART_Receive_IT>

  printf("Demo Start\r\n");
 80011b4:	4837      	ldr	r0, [pc, #220]	; (8001294 <main+0x104>)
 80011b6:	f011 f867 	bl	8012288 <puts>

  if(!demoIni())
 80011ba:	f7ff fd49 	bl	8000c50 <demoIni>
 80011be:	4603      	mov	r3, r0
 80011c0:	f083 0301 	eor.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d018      	beq.n	80011fc <main+0x6c>
  {
	  printf("st25r3916Init [ERROR]\r\n");
 80011ca:	4833      	ldr	r0, [pc, #204]	; (8001298 <main+0x108>)
 80011cc:	f011 f85c 	bl	8012288 <puts>
	  while(1)
	  	  {
	  		  NFC06A1_LED_Toggle( TX_LED );
 80011d0:	2005      	movs	r0, #5
 80011d2:	f00f fdbb 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TA_LED );
 80011d6:	2002      	movs	r0, #2
 80011d8:	f00f fdb8 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TB_LED );
 80011dc:	2001      	movs	r0, #1
 80011de:	f00f fdb5 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TF_LED );
 80011e2:	2000      	movs	r0, #0
 80011e4:	f00f fdb2 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( TV_LED );
 80011e8:	2003      	movs	r0, #3
 80011ea:	f00f fdaf 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		  NFC06A1_LED_Toggle( AP2P_LED );
 80011ee:	2004      	movs	r0, #4
 80011f0:	f00f fdac 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		  platformDelay(100);
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f000 fbbb 	bl	8001970 <HAL_Delay>
	  		  NFC06A1_LED_Toggle( TX_LED );
 80011fa:	e7e9      	b.n	80011d0 <main+0x40>
	  	  }
  }
  else
  {
	  printf("st25r3916Init [OK]\r\n");
 80011fc:	4827      	ldr	r0, [pc, #156]	; (800129c <main+0x10c>)
 80011fe:	f011 f843 	bl	8012288 <puts>
	  for (int i = 0; i < 6; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001206:	e017      	b.n	8001238 <main+0xa8>
	  	{
	  		NFC06A1_LED_Toggle( TX_LED );
 8001208:	2005      	movs	r0, #5
 800120a:	f00f fd9f 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TA_LED );
 800120e:	2002      	movs	r0, #2
 8001210:	f00f fd9c 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TB_LED );
 8001214:	2001      	movs	r0, #1
 8001216:	f00f fd99 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TF_LED );
 800121a:	2000      	movs	r0, #0
 800121c:	f00f fd96 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( TV_LED );
 8001220:	2003      	movs	r0, #3
 8001222:	f00f fd93 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		NFC06A1_LED_Toggle( AP2P_LED );
 8001226:	2004      	movs	r0, #4
 8001228:	f00f fd90 	bl	8010d4c <NFC06A1_LED_Toggle>
	  		platformDelay(200);
 800122c:	20c8      	movs	r0, #200	; 0xc8
 800122e:	f000 fb9f 	bl	8001970 <HAL_Delay>
	  for (int i = 0; i < 6; i++)
 8001232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001234:	3301      	adds	r3, #1
 8001236:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800123a:	2b05      	cmp	r3, #5
 800123c:	dde4      	ble.n	8001208 <main+0x78>
	  	}

	  		NFC06A1_LED_OFF( TA_LED );
 800123e:	2002      	movs	r0, #2
 8001240:	f00f fd6c 	bl	8010d1c <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TB_LED );
 8001244:	2001      	movs	r0, #1
 8001246:	f00f fd69 	bl	8010d1c <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TF_LED );
 800124a:	2000      	movs	r0, #0
 800124c:	f00f fd66 	bl	8010d1c <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TV_LED );
 8001250:	2003      	movs	r0, #3
 8001252:	f00f fd63 	bl	8010d1c <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( AP2P_LED );
 8001256:	2004      	movs	r0, #4
 8001258:	f00f fd60 	bl	8010d1c <NFC06A1_LED_OFF>
	  		NFC06A1_LED_OFF( TX_LED );
 800125c:	2005      	movs	r0, #5
 800125e:	f00f fd5d 	bl	8010d1c <NFC06A1_LED_OFF>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true)
  {
	  if (trogleLED)
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <main+0x110>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <main+0xf2>
	  {
		  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800126a:	2120      	movs	r1, #32
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <main+0x114>)
 800126e:	f000 ff96 	bl	800219e <HAL_GPIO_TogglePin>
		  printf("TrogleLED\r\n");
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <main+0x118>)
 8001274:	f011 f808 	bl	8012288 <puts>
		  HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f000 fb78 	bl	8001970 <HAL_Delay>
 8001280:	e7ef      	b.n	8001262 <main+0xd2>
	  }
	  else
	  {
		  demoCE(&nfcDev);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fdc7 	bl	8000e18 <demoCE>
	  if (trogleLED)
 800128a:	e7ea      	b.n	8001262 <main+0xd2>
 800128c:	200009d2 	.word	0x200009d2
 8001290:	200019d4 	.word	0x200019d4
 8001294:	080134ec 	.word	0x080134ec
 8001298:	080134f8 	.word	0x080134f8
 800129c:	08013510 	.word	0x08013510
 80012a0:	200009d5 	.word	0x200009d5
 80012a4:	40011800 	.word	0x40011800
 80012a8:	08013524 	.word	0x08013524

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	; 0x40
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f010 ff56 	bl	801216c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 ff83 	bl	8002200 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001300:	f000 f819 	bl	8001336 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f001 f9ee 	bl	8002700 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800132a:	f000 f804 	bl	8001336 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3740      	adds	r7, #64	; 0x40
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133a:	b672      	cpsid	i
}
 800133c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133e:	e7fe      	b.n	800133e <Error_Handler+0x8>

08001340 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <MX_SPI1_Init+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_SPI1_Init+0x64>)
 800134c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001366:	2201      	movs	r2, #1
 8001368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_SPI1_Init+0x64>)
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001374:	2220      	movs	r2, #32
 8001376:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_SPI1_Init+0x64>)
 800138c:	220a      	movs	r2, #10
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_SPI1_Init+0x64>)
 8001392:	f001 fb4f 	bl	8002a34 <HAL_SPI_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800139c:	f7ff ffcb 	bl	8001336 <Error_Handler>
  }

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000197c 	.word	0x2000197c
 80013a8:	40013000 	.word	0x40013000

080013ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d12f      	bne.n	800142c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013fc:	23a0      	movs	r3, #160	; 0xa0
 80013fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <HAL_SPI_MspInit+0x90>)
 8001410:	f000 fd02 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001414:	2340      	movs	r3, #64	; 0x40
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_SPI_MspInit+0x90>)
 8001428:	f000 fcf6 	bl	8001e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40013000 	.word	0x40013000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010800 	.word	0x40010800

08001440 <BSP_SPI_SendRecv>:

/* USER CODE BEGIN 1 */


int32_t BSP_SPI_SendRecv(const uint8_t * const pTxData, uint8_t * const pRxData, uint16_t Length)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001446:	af02      	add	r7, sp, #8
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	6018      	str	r0, [r3, #0]
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	6019      	str	r1, [r3, #0]
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;
  uint8_t   tx[256];
  uint8_t   rx[256];

  if (pTxData != NULL)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <BSP_SPI_SendRecv+0x34>
  {
    memcpy(tx, pTxData, Length);
 8001462:	1dbb      	adds	r3, r7, #6
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	f010 fe54 	bl	801211c <memcpy>
  }

  status = HAL_SPI_TransmitReceive(&hspi1, tx, (pRxData != NULL) ? (uint8_t *)pRxData : rx, Length, 0xffff);
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <BSP_SPI_SendRecv+0x44>
 800147e:	f107 0214 	add.w	r2, r7, #20
 8001482:	e002      	b.n	800148a <BSP_SPI_SendRecv+0x4a>
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	1dbb      	adds	r3, r7, #6
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8001492:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001496:	9000      	str	r0, [sp, #0]
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <BSP_SPI_SendRecv+0x74>)
 800149a:	f001 fb4f 	bl	8002b3c <HAL_SPI_TransmitReceive>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  return status;
 80014a4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000197c 	.word	0x2000197c

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_MspInit+0x60>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <HAL_MspInit+0x60>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_MspInit+0x60>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_MspInit+0x60>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_MspInit+0x60>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_MspInit+0x60>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80014ee:	2005      	movs	r0, #5
 80014f0:	f000 fb44 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x64>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_MspInit+0x64>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001566:	f000 f9e7 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}

0800156e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001572:	2010      	movs	r0, #16
 8001574:	f000 fe2c 	bl	80021d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USART1_IRQHandler+0x10>)
 8001582:	f001 fe57 	bl	8003234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200019d4 	.word	0x200019d4

08001590 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

//	printf("uart int \r\n");
	if(uartrxdata == 0x31)
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_UART_RxCpltCallback+0x5c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b31      	cmp	r3, #49	; 0x31
 800159e:	d104      	bne.n	80015aa <HAL_UART_RxCpltCallback+0x1a>
	{
		printf("SystemReset\r\n");
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <HAL_UART_RxCpltCallback+0x60>)
 80015a2:	f010 fe71 	bl	8012288 <puts>
		HAL_NVIC_SystemReset();
 80015a6:	f000 fb1e 	bl	8001be6 <HAL_NVIC_SystemReset>
	}
	if(uartrxdata == 0x00)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_UART_RxCpltCallback+0x5c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d103      	bne.n	80015ba <HAL_UART_RxCpltCallback+0x2a>
	{
//		printf("trogleLED\r\n");
		trogleLED = true;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_UART_RxCpltCallback+0x64>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <HAL_UART_RxCpltCallback+0x48>
	}
	else if(uartrxdata == 0x01)
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_UART_RxCpltCallback+0x5c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d103      	bne.n	80015ca <HAL_UART_RxCpltCallback+0x3a>
	{
//		printf("wakeupflag\r\n");
		wakeupflag = true;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_UART_RxCpltCallback+0x68>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <HAL_UART_RxCpltCallback+0x48>
	}
	else if (uartrxdata == 0x02)
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_UART_RxCpltCallback+0x5c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d102      	bne.n	80015d8 <HAL_UART_RxCpltCallback+0x48>
	{
//		printf("buttonflag\r\n");
		buttonflag = true;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_UART_RxCpltCallback+0x6c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, &uartrxdata, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	4904      	ldr	r1, [pc, #16]	; (80015ec <HAL_UART_RxCpltCallback+0x5c>)
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <HAL_UART_RxCpltCallback+0x70>)
 80015de:	f001 fdd4 	bl	800318a <HAL_UART_Receive_IT>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200009d2 	.word	0x200009d2
 80015f0:	08013530 	.word	0x08013530
 80015f4:	200009d5 	.word	0x200009d5
 80015f8:	200009d4 	.word	0x200009d4
 80015fc:	200009d3 	.word	0x200009d3
 8001600:	200019d4 	.word	0x200019d4

08001604 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
//	printf("MCU_IRQ\r\n");
	st25r3916Isr();
 800160e:	f010 fb07 	bl	8011c20 <st25r3916Isr>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e00a      	b.n	8001642 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162c:	f3af 8000 	nop.w
 8001630:	4601      	mov	r1, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	b2ca      	uxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbf0      	blt.n	800162c <_read+0x12>
	}

return len;
 800164a:	687b      	ldr	r3, [r7, #4]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e009      	b.n	800167a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fd7c 	bl	800116c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf1      	blt.n	8001666 <_write+0x12>
	}
	return len;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_close>:

int _close(int file)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b2:	605a      	str	r2, [r3, #4]
	return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <_isatty>:

int _isatty(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f010 fcc6 	bl	80120ac <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20010000 	.word	0x20010000
 800174c:	00000400 	.word	0x00000400
 8001750:	200009d8 	.word	0x200009d8
 8001754:	20001a28 	.word	0x20001a28

08001758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_USART1_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART1_UART_Init+0x4c>)
 800179c:	f001 fc16 	bl	8002fcc <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f7ff fdc6 	bl	8001336 <Error_Handler>
  }

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200019d4 	.word	0x200019d4
 80017b4:	40013800 	.word	0x40013800

080017b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <HAL_UART_MspInit+0x9c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d139      	bne.n	800184c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_MspInit+0xa0>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_UART_MspInit+0xa0>)
 80017de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_MspInit+0xa0>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_UART_MspInit+0xa0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_UART_MspInit+0xa0>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_UART_MspInit+0xa0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4619      	mov	r1, r3
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <HAL_UART_MspInit+0xa4>)
 800181e:	f000 fafb 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <HAL_UART_MspInit+0xa4>)
 8001838:	f000 faee 	bl	8001e18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 800183c:	2201      	movs	r2, #1
 800183e:	2101      	movs	r1, #1
 8001840:	2025      	movs	r0, #37	; 0x25
 8001842:	f000 f9a6 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001846:	2025      	movs	r0, #37	; 0x25
 8001848:	f000 f9bf 	bl	8001bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013800 	.word	0x40013800
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800

08001860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001862:	e003      	b.n	800186c <LoopCopyDataInit>

08001864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800186a:	3104      	adds	r1, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001874:	d3f6      	bcc.n	8001864 <CopyDataInit>
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001878:	e002      	b.n	8001880 <LoopFillZerobss>

0800187a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800187c:	f842 3b04 	str.w	r3, [r2], #4

08001880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001884:	d3f9      	bcc.n	800187a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001886:	f7ff ff67 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f010 fc15 	bl	80120b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188e:	f7ff fc7f 	bl	8001190 <main>
  bx lr
 8001892:	4770      	bx	lr
  ldr r3, =_sidata
 8001894:	080138dc 	.word	0x080138dc
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800189c:	2000011c 	.word	0x2000011c
  ldr r2, =_sbss
 80018a0:	2000011c 	.word	0x2000011c
  ldr r3, = _ebss
 80018a4:	20001a28 	.word	0x20001a28

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x28>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x28>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f95d 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fdf6 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f979 	bl	8001bee <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f93d 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000078 	.word	0x20000078
 8001930:	20000080 	.word	0x20000080
 8001934:	2000007c 	.word	0x2000007c

08001938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x1c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x20>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a03      	ldr	r2, [pc, #12]	; (8001958 <HAL_IncTick+0x20>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	20000080 	.word	0x20000080
 8001958:	20001a14 	.word	0x20001a14

0800195c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_GetTick+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20001a14 	.word	0x20001a14

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fff0 	bl	800195c <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffe0 	bl	800195c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000080 	.word	0x20000080

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <__NVIC_EnableIRQ+0x34>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b10:	f3bf 8f4f 	dsb	sy
}
 8001b14:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <__NVIC_SystemReset+0x24>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b1e:	4904      	ldr	r1, [pc, #16]	; (8001b30 <__NVIC_SystemReset+0x24>)
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_SystemReset+0x28>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b26:	f3bf 8f4f 	dsb	sy
}
 8001b2a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <__NVIC_SystemReset+0x20>
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	05fa0004 	.word	0x05fa0004

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff7a 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff17 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff2c 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff7a 	bl	8001aa8 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff49 	bl	8001a54 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff1f 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001bea:	f7ff ff8f 	bl	8001b0c <__NVIC_SystemReset>

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff9e 	bl	8001b38 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d005      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2204      	movs	r2, #4
 8001c22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e0d6      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 020e 	bic.w	r2, r2, #14
 8001c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_DMA_Abort_IT+0x1dc>)
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d958      	bls.n	8001d08 <HAL_DMA_Abort_IT+0x100>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a63      	ldr	r2, [pc, #396]	; (8001de8 <HAL_DMA_Abort_IT+0x1e0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d04f      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xf8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a61      	ldr	r2, [pc, #388]	; (8001dec <HAL_DMA_Abort_IT+0x1e4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d048      	beq.n	8001cfc <HAL_DMA_Abort_IT+0xf4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a60      	ldr	r2, [pc, #384]	; (8001df0 <HAL_DMA_Abort_IT+0x1e8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d040      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0xee>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5e      	ldr	r2, [pc, #376]	; (8001df4 <HAL_DMA_Abort_IT+0x1ec>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d038      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0xe8>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <HAL_DMA_Abort_IT+0x1f0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d030      	beq.n	8001cea <HAL_DMA_Abort_IT+0xe2>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <HAL_DMA_Abort_IT+0x1f4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d028      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xdc>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a53      	ldr	r2, [pc, #332]	; (8001de4 <HAL_DMA_Abort_IT+0x1dc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d020      	beq.n	8001cde <HAL_DMA_Abort_IT+0xd6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a57      	ldr	r2, [pc, #348]	; (8001e00 <HAL_DMA_Abort_IT+0x1f8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_DMA_Abort_IT+0xd2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a56      	ldr	r2, [pc, #344]	; (8001e04 <HAL_DMA_Abort_IT+0x1fc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d012      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0xce>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a54      	ldr	r2, [pc, #336]	; (8001e08 <HAL_DMA_Abort_IT+0x200>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_DMA_Abort_IT+0xc8>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a53      	ldr	r2, [pc, #332]	; (8001e0c <HAL_DMA_Abort_IT+0x204>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d102      	bne.n	8001cca <HAL_DMA_Abort_IT+0xc2>
 8001cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc8:	e01b      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cce:	e018      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	e015      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	e013      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e011      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce2:	e00e      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001ce4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ce8:	e00b      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cee:	e008      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	e005      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfa:	e002      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_Abort_IT+0xfa>
 8001d00:	2301      	movs	r3, #1
 8001d02:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_DMA_Abort_IT+0x208>)
 8001d04:	6053      	str	r3, [r2, #4]
 8001d06:	e057      	b.n	8001db8 <HAL_DMA_Abort_IT+0x1b0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <HAL_DMA_Abort_IT+0x1e0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d04f      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x1aa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <HAL_DMA_Abort_IT+0x1e4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d048      	beq.n	8001dae <HAL_DMA_Abort_IT+0x1a6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a33      	ldr	r2, [pc, #204]	; (8001df0 <HAL_DMA_Abort_IT+0x1e8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d040      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x1a0>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_DMA_Abort_IT+0x1ec>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d038      	beq.n	8001da2 <HAL_DMA_Abort_IT+0x19a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <HAL_DMA_Abort_IT+0x1f0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d030      	beq.n	8001d9c <HAL_DMA_Abort_IT+0x194>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <HAL_DMA_Abort_IT+0x1f4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d028      	beq.n	8001d96 <HAL_DMA_Abort_IT+0x18e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <HAL_DMA_Abort_IT+0x1dc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d020      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x188>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2b      	ldr	r2, [pc, #172]	; (8001e00 <HAL_DMA_Abort_IT+0x1f8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d019      	beq.n	8001d8c <HAL_DMA_Abort_IT+0x184>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a29      	ldr	r2, [pc, #164]	; (8001e04 <HAL_DMA_Abort_IT+0x1fc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d012      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x180>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <HAL_DMA_Abort_IT+0x200>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00a      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x17a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_DMA_Abort_IT+0x204>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d102      	bne.n	8001d7c <HAL_DMA_Abort_IT+0x174>
 8001d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7a:	e01b      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d80:	e018      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d86:	e015      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001d88:	2310      	movs	r3, #16
 8001d8a:	e013      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e011      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d94:	e00e      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001d96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d9a:	e00b      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da0:	e008      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	e005      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dac:	e002      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001dae:	2310      	movs	r3, #16
 8001db0:	e000      	b.n	8001db4 <HAL_DMA_Abort_IT+0x1ac>
 8001db2:	2301      	movs	r3, #1
 8001db4:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_DMA_Abort_IT+0x20c>)
 8001db6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
    } 
  }
  return status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40020080 	.word	0x40020080
 8001de8:	40020008 	.word	0x40020008
 8001dec:	4002001c 	.word	0x4002001c
 8001df0:	40020030 	.word	0x40020030
 8001df4:	40020044 	.word	0x40020044
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	4002006c 	.word	0x4002006c
 8001e00:	40020408 	.word	0x40020408
 8001e04:	4002041c 	.word	0x4002041c
 8001e08:	40020430 	.word	0x40020430
 8001e0c:	40020444 	.word	0x40020444
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b08b      	sub	sp, #44	; 0x2c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e179      	b.n	8002120 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8168 	bne.w	800211a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4aa0      	ldr	r2, [pc, #640]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d05e      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e54:	4a9e      	ldr	r2, [pc, #632]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d875      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e5a:	4a9e      	ldr	r2, [pc, #632]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d058      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e60:	4a9c      	ldr	r2, [pc, #624]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d86f      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e66:	4a9c      	ldr	r2, [pc, #624]	; (80020d8 <HAL_GPIO_Init+0x2c0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d052      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e6c:	4a9a      	ldr	r2, [pc, #616]	; (80020d8 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d869      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e72:	4a9a      	ldr	r2, [pc, #616]	; (80020dc <HAL_GPIO_Init+0x2c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d04c      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e78:	4a98      	ldr	r2, [pc, #608]	; (80020dc <HAL_GPIO_Init+0x2c4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d863      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e7e:	4a98      	ldr	r2, [pc, #608]	; (80020e0 <HAL_GPIO_Init+0x2c8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d046      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e84:	4a96      	ldr	r2, [pc, #600]	; (80020e0 <HAL_GPIO_Init+0x2c8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d85d      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d82a      	bhi.n	8001ee4 <HAL_GPIO_Init+0xcc>
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d859      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e92:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <HAL_GPIO_Init+0x80>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001eed 	.word	0x08001eed
 8001ea0:	08001eff 	.word	0x08001eff
 8001ea4:	08001f41 	.word	0x08001f41
 8001ea8:	08001f47 	.word	0x08001f47
 8001eac:	08001f47 	.word	0x08001f47
 8001eb0:	08001f47 	.word	0x08001f47
 8001eb4:	08001f47 	.word	0x08001f47
 8001eb8:	08001f47 	.word	0x08001f47
 8001ebc:	08001f47 	.word	0x08001f47
 8001ec0:	08001f47 	.word	0x08001f47
 8001ec4:	08001f47 	.word	0x08001f47
 8001ec8:	08001f47 	.word	0x08001f47
 8001ecc:	08001f47 	.word	0x08001f47
 8001ed0:	08001f47 	.word	0x08001f47
 8001ed4:	08001f47 	.word	0x08001f47
 8001ed8:	08001f47 	.word	0x08001f47
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eea:	e02c      	b.n	8001f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e029      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e024      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	3308      	adds	r3, #8
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e01f      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e01a      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e013      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	611a      	str	r2, [r3, #16]
          break;
 8001f32:	e009      	b.n	8001f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	615a      	str	r2, [r3, #20]
          break;
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          break;
 8001f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2bff      	cmp	r3, #255	; 0xff
 8001f4c:	d801      	bhi.n	8001f52 <HAL_GPIO_Init+0x13a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_Init+0x13e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3304      	adds	r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2bff      	cmp	r3, #255	; 0xff
 8001f5c:	d802      	bhi.n	8001f64 <HAL_GPIO_Init+0x14c>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x152>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	3b08      	subs	r3, #8
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	210f      	movs	r1, #15
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	431a      	orrs	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80c1 	beq.w	800211a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_GPIO_Init+0x2d4>)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <HAL_GPIO_Init+0x2d8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01f      	beq.n	800201c <HAL_GPIO_Init+0x204>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a45      	ldr	r2, [pc, #276]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d019      	beq.n	8002018 <HAL_GPIO_Init+0x200>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a44      	ldr	r2, [pc, #272]	; (80020f8 <HAL_GPIO_Init+0x2e0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <HAL_GPIO_Init+0x1fc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a43      	ldr	r2, [pc, #268]	; (80020fc <HAL_GPIO_Init+0x2e4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00d      	beq.n	8002010 <HAL_GPIO_Init+0x1f8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d007      	beq.n	800200c <HAL_GPIO_Init+0x1f4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a41      	ldr	r2, [pc, #260]	; (8002104 <HAL_GPIO_Init+0x2ec>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_GPIO_Init+0x1f0>
 8002004:	2305      	movs	r3, #5
 8002006:	e00a      	b.n	800201e <HAL_GPIO_Init+0x206>
 8002008:	2306      	movs	r3, #6
 800200a:	e008      	b.n	800201e <HAL_GPIO_Init+0x206>
 800200c:	2304      	movs	r3, #4
 800200e:	e006      	b.n	800201e <HAL_GPIO_Init+0x206>
 8002010:	2303      	movs	r3, #3
 8002012:	e004      	b.n	800201e <HAL_GPIO_Init+0x206>
 8002014:	2302      	movs	r3, #2
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x206>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_GPIO_Init+0x206>
 800201c:	2300      	movs	r3, #0
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4093      	lsls	r3, r2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800202e:	492f      	ldr	r1, [pc, #188]	; (80020ec <HAL_GPIO_Init+0x2d4>)
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	492e      	ldr	r1, [pc, #184]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	492a      	ldr	r1, [pc, #168]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8002060:	4013      	ands	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4924      	ldr	r1, [pc, #144]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	4920      	ldr	r1, [pc, #128]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8002088:	4013      	ands	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	491a      	ldr	r1, [pc, #104]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d025      	beq.n	800210c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4910      	ldr	r1, [pc, #64]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
 80020cc:	e025      	b.n	800211a <HAL_GPIO_Init+0x302>
 80020ce:	bf00      	nop
 80020d0:	10320000 	.word	0x10320000
 80020d4:	10310000 	.word	0x10310000
 80020d8:	10220000 	.word	0x10220000
 80020dc:	10210000 	.word	0x10210000
 80020e0:	10120000 	.word	0x10120000
 80020e4:	10110000 	.word	0x10110000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40010800 	.word	0x40010800
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	40011000 	.word	0x40011000
 80020fc:	40011400 	.word	0x40011400
 8002100:	40011800 	.word	0x40011800
 8002104:	40011c00 	.word	0x40011c00
 8002108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_GPIO_Init+0x324>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	43db      	mvns	r3, r3
 8002114:	4909      	ldr	r1, [pc, #36]	; (800213c <HAL_GPIO_Init+0x324>)
 8002116:	4013      	ands	r3, r2
 8002118:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	3301      	adds	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ae7e 	bne.w	8001e2c <HAL_GPIO_Init+0x14>
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	372c      	adds	r7, #44	; 0x2c
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e001      	b.n	8002162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	807b      	strh	r3, [r7, #2]
 800217a:	4613      	mov	r3, r2
 800217c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217e:	787b      	ldrb	r3, [r7, #1]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002184:	887a      	ldrh	r2, [r7, #2]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800218a:	e003      	b.n	8002194 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b0:	887a      	ldrh	r2, [r7, #2]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	041a      	lsls	r2, r3, #16
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43d9      	mvns	r1, r3
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	400b      	ands	r3, r1
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fa08 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40010400 	.word	0x40010400

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e26c      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002220:	4b92      	ldr	r3, [pc, #584]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d00c      	beq.n	8002246 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800222c:	4b8f      	ldr	r3, [pc, #572]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d112      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
 8002238:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b89      	ldr	r3, [pc, #548]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d06c      	beq.n	800232c <HAL_RCC_OscConfig+0x12c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d168      	bne.n	800232c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e246      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x76>
 8002268:	4b80      	ldr	r3, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a7f      	ldr	r2, [pc, #508]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e02e      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a77      	ldr	r2, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0xbc>
 80022a2:	4b72      	ldr	r3, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a71      	ldr	r2, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6e      	ldr	r2, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 80022bc:	4b6b      	ldr	r3, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6a      	ldr	r2, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fb3e 	bl	800195c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fb3a 	bl	800195c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1fa      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe4>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fb2a 	bl	800195c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fb26 	bl	800195c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1e6      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x10c>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233a:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002346:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1ba      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4939      	ldr	r1, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_OscConfig+0x270>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff fadf 	bl	800195c <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff fadb 	bl	800195c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e19b      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4927      	ldr	r1, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_RCC_OscConfig+0x270>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fabe 	bl	800195c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff faba 	bl	800195c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e17a      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d03a      	beq.n	8002484 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x274>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fa9e 	bl	800195c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff fa9a 	bl	800195c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e15a      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f000 fad8 	bl	80029f8 <RCC_Delay>
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_OscConfig+0x274>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff fa84 	bl	800195c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002456:	e00f      	b.n	8002478 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fa80 	bl	800195c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d908      	bls.n	8002478 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e140      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	42420000 	.word	0x42420000
 8002474:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e9      	bne.n	8002458 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a6 	beq.w	80025de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002496:	4b97      	ldr	r3, [pc, #604]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10d      	bne.n	80024be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a93      	ldr	r2, [pc, #588]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b8e      	ldr	r3, [pc, #568]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a8a      	ldr	r2, [pc, #552]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fa41 	bl	800195c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff fa3d 	bl	800195c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0fd      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x312>
 8002504:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a7a      	ldr	r2, [pc, #488]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e02d      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x334>
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a72      	ldr	r2, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	e01c      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x356>
 800253c:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a6c      	ldr	r2, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a69      	ldr	r2, [pc, #420]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a63      	ldr	r2, [pc, #396]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d015      	beq.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff f9f1 	bl	800195c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff f9ed 	bl	800195c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0ab      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002594:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ee      	beq.n	800257e <HAL_RCC_OscConfig+0x37e>
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff f9db 	bl	800195c <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff f9d7 	bl	800195c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e095      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a47      	ldr	r2, [pc, #284]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8081 	beq.w	80026ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d061      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d146      	bne.n	800268a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7ff f9ab 	bl	800195c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7ff f9a7 	bl	800195c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e067      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	492d      	ldr	r1, [pc, #180]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a19      	ldr	r1, [r3, #32]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	430b      	orrs	r3, r1
 8002656:	4927      	ldr	r1, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff f97b 	bl	800195c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff f977 	bl	800195c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e037      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x46a>
 8002688:	e02f      	b.n	80026ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff f964 	bl	800195c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff f960 	bl	800195c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e020      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x498>
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e013      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42420060 	.word	0x42420060

08002700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0d0      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4965      	ldr	r1, [pc, #404]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b8      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	494d      	ldr	r1, [pc, #308]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d040      	beq.n	8002820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e073      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f0:	f7ff f8b4 	bl	800195c <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7ff f8b0 	bl	800195c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e053      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d210      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4922      	ldr	r1, [pc, #136]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e032      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4916      	ldr	r1, [pc, #88]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	490e      	ldr	r1, [pc, #56]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288e:	f000 f821 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002892:	4602      	mov	r2, r0
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	490a      	ldr	r1, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	5ccb      	ldrb	r3, [r1, r3]
 80028a2:	fa22 f303 	lsr.w	r3, r2, r3
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1cc>)
 80028a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1d0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f812 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08013824 	.word	0x08013824
 80028cc:	20000078 	.word	0x20000078
 80028d0:	2000007c 	.word	0x2000007c

080028d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b490      	push	{r4, r7}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028dc:	1d3c      	adds	r4, r7, #4
 80028de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028e4:	f240 2301 	movw	r3, #513	; 0x201
 80028e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x40>
 800290e:	2b08      	cmp	r3, #8
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x46>
 8002912:	e02d      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002916:	623b      	str	r3, [r7, #32]
      break;
 8002918:	e02d      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	0c9b      	lsrs	r3, r3, #18
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002926:	4413      	add	r3, r2
 8002928:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800292c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c5b      	lsrs	r3, r3, #17
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002946:	4413      	add	r3, r2
 8002948:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800294c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4a0e      	ldr	r2, [pc, #56]	; (800298c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002952:	fb02 f203 	mul.w	r2, r2, r3
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	e004      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	623b      	str	r3, [r7, #32]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002972:	623b      	str	r3, [r7, #32]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	6a3b      	ldr	r3, [r7, #32]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3728      	adds	r7, #40	; 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bc90      	pop	{r4, r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	08013540 	.word	0x08013540
 8002988:	40021000 	.word	0x40021000
 800298c:	007a1200 	.word	0x007a1200
 8002990:	003d0900 	.word	0x003d0900

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	20000078 	.word	0x20000078

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff2 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08013834 	.word	0x08013834

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d4:	f7ff ffde 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0adb      	lsrs	r3, r3, #11
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4903      	ldr	r1, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08013834 	.word	0x08013834

080029f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <RCC_Delay+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <RCC_Delay+0x38>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0a5b      	lsrs	r3, r3, #9
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a14:	bf00      	nop
  }
  while (Delay --);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <RCC_Delay+0x1c>
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	20000078 	.word	0x20000078
 8002a30:	10624dd3 	.word	0x10624dd3

08002a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e076      	b.n	8002b34 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d108      	bne.n	8002a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a56:	d009      	beq.n	8002a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
 8002a5e:	e005      	b.n	8002a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fc90 	bl	80013ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	ea42 0103 	orr.w	r1, r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	0c1a      	lsrs	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f002 0204 	and.w	r2, r2, #4
 8002b12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x26>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e18a      	b.n	8002e78 <HAL_SPI_TransmitReceive+0x33c>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b6a:	f7fe fef7 	bl	800195c <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d00f      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x70>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b92:	d107      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x68>
 8002b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d003      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002baa:	e15b      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0x82>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0x82>
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bc4:	e14e      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d003      	beq.n	8002bda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2205      	movs	r2, #5
 8002bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	887a      	ldrh	r2, [r7, #2]
 8002bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	887a      	ldrh	r2, [r7, #2]
 8002c02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d007      	beq.n	8002c2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c36:	d178      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_SPI_TransmitReceive+0x10a>
 8002c40:	8b7b      	ldrh	r3, [r7, #26]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d166      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	1c9a      	adds	r2, r3, #2
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6a:	e053      	b.n	8002d14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d11b      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x176>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d016      	beq.n	8002cb2 <HAL_SPI_TransmitReceive+0x176>
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d113      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	881a      	ldrh	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	1c9a      	adds	r2, r3, #2
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d119      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x1b8>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d014      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cf4:	f7fe fe32 	bl	800195c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d807      	bhi.n	8002d14 <HAL_SPI_TransmitReceive+0x1d8>
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d003      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d12:	e0a7      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1a6      	bne.n	8002c6c <HAL_SPI_TransmitReceive+0x130>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1a1      	bne.n	8002c6c <HAL_SPI_TransmitReceive+0x130>
 8002d28:	e07c      	b.n	8002e24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x1fc>
 8002d32:	8b7b      	ldrh	r3, [r7, #26]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d16b      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d5e:	e057      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d11c      	bne.n	8002da8 <HAL_SPI_TransmitReceive+0x26c>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d017      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x26c>
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d114      	bne.n	8002da8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	330c      	adds	r3, #12
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d119      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x2ae>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d014      	beq.n	8002dea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002de6:	2301      	movs	r3, #1
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dea:	f7fe fdb7 	bl	800195c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d803      	bhi.n	8002e02 <HAL_SPI_TransmitReceive+0x2c6>
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d102      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x2cc>
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e0e:	e029      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1a2      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x224>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d19d      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f8b1 	bl	8002f90 <SPI_EndRxTxTransaction>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e40:	e010      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	e000      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e90:	f7fe fd64 	bl	800195c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ea0:	f7fe fd5c 	bl	800195c <HAL_GetTick>
 8002ea4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	015b      	lsls	r3, r3, #5
 8002eac:	0d1b      	lsrs	r3, r3, #20
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eb6:	e054      	b.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d050      	beq.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec0:	f7fe fd4c 	bl	800195c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d902      	bls.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d13d      	bne.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eee:	d111      	bne.n	8002f14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef8:	d004      	beq.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f02:	d107      	bne.n	8002f14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1c:	d10f      	bne.n	8002f3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e017      	b.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d19b      	bne.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000078 	.word	0x20000078

08002f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff ff6a 	bl	8002e80 <SPI_WaitFlagStateUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e000      	b.n	8002fc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e03f      	b.n	800305e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe fbe0 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fb83 	bl	800371c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b08a      	sub	sp, #40	; 0x28
 800306a:	af02      	add	r7, sp, #8
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	d17c      	bne.n	8003180 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_UART_Transmit+0x2c>
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e075      	b.n	8003182 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_UART_Transmit+0x3e>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e06e      	b.n	8003182 <HAL_UART_Transmit+0x11c>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2221      	movs	r2, #33	; 0x21
 80030b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030ba:	f7fe fc4f 	bl	800195c <HAL_GetTick>
 80030be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d108      	bne.n	80030e8 <HAL_UART_Transmit+0x82>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e003      	b.n	80030f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030f8:	e02a      	b.n	8003150 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f9a7 	bl	8003458 <UART_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e036      	b.n	8003182 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	3302      	adds	r3, #2
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	e007      	b.n	8003142 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	3301      	adds	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1cf      	bne.n	80030fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2200      	movs	r2, #0
 8003162:	2140      	movs	r1, #64	; 0x40
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f977 	bl	8003458 <UART_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e006      	b.n	8003182 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	4613      	mov	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d140      	bne.n	8003226 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Receive_IT+0x26>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e039      	b.n	8003228 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Receive_IT+0x38>
 80031be:	2302      	movs	r3, #2
 80031c0:	e032      	b.n	8003228 <HAL_UART_Receive_IT+0x9e>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2222      	movs	r2, #34	; 0x22
 80031e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003200:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
	...

08003234 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_UART_IRQHandler+0x52>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f9cc 	bl	800361c <UART_Receive_IT>
      return;
 8003284:	e0d0      	b.n	8003428 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80b0 	beq.w	80033ee <HAL_UART_IRQHandler+0x1ba>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_UART_IRQHandler+0x70>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a5 	beq.w	80033ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_UART_IRQHandler+0x90>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_UART_IRQHandler+0xb0>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032dc:	f043 0202 	orr.w	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_UART_IRQHandler+0xd0>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00f      	beq.n	800332e <HAL_UART_IRQHandler+0xfa>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <HAL_UART_IRQHandler+0xee>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	f043 0208 	orr.w	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d077      	beq.n	8003426 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_UART_IRQHandler+0x11c>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f966 	bl	800361c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_UART_IRQHandler+0x144>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d031      	beq.n	80033dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8b7 	bl	80034ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d023      	beq.n	80033d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	4a21      	ldr	r2, [pc, #132]	; (8003430 <HAL_UART_IRQHandler+0x1fc>)
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fc29 	bl	8001c08 <HAL_DMA_Abort_IT>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d016      	beq.n	80033ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033c6:	4610      	mov	r0, r2
 80033c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ca:	e00e      	b.n	80033ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f83a 	bl	8003446 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d2:	e00a      	b.n	80033ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f836 	bl	8003446 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	e006      	b.n	80033ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f832 	bl	8003446 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033e8:	e01d      	b.n	8003426 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	bf00      	nop
    return;
 80033ec:	e01b      	b.n	8003426 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_UART_IRQHandler+0x1d6>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8a3 	bl	800354e <UART_Transmit_IT>
    return;
 8003408:	e00e      	b.n	8003428 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_UART_IRQHandler+0x1f4>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8e4 	bl	80035ec <UART_EndTransmit_IT>
    return;
 8003424:	e000      	b.n	8003428 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003426:	bf00      	nop
  }
}
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	08003527 	.word	0x08003527

08003434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003468:	e02c      	b.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d028      	beq.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <UART_WaitOnFlagUntilTimeout+0x30>
 8003478:	f7fe fa70 	bl	800195c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	d21d      	bcs.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003496:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e00f      	b.n	80034e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d0c3      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003502:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff ff80 	bl	8003446 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b21      	cmp	r3, #33	; 0x21
 8003560:	d13e      	bne.n	80035e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	d114      	bne.n	8003596 <UART_Transmit_IT+0x48>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d110      	bne.n	8003596 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003588:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	621a      	str	r2, [r3, #32]
 8003594:	e008      	b.n	80035a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6211      	str	r1, [r2, #32]
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4619      	mov	r1, r3
 80035b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10f      	bne.n	80035dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	e000      	b.n	80035e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff11 	bl	8003434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b22      	cmp	r3, #34	; 0x22
 800362e:	d170      	bne.n	8003712 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d117      	bne.n	800366a <UART_Receive_IT+0x4e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d113      	bne.n	800366a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	b29a      	uxth	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
 8003668:	e026      	b.n	80036b8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d007      	beq.n	800368e <UART_Receive_IT+0x72>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <UART_Receive_IT+0x80>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e008      	b.n	80036ae <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4619      	mov	r1, r3
 80036c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d120      	bne.n	800370e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0220 	bic.w	r2, r2, #32
 80036da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd ff43 	bl	8001590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e002      	b.n	8003714 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003712:	2302      	movs	r3, #2
  }
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003756:	f023 030c 	bic.w	r3, r3, #12
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	430b      	orrs	r3, r1
 8003762:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <UART_SetConfig+0x114>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d103      	bne.n	800378c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003784:	f7ff f924 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	e002      	b.n	8003792 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800378c:	f7ff f90c 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8003790:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	4a22      	ldr	r2, [pc, #136]	; (8003834 <UART_SetConfig+0x118>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	0119      	lsls	r1, r3, #4
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	441a      	add	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <UART_SetConfig+0x118>)
 80037ca:	fba3 0302 	umull	r0, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2064      	movs	r0, #100	; 0x64
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	; 0x32
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <UART_SetConfig+0x118>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e8:	4419      	add	r1, r3
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009a      	lsls	r2, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <UART_SetConfig+0x118>)
 8003802:	fba3 0302 	umull	r0, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2064      	movs	r0, #100	; 0x64
 800380a:	fb00 f303 	mul.w	r3, r0, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	3332      	adds	r3, #50	; 0x32
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <UART_SetConfig+0x118>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	440a      	add	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40013800 	.word	0x40013800
 8003834:	51eb851f 	.word	0x51eb851f

08003838 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
    /* Use default Analog configuration settings in Flash by default. */

/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <rfalAnalogConfigInitialize+0x20>)
 800383e:	4a07      	ldr	r2, [pc, #28]	; (800385c <rfalAnalogConfigInitialize+0x24>)
 8003840:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <rfalAnalogConfigInitialize+0x28>)
 8003844:	881a      	ldrh	r2, [r3, #0]
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <rfalAnalogConfigInitialize+0x20>)
 8003848:	809a      	strh	r2, [r3, #4]
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800384a:	4b03      	ldr	r3, [pc, #12]	; (8003858 <rfalAnalogConfigInitialize+0x20>)
 800384c:	2201      	movs	r2, #1
 800384e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	200009dc 	.word	0x200009dc
 800385c:	08013570 	.word	0x08013570
 8003860:	08013808 	.word	0x08013808

08003864 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    const rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 8003876:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <rfalSetAnalogConfig+0x140>)
 8003878:	799b      	ldrb	r3, [r3, #6]
 800387a:	f083 0301 	eor.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 8003884:	2305      	movs	r3, #5
 8003886:	e089      	b.n	800399c <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 8003888:	f107 020e 	add.w	r2, r7, #14
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f889 	bl	80039a8 <rfalAnalogConfigSearch>
 8003896:	4603      	mov	r3, r0
 8003898:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800389a:	7d3b      	ldrb	r3, [r7, #20]
 800389c:	2bff      	cmp	r3, #255	; 0xff
 800389e:	d07b      	beq.n	8003998 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 80038a0:	4b40      	ldr	r3, [pc, #256]	; (80039a4 <rfalSetAnalogConfig+0x140>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	89fb      	ldrh	r3, [r7, #14]
 80038a8:	4413      	add	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 80038ac:	7d3b      	ldrb	r3, [r7, #20]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	89fb      	ldrh	r3, [r7, #14]
 80038b6:	4413      	add	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <rfalSetAnalogConfig+0x140>)
 80038be:	889b      	ldrh	r3, [r3, #4]
 80038c0:	3301      	adds	r3, #1
 80038c2:	89fa      	ldrh	r2, [r7, #14]
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d201      	bcs.n	80038cc <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e067      	b.n	800399c <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	757b      	strb	r3, [r7, #21]
 80038d0:	e05d      	b.n	800398e <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80038d2:	7d7b      	ldrb	r3, [r7, #21]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	7d7a      	ldrb	r2, [r7, #21]
 80038e0:	0092      	lsls	r2, r2, #2
 80038e2:	6939      	ldr	r1, [r7, #16]
 80038e4:	440a      	add	r2, r1
 80038e6:	7852      	ldrb	r2, [r2, #1]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d026      	beq.n	8003940 <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80038f2:	7d7b      	ldrb	r3, [r7, #21]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	b21a      	sxth	r2, r3
 8003900:	7d7b      	ldrb	r3, [r7, #21]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	6939      	ldr	r1, [r7, #16]
 8003906:	440b      	add	r3, r1
 8003908:	785b      	ldrb	r3, [r3, #1]
 800390a:	b21b      	sxth	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b21b      	sxth	r3, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003916:	b298      	uxth	r0, r3
 8003918:	7d7b      	ldrb	r3, [r7, #21]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	7899      	ldrb	r1, [r3, #2]
 8003922:	7d7b      	ldrb	r3, [r7, #21]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	78db      	ldrb	r3, [r3, #3]
 800392c:	461a      	mov	r2, r3
 800392e:	f00c ff8d 	bl	801084c <rfalChipChangeTestRegBits>
 8003932:	4603      	mov	r3, r0
 8003934:	82fb      	strh	r3, [r7, #22]
 8003936:	8afb      	ldrh	r3, [r7, #22]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d025      	beq.n	8003988 <rfalSetAnalogConfig+0x124>
 800393c:	8afb      	ldrh	r3, [r7, #22]
 800393e:	e02d      	b.n	800399c <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 8003940:	7d7b      	ldrb	r3, [r7, #21]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	b21a      	sxth	r2, r3
 800394e:	7d7b      	ldrb	r3, [r7, #21]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	6939      	ldr	r1, [r7, #16]
 8003954:	440b      	add	r3, r1
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	b21b      	sxth	r3, r3
 800395a:	4313      	orrs	r3, r2
 800395c:	b21b      	sxth	r3, r3
 800395e:	b298      	uxth	r0, r3
 8003960:	7d7b      	ldrb	r3, [r7, #21]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	7899      	ldrb	r1, [r3, #2]
 800396a:	7d7b      	ldrb	r3, [r7, #21]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	78db      	ldrb	r3, [r3, #3]
 8003974:	461a      	mov	r2, r3
 8003976:	f00c ff47 	bl	8010808 <rfalChipChangeRegBits>
 800397a:	4603      	mov	r3, r0
 800397c:	82fb      	strh	r3, [r7, #22]
 800397e:	8afb      	ldrh	r3, [r7, #22]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <rfalSetAnalogConfig+0x124>
 8003984:	8afb      	ldrh	r3, [r7, #22]
 8003986:	e009      	b.n	800399c <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 8003988:	7d7b      	ldrb	r3, [r7, #21]
 800398a:	3301      	adds	r3, #1
 800398c:	757b      	strb	r3, [r7, #21]
 800398e:	7d7a      	ldrb	r2, [r7, #21]
 8003990:	7d3b      	ldrb	r3, [r7, #20]
 8003992:	429a      	cmp	r2, r3
 8003994:	d39d      	bcc.n	80038d2 <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 8003996:	e777      	b.n	8003888 <rfalSetAnalogConfig+0x24>
            break;
 8003998:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 800399a:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200009dc 	.word	0x200009dc

080039a8 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 80039b4:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <rfalAnalogConfigSearch+0xd4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	613b      	str	r3, [r7, #16]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80039c0:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <rfalAnalogConfigSearch+0x34>
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80039d8:	b29a      	uxth	r2, r3
 80039da:	e001      	b.n	80039e0 <rfalAnalogConfigSearch+0x38>
 80039dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <rfalAnalogConfigSearch+0x48>
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	e000      	b.n	80039f2 <rfalAnalogConfigSearch+0x4a>
 80039f0:	230f      	movs	r3, #15
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 80039f2:	4313      	orrs	r3, r2
 80039f4:	82fb      	strh	r3, [r7, #22]
                       );
    
    
    /* When specific ConfigIDs are to be used, override search mask */
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d102      	bne.n	8003a08 <rfalAnalogConfigSearch+0x60>
    {
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 8003a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a06:	82fb      	strh	r3, [r7, #22]
    }
    
    
    i = *configOffset;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8003a0e:	e029      	b.n	8003a64 <rfalAnalogConfigSearch+0xbc>
    {
        configTbl = &currentConfigTbl[i];
 8003a10:	8abb      	ldrh	r3, [r7, #20]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
        foundConfigId = GETU16(configTbl);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	b21a      	sxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	817b      	strh	r3, [r7, #10]
        if (configId == (foundConfigId & configIdMaskVal))
 8003a2e:	897a      	ldrh	r2, [r7, #10]
 8003a30:	8afb      	ldrh	r3, [r7, #22]
 8003a32:	4013      	ands	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d108      	bne.n	8003a4e <rfalAnalogConfigSearch+0xa6>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 8003a3c:	8abb      	ldrh	r3, [r7, #20]
 8003a3e:	3303      	adds	r3, #3
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	e010      	b.n	8003a70 <rfalAnalogConfigSearch+0xc8>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3302      	adds	r3, #2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 8003a5a:	8abb      	ldrh	r3, [r7, #20]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3303      	adds	r3, #3
 8003a62:	82bb      	strh	r3, [r7, #20]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <rfalAnalogConfigSearch+0xd4>)
 8003a66:	889b      	ldrh	r3, [r3, #4]
 8003a68:	8aba      	ldrh	r2, [r7, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3d0      	bcc.n	8003a10 <rfalAnalogConfigSearch+0x68>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 8003a6e:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 8003a70:	4618      	mov	r0, r3
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	200009dc 	.word	0x200009dc

08003a80 <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	80fb      	strh	r3, [r7, #6]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	81bb      	strh	r3, [r7, #12]
 8003a98:	e00d      	b.n	8003ab6 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 8003a9a:	89bb      	ldrh	r3, [r7, #12]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	89fb      	ldrh	r3, [r7, #14]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f80e 	bl	8003ac8 <rfalCrcUpdateCcitt>
 8003aac:	4603      	mov	r3, r0
 8003aae:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 8003ab0:	89bb      	ldrh	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	81bb      	strh	r3, [r7, #12]
 8003ab6:	89ba      	ldrh	r2, [r7, #12]
 8003ab8:	88bb      	ldrh	r3, [r7, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3ed      	bcc.n	8003a9a <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 8003abe:	89fb      	ldrh	r3, [r7, #14]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460a      	mov	r2, r1
 8003ad2:	80fb      	strh	r3, [r7, #6]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 8003adc:	797b      	ldrb	r3, [r7, #5]
 8003ade:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	7b7b      	ldrb	r3, [r7, #13]
 8003ae6:	4053      	eors	r3, r2
 8003ae8:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 8003aea:	7b7b      	ldrb	r3, [r7, #13]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	b25a      	sxtb	r2, r3
 8003af0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003af4:	4053      	eors	r3, r2
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 8003afa:	89fb      	ldrh	r3, [r7, #14]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	b21a      	sxth	r2, r3
 8003b02:	7b7b      	ldrb	r3, [r7, #13]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	b21b      	sxth	r3, r3
 8003b08:	4053      	eors	r3, r2
 8003b0a:	b21a      	sxth	r2, r3
 8003b0c:	7b7b      	ldrb	r3, [r7, #13]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	b21b      	sxth	r3, r3
 8003b12:	4053      	eors	r3, r2
 8003b14:	b21a      	sxth	r2, r3
 8003b16:	7b7b      	ldrb	r3, [r7, #13]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	4053      	eors	r3, r2
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	81fb      	strh	r3, [r7, #14]

    return crc;
 8003b24:	89fb      	ldrh	r3, [r7, #14]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	480d      	ldr	r0, [pc, #52]	; (8003b74 <iso15693PhyConfigure+0x44>)
 8003b40:	f00e faec 	bl	801211c <memcpy>
    
    if ( config->speedMode <= 3U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d808      	bhi.n	8003b5e <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f1c3 0303 	rsb	r3, r3, #3
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <iso15693PhyConfigure+0x48>)
 8003b5a:	70da      	strb	r2, [r3, #3]
 8003b5c:	e002      	b.n	8003b64 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <iso15693PhyConfigure+0x48>)
 8003b60:	2203      	movs	r2, #3
 8003b62:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <iso15693PhyConfigure+0x48>)
 8003b68:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200009e4 	.word	0x200009e4
 8003b78:	20000084 	.word	0x20000084

08003b7c <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b08b      	sub	sp, #44	; 0x2c
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	807b      	strh	r3, [r7, #2]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	707b      	strb	r3, [r7, #1]
 8003b92:	4613      	mov	r3, r2
 8003b94:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 8003b9e:	787b      	ldrb	r3, [r7, #1]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <iso15693VCDCode+0x2c>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e000      	b.n	8003baa <iso15693VCDCode+0x2e>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	2200      	movs	r2, #0
 8003bb0:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 8003bb2:	4b94      	ldr	r3, [pc, #592]	; (8003e04 <iso15693VCDCode+0x288>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d117      	bne.n	8003bea <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 8003bba:	2321      	movs	r3, #33	; 0x21
 8003bbc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 8003bc6:	4b90      	ldr	r3, [pc, #576]	; (8003e08 <iso15693VCDCode+0x28c>)
 8003bc8:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	7d7b      	ldrb	r3, [r7, #21]
 8003bce:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8003bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bdc:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 8003bde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d823      	bhi.n	8003c2e <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e13a      	b.n	8003e60 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 8003bea:	2381      	movs	r3, #129	; 0x81
 8003bec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 8003bf6:	4b85      	ldr	r3, [pc, #532]	; (8003e0c <iso15693VCDCode+0x290>)
 8003bf8:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	7d7b      	ldrb	r3, [r7, #21]
 8003bfe:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3302      	adds	r3, #2
 8003c08:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0c:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 8003c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 8003c16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c1a:	2b3f      	cmp	r3, #63	; 0x3f
 8003c1c:	d807      	bhi.n	8003c2e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e11e      	b.n	8003e60 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 8003c22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d801      	bhi.n	8003c2e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e118      	b.n	8003e60 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 8003c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c36:	2201      	movs	r2, #1
 8003c38:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <iso15693VCDCode+0xfc>
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d117      	bne.n	8003c78 <iso15693VCDCode+0xfc>
 8003c48:	783b      	ldrb	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d014      	beq.n	8003c78 <iso15693VCDCode+0xfc>
 8003c4e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003c52:	f083 0301 	eor.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 8003c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7a:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 8003c7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c80:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d03b      	beq.n	8003d00 <iso15693VCDCode+0x184>
 8003c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d137      	bne.n	8003d00 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c96:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8003c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca2:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8003ca4:	8afb      	ldrh	r3, [r7, #22]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3301      	adds	r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 8003cb0:	e026      	b.n	8003d00 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 8003cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4413      	add	r3, r2
 8003cbc:	7818      	ldrb	r0, [r3, #0]
 8003cbe:	f107 030e 	add.w	r3, r7, #14
 8003cc2:	8afa      	ldrh	r2, [r7, #22]
 8003cc4:	69fc      	ldr	r4, [r7, #28]
 8003cc6:	69b9      	ldr	r1, [r7, #24]
 8003cc8:	47a0      	blx	r4
 8003cca:	4603      	mov	r3, r0
 8003ccc:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	89fb      	ldrh	r3, [r7, #14]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	8afa      	ldrh	r2, [r7, #22]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8003cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <iso15693VCDCode+0x184>
            (*offset)++;
 8003cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfe:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 8003d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	887a      	ldrh	r2, [r7, #2]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d902      	bls.n	8003d10 <iso15693VCDCode+0x194>
 8003d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0d0      	beq.n	8003cb2 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 8003d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d063      	beq.n	8003dde <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 8003d16:	230d      	movs	r3, #13
 8003d18:	e0a2      	b.n	8003e60 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 8003d1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d12b      	bne.n	8003d78 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8003d20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <iso15693VCDCode+0x1b2>
 8003d28:	f24e 0012 	movw	r0, #57362	; 0xe012
 8003d2c:	e001      	b.n	8003d32 <iso15693VCDCode+0x1b6>
 8003d2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003d32:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <iso15693VCDCode+0x1c4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	e000      	b.n	8003d42 <iso15693VCDCode+0x1c6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	d003      	beq.n	8003d52 <iso15693VCDCode+0x1d6>
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	3a01      	subs	r2, #1
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	e000      	b.n	8003d54 <iso15693VCDCode+0x1d8>
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	4619      	mov	r1, r3
 8003d56:	f7ff fe93 	bl	8003a80 <rfalCrcCalculateCcitt>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8003d5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <iso15693VCDCode+0x1f8>
 8003d6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	e000      	b.n	8003d76 <iso15693VCDCode+0x1fa>
 8003d74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d76:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 8003d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 8003d7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8003d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	887b      	ldrh	r3, [r7, #2]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d96:	4413      	add	r3, r2
 8003d98:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	8afa      	ldrh	r2, [r7, #22]
 8003da2:	69fc      	ldr	r4, [r7, #28]
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	47a0      	blx	r4
 8003da8:	4603      	mov	r3, r0
 8003daa:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 8003dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dae:	881a      	ldrh	r2, [r3, #0]
 8003db0:	89bb      	ldrh	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db8:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8003dba:	89bb      	ldrh	r3, [r7, #12]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8003dc4:	89bb      	ldrh	r3, [r7, #12]
 8003dc6:	8afa      	ldrh	r2, [r7, #22]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 8003dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <iso15693VCDCode+0x262>
            (*offset)++;
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ddc:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8003dde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <iso15693VCDCode+0x27c>
 8003de4:	787b      	ldrb	r3, [r7, #1]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d006      	beq.n	8003df8 <iso15693VCDCode+0x27c>
 8003dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	3302      	adds	r3, #2
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d390      	bcc.n	8003d1a <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 8003df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 8003dfe:	230d      	movs	r3, #13
 8003e00:	e02e      	b.n	8003e60 <iso15693VCDCode+0x2e4>
 8003e02:	bf00      	nop
 8003e04:	200009e4 	.word	0x200009e4
 8003e08:	080040a5 	.word	0x080040a5
 8003e0c:	0800414d 	.word	0x0800414d
    }

    if ((!sendCrc && (*offset == length))
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	f083 0301 	eor.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <iso15693VCDCode+0x2aa>
 8003e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	887a      	ldrh	r2, [r7, #2]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d009      	beq.n	8003e3a <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 8003e26:	787b      	ldrb	r3, [r7, #1]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d018      	beq.n	8003e5e <iso15693VCDCode+0x2e2>
 8003e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	3302      	adds	r3, #2
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d111      	bne.n	8003e5e <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003e40:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8003e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4c:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 8003e4e:	8afb      	ldrh	r3, [r7, #22]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	3301      	adds	r3, #1
 8003e58:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 8003e5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e5c:	e000      	b.n	8003e60 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 8003e5e:	230d      	movs	r3, #13
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	372c      	adds	r7, #44	; 0x2c
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd90      	pop	{r4, r7, pc}

08003e68 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	461a      	mov	r2, r3
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2200      	movs	r2, #0
 8003e84:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2b17      	cmp	r3, #23
 8003e96:	d001      	beq.n	8003e9c <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 8003e98:	2309      	movs	r3, #9
 8003e9a:	e0ff      	b.n	800409c <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 8003e9c:	893b      	ldrh	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e0fa      	b.n	800409c <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 8003ea6:	2305      	movs	r3, #5
 8003ea8:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 8003eae:	893b      	ldrh	r3, [r7, #8]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f00e f959 	bl	801216c <memset>

    if (inBufLen == 0U)
 8003eba:	897b      	ldrh	r3, [r7, #10]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 808e 	bne.w	8003fde <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 8003ec2:	2315      	movs	r3, #21
 8003ec4:	e0ea      	b.n	800409c <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 8003eca:	8bbb      	ldrh	r3, [r7, #28]
 8003ecc:	08db      	lsrs	r3, r3, #3
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	8bbb      	ldrh	r3, [r7, #28]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	fa42 f303 	asr.w	r3, r2, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8003eec:	8bbb      	ldrh	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	08db      	lsrs	r3, r3, #3
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	8bbb      	ldrh	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	fa42 f303 	asr.w	r3, r2, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	7e3b      	ldrb	r3, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 8003f18:	7e3b      	ldrb	r3, [r7, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <iso15693VICCDecode+0xbc>
        {
            bp++;
 8003f1e:	8b7b      	ldrh	r3, [r7, #26]
 8003f20:	3301      	adds	r3, #1
 8003f22:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 8003f24:	7e3b      	ldrb	r3, [r7, #24]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d119      	bne.n	8003f5e <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	7819      	ldrb	r1, [r3, #0]
 8003f38:	8b7b      	ldrh	r3, [r7, #26]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	2201      	movs	r2, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	8b7b      	ldrh	r3, [r7, #26]
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4403      	add	r3, r0
 8003f52:	430a      	orrs	r2, r1
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
            bp++;
 8003f58:	8b7b      	ldrh	r3, [r7, #26]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 8003f5e:	8b7b      	ldrh	r3, [r7, #26]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d115      	bne.n	8003f96 <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 8003f6a:	8bbb      	ldrh	r3, [r7, #28]
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003f7c:	2ba0      	cmp	r3, #160	; 0xa0
 8003f7e:	d10a      	bne.n	8003f96 <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 8003f80:	8bbb      	ldrh	r3, [r7, #28]
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d101      	bne.n	8003f96 <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 8003f92:	2301      	movs	r3, #1
 8003f94:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 8003f96:	7e3b      	ldrb	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <iso15693VICCDecode+0x13a>
 8003f9c:	7e3b      	ldrb	r3, [r7, #24]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d10f      	bne.n	8003fc2 <iso15693VICCDecode+0x15a>
 8003fa2:	7e7b      	ldrb	r3, [r7, #25]
 8003fa4:	f083 0301 	eor.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 8003fae:	8b7a      	ldrh	r2, [r7, #26]
 8003fb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 8003fb6:	231d      	movs	r3, #29
 8003fb8:	83fb      	strh	r3, [r7, #30]
 8003fba:	e002      	b.n	8003fc2 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 8003fbc:	8b7b      	ldrh	r3, [r7, #26]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 8003fc2:	8b7a      	ldrh	r2, [r7, #26]
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d20f      	bcs.n	8003fec <iso15693VICCDecode+0x184>
 8003fcc:	8bfb      	ldrh	r3, [r7, #30]
 8003fce:	2b1d      	cmp	r3, #29
 8003fd0:	d00c      	beq.n	8003fec <iso15693VICCDecode+0x184>
 8003fd2:	7e7b      	ldrb	r3, [r7, #25]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8003fd8:	8bbb      	ldrh	r3, [r7, #28]
 8003fda:	3302      	adds	r3, #2
 8003fdc:	83bb      	strh	r3, [r7, #28]
 8003fde:	8bba      	ldrh	r2, [r7, #28]
 8003fe0:	897b      	ldrh	r3, [r7, #10]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	3b02      	subs	r3, #2
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	f4ff af6d 	bcc.w	8003ec6 <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 8003fec:	8b7b      	ldrh	r3, [r7, #26]
 8003fee:	08db      	lsrs	r3, r3, #3
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	8b7a      	ldrh	r2, [r7, #26]
 8003ffa:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 8003ffc:	8bfb      	ldrh	r3, [r7, #30]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <iso15693VICCDecode+0x19e>
    {
        return err;
 8004002:	8bfb      	ldrh	r3, [r7, #30]
 8004004:	e04a      	b.n	800409c <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 8004006:	8b7b      	ldrh	r3, [r7, #26]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 8004012:	2315      	movs	r3, #21
 8004014:	e042      	b.n	800409c <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d93b      	bls.n	8004096 <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800401e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <iso15693VICCDecode+0x1c4>
 8004026:	f24e 0012 	movw	r0, #57362	; 0xe012
 800402a:	e001      	b.n	8004030 <iso15693VICCDecode+0x1c8>
 800402c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	3b02      	subs	r3, #2
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	f7ff fd20 	bl	8003a80 <rfalCrcCalculateCcitt>
 8004040:	4603      	mov	r3, r0
 8004042:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8004044:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <iso15693VICCDecode+0x1f2>
 8004052:	8afb      	ldrh	r3, [r7, #22]
 8004054:	43db      	mvns	r3, r3
 8004056:	b29b      	uxth	r3, r3
 8004058:	e000      	b.n	800405c <iso15693VICCDecode+0x1f4>
 800405a:	8afb      	ldrh	r3, [r7, #22]
 800405c:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800405e:	8afb      	ldrh	r3, [r7, #22]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004064:	8812      	ldrh	r2, [r2, #0]
 8004066:	3a02      	subs	r2, #2
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	440a      	add	r2, r1
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	4293      	cmp	r3, r2
 8004070:	d10e      	bne.n	8004090 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 8004072:	8afb      	ldrh	r3, [r7, #22]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	b29b      	uxth	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800407c:	8812      	ldrh	r2, [r2, #0]
 800407e:	3a01      	subs	r2, #1
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	440a      	add	r2, r1
 8004084:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 8004086:	4293      	cmp	r3, r2
 8004088:	d102      	bne.n	8004090 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 800408a:	2300      	movs	r3, #0
 800408c:	83fb      	strh	r3, [r7, #30]
 800408e:	e004      	b.n	800409a <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 8004090:	2315      	movs	r3, #21
 8004092:	83fb      	strh	r3, [r7, #30]
 8004094:	e001      	b.n	800409a <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 8004096:	2315      	movs	r3, #21
 8004098:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 800409a:	8bfb      	ldrh	r3, [r7, #30]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	4603      	mov	r3, r0
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	4613      	mov	r3, r2
 80040b4:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 80040c4:	89bb      	ldrh	r3, [r7, #12]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d801      	bhi.n	80040ce <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e038      	b.n	8004140 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	83bb      	strh	r3, [r7, #28]
 80040d6:	e02f      	b.n	8004138 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d81a      	bhi.n	8004118 <iso15693PhyVCDCode1Of4+0x74>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <iso15693PhyVCDCode1Of4+0x44>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004109 	.word	0x08004109
 80040f4:	08004111 	.word	0x08004111
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]
                break;
 80040fe:	e00c      	b.n	800411a <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2208      	movs	r2, #8
 8004104:	701a      	strb	r2, [r3, #0]
                break;
 8004106:	e008      	b.n	800411a <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2220      	movs	r2, #32
 800410c:	701a      	strb	r2, [r3, #0]
                break;
 800410e:	e004      	b.n	800411a <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	701a      	strb	r2, [r3, #0]
                break;
 8004116:	e000      	b.n	800411a <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 8004118:	bf00      	nop
        }
        outbuf++;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	3301      	adds	r3, #1
 800411e:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800412c:	7ffb      	ldrb	r3, [r7, #31]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8004132:	8bbb      	ldrh	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	83bb      	strh	r3, [r7, #28]
 8004138:	8bbb      	ldrh	r3, [r7, #28]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d9cc      	bls.n	80040d8 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800413e:	8afb      	ldrh	r3, [r7, #22]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3724      	adds	r7, #36	; 0x24
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop

0800414c <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	; 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	4603      	mov	r3, r0
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	4613      	mov	r3, r2
 800415c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800415e:	2300      	movs	r3, #0
 8004160:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 800416c:	89bb      	ldrh	r3, [r7, #12]
 800416e:	2b3f      	cmp	r3, #63	; 0x3f
 8004170:	d801      	bhi.n	8004176 <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 8004172:	2301      	movs	r3, #1
 8004174:	e039      	b.n	80041ea <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800417a:	2300      	movs	r3, #0
 800417c:	83bb      	strh	r3, [r7, #28]
 800417e:	e030      	b.n	80041e2 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 8004180:	7ffb      	ldrb	r3, [r7, #31]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d81a      	bhi.n	80041bc <iso15693PhyVCDCode1Of256+0x70>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <iso15693PhyVCDCode1Of256+0x40>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041a5 	.word	0x080041a5
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041b5 	.word	0x080041b5
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2202      	movs	r2, #2
 80041a0:	701a      	strb	r2, [r3, #0]
                break;
 80041a2:	e00f      	b.n	80041c4 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2208      	movs	r2, #8
 80041a8:	701a      	strb	r2, [r3, #0]
                break;
 80041aa:	e00b      	b.n	80041c4 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2220      	movs	r2, #32
 80041b0:	701a      	strb	r2, [r3, #0]
                break;
 80041b2:	e007      	b.n	80041c4 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	701a      	strb	r2, [r3, #0]
                break;
 80041ba:	e003      	b.n	80041c4 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
                break;               
 80041c2:	bf00      	nop
        }
        outbuf++;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	3301      	adds	r3, #1
 80041c8:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	3b04      	subs	r3, #4
 80041da:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 80041dc:	8bbb      	ldrh	r3, [r7, #28]
 80041de:	3301      	adds	r3, #1
 80041e0:	83bb      	strh	r3, [r7, #28]
 80041e2:	8bbb      	ldrh	r3, [r7, #28]
 80041e4:	2b3f      	cmp	r3, #63	; 0x3f
 80041e6:	d9cb      	bls.n	8004180 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 80041e8:	8afb      	ldrh	r3, [r7, #22]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys    = 0;
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <isoDepClearCounters+0x2c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys    = 0;
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <isoDepClearCounters+0x2c>)
 8004200:	2200      	movs	r2, #0
 8004202:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSDslRetrys = 0;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <isoDepClearCounters+0x2c>)
 8004206:	2200      	movs	r2, #0
 8004208:	71da      	strb	r2, [r3, #7]
    gIsoDep.cntSWtxRetrys = 0;
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <isoDepClearCounters+0x2c>)
 800420c:	2200      	movs	r2, #0
 800420e:	721a      	strb	r2, [r3, #8]
    gIsoDep.cntSWtxNack   = 0;
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <isoDepClearCounters+0x2c>)
 8004212:	2200      	movs	r2, #0
 8004214:	725a      	strb	r2, [r3, #9]
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	200009ec 	.word	0x200009ec

08004224 <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	4613      	mov	r3, r2
 8004236:	81bb      	strh	r3, [r7, #12]
    uint16_t   txBufLen;
    uint8_t    computedPcb;
    rfalTransceiveContext    ctx;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 800423c:	4a4d      	ldr	r2, [pc, #308]	; (8004374 <isoDepTx+0x150>)
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    
    
    if ( infLen > 0U )
 8004244:	89bb      	ldrh	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	4a48      	ldr	r2, [pc, #288]	; (8004374 <isoDepTx+0x150>)
 8004252:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004256:	4293      	cmp	r3, r2
 8004258:	d201      	bcs.n	800425e <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 800425a:	2301      	movs	r3, #1
 800425c:	e086      	b.n	800436c <isoDepTx+0x148>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 8004264:	4b43      	ldr	r3, [pc, #268]	; (8004374 <isoDepTx+0x150>)
 8004266:	78db      	ldrb	r3, [r3, #3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d108      	bne.n	800427e <isoDepTx+0x5a>
 800426c:	4b41      	ldr	r3, [pc, #260]	; (8004374 <isoDepTx+0x150>)
 800426e:	78db      	ldrb	r3, [r3, #3]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <isoDepTx+0x66>
 8004274:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <isoDepTx+0x150>)
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <isoDepTx+0x66>
 800427e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004282:	f043 0308 	orr.w	r3, r3, #8
 8004286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 800428a:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <isoDepTx+0x150>)
 800428c:	791b      	ldrb	r3, [r3, #4]
 800428e:	2bff      	cmp	r3, #255	; 0xff
 8004290:	d005      	beq.n	800429e <isoDepTx+0x7a>
 8004292:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 800429e:	4b35      	ldr	r3, [pc, #212]	; (8004374 <isoDepTx+0x150>)
 80042a0:	7d9b      	ldrb	r3, [r3, #22]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <isoDepTx+0x9a>
 80042a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042aa:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d105      	bne.n	80042be <isoDepTx+0x9a>
 80042b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042b6:	f043 0310 	orr.w	r3, r3, #16
 80042ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <isoDepTx+0x150>)
 80042c0:	791b      	ldrb	r3, [r3, #4]
 80042c2:	2bff      	cmp	r3, #255	; 0xff
 80042c4:	d006      	beq.n	80042d4 <isoDepTx+0xb0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	3b01      	subs	r3, #1
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
 80042cc:	4b29      	ldr	r3, [pc, #164]	; (8004374 <isoDepTx+0x150>)
 80042ce:	791a      	ldrb	r2, [r3, #4]
 80042d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d2:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 80042d4:	4b27      	ldr	r3, [pc, #156]	; (8004374 <isoDepTx+0x150>)
 80042d6:	78db      	ldrb	r3, [r3, #3]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d108      	bne.n	80042ee <isoDepTx+0xca>
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <isoDepTx+0x150>)
 80042de:	78db      	ldrb	r3, [r3, #3]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <isoDepTx+0xd8>
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <isoDepTx+0x150>)
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <isoDepTx+0xd8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	3b01      	subs	r3, #1
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
 80042f4:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <isoDepTx+0x150>)
 80042f6:	78da      	ldrb	r2, [r3, #3]
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 80042fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fe:	3b01      	subs	r3, #1
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8004308:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	b29a      	uxth	r2, r3
 8004312:	89bb      	ldrh	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	863b      	strh	r3, [r7, #48]	; 0x30
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8004318:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <isoDepTx+0x150>)
 800431c:	8a9b      	ldrh	r3, [r3, #20]
 800431e:	3b02      	subs	r3, #2
 8004320:	429a      	cmp	r2, r3
 8004322:	d901      	bls.n	8004328 <isoDepTx+0x104>
    {
        return ERR_NOTSUPP;
 8004324:	2318      	movs	r3, #24
 8004326:	e021      	b.n	800436c <isoDepTx+0x148>
    }
        
    
    rfalCreateByteFlagsTxRxContext( ctx, txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	b29b      	uxth	r3, r3
 8004332:	833b      	strh	r3, [r7, #24]
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <isoDepTx+0x150>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <isoDepTx+0x150>)
 800433c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	b29b      	uxth	r3, r3
 8004342:	843b      	strh	r3, [r7, #32]
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <isoDepTx+0x150>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
 800434a:	2300      	movs	r3, #0
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <isoDepTx+0x150>)
 8004350:	785b      	ldrb	r3, [r3, #1]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <isoDepTx+0x136>
 8004356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004358:	e001      	b.n	800435e <isoDepTx+0x13a>
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return rfalStartTransceive( &ctx );
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4618      	mov	r0, r3
 8004366:	f009 fa35 	bl	800d7d4 <rfalStartTransceive>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3738      	adds	r7, #56	; 0x38
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200009ec 	.word	0x200009ec

08004378 <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af02      	add	r7, sp, #8
 800437e:	4603      	mov	r3, r0
 8004380:	460a      	mov	r2, r1
 8004382:	71fb      	strb	r3, [r7, #7]
 8004384:	4613      	mov	r3, r2
 8004386:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	73bb      	strb	r3, [r7, #14]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800438c:	4b59      	ldr	r3, [pc, #356]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4b58      	ldr	r3, [pc, #352]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	4413      	add	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
    ST_MEMSET( gIsoDep.ctrlBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8004398:	2204      	movs	r2, #4
 800439a:	2100      	movs	r1, #0
 800439c:	4856      	ldr	r0, [pc, #344]	; (80044f8 <isoDepHandleControlMsg+0x180>)
 800439e:	f00d fee5 	bl	801216c <memset>
    
    switch( controlMsg )
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	f200 8094 	bhi.w	80044d2 <isoDepHandleControlMsg+0x15a>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <isoDepHandleControlMsg+0x38>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043c1 	.word	0x080043c1
 80043b4:	080043ed 	.word	0x080043ed
 80043b8:	08004427 	.word	0x08004427
 80043bc:	0800449f 	.word	0x0800449f
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 80043c0:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80043c2:	799b      	ldrb	r3, [r3, #6]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	b2d1      	uxtb	r1, r2
 80043c8:	4a4a      	ldr	r2, [pc, #296]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80043ca:	7191      	strb	r1, [r2, #6]
 80043cc:	4a49      	ldr	r2, [pc, #292]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80043ce:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <isoDepHandleControlMsg+0x62>
            {
                return ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 80043d6:	2304      	movs	r3, #4
 80043d8:	e088      	b.n	80044ec <isoDepHandleControlMsg+0x174>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 80043da:	4b46      	ldr	r3, [pc, #280]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80043dc:	789b      	ldrb	r3, [r3, #2]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f063 035d 	orn	r3, r3, #93	; 0x5d
 80043e8:	73fb      	strb	r3, [r7, #15]
            break;
 80043ea:	e074      	b.n	80044d6 <isoDepHandleControlMsg+0x15e>
            
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 80043ec:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80043ee:	799b      	ldrb	r3, [r3, #6]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	b2d1      	uxtb	r1, r2
 80043f4:	4a3f      	ldr	r2, [pc, #252]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80043f6:	7191      	strb	r1, [r2, #6]
 80043f8:	4a3e      	ldr	r2, [pc, #248]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80043fa:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80043fe:	4293      	cmp	r3, r2
 8004400:	d806      	bhi.n	8004410 <isoDepHandleControlMsg+0x98>
                ( gIsoDep.cntSWtxNack  >= gIsoDep.maxRetriesSnWTX )   )     /* Max number PICC is allowed to respond with S(WTX) to R(NAK) */
 8004402:	4b3c      	ldr	r3, [pc, #240]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004404:	7a5a      	ldrb	r2, [r3, #9]
 8004406:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004408:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 800440c:	429a      	cmp	r2, r3
 800440e:	d301      	bcc.n	8004414 <isoDepHandleControlMsg+0x9c>
            {
                return ERR_TIMEOUT;
 8004410:	2304      	movs	r3, #4
 8004412:	e06b      	b.n	80044ec <isoDepHandleControlMsg+0x174>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );
 8004414:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004416:	789b      	ldrb	r3, [r3, #2]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f063 034d 	orn	r3, r3, #77	; 0x4d
 8004422:	73fb      	strb	r3, [r7, #15]
            break;
 8004424:	e057      	b.n	80044d6 <isoDepHandleControlMsg+0x15e>
            
            
        /*******************************************************************************/
        case ISODEP_S_WTX:

            if( (gIsoDep.cntSWtxRetrys++ > gIsoDep.maxRetriesSWTX) && (gIsoDep.maxRetriesSWTX != RFAL_ISODEP_MAX_WTX_RETRYS_ULTD) )
 8004426:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004428:	7a1b      	ldrb	r3, [r3, #8]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	b2d1      	uxtb	r1, r2
 800442e:	4a31      	ldr	r2, [pc, #196]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004430:	7211      	strb	r1, [r2, #8]
 8004432:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004434:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8004438:	4293      	cmp	r3, r2
 800443a:	d906      	bls.n	800444a <isoDepHandleControlMsg+0xd2>
 800443c:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 800443e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004442:	2bff      	cmp	r3, #255	; 0xff
 8004444:	d001      	beq.n	800444a <isoDepHandleControlMsg+0xd2>
            {
                return ERR_PROTO;
 8004446:	230b      	movs	r3, #11
 8004448:	e050      	b.n	80044ec <isoDepHandleControlMsg+0x174>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 800444a:	79bb      	ldrb	r3, [r7, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <isoDepHandleControlMsg+0xde>
 8004450:	79bb      	ldrb	r3, [r7, #6]
 8004452:	2b3b      	cmp	r3, #59	; 0x3b
 8004454:	d901      	bls.n	800445a <isoDepHandleControlMsg+0xe2>
            {
                return ERR_PROTO;
 8004456:	230b      	movs	r3, #11
 8004458:	e048      	b.n	80044ec <isoDepHandleControlMsg+0x174>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d111      	bne.n	8004486 <isoDepHandleControlMsg+0x10e>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 8004462:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	79ba      	ldrb	r2, [r7, #6]
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	60bb      	str	r3, [r7, #8]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004474:	bf28      	it	cs
 8004476:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 800447a:	60bb      	str	r3, [r7, #8]
                fwtTemp += gIsoDep.dFwt;
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4413      	add	r3, r2
 8004484:	60bb      	str	r3, [r7, #8]
            }
            
            pcb = ISODEP_PCB_SWTX;
 8004486:	23f2      	movs	r3, #242	; 0xf2
 8004488:	73fb      	strb	r3, [r7, #15]
            gIsoDep.ctrlBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 800448a:	7bbb      	ldrb	r3, [r7, #14]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	73ba      	strb	r2, [r7, #14]
 8004490:	3302      	adds	r3, #2
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 8004494:	4413      	add	r3, r2
 8004496:	79ba      	ldrb	r2, [r7, #6]
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            break;
 800449c:	e01b      	b.n	80044d6 <isoDepHandleControlMsg+0x15e>
            
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            
            if( gIsoDep.cntSDslRetrys++ > gIsoDep.maxRetriesSDSL )
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80044a0:	79db      	ldrb	r3, [r3, #7]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	b2d1      	uxtb	r1, r2
 80044a6:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80044a8:	71d1      	strb	r1, [r2, #7]
 80044aa:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80044ac:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <isoDepHandleControlMsg+0x140>
            {
                return ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 80044b4:	2304      	movs	r3, #4
 80044b6:	e019      	b.n	80044ec <isoDepHandleControlMsg+0x174>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <isoDepHandleControlMsg+0x154>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 80044c0:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 80044c4:	60bb      	str	r3, [r7, #8]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <isoDepHandleControlMsg+0x17c>)
 80044c8:	2203      	movs	r2, #3
 80044ca:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 80044cc:	23c2      	movs	r3, #194	; 0xc2
 80044ce:	73fb      	strb	r3, [r7, #15]
            break;
 80044d0:	e001      	b.n	80044d6 <isoDepHandleControlMsg+0x15e>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 80044d2:	230c      	movs	r3, #12
 80044d4:	e00a      	b.n	80044ec <isoDepHandleControlMsg+0x174>
    }
    
    return isoDepTx( pcb, gIsoDep.ctrlBuf, &gIsoDep.ctrlBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	b29a      	uxth	r2, r3
 80044da:	7bf8      	ldrb	r0, [r7, #15]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	4a06      	ldr	r2, [pc, #24]	; (80044fc <isoDepHandleControlMsg+0x184>)
 80044e4:	4904      	ldr	r1, [pc, #16]	; (80044f8 <isoDepHandleControlMsg+0x180>)
 80044e6:	f7ff fe9d 	bl	8004224 <isoDepTx>
 80044ea:	4603      	mov	r3, r0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	200009ec 	.word	0x200009ec
 80044f8:	20000a32 	.word	0x20000a32
 80044fc:	20000a34 	.word	0x20000a34

08004500 <isoDepReSendControlMsg>:

#if RFAL_FEATURE_ISO_DEP_LISTEN
/*******************************************************************************/
static ReturnCode isoDepReSendControlMsg( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
    if( isoDep_PCBisRACK( gIsoDep.lastPCB ) )
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 8004506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800450a:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800450e:	2ba2      	cmp	r3, #162	; 0xa2
 8004510:	d10c      	bne.n	800452c <isoDepReSendControlMsg+0x2c>
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 8004514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <isoDepReSendControlMsg+0x2c>
    {
        return isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM );
 8004520:	2100      	movs	r1, #0
 8004522:	2000      	movs	r0, #0
 8004524:	f7ff ff28 	bl	8004378 <isoDepHandleControlMsg>
 8004528:	4603      	mov	r3, r0
 800452a:	e03f      	b.n	80045ac <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 800452e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004532:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8004536:	2ba2      	cmp	r3, #162	; 0xa2
 8004538:	d10c      	bne.n	8004554 <isoDepReSendControlMsg+0x54>
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 800453c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <isoDepReSendControlMsg+0x54>
    {
        return isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM );
 8004548:	2100      	movs	r1, #0
 800454a:	2001      	movs	r0, #1
 800454c:	f7ff ff14 	bl	8004378 <isoDepHandleControlMsg>
 8004550:	4603      	mov	r3, r0
 8004552:	e02b      	b.n	80045ac <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisSDeselect( gIsoDep.lastPCB ) )
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 8004556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800455a:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800455e:	2bc2      	cmp	r3, #194	; 0xc2
 8004560:	d10c      	bne.n	800457c <isoDepReSendControlMsg+0x7c>
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 8004564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004568:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <isoDepReSendControlMsg+0x7c>
    {
        return isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 8004570:	2100      	movs	r1, #0
 8004572:	2003      	movs	r0, #3
 8004574:	f7ff ff00 	bl	8004378 <isoDepHandleControlMsg>
 8004578:	4603      	mov	r3, r0
 800457a:	e017      	b.n	80045ac <isoDepReSendControlMsg+0xac>
    }
    
    if( isoDep_PCBisSWTX( gIsoDep.lastPCB ) )
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 800457e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004582:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8004586:	2bc2      	cmp	r3, #194	; 0xc2
 8004588:	d10f      	bne.n	80045aa <isoDepReSendControlMsg+0xaa>
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 800458c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004590:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	d108      	bne.n	80045aa <isoDepReSendControlMsg+0xaa>
    {
        return isoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM );
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <isoDepReSendControlMsg+0xb0>)
 800459a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800459e:	4619      	mov	r1, r3
 80045a0:	2002      	movs	r0, #2
 80045a2:	f7ff fee9 	bl	8004378 <isoDepHandleControlMsg>
 80045a6:	4603      	mov	r3, r0
 80045a8:	e000      	b.n	80045ac <isoDepReSendControlMsg+0xac>
    }
    return ERR_WRONG_STATE; 
 80045aa:	2321      	movs	r3, #33	; 0x21
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	200009ec 	.word	0x200009ec

080045b4 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 80045b8:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 80045be:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 80045ca:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045cc:	22ff      	movs	r2, #255	; 0xff
 80045ce:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 80045d0:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 80045d6:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045d8:	2200      	movs	r2, #0
 80045da:	759a      	strb	r2, [r3, #22]
    gIsoDep.isRxChaining = false;
 80045dc:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045de:	2200      	movs	r2, #0
 80045e0:	75da      	strb	r2, [r3, #23]
    gIsoDep.lastDID00    = false;
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 80045ea:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045ec:	2240      	movs	r2, #64	; 0x40
 80045ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 80045f2:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045f4:	2210      	movs	r2, #16
 80045f6:	829a      	strh	r2, [r3, #20]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 80045fa:	2210      	movs	r2, #16
 80045fc:	84da      	strh	r2, [r3, #38]	; 0x26
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004600:	2201      	movs	r2, #1
 8004602:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    
    gIsoDep.rxLen        = NULL;
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
    gIsoDep.rxBuf        = NULL;
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800460e:	2200      	movs	r2, #0
 8004610:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufInfPos  = 0U;
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.txBufInfPos  = 0U;
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    gIsoDep.isTxPending  = false;
 8004622:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    gIsoDep.isWait4WTX   = false;
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    gIsoDep.compMode         = RFAL_COMPLIANCE_MODE_NFC;
 8004632:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    gIsoDep.maxRetriesR      = RFAL_ISODEP_MAX_R_RETRYS;
 800463a:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800463c:	2203      	movs	r2, #3
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesI      = RFAL_ISODEP_MAX_I_RETRYS;
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004644:	2202      	movs	r2, #2
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    gIsoDep.maxRetriesSDSL   = RFAL_ISODEP_MAX_DSL_RETRYS;
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesSWTX   = RFAL_ISODEP_MAX_WTX_RETRYS;
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004654:	2214      	movs	r2, #20
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesSnWTX  = RFAL_ISODEP_MAX_WTX_NACK_RETRYS;
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800465c:	2203      	movs	r2, #3
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gIsoDep.maxRetriesRATS   = RFAL_ISODEP_RATS_RETRIES;
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    gIsoDep.APDURxPos       = 0;
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800466c:	2200      	movs	r2, #0
 800466e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    gIsoDep.APDUTxPos       = 0;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004674:	2200      	movs	r2, #0
 8004676:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    gIsoDep.APDUParam.rxLen = NULL;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800467c:	2200      	movs	r2, #0
 800467e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    gIsoDep.APDUParam.rxBuf = NULL;
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004684:	2200      	movs	r2, #0
 8004686:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    gIsoDep.APDUParam.txBuf = NULL;
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 800468c:	2200      	movs	r2, #0
 800468e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    
    isoDepClearCounters();
 8004692:	f7ff fdaf 	bl	80041f4 <isoDepClearCounters>
    
    /* Destroy any ongoing WTX timer */
    isoDepTimerDestroy( gIsoDep.WTXTimer );
    gIsoDep.WTXTimer = 0U;
 8004696:	4b02      	ldr	r3, [pc, #8]	; (80046a0 <rfalIsoDepInitialize+0xec>)
 8004698:	2200      	movs	r2, #0
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200009ec 	.word	0x200009ec

080046a4 <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 80046a4:	b5b0      	push	{r4, r5, r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <isoDepDataExchangePCD+0x16>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 80046ba:	2307      	movs	r3, #7
 80046bc:	e296      	b.n	8004bec <isoDepDataExchangePCD+0x548>
    }    
    
    *outIsChaining = false;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 80046c4:	4baa      	ldr	r3, [pc, #680]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 80046cc:	4ba8      	ldr	r3, [pc, #672]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046ce:	78db      	ldrb	r3, [r3, #3]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <isoDepDataExchangePCD+0x40>
 80046d4:	4ba6      	ldr	r3, [pc, #664]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046d6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80046da:	3301      	adds	r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4ba4      	ldr	r3, [pc, #656]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 80046e4:	4ba2      	ldr	r3, [pc, #648]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046e6:	791b      	ldrb	r3, [r3, #4]
 80046e8:	2bff      	cmp	r3, #255	; 0xff
 80046ea:	d007      	beq.n	80046fc <isoDepDataExchangePCD+0x58>
 80046ec:	4ba0      	ldr	r3, [pc, #640]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80046f2:	3301      	adds	r3, #1
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4b9e      	ldr	r3, [pc, #632]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    
    /* Check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 80046fc:	4b9c      	ldr	r3, [pc, #624]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80046fe:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004702:	4b9b      	ldr	r3, [pc, #620]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004704:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004708:	429a      	cmp	r2, r3
 800470a:	d307      	bcc.n	800471c <isoDepDataExchangePCD+0x78>
 800470c:	4b98      	ldr	r3, [pc, #608]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 800470e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004712:	4b97      	ldr	r3, [pc, #604]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004714:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004718:	429a      	cmp	r2, r3
 800471a:	d201      	bcs.n	8004720 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 800471c:	2307      	movs	r3, #7
 800471e:	e265      	b.n	8004bec <isoDepDataExchangePCD+0x548>
    }
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 8004720:	4b93      	ldr	r3, [pc, #588]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b03      	cmp	r3, #3
 8004726:	f300 825f 	bgt.w	8004be8 <isoDepDataExchangePCD+0x544>
 800472a:	2b02      	cmp	r3, #2
 800472c:	da2d      	bge.n	800478a <isoDepDataExchangePCD+0xe6>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <isoDepDataExchangePCD+0x94>
 8004732:	2b01      	cmp	r3, #1
 8004734:	d002      	beq.n	800473c <isoDepDataExchangePCD+0x98>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 8004736:	e257      	b.n	8004be8 <isoDepDataExchangePCD+0x544>
            return ERR_NONE;
 8004738:	2300      	movs	r3, #0
 800473a:	e257      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 800473c:	4b8c      	ldr	r3, [pc, #560]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	b2d8      	uxtb	r0, r3
 800474c:	4b88      	ldr	r3, [pc, #544]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 800474e:	6999      	ldr	r1, [r3, #24]
 8004750:	4b87      	ldr	r3, [pc, #540]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	4a86      	ldr	r2, [pc, #536]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004756:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800475a:	189c      	adds	r4, r3, r2
 800475c:	4b84      	ldr	r3, [pc, #528]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 800475e:	8c1d      	ldrh	r5, [r3, #32]
 8004760:	4b83      	ldr	r3, [pc, #524]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b82      	ldr	r3, [pc, #520]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4413      	add	r3, r2
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	462b      	mov	r3, r5
 800476e:	4622      	mov	r2, r4
 8004770:	f7ff fd58 	bl	8004224 <isoDepTx>
 8004774:	4603      	mov	r3, r0
 8004776:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8004778:	89fb      	ldrh	r3, [r7, #14]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <isoDepDataExchangePCD+0xe2>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 800477e:	4b7c      	ldr	r3, [pc, #496]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004780:	2202      	movs	r2, #2
 8004782:	701a      	strb	r2, [r3, #0]
                  break;
 8004784:	e001      	b.n	800478a <isoDepDataExchangePCD+0xe6>
                  return ret;
 8004786:	89fb      	ldrh	r3, [r7, #14]
 8004788:	e230      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            ret = rfalGetTransceiveStatus();
 800478a:	f009 fa53 	bl	800dc34 <rfalGetTransceiveStatus>
 800478e:	4603      	mov	r3, r0
 8004790:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	2b28      	cmp	r3, #40	; 0x28
 8004796:	f200 8082 	bhi.w	800489e <isoDepDataExchangePCD+0x1fa>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <isoDepDataExchangePCD+0xfc>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080048a3 	.word	0x080048a3
 80047a4:	0800489f 	.word	0x0800489f
 80047a8:	0800489b 	.word	0x0800489b
 80047ac:	0800489f 	.word	0x0800489f
 80047b0:	08004845 	.word	0x08004845
 80047b4:	0800489f 	.word	0x0800489f
 80047b8:	0800489f 	.word	0x0800489f
 80047bc:	0800489f 	.word	0x0800489f
 80047c0:	0800489f 	.word	0x0800489f
 80047c4:	08004845 	.word	0x08004845
 80047c8:	0800489f 	.word	0x0800489f
 80047cc:	0800489f 	.word	0x0800489f
 80047d0:	0800489f 	.word	0x0800489f
 80047d4:	0800489f 	.word	0x0800489f
 80047d8:	0800489f 	.word	0x0800489f
 80047dc:	0800489f 	.word	0x0800489f
 80047e0:	0800489f 	.word	0x0800489f
 80047e4:	0800489f 	.word	0x0800489f
 80047e8:	0800489f 	.word	0x0800489f
 80047ec:	0800489f 	.word	0x0800489f
 80047f0:	0800489f 	.word	0x0800489f
 80047f4:	08004845 	.word	0x08004845
 80047f8:	0800489f 	.word	0x0800489f
 80047fc:	0800489f 	.word	0x0800489f
 8004800:	0800489f 	.word	0x0800489f
 8004804:	0800489f 	.word	0x0800489f
 8004808:	0800489f 	.word	0x0800489f
 800480c:	08004845 	.word	0x08004845
 8004810:	0800489f 	.word	0x0800489f
 8004814:	0800489f 	.word	0x0800489f
 8004818:	0800489f 	.word	0x0800489f
 800481c:	0800489f 	.word	0x0800489f
 8004820:	0800489f 	.word	0x0800489f
 8004824:	0800489f 	.word	0x0800489f
 8004828:	0800489f 	.word	0x0800489f
 800482c:	0800489f 	.word	0x0800489f
 8004830:	0800489f 	.word	0x0800489f
 8004834:	0800489f 	.word	0x0800489f
 8004838:	0800489f 	.word	0x0800489f
 800483c:	0800489f 	.word	0x0800489f
 8004840:	08004845 	.word	0x08004845
                    if( gIsoDep.isRxChaining )
 8004844:	4b4a      	ldr	r3, [pc, #296]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004846:	7ddb      	ldrb	r3, [r3, #23]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <isoDepDataExchangePCD+0x1be>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800484c:	2100      	movs	r1, #0
 800484e:	2000      	movs	r0, #0
 8004850:	f7ff fd92 	bl	8004378 <isoDepHandleControlMsg>
 8004854:	4603      	mov	r3, r0
 8004856:	81fb      	strh	r3, [r7, #14]
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01b      	beq.n	8004896 <isoDepDataExchangePCD+0x1f2>
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	e1c4      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d10a      	bne.n	8004880 <isoDepDataExchangePCD+0x1dc>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800486a:	2100      	movs	r1, #0
 800486c:	2003      	movs	r0, #3
 800486e:	f7ff fd83 	bl	8004378 <isoDepHandleControlMsg>
 8004872:	4603      	mov	r3, r0
 8004874:	81fb      	strh	r3, [r7, #14]
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <isoDepDataExchangePCD+0x1f2>
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	e1b5      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8004880:	2100      	movs	r1, #0
 8004882:	2001      	movs	r0, #1
 8004884:	f7ff fd78 	bl	8004378 <isoDepHandleControlMsg>
 8004888:	4603      	mov	r3, r0
 800488a:	81fb      	strh	r3, [r7, #14]
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <isoDepDataExchangePCD+0x1f2>
 8004892:	89fb      	ldrh	r3, [r7, #14]
 8004894:	e1aa      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	e1a8      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;  /* Debug purposes */
 800489a:	2302      	movs	r3, #2
 800489c:	e1a6      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    return ret;
 800489e:	89fb      	ldrh	r3, [r7, #14]
 80048a0:	e1a4      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    break;
 80048a2:	bf00      	nop
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	3307      	adds	r3, #7
 80048aa:	08db      	lsrs	r3, r3, #3
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	801a      	strh	r2, [r3, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80048b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80048bc:	b29b      	uxth	r3, r3
 80048be:	429a      	cmp	r2, r3
 80048c0:	d305      	bcc.n	80048ce <isoDepDataExchangePCD+0x22a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	881a      	ldrh	r2, [r3, #0]
 80048c6:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80048c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d301      	bcc.n	80048d2 <isoDepDataExchangePCD+0x22e>
                return ERR_PROTO;
 80048ce:	230b      	movs	r3, #11
 80048d0:	e18c      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 80048d2:	4b27      	ldr	r3, [pc, #156]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	737b      	strb	r3, [r7, #13]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 80048da:	4b25      	ldr	r3, [pc, #148]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80048dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d10b      	bne.n	80048fc <isoDepDataExchangePCD+0x258>
 80048e4:	7b7b      	ldrb	r3, [r7, #13]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <isoDepDataExchangePCD+0x254>
 80048ee:	7b7b      	ldrb	r3, [r7, #13]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <isoDepDataExchangePCD+0x258>
                return ERR_PROTO;
 80048f8:	230b      	movs	r3, #11
 80048fa:	e177      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 80048fc:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 80048fe:	78db      	ldrb	r3, [r3, #3]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00e      	beq.n	8004922 <isoDepDataExchangePCD+0x27e>
 8004904:	7b7b      	ldrb	r3, [r7, #13]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <isoDepDataExchangePCD+0x27a>
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004910:	78da      	ldrb	r2, [r3, #3]
 8004912:	4b17      	ldr	r3, [pc, #92]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	3301      	adds	r3, #1
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d001      	beq.n	8004922 <isoDepDataExchangePCD+0x27e>
                return ERR_PROTO;
 800491e:	230b      	movs	r3, #11
 8004920:	e164      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            if( isoDep_PCBisSBlock(rxPCB) )
 8004922:	7b7b      	ldrb	r3, [r7, #13]
 8004924:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8004928:	2bc2      	cmp	r3, #194	; 0xc2
 800492a:	d151      	bne.n	80049d0 <isoDepDataExchangePCD+0x32c>
                if( isoDep_PCBisSWTX(rxPCB) )
 800492c:	7b7b      	ldrb	r3, [r7, #13]
 800492e:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8004932:	2bc2      	cmp	r3, #194	; 0xc2
 8004934:	d138      	bne.n	80049a8 <isoDepDataExchangePCD+0x304>
 8004936:	7b7b      	ldrb	r3, [r7, #13]
 8004938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d133      	bne.n	80049a8 <isoDepDataExchangePCD+0x304>
                    if( isoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004946:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800494a:	2ba2      	cmp	r3, #162	; 0xa2
 800494c:	d112      	bne.n	8004974 <isoDepDataExchangePCD+0x2d0>
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <isoDepDataExchangePCD+0x2d0>
                        gIsoDep.cntSWtxNack++;        /* Count S(WTX) upon R(NAK) */
 800495c:	4b04      	ldr	r3, [pc, #16]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 800495e:	7a5b      	ldrb	r3, [r3, #9]
 8004960:	3301      	adds	r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	4b02      	ldr	r3, [pc, #8]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 8004966:	725a      	strb	r2, [r3, #9]
                        gIsoDep.cntRRetrys = 0;       /* Reset R-Block counter has PICC has responded */
 8004968:	4b01      	ldr	r3, [pc, #4]	; (8004970 <isoDepDataExchangePCD+0x2cc>)
 800496a:	2200      	movs	r2, #0
 800496c:	719a      	strb	r2, [r3, #6]
 800496e:	e004      	b.n	800497a <isoDepDataExchangePCD+0x2d6>
 8004970:	200009ec 	.word	0x200009ec
                        gIsoDep.cntSWtxNack = 0;       /* Reset R(NACK)->S(WTX) counter */
 8004974:	4b9f      	ldr	r3, [pc, #636]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004976:	2200      	movs	r2, #0
 8004978:	725a      	strb	r2, [r3, #9]
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 800497a:	4b9e      	ldr	r3, [pc, #632]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4a9d      	ldr	r2, [pc, #628]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004980:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004984:	4413      	add	r3, r2
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498c:	b2db      	uxtb	r3, r3
 800498e:	4619      	mov	r1, r3
 8004990:	2002      	movs	r0, #2
 8004992:	f7ff fcf1 	bl	8004378 <isoDepHandleControlMsg>
 8004996:	4603      	mov	r3, r0
 8004998:	81fb      	strh	r3, [r7, #14]
 800499a:	89fb      	ldrh	r3, [r7, #14]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <isoDepDataExchangePCD+0x300>
 80049a0:	89fb      	ldrh	r3, [r7, #14]
 80049a2:	e123      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 80049a4:	2302      	movs	r3, #2
 80049a6:	e121      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                if( isoDep_PCBisSDeselect(rxPCB) )
 80049a8:	7b7b      	ldrb	r3, [r7, #13]
 80049aa:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 80049ae:	2bc2      	cmp	r3, #194	; 0xc2
 80049b0:	d10c      	bne.n	80049cc <isoDepDataExchangePCD+0x328>
 80049b2:	7b7b      	ldrb	r3, [r7, #13]
 80049b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <isoDepDataExchangePCD+0x328>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 80049bc:	4b8d      	ldr	r3, [pc, #564]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d103      	bne.n	80049cc <isoDepDataExchangePCD+0x328>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 80049c4:	f7ff fdf6 	bl	80045b4 <rfalIsoDepInitialize>
                        return ERR_NONE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e10f      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                return ERR_PROTO;
 80049cc:	230b      	movs	r3, #11
 80049ce:	e10d      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            else if( isoDep_PCBisRBlock(rxPCB) )
 80049d0:	7b7b      	ldrb	r3, [r7, #13]
 80049d2:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 80049d6:	2ba2      	cmp	r3, #162	; 0xa2
 80049d8:	d141      	bne.n	8004a5e <isoDepDataExchangePCD+0x3ba>
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 80049da:	7b7b      	ldrb	r3, [r7, #13]
 80049dc:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 80049e0:	2ba2      	cmp	r3, #162	; 0xa2
 80049e2:	d13a      	bne.n	8004a5a <isoDepDataExchangePCD+0x3b6>
 80049e4:	7b7b      	ldrb	r3, [r7, #13]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d135      	bne.n	8004a5a <isoDepDataExchangePCD+0x3b6>
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 80049ee:	7b7b      	ldrb	r3, [r7, #13]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	4a7f      	ldr	r2, [pc, #508]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 80049f6:	7892      	ldrb	r2, [r2, #2]
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d119      	bne.n	8004a30 <isoDepDataExchangePCD+0x38c>
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 80049fc:	4b7d      	ldr	r3, [pc, #500]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 80049fe:	789b      	ldrb	r3, [r3, #2]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b78      	ldr	r3, [pc, #480]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a14:	709a      	strb	r2, [r3, #2]
                        if( !gIsoDep.isTxChaining )
 8004a16:	4b77      	ldr	r3, [pc, #476]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a18:	7d9b      	ldrb	r3, [r3, #22]
 8004a1a:	f083 0301 	eor.w	r3, r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <isoDepDataExchangePCD+0x384>
                            return ERR_PROTO;
 8004a24:	230b      	movs	r3, #11
 8004a26:	e0e1      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                        isoDepClearCounters();
 8004a28:	f7ff fbe4 	bl	80041f4 <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e0dd      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 8004a30:	4b70      	ldr	r3, [pc, #448]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a32:	795b      	ldrb	r3, [r3, #5]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	b2d1      	uxtb	r1, r2
 8004a38:	4a6e      	ldr	r2, [pc, #440]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a3a:	7151      	strb	r1, [r2, #5]
 8004a3c:	4a6d      	ldr	r2, [pc, #436]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a3e:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d207      	bcs.n	8004a56 <isoDepDataExchangePCD+0x3b2>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8004a46:	4b6b      	ldr	r3, [pc, #428]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8004a4c:	4b69      	ldr	r3, [pc, #420]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	e0ca      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                        return ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 8004a56:	2304      	movs	r3, #4
 8004a58:	e0c8      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    return ERR_PROTO;
 8004a5a:	230b      	movs	r3, #11
 8004a5c:	e0c6      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            else if( isoDep_PCBisIBlock(rxPCB) )
 8004a5e:	7b7b      	ldrb	r3, [r7, #13]
 8004a60:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	f040 80bd 	bne.w	8004be4 <isoDepDataExchangePCD+0x540>
                if( isoDep_PCBisChaining(rxPCB) )
 8004a6a:	7b7b      	ldrb	r3, [r7, #13]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05e      	beq.n	8004b32 <isoDepDataExchangePCD+0x48e>
                    gIsoDep.isRxChaining = true;
 8004a74:	4b5f      	ldr	r3, [pc, #380]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	75da      	strb	r2, [r3, #23]
                    *outIsChaining       = true;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8004a80:	7b7b      	ldrb	r3, [r7, #13]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	4a5b      	ldr	r2, [pc, #364]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a88:	7892      	ldrb	r2, [r2, #2]
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d144      	bne.n	8004b18 <isoDepDataExchangePCD+0x474>
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 8004a8e:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004a90:	789b      	ldrb	r3, [r3, #2]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b53      	ldr	r3, [pc, #332]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004aa6:	709a      	strb	r2, [r3, #2]
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 8004aa8:	f7ff fba4 	bl	80041f4 <isoDepClearCounters>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8004aac:	2100      	movs	r1, #0
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f7ff fc62 	bl	8004378 <isoDepHandleControlMsg>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	81fb      	strh	r3, [r7, #14]
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <isoDepDataExchangePCD+0x41e>
 8004abe:	89fb      	ldrh	r3, [r7, #14]
 8004ac0:	e094      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                        *outActRxLen -= gIsoDep.hdrLen;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004ac8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004ad8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004adc:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d014      	beq.n	8004b10 <isoDepDataExchangePCD+0x46c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <isoDepDataExchangePCD+0x46c>
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4a40      	ldr	r2, [pc, #256]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004af4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004af8:	1898      	adds	r0, r3, r2
 8004afa:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4a3d      	ldr	r2, [pc, #244]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b00:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004b04:	1899      	adds	r1, r3, r2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f00d fb14 	bl	8012138 <memmove>
                        isoDepClearCounters();
 8004b10:	f7ff fb70 	bl	80041f4 <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 8004b14:	230d      	movs	r3, #13
 8004b16:	e069      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 8004b18:	2100      	movs	r1, #0
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7ff fc2c 	bl	8004378 <isoDepHandleControlMsg>
 8004b20:	4603      	mov	r3, r0
 8004b22:	81fb      	strh	r3, [r7, #14]
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <isoDepDataExchangePCD+0x48a>
 8004b2a:	89fb      	ldrh	r3, [r7, #14]
 8004b2c:	e05e      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e05c      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 8004b32:	4b30      	ldr	r3, [pc, #192]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	75da      	strb	r2, [r3, #23]
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8004b38:	7b7b      	ldrb	r3, [r7, #13]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b40:	7892      	ldrb	r2, [r2, #2]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d13a      	bne.n	8004bbc <isoDepDataExchangePCD+0x518>
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 8004b46:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b48:	789b      	ldrb	r3, [r3, #2]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b5e:	709a      	strb	r2, [r3, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b66:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8004b74:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b76:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d014      	beq.n	8004bae <isoDepDataExchangePCD+0x50a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d010      	beq.n	8004bae <isoDepDataExchangePCD+0x50a>
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b92:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004b96:	1898      	adds	r0, r3, r2
 8004b98:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004b9e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8004ba2:	1899      	adds	r1, r3, r2
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f00d fac5 	bl	8012138 <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 8004bb4:	f7ff fb1e 	bl	80041f4 <isoDepClearCounters>
                    return ERR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e017      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <isoDepDataExchangePCD+0x550>)
 8004bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d001      	beq.n	8004bca <isoDepDataExchangePCD+0x526>
                        return ERR_PROTO;
 8004bc6:	230b      	movs	r3, #11
 8004bc8:	e010      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8004bca:	2100      	movs	r1, #0
 8004bcc:	2001      	movs	r0, #1
 8004bce:	f7ff fbd3 	bl	8004378 <isoDepHandleControlMsg>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	81fb      	strh	r3, [r7, #14]
 8004bd6:	89fb      	ldrh	r3, [r7, #14]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <isoDepDataExchangePCD+0x53c>
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	e005      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                    return ERR_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	e003      	b.n	8004bec <isoDepDataExchangePCD+0x548>
                return ERR_PROTO;
 8004be4:	230b      	movs	r3, #11
 8004be6:	e001      	b.n	8004bec <isoDepDataExchangePCD+0x548>
            break;
 8004be8:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 8004bea:	230c      	movs	r3, #12
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf4:	200009ec 	.word	0x200009ec

08004bf8 <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Using local static vars and static config to cope with a Deselect after     *
     * RATS\ATTRIB without any I-Block exchanged                                   */
    gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 8004bfe:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <rfalIsoDepDeselect+0x84>)
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <rfalIsoDepDeselect+0x88>)
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
    gIsoDep.rxBuf       = gIsoDep.ctrlBuf;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <rfalIsoDepDeselect+0x84>)
 8004c06:	4a1f      	ldr	r2, [pc, #124]	; (8004c84 <rfalIsoDepDeselect+0x8c>)
 8004c08:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN - (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <rfalIsoDepDeselect+0x84>)
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <rfalIsoDepDeselect+0x84>)
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8004c18:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <rfalIsoDepDeselect+0x84>)
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 8004c20:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004c24:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 8004c26:	2100      	movs	r1, #0
 8004c28:	2003      	movs	r0, #3
 8004c2a:	f7ff fba5 	bl	8004378 <isoDepHandleControlMsg>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	807b      	strh	r3, [r7, #2]
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <rfalIsoDepDeselect+0x44>
 8004c38:	887b      	ldrh	r3, [r7, #2]
 8004c3a:	e01a      	b.n	8004c72 <rfalIsoDepDeselect+0x7a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <rfalIsoDepDeselect+0x84>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	1c7a      	adds	r2, r7, #1
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fd2d 	bl	80046a4 <isoDepDataExchangePCD>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 8004c4e:	f009 f801 	bl	800dc54 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <rfalIsoDepDeselect+0x6a>
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d0ec      	beq.n	8004c3c <rfalIsoDepDeselect+0x44>
        
    rfalIsoDepInitialize();
 8004c62:	f7ff fca7 	bl	80045b4 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <rfalIsoDepDeselect+0x78>
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	e000      	b.n	8004c72 <rfalIsoDepDeselect+0x7a>
 8004c70:	2304      	movs	r3, #4
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200009ec 	.word	0x200009ec
 8004c80:	20000a36 	.word	0x20000a36
 8004c84:	20000a32 	.word	0x20000a32

08004c88 <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b0e      	cmp	r3, #14
 8004c9a:	d901      	bls.n	8004ca0 <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb2:	bf28      	it	cs
 8004cb4:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8004cb8:	60bb      	str	r3, [r7, #8]
    
    return result;
 8004cba:	68bb      	ldr	r3, [r7, #8]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
	...

08004cc8 <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8004cd2:	4b33      	ldr	r3, [pc, #204]	; (8004da0 <rfalIsoDepFSxI2FSx+0xd8>)
 8004cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d105      	bne.n	8004ce8 <rfalIsoDepFSxI2FSx+0x20>
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	bf28      	it	cs
 8004ce2:	230c      	movcs	r3, #12
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e004      	b.n	8004cf2 <rfalIsoDepFSxI2FSx+0x2a>
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	bf28      	it	cs
 8004cee:	2308      	movcs	r3, #8
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 8004cf4:	7b7b      	ldrb	r3, [r7, #13]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d848      	bhi.n	8004d8c <rfalIsoDepFSxI2FSx+0xc4>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <rfalIsoDepFSxI2FSx+0x38>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d41 	.word	0x08004d41
 8004d0c:	08004d47 	.word	0x08004d47
 8004d10:	08004d4d 	.word	0x08004d4d
 8004d14:	08004d53 	.word	0x08004d53
 8004d18:	08004d59 	.word	0x08004d59
 8004d1c:	08004d5f 	.word	0x08004d5f
 8004d20:	08004d65 	.word	0x08004d65
 8004d24:	08004d6d 	.word	0x08004d6d
 8004d28:	08004d75 	.word	0x08004d75
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004d85 	.word	0x08004d85
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 8004d34:	2310      	movs	r3, #16
 8004d36:	81fb      	strh	r3, [r7, #14]
 8004d38:	e02c      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 8004d3a:	2318      	movs	r3, #24
 8004d3c:	81fb      	strh	r3, [r7, #14]
 8004d3e:	e029      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 8004d40:	2320      	movs	r3, #32
 8004d42:	81fb      	strh	r3, [r7, #14]
 8004d44:	e026      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 8004d46:	2328      	movs	r3, #40	; 0x28
 8004d48:	81fb      	strh	r3, [r7, #14]
 8004d4a:	e023      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 8004d4c:	2330      	movs	r3, #48	; 0x30
 8004d4e:	81fb      	strh	r3, [r7, #14]
 8004d50:	e020      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 8004d52:	2340      	movs	r3, #64	; 0x40
 8004d54:	81fb      	strh	r3, [r7, #14]
 8004d56:	e01d      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 8004d58:	2360      	movs	r3, #96	; 0x60
 8004d5a:	81fb      	strh	r3, [r7, #14]
 8004d5c:	e01a      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	81fb      	strh	r3, [r7, #14]
 8004d62:	e017      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8004d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d68:	81fb      	strh	r3, [r7, #14]
 8004d6a:	e013      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 8004d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d70:	81fb      	strh	r3, [r7, #14]
 8004d72:	e00f      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 8004d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d78:	81fb      	strh	r3, [r7, #14]
 8004d7a:	e00b      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 8004d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d80:	81fb      	strh	r3, [r7, #14]
 8004d82:	e007      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 8004d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d88:	81fb      	strh	r3, [r7, #14]
 8004d8a:	e003      	b.n	8004d94 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8004d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d90:	81fb      	strh	r3, [r7, #14]
 8004d92:	bf00      	nop
    }
    return fsx;
 8004d94:	89fb      	ldrh	r3, [r7, #14]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	200009ec 	.word	0x200009ec

08004da4 <rfalIsoDepIsRats>:

#if RFAL_FEATURE_ISO_DEP_LISTEN

/*******************************************************************************/
bool rfalIsoDepIsRats( const uint8_t *buf, uint8_t bufLen )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
    if(buf != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <rfalIsoDepIsRats+0x24>
    {
        if ((RFAL_ISODEP_CMD_RATS == (uint8_t)*buf) && (sizeof(rfalIsoDepRats) == bufLen))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2be0      	cmp	r3, #224	; 0xe0
 8004dbc:	d104      	bne.n	8004dc8 <rfalIsoDepIsRats+0x24>
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d101      	bne.n	8004dc8 <rfalIsoDepIsRats+0x24>
        {
            return true;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <rfalIsoDepIsRats+0x26>
        }
    }
    return false;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <rfalIsoDepListenStartActivation>:



/*******************************************************************************/
ReturnCode rfalIsoDepListenStartActivation( rfalIsoDepAtsParam *atsParam, const rfalIsoDepAttribResParam *attribResParam, const uint8_t *buf, uint16_t bufLen, rfalIsoDepListenActvParam actParam)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b08d      	sub	sp, #52	; 0x34
 8004dd8:	af04      	add	r7, sp, #16
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	807b      	strh	r3, [r7, #2]
    uint8_t *txBuf;
    uint8_t bufIt;
    const uint8_t *buffer = buf;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	61bb      	str	r3, [r7, #24]
    
    /*******************************************************************************/
    bufIt        = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	77fb      	strb	r3, [r7, #31]
    txBuf        = (uint8_t*)actParam.rxBuf;      /* Use the rxBuf as TxBuf as well, the struct enforces a size enough MAX( NFCA_ATS_MAX_LEN, NFCB_ATTRIB_RES_MAX_LEN ) */
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	617b      	str	r3, [r7, #20]
    gIsoDep.txBR = RFAL_BR_106;
 8004dee:	4ba1      	ldr	r3, [pc, #644]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBR = RFAL_BR_106;
 8004df6:	4b9f      	ldr	r3, [pc, #636]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        
    /* Check for a valid buffer pointer */
    if( buffer == NULL )
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <rfalIsoDepListenStartActivation+0x34>
    {
        return ERR_PARAM;
 8004e04:	2307      	movs	r3, #7
 8004e06:	e131      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
    }
    
    /*******************************************************************************/
    if( *buffer == RFAL_ISODEP_CMD_RATS )
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2be0      	cmp	r3, #224	; 0xe0
 8004e0e:	f040 80f3 	bne.w	8004ff8 <rfalIsoDepListenStartActivation+0x224>
    {
        /* Check ATS parameters */
        if( atsParam == NULL )
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <rfalIsoDepListenStartActivation+0x48>
        {
            return ERR_PARAM;
 8004e18:	2307      	movs	r3, #7
 8004e1a:	e127      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* If requested copy RATS to device info */
        if( actParam.isoDepDev != NULL )
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <rfalIsoDepListenStartActivation+0x5a>
        {
            ST_MEMCPY( (uint8_t*)&actParam.isoDepDev->activation.A.Poller.RATS, buffer, sizeof(rfalIsoDepRats) );	/* Copy RATS' CMD + PARAM */
 8004e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e24:	461a      	mov	r2, r3
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]
        }
        
        
        /*******************************************************************************/
        /* Process RATS                                                                */
        buffer++;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3301      	adds	r3, #1
 8004e32:	61bb      	str	r3, [r7, #24]
        gIsoDep.fsx = rfalIsoDepFSxI2FSx( (((*buffer) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff43 	bl	8004cc8 <rfalIsoDepFSxI2FSx>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004e48:	829a      	strh	r2, [r3, #20]
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b87      	ldr	r3, [pc, #540]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004e56:	70da      	strb	r2, [r3, #3]
        
        
        /*******************************************************************************/
        /* Digital 1.1  13.6.1.8 - DID as to between 0 and 14 */
        if( gIsoDep.did > RFAL_ISODEP_DID_MAX )
 8004e58:	4b86      	ldr	r3, [pc, #536]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004e5a:	78db      	ldrb	r3, [r3, #3]
 8004e5c:	2b0e      	cmp	r3, #14
 8004e5e:	d901      	bls.n	8004e64 <rfalIsoDepListenStartActivation+0x90>
        {
            return ERR_PROTO;
 8004e60:	230b      	movs	r3, #11
 8004e62:	e103      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* Check if we are configured to support DID */
        if( (gIsoDep.did != RFAL_ISODEP_DID_00) && (!atsParam->didSupport) )
 8004e64:	4b83      	ldr	r3, [pc, #524]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <rfalIsoDepListenStartActivation+0xaa>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	78db      	ldrb	r3, [r3, #3]
 8004e70:	f083 0301 	eor.w	r3, r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <rfalIsoDepListenStartActivation+0xaa>
        {
            return ERR_NOTSUPP;
 8004e7a:	2318      	movs	r3, #24
 8004e7c:	e0f6      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
        }

        
        /*******************************************************************************/
        /* Check RFAL supported bit rates  */
        if( (!(RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	791b      	ldrb	r3, [r3, #4]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11d      	bne.n	8004ec6 <rfalIsoDepListenStartActivation+0xf2>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	791b      	ldrb	r3, [r3, #4]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d117      	bne.n	8004ec6 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
        if( (!(RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d111      	bne.n	8004ec6 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	791b      	ldrb	r3, [r3, #4]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10b      	bne.n	8004ec6 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_848) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_848) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_848) != 0U)))   )            
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
            (!(RFAL_SUPPORT_BR_CE_A_424) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_424) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_424) != 0U)))  ||
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <rfalIsoDepListenStartActivation+0xf2>
            (!(RFAL_SUPPORT_BR_CE_A_848) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_848) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_848) != 0U)))   )            
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	791b      	ldrb	r3, [r3, #4]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <rfalIsoDepListenStartActivation+0xf6>
        {
            return ERR_NOTSUPP;
 8004ec6:	2318      	movs	r3, #24
 8004ec8:	e0d0      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
        }
        
        /* Enforce proper FWI configuration */
        if( atsParam->fwi > ISODEP_FWI_LIS_MAX)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4b68      	ldr	r3, [pc, #416]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <rfalIsoDepListenStartActivation+0x10a>
 8004eda:	2307      	movs	r3, #7
 8004edc:	e000      	b.n	8004ee0 <rfalIsoDepListenStartActivation+0x10c>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	da09      	bge.n	8004ef8 <rfalIsoDepListenStartActivation+0x124>
        {
            atsParam->fwi = ISODEP_FWI_LIS_MAX;
 8004ee4:	4b63      	ldr	r3, [pc, #396]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <rfalIsoDepListenStartActivation+0x11e>
 8004eee:	2207      	movs	r2, #7
 8004ef0:	e000      	b.n	8004ef4 <rfalIsoDepListenStartActivation+0x120>
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	705a      	strb	r2, [r3, #1]
        }
        
        gIsoDep.atsTA  = atsParam->ta;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	791a      	ldrb	r2, [r3, #4]
 8004efc:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004efe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        gIsoDep.fwt    = rfalIsoDepFWI2FWT(atsParam->fwi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff febe 	bl	8004c88 <rfalIsoDepFWI2FWT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4a59      	ldr	r2, [pc, #356]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004f10:	60d3      	str	r3, [r2, #12]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx(atsParam->fsci);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fed6 	bl	8004cc8 <rfalIsoDepFSxI2FSx>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b54      	ldr	r3, [pc, #336]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004f22:	84da      	strh	r2, [r3, #38]	; 0x26
        
        
        /* Ensure proper/maximum Historical Bytes length  */
        atsParam->hbLen = MIN( RFAL_ISODEP_ATS_HB_MAX_LEN, atsParam->hbLen );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	7b1b      	ldrb	r3, [r3, #12]
 8004f28:	2b0f      	cmp	r3, #15
 8004f2a:	bf28      	it	cs
 8004f2c:	230f      	movcs	r3, #15
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	731a      	strb	r2, [r3, #12]
        
        /*******************************************************************************/
        /* Compute ATS                                                                 */
        
        txBuf[ bufIt++ ] = (RFAL_ISODEP_ATS_HIST_OFFSET + atsParam->hbLen);                                  /* TL */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	7b1a      	ldrb	r2, [r3, #12]
 8004f38:	7ffb      	ldrb	r3, [r7, #31]
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	77f9      	strb	r1, [r7, #31]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	440b      	add	r3, r1
 8004f44:	3205      	adds	r2, #5
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
                              RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK)| atsParam->fsci       );                  /* T0 */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	781a      	ldrb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
 8004f4e:	7ffb      	ldrb	r3, [r7, #31]
 8004f50:	1c59      	adds	r1, r3, #1
 8004f52:	77f9      	strb	r1, [r7, #31]
 8004f54:	4619      	mov	r1, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	440b      	add	r3, r1
 8004f5a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = atsParam->ta;                                                                     /* TA */
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	77fa      	strb	r2, [r7, #31]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	7912      	ldrb	r2, [r2, #4]
 8004f72:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	b2d9      	uxtb	r1, r3
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	789b      	ldrb	r3, [r3, #2]
 8004f80:	f023 030f 	bic.w	r3, r3, #15
 8004f84:	b2da      	uxtb	r2, r3
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 8004f86:	7ffb      	ldrb	r3, [r7, #31]
 8004f88:	1c58      	adds	r0, r3, #1
 8004f8a:	77f8      	strb	r0, [r7, #31]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4403      	add	r3, r0
 8004f92:	430a      	orrs	r2, r1
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
        txBuf[ bufIt++ ] = (uint8_t)((atsParam->didSupport) ? RFAL_ISODEP_ATS_TC_DID : 0U);                  /* TC */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	78db      	ldrb	r3, [r3, #3]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <rfalIsoDepListenStartActivation+0x1d0>
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	e000      	b.n	8004fa6 <rfalIsoDepListenStartActivation+0x1d2>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	1c59      	adds	r1, r3, #1
 8004faa:	77f9      	strb	r1, [r7, #31]
 8004fac:	4619      	mov	r1, r3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	440b      	add	r3, r1
 8004fb2:	701a      	strb	r2, [r3, #0]
        
        if( atsParam->hbLen > 0U )             /* MISRA 21.18 */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	7b1b      	ldrb	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <rfalIsoDepListenStartActivation+0x206>
        {
            ST_MEMCPY( &txBuf[bufIt], atsParam->hb, atsParam->hbLen );                                       /* T1-Tk */
 8004fbc:	7ffb      	ldrb	r3, [r7, #31]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	18d0      	adds	r0, r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	7b1b      	ldrb	r3, [r3, #12]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f00d f8a6 	bl	801211c <memcpy>
            bufIt += atsParam->hbLen;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	7b1a      	ldrb	r2, [r3, #12]
 8004fd4:	7ffb      	ldrb	r3, [r7, #31]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	77fb      	strb	r3, [r7, #31]
        }
        
        gIsoDep.state = ISODEP_ST_PICC_ACT_ATS;
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004fdc:	2204      	movs	r2, #4
 8004fde:	701a      	strb	r2, [r3, #0]
    else
    {
        return ERR_PARAM;
    }
    
    gIsoDep.actvParam = actParam;
 8004fe0:	4b24      	ldr	r3, [pc, #144]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8004fe2:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8004fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    
    /*******************************************************************************/
    /* If requested copy to ISO-DEP device info */
    if( actParam.isoDepDev != NULL )
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02a      	beq.n	800504c <rfalIsoDepListenStartActivation+0x278>
 8004ff6:	e00c      	b.n	8005012 <rfalIsoDepListenStartActivation+0x23e>
    else if( *buffer == RFAL_ISODEP_CMD_ATTRIB )
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b1d      	cmp	r3, #29
 8004ffe:	d106      	bne.n	800500e <rfalIsoDepListenStartActivation+0x23a>
        if( attribResParam == NULL )
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <rfalIsoDepListenStartActivation+0x236>
            return ERR_PARAM;
 8005006:	2307      	movs	r3, #7
 8005008:	e030      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
        return ERR_NOT_IMPLEMENTED;
 800500a:	230f      	movs	r3, #15
 800500c:	e02e      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
        return ERR_PARAM;
 800500e:	2307      	movs	r3, #7
 8005010:	e02c      	b.n	800506c <rfalIsoDepListenStartActivation+0x298>
    {
        actParam.isoDepDev->info.DID  = gIsoDep.did;
 8005012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005014:	4a17      	ldr	r2, [pc, #92]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8005016:	78d2      	ldrb	r2, [r2, #3]
 8005018:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        actParam.isoDepDev->info.FSx  = gIsoDep.fsx;
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8005020:	8a92      	ldrh	r2, [r2, #20]
 8005022:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        actParam.isoDepDev->info.FWT  = gIsoDep.fwt;
 8005026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005028:	4a12      	ldr	r2, [pc, #72]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 800502a:	68d2      	ldr	r2, [r2, #12]
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
        actParam.isoDepDev->info.dFWT = 0;
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	2200      	movs	r2, #0
 8005032:	635a      	str	r2, [r3, #52]	; 0x34
        actParam.isoDepDev->info.DSI  = gIsoDep.txBR;
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	4a0f      	ldr	r2, [pc, #60]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8005038:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800503c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        actParam.isoDepDev->info.DRI  = gIsoDep.rxBR;
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	4a0c      	ldr	r2, [pc, #48]	; (8005074 <rfalIsoDepListenStartActivation+0x2a0>)
 8005044:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005048:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    return rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)actParam.rxBuf, sizeof( rfalIsoDepBufFormat ), actParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 800504c:	7ffb      	ldrb	r3, [r7, #31]
 800504e:	b299      	uxth	r1, r3
 8005050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	9002      	str	r0, [sp, #8]
 800505a:	2000      	movs	r0, #0
 800505c:	9001      	str	r0, [sp, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	f240 1303 	movw	r3, #259	; 0x103
 8005064:	6978      	ldr	r0, [r7, #20]
 8005066:	f008 fd1d 	bl	800daa4 <rfalTransceiveBlockingTx>
 800506a:	4603      	mov	r3, r0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3724      	adds	r7, #36	; 0x24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	200009ec 	.word	0x200009ec

08005078 <rfalIsoDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepListenGetActivationStatus( void )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af04      	add	r7, sp, #16
    rfalBitRate dsi;
    rfalBitRate dri;
    
    
    /* Check if Activation is running */
    if( gIsoDep.state < ISODEP_ST_PICC_ACT_ATS )
 800507e:	4bb9      	ldr	r3, [pc, #740]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d801      	bhi.n	800508a <rfalIsoDepListenGetActivationStatus+0x12>
    {
        return ERR_WRONG_STATE;
 8005086:	2321      	movs	r3, #33	; 0x21
 8005088:	e167      	b.n	800535a <rfalIsoDepListenGetActivationStatus+0x2e2>
    }
    
    /* Check if Activation has finished already */
    if( gIsoDep.state >= ISODEP_ST_PICC_RX )
 800508a:	4bb6      	ldr	r3, [pc, #728]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b05      	cmp	r3, #5
 8005090:	d901      	bls.n	8005096 <rfalIsoDepListenGetActivationStatus+0x1e>
    {
        return ERR_NONE;
 8005092:	2300      	movs	r3, #0
 8005094:	e161      	b.n	800535a <rfalIsoDepListenGetActivationStatus+0x2e2>
    }
    
    
    /*******************************************************************************/
    /* Check for incoming msg */
    err = rfalGetTransceiveStatus();
 8005096:	f008 fdcd 	bl	800dc34 <rfalGetTransceiveStatus>
 800509a:	4603      	mov	r3, r0
 800509c:	81bb      	strh	r3, [r7, #12]
    switch( err )
 800509e:	89bb      	ldrh	r3, [r7, #12]
 80050a0:	2b25      	cmp	r3, #37	; 0x25
 80050a2:	d859      	bhi.n	8005158 <rfalIsoDepListenGetActivationStatus+0xe0>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <rfalIsoDepListenGetActivationStatus+0x34>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	08005181 	.word	0x08005181
 80050b0:	08005159 	.word	0x08005159
 80050b4:	08005145 	.word	0x08005145
 80050b8:	08005159 	.word	0x08005159
 80050bc:	08005159 	.word	0x08005159
 80050c0:	08005159 	.word	0x08005159
 80050c4:	08005159 	.word	0x08005159
 80050c8:	08005159 	.word	0x08005159
 80050cc:	08005159 	.word	0x08005159
 80050d0:	08005149 	.word	0x08005149
 80050d4:	08005159 	.word	0x08005159
 80050d8:	08005159 	.word	0x08005159
 80050dc:	08005159 	.word	0x08005159
 80050e0:	08005159 	.word	0x08005159
 80050e4:	08005159 	.word	0x08005159
 80050e8:	08005159 	.word	0x08005159
 80050ec:	08005159 	.word	0x08005159
 80050f0:	08005159 	.word	0x08005159
 80050f4:	08005159 	.word	0x08005159
 80050f8:	08005159 	.word	0x08005159
 80050fc:	08005159 	.word	0x08005159
 8005100:	08005149 	.word	0x08005149
 8005104:	08005159 	.word	0x08005159
 8005108:	08005159 	.word	0x08005159
 800510c:	08005159 	.word	0x08005159
 8005110:	08005159 	.word	0x08005159
 8005114:	08005159 	.word	0x08005159
 8005118:	08005149 	.word	0x08005149
 800511c:	08005159 	.word	0x08005159
 8005120:	08005159 	.word	0x08005159
 8005124:	08005159 	.word	0x08005159
 8005128:	08005159 	.word	0x08005159
 800512c:	08005159 	.word	0x08005159
 8005130:	08005159 	.word	0x08005159
 8005134:	08005159 	.word	0x08005159
 8005138:	08005159 	.word	0x08005159
 800513c:	08005159 	.word	0x08005159
 8005140:	08005145 	.word	0x08005145
            break;
            
        /*******************************************************************************/
        case ERR_LINK_LOSS:
        case ERR_BUSY:
            return err;
 8005144:	89bb      	ldrh	r3, [r7, #12]
 8005146:	e108      	b.n	800535a <rfalIsoDepListenGetActivationStatus+0x2e2>
        case ERR_CRC:
        case ERR_PAR:
        case ERR_FRAMING:
            
            /* ISO14443 4  5.6.2.2 2  If ATS has been replied upon a invalid block, PICC disables the PPS responses */
            if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 8005148:	4b86      	ldr	r3, [pc, #536]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b04      	cmp	r3, #4
 800514e:	d103      	bne.n	8005158 <rfalIsoDepListenGetActivationStatus+0xe0>
            {
               gIsoDep.state = ISODEP_ST_PICC_RX;
 8005150:	4b84      	ldr	r3, [pc, #528]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005152:	2206      	movs	r2, #6
 8005154:	701a      	strb	r2, [r3, #0]
               break;
 8005156:	e014      	b.n	8005182 <rfalIsoDepListenGetActivationStatus+0x10a>
            /* fall through */
            
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* ReEnable the receiver and wait for another frame */
            isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 8005158:	4b82      	ldr	r3, [pc, #520]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800515a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800515e:	4b81      	ldr	r3, [pc, #516]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005164:	f04f 31ff 	mov.w	r1, #4294967295
 8005168:	9102      	str	r1, [sp, #8]
 800516a:	2100      	movs	r1, #0
 800516c:	9101      	str	r1, [sp, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	f240 1303 	movw	r3, #259	; 0x103
 8005174:	2100      	movs	r1, #0
 8005176:	2000      	movs	r0, #0
 8005178:	f008 fc94 	bl	800daa4 <rfalTransceiveBlockingTx>
            
            return ERR_BUSY;
 800517c:	2302      	movs	r3, #2
 800517e:	e0ec      	b.n	800535a <rfalIsoDepListenGetActivationStatus+0x2e2>
            break;
 8005180:	bf00      	nop
    }
    
    
    txBuf = (uint8_t*)gIsoDep.actvParam.rxBuf;   /* Use the rxBuf as TxBuf as well, the struct enforces a size enough  MAX(NFCA_PPS_RES_LEN, ISODEP_DSL_MAX_LEN) */    
 8005182:	4b78      	ldr	r3, [pc, #480]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005188:	60bb      	str	r3, [r7, #8]
    dri   = RFAL_BR_KEEP;                        /* The RFAL_BR_KEEP is used to check if PPS with BR change was requested */
 800518a:	23ff      	movs	r3, #255	; 0xff
 800518c:	73bb      	strb	r3, [r7, #14]
    dsi   = RFAL_BR_KEEP;                        /* MISRA 9.1 */
 800518e:	23ff      	movs	r3, #255	; 0xff
 8005190:	73fb      	strb	r3, [r7, #15]
    bufIt = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    gIsoDep.role  = ISODEP_ROLE_PICC;
 8005196:	4b73      	ldr	r3, [pc, #460]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005198:	2201      	movs	r2, #1
 800519a:	705a      	strb	r2, [r3, #1]
    
    /*******************************************************************************/
    if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 800519c:	4b71      	ldr	r3, [pc, #452]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	f040 80a1 	bne.w	80052e8 <rfalIsoDepListenGetActivationStatus+0x270>
    {
        /* Check for a PPS    ISO 14443-4  5.3 */
        if( ( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_PPS_MASK) == RFAL_ISODEP_PPS_SB )
 80051a6:	4b6f      	ldr	r3, [pc, #444]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80051a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b2:	2bd0      	cmp	r3, #208	; 0xd0
 80051b4:	f040 8098 	bne.w	80052e8 <rfalIsoDepListenGetActivationStatus+0x270>
        {
            /* ISO 14443-4  5.3.1  Check if the we are the addressed DID/CID */
            /* ISO 14443-4  5.3.2  Check for a valid PPS0 */
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 80051b8:	4b6a      	ldr	r3, [pc, #424]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80051ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	4a67      	ldr	r2, [pc, #412]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80051c6:	78d2      	ldrb	r2, [r2, #3]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <rfalIsoDepListenGetActivationStatus+0x166>
                (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] & RFAL_ISODEP_PPS0_VALID_MASK) != RFAL_ISODEP_PPS0_PPS1_NOT_PRESENT)   )
 80051cc:	4b65      	ldr	r3, [pc, #404]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80051ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d2:	3301      	adds	r3, #1
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d013      	beq.n	8005206 <rfalIsoDepListenGetActivationStatus+0x18e>
            {
                /* Invalid DID on PPS request or Invalid PPS0, reEnable the receiver and wait another frame */
                isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 80051de:	4b61      	ldr	r3, [pc, #388]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80051e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80051e4:	4b5f      	ldr	r3, [pc, #380]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80051e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ea:	f04f 31ff 	mov.w	r1, #4294967295
 80051ee:	9102      	str	r1, [sp, #8]
 80051f0:	2100      	movs	r1, #0
 80051f2:	9101      	str	r1, [sp, #4]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	f240 1303 	movw	r3, #259	; 0x103
 80051fa:	2100      	movs	r1, #0
 80051fc:	2000      	movs	r0, #0
 80051fe:	f008 fc51 	bl	800daa4 <rfalTransceiveBlockingTx>
                
                return ERR_BUSY;
 8005202:	2302      	movs	r3, #2
 8005204:	e0a9      	b.n	800535a <rfalIsoDepListenGetActivationStatus+0x2e2>
            }
            
            /*******************************************************************************/
            /* Check PPS1 presence */
            if( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] == RFAL_ISODEP_PPS0_PPS1_PRESENT )
 8005206:	4b57      	ldr	r3, [pc, #348]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520c:	3301      	adds	r3, #1
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b11      	cmp	r3, #17
 8005212:	d129      	bne.n	8005268 <rfalIsoDepListenGetActivationStatus+0x1f0>
            {
                uint8_t newdri = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] & RFAL_ISODEP_PPS1_DxI_MASK;                                 /* MISRA 10.8 */
 8005214:	4b53      	ldr	r3, [pc, #332]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521a:	3302      	adds	r3, #2
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	71bb      	strb	r3, [r7, #6]
                uint8_t newdsi = (((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] >> RFAL_ISODEP_PPS1_DSI_SHIFT) & RFAL_ISODEP_PPS1_DxI_MASK; /* MISRA 10.8 */
 8005224:	4b4f      	ldr	r3, [pc, #316]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	3302      	adds	r3, #2
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	089b      	lsrs	r3, r3, #2
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	717b      	strb	r3, [r7, #5]
				/* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and above masks guarantee no invalid enum values to be created */
                dri = (rfalBitRate) (newdri); 
 8005238:	79bb      	ldrb	r3, [r7, #6]
 800523a:	73bb      	strb	r3, [r7, #14]
                dsi = (rfalBitRate) (newdsi);
 800523c:	797b      	ldrb	r3, [r7, #5]
 800523e:	73fb      	strb	r3, [r7, #15]
                                
                if( (!(RFAL_SUPPORT_BR_CE_A_106) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d00e      	beq.n	8005264 <rfalIsoDepListenGetActivationStatus+0x1ec>
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d00b      	beq.n	8005264 <rfalIsoDepListenGetActivationStatus+0x1ec>
                    (!(RFAL_SUPPORT_BR_CE_A_212) && (( dsi == RFAL_BR_212 ) || ( dri == RFAL_BR_212 )))  ||
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d008      	beq.n	8005264 <rfalIsoDepListenGetActivationStatus+0x1ec>
                    (!(RFAL_SUPPORT_BR_CE_A_424) && (( dsi == RFAL_BR_424 ) || ( dri == RFAL_BR_424 )))  ||
 8005252:	7bbb      	ldrb	r3, [r7, #14]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d005      	beq.n	8005264 <rfalIsoDepListenGetActivationStatus+0x1ec>
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d002      	beq.n	8005264 <rfalIsoDepListenGetActivationStatus+0x1ec>
                    (!(RFAL_SUPPORT_BR_CE_A_848) && (( dsi == RFAL_BR_848 ) || ( dri == RFAL_BR_848 )))     )
 800525e:	7bbb      	ldrb	r3, [r7, #14]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d101      	bne.n	8005268 <rfalIsoDepListenGetActivationStatus+0x1f0>
                {
                    return ERR_PROTO;
 8005264:	230b      	movs	r3, #11
 8005266:	e078      	b.n	800535a <rfalIsoDepListenGetActivationStatus+0x2e2>
                }
            }
            
            /*******************************************************************************/
            /* Compute and send PPS RES / Ack                                              */
            txBuf[ bufIt++ ] = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS];
 8005268:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800526a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	1c59      	adds	r1, r3, #1
 8005272:	71f9      	strb	r1, [r7, #7]
 8005274:	4619      	mov	r1, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	440b      	add	r3, r1
 800527a:	7812      	ldrb	r2, [r2, #0]
 800527c:	701a      	strb	r2, [r3, #0]
            
            rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	b299      	uxth	r1, r3
 8005282:	4b38      	ldr	r3, [pc, #224]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005284:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005288:	4b36      	ldr	r3, [pc, #216]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528e:	f04f 30ff 	mov.w	r0, #4294967295
 8005292:	9002      	str	r0, [sp, #8]
 8005294:	2000      	movs	r0, #0
 8005296:	9001      	str	r0, [sp, #4]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	f240 1303 	movw	r3, #259	; 0x103
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f008 fc00 	bl	800daa4 <rfalTransceiveBlockingTx>

            /*******************************************************************************/
            /* Exchange the bit rates if requested */
            if( dri != RFAL_BR_KEEP )
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	2bff      	cmp	r3, #255	; 0xff
 80052a8:	d01e      	beq.n	80052e8 <rfalIsoDepListenGetActivationStatus+0x270>
            {
                rfalSetBitRate( dsi, dri );                 /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset above (RFAL_SUPPORT_BR_CE_A_xxx) */
 80052aa:	7bba      	ldrb	r2, [r7, #14]
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f007 fe83 	bl	800cfbc <rfalSetBitRate>
                
                gIsoDep.txBR = dsi;  /* DSI codes the divisor from PICC to PCD */
 80052b6:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                gIsoDep.rxBR = dri;  /* DRI codes the divisor from PCD to PICC */
 80052be:	4a29      	ldr	r2, [pc, #164]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                
                
                if(gIsoDep.actvParam.isoDepDev != NULL)
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <rfalIsoDepListenGetActivationStatus+0x270>
                {
                    gIsoDep.actvParam.isoDepDev->info.DSI =  dsi;
 80052d0:	4b24      	ldr	r3, [pc, #144]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    gIsoDep.actvParam.isoDepDev->info.DRI =  dri;
 80052dc:	4b21      	ldr	r3, [pc, #132]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e2:	7bba      	ldrb	r2, [r7, #14]
 80052e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
        /* Check for a S-Deselect is done on Data Exchange Activity                    */
    }
     
     /*******************************************************************************/
     gIsoDep.hdrLen   = RFAL_ISODEP_PCB_LEN;
 80052e8:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
     gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;             /* Always assume DID to be aligned with Digital 1.1  15.1.2 and ISO14443  4 5.6.3    #454 */
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80052f6:	3301      	adds	r3, #1
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 80052fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
     gIsoDep.hdrLen  += (uint8_t)((gIsoDep.nad != RFAL_ISODEP_NO_NAD) ? RFAL_ISODEP_NAD_LEN : 0U);
 8005300:	4b18      	ldr	r3, [pc, #96]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005302:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005308:	7912      	ldrb	r2, [r2, #4]
 800530a:	2aff      	cmp	r2, #255	; 0xff
 800530c:	bf14      	ite	ne
 800530e:	2201      	movne	r2, #1
 8005310:	2200      	moveq	r2, #0
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	4413      	add	r3, r2
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800531a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
     
     /*******************************************************************************/
     /* Rule C - The PICC block number shall be initialized to 1 at activation */
     gIsoDep.blockNumber = 1;
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005320:	2201      	movs	r2, #1
 8005322:	709a      	strb	r2, [r3, #2]
    
    /* Activation done, keep the rcvd data in, reMap the activation buffer to the global to be retrieved by the DEP method */
    gIsoDep.rxBuf       = (uint8_t*)gIsoDep.actvParam.rxBuf;
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800532a:	4a0e      	ldr	r2, [pc, #56]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800532c:	61d3      	str	r3, [r2, #28]
    gIsoDep.rxBufLen    = sizeof( rfalIsoDepBufFormat );
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005330:	f240 1203 	movw	r2, #259	; 0x103
 8005334:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.rxBufInfPos = (uint8_t)((uint32_t)gIsoDep.actvParam.rxBuf->inf - (uint32_t)gIsoDep.actvParam.rxBuf->prologue);
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005338:	2203      	movs	r2, #3
 800533a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.rxLen       = gIsoDep.actvParam.rxLen;
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005344:	4a07      	ldr	r2, [pc, #28]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005346:	6313      	str	r3, [r2, #48]	; 0x30
    gIsoDep.rxChaining  = gIsoDep.actvParam.isRxChaining;
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	4a05      	ldr	r2, [pc, #20]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005350:	6353      	str	r3, [r2, #52]	; 0x34
    
    gIsoDep.state = ISODEP_ST_PICC_RX;
 8005352:	4b04      	ldr	r3, [pc, #16]	; (8005364 <rfalIsoDepListenGetActivationStatus+0x2ec>)
 8005354:	2206      	movs	r2, #6
 8005356:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	200009ec 	.word	0x200009ec

08005368 <rfalIsoDepGetMaxInfLen>:
#endif  /* RFAL_FEATURE_ISO_DEP_LISTEN */


/*******************************************************************************/
uint16_t rfalIsoDepGetMaxInfLen( void )
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
    /* Check whether all parameters are valid, otherwise return minimum default value */
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 800536e:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 8005370:	8a9b      	ldrh	r3, [r3, #20]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d909      	bls.n	800538a <rfalIsoDepGetMaxInfLen+0x22>
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 8005378:	8a9b      	ldrh	r3, [r3, #20]
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537e:	d804      	bhi.n	800538a <rfalIsoDepGetMaxInfLen+0x22>
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 8005382:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005386:	2b03      	cmp	r3, #3
 8005388:	d905      	bls.n	8005396 <rfalIsoDepGetMaxInfLen+0x2e>
    {
        uint16_t isodepFsx16 = (uint16_t)RFAL_ISODEP_FSX_16;  /* MISRA 10.1 */
 800538a:	2310      	movs	r3, #16
 800538c:	80fb      	strh	r3, [r7, #6]
        return (isodepFsx16 - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	3b03      	subs	r3, #3
 8005392:	b29b      	uxth	r3, r3
 8005394:	e009      	b.n	80053aa <rfalIsoDepGetMaxInfLen+0x42>
    }
    
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 8005398:	8a9a      	ldrh	r2, [r3, #20]
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <rfalIsoDepGetMaxInfLen+0x4c>)
 800539c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b02      	subs	r3, #2
 80053a8:	b29b      	uxth	r3, r3
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	200009ec 	.word	0x200009ec

080053b8 <rfalIsoDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalIsoDepStartTransceive( rfalIsoDepTxRxParam param )
{
 80053b8:	b084      	sub	sp, #16
 80053ba:	b580      	push	{r7, lr}
 80053bc:	af00      	add	r7, sp, #0
 80053be:	f107 0c08 	add.w	ip, r7, #8
 80053c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    gIsoDep.txBuf        = param.txBuf->prologue;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b30      	ldr	r3, [pc, #192]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053cc:	619a      	str	r2, [r3, #24]
    gIsoDep.txBufInfPos  = (uint8_t)((uint32_t)param.txBuf->inf - (uint32_t)param.txBuf->prologue);
 80053ce:	4b2f      	ldr	r3, [pc, #188]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053d0:	2203      	movs	r2, #3
 80053d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.txBufLen     = param.txBufLen;
 80053d6:	89ba      	ldrh	r2, [r7, #12]
 80053d8:	4b2c      	ldr	r3, [pc, #176]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053da:	841a      	strh	r2, [r3, #32]
    gIsoDep.isTxChaining = param.isTxChaining;
 80053dc:	7bba      	ldrb	r2, [r7, #14]
 80053de:	4b2b      	ldr	r3, [pc, #172]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053e0:	759a      	strb	r2, [r3, #22]
    
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b29      	ldr	r3, [pc, #164]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053e8:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufInfPos  = (uint8_t)((uint32_t)param.rxBuf->inf - (uint32_t)param.rxBuf->prologue);
 80053ea:	4b28      	ldr	r3, [pc, #160]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053ec:	2203      	movs	r2, #3
 80053ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053f4:	f240 1203 	movw	r2, #259	; 0x103
 80053f8:	845a      	strh	r2, [r3, #34]	; 0x22
    
    gIsoDep.rxLen        = param.rxLen;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4a23      	ldr	r2, [pc, #140]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 80053fe:	6313      	str	r3, [r2, #48]	; 0x30
    gIsoDep.rxChaining   = param.isRxChaining;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4a22      	ldr	r2, [pc, #136]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005404:	6353      	str	r3, [r2, #52]	; 0x34
    
    
    gIsoDep.fwt          = param.FWT;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4a20      	ldr	r2, [pc, #128]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 800540a:	60d3      	str	r3, [r2, #12]
    gIsoDep.dFwt         = param.dFWT;
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	4a1f      	ldr	r2, [pc, #124]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005410:	6113      	str	r3, [r2, #16]
    gIsoDep.fsx          = param.FSx;
 8005412:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005416:	829a      	strh	r2, [r3, #20]
    gIsoDep.did          = param.DID;
 8005418:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 800541e:	70da      	strb	r2, [r3, #3]
    
    /* Only change the FSx from activation if no to Keep */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8005420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005422:	2bff      	cmp	r3, #255	; 0xff
 8005424:	d001      	beq.n	800542a <rfalIsoDepStartTransceive+0x72>
 8005426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005428:	e001      	b.n	800542e <rfalIsoDepStartTransceive+0x76>
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 800542c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800542e:	4a17      	ldr	r2, [pc, #92]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005430:	84d3      	strh	r3, [r2, #38]	; 0x26
    
    /* Clear inner control params for next dataExchange */
    gIsoDep.isRxChaining  = false;
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005434:	2200      	movs	r2, #0
 8005436:	75da      	strb	r2, [r3, #23]
    isoDepClearCounters();
 8005438:	f7fe fedc 	bl	80041f4 <isoDepClearCounters>
    
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d119      	bne.n	8005478 <rfalIsoDepStartTransceive+0xc0>
    {
       if(gIsoDep.txBufLen > 0U)
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005446:	8c1b      	ldrh	r3, [r3, #32]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <rfalIsoDepStartTransceive+0xb6>
       {
           /* Ensure that an RTOX Ack is not being expected at moment */
           if( !gIsoDep.isWait4WTX )
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 800544e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005452:	f083 0301 	eor.w	r3, r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <rfalIsoDepStartTransceive+0xae>
           {
               gIsoDep.state = ISODEP_ST_PICC_TX;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 800545e:	2209      	movs	r2, #9
 8005460:	701a      	strb	r2, [r3, #0]
               return ERR_NONE;
 8005462:	2300      	movs	r3, #0
 8005464:	e00c      	b.n	8005480 <rfalIsoDepStartTransceive+0xc8>
           }
           else
           {
               /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
               gIsoDep.isTxPending = true;
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
           }
       }
       
       /* Digital 1.1  15.2.5.1 The first block SHALL be sent by the Reader/Writer */
       gIsoDep.state = ISODEP_ST_PICC_RX;
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 8005470:	2206      	movs	r2, #6
 8005472:	701a      	strb	r2, [r3, #0]
       return ERR_NONE;
 8005474:	2300      	movs	r3, #0
 8005476:	e003      	b.n	8005480 <rfalIsoDepStartTransceive+0xc8>
    }
    
    gIsoDep.state = ISODEP_ST_PCD_TX;
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <rfalIsoDepStartTransceive+0xd4>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005488:	b004      	add	sp, #16
 800548a:	4770      	bx	lr
 800548c:	200009ec 	.word	0x200009ec

08005490 <rfalIsoDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <rfalIsoDepGetTransceiveStatus+0x2c>)
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d103      	bne.n	80054a4 <rfalIsoDepGetTransceiveStatus+0x14>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
 800549c:	f000 f810 	bl	80054c0 <isoDepDataExchangePICC>
 80054a0:	4603      	mov	r3, r0
 80054a2:	e008      	b.n	80054b6 <rfalIsoDepGetTransceiveStatus+0x26>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <rfalIsoDepGetTransceiveStatus+0x2c>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	4a04      	ldr	r2, [pc, #16]	; (80054bc <rfalIsoDepGetTransceiveStatus+0x2c>)
 80054aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff f8f8 	bl	80046a4 <isoDepDataExchangePCD>
 80054b4:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	200009ec 	.word	0x200009ec

080054c0 <isoDepDataExchangePICC>:

#if RFAL_FEATURE_ISO_DEP_LISTEN

/*******************************************************************************/
static ReturnCode isoDepDataExchangePICC( void )
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af04      	add	r7, sp, #16
    uint8_t    rxPCB;
    ReturnCode ret;
    
    switch( gIsoDep.state )
 80054c6:	4ba5      	ldr	r3, [pc, #660]	; (800575c <isoDepDataExchangePICC+0x29c>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b09      	cmp	r3, #9
 80054cc:	f200 8144 	bhi.w	8005758 <isoDepDataExchangePICC+0x298>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <isoDepDataExchangePICC+0x18>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005759 	.word	0x08005759
 80054e0:	08005759 	.word	0x08005759
 80054e4:	08005759 	.word	0x08005759
 80054e8:	08005759 	.word	0x08005759
 80054ec:	08005759 	.word	0x08005759
 80054f0:	08005555 	.word	0x08005555
 80054f4:	080056a9 	.word	0x080056a9
 80054f8:	08005743 	.word	0x08005743
 80054fc:	08005505 	.word	0x08005505
    {
        /*******************************************************************************/
        case ISODEP_ST_IDLE:
            return ERR_NONE;
 8005500:	2300      	movs	r3, #0
 8005502:	e3c0      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
        

        /*******************************************************************************/
        case ISODEP_ST_PICC_TX:
        
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, RFAL_FWT_NONE );
 8005504:	4b95      	ldr	r3, [pc, #596]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005506:	789b      	ldrb	r3, [r3, #2]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f043 0302 	orr.w	r3, r3, #2
 8005512:	b2d8      	uxtb	r0, r3
 8005514:	4b91      	ldr	r3, [pc, #580]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005516:	6999      	ldr	r1, [r3, #24]
 8005518:	4b90      	ldr	r3, [pc, #576]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	4a8f      	ldr	r2, [pc, #572]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800551e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005522:	441a      	add	r2, r3
 8005524:	4b8d      	ldr	r3, [pc, #564]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005526:	8c1b      	ldrh	r3, [r3, #32]
 8005528:	f04f 34ff 	mov.w	r4, #4294967295
 800552c:	9400      	str	r4, [sp, #0]
 800552e:	f7fe fe79 	bl	8004224 <isoDepTx>
 8005532:	4603      	mov	r3, r0
 8005534:	80fb      	strh	r3, [r7, #6]
            
            /* Clear pending Tx flag */
            gIsoDep.isTxPending = false;
 8005536:	4b89      	ldr	r3, [pc, #548]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            
            switch( ret )
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <isoDepDataExchangePICC+0x8e>
            {
             case ERR_NONE:
                 gIsoDep.state = ISODEP_ST_PICC_RX;
 8005544:	4b85      	ldr	r3, [pc, #532]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005546:	2206      	movs	r2, #6
 8005548:	701a      	strb	r2, [r3, #0]
                 return ERR_BUSY;
 800554a:	2302      	movs	r3, #2
 800554c:	e39b      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
             
             default:
                /* MISRA 16.4: no empty default statement (a comment being enough) */
                break;
 800554e:	bf00      	nop
            }
            return ret;
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	e398      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
        
        
        /*******************************************************************************/
        case ISODEP_ST_PICC_RX:
            
            ret = rfalGetTransceiveStatus();
 8005554:	f008 fb6e 	bl	800dc34 <rfalGetTransceiveStatus>
 8005558:	4603      	mov	r3, r0
 800555a:	80fb      	strh	r3, [r7, #6]
            switch( ret )
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	2b25      	cmp	r3, #37	; 0x25
 8005560:	f200 80a0 	bhi.w	80056a4 <isoDepDataExchangePICC+0x1e4>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <isoDepDataExchangePICC+0xac>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	08005631 	.word	0x08005631
 8005570:	080056a5 	.word	0x080056a5
 8005574:	0800562d 	.word	0x0800562d
 8005578:	080056a5 	.word	0x080056a5
 800557c:	08005605 	.word	0x08005605
 8005580:	080056a5 	.word	0x080056a5
 8005584:	080056a5 	.word	0x080056a5
 8005588:	080056a5 	.word	0x080056a5
 800558c:	080056a5 	.word	0x080056a5
 8005590:	08005605 	.word	0x08005605
 8005594:	080056a5 	.word	0x080056a5
 8005598:	080056a5 	.word	0x080056a5
 800559c:	080056a5 	.word	0x080056a5
 80055a0:	080056a5 	.word	0x080056a5
 80055a4:	080056a5 	.word	0x080056a5
 80055a8:	080056a5 	.word	0x080056a5
 80055ac:	080056a5 	.word	0x080056a5
 80055b0:	080056a5 	.word	0x080056a5
 80055b4:	080056a5 	.word	0x080056a5
 80055b8:	080056a5 	.word	0x080056a5
 80055bc:	080056a5 	.word	0x080056a5
 80055c0:	08005605 	.word	0x08005605
 80055c4:	080056a5 	.word	0x080056a5
 80055c8:	080056a5 	.word	0x080056a5
 80055cc:	080056a5 	.word	0x080056a5
 80055d0:	080056a5 	.word	0x080056a5
 80055d4:	080056a5 	.word	0x080056a5
 80055d8:	08005605 	.word	0x08005605
 80055dc:	080056a5 	.word	0x080056a5
 80055e0:	080056a5 	.word	0x080056a5
 80055e4:	080056a5 	.word	0x080056a5
 80055e8:	080056a5 	.word	0x080056a5
 80055ec:	080056a5 	.word	0x080056a5
 80055f0:	080056a5 	.word	0x080056a5
 80055f4:	080056a5 	.word	0x080056a5
 80055f8:	080056a5 	.word	0x080056a5
 80055fc:	080056a5 	.word	0x080056a5
 8005600:	08005629 	.word	0x08005629
                case ERR_CRC:
                case ERR_PAR:
                case ERR_FRAMING:
                    
                    /* Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */                                        
                    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 8005604:	4b55      	ldr	r3, [pc, #340]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	4b54      	ldr	r3, [pc, #336]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	f04f 31ff 	mov.w	r1, #4294967295
 8005610:	9102      	str	r1, [sp, #8]
 8005612:	2100      	movs	r1, #0
 8005614:	9101      	str	r1, [sp, #4]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	f240 1303 	movw	r3, #259	; 0x103
 800561c:	2100      	movs	r1, #0
 800561e:	2000      	movs	r0, #0
 8005620:	f008 fa40 	bl	800daa4 <rfalTransceiveBlockingTx>
                    
                    return ERR_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	e32e      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
                    
                /*******************************************************************************/
                case ERR_LINK_LOSS:
                    return ret;             /* Debug purposes */
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	e32c      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
                    
                case ERR_BUSY:
                    return ret;             /* Debug purposes */
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	e32a      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
                    
                /*******************************************************************************/
                case ERR_NONE:
                    *gIsoDep.rxLen = rfalConvBitsToBytes( *gIsoDep.rxLen );
 8005630:	4b4a      	ldr	r3, [pc, #296]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	3307      	adds	r3, #7
 8005638:	08da      	lsrs	r2, r3, #3
 800563a:	4b48      	ldr	r3, [pc, #288]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	b292      	uxth	r2, r2
 8005640:	801a      	strh	r2, [r3, #0]
                    break;
 8005642:	bf00      	nop

                /*******************************************************************************/
				default:
                    return ret;
            }
            break;
 8005644:	bf00      	nop
        default:
            return ERR_INTERNAL;
    }
    
    /* ISO 14443-4 7.5.6.2 CE SHALL NOT attempt error recovery -> clear counters */
    isoDepClearCounters();
 8005646:	f7fe fdd5 	bl	80041f4 <isoDepClearCounters>
    /*******************************************************************************/
    /* No error, process incoming msg                                              */
    /*******************************************************************************/
        
    /* Grab rcvd PCB */
    rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800564a:	4b44      	ldr	r3, [pc, #272]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	717b      	strb	r3, [r7, #5]
    /*******************************************************************************/
    /* When DID=0 PCD may or may not use DID, therefore check whether current PCD request 
     * has DID present to be reflected on max INF length                         #454  */            
        
    /* ReCalculate Header Length */
    gIsoDep.hdrLen   = RFAL_ISODEP_PCB_LEN;
 8005652:	4b42      	ldr	r3, [pc, #264]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005654:	2201      	movs	r2, #1
 8005656:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    gIsoDep.hdrLen  += (uint8_t)( (isoDep_PCBhasDID(rxPCB)) ? RFAL_ISODEP_DID_LEN : 0U );
 800565a:	4b40      	ldr	r3, [pc, #256]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800565c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005660:	797a      	ldrb	r2, [r7, #5]
 8005662:	f002 0208 	and.w	r2, r2, #8
 8005666:	2a00      	cmp	r2, #0
 8005668:	bf14      	ite	ne
 800566a:	2201      	movne	r2, #1
 800566c:	2200      	moveq	r2, #0
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	4413      	add	r3, r2
 8005672:	b2da      	uxtb	r2, r3
 8005674:	4b39      	ldr	r3, [pc, #228]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005676:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    gIsoDep.hdrLen  += (uint8_t)( (isoDep_PCBhasNAD(rxPCB)) ? RFAL_ISODEP_NAD_LEN : 0U );
 800567a:	4b38      	ldr	r3, [pc, #224]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800567c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005680:	797a      	ldrb	r2, [r7, #5]
 8005682:	f002 0204 	and.w	r2, r2, #4
 8005686:	2a00      	cmp	r2, #0
 8005688:	bf14      	ite	ne
 800568a:	2201      	movne	r2, #1
 800568c:	2200      	moveq	r2, #0
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	4413      	add	r3, r2
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b31      	ldr	r3, [pc, #196]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005696:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        
    /* Store whether last PCD block had DID. for PICC special handling of DID = 0 */
    if( gIsoDep.did == RFAL_ISODEP_DID_00 )
 800569a:	4b30      	ldr	r3, [pc, #192]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800569c:	78db      	ldrb	r3, [r3, #3]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d16a      	bne.n	8005778 <isoDepDataExchangePICC+0x2b8>
 80056a2:	e05d      	b.n	8005760 <isoDepDataExchangePICC+0x2a0>
                    return ret;
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	e2ee      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            if( !isoDepTimerisExpired( gIsoDep.WTXTimer ) )       /* Do nothing until WTX timer has expired */
 80056a8:	4b2c      	ldr	r3, [pc, #176]	; (800575c <isoDepDataExchangePICC+0x29c>)
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	4618      	mov	r0, r3
 80056ae:	f00c fce7 	bl	8012080 <timerIsExpired>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f083 0301 	eor.w	r3, r3, #1
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <isoDepDataExchangePICC+0x202>
               return ERR_BUSY;
 80056be:	2302      	movs	r3, #2
 80056c0:	e2e1      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            gIsoDep.isWait4WTX = true;
 80056c2:	4b26      	ldr	r3, [pc, #152]	; (800575c <isoDepDataExchangePICC+0x29c>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            gIsoDep.lastWTXM = (uint8_t)isoDep_WTXMListenerMax( gIsoDep.fwt );
 80056ca:	4b24      	ldr	r3, [pc, #144]	; (800575c <isoDepDataExchangePICC+0x29c>)
 80056cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <isoDepDataExchangePICC+0x218>
 80056d4:	2307      	movs	r3, #7
 80056d6:	e000      	b.n	80056da <isoDepDataExchangePICC+0x21a>
 80056d8:	2308      	movs	r3, #8
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fad4 	bl	8004c88 <rfalIsoDepFWI2FWT>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <isoDepDataExchangePICC+0x29c>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b3a      	cmp	r3, #58	; 0x3a
 80056ee:	d811      	bhi.n	8005714 <isoDepDataExchangePICC+0x254>
 80056f0:	4b1a      	ldr	r3, [pc, #104]	; (800575c <isoDepDataExchangePICC+0x29c>)
 80056f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <isoDepDataExchangePICC+0x23e>
 80056fa:	2307      	movs	r3, #7
 80056fc:	e000      	b.n	8005700 <isoDepDataExchangePICC+0x240>
 80056fe:	2308      	movs	r3, #8
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fac1 	bl	8004c88 <rfalIsoDepFWI2FWT>
 8005706:	4602      	mov	r2, r0
 8005708:	4b14      	ldr	r3, [pc, #80]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	b2db      	uxtb	r3, r3
 8005712:	e000      	b.n	8005716 <isoDepDataExchangePICC+0x256>
 8005714:	233b      	movs	r3, #59	; 0x3b
 8005716:	4a11      	ldr	r2, [pc, #68]	; (800575c <isoDepDataExchangePICC+0x29c>)
 8005718:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM ) );
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800571e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005722:	4619      	mov	r1, r3
 8005724:	2002      	movs	r0, #2
 8005726:	f7fe fe27 	bl	8004378 <isoDepHandleControlMsg>
 800572a:	4603      	mov	r3, r0
 800572c:	80fb      	strh	r3, [r7, #6]
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <isoDepDataExchangePICC+0x278>
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	e2a6      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            gIsoDep.state = ISODEP_ST_PICC_RX;                    /* Go back to Rx to process WTX ack        */
 8005738:	4b08      	ldr	r3, [pc, #32]	; (800575c <isoDepDataExchangePICC+0x29c>)
 800573a:	2206      	movs	r2, #6
 800573c:	701a      	strb	r2, [r3, #0]
            return ERR_BUSY;
 800573e:	2302      	movs	r3, #2
 8005740:	e2a1      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            if( rfalIsTransceiveInRx() )        /* Wait until DSL response has been sent */
 8005742:	f008 f99f 	bl	800da84 <rfalIsTransceiveInRx>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <isoDepDataExchangePICC+0x294>
                rfalIsoDepInitialize();         /* Session finished reInit vars */
 800574c:	f7fe ff32 	bl	80045b4 <rfalIsoDepInitialize>
                return ERR_SLEEP_REQ;           /* Notify Deselect request      */
 8005750:	2320      	movs	r3, #32
 8005752:	e298      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            return ERR_BUSY;
 8005754:	2302      	movs	r3, #2
 8005756:	e296      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            return ERR_INTERNAL;
 8005758:	230c      	movs	r3, #12
 800575a:	e294      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
 800575c:	200009ec 	.word	0x200009ec
    {
        gIsoDep.lastDID00 = ( (isoDep_PCBhasDID(rxPCB)) ? true : false );
 8005760:	797b      	ldrb	r3, [r7, #5]
 8005762:	08db      	lsrs	r3, r3, #3
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4ba6      	ldr	r3, [pc, #664]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    
    /*******************************************************************************/
    /* Check rcvd msg length, cannot be less then the expected header    OR        * 
     * if the rcvd msg exceeds our announced frame size (FSD)                      */
    if( ((*gIsoDep.rxLen) < gIsoDep.hdrLen) || ((*gIsoDep.rxLen) > (gIsoDep.ourFsx - ISODEP_CRC_LEN)) )
 8005778:	4ba4      	ldr	r3, [pc, #656]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	881a      	ldrh	r2, [r3, #0]
 800577e:	4ba3      	ldr	r3, [pc, #652]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005780:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005784:	b29b      	uxth	r3, r3
 8005786:	429a      	cmp	r2, r3
 8005788:	d308      	bcc.n	800579c <isoDepDataExchangePICC+0x2dc>
 800578a:	4ba0      	ldr	r3, [pc, #640]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	4b9e      	ldr	r3, [pc, #632]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005796:	3b02      	subs	r3, #2
 8005798:	429a      	cmp	r2, r3
 800579a:	d913      	bls.n	80057c4 <isoDepDataExchangePICC+0x304>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800579c:	4b9b      	ldr	r3, [pc, #620]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800579e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80057a2:	4b9a      	ldr	r3, [pc, #616]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80057a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a8:	f04f 31ff 	mov.w	r1, #4294967295
 80057ac:	9102      	str	r1, [sp, #8]
 80057ae:	2100      	movs	r1, #0
 80057b0:	9101      	str	r1, [sp, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	f240 1303 	movw	r3, #259	; 0x103
 80057b8:	2100      	movs	r1, #0
 80057ba:	2000      	movs	r0, #0
 80057bc:	f008 f972 	bl	800daa4 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* ERR_PROTO Ignore this protocol request */
 80057c0:	2302      	movs	r3, #2
 80057c2:	e260      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
    }
    
    /* If we are expecting DID, check if PCB signals its presence and if device ID match OR
     * If our DID=0 and DID is sent but with an incorrect value                              */
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   || 
 80057c4:	4b91      	ldr	r3, [pc, #580]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80057c6:	78db      	ldrb	r3, [r3, #3]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <isoDepDataExchangePICC+0x326>
 80057cc:	797b      	ldrb	r3, [r7, #5]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <isoDepDataExchangePICC+0x344>
 80057d6:	4b8d      	ldr	r3, [pc, #564]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80057d8:	78da      	ldrb	r2, [r3, #3]
 80057da:	4b8c      	ldr	r3, [pc, #560]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	3301      	adds	r3, #1
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d10e      	bne.n	8005804 <isoDepDataExchangePICC+0x344>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    isoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 80057e6:	4b89      	ldr	r3, [pc, #548]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80057e8:	78db      	ldrb	r3, [r3, #3]
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   || 
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11e      	bne.n	800582c <isoDepDataExchangePICC+0x36c>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    isoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 80057ee:	797b      	ldrb	r3, [r7, #5]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d019      	beq.n	800582c <isoDepDataExchangePICC+0x36c>
 80057f8:	4b84      	ldr	r3, [pc, #528]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d013      	beq.n	800582c <isoDepDataExchangePICC+0x36c>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 8005804:	4b81      	ldr	r3, [pc, #516]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005806:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800580a:	4b80      	ldr	r3, [pc, #512]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800580c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005810:	f04f 31ff 	mov.w	r1, #4294967295
 8005814:	9102      	str	r1, [sp, #8]
 8005816:	2100      	movs	r1, #0
 8005818:	9101      	str	r1, [sp, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f240 1303 	movw	r3, #259	; 0x103
 8005820:	2100      	movs	r1, #0
 8005822:	2000      	movs	r0, #0
 8005824:	f008 f93e 	bl	800daa4 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* Ignore a wrong DID request */
 8005828:	2302      	movs	r3, #2
 800582a:	e22c      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
    }
    
    /* If we aren't expecting NAD and it's received */
    if( (gIsoDep.nad == RFAL_ISODEP_NO_NAD) && isoDep_PCBhasNAD(rxPCB) )
 800582c:	4b77      	ldr	r3, [pc, #476]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800582e:	791b      	ldrb	r3, [r3, #4]
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d118      	bne.n	8005866 <isoDepDataExchangePICC+0x3a6>
 8005834:	797b      	ldrb	r3, [r7, #5]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d013      	beq.n	8005866 <isoDepDataExchangePICC+0x3a6>
    {
        isoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800583e:	4b73      	ldr	r3, [pc, #460]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005840:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005844:	4b71      	ldr	r3, [pc, #452]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800584a:	f04f 31ff 	mov.w	r1, #4294967295
 800584e:	9102      	str	r1, [sp, #8]
 8005850:	2100      	movs	r1, #0
 8005852:	9101      	str	r1, [sp, #4]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	f240 1303 	movw	r3, #259	; 0x103
 800585a:	2100      	movs	r1, #0
 800585c:	2000      	movs	r0, #0
 800585e:	f008 f921 	bl	800daa4 <rfalTransceiveBlockingTx>
        return ERR_BUSY;  /* Ignore a unexpected NAD request */
 8005862:	2302      	movs	r3, #2
 8005864:	e20f      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
    }
        
    /*******************************************************************************/
    /* Process S-Block                                                             */
    /*******************************************************************************/
    if( isoDep_PCBisSBlock(rxPCB) )
 8005866:	797b      	ldrb	r3, [r7, #5]
 8005868:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 800586c:	2bc2      	cmp	r3, #194	; 0xc2
 800586e:	f040 8084 	bne.w	800597a <isoDepDataExchangePICC+0x4ba>
    {
       /* Check if is a Wait Time eXtension */
       if( isoDep_PCBisSWTX(rxPCB) )
 8005872:	797b      	ldrb	r3, [r7, #5]
 8005874:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8005878:	2bc2      	cmp	r3, #194	; 0xc2
 800587a:	d158      	bne.n	800592e <isoDepDataExchangePICC+0x46e>
 800587c:	797b      	ldrb	r3, [r7, #5]
 800587e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005882:	2b30      	cmp	r3, #48	; 0x30
 8005884:	d153      	bne.n	800592e <isoDepDataExchangePICC+0x46e>
       {
            /* Check if we're expecting a S-WTX */
            if( isoDep_PCBisWTX( gIsoDep.lastPCB ) )
 8005886:	4b61      	ldr	r3, [pc, #388]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800588c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005890:	2b30      	cmp	r3, #48	; 0x30
 8005892:	d14c      	bne.n	800592e <isoDepDataExchangePICC+0x46e>
            {
                /* Digital 1.1  15.2.2.11 S(WTX) Ack with different WTXM -> Protocol Error  *
                 *              Power level indication also should be set to 0              */
                if( ( gIsoDep.rxBuf[ gIsoDep.hdrLen ] == gIsoDep.lastWTXM) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SWTX_INF_LEN) )
 8005894:	4b5d      	ldr	r3, [pc, #372]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4a5c      	ldr	r2, [pc, #368]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800589a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800589e:	4413      	add	r3, r2
 80058a0:	781a      	ldrb	r2, [r3, #0]
 80058a2:	4b5a      	ldr	r3, [pc, #360]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d140      	bne.n	800592e <isoDepDataExchangePICC+0x46e>
 80058ac:	4b57      	ldr	r3, [pc, #348]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d136      	bne.n	800592e <isoDepDataExchangePICC+0x46e>
                {
                    /* Clear waiting for RTOX Ack Flag */
                    gIsoDep.isWait4WTX = false;
 80058c0:	4b52      	ldr	r3, [pc, #328]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                    
                    /* Check if a Tx is already pending */
                    if( gIsoDep.isTxPending )
 80058c8:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <isoDepDataExchangePICC+0x41c>
                    {
                        /* Has a pending Tx, go immediately to TX */ 
                        gIsoDep.state = ISODEP_ST_PICC_TX;
 80058d2:	4b4e      	ldr	r3, [pc, #312]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058d4:	2209      	movs	r2, #9
 80058d6:	701a      	strb	r2, [r3, #0]
                        return ERR_BUSY;
 80058d8:	2302      	movs	r3, #2
 80058da:	e1d4      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
                    }
                    
                    /* Set WTX timer */
                    isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( (gIsoDep.lastWTXM * rfalConv1fcToMs( gIsoDep.fwt )) ) );
 80058dc:	4b4b      	ldr	r3, [pc, #300]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	4a49      	ldr	r2, [pc, #292]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058e6:	68d2      	ldr	r2, [r2, #12]
 80058e8:	4949      	ldr	r1, [pc, #292]	; (8005a10 <isoDepDataExchangePICC+0x550>)
 80058ea:	fba1 1202 	umull	r1, r2, r1, r2
 80058ee:	0b12      	lsrs	r2, r2, #12
 80058f0:	b292      	uxth	r2, r2
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80058fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058fe:	4618      	mov	r0, r3
 8005900:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4942      	ldr	r1, [pc, #264]	; (8005a10 <isoDepDataExchangePICC+0x550>)
 8005906:	fba1 1303 	umull	r1, r3, r1, r3
 800590a:	0b1b      	lsrs	r3, r3, #12
 800590c:	fb03 f300 	mul.w	r3, r3, r0
 8005910:	08db      	lsrs	r3, r3, #3
 8005912:	b29b      	uxth	r3, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	4618      	mov	r0, r3
 800591a:	f00c fba3 	bl	8012064 <timerCalculateTimer>
 800591e:	4603      	mov	r3, r0
 8005920:	4a3a      	ldr	r2, [pc, #232]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005922:	6393      	str	r3, [r2, #56]	; 0x38
                    
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 8005924:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005926:	2207      	movs	r2, #7
 8005928:	701a      	strb	r2, [r3, #0]
                    return ERR_BUSY;
 800592a:	2302      	movs	r3, #2
 800592c:	e1ab      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            }
            /* Unexpected/Incorrect S-WTX, fall into reRenable */
       }
       
       /* Check if is a Deselect request */
       if( isoDep_PCBisSDeselect(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SDSL_INF_LEN) )
 800592e:	797b      	ldrb	r3, [r7, #5]
 8005930:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8005934:	2bc2      	cmp	r3, #194	; 0xc2
 8005936:	f040 8195 	bne.w	8005c64 <isoDepDataExchangePICC+0x7a4>
 800593a:	797b      	ldrb	r3, [r7, #5]
 800593c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005940:	2b00      	cmp	r3, #0
 8005942:	f040 818f 	bne.w	8005c64 <isoDepDataExchangePICC+0x7a4>
 8005946:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	881a      	ldrh	r2, [r3, #0]
 800594c:	4b2f      	ldr	r3, [pc, #188]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800594e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005952:	b29b      	uxth	r3, r3
 8005954:	429a      	cmp	r2, r3
 8005956:	f040 8185 	bne.w	8005c64 <isoDepDataExchangePICC+0x7a4>
       {
           EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800595a:	2100      	movs	r1, #0
 800595c:	2003      	movs	r0, #3
 800595e:	f7fe fd0b 	bl	8004378 <isoDepHandleControlMsg>
 8005962:	4603      	mov	r3, r0
 8005964:	80fb      	strh	r3, [r7, #6]
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <isoDepDataExchangePICC+0x4b0>
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	e18a      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
           
           /* S-DSL transmission ongoing, wait until complete */
           gIsoDep.state = ISODEP_ST_PICC_SDSL;
 8005970:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005972:	2208      	movs	r2, #8
 8005974:	701a      	strb	r2, [r3, #0]
           return ERR_BUSY;
 8005976:	2302      	movs	r3, #2
 8005978:	e185      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
    }
    
    /*******************************************************************************/
    /* Process R-Block                                                             */
    /*******************************************************************************/
    else if( isoDep_PCBisRBlock(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_RBLOCK_INF_LEN))
 800597a:	797b      	ldrb	r3, [r7, #5]
 800597c:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8005980:	2ba2      	cmp	r3, #162	; 0xa2
 8005982:	f040 809f 	bne.w	8005ac4 <isoDepDataExchangePICC+0x604>
 8005986:	4b21      	ldr	r3, [pc, #132]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 800598e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005992:	b29b      	uxth	r3, r3
 8005994:	429a      	cmp	r2, r3
 8005996:	f040 8095 	bne.w	8005ac4 <isoDepDataExchangePICC+0x604>
    {
        if( isoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 800599a:	797b      	ldrb	r3, [r7, #5]
 800599c:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 80059a0:	2ba2      	cmp	r3, #162	; 0xa2
 80059a2:	d160      	bne.n	8005a66 <isoDepDataExchangePICC+0x5a6>
 80059a4:	797b      	ldrb	r3, [r7, #5]
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d15b      	bne.n	8005a66 <isoDepDataExchangePICC+0x5a6>
        {
            if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )      /* Check block number  */
 80059ae:	797b      	ldrb	r3, [r7, #5]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80059b6:	7892      	ldrb	r2, [r2, #2]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10e      	bne.n	80059da <isoDepDataExchangePICC+0x51a>
            {
                /* Rule 11 - R(ACK) with current bn -> re-transmit */
                if( !isoDep_PCBisIBlock(gIsoDep.lastPCB) )
 80059bc:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80059be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c2:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d002      	beq.n	80059d0 <isoDepDataExchangePICC+0x510>
                {
                    isoDepReSendControlMsg();
 80059ca:	f7fe fd99 	bl	8004500 <isoDepReSendControlMsg>
 80059ce:	e002      	b.n	80059d6 <isoDepDataExchangePICC+0x516>
                }
                else
                {
                    gIsoDep.state = ISODEP_ST_PICC_TX;
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80059d2:	2209      	movs	r2, #9
 80059d4:	701a      	strb	r2, [r3, #0]
                }
                
                return ERR_BUSY;
 80059d6:	2302      	movs	r3, #2
 80059d8:	e155      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            }
            else
            {
                if( !gIsoDep.isTxChaining )
 80059da:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80059dc:	7d9b      	ldrb	r3, [r3, #22]
 80059de:	f083 0301 	eor.w	r3, r3, #1
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <isoDepDataExchangePICC+0x554>
                {
                    /* Rule 13 violation R(ACK) without performing chaining */
                    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 80059e8:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <isoDepDataExchangePICC+0x54c>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f04f 31ff 	mov.w	r1, #4294967295
 80059f4:	9102      	str	r1, [sp, #8]
 80059f6:	2100      	movs	r1, #0
 80059f8:	9101      	str	r1, [sp, #4]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	f240 1303 	movw	r3, #259	; 0x103
 8005a00:	2100      	movs	r1, #0
 8005a02:	2000      	movs	r0, #0
 8005a04:	f008 f84e 	bl	800daa4 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e13c      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
 8005a0c:	200009ec 	.word	0x200009ec
 8005a10:	4d542005 	.word	0x4d542005
                }
                
                /* Rule E -  R(ACK) with not current bn -> toogle bn */
                isoDep_ToggleBN( gIsoDep.blockNumber );
 8005a14:	4b9e      	ldr	r3, [pc, #632]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a16:	789b      	ldrb	r3, [r3, #2]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b99      	ldr	r3, [pc, #612]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a2c:	709a      	strb	r2, [r3, #2]

                /* This block has been transmitted and acknowledged, perform WTX until next data is provided  */

                /* Rule 9 - PICC is allowed to send an S(WTX) instead of an I-block or an R(ACK) */
                isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 8005a2e:	4b98      	ldr	r3, [pc, #608]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	4a98      	ldr	r2, [pc, #608]	; (8005c94 <isoDepDataExchangePICC+0x7d4>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	0b1b      	lsrs	r3, r3, #12
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	4b94      	ldr	r3, [pc, #592]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4994      	ldr	r1, [pc, #592]	; (8005c94 <isoDepDataExchangePICC+0x7d4>)
 8005a42:	fba1 1303 	umull	r1, r3, r1, r3
 8005a46:	0b1b      	lsrs	r3, r3, #12
 8005a48:	08db      	lsrs	r3, r3, #3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4618      	mov	r0, r3
 8005a52:	f00c fb07 	bl	8012064 <timerCalculateTimer>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4a8d      	ldr	r2, [pc, #564]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a5a:	6393      	str	r3, [r2, #56]	; 0x38
                gIsoDep.state = ISODEP_ST_PICC_SWTX;
 8005a5c:	4b8c      	ldr	r3, [pc, #560]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a5e:	2207      	movs	r2, #7
 8005a60:	701a      	strb	r2, [r3, #0]
                
                /* Rule 13 - R(ACK) with not current bn -> continue chaining */
                return ERR_NONE;                                 /* This block has been transmitted */
 8005a62:	2300      	movs	r3, #0
 8005a64:	e10f      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            }
        }
        else if( isoDep_PCBisRNAK(rxPCB) )                       /* Check if is a R-NACK */
 8005a66:	797b      	ldrb	r3, [r7, #5]
 8005a68:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8005a6c:	2ba2      	cmp	r3, #162	; 0xa2
 8005a6e:	f040 80f8 	bne.w	8005c62 <isoDepDataExchangePICC+0x7a2>
 8005a72:	797b      	ldrb	r3, [r7, #5]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80f2 	beq.w	8005c62 <isoDepDataExchangePICC+0x7a2>
        {
            if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Check block number  */
 8005a7e:	797b      	ldrb	r3, [r7, #5]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	4a82      	ldr	r2, [pc, #520]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a86:	7892      	ldrb	r2, [r2, #2]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d10e      	bne.n	8005aaa <isoDepDataExchangePICC+0x5ea>
            {
                /* Rule 11 - R(NAK) with current bn -> re-transmit last x-Block */
                if( !isoDep_PCBisIBlock(gIsoDep.lastPCB) )
 8005a8c:	4b80      	ldr	r3, [pc, #512]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a92:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d002      	beq.n	8005aa0 <isoDepDataExchangePICC+0x5e0>
                {
                    isoDepReSendControlMsg();
 8005a9a:	f7fe fd31 	bl	8004500 <isoDepReSendControlMsg>
 8005a9e:	e002      	b.n	8005aa6 <isoDepDataExchangePICC+0x5e6>
                }
                else
                {
                    gIsoDep.state = ISODEP_ST_PICC_TX;
 8005aa0:	4b7b      	ldr	r3, [pc, #492]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005aa2:	2209      	movs	r2, #9
 8005aa4:	701a      	strb	r2, [r3, #0]
                }
                
                return ERR_BUSY;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e0ed      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
            }
            else
            {
                /* Rule 12 - R(NAK) with not current bn -> R(ACK) */
                EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8005aaa:	2100      	movs	r1, #0
 8005aac:	2000      	movs	r0, #0
 8005aae:	f7fe fc63 	bl	8004378 <isoDepHandleControlMsg>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	80fb      	strh	r3, [r7, #6]
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <isoDepDataExchangePICC+0x600>
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	e0e2      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
                
                return ERR_BUSY;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e0e0      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
    }
    
    /*******************************************************************************/
    /* Process I-Block                                                             */
    /*******************************************************************************/
    else if( isoDep_PCBisIBlock(rxPCB) )
 8005ac4:	797b      	ldrb	r3, [r7, #5]
 8005ac6:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	f040 80ca 	bne.w	8005c64 <isoDepDataExchangePICC+0x7a4>
    {
        /* Rule D - When an I-block is received, the PICC shall toggle its block number before sending a block */
        isoDep_ToggleBN( gIsoDep.blockNumber );
 8005ad0:	4b6f      	ldr	r3, [pc, #444]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005ad2:	789b      	ldrb	r3, [r3, #2]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4b6a      	ldr	r3, [pc, #424]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005ae8:	709a      	strb	r2, [r3, #2]
        
        /*******************************************************************************/
        /* Check if the block number is the one expected                               */
        /* Check if PCD sent an I-Block instead ACK/NACK when we are chaining          */
        if( (isoDep_GetBN(rxPCB) != gIsoDep.blockNumber) || (gIsoDep.isTxChaining) )
 8005aea:	797b      	ldrb	r3, [r7, #5]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	4a67      	ldr	r2, [pc, #412]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005af2:	7892      	ldrb	r2, [r2, #2]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d103      	bne.n	8005b00 <isoDepDataExchangePICC+0x640>
 8005af8:	4b65      	ldr	r3, [pc, #404]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005afa:	7d9b      	ldrb	r3, [r3, #22]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01e      	beq.n	8005b3e <isoDepDataExchangePICC+0x67e>
        {
            /* Remain in the same Block Number */
            isoDep_ToggleBN( gIsoDep.blockNumber );
 8005b00:	4b63      	ldr	r3, [pc, #396]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b02:	789b      	ldrb	r3, [r3, #2]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf0c      	ite	eq
 8005b0e:	2301      	moveq	r3, #1
 8005b10:	2300      	movne	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b5e      	ldr	r3, [pc, #376]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b18:	709a      	strb	r2, [r3, #2]
            
            /* ISO 14443-4 7.5.6.2 & Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */                                  
            isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 8005b1a:	4b5d      	ldr	r3, [pc, #372]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b1c:	69da      	ldr	r2, [r3, #28]
 8005b1e:	4b5c      	ldr	r3, [pc, #368]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f04f 31ff 	mov.w	r1, #4294967295
 8005b26:	9102      	str	r1, [sp, #8]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	9101      	str	r1, [sp, #4]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	f240 1303 	movw	r3, #259	; 0x103
 8005b32:	2100      	movs	r1, #0
 8005b34:	2000      	movs	r0, #0
 8005b36:	f007 ffb5 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e0a3      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
        }
        
        /*******************************************************************************/
        /* is PCD performing chaining  ?                                               */
        if( isoDep_PCBisChaining(rxPCB) )
 8005b3e:	797b      	ldrb	r3, [r7, #5]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d03e      	beq.n	8005bc6 <isoDepDataExchangePICC+0x706>
        {
            gIsoDep.isRxChaining  = true;
 8005b48:	4b51      	ldr	r3, [pc, #324]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	75da      	strb	r2, [r3, #23]
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 8005b4e:	4b50      	ldr	r3, [pc, #320]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
                        
            EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8005b56:	2100      	movs	r1, #0
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f7fe fc0d 	bl	8004378 <isoDepHandleControlMsg>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	80fb      	strh	r3, [r7, #6]
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <isoDepDataExchangePICC+0x6ac>
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	e08c      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
                            
            /* Received I-Block with chaining, send current data to DH */
            
            /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
            *gIsoDep.rxLen -= gIsoDep.hdrLen;
 8005b6c:	4b48      	ldr	r3, [pc, #288]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	8819      	ldrh	r1, [r3, #0]
 8005b72:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	4b45      	ldr	r3, [pc, #276]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	1a8a      	subs	r2, r1, r2
 8005b80:	b292      	uxth	r2, r2
 8005b82:	801a      	strh	r2, [r3, #0]
            if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 8005b84:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b86:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005b8a:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d016      	beq.n	8005bc2 <isoDepDataExchangePICC+0x702>
 8005b94:	4b3e      	ldr	r3, [pc, #248]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d011      	beq.n	8005bc2 <isoDepDataExchangePICC+0x702>
            {
                ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 8005b9e:	4b3c      	ldr	r3, [pc, #240]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4a3b      	ldr	r2, [pc, #236]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005ba4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005ba8:	1898      	adds	r0, r3, r2
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4a38      	ldr	r2, [pc, #224]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bb0:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8005bb4:	1899      	adds	r1, r3, r2
 8005bb6:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f00c fabb 	bl	8012138 <memmove>
            }
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/            
 8005bc2:	230d      	movs	r3, #13
 8005bc4:	e05f      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
        }
        
        
        /*******************************************************************************/
        /* PCD is not performing chaining                                              */
        gIsoDep.isRxChaining  = false; /* clear PCD chaining flag */
 8005bc6:	4b32      	ldr	r3, [pc, #200]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	75da      	strb	r2, [r3, #23]
        *gIsoDep.rxChaining   = false; /* Output Parameter        */
 8005bcc:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
        
        /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
        *gIsoDep.rxLen -= gIsoDep.hdrLen;
 8005bd4:	4b2e      	ldr	r3, [pc, #184]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	8819      	ldrh	r1, [r3, #0]
 8005bda:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bdc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	1a8a      	subs	r2, r1, r2
 8005be8:	b292      	uxth	r2, r2
 8005bea:	801a      	strh	r2, [r3, #0]
        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 8005bec:	4b28      	ldr	r3, [pc, #160]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bee:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005bf2:	4b27      	ldr	r3, [pc, #156]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d016      	beq.n	8005c2a <isoDepDataExchangePICC+0x76a>
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d011      	beq.n	8005c2a <isoDepDataExchangePICC+0x76a>
        {
            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 8005c06:	4b22      	ldr	r3, [pc, #136]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	4a21      	ldr	r2, [pc, #132]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c0c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005c10:	1898      	adds	r0, r3, r2
 8005c12:	4b1f      	ldr	r3, [pc, #124]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c18:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8005c1c:	1899      	adds	r1, r3, r2
 8005c1e:	4b1c      	ldr	r3, [pc, #112]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	f00c fa87 	bl	8012138 <memmove>
        }
        
        
        /*******************************************************************************/
        /* Reception done, send data back and start WTX timer                          */
        isoDepTimerStart( gIsoDep.WTXTimer, isoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 8005c2a:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <isoDepDataExchangePICC+0x7d4>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	0b1b      	lsrs	r3, r3, #12
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4915      	ldr	r1, [pc, #84]	; (8005c94 <isoDepDataExchangePICC+0x7d4>)
 8005c3e:	fba1 1303 	umull	r1, r3, r1, r3
 8005c42:	0b1b      	lsrs	r3, r3, #12
 8005c44:	08db      	lsrs	r3, r3, #3
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f00c fa09 	bl	8012064 <timerCalculateTimer>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4a0e      	ldr	r2, [pc, #56]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c56:	6393      	str	r3, [r2, #56]	; 0x38
        
        gIsoDep.state = ISODEP_ST_PICC_SWTX;
 8005c58:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c5a:	2207      	movs	r2, #7
 8005c5c:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e011      	b.n	8005c86 <isoDepDataExchangePICC+0x7c6>
        if( isoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 8005c62:	bf00      	nop
        /* MISRA 15.7 - Empty else */
    }
    
    /* Unexpected/Unknown Block */
    /* ISO 14443-4 7.5.6.2 & Digital 1.1 - 15.2.6.2  The CE SHALL NOT attempt error recovery and remains in Rx mode upon Transmission or a Protocol Error */
    isoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <isoDepDataExchangePICC+0x7d0>)
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c70:	9102      	str	r1, [sp, #8]
 8005c72:	2100      	movs	r1, #0
 8005c74:	9101      	str	r1, [sp, #4]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	f240 1303 	movw	r3, #259	; 0x103
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	2000      	movs	r0, #0
 8005c80:	f007 ff10 	bl	800daa4 <rfalTransceiveBlockingTx>
    
    return ERR_BUSY;
 8005c84:	2302      	movs	r3, #2
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd90      	pop	{r4, r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200009ec 	.word	0x200009ec
 8005c94:	4d542005 	.word	0x4d542005

08005c98 <rfalIsoDepStartRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
static ReturnCode rfalIsoDepStartRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats, uint8_t *atsLen )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08c      	sub	sp, #48	; 0x30
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60ba      	str	r2, [r7, #8]
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73fb      	strb	r3, [r7, #15]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	73bb      	strb	r3, [r7, #14]
    rfalTransceiveContext ctx;
    
    if( ats == NULL)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <rfalIsoDepStartRATS+0x1c>
    {
        return ERR_PARAM;
 8005cb0:	2307      	movs	r3, #7
 8005cb2:	e02c      	b.n	8005d0e <rfalIsoDepStartRATS+0x76>
    }
    
    gIsoDep.rxBuf   = (uint8_t*) ats;
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <rfalIsoDepStartRATS+0x80>)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61d3      	str	r3, [r2, #28]
    gIsoDep.rxLen8  = atsLen;
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <rfalIsoDepStartRATS+0x80>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6793      	str	r3, [r2, #120]	; 0x78
    gIsoDep.did     = DID;
 8005cc0:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <rfalIsoDepStartRATS+0x80>)
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	70d3      	strb	r3, [r2, #3]
    
    /*******************************************************************************/
    /* Compose RATS */
    gIsoDep.actv.ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <rfalIsoDepStartRATS+0x80>)
 8005cc8:	22e0      	movs	r2, #224	; 0xe0
 8005cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <rfalIsoDepStartRATS+0x80>)
 8005ce2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <rfalIsoDepStartRATS+0x84>)
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	2310      	movs	r3, #16
 8005cec:	833b      	strh	r3, [r7, #24]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	23a0      	movs	r3, #160	; 0xa0
 8005cf4:	843b      	strh	r3, [r7, #32]
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <rfalIsoDepStartRATS+0x88>)
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <rfalIsoDepStartRATS+0x8c>)
 8005d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    return rfalStartTransceive( &ctx );
 8005d02:	f107 0314 	add.w	r3, r7, #20
 8005d06:	4618      	mov	r0, r3
 8005d08:	f007 fd64 	bl	800d7d4 <rfalStartTransceive>
 8005d0c:	4603      	mov	r3, r0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200009ec 	.word	0x200009ec
 8005d1c:	20000a38 	.word	0x20000a38
 8005d20:	20000a0e 	.word	0x20000a0e
 8005d24:	00046780 	.word	0x00046780

08005d28 <rfalIsoDepGetRATSStatus>:


/*******************************************************************************/
static ReturnCode rfalIsoDepGetRATSStatus( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    ret = rfalGetTransceiveStatus();
 8005d2e:	f007 ff81 	bl	800dc34 <rfalGetTransceiveStatus>
 8005d32:	4603      	mov	r3, r0
 8005d34:	80fb      	strh	r3, [r7, #6]
    if( ret == ERR_NONE )
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d12e      	bne.n	8005d9a <rfalIsoDepGetRATSStatus+0x72>
    {
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d3e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005d40:	3307      	adds	r3, #7
 8005d42:	08db      	lsrs	r3, r3, #3
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d48:	845a      	strh	r2, [r3, #34]	; 0x22
        
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATS_MIN_LEN) || (gIsoDep.rxBufLen > RFAL_ISODEP_ATS_MAX_LEN) || ( gIsoDep.rxBuf[RFAL_ISODEP_ATS_TL_POS] != gIsoDep.rxBufLen) )
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <rfalIsoDepGetRATSStatus+0x42>
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d54:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005d56:	2b14      	cmp	r3, #20
 8005d58:	d807      	bhi.n	8005d6a <rfalIsoDepGetRATSStatus+0x42>
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d001      	beq.n	8005d6e <rfalIsoDepGetRATSStatus+0x46>
        {
            return ERR_PROTO;
 8005d6a:	230b      	movs	r3, #11
 8005d6c:	e016      	b.n	8005d9c <rfalIsoDepGetRATSStatus+0x74>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t) (gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d70:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe ffa5 	bl	8004cc8 <rfalIsoDepFSxI2FSx>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d84:	84da      	strh	r2, [r3, #38]	; 0x26
        
        /* Check and assign if ATS length was requested (length also available on TL) */
        if( gIsoDep.rxLen8 != NULL )
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <rfalIsoDepGetRATSStatus+0x72>
        {
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d90:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8005d92:	4b04      	ldr	r3, [pc, #16]	; (8005da4 <rfalIsoDepGetRATSStatus+0x7c>)
 8005d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
        }
    }
    
    return ret;
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	200009ec 	.word	0x200009ec

08005da8 <rfalIsoDepStartPPS>:
}


/*******************************************************************************/
static ReturnCode rfalIsoDepStartPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	4603      	mov	r3, r0
 8005db2:	71fb      	strb	r3, [r7, #7]
 8005db4:	460b      	mov	r3, r1
 8005db6:	71bb      	strb	r3, [r7, #6]
 8005db8:	4613      	mov	r3, r2
 8005dba:	717b      	strb	r3, [r7, #5]
    rfalTransceiveContext ctx;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d008      	beq.n	8005dd4 <rfalIsoDepStartPPS+0x2c>
 8005dc2:	79bb      	ldrb	r3, [r7, #6]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d805      	bhi.n	8005dd4 <rfalIsoDepStartPPS+0x2c>
 8005dc8:	797b      	ldrb	r3, [r7, #5]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d802      	bhi.n	8005dd4 <rfalIsoDepStartPPS+0x2c>
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	2b0e      	cmp	r3, #14
 8005dd2:	d901      	bls.n	8005dd8 <rfalIsoDepStartPPS+0x30>
    {
        return ERR_PARAM;
 8005dd4:	2307      	movs	r3, #7
 8005dd6:	e032      	b.n	8005e3e <rfalIsoDepStartPPS+0x96>
    }
        
    gIsoDep.rxBuf   = (uint8_t*) ppsRes;
 8005dd8:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <rfalIsoDepStartPPS+0xa0>)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	61d3      	str	r3, [r2, #28]
    
    /*******************************************************************************/
    /* Compose PPS Request */
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <rfalIsoDepStartPPS+0xa0>)
 8005dee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8005df2:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <rfalIsoDepStartPPS+0xa0>)
 8005df4:	2211      	movs	r2, #17
 8005df6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    gIsoDep.actv.ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8005dfa:	79bb      	ldrb	r3, [r7, #6]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	b25a      	sxtb	r2, r3
 8005e00:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <rfalIsoDepStartPPS+0xa0>)
 8005e12:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8005e16:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <rfalIsoDepStartPPS+0xa4>)
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	2318      	movs	r3, #24
 8005e1c:	823b      	strh	r3, [r7, #16]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	2308      	movs	r3, #8
 8005e24:	833b      	strh	r3, [r7, #24]
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <rfalIsoDepStartPPS+0xa8>)
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <rfalIsoDepStartPPS+0xac>)
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
    return rfalStartTransceive( &ctx );
 8005e32:	f107 030c 	add.w	r3, r7, #12
 8005e36:	4618      	mov	r0, r3
 8005e38:	f007 fccc 	bl	800d7d4 <rfalStartTransceive>
 8005e3c:	4603      	mov	r3, r0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3728      	adds	r7, #40	; 0x28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200009ec 	.word	0x200009ec
 8005e4c:	20000a38 	.word	0x20000a38
 8005e50:	20000a0e 	.word	0x20000a0e
 8005e54:	00046780 	.word	0x00046780

08005e58 <rfalIsoDepGetPPSSTatus>:


/*******************************************************************************/
static ReturnCode rfalIsoDepGetPPSSTatus( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    ret = rfalGetTransceiveStatus();
 8005e5e:	f007 fee9 	bl	800dc34 <rfalGetTransceiveStatus>
 8005e62:	4603      	mov	r3, r0
 8005e64:	80fb      	strh	r3, [r7, #6]
    if( ret == ERR_NONE )
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d114      	bne.n	8005e96 <rfalIsoDepGetPPSSTatus+0x3e>
    {
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <rfalIsoDepGetPPSSTatus+0x48>)
 8005e6e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005e70:	3307      	adds	r3, #7
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <rfalIsoDepGetPPSSTatus+0x48>)
 8005e78:	845a      	strh	r2, [r3, #34]	; 0x22
        
        /* Check for valid PPS Response   */
        if( (gIsoDep.rxBufLen != RFAL_ISODEP_PPS_RES_LEN) || (*gIsoDep.rxBuf != gIsoDep.actv.ppsReq.PPSS) ) 
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <rfalIsoDepGetPPSSTatus+0x48>)
 8005e7c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d107      	bne.n	8005e92 <rfalIsoDepGetPPSSTatus+0x3a>
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <rfalIsoDepGetPPSSTatus+0x48>)
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <rfalIsoDepGetPPSSTatus+0x48>)
 8005e8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d001      	beq.n	8005e96 <rfalIsoDepGetPPSSTatus+0x3e>
        {
            return ERR_PROTO;
 8005e92:	230b      	movs	r3, #11
 8005e94:	e000      	b.n	8005e98 <rfalIsoDepGetPPSSTatus+0x40>
        }
    }
    return ret;
 8005e96:	88fb      	ldrh	r3, [r7, #6]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200009ec 	.word	0x200009ec

08005ea4 <rfalIsoDepStartATTRIB>:


#if RFAL_FEATURE_NFCB

static ReturnCode rfalIsoDepStartATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	; 0x28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	4608      	mov	r0, r1
 8005eae:	4611      	mov	r1, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	70fb      	strb	r3, [r7, #3]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70bb      	strb	r3, [r7, #2]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	707b      	strb	r3, [r7, #1]
    rfalTransceiveContext ctx;
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8005ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00c      	beq.n	8005ede <rfalIsoDepStartATTRIB+0x3a>
 8005ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <rfalIsoDepStartATTRIB+0x3a>
 8005eca:	78bb      	ldrb	r3, [r7, #2]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d806      	bhi.n	8005ede <rfalIsoDepStartATTRIB+0x3a>
 8005ed0:	787b      	ldrb	r3, [r7, #1]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d803      	bhi.n	8005ede <rfalIsoDepStartATTRIB+0x3a>
 8005ed6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005eda:	2b0e      	cmp	r3, #14
 8005edc:	d901      	bls.n	8005ee2 <rfalIsoDepStartATTRIB+0x3e>
    {
        return ERR_NONE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e06f      	b.n	8005fc2 <rfalIsoDepStartATTRIB+0x11e>
    }
    
    gIsoDep.rxBuf   = (uint8_t*)  attribRes;
 8005ee2:	4a3a      	ldr	r2, [pc, #232]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee6:	61d3      	str	r3, [r2, #28]
    gIsoDep.rxLen8  = attribResLen;
 8005ee8:	4a38      	ldr	r2, [pc, #224]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eec:	6793      	str	r3, [r2, #120]	; 0x78
    gIsoDep.did     = DID;
 8005eee:	4a37      	ldr	r2, [pc, #220]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005ef0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005ef4:	70d3      	strb	r3, [r2, #3]
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8005ef6:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005ef8:	221d      	movs	r2, #29
 8005efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 8005efe:	4a33      	ldr	r2, [pc, #204]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8005f06:	78bb      	ldrb	r3, [r7, #2]
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	b25a      	sxtb	r2, r3
 8005f0c:	787b      	ldrb	r3, [r7, #1]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	b25b      	sxtb	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b25b      	sxtb	r3, r3
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f023 030f 	bic.w	r3, r3, #15
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	4b27      	ldr	r3, [pc, #156]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005f2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    gIsoDep.actv.attribReq.Param.PARAM3 = PARAM3;
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005f34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005f38:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
    gIsoDep.actv.attribReq.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8005f3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005f48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
    ST_MEMCPY(gIsoDep.actv.attribReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8005f52:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005f54:	f8c3 204d 	str.w	r2, [r3, #77]	; 0x4d
    
     /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00e      	beq.n	8005f7c <rfalIsoDepStartATTRIB+0xd8>
 8005f5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <rfalIsoDepStartATTRIB+0xd8>
    {
        ST_MEMCPY(gIsoDep.actv.attribReq.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 8005f66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	bf28      	it	cs
 8005f6e:	2320      	movcs	r3, #32
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f76:	4816      	ldr	r0, [pc, #88]	; (8005fd0 <rfalIsoDepStartATTRIB+0x12c>)
 8005f78:	f00c f8d0 	bl	801211c <memcpy>
    }
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8005f7c:	4b15      	ldr	r3, [pc, #84]	; (8005fd4 <rfalIsoDepStartATTRIB+0x130>)
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005f84:	2b1f      	cmp	r3, #31
 8005f86:	d807      	bhi.n	8005f98 <rfalIsoDepStartATTRIB+0xf4>
 8005f88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3309      	adds	r3, #9
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	e001      	b.n	8005f9c <rfalIsoDepStartATTRIB+0xf8>
 8005f98:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8005f9c:	823b      	strh	r3, [r7, #16]
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <rfalIsoDepStartATTRIB+0x128>)
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005fa8:	833b      	strh	r3, [r7, #24]
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <rfalIsoDepStartATTRIB+0x134>)
 8005fac:	61fb      	str	r3, [r7, #28]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    return rfalStartTransceive( &ctx );
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f007 fc0a 	bl	800d7d4 <rfalStartTransceive>
 8005fc0:	4603      	mov	r3, r0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3728      	adds	r7, #40	; 0x28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	200009ec 	.word	0x200009ec
 8005fd0:	20000a41 	.word	0x20000a41
 8005fd4:	20000a38 	.word	0x20000a38
 8005fd8:	20000a0e 	.word	0x20000a0e

08005fdc <rfalIsoDepGetATTRIBStatus>:


/*******************************************************************************/
static ReturnCode rfalIsoDepGetATTRIBStatus( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    ret = rfalGetTransceiveStatus();
 8005fe2:	f007 fe27 	bl	800dc34 <rfalGetTransceiveStatus>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	80fb      	strh	r3, [r7, #6]
    if( ret == ERR_NONE )
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d12c      	bne.n	800604a <rfalIsoDepGetATTRIBStatus+0x6e>
    {
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 8005ff0:	4b18      	ldr	r3, [pc, #96]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8005ff2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005ff4:	3307      	adds	r3, #7
 8005ff6:	08db      	lsrs	r3, r3, #3
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	4b16      	ldr	r3, [pc, #88]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8005ffc:	845a      	strh	r2, [r3, #34]	; 0x22
        
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((gIsoDep.rxBuf[RFAL_ISODEP_ATTRIB_RES_MBLIDID_POS] & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did) )
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8006000:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <rfalIsoDepGetATTRIBStatus+0x3c>
 8006006:	4b13      	ldr	r3, [pc, #76]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	4a10      	ldr	r2, [pc, #64]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8006012:	78d2      	ldrb	r2, [r2, #3]
 8006014:	4293      	cmp	r3, r2
 8006016:	d001      	beq.n	800601c <rfalIsoDepGetATTRIBStatus+0x40>
        {
           return ERR_PROTO;
 8006018:	230b      	movs	r3, #11
 800601a:	e017      	b.n	800604c <rfalIsoDepGetATTRIBStatus+0x70>
        }
        
        if( gIsoDep.rxLen8 != NULL )
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 800601e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <rfalIsoDepGetATTRIBStatus+0x54>
        {
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8006026:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 800602a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
        }
        
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)(gIsoDep.actv.attribReq.Param.PARAM2 & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8006030:	4b08      	ldr	r3, [pc, #32]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8006032:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	b2db      	uxtb	r3, r3
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fe43 	bl	8004cc8 <rfalIsoDepFSxI2FSx>
 8006042:	4603      	mov	r3, r0
 8006044:	461a      	mov	r2, r3
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <rfalIsoDepGetATTRIBStatus+0x78>)
 8006048:	84da      	strh	r2, [r3, #38]	; 0x26
    }
   
   return ret;
 800604a:	88fb      	ldrh	r3, [r7, #6]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200009ec 	.word	0x200009ec

08006058 <rfalIsoDepPollAStartActivation>:
}


/*******************************************************************************/
ReturnCode rfalIsoDepPollAStartActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4603      	mov	r3, r0
 8006062:	71fb      	strb	r3, [r7, #7]
 8006064:	460b      	mov	r3, r1
 8006066:	71bb      	strb	r3, [r7, #6]
 8006068:	4613      	mov	r3, r2
 800606a:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    
    if( isoDepDev == NULL )
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <rfalIsoDepPollAStartActivation+0x1e>
    {
        return ERR_PARAM;
 8006072:	2307      	movs	r3, #7
 8006074:	e020      	b.n	80060b8 <rfalIsoDepPollAStartActivation+0x60>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8006076:	2002      	movs	r0, #2
 8006078:	f007 faa2 	bl	800d5c0 <rfalSetErrorHandling>
    
    /* Start RATS Transceive */
    EXIT_ON_ERR( ret, rfalIsoDepStartRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen ) );
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	3314      	adds	r3, #20
 8006082:	79b9      	ldrb	r1, [r7, #6]
 8006084:	79f8      	ldrb	r0, [r7, #7]
 8006086:	f7ff fe07 	bl	8005c98 <rfalIsoDepStartRATS>
 800608a:	4603      	mov	r3, r0
 800608c:	81fb      	strh	r3, [r7, #14]
 800608e:	89fb      	ldrh	r3, [r7, #14]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <rfalIsoDepPollAStartActivation+0x40>
 8006094:	89fb      	ldrh	r3, [r7, #14]
 8006096:	e00f      	b.n	80060b8 <rfalIsoDepPollAStartActivation+0x60>
    
    isoDepDev->info.DSI = maxBR;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	797a      	ldrb	r2, [r7, #5]
 800609c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    gIsoDep.actvDev     = isoDepDev;
 80060a0:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <rfalIsoDepPollAStartActivation+0x68>)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	67d3      	str	r3, [r2, #124]	; 0x7c
    gIsoDep.cntRRetrys  = gIsoDep.maxRetriesRATS;
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <rfalIsoDepPollAStartActivation+0x68>)
 80060a8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <rfalIsoDepPollAStartActivation+0x68>)
 80060ae:	719a      	strb	r2, [r3, #6]
    gIsoDep.state       = ISODEP_ST_PCD_ACT_RATS;
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <rfalIsoDepPollAStartActivation+0x68>)
 80060b2:	220a      	movs	r2, #10
 80060b4:	701a      	strb	r2, [r3, #0]
    
    return ret;
 80060b6:	89fb      	ldrh	r3, [r7, #14]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	200009ec 	.word	0x200009ec

080060c4 <rfalIsoDepPollAGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepPollAGetActivationStatus( void )
{
 80060c4:	b590      	push	{r4, r7, lr}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    uint8_t     msgIt;
    rfalBitRate maxBR;

    switch( gIsoDep.state )
 80060ca:	4ba2      	ldr	r3, [pc, #648]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b0a      	cmp	r3, #10
 80060d0:	d003      	beq.n	80060da <rfalIsoDepPollAGetActivationStatus+0x16>
 80060d2:	2b0b      	cmp	r3, #11
 80060d4:	f000 8173 	beq.w	80063be <rfalIsoDepPollAGetActivationStatus+0x2fa>
 80060d8:	e193      	b.n	8006402 <rfalIsoDepPollAGetActivationStatus+0x33e>
    {
        /*******************************************************************************/
        case ISODEP_ST_PCD_ACT_RATS:
            
            ret = rfalIsoDepGetRATSStatus();
 80060da:	f7ff fe25 	bl	8005d28 <rfalIsoDepGetRATSStatus>
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
            if( ret != ERR_BUSY )
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	f000 818f 	beq.w	8006408 <rfalIsoDepPollAGetActivationStatus+0x344>
            {
                if( ret != ERR_NONE )
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d03c      	beq.n	800616a <rfalIsoDepPollAGetActivationStatus+0xa6>
                {
                    /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
                    if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_TIMEOUT) )
 80060f0:	4b98      	ldr	r3, [pc, #608]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80060f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d103      	bne.n	8006102 <rfalIsoDepPollAGetActivationStatus+0x3e>
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	f040 8185 	bne.w	800640c <rfalIsoDepPollAGetActivationStatus+0x348>
                    {
                        break;
                    }
                    
                    if( gIsoDep.cntRRetrys != 0U )
 8006102:	4b94      	ldr	r3, [pc, #592]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006104:	799b      	ldrb	r3, [r3, #6]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d026      	beq.n	8006158 <rfalIsoDepPollAGetActivationStatus+0x94>
                    {
                        /* Ensure FDT before retransmission (reuse RFAL GT timer) */
                        rfalSetGT( rfalGetFDTPoll() );
 800610a:	f007 fa8f 	bl	800d62c <rfalGetFDTPoll>
 800610e:	4603      	mov	r3, r0
 8006110:	4618      	mov	r0, r3
 8006112:	f007 faa9 	bl	800d668 <rfalSetGT>
                        rfalFieldOnAndStartGT();
 8006116:	f007 fad3 	bl	800d6c0 <rfalFieldOnAndStartGT>
                        
                        /* Send RATS retransmission */  /* PRQA S 4342 1 # MISRA 10.5 - Layout of enum rfalIsoDepFSxI is guaranteed whithin 4bit range */
                        EXIT_ON_ERR( ret, rfalIsoDepStartRATS( (rfalIsoDepFSxI)(uint8_t)(gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT), 
 800611a:	4b8e      	ldr	r3, [pc, #568]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800611c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	b2d8      	uxtb	r0, r3
 8006124:	4b8b      	ldr	r3, [pc, #556]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006126:	78d9      	ldrb	r1, [r3, #3]
 8006128:	4b8a      	ldr	r3, [pc, #552]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800612a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612c:	461a      	mov	r2, r3
 800612e:	4b89      	ldr	r3, [pc, #548]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006132:	3314      	adds	r3, #20
 8006134:	f7ff fdb0 	bl	8005c98 <rfalIsoDepStartRATS>
 8006138:	4603      	mov	r3, r0
 800613a:	80fb      	strh	r3, [r7, #6]
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <rfalIsoDepPollAGetActivationStatus+0x82>
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	e166      	b.n	8006414 <rfalIsoDepPollAGetActivationStatus+0x350>
                                                                                gIsoDep.did,
                                                                                &gIsoDep.actvDev->activation.A.Listener.ATS, 
                                                                                &gIsoDep.actvDev->activation.A.Listener.ATSLen ) );
                        gIsoDep.cntRRetrys--;
 8006146:	4b83      	ldr	r3, [pc, #524]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006148:	799b      	ldrb	r3, [r3, #6]
 800614a:	3b01      	subs	r3, #1
 800614c:	b2da      	uxtb	r2, r3
 800614e:	4b81      	ldr	r3, [pc, #516]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006150:	719a      	strb	r2, [r3, #6]
                        ret = ERR_BUSY;
 8006152:	2302      	movs	r3, #2
 8006154:	80fb      	strh	r3, [r7, #6]
                    }
                    
                    return ERR_NONE;
                }
            }
            break;
 8006156:	e157      	b.n	8006408 <rfalIsoDepPollAGetActivationStatus+0x344>
                    else if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 8006158:	4b7e      	ldr	r3, [pc, #504]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800615a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800615e:	2b02      	cmp	r3, #2
 8006160:	f040 8152 	bne.w	8006408 <rfalIsoDepPollAGetActivationStatus+0x344>
                        rfalIsoDepDeselect();
 8006164:	f7fe fd48 	bl	8004bf8 <rfalIsoDepDeselect>
            break;
 8006168:	e14e      	b.n	8006408 <rfalIsoDepPollAGetActivationStatus+0x344>
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 800616a:	4b7a      	ldr	r3, [pc, #488]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800616c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800616e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006172:	713b      	strb	r3, [r7, #4]
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8006174:	4b77      	ldr	r3, [pc, #476]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006178:	2204      	movs	r2, #4
 800617a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    gIsoDep.actvDev->info.SFGI = 0U;
 800617e:	4b75      	ldr	r3, [pc, #468]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006182:	2200      	movs	r2, #0
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
                    gIsoDep.actvDev->info.MBL  = 0U;
 8006186:	4b73      	ldr	r3, [pc, #460]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618a:	2200      	movs	r2, #0
 800618c:	645a      	str	r2, [r3, #68]	; 0x44
                    gIsoDep.actvDev->info.DSI  = RFAL_BR_106;
 800618e:	4b71      	ldr	r3, [pc, #452]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    gIsoDep.actvDev->info.DRI  = RFAL_BR_106;
 8006198:	4b6e      	ldr	r3, [pc, #440]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800619a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 80061a2:	4b6c      	ldr	r3, [pc, #432]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    if( gIsoDep.actvDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 80061ac:	4b69      	ldr	r3, [pc, #420]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	f240 808c 	bls.w	80062d0 <rfalIsoDepPollAGetActivationStatus+0x20c>
                        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 80061b8:	2301      	movs	r3, #1
 80061ba:	717b      	strb	r3, [r7, #5]
                        gIsoDep.actvDev->info.FSxI = (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 80061bc:	4b65      	ldr	r3, [pc, #404]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c0:	785a      	ldrb	r2, [r3, #1]
 80061c2:	4b64      	ldr	r3, [pc, #400]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c6:	f002 020f 	and.w	r2, r2, #15
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                        msgIt++; 
 80061d0:	797b      	ldrb	r3, [r7, #5]
 80061d2:	3301      	adds	r3, #1
 80061d4:	717b      	strb	r3, [r7, #5]
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 80061d6:	4b5f      	ldr	r3, [pc, #380]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <rfalIsoDepPollAGetActivationStatus+0x144>
                            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++], &gIsoDep.actvDev->info.DSI, &gIsoDep.actvDev->info.DRI );
 80061e4:	4b5b      	ldr	r3, [pc, #364]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e8:	461a      	mov	r2, r3
 80061ea:	797b      	ldrb	r3, [r7, #5]
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	7179      	strb	r1, [r7, #5]
 80061f0:	4413      	add	r3, r2
 80061f2:	7819      	ldrb	r1, [r3, #0]
 80061f4:	4b57      	ldr	r3, [pc, #348]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80061fc:	4b55      	ldr	r3, [pc, #340]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80061fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006200:	3349      	adds	r3, #73	; 0x49
 8006202:	7938      	ldrb	r0, [r7, #4]
 8006204:	f000 fa48 	bl	8006698 <rfalIsoDepCalcBitRate>
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 8006208:	4b52      	ldr	r3, [pc, #328]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800620a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01e      	beq.n	8006254 <rfalIsoDepPollAGetActivationStatus+0x190>
                            gIsoDep.actvDev->info.SFGI  = ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++];
 8006216:	4b4f      	ldr	r3, [pc, #316]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621a:	461a      	mov	r2, r3
 800621c:	797b      	ldrb	r3, [r7, #5]
 800621e:	1c59      	adds	r1, r3, #1
 8006220:	7179      	strb	r1, [r7, #5]
 8006222:	4413      	add	r3, r2
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	4b4b      	ldr	r3, [pc, #300]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800622a:	639a      	str	r2, [r3, #56]	; 0x38
                            gIsoDep.actvDev->info.FWI   = (uint8_t)((gIsoDep.actvDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 800622c:	4b49      	ldr	r3, [pc, #292]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800622e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	b2da      	uxtb	r2, r3
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623a:	f002 020f 	and.w	r2, r2, #15
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                            gIsoDep.actvDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 8006244:	4b43      	ldr	r3, [pc, #268]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800624c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624e:	f002 020f 	and.w	r2, r2, #15
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 8006254:	4b3f      	ldr	r3, [pc, #252]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d036      	beq.n	80062d0 <rfalIsoDepPollAGetActivationStatus+0x20c>
                            gIsoDep.actvDev->info.supAdFt = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 8006262:	4b3c      	ldr	r3, [pc, #240]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006266:	461a      	mov	r2, r3
 8006268:	797b      	ldrb	r3, [r7, #5]
 800626a:	4413      	add	r3, r2
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	091b      	lsrs	r3, r3, #4
 8006270:	f003 0201 	and.w	r2, r3, #1
 8006274:	4b37      	ldr	r3, [pc, #220]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006278:	2a00      	cmp	r2, #0
 800627a:	bf14      	ite	ne
 800627c:	2201      	movne	r2, #1
 800627e:	2200      	moveq	r2, #0
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                            gIsoDep.actvDev->info.supDID  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 8006286:	4b33      	ldr	r3, [pc, #204]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800628a:	461a      	mov	r2, r3
 800628c:	797b      	ldrb	r3, [r7, #5]
 800628e:	4413      	add	r3, r2
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	f003 0201 	and.w	r2, r3, #1
 8006298:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800629a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629c:	2a00      	cmp	r2, #0
 800629e:	bf14      	ite	ne
 80062a0:	2201      	movne	r2, #1
 80062a2:	2200      	moveq	r2, #0
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                            gIsoDep.actvDev->info.supNAD  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 80062aa:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ae:	461a      	mov	r2, r3
 80062b0:	797b      	ldrb	r3, [r7, #5]
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	7179      	strb	r1, [r7, #5]
 80062b6:	4413      	add	r3, r2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	f003 0201 	and.w	r2, r3, #1
 80062be:	4b25      	ldr	r3, [pc, #148]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c2:	2a00      	cmp	r2, #0
 80062c4:	bf14      	ite	ne
 80062c6:	2201      	movne	r2, #1
 80062c8:	2200      	moveq	r2, #0
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
                    gIsoDep.actvDev->info.FSx  = rfalIsoDepFSxI2FSx(gIsoDep.actvDev->info.FSxI);
 80062d0:	4b20      	ldr	r3, [pc, #128]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d8:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062da:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fcf3 	bl	8004cc8 <rfalIsoDepFSxI2FSx>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
                    gIsoDep.fsx                = gIsoDep.actvDev->info.FSx;
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ec:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062f2:	829a      	strh	r2, [r3, #20]
                    gIsoDep.actvDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)gIsoDep.actvDev->info.SFGI );
 80062f4:	4b17      	ldr	r3, [pc, #92]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	4a15      	ldr	r2, [pc, #84]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 80062fe:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fa6f 	bl	80067e4 <rfalIsoDepSFGI2SFGT>
 8006306:	4603      	mov	r3, r0
 8006308:	63e3      	str	r3, [r4, #60]	; 0x3c
                    rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800630c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	f243 42f8 	movw	r2, #13560	; 0x34f8
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	4618      	mov	r0, r3
 800631a:	f007 f9a5 	bl	800d668 <rfalSetGT>
                    rfalFieldOnAndStartGT();
 800631e:	f007 f9cf 	bl	800d6c0 <rfalFieldOnAndStartGT>
                    gIsoDep.actvDev->info.FWT  = rfalIsoDepFWI2FWT( gIsoDep.actvDev->info.FWI );
 8006322:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006326:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800632c:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fcaa 	bl	8004c88 <rfalIsoDepFWI2FWT>
 8006334:	4603      	mov	r3, r0
 8006336:	6323      	str	r3, [r4, #48]	; 0x30
                    gIsoDep.actvDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 800633a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006340:	635a      	str	r2, [r3, #52]	; 0x34
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006346:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <rfalIsoDepPollAGetActivationStatus+0x294>
 800634e:	4b01      	ldr	r3, [pc, #4]	; (8006354 <rfalIsoDepPollAGetActivationStatus+0x290>)
 8006350:	78da      	ldrb	r2, [r3, #3]
 8006352:	e002      	b.n	800635a <rfalIsoDepPollAGetActivationStatus+0x296>
 8006354:	200009ec 	.word	0x200009ec
 8006358:	2200      	movs	r2, #0
 800635a:	4b30      	ldr	r3, [pc, #192]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 800635c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800635e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    gIsoDep.actvDev->info.NAD = RFAL_ISODEP_NO_NAD;
 8006362:	4b2e      	ldr	r3, [pc, #184]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 8006364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006366:	22ff      	movs	r2, #255	; 0xff
 8006368:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                    if( (gIsoDep.actvDev->info.DSI != RFAL_BR_106) || (gIsoDep.actvDev->info.DRI != RFAL_BR_106) )
 800636c:	4b2b      	ldr	r3, [pc, #172]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 800636e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006370:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <rfalIsoDepPollAGetActivationStatus+0x2c0>
 8006378:	4b28      	ldr	r3, [pc, #160]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 800637a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01a      	beq.n	80063ba <rfalIsoDepPollAGetActivationStatus+0x2f6>
                        EXIT_ON_ERR( ret, rfalIsoDepStartPPS( gIsoDep.actvDev->info.DID, gIsoDep.actvDev->info.DSI, gIsoDep.actvDev->info.DRI, (rfalIsoDepPpsRes*)&gIsoDep.ctrlBuf ));
 8006384:	4b25      	ldr	r3, [pc, #148]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 8006386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006388:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800638c:	4b23      	ldr	r3, [pc, #140]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 800638e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006390:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8006394:	4b21      	ldr	r3, [pc, #132]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 8006396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006398:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800639c:	4b20      	ldr	r3, [pc, #128]	; (8006420 <rfalIsoDepPollAGetActivationStatus+0x35c>)
 800639e:	f7ff fd03 	bl	8005da8 <rfalIsoDepStartPPS>
 80063a2:	4603      	mov	r3, r0
 80063a4:	80fb      	strh	r3, [r7, #6]
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <rfalIsoDepPollAGetActivationStatus+0x2ec>
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	e031      	b.n	8006414 <rfalIsoDepPollAGetActivationStatus+0x350>
                        gIsoDep.state = ISODEP_ST_PCD_ACT_PPS;
 80063b0:	4b1a      	ldr	r3, [pc, #104]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 80063b2:	220b      	movs	r2, #11
 80063b4:	701a      	strb	r2, [r3, #0]
                        return ERR_BUSY;
 80063b6:	2302      	movs	r3, #2
 80063b8:	e02c      	b.n	8006414 <rfalIsoDepPollAGetActivationStatus+0x350>
                    return ERR_NONE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e02a      	b.n	8006414 <rfalIsoDepPollAGetActivationStatus+0x350>
        
        /*******************************************************************************/
        case ISODEP_ST_PCD_ACT_PPS:
            ret = rfalIsoDepGetPPSSTatus();
 80063be:	f7ff fd4b 	bl	8005e58 <rfalIsoDepGetPPSSTatus>
 80063c2:	4603      	mov	r3, r0
 80063c4:	80fb      	strh	r3, [r7, #6]
            if( ret != ERR_BUSY )
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d021      	beq.n	8006410 <rfalIsoDepPollAGetActivationStatus+0x34c>
            {
                /* Check whether PPS has been acknowledge */
                if( ret == ERR_NONE )
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <rfalIsoDepPollAGetActivationStatus+0x328>
                {
                    /* DSI code the divisor from PICC to PCD */
                    /* DRI code the divisor from PCD to PICC */
                    rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 80063d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80063da:	4b10      	ldr	r3, [pc, #64]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 80063dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f006 fde9 	bl	800cfbc <rfalSetBitRate>
                    /* If PPS has faled keep activation bit rate */
                    gIsoDep.actvDev->info.DSI = RFAL_BR_106;
                    gIsoDep.actvDev->info.DRI = RFAL_BR_106;
                }
            }
            break;
 80063ea:	e011      	b.n	8006410 <rfalIsoDepPollAGetActivationStatus+0x34c>
                    gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 80063ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    gIsoDep.actvDev->info.DRI = RFAL_BR_106;
 80063f6:	4b09      	ldr	r3, [pc, #36]	; (800641c <rfalIsoDepPollAGetActivationStatus+0x358>)
 80063f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            break;
 8006400:	e006      	b.n	8006410 <rfalIsoDepPollAGetActivationStatus+0x34c>

        /*******************************************************************************/    
        default:
            ret = ERR_WRONG_STATE;
 8006402:	2321      	movs	r3, #33	; 0x21
 8006404:	80fb      	strh	r3, [r7, #6]
            break;
 8006406:	e004      	b.n	8006412 <rfalIsoDepPollAGetActivationStatus+0x34e>
            break;
 8006408:	bf00      	nop
 800640a:	e002      	b.n	8006412 <rfalIsoDepPollAGetActivationStatus+0x34e>
                        break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <rfalIsoDepPollAGetActivationStatus+0x34e>
            break;
 8006410:	bf00      	nop
    }
    
    return ret;
 8006412:	88fb      	ldrh	r3, [r7, #6]
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bd90      	pop	{r4, r7, pc}
 800641c:	200009ec 	.word	0x200009ec
 8006420:	20000a32 	.word	0x20000a32

08006424 <rfalIsoDepPollBStartActivation>:
}


/*******************************************************************************/
ReturnCode rfalIsoDepPollBStartActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 8006424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006426:	b08d      	sub	sp, #52	; 0x34
 8006428:	af08      	add	r7, sp, #32
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	4611      	mov	r1, r2
 8006430:	461a      	mov	r2, r3
 8006432:	4623      	mov	r3, r4
 8006434:	71fb      	strb	r3, [r7, #7]
 8006436:	4603      	mov	r3, r0
 8006438:	71bb      	strb	r3, [r7, #6]
 800643a:	460b      	mov	r3, r1
 800643c:	717b      	strb	r3, [r7, #5]
 800643e:	4613      	mov	r3, r2
 8006440:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	7b1b      	ldrb	r3, [r3, #12]
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	b2da      	uxtb	r2, r3
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fc16 	bl	8004c88 <rfalIsoDepFWI2FWT>
 800645c:	4602      	mov	r2, r0
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006468:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	7b5b      	ldrb	r3, [r3, #13]
 800646e:	091b      	lsrs	r3, r3, #4
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f9af 	bl	80067e4 <rfalIsoDepSFGI2SFGT>
 8006486:	4602      	mov	r2, r0
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	7adb      	ldrb	r3, [r3, #11]
 8006490:	091b      	lsrs	r3, r3, #4
 8006492:	b2da      	uxtb	r2, r3
 8006494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fc11 	bl	8004cc8 <rfalIsoDepFSxI2FSx>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 80064b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b2:	79ba      	ldrb	r2, [r7, #6]
 80064b4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	7b1b      	ldrb	r3, [r3, #12]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf14      	ite	ne
 80064c4:	2301      	movne	r3, #1
 80064c6:	2300      	moveq	r3, #0
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	7b1b      	ldrb	r3, [r3, #12]
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	2300      	moveq	r3, #0
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 80064ea:	79bb      	ldrb	r3, [r7, #6]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <rfalIsoDepPollBStartActivation+0xe0>
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80064f6:	f083 0301 	eor.w	r3, r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <rfalIsoDepPollBStartActivation+0xe0>
    {
        return ERR_PARAM;
 8006500:	2307      	movs	r3, #7
 8006502:	e066      	b.n	80065d2 <rfalIsoDepPollBStartActivation+0x1ae>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 8006504:	2002      	movs	r0, #2
 8006506:	f007 f85b 	bl	800d5c0 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800650a:	4b34      	ldr	r3, [pc, #208]	; (80065dc <rfalIsoDepPollBStartActivation+0x1b8>)
 800650c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006510:	2b01      	cmp	r3, #1
 8006512:	d104      	bne.n	800651e <rfalIsoDepPollBStartActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8006514:	f641 207c 	movw	r0, #6780	; 0x1a7c
 8006518:	f007 f874 	bl	800d604 <rfalSetFDTPoll>
 800651c:	e00d      	b.n	800653a <rfalIsoDepPollBStartActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	7adb      	ldrb	r3, [r3, #11]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4618      	mov	r0, r3
 800652e:	f005 ff17 	bl	800c360 <rfalNfcbTR2ToFDT>
 8006532:	4603      	mov	r3, r0
 8006534:	4618      	mov	r0, r3
 8006536:	f007 f865 	bl	800d604 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	7a99      	ldrb	r1, [r3, #10]
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006546:	3349      	adds	r3, #73	; 0x49
 8006548:	7978      	ldrb	r0, [r7, #5]
 800654a:	f000 f8a5 	bl	8006698 <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    EXIT_ON_ERR( ret, rfalIsoDepStartATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	1c9d      	adds	r5, r3, #2
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	7b1b      	ldrb	r3, [r3, #12]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <rfalIsoDepPollBStartActivation+0x13e>
 800655e:	7939      	ldrb	r1, [r7, #4]
 8006560:	e000      	b.n	8006564 <rfalIsoDepPollBStartActivation+0x140>
 8006562:	2100      	movs	r1, #0
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <rfalIsoDepPollBStartActivation+0x1b8>)
 8006572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006576:	2b01      	cmp	r3, #1
 8006578:	d005      	beq.n	8006586 <rfalIsoDepPollBStartActivation+0x162>
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	7adb      	ldrb	r3, [r3, #11]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	b2db      	uxtb	r3, r3
 8006584:	e000      	b.n	8006588 <rfalIsoDepPollBStartActivation+0x164>
 8006586:	2301      	movs	r3, #1
 8006588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800658a:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800658c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800658e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006590:	4402      	add	r2, r0
 8006592:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006594:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8006596:	3421      	adds	r4, #33	; 0x21
 8006598:	9407      	str	r4, [sp, #28]
 800659a:	9006      	str	r0, [sp, #24]
 800659c:	9205      	str	r2, [sp, #20]
 800659e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80065a2:	9204      	str	r2, [sp, #16]
 80065a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a6:	9203      	str	r2, [sp, #12]
 80065a8:	79ba      	ldrb	r2, [r7, #6]
 80065aa:	9202      	str	r2, [sp, #8]
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	4663      	mov	r3, ip
 80065b4:	4632      	mov	r2, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	f7ff fc74 	bl	8005ea4 <rfalIsoDepStartATTRIB>
 80065bc:	4603      	mov	r3, r0
 80065be:	81fb      	strh	r3, [r7, #14]
 80065c0:	89fb      	ldrh	r3, [r7, #14]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <rfalIsoDepPollBStartActivation+0x1a6>
 80065c6:	89fb      	ldrh	r3, [r7, #14]
 80065c8:	e003      	b.n	80065d2 <rfalIsoDepPollBStartActivation+0x1ae>
                               &isoDepDev->activation.B.Listener.ATTRIB_RES,
                               &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                             ) );
    
    
    gIsoDep.actvDev = isoDepDev;
 80065ca:	4a04      	ldr	r2, [pc, #16]	; (80065dc <rfalIsoDepPollBStartActivation+0x1b8>)
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	67d3      	str	r3, [r2, #124]	; 0x7c
    return ret;
 80065d0:	89fb      	ldrh	r3, [r7, #14]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065da:	bf00      	nop
 80065dc:	200009ec 	.word	0x200009ec

080065e0 <rfalIsoDepPollBGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalIsoDepPollBGetActivationStatus( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    uint8_t    mbli;

    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    ret = rfalIsoDepGetATTRIBStatus();
 80065e6:	f7ff fcf9 	bl	8005fdc <rfalIsoDepGetATTRIBStatus>
 80065ea:	4603      	mov	r3, r0
 80065ec:	80fb      	strh	r3, [r7, #6]
    if( ret != ERR_BUSY)
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d04a      	beq.n	800668a <rfalIsoDepPollBGetActivationStatus+0xaa>
    {
        if( ret == ERR_NONE )
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d137      	bne.n	800666a <rfalIsoDepPollBGetActivationStatus+0x8a>
        {
            /* Digital 1.1 14.6.2.3 - Check if received DID match */
            if( (gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did )
 80065fa:	4b26      	ldr	r3, [pc, #152]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 80065fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	4a23      	ldr	r2, [pc, #140]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006606:	78d2      	ldrb	r2, [r2, #3]
 8006608:	4293      	cmp	r3, r2
 800660a:	d001      	beq.n	8006610 <rfalIsoDepPollBGetActivationStatus+0x30>
            {
                return ERR_PROTO;
 800660c:	230b      	movs	r3, #11
 800660e:	e03d      	b.n	800668c <rfalIsoDepPollBGetActivationStatus+0xac>
            }
                    
            /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
            mbli = ((gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 8006610:	4b20      	ldr	r3, [pc, #128]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	091b      	lsrs	r3, r3, #4
 8006618:	717b      	strb	r3, [r7, #5]
            if( mbli > 0U)
 800661a:	797b      	ldrb	r3, [r7, #5]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <rfalIsoDepPollBGetActivationStatus+0x58>
            {
                /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
                gIsoDep.actvDev->info.MBL = (gIsoDep.actvDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 8006620:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006624:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8006628:	4619      	mov	r1, r3
 800662a:	797b      	ldrb	r3, [r7, #5]
 800662c:	1e5a      	subs	r2, r3, #1
 800662e:	4b19      	ldr	r3, [pc, #100]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006632:	fa01 f202 	lsl.w	r2, r1, r2
 8006636:	645a      	str	r2, [r3, #68]	; 0x44
            }
            
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 8006638:	4b16      	ldr	r3, [pc, #88]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800663a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800663c:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8006640:	4b14      	ldr	r3, [pc, #80]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006644:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f006 fcb6 	bl	800cfbc <rfalSetBitRate>
            
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
            
            
            /* Start the SFGT timer (reuse RFAL GT timer) */
            rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 8006650:	4b10      	ldr	r3, [pc, #64]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	4618      	mov	r0, r3
 8006660:	f007 f802 	bl	800d668 <rfalSetGT>
            rfalFieldOnAndStartGT();
 8006664:	f007 f82c 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8006668:	e009      	b.n	800667e <rfalIsoDepPollBGetActivationStatus+0x9e>
        }
        else
        {
            gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 800666c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            gIsoDep.actvDev->info.DRI = RFAL_BR_106;
 8006674:	4b07      	ldr	r3, [pc, #28]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
        
        /*******************************************************************************/
        /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
        gIsoDep.fsx    = gIsoDep.actvDev->info.FSx;
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006682:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8006686:	4b03      	ldr	r3, [pc, #12]	; (8006694 <rfalIsoDepPollBGetActivationStatus+0xb4>)
 8006688:	829a      	strh	r2, [r3, #20]
    }
    
    return ret;
 800668a:	88fb      	ldrh	r3, [r7, #6]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	200009ec 	.word	0x200009ec

08006698 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60ba      	str	r2, [r7, #8]
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	4603      	mov	r3, r0
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	460b      	mov	r3, r1
 80066a8:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 8087 	bne.w	80067da <rfalIsoDepCalcBitRate+0x142>
 80066cc:	7d7b      	ldrb	r3, [r7, #21]
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	f200 8083 	bhi.w	80067da <rfalIsoDepCalcBitRate+0x142>
 80066d4:	7d7b      	ldrb	r3, [r7, #21]
 80066d6:	2bff      	cmp	r3, #255	; 0xff
 80066d8:	d07f      	beq.n	80067da <rfalIsoDepCalcBitRate+0x142>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066e0:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 80066e2:	2302      	movs	r3, #2
 80066e4:	75fb      	strb	r3, [r7, #23]
 80066e6:	e019      	b.n	800671c <rfalIsoDepCalcBitRate+0x84>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80066e8:	7d3a      	ldrb	r2, [r7, #20]
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	4619      	mov	r1, r3
 80066ee:	2310      	movs	r3, #16
 80066f0:	408b      	lsls	r3, r1
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <rfalIsoDepCalcBitRate+0x78>
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	7d7b      	ldrb	r3, [r7, #21]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d806      	bhi.n	8006710 <rfalIsoDepCalcBitRate+0x78>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	3301      	adds	r3, #1
 8006706:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	7cfa      	ldrb	r2, [r7, #19]
 800670c:	701a      	strb	r2, [r3, #0]
                break;
 800670e:	e009      	b.n	8006724 <rfalIsoDepCalcBitRate+0x8c>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8006710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	75fb      	strb	r3, [r7, #23]
 800671c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006720:	2b00      	cmp	r3, #0
 8006722:	dae1      	bge.n	80066e8 <rfalIsoDepCalcBitRate+0x50>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800672c:	2302      	movs	r3, #2
 800672e:	75fb      	strb	r3, [r7, #23]
 8006730:	e018      	b.n	8006764 <rfalIsoDepCalcBitRate+0xcc>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8006732:	7cbb      	ldrb	r3, [r7, #18]
 8006734:	7dfa      	ldrb	r2, [r7, #23]
 8006736:	40d3      	lsrs	r3, r2
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <rfalIsoDepCalcBitRate+0xc0>
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	7d7b      	ldrb	r3, [r7, #21]
 8006746:	429a      	cmp	r2, r3
 8006748:	d806      	bhi.n	8006758 <rfalIsoDepCalcBitRate+0xc0>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	3301      	adds	r3, #1
 800674e:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	7c7a      	ldrb	r2, [r7, #17]
 8006754:	701a      	strb	r2, [r3, #0]
                break;
 8006756:	e009      	b.n	800676c <rfalIsoDepCalcBitRate+0xd4>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 8006758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	75fb      	strb	r3, [r7, #23]
 8006764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006768:	2b00      	cmp	r3, #0
 800676a:	dae2      	bge.n	8006732 <rfalIsoDepCalcBitRate+0x9a>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 800676c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006770:	2b00      	cmp	r3, #0
 8006772:	da2a      	bge.n	80067ca <rfalIsoDepCalcBitRate+0x132>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	781a      	ldrb	r2, [r3, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	4293      	cmp	r3, r2
 800677e:	bf28      	it	cs
 8006780:	4613      	movcs	r3, r2
 8006782:	b2da      	uxtb	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d018      	beq.n	80067ca <rfalIsoDepCalcBitRate+0x132>
 8006798:	7d3a      	ldrb	r2, [r7, #20]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	3b01      	subs	r3, #1
 80067a0:	2110      	movs	r1, #16
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <rfalIsoDepCalcBitRate+0x128>
 80067ac:	7cba      	ldrb	r2, [r7, #18]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <rfalIsoDepCalcBitRate+0x132>
            {
                bitrateFound = false;
 80067c0:	2300      	movs	r3, #0
 80067c2:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 80067ca:	7dbb      	ldrb	r3, [r7, #22]
 80067cc:	f083 0301 	eor.w	r3, r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f47f af6b 	bne.w	80066ae <rfalIsoDepCalcBitRate+0x16>
 80067d8:	e000      	b.n	80067dc <rfalIsoDepCalcBitRate+0x144>
            return;
 80067da:	bf00      	nop
    
}
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	2b0e      	cmp	r3, #14
 80067f6:	d901      	bls.n	80067fc <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 80067f8:	2300      	movs	r3, #0
 80067fa:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006808:	409a      	lsls	r2, r3
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8006810:	fa01 f303 	lsl.w	r3, r1, r3
 8006814:	4413      	add	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e002      	b.n	8006820 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 800681a:	f641 237c 	movw	r3, #6780	; 0x1a7c
 800681e:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a05      	ldr	r2, [pc, #20]	; (8006838 <rfalIsoDepSFGI2SFGT+0x54>)
 8006824:	fba2 2303 	umull	r2, r3, r2, r3
 8006828:	0b1b      	lsrs	r3, r3, #12
 800682a:	3301      	adds	r3, #1
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	4d542005 	.word	0x4d542005

0800683c <rfalIsoDepApdu2IBLockParam>:
#endif  /* RFAL_FEATURE_ISO_DEP_POLL */
 

 /*******************************************************************************/
 static void rfalIsoDepApdu2IBLockParam( rfalIsoDepApduTxRxParam apduParam, rfalIsoDepTxRxParam *iBlockParam, uint16_t txPos, uint16_t rxPos )
{
 800683c:	b084      	sub	sp, #16
 800683e:	b598      	push	{r3, r4, r7, lr}
 8006840:	af00      	add	r7, sp, #0
 8006842:	f107 0410 	add.w	r4, r7, #16
 8006846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     NO_WARNING(rxPos); /* Keep this param for future use */
     
     iBlockParam->DID    = apduParam.DID;
 800684a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	f883 2020 	strb.w	r2, [r3, #32]
     iBlockParam->FSx    = apduParam.FSx;
 8006854:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006858:	83da      	strh	r2, [r3, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 800685a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800685c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685e:	839a      	strh	r2, [r3, #28]
     iBlockParam->FWT    = apduParam.FWT;
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	615a      	str	r2, [r3, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 8006866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	619a      	str	r2, [r3, #24]
     
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 800686c:	8abb      	ldrh	r3, [r7, #20]
 800686e:	461a      	mov	r2, r3
 8006870:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006872:	1ad4      	subs	r4, r2, r3
 8006874:	f7fe fd78 	bl	8005368 <rfalIsoDepGetMaxInfLen>
 8006878:	4603      	mov	r3, r0
 800687a:	429c      	cmp	r4, r3
 800687c:	dd09      	ble.n	8006892 <rfalIsoDepApdu2IBLockParam+0x56>
     {
         iBlockParam->isTxChaining = true;
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	2201      	movs	r2, #1
 8006882:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 8006884:	f7fe fd70 	bl	8005368 <rfalIsoDepGetMaxInfLen>
 8006888:	4603      	mov	r3, r0
 800688a:	461a      	mov	r2, r3
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	809a      	strh	r2, [r3, #4]
 8006890:	e008      	b.n	80068a4 <rfalIsoDepApdu2IBLockParam+0x68>
     }
     else
     {
         iBlockParam->isTxChaining = false;
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	2200      	movs	r2, #0
 8006896:	719a      	strb	r2, [r3, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 8006898:	8aba      	ldrh	r2, [r7, #20]
 800689a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	809a      	strh	r2, [r3, #4]
     }
     
     /* TxBuf is moved to the beginning for every I-Block */
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	601a      	str	r2, [r3, #0]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 80068aa:	6a3a      	ldr	r2, [r7, #32]
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ae:	609a      	str	r2, [r3, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 80068b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b2:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <rfalIsoDepApdu2IBLockParam+0x8c>)
 80068b4:	611a      	str	r2, [r3, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	60da      	str	r2, [r3, #12]
}
 80068bc:	bf00      	nop
 80068be:	46bd      	mov	sp, r7
 80068c0:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 80068c4:	b004      	add	sp, #16
 80068c6:	4770      	bx	lr
 80068c8:	20000aa4 	.word	0x20000aa4

080068cc <rfalIsoDepStartApduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 80068cc:	b084      	sub	sp, #16
 80068ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d0:	b093      	sub	sp, #76	; 0x4c
 80068d2:	af08      	add	r7, sp, #32
 80068d4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80068d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 80068dc:	4b25      	ldr	r3, [pc, #148]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 80068de:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80068e2:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80068e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	6023      	str	r3, [r4, #0]
    gIsoDep.APDUTxPos = 0;
 80068f2:	4b20      	ldr	r3, [pc, #128]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    gIsoDep.APDURxPos = 0;
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    
    /* Assign current FSx to calculate INF length (only change the FSx from activation if no to Keep) */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8006902:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006906:	2bff      	cmp	r3, #255	; 0xff
 8006908:	d002      	beq.n	8006910 <rfalIsoDepStartApduTransceive+0x44>
 800690a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800690e:	e001      	b.n	8006914 <rfalIsoDepStartApduTransceive+0x48>
 8006910:	4b18      	ldr	r3, [pc, #96]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 8006912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006914:	4a17      	ldr	r2, [pc, #92]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 8006916:	84d3      	strh	r3, [r2, #38]	; 0x26
    gIsoDep.fsx    = param.FSx;
 8006918:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800691c:	4b15      	ldr	r3, [pc, #84]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 800691e:	829a      	strh	r2, [r3, #20]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 8006920:	4b14      	ldr	r3, [pc, #80]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 8006922:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8006926:	4a13      	ldr	r2, [pc, #76]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 8006928:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 800692c:	4e11      	ldr	r6, [pc, #68]	; (8006974 <rfalIsoDepStartApduTransceive+0xa8>)
 800692e:	9207      	str	r2, [sp, #28]
 8006930:	9306      	str	r3, [sp, #24]
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	9305      	str	r3, [sp, #20]
 8006936:	466d      	mov	r5, sp
 8006938:	f106 04a0 	add.w	r4, r6, #160	; 0xa0
 800693c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800693e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f106 0390 	add.w	r3, r6, #144	; 0x90
 8006948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800694a:	f7ff ff77 	bl	800683c <rfalIsoDepApdu2IBLockParam>
    
    return rfalIsoDepStartTransceive( txRxParam );
 800694e:	466d      	mov	r5, sp
 8006950:	f107 0414 	add.w	r4, r7, #20
 8006954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	1d3b      	adds	r3, r7, #4
 800695e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006960:	f7fe fd2a 	bl	80053b8 <rfalIsoDepStartTransceive>
 8006964:	4603      	mov	r3, r0
}
 8006966:	4618      	mov	r0, r3
 8006968:	372c      	adds	r7, #44	; 0x2c
 800696a:	46bd      	mov	sp, r7
 800696c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006970:	b004      	add	sp, #16
 8006972:	4770      	bx	lr
 8006974:	200009ec 	.word	0x200009ec

08006978 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 8006978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697a:	b093      	sub	sp, #76	; 0x4c
 800697c:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 800697e:	f7fe fd87 	bl	8005490 <rfalIsoDepGetTransceiveStatus>
 8006982:	4603      	mov	r3, r0
 8006984:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 8006986:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <rfalIsoDepGetApduTransceiveStatus+0x1e>
 800698c:	2b0d      	cmp	r3, #13
 800698e:	d04e      	beq.n	8006a2e <rfalIsoDepGetApduTransceiveStatus+0xb6>
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
        
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 8006990:	bf00      	nop
    }
    
    return ret;
 8006992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006994:	e097      	b.n	8006ac6 <rfalIsoDepGetApduTransceiveStatus+0x14e>
            if( gIsoDep.isTxChaining )
 8006996:	4b4e      	ldr	r3, [pc, #312]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006998:	7d9b      	ldrb	r3, [r3, #22]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d047      	beq.n	8006a2e <rfalIsoDepGetApduTransceiveStatus+0xb6>
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 800699e:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069a0:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 80069a4:	4b4a      	ldr	r3, [pc, #296]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069a6:	8c1b      	ldrh	r3, [r3, #32]
 80069a8:	4413      	add	r3, r2
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	4b48      	ldr	r3, [pc, #288]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069ae:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 80069b2:	4b47      	ldr	r3, [pc, #284]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069b4:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80069b8:	4a45      	ldr	r2, [pc, #276]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069ba:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 80069be:	4e44      	ldr	r6, [pc, #272]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069c0:	9207      	str	r2, [sp, #28]
 80069c2:	9306      	str	r3, [sp, #24]
 80069c4:	463b      	mov	r3, r7
 80069c6:	9305      	str	r3, [sp, #20]
 80069c8:	466d      	mov	r5, sp
 80069ca:	f106 04a0 	add.w	r4, r6, #160	; 0xa0
 80069ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	f106 0390 	add.w	r3, r6, #144	; 0x90
 80069da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069dc:	f7ff ff2e 	bl	800683c <rfalIsoDepApdu2IBLockParam>
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 80069e0:	88bb      	ldrh	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00f      	beq.n	8006a06 <rfalIsoDepGetApduTransceiveStatus+0x8e>
                    ST_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 80069e6:	4b3a      	ldr	r3, [pc, #232]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ec:	1cd8      	adds	r0, r3, #3
 80069ee:	4b38      	ldr	r3, [pc, #224]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f4:	4a36      	ldr	r2, [pc, #216]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 80069f6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 80069fa:	4413      	add	r3, r2
 80069fc:	3303      	adds	r3, #3
 80069fe:	88ba      	ldrh	r2, [r7, #4]
 8006a00:	4619      	mov	r1, r3
 8006a02:	f00b fb8b 	bl	801211c <memcpy>
                EXIT_ON_ERR( ret, rfalIsoDepStartTransceive( txRxParam ) );
 8006a06:	466d      	mov	r5, sp
 8006a08:	f107 0410 	add.w	r4, r7, #16
 8006a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	463b      	mov	r3, r7
 8006a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a18:	f7fe fcce 	bl	80053b8 <rfalIsoDepStartTransceive>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <rfalIsoDepGetApduTransceiveStatus+0xb2>
 8006a26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a28:	e04d      	b.n	8006ac6 <rfalIsoDepGetApduTransceiveStatus+0x14e>
                return ERR_BUSY;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e04b      	b.n	8006ac6 <rfalIsoDepGetApduTransceiveStatus+0x14e>
            if( gIsoDep.APDUParam.rxLen == NULL )
 8006a2e:	4b28      	ldr	r3, [pc, #160]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <rfalIsoDepGetApduTransceiveStatus+0xce>
                if( ret == ERR_AGAIN  )
 8006a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a3a:	2b0d      	cmp	r3, #13
 8006a3c:	d101      	bne.n	8006a42 <rfalIsoDepGetApduTransceiveStatus+0xca>
                    return ERR_NOTSUPP;
 8006a3e:	2318      	movs	r3, #24
 8006a40:	e041      	b.n	8006ac6 <rfalIsoDepGetApduTransceiveStatus+0x14e>
                return ERR_NONE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e03f      	b.n	8006ac6 <rfalIsoDepGetApduTransceiveStatus+0x14e>
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 8006a46:	4b22      	ldr	r3, [pc, #136]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d02c      	beq.n	8006aac <rfalIsoDepGetApduTransceiveStatus+0x134>
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 8006a52:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a54:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	4413      	add	r3, r2
 8006a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a68:	dd01      	ble.n	8006a6e <rfalIsoDepGetApduTransceiveStatus+0xf6>
                    return ERR_NOMEM;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e02b      	b.n	8006ac6 <rfalIsoDepGetApduTransceiveStatus+0x14e>
                ST_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 8006a6e:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a74:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a76:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 8006a7a:	4413      	add	r3, r2
 8006a7c:	1cd8      	adds	r0, r3, #3
 8006a7e:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a84:	1cd9      	adds	r1, r3, #3
 8006a86:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f00b fb44 	bl	801211c <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a96:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006aa8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
            *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ab2:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <rfalIsoDepGetApduTransceiveStatus+0x158>)
 8006ab4:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 8006ab8:	801a      	strh	r2, [r3, #0]
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
 8006aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006abc:	2b0d      	cmp	r3, #13
 8006abe:	d101      	bne.n	8006ac4 <rfalIsoDepGetApduTransceiveStatus+0x14c>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e000      	b.n	8006ac6 <rfalIsoDepGetApduTransceiveStatus+0x14e>
 8006ac4:	2300      	movs	r3, #0
 }
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	372c      	adds	r7, #44	; 0x2c
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	200009ec 	.word	0x200009ec

08006ad4 <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 8006ada:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <rfalNfcInitialize+0x34>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 8006ae0:	f7fc feaa 	bl	8003838 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 8006ae4:	f006 f8a0 	bl	800cc28 <rfalInitialize>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	80fb      	strh	r3, [r7, #6]
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <rfalNfcInitialize+0x22>
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	e003      	b.n	8006afe <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 8006af6:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <rfalNfcInitialize+0x34>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000aa8 	.word	0x20000aa8

08006b0c <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8006b14:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d001      	beq.n	8006b20 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 8006b1c:	2321      	movs	r3, #33	; 0x21
 8006b1e:	e086      	b.n	8006c2e <rfalNfcDiscover+0x122>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d02d      	beq.n	8006b82 <rfalNfcDiscover+0x76>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	799b      	ldrb	r3, [r3, #6]
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	d829      	bhi.n	8006b82 <rfalNfcDiscover+0x76>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	799b      	ldrb	r3, [r3, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d025      	beq.n	8006b82 <rfalNfcDiscover+0x76>
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	79db      	ldrb	r3, [r3, #7]
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d903      	bls.n	8006b46 <rfalNfcDiscover+0x3a>
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	79db      	ldrb	r3, [r3, #7]
 8006b42:	2bff      	cmp	r3, #255	; 0xff
 8006b44:	d11d      	bne.n	8006b82 <rfalNfcDiscover+0x76>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <rfalNfcDiscover+0x56>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7a1b      	ldrb	r3, [r3, #8]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d003      	beq.n	8006b62 <rfalNfcDiscover+0x56>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7a1b      	ldrb	r3, [r3, #8]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d10f      	bne.n	8006b82 <rfalNfcDiscover+0x76>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	885b      	ldrh	r3, [r3, #2]
 8006b66:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <rfalNfcDiscover+0x6c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d804      	bhi.n	8006b82 <rfalNfcDiscover+0x76>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b7e:	2b30      	cmp	r3, #48	; 0x30
 8006b80:	d901      	bls.n	8006b86 <rfalNfcDiscover+0x7a>
    {
        return ERR_PARAM;
 8006b82:	2307      	movs	r3, #7
 8006b84:	e053      	b.n	8006c2e <rfalNfcDiscover+0x122>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 8006b86:	4b2c      	ldr	r3, [pc, #176]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 8006b8c:	4b2a      	ldr	r3, [pc, #168]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 8006b92:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
    gNfcDev.discRestart     = true;
 8006b9a:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
    gNfcDev.isTechInit      = false;
 8006ba2:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    gNfcDev.disc            = *disParams;
 8006baa:	4b23      	ldr	r3, [pc, #140]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	228c      	movs	r2, #140	; 0x8c
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f00b fab1 	bl	801211c <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 8006bba:	4b1f      	ldr	r3, [pc, #124]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bc4:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 8006bc8:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bca:	89db      	ldrh	r3, [r3, #14]
 8006bcc:	089b      	lsrs	r3, r3, #2
 8006bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bd6:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 8006bda:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bdc:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 8006be0:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006be2:	89db      	ldrh	r3, [r3, #14]
 8006be4:	089b      	lsrs	r3, r3, #2
 8006be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bea:	4313      	orrs	r3, r2
 8006bec:	4a12      	ldr	r2, [pc, #72]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bee:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bf4:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006bfa:	89db      	ldrh	r3, [r3, #14]
 8006bfc:	089b      	lsrs	r3, r3, #2
 8006bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c02:	4313      	orrs	r3, r2
 8006c04:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006c06:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006c0c:	f8d3 22fc 	ldr.w	r2, [r3, #764]	; 0x2fc
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006c12:	89db      	ldrh	r3, [r3, #14]
 8006c14:	b21b      	sxth	r3, r3
 8006c16:	109b      	asrs	r3, r3, #2
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	4a05      	ldr	r2, [pc, #20]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006c22:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
    {
        return ERR_DISABLED;
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 8006c26:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <rfalNfcDiscover+0x12c>)
 8006c28:	2202      	movs	r2, #2
 8006c2a:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000aa8 	.word	0x20000aa8

08006c3c <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <rfalNfcDeactivate+0x48>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d801      	bhi.n	8006c52 <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 8006c4e:	2321      	movs	r3, #33	; 0x21
 8006c50:	e014      	b.n	8006c7c <rfalNfcDeactivate+0x40>
    }
    
    /* Check if discovery is to continue afterwards */
    if( (discovery == true) && (gNfcDev.disc.techs2Find != RFAL_NFC_TECH_NONE) )
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <rfalNfcDeactivate+0x34>
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <rfalNfcDeactivate+0x48>)
 8006c5a:	89db      	ldrh	r3, [r3, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <rfalNfcDeactivate+0x34>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 8006c60:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <rfalNfcDeactivate+0x48>)
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	f882 32fa 	strb.w	r3, [r2, #762]	; 0x2fa
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <rfalNfcDeactivate+0x48>)
 8006c6a:	2222      	movs	r2, #34	; 0x22
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	e004      	b.n	8006c7a <rfalNfcDeactivate+0x3e>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 8006c70:	f001 ff8c 	bl	8008b8c <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8006c74:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <rfalNfcDeactivate+0x48>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000aa8 	.word	0x20000aa8

08006c88 <rfalNfcSelect>:

/*******************************************************************************/
ReturnCode rfalNfcSelect( uint8_t devIdx )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 8006c92:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <rfalNfcSelect+0x30>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b0c      	cmp	r3, #12
 8006c98:	d001      	beq.n	8006c9e <rfalNfcSelect+0x16>
    {
        return ERR_WRONG_STATE;
 8006c9a:	2321      	movs	r3, #33	; 0x21
 8006c9c:	e006      	b.n	8006cac <rfalNfcSelect+0x24>
    }
    
    gNfcDev.selDevIdx = devIdx;
 8006c9e:	4a06      	ldr	r2, [pc, #24]	; (8006cb8 <rfalNfcSelect+0x30>)
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	71d3      	strb	r3, [r2, #7]
    gNfcDev.state     = RFAL_NFC_STATE_POLL_ACTIVATION;
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <rfalNfcSelect+0x30>)
 8006ca6:	220d      	movs	r2, #13
 8006ca8:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000aa8 	.word	0x20000aa8

08006cbc <rfalNfcGetState>:

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 8006cc0:	4b02      	ldr	r3, [pc, #8]	; (8006ccc <rfalNfcGetState+0x10>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr
 8006ccc:	20000aa8 	.word	0x20000aa8

08006cd0 <rfalNfcGetDevicesFound>:

/*******************************************************************************/
ReturnCode rfalNfcGetDevicesFound( rfalNfcDevice **devList, uint8_t *devCnt )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 8006cda:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <rfalNfcGetDevicesFound+0x44>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b0b      	cmp	r3, #11
 8006ce0:	d801      	bhi.n	8006ce6 <rfalNfcGetDevicesFound+0x16>
    {
        return ERR_WRONG_STATE;
 8006ce2:	2321      	movs	r3, #33	; 0x21
 8006ce4:	e010      	b.n	8006d08 <rfalNfcGetDevicesFound+0x38>
    }
    
    /* Check valid parameters */
    if( (devList == NULL) || (devCnt == NULL) )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <rfalNfcGetDevicesFound+0x22>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <rfalNfcGetDevicesFound+0x26>
    {
        return ERR_PARAM;
 8006cf2:	2307      	movs	r3, #7
 8006cf4:	e008      	b.n	8006d08 <rfalNfcGetDevicesFound+0x38>
    }
    
    *devCnt  = gNfcDev.devCnt;
 8006cf6:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <rfalNfcGetDevicesFound+0x44>)
 8006cf8:	f893 22f0 	ldrb.w	r2, [r3, #752]	; 0x2f0
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	701a      	strb	r2, [r3, #0]
    *devList = gNfcDev.devList;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <rfalNfcGetDevicesFound+0x48>)
 8006d04:	601a      	str	r2, [r3, #0]
    
    return ERR_NONE;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000aa8 	.word	0x20000aa8
 8006d18:	20000b40 	.word	0x20000b40

08006d1c <rfalNfcWorker>:
}


/*******************************************************************************/
void rfalNfcWorker( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af04      	add	r7, sp, #16
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 8006d22:	f006 ff97 	bl	800dc54 <rfalWorker>
    
    switch( gNfcDev.state )
 8006d26:	4bb6      	ldr	r3, [pc, #728]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b22      	cmp	r3, #34	; 0x22
 8006d2c:	f200 81e1 	bhi.w	80070f2 <rfalNfcWorker+0x3d6>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <rfalNfcWorker+0x1c>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	080070f3 	.word	0x080070f3
 8006d3c:	080070f3 	.word	0x080070f3
 8006d40:	08006dc5 	.word	0x08006dc5
 8006d44:	08006e33 	.word	0x08006e33
 8006d48:	080070f3 	.word	0x080070f3
 8006d4c:	080070f3 	.word	0x080070f3
 8006d50:	080070f3 	.word	0x080070f3
 8006d54:	080070f3 	.word	0x080070f3
 8006d58:	080070f3 	.word	0x080070f3
 8006d5c:	080070f3 	.word	0x080070f3
 8006d60:	08006e61 	.word	0x08006e61
 8006d64:	08006ead 	.word	0x08006ead
 8006d68:	080070f3 	.word	0x080070f3
 8006d6c:	08006f09 	.word	0x08006f09
 8006d70:	080070f3 	.word	0x080070f3
 8006d74:	080070f3 	.word	0x080070f3
 8006d78:	080070f3 	.word	0x080070f3
 8006d7c:	080070f3 	.word	0x080070f3
 8006d80:	080070f3 	.word	0x080070f3
 8006d84:	080070f3 	.word	0x080070f3
 8006d88:	08006fcd 	.word	0x08006fcd
 8006d8c:	08007045 	.word	0x08007045
 8006d90:	0800708d 	.word	0x0800708d
 8006d94:	0800708d 	.word	0x0800708d
 8006d98:	080070f3 	.word	0x080070f3
 8006d9c:	080070f3 	.word	0x080070f3
 8006da0:	080070f3 	.word	0x080070f3
 8006da4:	080070f3 	.word	0x080070f3
 8006da8:	080070f3 	.word	0x080070f3
 8006dac:	080070f3 	.word	0x080070f3
 8006db0:	080070f3 	.word	0x080070f3
 8006db4:	08006f4b 	.word	0x08006f4b
 8006db8:	080070f3 	.word	0x080070f3
 8006dbc:	080070f3 	.word	0x080070f3
 8006dc0:	08006f9d 	.word	0x08006f9d
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 8006dc4:	4b8e      	ldr	r3, [pc, #568]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            gNfcDev.selDevIdx   = 0;
 8006dcc:	4b8c      	ldr	r3, [pc, #560]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 8006dd2:	4b8b      	ldr	r3, [pc, #556]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 8006dd8:	4b89      	ldr	r3, [pc, #548]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006dda:	89da      	ldrh	r2, [r3, #14]
 8006ddc:	4b88      	ldr	r3, [pc, #544]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006dde:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8006de0:	4b87      	ldr	r3, [pc, #540]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006de2:	220a      	movs	r2, #10
 8006de4:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 8006de6:	4b86      	ldr	r3, [pc, #536]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006de8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8182 	beq.w	80070f6 <rfalNfcWorker+0x3da>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8006df2:	4b83      	ldr	r3, [pc, #524]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006df4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <rfalNfcWorker+0xe4>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e000      	b.n	8006e02 <rfalNfcWorker+0xe6>
 8006e00:	4b80      	ldr	r3, [pc, #512]	; (8007004 <rfalNfcWorker+0x2e8>)
 8006e02:	4618      	mov	r0, r3
 8006e04:	f009 f962 	bl	80100cc <rfalWakeUpModeStart>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 8171 	bne.w	80070f6 <rfalNfcWorker+0x3da>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 8006e14:	4b7a      	ldr	r3, [pc, #488]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e16:	2203      	movs	r2, #3
 8006e18:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 8006e1a:	4b79      	ldr	r3, [pc, #484]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8169 	beq.w	80070f6 <rfalNfcWorker+0x3da>
 8006e24:	4b76      	ldr	r3, [pc, #472]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e28:	4a75      	ldr	r2, [pc, #468]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e2a:	7812      	ldrb	r2, [r2, #0]
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 8006e30:	e161      	b.n	80070f6 <rfalNfcWorker+0x3da>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 8006e32:	f009 fb73 	bl	801051c <rfalWakeUpModeHasWoke>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 815e 	beq.w	80070fa <rfalNfcWorker+0x3de>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 8006e3e:	f009 fcbf 	bl	80107c0 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8006e42:	4b6f      	ldr	r3, [pc, #444]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e44:	220a      	movs	r2, #10
 8006e46:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8006e48:	4b6d      	ldr	r3, [pc, #436]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8154 	beq.w	80070fa <rfalNfcWorker+0x3de>
 8006e52:	4b6b      	ldr	r3, [pc, #428]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e56:	4a6a      	ldr	r2, [pc, #424]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 8006e5e:	e14c      	b.n	80070fa <rfalNfcWorker+0x3de>
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            platformTimerDestroy( gNfcDev.discTmr );
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 8006e60:	4b67      	ldr	r3, [pc, #412]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e62:	8a1b      	ldrh	r3, [r3, #16]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f00b f8fd 	bl	8012064 <timerCalculateTimer>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4a64      	ldr	r2, [pc, #400]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e6e:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 8006e72:	f000 fb33 	bl	80074dc <rfalNfcPollTechDetetection>
 8006e76:	4603      	mov	r3, r0
 8006e78:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8006e7a:	88fb      	ldrh	r3, [r7, #6]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	f000 813e 	beq.w	80070fe <rfalNfcWorker+0x3e2>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <rfalNfcWorker+0x174>
 8006e88:	4b5d      	ldr	r3, [pc, #372]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e8a:	885b      	ldrh	r3, [r3, #2]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 8006e90:	f006 fc88 	bl	800d7a4 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 8006e94:	4b5a      	ldr	r3, [pc, #360]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e96:	2214      	movs	r2, #20
 8006e98:	701a      	strb	r2, [r3, #0]
                    break;
 8006e9a:	e143      	b.n	8007124 <rfalNfcWorker+0x408>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 8006e9c:	4b58      	ldr	r3, [pc, #352]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006e9e:	885a      	ldrh	r2, [r3, #2]
 8006ea0:	4b57      	ldr	r3, [pc, #348]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ea2:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 8006ea4:	4b56      	ldr	r3, [pc, #344]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ea6:	220b      	movs	r2, #11
 8006ea8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8006eaa:	e128      	b.n	80070fe <rfalNfcWorker+0x3e2>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 8006eac:	f000 fd24 	bl	80078f8 <rfalNfcPollCollResolution>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	f000 8123 	beq.w	8007102 <rfalNfcWorker+0x3e6>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <rfalNfcWorker+0x1b0>
 8006ec2:	4b4f      	ldr	r3, [pc, #316]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ec4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 8006ecc:	4b4c      	ldr	r3, [pc, #304]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ece:	2222      	movs	r2, #34	; 0x22
 8006ed0:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 8006ed2:	e127      	b.n	8007124 <rfalNfcWorker+0x408>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 8006ed4:	4b4a      	ldr	r3, [pc, #296]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ed6:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d90d      	bls.n	8006efa <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 8006ede:	4b48      	ldr	r3, [pc, #288]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 8006ee6:	4b46      	ldr	r3, [pc, #280]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ee8:	220c      	movs	r2, #12
 8006eea:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 8006eec:	4b44      	ldr	r3, [pc, #272]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef0:	4a43      	ldr	r2, [pc, #268]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
                        break;
 8006ef8:	e114      	b.n	8007124 <rfalNfcWorker+0x408>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 8006efa:	4b41      	ldr	r3, [pc, #260]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 8006f00:	4b3f      	ldr	r3, [pc, #252]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f02:	220d      	movs	r2, #13
 8006f04:	701a      	strb	r2, [r3, #0]
            }
            break;
 8006f06:	e0fc      	b.n	8007102 <rfalNfcWorker+0x3e6>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            err = rfalNfcPollActivation( gNfcDev.selDevIdx );
 8006f08:	4b3d      	ldr	r3, [pc, #244]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f0a:	79db      	ldrb	r3, [r3, #7]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 f885 	bl	800801c <rfalNfcPollActivation>
 8006f12:	4603      	mov	r3, r0
 8006f14:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                         /* Wait until all Activation is complete */
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	f000 80f4 	beq.w	8007106 <rfalNfcWorker+0x3ea>
            {
                if( err != ERR_NONE )                                                     /* Activation failed selected device  */
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <rfalNfcWorker+0x210>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 8006f24:	4b36      	ldr	r3, [pc, #216]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f26:	2222      	movs	r2, #34	; 0x22
 8006f28:	701a      	strb	r2, [r3, #0]
                    break;
 8006f2a:	e0fb      	b.n	8007124 <rfalNfcWorker+0x408>
                }
                
                gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 8006f2c:	4b34      	ldr	r3, [pc, #208]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f2e:	221e      	movs	r2, #30
 8006f30:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 8006f32:	4b33      	ldr	r3, [pc, #204]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 80e5 	beq.w	8007106 <rfalNfcWorker+0x3ea>
 8006f3c:	4b30      	ldr	r3, [pc, #192]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f40:	4a2f      	ldr	r2, [pc, #188]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	4610      	mov	r0, r2
 8006f46:	4798      	blx	r3
            }
            break;
 8006f48:	e0dd      	b.n	8007106 <rfalNfcWorker+0x3ea>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 8006f4a:	f000 fa43 	bl	80073d4 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 8006f4e:	4b2c      	ldr	r3, [pc, #176]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f50:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d00c      	beq.n	8006f72 <rfalNfcWorker+0x256>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 8006f58:	4b29      	ldr	r3, [pc, #164]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f5a:	2221      	movs	r2, #33	; 0x21
 8006f5c:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8006f5e:	4b28      	ldr	r3, [pc, #160]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <rfalNfcWorker+0x256>
 8006f66:	4b26      	ldr	r3, [pc, #152]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6a:	4a25      	ldr	r2, [pc, #148]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 8006f72:	4b23      	ldr	r3, [pc, #140]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f74:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	f040 80c6 	bne.w	800710a <rfalNfcWorker+0x3ee>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 8006f7e:	4b20      	ldr	r3, [pc, #128]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f80:	2217      	movs	r2, #23
 8006f82:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8006f84:	4b1e      	ldr	r3, [pc, #120]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80be 	beq.w	800710a <rfalNfcWorker+0x3ee>
 8006f8e:	4b1c      	ldr	r3, [pc, #112]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f92:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006f94:	7812      	ldrb	r2, [r2, #0]
 8006f96:	4610      	mov	r0, r2
 8006f98:	4798      	blx	r3
            }
            break;
 8006f9a:	e0b6      	b.n	800710a <rfalNfcWorker+0x3ee>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 8006f9c:	f001 fdf6 	bl	8008b8c <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 8006fa0:	4b17      	ldr	r3, [pc, #92]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fa2:	f893 32fa 	ldrb.w	r3, [r3, #762]	; 0x2fa
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <rfalNfcWorker+0x292>
 8006faa:	2202      	movs	r2, #2
 8006fac:	e000      	b.n	8006fb0 <rfalNfcWorker+0x294>
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4b13      	ldr	r3, [pc, #76]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fb2:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80a8 	beq.w	800710e <rfalNfcWorker+0x3f2>
 8006fbe:	4b10      	ldr	r3, [pc, #64]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc2:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fc4:	7812      	ldrb	r2, [r2, #0]
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4798      	blx	r3
            break;
 8006fca:	e0a0      	b.n	800710e <rfalNfcWorker+0x3f2>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fce:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f00b f854 	bl	8012080 <timerIsExpired>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d014      	beq.n	8007008 <rfalNfcWorker+0x2ec>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
 8006fde:	f008 fe33 	bl	800fc48 <rfalListenStop>
                #else
                    rfalFieldOff();
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8006fe2:	4b07      	ldr	r3, [pc, #28]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller             */
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8090 	beq.w	8007112 <rfalNfcWorker+0x3f6>
 8006ff2:	4b03      	ldr	r3, [pc, #12]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff6:	4a02      	ldr	r2, [pc, #8]	; (8007000 <rfalNfcWorker+0x2e4>)
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4798      	blx	r3
                break;
 8006ffe:	e088      	b.n	8007112 <rfalNfcWorker+0x3f6>
 8007000:	20000aa8 	.word	0x20000aa8
 8007004:	20000b22 	.word	0x20000b22
            }

    #if RFAL_FEATURE_LISTEN_MODE
            
            if( gNfcDev.lmMask != 0U )                                                /* Check if configured to perform Listen mode */
 8007008:	4b48      	ldr	r3, [pc, #288]	; (800712c <rfalNfcWorker+0x410>)
 800700a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8081 	beq.w	8007116 <rfalNfcWorker+0x3fa>
            {
                err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, (uint16_t)rfalConvBytesToBits(sizeof(gNfcDev.rxBuf.rfBuf)), &gNfcDev.rxLen );
 8007014:	4b45      	ldr	r3, [pc, #276]	; (800712c <rfalNfcWorker+0x410>)
 8007016:	f8d3 02fc 	ldr.w	r0, [r3, #764]	; 0x2fc
 800701a:	4b45      	ldr	r3, [pc, #276]	; (8007130 <rfalNfcWorker+0x414>)
 800701c:	9302      	str	r3, [sp, #8]
 800701e:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	4b43      	ldr	r3, [pc, #268]	; (8007134 <rfalNfcWorker+0x418>)
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	4b43      	ldr	r3, [pc, #268]	; (8007138 <rfalNfcWorker+0x41c>)
 800702a:	2200      	movs	r2, #0
 800702c:	4943      	ldr	r1, [pc, #268]	; (800713c <rfalNfcWorker+0x420>)
 800702e:	f008 f975 	bl	800f31c <rfalListenStart>
 8007032:	4603      	mov	r3, r0
 8007034:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d16c      	bne.n	8007116 <rfalNfcWorker+0x3fa>
                {
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;               /* Wait for listen mode to be activated */
 800703c:	4b3b      	ldr	r3, [pc, #236]	; (800712c <rfalNfcWorker+0x410>)
 800703e:	2215      	movs	r2, #21
 8007040:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8007042:	e068      	b.n	8007116 <rfalNfcWorker+0x3fa>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_COLAVOIDANCE:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 8007044:	4b39      	ldr	r3, [pc, #228]	; (800712c <rfalNfcWorker+0x410>)
 8007046:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800704a:	4618      	mov	r0, r3
 800704c:	f00b f818 	bl	8012080 <timerIsExpired>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00f      	beq.n	8007076 <rfalNfcWorker+0x35a>
            {
                rfalListenStop();
 8007056:	f008 fdf7 	bl	800fc48 <rfalListenStop>
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800705a:	4b34      	ldr	r3, [pc, #208]	; (800712c <rfalNfcWorker+0x410>)
 800705c:	2202      	movs	r2, #2
 800705e:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller             */
 8007060:	4b32      	ldr	r3, [pc, #200]	; (800712c <rfalNfcWorker+0x410>)
 8007062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007064:	2b00      	cmp	r3, #0
 8007066:	d058      	beq.n	800711a <rfalNfcWorker+0x3fe>
 8007068:	4b30      	ldr	r3, [pc, #192]	; (800712c <rfalNfcWorker+0x410>)
 800706a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706c:	4a2f      	ldr	r2, [pc, #188]	; (800712c <rfalNfcWorker+0x410>)
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
                break;
 8007074:	e051      	b.n	800711a <rfalNfcWorker+0x3fe>
            }
            
            /* Check for external field */
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 8007076:	2100      	movs	r1, #0
 8007078:	2000      	movs	r0, #0
 800707a:	f008 fe8b 	bl	800fd94 <rfalListenGetState>
 800707e:	4603      	mov	r3, r0
 8007080:	2b01      	cmp	r3, #1
 8007082:	d94c      	bls.n	800711e <rfalNfcWorker+0x402>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 8007084:	4b29      	ldr	r3, [pc, #164]	; (800712c <rfalNfcWorker+0x410>)
 8007086:	2216      	movs	r2, #22
 8007088:	701a      	strb	r2, [r3, #0]
            }
            break;
 800708a:	e048      	b.n	800711e <rfalNfcWorker+0x402>
        
        /*******************************************************************************/    
        case RFAL_NFC_STATE_LISTEN_ACTIVATION:
        case RFAL_NFC_STATE_LISTEN_SLEEP:
            
            err = rfalNfcListenActivation();
 800708c:	f001 faee 	bl	800866c <rfalNfcListenActivation>
 8007090:	4603      	mov	r3, r0
 8007092:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d043      	beq.n	8007122 <rfalNfcWorker+0x406>
            {
                if( err == ERR_NONE )
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d118      	bne.n	80070d2 <rfalNfcWorker+0x3b6>
                {
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 80070a0:	4b22      	ldr	r3, [pc, #136]	; (800712c <rfalNfcWorker+0x410>)
 80070a2:	4a27      	ldr	r2, [pc, #156]	; (8007140 <rfalNfcWorker+0x424>)
 80070a4:	609a      	str	r2, [r3, #8]
                    gNfcDev.devCnt++;
 80070a6:	4b21      	ldr	r3, [pc, #132]	; (800712c <rfalNfcWorker+0x410>)
 80070a8:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80070ac:	3301      	adds	r3, #1
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	4b1e      	ldr	r3, [pc, #120]	; (800712c <rfalNfcWorker+0x410>)
 80070b2:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
                    
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 80070b6:	4b1d      	ldr	r3, [pc, #116]	; (800712c <rfalNfcWorker+0x410>)
 80070b8:	221e      	movs	r2, #30
 80070ba:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Inform upper layer that a device has been activated */
 80070bc:	4b1b      	ldr	r3, [pc, #108]	; (800712c <rfalNfcWorker+0x410>)
 80070be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d02e      	beq.n	8007122 <rfalNfcWorker+0x406>
 80070c4:	4b19      	ldr	r3, [pc, #100]	; (800712c <rfalNfcWorker+0x410>)
 80070c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c8:	4a18      	ldr	r2, [pc, #96]	; (800712c <rfalNfcWorker+0x410>)
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
                }
            }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
            break;
 80070d0:	e027      	b.n	8007122 <rfalNfcWorker+0x406>
                    rfalListenStop();
 80070d2:	f008 fdb9 	bl	800fc48 <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 80070d6:	4b15      	ldr	r3, [pc, #84]	; (800712c <rfalNfcWorker+0x410>)
 80070d8:	2202      	movs	r2, #2
 80070da:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <rfalNfcWorker+0x410>)
 80070de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01e      	beq.n	8007122 <rfalNfcWorker+0x406>
 80070e4:	4b11      	ldr	r3, [pc, #68]	; (800712c <rfalNfcWorker+0x410>)
 80070e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e8:	4a10      	ldr	r2, [pc, #64]	; (800712c <rfalNfcWorker+0x410>)
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
            break;
 80070f0:	e017      	b.n	8007122 <rfalNfcWorker+0x406>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 80070f2:	bf00      	nop
 80070f4:	e016      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 80070f6:	bf00      	nop
 80070f8:	e014      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 80070fa:	bf00      	nop
 80070fc:	e012      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 80070fe:	bf00      	nop
 8007100:	e010      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 8007102:	bf00      	nop
 8007104:	e00e      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 8007106:	bf00      	nop
 8007108:	e00c      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 800710a:	bf00      	nop
 800710c:	e00a      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 800710e:	bf00      	nop
 8007110:	e008      	b.n	8007124 <rfalNfcWorker+0x408>
                break;
 8007112:	bf00      	nop
 8007114:	e006      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 8007116:	bf00      	nop
 8007118:	e004      	b.n	8007124 <rfalNfcWorker+0x408>
                break;
 800711a:	bf00      	nop
 800711c:	e002      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <rfalNfcWorker+0x408>
            break;
 8007122:	bf00      	nop
    }
}
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000aa8 	.word	0x20000aa8
 8007130:	200011b4 	.word	0x200011b4
 8007134:	20000faf 	.word	0x20000faf
 8007138:	20000b07 	.word	0x20000b07
 800713c:	20000af9 	.word	0x20000af9
 8007140:	20000b40 	.word	0x20000b40

08007144 <rfalNfcDataExchangeStart>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeStart( uint8_t *txData, uint16_t txDataLen, uint8_t **rxData, uint16_t **rvdLen, uint32_t fwt )
{
 8007144:	b5b0      	push	{r4, r5, r7, lr}
 8007146:	b09c      	sub	sp, #112	; 0x70
 8007148:	af06      	add	r7, sp, #24
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	460b      	mov	r3, r1
 8007152:	817b      	strh	r3, [r7, #10]
    rfalTransceiveContext ctx;
    
    /*******************************************************************************/
    /* The Data Exchange is divided in two different moments, the trigger/Start of *
     *  the transfer followed by the check until its completion                    */
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 8007154:	4b96      	ldr	r3, [pc, #600]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b1d      	cmp	r3, #29
 800715a:	f240 8123 	bls.w	80073a4 <rfalNfcDataExchangeStart+0x260>
 800715e:	4b94      	ldr	r3, [pc, #592]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 811e 	beq.w	80073a4 <rfalNfcDataExchangeStart+0x260>
        
        /*******************************************************************************/
        /* In Listen mode is the Poller that initiates the communicatation             */
        /* Assign output parameters and rfalNfcDataExchangeGetStatus will return       */
        /* incoming data from Poller/Initiator                                         */
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 8007168:	4b91      	ldr	r3, [pc, #580]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b1e      	cmp	r3, #30
 800716e:	d124      	bne.n	80071ba <rfalNfcDataExchangeStart+0x76>
 8007170:	4b8f      	ldr	r3, [pc, #572]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b09      	cmp	r3, #9
 8007178:	d91f      	bls.n	80071ba <rfalNfcDataExchangeStart+0x76>
 800717a:	4b8d      	ldr	r3, [pc, #564]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b0f      	cmp	r3, #15
 8007182:	d81a      	bhi.n	80071ba <rfalNfcDataExchangeStart+0x76>
        {
            if( txDataLen > 0U )
 8007184:	897b      	ldrh	r3, [r7, #10]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <rfalNfcDataExchangeStart+0x4a>
            {
                return ERR_WRONG_STATE;
 800718a:	2321      	movs	r3, #33	; 0x21
 800718c:	e10b      	b.n	80073a6 <rfalNfcDataExchangeStart+0x262>
            }
            
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	4a88      	ldr	r2, [pc, #544]	; (80073b4 <rfalNfcDataExchangeStart+0x270>)
 8007192:	601a      	str	r2, [r3, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 8007194:	4b86      	ldr	r3, [pc, #536]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	7f5b      	ldrb	r3, [r3, #29]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d008      	beq.n	80071b0 <rfalNfcDataExchangeStart+0x6c>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.pdu  : gNfcDev.rxBuf.rfBuf));
 800719e:	4b84      	ldr	r3, [pc, #528]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	7f5b      	ldrb	r3, [r3, #29]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d101      	bne.n	80071ac <rfalNfcDataExchangeStart+0x68>
 80071a8:	4b83      	ldr	r3, [pc, #524]	; (80073b8 <rfalNfcDataExchangeStart+0x274>)
 80071aa:	e002      	b.n	80071b2 <rfalNfcDataExchangeStart+0x6e>
 80071ac:	4b83      	ldr	r3, [pc, #524]	; (80073bc <rfalNfcDataExchangeStart+0x278>)
 80071ae:	e000      	b.n	80071b2 <rfalNfcDataExchangeStart+0x6e>
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 80071b0:	4b83      	ldr	r3, [pc, #524]	; (80073c0 <rfalNfcDataExchangeStart+0x27c>)
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6013      	str	r3, [r2, #0]
            return ERR_NONE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e0f5      	b.n	80073a6 <rfalNfcDataExchangeStart+0x262>
        }
        
        
        /*******************************************************************************/
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 80071ba:	4b7d      	ldr	r3, [pc, #500]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	7f5b      	ldrb	r3, [r3, #29]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d069      	beq.n	8007298 <rfalNfcDataExchangeStart+0x154>
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	f300 80db 	bgt.w	8007380 <rfalNfcDataExchangeStart+0x23c>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <rfalNfcDataExchangeStart+0x90>
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d021      	beq.n	8007216 <rfalNfcDataExchangeStart+0xd2>
 80071d2:	e0d5      	b.n	8007380 <rfalNfcDataExchangeStart+0x23c>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
    
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071d8:	897b      	ldrh	r3, [r7, #10]
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	b29b      	uxth	r3, r3
 80071de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80071e0:	4b76      	ldr	r3, [pc, #472]	; (80073bc <rfalNfcDataExchangeStart+0x278>)
 80071e2:	643b      	str	r3, [r7, #64]	; 0x40
 80071e4:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80071e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80071ec:	4b71      	ldr	r3, [pc, #452]	; (80073b4 <rfalNfcDataExchangeStart+0x270>)
 80071ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f0:	2300      	movs	r3, #0
 80071f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071f6:	653b      	str	r3, [r7, #80]	; 0x50
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a70      	ldr	r2, [pc, #448]	; (80073bc <rfalNfcDataExchangeStart+0x278>)
 80071fc:	601a      	str	r2, [r3, #0]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	4a6c      	ldr	r2, [pc, #432]	; (80073b4 <rfalNfcDataExchangeStart+0x270>)
 8007202:	601a      	str	r2, [r3, #0]
                err = rfalStartTransceive( &ctx );
 8007204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007208:	4618      	mov	r0, r3
 800720a:	f006 fae3 	bl	800d7d4 <rfalStartTransceive>
 800720e:	4603      	mov	r3, r0
 8007210:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8007214:	e0b8      	b.n	8007388 <rfalNfcDataExchangeStart+0x244>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
            {
                rfalIsoDepApduTxRxParam isoDepTxRx;
                
                if( txDataLen > sizeof(gNfcDev.txBuf.isoDepBuf.apdu) )
 8007216:	897b      	ldrh	r3, [r7, #10]
 8007218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721c:	d901      	bls.n	8007222 <rfalNfcDataExchangeStart+0xde>
                {
                    return ERR_NOMEM;
 800721e:	2301      	movs	r3, #1
 8007220:	e0c1      	b.n	80073a6 <rfalNfcDataExchangeStart+0x262>
                }
                
                if( txDataLen > 0U )
 8007222:	897b      	ldrh	r3, [r7, #10]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <rfalNfcDataExchangeStart+0xf0>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.apdu, txData, txDataLen );
 8007228:	897b      	ldrh	r3, [r7, #10]
 800722a:	461a      	mov	r2, r3
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	4865      	ldr	r0, [pc, #404]	; (80073c4 <rfalNfcDataExchangeStart+0x280>)
 8007230:	f00a ff74 	bl	801211c <memcpy>
                }
                
                isoDepTxRx.DID          = RFAL_ISODEP_NO_DID;
 8007234:	2300      	movs	r3, #0
 8007236:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                isoDepTxRx.ourFSx       = RFAL_ISODEP_FSX_KEEP;
 800723a:	23ff      	movs	r3, #255	; 0xff
 800723c:	867b      	strh	r3, [r7, #50]	; 0x32
                isoDepTxRx.FSx          = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800723e:	4b5c      	ldr	r3, [pc, #368]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007246:	863b      	strh	r3, [r7, #48]	; 0x30
                isoDepTxRx.dFWT         = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 8007248:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
                isoDepTxRx.FWT          = gNfcDev.activeDev->proto.isoDep.info.FWT;
 8007250:	4b57      	ldr	r3, [pc, #348]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28
                isoDepTxRx.txBuf        = &gNfcDev.txBuf.isoDepBuf;
 8007258:	4b5b      	ldr	r3, [pc, #364]	; (80073c8 <rfalNfcDataExchangeStart+0x284>)
 800725a:	617b      	str	r3, [r7, #20]
                isoDepTxRx.txBufLen     = txDataLen;
 800725c:	897b      	ldrh	r3, [r7, #10]
 800725e:	833b      	strh	r3, [r7, #24]
                isoDepTxRx.rxBuf        = &gNfcDev.rxBuf.isoDepBuf;
 8007260:	4b56      	ldr	r3, [pc, #344]	; (80073bc <rfalNfcDataExchangeStart+0x278>)
 8007262:	61fb      	str	r3, [r7, #28]
                isoDepTxRx.rxLen        = &gNfcDev.rxLen;
 8007264:	4b53      	ldr	r3, [pc, #332]	; (80073b4 <rfalNfcDataExchangeStart+0x270>)
 8007266:	623b      	str	r3, [r7, #32]
                isoDepTxRx.tmpBuf       = &gNfcDev.tmpBuf.isoDepBuf;
 8007268:	4b58      	ldr	r3, [pc, #352]	; (80073cc <rfalNfcDataExchangeStart+0x288>)
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.apdu;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a54      	ldr	r2, [pc, #336]	; (80073c0 <rfalNfcDataExchangeStart+0x27c>)
 8007270:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	4a4f      	ldr	r2, [pc, #316]	; (80073b4 <rfalNfcDataExchangeStart+0x270>)
 8007276:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL ISO-DEP Transceive                                           */
                err = rfalIsoDepStartApduTransceive( isoDepTxRx );
 8007278:	466d      	mov	r5, sp
 800727a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800727e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	602b      	str	r3, [r5, #0]
 8007286:	f107 0314 	add.w	r3, r7, #20
 800728a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800728c:	f7ff fb1e 	bl	80068cc <rfalIsoDepStartApduTransceive>
 8007290:	4603      	mov	r3, r0
 8007292:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007296:	e077      	b.n	8007388 <rfalNfcDataExchangeStart+0x244>
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_NFCDEP:
            {
                rfalNfcDepPduTxRxParam nfcDepTxRx;
                
                if( txDataLen > sizeof(gNfcDev.txBuf.nfcDepBuf.pdu) )
 8007298:	897b      	ldrh	r3, [r7, #10]
 800729a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800729e:	d901      	bls.n	80072a4 <rfalNfcDataExchangeStart+0x160>
                {
                    return ERR_NOMEM;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e080      	b.n	80073a6 <rfalNfcDataExchangeStart+0x262>
                }
                
                if( txDataLen > 0U)
 80072a4:	897b      	ldrh	r3, [r7, #10]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d005      	beq.n	80072b6 <rfalNfcDataExchangeStart+0x172>
                {
                    ST_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.pdu, txData, txDataLen );
 80072aa:	897b      	ldrh	r3, [r7, #10]
 80072ac:	461a      	mov	r2, r3
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	4847      	ldr	r0, [pc, #284]	; (80073d0 <rfalNfcDataExchangeStart+0x28c>)
 80072b2:	f00a ff33 	bl	801211c <memcpy>
                }
                
                nfcDepTxRx.DID          = RFAL_NFCDEP_DID_KEEP;
 80072b6:	23ff      	movs	r3, #255	; 0xff
 80072b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 80072bc:	4b3c      	ldr	r3, [pc, #240]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d81a      	bhi.n	80072fc <rfalNfcDataExchangeStart+0x1b8>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) ) :
 80072c6:	4b3a      	ldr	r3, [pc, #232]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072ce:	091b      	lsrs	r3, r3, #4
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	3301      	adds	r3, #1
 80072d8:	019b      	lsls	r3, r3, #6
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 80072da:	2bfd      	cmp	r3, #253	; 0xfd
 80072dc:	d80c      	bhi.n	80072f8 <rfalNfcDataExchangeStart+0x1b4>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) ) :
 80072de:	4b34      	ldr	r3, [pc, #208]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072e6:	091b      	lsrs	r3, r3, #4
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	3301      	adds	r3, #1
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	019b      	lsls	r3, r3, #6
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	e01b      	b.n	8007330 <rfalNfcDataExchangeStart+0x1ec>
 80072f8:	23fe      	movs	r3, #254	; 0xfe
 80072fa:	e019      	b.n	8007330 <rfalNfcDataExchangeStart+0x1ec>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 80072fc:	4b2c      	ldr	r3, [pc, #176]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	b2db      	uxtb	r3, r3
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	3301      	adds	r3, #1
 800730e:	019b      	lsls	r3, r3, #6
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 8007310:	2bfd      	cmp	r3, #253	; 0xfd
 8007312:	d80c      	bhi.n	800732e <rfalNfcDataExchangeStart+0x1ea>
                                              rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 8007314:	4b26      	ldr	r3, [pc, #152]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f003 0303 	and.w	r3, r3, #3
 8007324:	3301      	adds	r3, #1
                nfcDepTxRx.FSx          = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 8007326:	b29b      	uxth	r3, r3
 8007328:	019b      	lsls	r3, r3, #6
 800732a:	b29b      	uxth	r3, r3
 800732c:	e000      	b.n	8007330 <rfalNfcDataExchangeStart+0x1ec>
 800732e:	23fe      	movs	r3, #254	; 0xfe
 8007330:	863b      	strh	r3, [r7, #48]	; 0x30
                nfcDepTxRx.dFWT         = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 8007332:	4b1f      	ldr	r3, [pc, #124]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
                nfcDepTxRx.FWT          = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 800733a:	4b1d      	ldr	r3, [pc, #116]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
                nfcDepTxRx.txBuf        = &gNfcDev.txBuf.nfcDepBuf;
 8007342:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <rfalNfcDataExchangeStart+0x284>)
 8007344:	617b      	str	r3, [r7, #20]
                nfcDepTxRx.txBufLen     = txDataLen;
 8007346:	897b      	ldrh	r3, [r7, #10]
 8007348:	833b      	strh	r3, [r7, #24]
                nfcDepTxRx.rxBuf        = &gNfcDev.rxBuf.nfcDepBuf;
 800734a:	4b1c      	ldr	r3, [pc, #112]	; (80073bc <rfalNfcDataExchangeStart+0x278>)
 800734c:	61fb      	str	r3, [r7, #28]
                nfcDepTxRx.rxLen        = &gNfcDev.rxLen;
 800734e:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <rfalNfcDataExchangeStart+0x270>)
 8007350:	623b      	str	r3, [r7, #32]
                nfcDepTxRx.tmpBuf       = &gNfcDev.tmpBuf.nfcDepBuf;
 8007352:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <rfalNfcDataExchangeStart+0x288>)
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
                *rxData                 = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.pdu;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <rfalNfcDataExchangeStart+0x274>)
 800735a:	601a      	str	r2, [r3, #0]
                *rvdLen                 = (uint16_t*)&gNfcDev.rxLen;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <rfalNfcDataExchangeStart+0x270>)
 8007360:	601a      	str	r2, [r3, #0]
                
                /*******************************************************************************/
                /* Trigger a RFAL NFC-DEP Transceive                                           */
                err = rfalNfcDepStartPduTransceive( nfcDepTxRx );                          
 8007362:	466c      	mov	r4, sp
 8007364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800736a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800736e:	f107 0314 	add.w	r3, r7, #20
 8007372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007374:	f003 feea 	bl	800b14c <rfalNfcDepStartPduTransceive>
 8007378:	4603      	mov	r3, r0
 800737a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800737e:	e003      	b.n	8007388 <rfalNfcDataExchangeStart+0x244>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */

            /*******************************************************************************/
            default:
                err = ERR_PARAM;
 8007380:	2307      	movs	r3, #7
 8007382:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                break;
 8007386:	bf00      	nop
        }
        
        /* If a transceive has succesfully started flag Data Exchange as ongoing */
        if( err == ERR_NONE )
 8007388:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <rfalNfcDataExchangeStart+0x25a>
        {
            gNfcDev.dataExErr = ERR_BUSY;
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 8007392:	2202      	movs	r2, #2
 8007394:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <rfalNfcDataExchangeStart+0x26c>)
 800739a:	221f      	movs	r2, #31
 800739c:	701a      	strb	r2, [r3, #0]
        }
        
        return err;
 800739e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073a2:	e000      	b.n	80073a6 <rfalNfcDataExchangeStart+0x262>
    }
    
    return ERR_WRONG_STATE;
 80073a4:	2321      	movs	r3, #33	; 0x21
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3758      	adds	r7, #88	; 0x58
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bdb0      	pop	{r4, r5, r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000aa8 	.word	0x20000aa8
 80073b4:	200011b4 	.word	0x200011b4
 80073b8:	20000fb4 	.word	0x20000fb4
 80073bc:	20000faf 	.word	0x20000faf
 80073c0:	20000fb2 	.word	0x20000fb2
 80073c4:	20000dad 	.word	0x20000dad
 80073c8:	20000daa 	.word	0x20000daa
 80073cc:	200011b6 	.word	0x200011b6
 80073d0:	20000daf 	.word	0x20000daf

080073d4 <rfalNfcDataExchangeGetStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 80073d8:	4b3d      	ldr	r3, [pc, #244]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b1e      	cmp	r3, #30
 80073de:	d114      	bne.n	800740a <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 80073e0:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80073e2:	2202      	movs	r2, #2
 80073e4:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 80073e8:	4b39      	ldr	r3, [pc, #228]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80073ea:	221f      	movs	r2, #31
 80073ec:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 80073ee:	4b38      	ldr	r3, [pc, #224]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	d108      	bne.n	800740a <rfalNfcDataExchangeGetStatus+0x36>
 80073f8:	4b35      	ldr	r3, [pc, #212]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	7f5b      	ldrb	r3, [r3, #29]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 8007402:	4b33      	ldr	r3, [pc, #204]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8007404:	2200      	movs	r2, #0
 8007406:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800740a:	4b31      	ldr	r3, [pc, #196]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b17      	cmp	r3, #23
 8007410:	d103      	bne.n	800741a <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 8007412:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8007414:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8007418:	e058      	b.n	80074cc <rfalNfcDataExchangeGetStatus+0xf8>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE) )
 800741a:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b1f      	cmp	r3, #31
 8007420:	d005      	beq.n	800742e <rfalNfcDataExchangeGetStatus+0x5a>
 8007422:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b21      	cmp	r3, #33	; 0x21
 8007428:	d001      	beq.n	800742e <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 800742a:	2321      	movs	r3, #33	; 0x21
 800742c:	e04e      	b.n	80074cc <rfalNfcDataExchangeGetStatus+0xf8>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 800742e:	4b28      	ldr	r3, [pc, #160]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8007430:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8007434:	2b02      	cmp	r3, #2
 8007436:	d146      	bne.n	80074c6 <rfalNfcDataExchangeGetStatus+0xf2>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8007438:	4b25      	ldr	r3, [pc, #148]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	7f5b      	ldrb	r3, [r3, #29]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d016      	beq.n	8007470 <rfalNfcDataExchangeGetStatus+0x9c>
 8007442:	2b02      	cmp	r3, #2
 8007444:	dc1c      	bgt.n	8007480 <rfalNfcDataExchangeGetStatus+0xac>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <rfalNfcDataExchangeGetStatus+0x7c>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d008      	beq.n	8007460 <rfalNfcDataExchangeGetStatus+0x8c>
 800744e:	e017      	b.n	8007480 <rfalNfcDataExchangeGetStatus+0xac>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 8007450:	f006 fbf0 	bl	800dc34 <rfalGetTransceiveStatus>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 800745a:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 800745e:	e014      	b.n	800748a <rfalNfcDataExchangeGetStatus+0xb6>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetApduTransceiveStatus();
 8007460:	f7ff fa8a 	bl	8006978 <rfalIsoDepGetApduTransceiveStatus>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 800746a:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 800746e:	e00c      	b.n	800748a <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetPduTransceiveStatus();
 8007470:	f003 feac 	bl	800b1cc <rfalNfcDepGetPduTransceiveStatus>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 800747a:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 800747e:	e004      	b.n	800748a <rfalNfcDataExchangeGetStatus+0xb6>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 8007482:	2207      	movs	r2, #7
 8007484:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
                break;
 8007488:	bf00      	nop
        }
        
    #if  RFAL_FEATURE_LISTEN_MODE
        /*******************************************************************************/
        /* If a Sleep request has been received (Listen Mode) go to sleep immediately  */
        if( gNfcDev.dataExErr == ERR_SLEEP_REQ )
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 800748c:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8007490:	2b20      	cmp	r3, #32
 8007492:	d118      	bne.n	80074c6 <rfalNfcDataExchangeGetStatus+0xf2>
        {
            EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 8007494:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <rfalNfcDataExchangeGetStatus+0x100>)
 8007496:	f44f 7281 	mov.w	r2, #258	; 0x102
 800749a:	490f      	ldr	r1, [pc, #60]	; (80074d8 <rfalNfcDataExchangeGetStatus+0x104>)
 800749c:	200c      	movs	r0, #12
 800749e:	f008 fc05 	bl	800fcac <rfalListenSleepStart>
 80074a2:	4603      	mov	r3, r0
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80074a8:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
 80074ac:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80074ae:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <rfalNfcDataExchangeGetStatus+0xea>
 80074b6:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80074b8:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80074bc:	e006      	b.n	80074cc <rfalNfcDataExchangeGetStatus+0xf8>
            
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
    
    return gNfcDev.dataExErr;
 80074c6:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <rfalNfcDataExchangeGetStatus+0xfc>)
 80074c8:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000aa8 	.word	0x20000aa8
 80074d4:	200011b4 	.word	0x200011b4
 80074d8:	20000faf 	.word	0x20000faf

080074dc <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08a      	sub	sp, #40	; 0x28
 80074e0:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 80074e6:	4ba0      	ldr	r3, [pc, #640]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80074e8:	89db      	ldrh	r3, [r3, #14]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d06f      	beq.n	80075d2 <rfalNfcPollTechDetetection+0xf6>
 80074f2:	4b9d      	ldr	r3, [pc, #628]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80074f4:	889b      	ldrh	r3, [r3, #4]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d069      	beq.n	80075d2 <rfalNfcPollTechDetetection+0xf6>
    {
        
    #if RFAL_FEATURE_NFC_DEP
    
        if( !gNfcDev.isTechInit )
 80074fe:	4b9a      	ldr	r3, [pc, #616]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007500:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007504:	f083 0301 	eor.w	r3, r3, #1
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d029      	beq.n	8007562 <rfalNfcPollTechDetetection+0x86>
        {
            EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 800750e:	4b96      	ldr	r3, [pc, #600]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007514:	4a94      	ldr	r2, [pc, #592]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007516:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800751a:	4619      	mov	r1, r3
 800751c:	2009      	movs	r0, #9
 800751e:	f005 fc0b 	bl	800cd38 <rfalSetMode>
 8007522:	4603      	mov	r3, r0
 8007524:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <rfalNfcPollTechDetetection+0x54>
 800752c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800752e:	e1dd      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8007530:	2001      	movs	r0, #1
 8007532:	f006 f845 	bl	800d5c0 <rfalSetErrorHandling>
            rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 8007536:	2040      	movs	r0, #64	; 0x40
 8007538:	f006 f882 	bl	800d640 <rfalSetFDTListen>
            rfalSetFDTPoll( RFAL_TIMING_NONE );
 800753c:	2000      	movs	r0, #0
 800753e:	f006 f861 	bl	800d604 <rfalSetFDTPoll>
            rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 8007542:	488a      	ldr	r0, [pc, #552]	; (800776c <rfalNfcPollTechDetetection+0x290>)
 8007544:	f006 f890 	bl	800d668 <rfalSetGT>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 8007548:	f006 f8ba 	bl	800d6c0 <rfalFieldOnAndStartGT>
 800754c:	4603      	mov	r3, r0
 800754e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007550:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <rfalNfcPollTechDetetection+0x7e>
 8007556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007558:	e1c8      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 800755a:	4b83      	ldr	r3, [pc, #524]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( rfalIsGTExpired() )                                                              /* Wait until Guard Time is fulfilled */
 8007562:	f006 f895 	bl	800d690 <rfalIsGTExpired>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d030      	beq.n	80075ce <rfalNfcPollTechDetetection+0xf2>
        {
            gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800756c:	4b7e      	ldr	r3, [pc, #504]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800756e:	889b      	ldrh	r3, [r3, #4]
 8007570:	f023 0310 	bic.w	r3, r3, #16
 8007574:	b29a      	uxth	r2, r3
 8007576:	4b7c      	ldr	r3, [pc, #496]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007578:	809a      	strh	r2, [r3, #4]
            
            err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800757a:	2300      	movs	r3, #0
 800757c:	2200      	movs	r2, #0
 800757e:	2101      	movs	r1, #1
 8007580:	487b      	ldr	r0, [pc, #492]	; (8007770 <rfalNfcPollTechDetetection+0x294>)
 8007582:	f001 fa43 	bl	8008a0c <rfalNfcNfcDepActivate>
 8007586:	4603      	mov	r3, r0
 8007588:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800758a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800758c:	2b00      	cmp	r3, #0
 800758e:	d118      	bne.n	80075c2 <rfalNfcPollTechDetetection+0xe6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 8007590:	4b75      	ldr	r3, [pc, #468]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007592:	885b      	ldrh	r3, [r3, #2]
 8007594:	f043 0310 	orr.w	r3, r3, #16
 8007598:	b29a      	uxth	r2, r3
 800759a:	4b73      	ldr	r3, [pc, #460]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800759c:	805a      	strh	r2, [r3, #2]
                
                gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 800759e:	4b72      	ldr	r3, [pc, #456]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075a0:	2205      	movs	r2, #5
 80075a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 80075a6:	4b70      	ldr	r3, [pc, #448]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
                gNfcDev.devCnt++;
 80075ae:	4b6e      	ldr	r3, [pc, #440]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075b0:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80075b4:	3301      	adds	r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	4b6b      	ldr	r3, [pc, #428]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075ba:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
                
                return ERR_NONE;
 80075be:	2300      	movs	r3, #0
 80075c0:	e194      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            }
            
            gNfcDev.isTechInit = false;
 80075c2:	4b69      	ldr	r3, [pc, #420]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            rfalFieldOff();
 80075ca:	f006 f8eb 	bl	800d7a4 <rfalFieldOff>
        }
        return ERR_BUSY;
 80075ce:	2302      	movs	r3, #2
 80075d0:	e18c      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 80075d2:	4b65      	ldr	r3, [pc, #404]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075d4:	89db      	ldrh	r3, [r3, #14]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d049      	beq.n	8007672 <rfalNfcPollTechDetetection+0x196>
 80075de:	4b62      	ldr	r3, [pc, #392]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075e0:	889b      	ldrh	r3, [r3, #4]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d043      	beq.n	8007672 <rfalNfcPollTechDetetection+0x196>
        
    #if RFAL_FEATURE_NFCA
        
        rfalNfcaSensRes sensRes;            
        
        if( !gNfcDev.isTechInit )
 80075ea:	4b5f      	ldr	r3, [pc, #380]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80075ec:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80075f0:	f083 0301 	eor.w	r3, r3, #1
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d015      	beq.n	8007626 <rfalNfcPollTechDetetection+0x14a>
        {
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 80075fa:	f004 f94b 	bl	800b894 <rfalNfcaPollerInitialize>
 80075fe:	4603      	mov	r3, r0
 8007600:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <rfalNfcPollTechDetetection+0x130>
 8007608:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800760a:	e16f      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 800760c:	f006 f858 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007610:	4603      	mov	r3, r0
 8007612:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <rfalNfcPollTechDetetection+0x142>
 800761a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800761c:	e166      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 800761e:	4b52      	ldr	r3, [pc, #328]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( rfalIsGTExpired() )                                                        /* Wait until Guard Time is fulfilled */
 8007626:	f006 f833 	bl	800d690 <rfalIsGTExpired>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01e      	beq.n	800766e <rfalNfcPollTechDetetection+0x192>
        {
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 8007630:	4b4d      	ldr	r3, [pc, #308]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007632:	7b1b      	ldrb	r3, [r3, #12]
 8007634:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f004 f976 	bl	800b92c <rfalNfcaPollerTechnologyDetection>
 8007640:	4603      	mov	r3, r0
 8007642:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8007644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <rfalNfcPollTechDetetection+0x17c>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 800764a:	4b47      	ldr	r3, [pc, #284]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	4b44      	ldr	r3, [pc, #272]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007656:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 8007658:	4b43      	ldr	r3, [pc, #268]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 8007660:	4b41      	ldr	r3, [pc, #260]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007662:	889b      	ldrh	r3, [r3, #4]
 8007664:	f023 0301 	bic.w	r3, r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	4b3f      	ldr	r3, [pc, #252]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800766c:	809a      	strh	r2, [r3, #4]
        }
    
        return ERR_BUSY;
 800766e:	2302      	movs	r3, #2
 8007670:	e13c      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 8007672:	4b3d      	ldr	r3, [pc, #244]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007674:	89db      	ldrh	r3, [r3, #14]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d04a      	beq.n	8007714 <rfalNfcPollTechDetetection+0x238>
 800767e:	4b3a      	ldr	r3, [pc, #232]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007680:	889b      	ldrh	r3, [r3, #4]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d044      	beq.n	8007714 <rfalNfcPollTechDetetection+0x238>
    #if RFAL_FEATURE_NFCB
        
        rfalNfcbSensbRes sensbRes;
        uint8_t          sensbResLen;            
        
        if( !gNfcDev.isTechInit )
 800768a:	4b37      	ldr	r3, [pc, #220]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800768c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007690:	f083 0301 	eor.w	r3, r3, #1
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d015      	beq.n	80076c6 <rfalNfcPollTechDetetection+0x1ea>
        {
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 800769a:	f004 fbab 	bl	800bdf4 <rfalNfcbPollerInitialize>
 800769e:	4603      	mov	r3, r0
 80076a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <rfalNfcPollTechDetetection+0x1d0>
 80076a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076aa:	e11f      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 80076ac:	f006 f808 	bl	800d6c0 <rfalFieldOnAndStartGT>
 80076b0:	4603      	mov	r3, r0
 80076b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <rfalNfcPollTechDetetection+0x1e2>
 80076ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076bc:	e116      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 80076be:	4b2a      	ldr	r3, [pc, #168]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( rfalIsGTExpired() )                                                      /* Wait until Guard Time is fulfilled */
 80076c6:	f005 ffe3 	bl	800d690 <rfalIsGTExpired>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01f      	beq.n	8007710 <rfalNfcPollTechDetetection+0x234>
        {
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 80076d0:	4b25      	ldr	r3, [pc, #148]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80076d2:	7b1b      	ldrb	r3, [r3, #12]
 80076d4:	f107 0213 	add.w	r2, r7, #19
 80076d8:	f107 0114 	add.w	r1, r7, #20
 80076dc:	4618      	mov	r0, r3
 80076de:	f004 fc9b 	bl	800c018 <rfalNfcbPollerTechnologyDetection>
 80076e2:	4603      	mov	r3, r0
 80076e4:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 80076e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <rfalNfcPollTechDetetection+0x21e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 80076ec:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80076ee:	885b      	ldrh	r3, [r3, #2]
 80076f0:	f043 0302 	orr.w	r3, r3, #2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80076f8:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 80076fa:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 8007702:	4b19      	ldr	r3, [pc, #100]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007704:	889b      	ldrh	r3, [r3, #4]
 8007706:	f023 0302 	bic.w	r3, r3, #2
 800770a:	b29a      	uxth	r2, r3
 800770c:	4b16      	ldr	r3, [pc, #88]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800770e:	809a      	strh	r2, [r3, #4]
        }        
        
        return ERR_BUSY;
 8007710:	2302      	movs	r3, #2
 8007712:	e0eb      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 8007714:	4b14      	ldr	r3, [pc, #80]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007716:	89db      	ldrh	r3, [r3, #14]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d04d      	beq.n	80077bc <rfalNfcPollTechDetetection+0x2e0>
 8007720:	4b11      	ldr	r3, [pc, #68]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 8007722:	889b      	ldrh	r3, [r3, #4]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d047      	beq.n	80077bc <rfalNfcPollTechDetetection+0x2e0>
    {
    #if RFAL_FEATURE_NFCF
     
        if( !gNfcDev.isTechInit )
 800772c:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800772e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007732:	f083 0301 	eor.w	r3, r3, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01f      	beq.n	800777c <rfalNfcPollTechDetetection+0x2a0>
        {
            EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );     /* Initialize RFAL for NFC-F */
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <rfalNfcPollTechDetetection+0x28c>)
 800773e:	7d1b      	ldrb	r3, [r3, #20]
 8007740:	4618      	mov	r0, r3
 8007742:	f004 ff2b 	bl	800c59c <rfalNfcfPollerInitialize>
 8007746:	4603      	mov	r3, r0
 8007748:	84fb      	strh	r3, [r7, #38]	; 0x26
 800774a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <rfalNfcPollTechDetetection+0x278>
 8007750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007752:	e0cb      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                             /* As field is already On only starts GT timer */
 8007754:	f005 ffb4 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007758:	4603      	mov	r3, r0
 800775a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800775c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <rfalNfcPollTechDetetection+0x298>
 8007762:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007764:	e0c2      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
 8007766:	bf00      	nop
 8007768:	20000aa8 	.word	0x20000aa8
 800776c:	00063510 	.word	0x00063510
 8007770:	20000b40 	.word	0x20000b40
            gNfcDev.isTechInit = true;
 8007774:	4b5f      	ldr	r3, [pc, #380]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }

        if( rfalIsGTExpired() )                                                      /* Wait until Guard Time is fulfilled */
 800777c:	f005 ff88 	bl	800d690 <rfalIsGTExpired>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <rfalNfcPollTechDetetection+0x2dc>
        {
            err = rfalNfcfPollerCheckPresence();                                     /* Poll for NFC-F devices */
 8007786:	f004 ff57 	bl	800c638 <rfalNfcfPollerCheckPresence>
 800778a:	4603      	mov	r3, r0
 800778c:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 800778e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <rfalNfcPollTechDetetection+0x2c6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 8007794:	4b57      	ldr	r3, [pc, #348]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 8007796:	885b      	ldrh	r3, [r3, #2]
 8007798:	f043 0304 	orr.w	r3, r3, #4
 800779c:	b29a      	uxth	r2, r3
 800779e:	4b55      	ldr	r3, [pc, #340]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80077a0:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 80077a2:	4b54      	ldr	r3, [pc, #336]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 80077aa:	4b52      	ldr	r3, [pc, #328]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80077ac:	889b      	ldrh	r3, [r3, #4]
 80077ae:	f023 0304 	bic.w	r3, r3, #4
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	4b4f      	ldr	r3, [pc, #316]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80077b6:	809a      	strh	r2, [r3, #4]
        }
        
        return ERR_BUSY;
 80077b8:	2302      	movs	r3, #2
 80077ba:	e097      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 80077bc:	4b4d      	ldr	r3, [pc, #308]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80077be:	89db      	ldrh	r3, [r3, #14]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d045      	beq.n	8007854 <rfalNfcPollTechDetetection+0x378>
 80077c8:	4b4a      	ldr	r3, [pc, #296]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80077ca:	889b      	ldrh	r3, [r3, #4]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d03f      	beq.n	8007854 <rfalNfcPollTechDetetection+0x378>
    {
    #if RFAL_FEATURE_NFCV
        
        rfalNfcvInventoryRes invRes;
 
        if( !gNfcDev.isTechInit )
 80077d4:	4b47      	ldr	r3, [pc, #284]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80077d6:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80077da:	f083 0301 	eor.w	r3, r3, #1
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d015      	beq.n	8007810 <rfalNfcPollTechDetetection+0x334>
        {
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                           /* Initialize RFAL for NFC-V */
 80077e4:	f004 ffb8 	bl	800c758 <rfalNfcvPollerInitialize>
 80077e8:	4603      	mov	r3, r0
 80077ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80077ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <rfalNfcPollTechDetetection+0x31a>
 80077f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077f4:	e07a      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 80077f6:	f005 ff63 	bl	800d6c0 <rfalFieldOnAndStartGT>
 80077fa:	4603      	mov	r3, r0
 80077fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80077fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <rfalNfcPollTechDetetection+0x32c>
 8007804:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007806:	e071      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 8007808:	4b3a      	ldr	r3, [pc, #232]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
                
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 8007810:	f005 ff3e 	bl	800d690 <rfalIsGTExpired>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01a      	beq.n	8007850 <rfalNfcPollTechDetetection+0x374>
        {
            err = rfalNfcvPollerCheckPresence( &invRes );                             /* Poll for NFC-V devices */
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	4618      	mov	r0, r3
 800781e:	f004 ffbf 	bl	800c7a0 <rfalNfcvPollerCheckPresence>
 8007822:	4603      	mov	r3, r0
 8007824:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8007826:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007828:	2b00      	cmp	r3, #0
 800782a:	d106      	bne.n	800783a <rfalNfcPollTechDetetection+0x35e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 800782c:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 800782e:	885b      	ldrh	r3, [r3, #2]
 8007830:	f043 0308 	orr.w	r3, r3, #8
 8007834:	b29a      	uxth	r2, r3
 8007836:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 8007838:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 800783a:	4b2e      	ldr	r3, [pc, #184]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 8007842:	4b2c      	ldr	r3, [pc, #176]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 8007844:	889b      	ldrh	r3, [r3, #4]
 8007846:	f023 0308 	bic.w	r3, r3, #8
 800784a:	b29a      	uxth	r2, r3
 800784c:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 800784e:	809a      	strh	r2, [r3, #4]
        }
        
        return ERR_BUSY;
 8007850:	2302      	movs	r3, #2
 8007852:	e04b      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 8007854:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 8007856:	89db      	ldrh	r3, [r3, #14]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b00      	cmp	r3, #0
 800785e:	d044      	beq.n	80078ea <rfalNfcPollTechDetetection+0x40e>
 8007860:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 8007862:	889b      	ldrh	r3, [r3, #4]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	d03e      	beq.n	80078ea <rfalNfcPollTechDetetection+0x40e>
    {
    #if RFAL_FEATURE_ST25TB
        
        if( !gNfcDev.isTechInit )
 800786c:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 800786e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007872:	f083 0301 	eor.w	r3, r3, #1
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d015      	beq.n	80078a8 <rfalNfcPollTechDetetection+0x3cc>
        {
            EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                         /* Initialize RFAL for NFC-V */
 800787c:	f009 f884 	bl	8010988 <rfalSt25tbPollerInitialize>
 8007880:	4603      	mov	r3, r0
 8007882:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <rfalNfcPollTechDetetection+0x3b2>
 800788a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800788c:	e02e      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 800788e:	f005 ff17 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007892:	4603      	mov	r3, r0
 8007894:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007896:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <rfalNfcPollTechDetetection+0x3c4>
 800789c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800789e:	e025      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
            gNfcDev.isTechInit = true;
 80078a0:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
     
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 80078a8:	f005 fef2 	bl	800d690 <rfalIsGTExpired>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d019      	beq.n	80078e6 <rfalNfcPollTechDetetection+0x40a>
        {
            err = rfalSt25tbPollerCheckPresence( NULL );                              /* Poll for ST25TB devices */
 80078b2:	2000      	movs	r0, #0
 80078b4:	f009 f86f 	bl	8010996 <rfalSt25tbPollerCheckPresence>
 80078b8:	4603      	mov	r3, r0
 80078ba:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 80078bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <rfalNfcPollTechDetetection+0x3f4>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 80078c2:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80078c4:	885b      	ldrh	r3, [r3, #2]
 80078c6:	f043 0320 	orr.w	r3, r3, #32
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80078ce:	805a      	strh	r2, [r3, #2]
            }
            
            gNfcDev.isTechInit = false;
 80078d0:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80078da:	889b      	ldrh	r3, [r3, #4]
 80078dc:	f023 0320 	bic.w	r3, r3, #32
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	4b04      	ldr	r3, [pc, #16]	; (80078f4 <rfalNfcPollTechDetetection+0x418>)
 80078e4:	809a      	strh	r2, [r3, #4]
        }
        
        return ERR_BUSY;
 80078e6:	2302      	movs	r3, #2
 80078e8:	e000      	b.n	80078ec <rfalNfcPollTechDetetection+0x410>
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	; 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000aa8 	.word	0x20000aa8

080078f8 <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 80078f8:	b5b0      	push	{r4, r5, r7, lr}
 80078fa:	b09a      	sub	sp, #104	; 0x68
 80078fc:	af00      	add	r7, sp, #0
    uint8_t    i;
    static uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 80078fe:	2300      	movs	r3, #0
 8007900:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    i      = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 800790a:	4bbc      	ldr	r3, [pc, #752]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 800790c:	f893 22f0 	ldrb.w	r2, [r3, #752]	; 0x2f0
 8007910:	4bba      	ldr	r3, [pc, #744]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007912:	7c9b      	ldrb	r3, [r3, #18]
 8007914:	429a      	cmp	r2, r3
 8007916:	d301      	bcc.n	800791c <rfalNfcPollCollResolution+0x24>
    {
        return ERR_NONE;
 8007918:	2300      	movs	r3, #0
 800791a:	e377      	b.n	800800c <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 800791c:	4bb7      	ldr	r3, [pc, #732]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 800791e:	885b      	ldrh	r3, [r3, #2]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80bf 	beq.w	8007aa8 <rfalNfcPollCollResolution+0x1b0>
 800792a:	4bb4      	ldr	r3, [pc, #720]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 800792c:	889b      	ldrh	r3, [r3, #4]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80b8 	beq.w	8007aa8 <rfalNfcPollCollResolution+0x1b0>
    {
        static rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8007938:	4bb0      	ldr	r3, [pc, #704]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 800793a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800793e:	f083 0301 	eor.w	r3, r3, #1
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01f      	beq.n	8007988 <rfalNfcPollCollResolution+0x90>
        {
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 8007948:	f003 ffa4 	bl	800b894 <rfalNfcaPollerInitialize>
 800794c:	4603      	mov	r3, r0
 800794e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007952:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <rfalNfcPollCollResolution+0x68>
 800795a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800795e:	e355      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 8007960:	f005 feae 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007964:	4603      	mov	r3, r0
 8007966:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800796a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <rfalNfcPollCollResolution+0x80>
 8007972:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007976:	e349      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            
            gNfcDev.isTechInit    = true;                                              /* Technology has been initialized */
 8007978:	4ba0      	ldr	r3, [pc, #640]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 8007980:	4b9e      	ldr	r3, [pc, #632]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
        }
        
        if( !rfalIsGTExpired() )
 8007988:	f005 fe82 	bl	800d690 <rfalIsGTExpired>
 800798c:	4603      	mov	r3, r0
 800798e:	f083 0301 	eor.w	r3, r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <rfalNfcPollCollResolution+0xa4>
        {
            return ERR_BUSY;
 8007998:	2302      	movs	r3, #2
 800799a:	e337      	b.n	800800c <rfalNfcPollCollResolution+0x714>
        }
        
        if( !gNfcDev.isOperOngoing )
 800799c:	4b97      	ldr	r3, [pc, #604]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 800799e:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 80079a2:	f083 0301 	eor.w	r3, r3, #1
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01c      	beq.n	80079e6 <rfalNfcPollCollResolution+0xee>
        {
            EXIT_ON_ERR( err, rfalNfcaPollerStartFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt ) );
 80079ac:	4b93      	ldr	r3, [pc, #588]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 80079ae:	7b18      	ldrb	r0, [r3, #12]
 80079b0:	4b92      	ldr	r3, [pc, #584]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 80079b2:	7c9a      	ldrb	r2, [r3, #18]
 80079b4:	4b91      	ldr	r3, [pc, #580]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 80079b6:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	b2d9      	uxtb	r1, r3
 80079be:	4b90      	ldr	r3, [pc, #576]	; (8007c00 <rfalNfcPollCollResolution+0x308>)
 80079c0:	4a90      	ldr	r2, [pc, #576]	; (8007c04 <rfalNfcPollCollResolution+0x30c>)
 80079c2:	f003 ffd5 	bl	800b970 <rfalNfcaPollerStartFullCollisionResolution>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80079cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <rfalNfcPollCollResolution+0xe2>
 80079d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079d8:	e318      	b.n	800800c <rfalNfcPollCollResolution+0x714>
         
            gNfcDev.isOperOngoing = true;
 80079da:	4b88      	ldr	r3, [pc, #544]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
            return ERR_BUSY;
 80079e2:	2302      	movs	r3, #2
 80079e4:	e312      	b.n	800800c <rfalNfcPollCollResolution+0x714>
        }
        
        err = rfalNfcaPollerGetFullCollisionResolutionStatus();
 80079e6:	f004 f86f 	bl	800bac8 <rfalNfcaPollerGetFullCollisionResolutionStatus>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( err != ERR_BUSY )
 80079f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d055      	beq.n	8007aa4 <rfalNfcPollCollResolution+0x1ac>
        {
            gNfcDev.isTechInit = false;
 80079f8:	4b80      	ldr	r3, [pc, #512]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 8007a00:	4b7e      	ldr	r3, [pc, #504]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a02:	889b      	ldrh	r3, [r3, #4]
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	4b7c      	ldr	r3, [pc, #496]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a0c:	809a      	strh	r2, [r3, #4]
            
            if( (err == ERR_NONE) && (devCnt != 0U) )
 8007a0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d146      	bne.n	8007aa4 <rfalNfcPollCollResolution+0x1ac>
 8007a16:	4b7a      	ldr	r3, [pc, #488]	; (8007c00 <rfalNfcPollCollResolution+0x308>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d042      	beq.n	8007aa4 <rfalNfcPollCollResolution+0x1ac>
            {
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a24:	e038      	b.n	8007a98 <rfalNfcPollCollResolution+0x1a0>
                {
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8007a26:	4b75      	ldr	r3, [pc, #468]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a28:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4a73      	ldr	r2, [pc, #460]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a30:	460b      	mov	r3, r1
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	1a5b      	subs	r3, r3, r1
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4413      	add	r3, r2
 8007a3a:	3398      	adds	r3, #152	; 0x98
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8007a40:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007a44:	4b6d      	ldr	r3, [pc, #436]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a46:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	496b      	ldr	r1, [pc, #428]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a4e:	4603      	mov	r3, r0
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	1a1b      	subs	r3, r3, r0
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	440b      	add	r3, r1
 8007a58:	3398      	adds	r3, #152	; 0x98
 8007a5a:	496a      	ldr	r1, [pc, #424]	; (8007c04 <rfalNfcPollCollResolution+0x30c>)
 8007a5c:	2016      	movs	r0, #22
 8007a5e:	fb00 f202 	mul.w	r2, r0, r2
 8007a62:	440a      	add	r2, r1
 8007a64:	3301      	adds	r3, #1
 8007a66:	6811      	ldr	r1, [r2, #0]
 8007a68:	6855      	ldr	r5, [r2, #4]
 8007a6a:	6894      	ldr	r4, [r2, #8]
 8007a6c:	68d0      	ldr	r0, [r2, #12]
 8007a6e:	6019      	str	r1, [r3, #0]
 8007a70:	605d      	str	r5, [r3, #4]
 8007a72:	609c      	str	r4, [r3, #8]
 8007a74:	60d8      	str	r0, [r3, #12]
 8007a76:	6911      	ldr	r1, [r2, #16]
 8007a78:	6119      	str	r1, [r3, #16]
 8007a7a:	8a92      	ldrh	r2, [r2, #20]
 8007a7c:	829a      	strh	r2, [r3, #20]
                    gNfcDev.devCnt++;
 8007a7e:	4b5f      	ldr	r3, [pc, #380]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a80:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007a84:	3301      	adds	r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	4b5c      	ldr	r3, [pc, #368]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007a8a:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8007a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a92:	3301      	adds	r3, #1
 8007a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a98:	4b59      	ldr	r3, [pc, #356]	; (8007c00 <rfalNfcPollCollResolution+0x308>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d3c0      	bcc.n	8007a26 <rfalNfcPollCollResolution+0x12e>
                }
            }
        }
        
        return ERR_BUSY;
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e2b1      	b.n	800800c <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 8007aa8:	4b54      	ldr	r3, [pc, #336]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007aaa:	885b      	ldrh	r3, [r3, #2]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80a9 	beq.w	8007c08 <rfalNfcPollCollResolution+0x310>
 8007ab6:	4b51      	ldr	r3, [pc, #324]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007ab8:	889b      	ldrh	r3, [r3, #4]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80a2 	beq.w	8007c08 <rfalNfcPollCollResolution+0x310>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8007ac4:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007ac6:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007aca:	f083 0301 	eor.w	r3, r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01b      	beq.n	8007b0c <rfalNfcPollCollResolution+0x214>
        {
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                            /* Initialize RFAL for NFC-B */
 8007ad4:	f004 f98e 	bl	800bdf4 <rfalNfcbPollerInitialize>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007ade:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <rfalNfcPollCollResolution+0x1f4>
 8007ae6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007aea:	e28f      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 8007aec:	f005 fde8 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007af6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <rfalNfcPollCollResolution+0x20c>
 8007afe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b02:	e283      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            gNfcDev.isTechInit = true;
 8007b04:	4b3d      	ldr	r3, [pc, #244]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 8007b0c:	f005 fdc0 	bl	800d690 <rfalIsGTExpired>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f083 0301 	eor.w	r3, r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <rfalNfcPollCollResolution+0x228>
        {
            return ERR_BUSY;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e275      	b.n	800800c <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 8007b20:	4b37      	ldr	r3, [pc, #220]	; (8007c00 <rfalNfcPollCollResolution+0x308>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 8007b26:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 8007b2e:	4b33      	ldr	r3, [pc, #204]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b30:	889b      	ldrh	r3, [r3, #4]
 8007b32:	f023 0302 	bic.w	r3, r3, #2
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	4b30      	ldr	r3, [pc, #192]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b3a:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 8007b3c:	4b2f      	ldr	r3, [pc, #188]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b3e:	7b18      	ldrb	r0, [r3, #12]
 8007b40:	4b2e      	ldr	r3, [pc, #184]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b42:	7c9a      	ldrb	r2, [r3, #18]
 8007b44:	4b2d      	ldr	r3, [pc, #180]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b46:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	b2d9      	uxtb	r1, r3
 8007b4e:	1d3a      	adds	r2, r7, #4
 8007b50:	4b2b      	ldr	r3, [pc, #172]	; (8007c00 <rfalNfcPollCollResolution+0x308>)
 8007b52:	f004 fa73 	bl	800c03c <rfalNfcbPollerCollisionResolution>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8007b5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d148      	bne.n	8007bf6 <rfalNfcPollCollResolution+0x2fe>
 8007b64:	4b26      	ldr	r3, [pc, #152]	; (8007c00 <rfalNfcPollCollResolution+0x308>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d044      	beq.n	8007bf6 <rfalNfcPollCollResolution+0x2fe>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007b72:	e03a      	b.n	8007bea <rfalNfcPollCollResolution+0x2f2>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8007b74:	4b21      	ldr	r3, [pc, #132]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b76:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4a1f      	ldr	r2, [pc, #124]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b7e:	460b      	mov	r3, r1
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	1a5b      	subs	r3, r3, r1
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	4413      	add	r3, r2
 8007b88:	3398      	adds	r3, #152	; 0x98
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 8007b8e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007b92:	4b1a      	ldr	r3, [pc, #104]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b94:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	4918      	ldr	r1, [pc, #96]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	1a1b      	subs	r3, r3, r0
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	440b      	add	r3, r1
 8007ba6:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8007baa:	4613      	mov	r3, r2
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	1a9b      	subs	r3, r3, r2
 8007bb0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007bba:	1c4b      	adds	r3, r1, #1
 8007bbc:	6814      	ldr	r4, [r2, #0]
 8007bbe:	6850      	ldr	r0, [r2, #4]
 8007bc0:	6891      	ldr	r1, [r2, #8]
 8007bc2:	601c      	str	r4, [r3, #0]
 8007bc4:	6058      	str	r0, [r3, #4]
 8007bc6:	6099      	str	r1, [r3, #8]
 8007bc8:	8991      	ldrh	r1, [r2, #12]
 8007bca:	7b92      	ldrb	r2, [r2, #14]
 8007bcc:	8199      	strh	r1, [r3, #12]
 8007bce:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007bd2:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <rfalNfcPollCollResolution+0x304>)
 8007bdc:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8007be0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007be4:	3301      	adds	r3, #1
 8007be6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <rfalNfcPollCollResolution+0x308>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d3be      	bcc.n	8007b74 <rfalNfcPollCollResolution+0x27c>
            }
        }
        
        return ERR_BUSY;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e208      	b.n	800800c <rfalNfcPollCollResolution+0x714>
 8007bfa:	bf00      	nop
 8007bfc:	20000aa8 	.word	0x20000aa8
 8007c00:	2000132a 	.word	0x2000132a
 8007c04:	200012bc 	.word	0x200012bc
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 8007c08:	4bc2      	ldr	r3, [pc, #776]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007c0a:	885b      	ldrh	r3, [r3, #2]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80a9 	beq.w	8007d68 <rfalNfcPollCollResolution+0x470>
 8007c16:	4bbf      	ldr	r3, [pc, #764]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007c18:	889b      	ldrh	r3, [r3, #4]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80a2 	beq.w	8007d68 <rfalNfcPollCollResolution+0x470>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8007c24:	4bbb      	ldr	r3, [pc, #748]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007c26:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007c2a:	f083 0301 	eor.w	r3, r3, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01e      	beq.n	8007c72 <rfalNfcPollCollResolution+0x37a>
        {
            EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));       /* Initialize RFAL for NFC-F */
 8007c34:	4bb7      	ldr	r3, [pc, #732]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007c36:	7d1b      	ldrb	r3, [r3, #20]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f004 fcaf 	bl	800c59c <rfalNfcfPollerInitialize>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007c44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <rfalNfcPollCollResolution+0x35a>
 8007c4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007c50:	e1dc      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 8007c52:	f005 fd35 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007c5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <rfalNfcPollCollResolution+0x372>
 8007c64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007c68:	e1d0      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            gNfcDev.isTechInit = true;
 8007c6a:	4baa      	ldr	r3, [pc, #680]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 8007c72:	f005 fd0d 	bl	800d690 <rfalIsGTExpired>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f083 0301 	eor.w	r3, r3, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <rfalNfcPollCollResolution+0x38e>
        {
            return ERR_BUSY;
 8007c82:	2302      	movs	r3, #2
 8007c84:	e1c2      	b.n	800800c <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 8007c86:	4ba4      	ldr	r3, [pc, #656]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 8007c8c:	4ba1      	ldr	r3, [pc, #644]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 8007c94:	4b9f      	ldr	r3, [pc, #636]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007c96:	889b      	ldrh	r3, [r3, #4]
 8007c98:	f023 0304 	bic.w	r3, r3, #4
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	4b9d      	ldr	r3, [pc, #628]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007ca0:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 8007ca2:	4b9c      	ldr	r3, [pc, #624]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007ca4:	7b18      	ldrb	r0, [r3, #12]
 8007ca6:	4b9b      	ldr	r3, [pc, #620]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007ca8:	7c9a      	ldrb	r2, [r3, #18]
 8007caa:	4b9a      	ldr	r3, [pc, #616]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007cac:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	b2d9      	uxtb	r1, r3
 8007cb4:	1d3a      	adds	r2, r7, #4
 8007cb6:	4b98      	ldr	r3, [pc, #608]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007cb8:	f004 fcde 	bl	800c678 <rfalNfcfPollerCollisionResolution>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8007cc2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d14c      	bne.n	8007d64 <rfalNfcPollCollResolution+0x46c>
 8007cca:	4b93      	ldr	r3, [pc, #588]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d048      	beq.n	8007d64 <rfalNfcPollCollResolution+0x46c>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007cd8:	e03e      	b.n	8007d58 <rfalNfcPollCollResolution+0x460>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8007cda:	4b8e      	ldr	r3, [pc, #568]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007cdc:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4a8c      	ldr	r2, [pc, #560]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	1a5b      	subs	r3, r3, r1
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4413      	add	r3, r2
 8007cee:	3398      	adds	r3, #152	; 0x98
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 8007cf4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007cf8:	4b86      	ldr	r3, [pc, #536]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007cfa:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	4984      	ldr	r1, [pc, #528]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007d02:	4603      	mov	r3, r0
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	1a1b      	subs	r3, r3, r0
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	440b      	add	r3, r1
 8007d0c:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	4413      	add	r3, r2
 8007d1a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007d1e:	4413      	add	r3, r2
 8007d20:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007d24:	1c4b      	adds	r3, r1, #1
 8007d26:	6815      	ldr	r5, [r2, #0]
 8007d28:	6854      	ldr	r4, [r2, #4]
 8007d2a:	6890      	ldr	r0, [r2, #8]
 8007d2c:	68d1      	ldr	r1, [r2, #12]
 8007d2e:	601d      	str	r5, [r3, #0]
 8007d30:	605c      	str	r4, [r3, #4]
 8007d32:	6098      	str	r0, [r3, #8]
 8007d34:	60d9      	str	r1, [r3, #12]
 8007d36:	8a11      	ldrh	r1, [r2, #16]
 8007d38:	7c92      	ldrb	r2, [r2, #18]
 8007d3a:	8219      	strh	r1, [r3, #16]
 8007d3c:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 8007d3e:	4b75      	ldr	r3, [pc, #468]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007d40:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007d44:	3301      	adds	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4b72      	ldr	r3, [pc, #456]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007d4a:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d52:	3301      	adds	r3, #1
 8007d54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d58:	4b6f      	ldr	r3, [pc, #444]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d3ba      	bcc.n	8007cda <rfalNfcPollCollResolution+0x3e2>
            }
        }
        
        return ERR_BUSY;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e151      	b.n	800800c <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 8007d68:	4b6a      	ldr	r3, [pc, #424]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007d6a:	885b      	ldrh	r3, [r3, #2]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 80a1 	beq.w	8007eb8 <rfalNfcPollCollResolution+0x5c0>
 8007d76:	4b67      	ldr	r3, [pc, #412]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007d78:	889b      	ldrh	r3, [r3, #4]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 809a 	beq.w	8007eb8 <rfalNfcPollCollResolution+0x5c0>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8007d84:	4b63      	ldr	r3, [pc, #396]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007d86:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007d8a:	f083 0301 	eor.w	r3, r3, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01b      	beq.n	8007dcc <rfalNfcPollCollResolution+0x4d4>
        {
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                            /* Initialize RFAL for NFC-V */
 8007d94:	f004 fce0 	bl	800c758 <rfalNfcvPollerInitialize>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007d9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <rfalNfcPollCollResolution+0x4b4>
 8007da6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007daa:	e12f      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 8007dac:	f005 fc88 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007db6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <rfalNfcPollCollResolution+0x4cc>
 8007dbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007dc2:	e123      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            gNfcDev.isTechInit = true;
 8007dc4:	4b53      	ldr	r3, [pc, #332]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 8007dcc:	f005 fc60 	bl	800d690 <rfalIsGTExpired>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f083 0301 	eor.w	r3, r3, #1
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <rfalNfcPollCollResolution+0x4e8>
        {
            return ERR_BUSY;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e115      	b.n	800800c <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 8007de0:	4b4d      	ldr	r3, [pc, #308]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 8007de6:	4b4b      	ldr	r3, [pc, #300]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 8007dee:	4b49      	ldr	r3, [pc, #292]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007df0:	889b      	ldrh	r3, [r3, #4]
 8007df2:	f023 0308 	bic.w	r3, r3, #8
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	4b46      	ldr	r3, [pc, #280]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007dfa:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 8007dfc:	4b45      	ldr	r3, [pc, #276]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007dfe:	7c9a      	ldrb	r2, [r3, #18]
 8007e00:	4b44      	ldr	r3, [pc, #272]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007e02:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	b2d9      	uxtb	r1, r3
 8007e0a:	1d3a      	adds	r2, r7, #4
 8007e0c:	4b42      	ldr	r3, [pc, #264]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f004 fd51 	bl	800c8b6 <rfalNfcvPollerCollisionResolution>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8007e1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d148      	bne.n	8007eb4 <rfalNfcPollCollResolution+0x5bc>
 8007e22:	4b3d      	ldr	r3, [pc, #244]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d044      	beq.n	8007eb4 <rfalNfcPollCollResolution+0x5bc>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e30:	e03a      	b.n	8007ea8 <rfalNfcPollCollResolution+0x5b0>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 8007e32:	4b38      	ldr	r3, [pc, #224]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007e34:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4a36      	ldr	r2, [pc, #216]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	1a5b      	subs	r3, r3, r1
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4413      	add	r3, r2
 8007e46:	3398      	adds	r3, #152	; 0x98
 8007e48:	2203      	movs	r2, #3
 8007e4a:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 8007e4c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007e50:	4b30      	ldr	r3, [pc, #192]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007e52:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007e56:	4618      	mov	r0, r3
 8007e58:	492e      	ldr	r1, [pc, #184]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	1a1b      	subs	r3, r3, r0
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	440b      	add	r3, r1
 8007e64:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007e76:	4413      	add	r3, r2
 8007e78:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007e7c:	1c4b      	adds	r3, r1, #1
 8007e7e:	6814      	ldr	r4, [r2, #0]
 8007e80:	6850      	ldr	r0, [r2, #4]
 8007e82:	6891      	ldr	r1, [r2, #8]
 8007e84:	601c      	str	r4, [r3, #0]
 8007e86:	6058      	str	r0, [r3, #4]
 8007e88:	6099      	str	r1, [r3, #8]
 8007e8a:	7b12      	ldrb	r2, [r2, #12]
 8007e8c:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 8007e8e:	4b21      	ldr	r3, [pc, #132]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007e90:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007e9a:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007e9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <rfalNfcPollCollResolution+0x620>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d3be      	bcc.n	8007e32 <rfalNfcPollCollResolution+0x53a>
            }
        }
        
        return ERR_BUSY;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e0a9      	b.n	800800c <rfalNfcPollCollResolution+0x714>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 8007eb8:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007eba:	885b      	ldrh	r3, [r3, #2]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80a2 	beq.w	800800a <rfalNfcPollCollResolution+0x712>
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007ec8:	889b      	ldrh	r3, [r3, #4]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 809b 	beq.w	800800a <rfalNfcPollCollResolution+0x712>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        if( !gNfcDev.isTechInit )
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <rfalNfcPollCollResolution+0x61c>)
 8007ed6:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007eda:	f083 0301 	eor.w	r3, r3, #1
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01f      	beq.n	8007f24 <rfalNfcPollCollResolution+0x62c>
        {
            EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                         /* Initialize RFAL for ST25TB */
 8007ee4:	f008 fd50 	bl	8010988 <rfalSt25tbPollerInitialize>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007eee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <rfalNfcPollCollResolution+0x604>
 8007ef6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007efa:	e087      	b.n	800800c <rfalNfcPollCollResolution+0x714>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Ensure GT again as other technologies have also been polled */
 8007efc:	f005 fbe0 	bl	800d6c0 <rfalFieldOnAndStartGT>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007f06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d006      	beq.n	8007f1c <rfalNfcPollCollResolution+0x624>
 8007f0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f12:	e07b      	b.n	800800c <rfalNfcPollCollResolution+0x714>
 8007f14:	20000aa8 	.word	0x20000aa8
 8007f18:	2000132a 	.word	0x2000132a
            gNfcDev.isTechInit = true;
 8007f1c:	4b3d      	ldr	r3, [pc, #244]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        }
        
        if( !rfalIsGTExpired() )
 8007f24:	f005 fbb4 	bl	800d690 <rfalIsGTExpired>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f083 0301 	eor.w	r3, r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <rfalNfcPollCollResolution+0x640>
        {
            return ERR_BUSY;
 8007f34:	2302      	movs	r3, #2
 8007f36:	e069      	b.n	800800c <rfalNfcPollCollResolution+0x714>
        }
        
        devCnt             = 0;
 8007f38:	4b37      	ldr	r3, [pc, #220]	; (8008018 <rfalNfcPollCollResolution+0x720>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
        gNfcDev.isTechInit = false;
 8007f3e:	4b35      	ldr	r3, [pc, #212]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8007f46:	4b33      	ldr	r3, [pc, #204]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f48:	889b      	ldrh	r3, [r3, #4]
 8007f4a:	f023 0320 	bic.w	r3, r3, #32
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	4b30      	ldr	r3, [pc, #192]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f52:	809a      	strh	r2, [r3, #4]
        
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 8007f54:	4b2f      	ldr	r3, [pc, #188]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f56:	7c9a      	ldrb	r2, [r3, #18]
 8007f58:	4b2e      	ldr	r3, [pc, #184]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f5a:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	1d39      	adds	r1, r7, #4
 8007f64:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <rfalNfcPollCollResolution+0x720>)
 8007f66:	4618      	mov	r0, r3
 8007f68:	f008 fe0b 	bl	8010b82 <rfalSt25tbPollerCollisionResolution>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8007f72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d145      	bne.n	8008006 <rfalNfcPollCollResolution+0x70e>
 8007f7a:	4b27      	ldr	r3, [pc, #156]	; (8008018 <rfalNfcPollCollResolution+0x720>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d041      	beq.n	8008006 <rfalNfcPollCollResolution+0x70e>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007f82:	2300      	movs	r3, #0
 8007f84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f88:	e037      	b.n	8007ffa <rfalNfcPollCollResolution+0x702>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8007f8a:	4b22      	ldr	r3, [pc, #136]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f8c:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007f90:	4619      	mov	r1, r3
 8007f92:	4a20      	ldr	r2, [pc, #128]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007f94:	460b      	mov	r3, r1
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	1a5b      	subs	r3, r3, r1
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	3398      	adds	r3, #152	; 0x98
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8007fa4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007faa:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	4918      	ldr	r1, [pc, #96]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	1a1b      	subs	r3, r3, r0
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	440b      	add	r3, r1
 8007fbc:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007fcc:	4413      	add	r3, r2
 8007fce:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007fd2:	1c4b      	adds	r3, r1, #1
 8007fd4:	6810      	ldr	r0, [r2, #0]
 8007fd6:	6851      	ldr	r1, [r2, #4]
 8007fd8:	6018      	str	r0, [r3, #0]
 8007fda:	6059      	str	r1, [r3, #4]
 8007fdc:	8912      	ldrh	r2, [r2, #8]
 8007fde:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 8007fe0:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007fe2:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <rfalNfcPollCollResolution+0x71c>)
 8007fec:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8007ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ffa:	4b07      	ldr	r3, [pc, #28]	; (8008018 <rfalNfcPollCollResolution+0x720>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8008002:	429a      	cmp	r2, r3
 8008004:	d3c1      	bcc.n	8007f8a <rfalNfcPollCollResolution+0x692>
            }
        }
        
        return ERR_BUSY;
 8008006:	2302      	movs	r3, #2
 8008008:	e000      	b.n	800800c <rfalNfcPollCollResolution+0x714>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3768      	adds	r7, #104	; 0x68
 8008010:	46bd      	mov	sp, r7
 8008012:	bdb0      	pop	{r4, r5, r7, pc}
 8008014:	20000aa8 	.word	0x20000aa8
 8008018:	2000132a 	.word	0x2000132a

0800801c <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08e      	sub	sp, #56	; 0x38
 8008020:	af04      	add	r7, sp, #16
 8008022:	4603      	mov	r3, r0
 8008024:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 8008026:	2300      	movs	r3, #0
 8008028:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 800802a:	4bb5      	ldr	r3, [pc, #724]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800802c:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8008030:	79fa      	ldrb	r2, [r7, #7]
 8008032:	429a      	cmp	r2, r3
 8008034:	d901      	bls.n	800803a <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 8008036:	2321      	movs	r3, #33	; 0x21
 8008038:	e312      	b.n	8008660 <rfalNfcPollActivation+0x644>
    }
    
    switch( gNfcDev.devList[devIt].type )
 800803a:	79fa      	ldrb	r2, [r7, #7]
 800803c:	49b0      	ldr	r1, [pc, #704]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800803e:	4613      	mov	r3, r2
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	440b      	add	r3, r1
 8008048:	3398      	adds	r3, #152	; 0x98
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b05      	cmp	r3, #5
 800804e:	f200 82fa 	bhi.w	8008646 <rfalNfcPollActivation+0x62a>
 8008052:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <rfalNfcPollActivation+0x3c>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	080080ab 	.word	0x080080ab
 800805c:	08008359 	.word	0x08008359
 8008060:	080084a3 	.word	0x080084a3
 8008064:	0800859d 	.word	0x0800859d
 8008068:	080085f5 	.word	0x080085f5
 800806c:	08008071 	.word	0x08008071
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8008070:	79f9      	ldrb	r1, [r7, #7]
 8008072:	79fa      	ldrb	r2, [r7, #7]
 8008074:	460b      	mov	r3, r1
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	1a5b      	subs	r3, r3, r1
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	33b8      	adds	r3, #184	; 0xb8
 800807e:	49a0      	ldr	r1, [pc, #640]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008080:	440b      	add	r3, r1
 8008082:	1c99      	adds	r1, r3, #2
 8008084:	489e      	ldr	r0, [pc, #632]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008086:	4613      	mov	r3, r2
 8008088:	011b      	lsls	r3, r3, #4
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	4403      	add	r3, r0
 8008090:	33b0      	adds	r3, #176	; 0xb0
 8008092:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8008094:	79fa      	ldrb	r2, [r7, #7]
 8008096:	499a      	ldr	r1, [pc, #616]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008098:	4613      	mov	r3, r2
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	440b      	add	r3, r1
 80080a2:	33b4      	adds	r3, #180	; 0xb4
 80080a4:	220a      	movs	r2, #10
 80080a6:	701a      	strb	r2, [r3, #0]
            break;
 80080a8:	e2cf      	b.n	800864a <rfalNfcPollActivation+0x62e>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            if( !gNfcDev.isTechInit )
 80080aa:	4b95      	ldr	r3, [pc, #596]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80080ac:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80080b0:	f083 0301 	eor.w	r3, r3, #1
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <rfalNfcPollActivation+0xb6>
            {
                rfalNfcaPollerInitialize();
 80080ba:	f003 fbeb 	bl	800b894 <rfalNfcaPollerInitialize>
                gNfcDev.isTechInit    = true;
 80080be:	4b90      	ldr	r3, [pc, #576]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
                gNfcDev.isOperOngoing = false;
 80080c6:	4b8e      	ldr	r3, [pc, #568]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                return ERR_BUSY;
 80080ce:	2302      	movs	r3, #2
 80080d0:	e2c6      	b.n	8008660 <rfalNfcPollActivation+0x644>
            }
            
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 80080d2:	79fa      	ldrb	r2, [r7, #7]
 80080d4:	498a      	ldr	r1, [pc, #552]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80080d6:	4613      	mov	r3, r2
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	440b      	add	r3, r1
 80080e0:	33ae      	adds	r3, #174	; 0xae
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d047      	beq.n	8008178 <rfalNfcPollActivation+0x15c>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                if( !gNfcDev.isOperOngoing )
 80080e8:	4b85      	ldr	r3, [pc, #532]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80080ea:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 80080ee:	f083 0301 	eor.w	r3, r3, #1
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d011      	beq.n	800811c <rfalNfcPollActivation+0x100>
                {
                    /* Wake up all cards  */
                    EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); 
 80080f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080fc:	4619      	mov	r1, r3
 80080fe:	2052      	movs	r0, #82	; 0x52
 8008100:	f003 fbec 	bl	800b8dc <rfalNfcaPollerCheckPresence>
 8008104:	4603      	mov	r3, r0
 8008106:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008108:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <rfalNfcPollActivation+0xf6>
 800810e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008110:	e2a6      	b.n	8008660 <rfalNfcPollActivation+0x644>
                    gNfcDev.isOperOngoing = true;
 8008112:	4b7b      	ldr	r3, [pc, #492]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 800811a:	e02b      	b.n	8008174 <rfalNfcPollActivation+0x158>
                }
                else
                {
                    /* Select specific device */
                    EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); 
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	4613      	mov	r3, r2
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	1a9b      	subs	r3, r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	3398      	adds	r3, #152	; 0x98
 8008128:	4a75      	ldr	r2, [pc, #468]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800812a:	4413      	add	r3, r2
 800812c:	1d98      	adds	r0, r3, #6
 800812e:	79fa      	ldrb	r2, [r7, #7]
 8008130:	4973      	ldr	r1, [pc, #460]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008132:	4613      	mov	r3, r2
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	440b      	add	r3, r1
 800813c:	339d      	adds	r3, #157	; 0x9d
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f107 0220 	add.w	r2, r7, #32
 8008144:	4619      	mov	r1, r3
 8008146:	f003 fd8f 	bl	800bc68 <rfalNfcaPollerSelect>
 800814a:	4603      	mov	r3, r0
 800814c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800814e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <rfalNfcPollActivation+0x13c>
 8008154:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008156:	e283      	b.n	8008660 <rfalNfcPollActivation+0x644>
                    gNfcDev.devList[devIt].dev.nfca.isSleep = false;
 8008158:	79fa      	ldrb	r2, [r7, #7]
 800815a:	4969      	ldr	r1, [pc, #420]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800815c:	4613      	mov	r3, r2
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	440b      	add	r3, r1
 8008166:	33ae      	adds	r3, #174	; 0xae
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
                    gNfcDev.isOperOngoing = false;
 800816c:	4b64      	ldr	r3, [pc, #400]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                }
                return ERR_BUSY;
 8008174:	2302      	movs	r3, #2
 8008176:	e273      	b.n	8008660 <rfalNfcPollActivation+0x644>
            }
            
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8008178:	79f9      	ldrb	r1, [r7, #7]
 800817a:	79fa      	ldrb	r2, [r7, #7]
 800817c:	460b      	mov	r3, r1
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	1a5b      	subs	r3, r3, r1
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	3398      	adds	r3, #152	; 0x98
 8008186:	495e      	ldr	r1, [pc, #376]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008188:	440b      	add	r3, r1
 800818a:	1d99      	adds	r1, r3, #6
 800818c:	485c      	ldr	r0, [pc, #368]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800818e:	4613      	mov	r3, r2
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4403      	add	r3, r0
 8008198:	33b0      	adds	r3, #176	; 0xb0
 800819a:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 800819c:	79f9      	ldrb	r1, [r7, #7]
 800819e:	79fa      	ldrb	r2, [r7, #7]
 80081a0:	4857      	ldr	r0, [pc, #348]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80081a2:	460b      	mov	r3, r1
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	1a5b      	subs	r3, r3, r1
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4403      	add	r3, r0
 80081ac:	339d      	adds	r3, #157	; 0x9d
 80081ae:	7818      	ldrb	r0, [r3, #0]
 80081b0:	4953      	ldr	r1, [pc, #332]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80081b2:	4613      	mov	r3, r2
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	440b      	add	r3, r1
 80081bc:	33b4      	adds	r3, #180	; 0xb4
 80081be:	4602      	mov	r2, r0
 80081c0:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 80081c2:	79fa      	ldrb	r2, [r7, #7]
 80081c4:	494e      	ldr	r1, [pc, #312]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80081c6:	4613      	mov	r3, r2
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	440b      	add	r3, r1
 80081d0:	3399      	adds	r3, #153	; 0x99
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b60      	cmp	r3, #96	; 0x60
 80081d6:	d07e      	beq.n	80082d6 <rfalNfcPollActivation+0x2ba>
 80081d8:	2b60      	cmp	r3, #96	; 0x60
 80081da:	f300 80ba 	bgt.w	8008352 <rfalNfcPollActivation+0x336>
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d079      	beq.n	80082d6 <rfalNfcPollActivation+0x2ba>
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	f300 80b5 	bgt.w	8008352 <rfalNfcPollActivation+0x336>
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d03a      	beq.n	8008262 <rfalNfcPollActivation+0x246>
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	f300 80b0 	bgt.w	8008352 <rfalNfcPollActivation+0x336>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d02a      	beq.n	800824c <rfalNfcPollActivation+0x230>
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	f040 80ab 	bne.w	8008352 <rfalNfcPollActivation+0x336>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 80081fc:	79f9      	ldrb	r1, [r7, #7]
 80081fe:	79fa      	ldrb	r2, [r7, #7]
 8008200:	460b      	mov	r3, r1
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	1a5b      	subs	r3, r3, r1
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	33a0      	adds	r3, #160	; 0xa0
 800820a:	493d      	ldr	r1, [pc, #244]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800820c:	440b      	add	r3, r1
 800820e:	f103 010a 	add.w	r1, r3, #10
 8008212:	483b      	ldr	r0, [pc, #236]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008214:	4613      	mov	r3, r2
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4403      	add	r3, r0
 800821e:	33b0      	adds	r3, #176	; 0xb0
 8008220:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8008222:	79fa      	ldrb	r2, [r7, #7]
 8008224:	4936      	ldr	r1, [pc, #216]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008226:	4613      	mov	r3, r2
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	440b      	add	r3, r1
 8008230:	33b4      	adds	r3, #180	; 0xb4
 8008232:	2204      	movs	r2, #4
 8008234:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8008236:	79fa      	ldrb	r2, [r7, #7]
 8008238:	4931      	ldr	r1, [pc, #196]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 800823a:	4613      	mov	r3, r2
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	440b      	add	r3, r1
 8008244:	33b5      	adds	r3, #181	; 0xb5
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
                    break;
 800824a:	e084      	b.n	8008356 <rfalNfcPollActivation+0x33a>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 800824c:	79fa      	ldrb	r2, [r7, #7]
 800824e:	492c      	ldr	r1, [pc, #176]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008250:	4613      	mov	r3, r2
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	440b      	add	r3, r1
 800825a:	33b5      	adds	r3, #181	; 0xb5
 800825c:	2200      	movs	r2, #0
 800825e:	701a      	strb	r2, [r3, #0]
                    break;
 8008260:	e079      	b.n	8008356 <rfalNfcPollActivation+0x33a>
                
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_POLL
                    if( !gNfcDev.isOperOngoing )
 8008262:	4b27      	ldr	r3, [pc, #156]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008264:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 8008268:	f083 0301 	eor.w	r3, r3, #1
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01d      	beq.n	80082ae <rfalNfcPollActivation+0x292>
                    {
                        /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                        rfalIsoDepInitialize();                    
 8008272:	f7fc f99f 	bl	80045b4 <rfalIsoDepInitialize>
                        EXIT_ON_ERR( err, rfalIsoDepPollAStartActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, &gNfcDev.devList[devIt].proto.isoDep ) );
 8008276:	4b22      	ldr	r3, [pc, #136]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008278:	7cd9      	ldrb	r1, [r3, #19]
 800827a:	79fa      	ldrb	r2, [r7, #7]
 800827c:	4613      	mov	r3, r2
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	33b8      	adds	r3, #184	; 0xb8
 8008286:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 8008288:	4413      	add	r3, r2
 800828a:	460a      	mov	r2, r1
 800828c:	2100      	movs	r1, #0
 800828e:	2008      	movs	r0, #8
 8008290:	f7fd fee2 	bl	8006058 <rfalIsoDepPollAStartActivation>
 8008294:	4603      	mov	r3, r0
 8008296:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <rfalNfcPollActivation+0x286>
 800829e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082a0:	e1de      	b.n	8008660 <rfalNfcPollActivation+0x644>
                        
                        gNfcDev.isOperOngoing = true;
 80082a2:	4b17      	ldr	r3, [pc, #92]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                        return ERR_BUSY;
 80082aa:	2302      	movs	r3, #2
 80082ac:	e1d8      	b.n	8008660 <rfalNfcPollActivation+0x644>
                    }

                    err = rfalIsoDepPollAGetActivationStatus();
 80082ae:	f7fd ff09 	bl	80060c4 <rfalIsoDepPollAGetActivationStatus>
 80082b2:	4603      	mov	r3, r0
 80082b4:	84fb      	strh	r3, [r7, #38]	; 0x26
                    if( err != ERR_NONE )
 80082b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <rfalNfcPollActivation+0x2a4>
                    {
                        return err;
 80082bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082be:	e1cf      	b.n	8008660 <rfalNfcPollActivation+0x644>
                    }
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 80082c0:	79fa      	ldrb	r2, [r7, #7]
 80082c2:	490f      	ldr	r1, [pc, #60]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80082c4:	4613      	mov	r3, r2
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	440b      	add	r3, r1
 80082ce:	33b5      	adds	r3, #181	; 0xb5
 80082d0:	2201      	movs	r2, #1
 80082d2:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 80082d4:	e03f      	b.n	8008356 <rfalNfcPollActivation+0x33a>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 80082d6:	79fa      	ldrb	r2, [r7, #7]
 80082d8:	4613      	mov	r3, r2
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	1a9b      	subs	r3, r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	3398      	adds	r3, #152	; 0x98
 80082e2:	4a07      	ldr	r2, [pc, #28]	; (8008300 <rfalNfcPollActivation+0x2e4>)
 80082e4:	1898      	adds	r0, r3, r2
 80082e6:	2300      	movs	r3, #0
 80082e8:	2200      	movs	r2, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	f000 fb8e 	bl	8008a0c <rfalNfcNfcDepActivate>
 80082f0:	4603      	mov	r3, r0
 80082f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80082f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d004      	beq.n	8008304 <rfalNfcPollActivation+0x2e8>
 80082fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082fc:	e1b0      	b.n	8008660 <rfalNfcPollActivation+0x644>
 80082fe:	bf00      	nop
 8008300:	20000aa8 	.word	0x20000aa8
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8008304:	79f9      	ldrb	r1, [r7, #7]
 8008306:	79fa      	ldrb	r2, [r7, #7]
 8008308:	460b      	mov	r3, r1
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	1a5b      	subs	r3, r3, r1
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	33b8      	adds	r3, #184	; 0xb8
 8008312:	49b7      	ldr	r1, [pc, #732]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008314:	440b      	add	r3, r1
 8008316:	1c99      	adds	r1, r3, #2
 8008318:	48b5      	ldr	r0, [pc, #724]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800831a:	4613      	mov	r3, r2
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	4403      	add	r3, r0
 8008324:	33b0      	adds	r3, #176	; 0xb0
 8008326:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8008328:	79fa      	ldrb	r2, [r7, #7]
 800832a:	49b1      	ldr	r1, [pc, #708]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800832c:	4613      	mov	r3, r2
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	440b      	add	r3, r1
 8008336:	33b4      	adds	r3, #180	; 0xb4
 8008338:	220a      	movs	r2, #10
 800833a:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 800833c:	79fa      	ldrb	r2, [r7, #7]
 800833e:	49ac      	ldr	r1, [pc, #688]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008340:	4613      	mov	r3, r2
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	440b      	add	r3, r1
 800834a:	33b5      	adds	r3, #181	; 0xb5
 800834c:	2202      	movs	r2, #2
 800834e:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 8008350:	e001      	b.n	8008356 <rfalNfcPollActivation+0x33a>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 8008352:	2321      	movs	r3, #33	; 0x21
 8008354:	e184      	b.n	8008660 <rfalNfcPollActivation+0x644>
            }
            break;
 8008356:	e178      	b.n	800864a <rfalNfcPollActivation+0x62e>
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            if( !gNfcDev.isTechInit )
 8008358:	4ba5      	ldr	r3, [pc, #660]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800835a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800835e:	f083 0301 	eor.w	r3, r3, #1
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <rfalNfcPollActivation+0x364>
            {
                rfalNfcbPollerInitialize();
 8008368:	f003 fd44 	bl	800bdf4 <rfalNfcbPollerInitialize>
                gNfcDev.isTechInit    = true;
 800836c:	4ba0      	ldr	r3, [pc, #640]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
                gNfcDev.isOperOngoing = false;
 8008374:	4b9e      	ldr	r3, [pc, #632]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                return ERR_BUSY;
 800837c:	2302      	movs	r3, #2
 800837e:	e16f      	b.n	8008660 <rfalNfcPollActivation+0x644>
            }
            
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 8008380:	79fa      	ldrb	r2, [r7, #7]
 8008382:	499b      	ldr	r1, [pc, #620]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008384:	4613      	mov	r3, r2
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	1a9b      	subs	r3, r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	440b      	add	r3, r1
 800838e:	33a7      	adds	r3, #167	; 0xa7
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <rfalNfcPollActivation+0x38a>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8008396:	f107 030f 	add.w	r3, r7, #15
 800839a:	f107 0210 	add.w	r2, r7, #16
 800839e:	2100      	movs	r1, #0
 80083a0:	2008      	movs	r0, #8
 80083a2:	f003 fd53 	bl	800be4c <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 80083a6:	79f9      	ldrb	r1, [r7, #7]
 80083a8:	79fa      	ldrb	r2, [r7, #7]
 80083aa:	460b      	mov	r3, r1
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	1a5b      	subs	r3, r3, r1
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	3398      	adds	r3, #152	; 0x98
 80083b4:	498e      	ldr	r1, [pc, #568]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80083b6:	440b      	add	r3, r1
 80083b8:	1cd9      	adds	r1, r3, #3
 80083ba:	488d      	ldr	r0, [pc, #564]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80083bc:	4613      	mov	r3, r2
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4403      	add	r3, r0
 80083c6:	33b0      	adds	r3, #176	; 0xb0
 80083c8:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 80083ca:	79fa      	ldrb	r2, [r7, #7]
 80083cc:	4988      	ldr	r1, [pc, #544]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80083ce:	4613      	mov	r3, r2
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	440b      	add	r3, r1
 80083d8:	33b4      	adds	r3, #180	; 0xb4
 80083da:	2204      	movs	r2, #4
 80083dc:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 80083de:	79fa      	ldrb	r2, [r7, #7]
 80083e0:	4983      	ldr	r1, [pc, #524]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80083e2:	4613      	mov	r3, r2
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	440b      	add	r3, r1
 80083ec:	33a4      	adds	r3, #164	; 0xa4
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d049      	beq.n	800848c <rfalNfcPollActivation+0x470>
            {
                if( !gNfcDev.isOperOngoing )
 80083f8:	4b7d      	ldr	r3, [pc, #500]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80083fa:	f893 3301 	ldrb.w	r3, [r3, #769]	; 0x301
 80083fe:	f083 0301 	eor.w	r3, r3, #1
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d02d      	beq.n	8008464 <rfalNfcPollActivation+0x448>
                {
                    rfalIsoDepInitialize();
 8008408:	f7fc f8d4 	bl	80045b4 <rfalIsoDepInitialize>
                    /* Perform ISO-DEP (ISO14443-4) activation: ATTRIB    */
                    EXIT_ON_ERR( err, rfalIsoDepPollBStartActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 800840c:	4b78      	ldr	r3, [pc, #480]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800840e:	7cd8      	ldrb	r0, [r3, #19]
 8008410:	79fa      	ldrb	r2, [r7, #7]
 8008412:	4613      	mov	r3, r2
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	3398      	adds	r3, #152	; 0x98
 800841c:	4a74      	ldr	r2, [pc, #464]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800841e:	4413      	add	r3, r2
 8008420:	1c59      	adds	r1, r3, #1
 8008422:	79fa      	ldrb	r2, [r7, #7]
 8008424:	4613      	mov	r3, r2
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	33b8      	adds	r3, #184	; 0xb8
 800842e:	4a70      	ldr	r2, [pc, #448]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008430:	4413      	add	r3, r2
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	2300      	movs	r3, #0
 8008436:	9302      	str	r3, [sp, #8]
 8008438:	2300      	movs	r3, #0
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	9100      	str	r1, [sp, #0]
 800843e:	2300      	movs	r3, #0
 8008440:	4602      	mov	r2, r0
 8008442:	2100      	movs	r1, #0
 8008444:	2008      	movs	r0, #8
 8008446:	f7fd ffed 	bl	8006424 <rfalIsoDepPollBStartActivation>
 800844a:	4603      	mov	r3, r0
 800844c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800844e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <rfalNfcPollActivation+0x43c>
 8008454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008456:	e103      	b.n	8008660 <rfalNfcPollActivation+0x644>
                    
                    gNfcDev.isOperOngoing = true;
 8008458:	4b65      	ldr	r3, [pc, #404]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
                    return ERR_BUSY;
 8008460:	2302      	movs	r3, #2
 8008462:	e0fd      	b.n	8008660 <rfalNfcPollActivation+0x644>
                }
                
                err = rfalIsoDepPollBGetActivationStatus();
 8008464:	f7fe f8bc 	bl	80065e0 <rfalIsoDepPollBGetActivationStatus>
 8008468:	4603      	mov	r3, r0
 800846a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if( err != ERR_NONE )
 800846c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <rfalNfcPollActivation+0x45a>
                {
                    return err;
 8008472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008474:	e0f4      	b.n	8008660 <rfalNfcPollActivation+0x644>
                }
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8008476:	79fa      	ldrb	r2, [r7, #7]
 8008478:	495d      	ldr	r1, [pc, #372]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800847a:	4613      	mov	r3, r2
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	440b      	add	r3, r1
 8008484:	33b5      	adds	r3, #181	; 0xb5
 8008486:	2201      	movs	r2, #1
 8008488:	701a      	strb	r2, [r3, #0]
                break;
 800848a:	e0de      	b.n	800864a <rfalNfcPollActivation+0x62e>
            }
                    
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 800848c:	79fa      	ldrb	r2, [r7, #7]
 800848e:	4958      	ldr	r1, [pc, #352]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008490:	4613      	mov	r3, r2
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	1a9b      	subs	r3, r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	440b      	add	r3, r1
 800849a:	33b5      	adds	r3, #181	; 0xb5
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
            break;
 80084a0:	e0d3      	b.n	800864a <rfalNfcPollActivation+0x62e>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 80084a2:	4b53      	ldr	r3, [pc, #332]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80084a4:	7d1b      	ldrb	r3, [r3, #20]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f004 f878 	bl	800c59c <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 80084ac:	79fa      	ldrb	r2, [r7, #7]
 80084ae:	4950      	ldr	r1, [pc, #320]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80084b0:	4613      	mov	r3, r2
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	440b      	add	r3, r1
 80084ba:	339b      	adds	r3, #155	; 0x9b
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d145      	bne.n	800854e <rfalNfcPollActivation+0x532>
 80084c2:	79fa      	ldrb	r2, [r7, #7]
 80084c4:	494a      	ldr	r1, [pc, #296]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80084c6:	4613      	mov	r3, r2
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	440b      	add	r3, r1
 80084d0:	339c      	adds	r3, #156	; 0x9c
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2bfe      	cmp	r3, #254	; 0xfe
 80084d6:	d13a      	bne.n	800854e <rfalNfcPollActivation+0x532>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 80084d8:	79fa      	ldrb	r2, [r7, #7]
 80084da:	4613      	mov	r3, r2
 80084dc:	011b      	lsls	r3, r3, #4
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	3398      	adds	r3, #152	; 0x98
 80084e4:	4a42      	ldr	r2, [pc, #264]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80084e6:	1898      	adds	r0, r3, r2
 80084e8:	2300      	movs	r3, #0
 80084ea:	2200      	movs	r2, #0
 80084ec:	2100      	movs	r1, #0
 80084ee:	f000 fa8d 	bl	8008a0c <rfalNfcNfcDepActivate>
 80084f2:	4603      	mov	r3, r0
 80084f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80084f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <rfalNfcPollActivation+0x4e4>
 80084fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084fe:	e0af      	b.n	8008660 <rfalNfcPollActivation+0x644>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8008500:	79f9      	ldrb	r1, [r7, #7]
 8008502:	79fa      	ldrb	r2, [r7, #7]
 8008504:	460b      	mov	r3, r1
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	1a5b      	subs	r3, r3, r1
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	33b8      	adds	r3, #184	; 0xb8
 800850e:	4938      	ldr	r1, [pc, #224]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008510:	440b      	add	r3, r1
 8008512:	1c99      	adds	r1, r3, #2
 8008514:	4836      	ldr	r0, [pc, #216]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008516:	4613      	mov	r3, r2
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	4403      	add	r3, r0
 8008520:	33b0      	adds	r3, #176	; 0xb0
 8008522:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8008524:	79fa      	ldrb	r2, [r7, #7]
 8008526:	4932      	ldr	r1, [pc, #200]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008528:	4613      	mov	r3, r2
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	1a9b      	subs	r3, r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	440b      	add	r3, r1
 8008532:	33b4      	adds	r3, #180	; 0xb4
 8008534:	220a      	movs	r2, #10
 8008536:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 8008538:	79fa      	ldrb	r2, [r7, #7]
 800853a:	492d      	ldr	r1, [pc, #180]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800853c:	4613      	mov	r3, r2
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	440b      	add	r3, r1
 8008546:	33b5      	adds	r3, #181	; 0xb5
 8008548:	2202      	movs	r2, #2
 800854a:	701a      	strb	r2, [r3, #0]
                break;
 800854c:	e07d      	b.n	800864a <rfalNfcPollActivation+0x62e>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 800854e:	79f9      	ldrb	r1, [r7, #7]
 8008550:	79fa      	ldrb	r2, [r7, #7]
 8008552:	460b      	mov	r3, r1
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	1a5b      	subs	r3, r3, r1
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	3398      	adds	r3, #152	; 0x98
 800855c:	4924      	ldr	r1, [pc, #144]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800855e:	440b      	add	r3, r1
 8008560:	1cd9      	adds	r1, r3, #3
 8008562:	4823      	ldr	r0, [pc, #140]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008564:	4613      	mov	r3, r2
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	4403      	add	r3, r0
 800856e:	33b0      	adds	r3, #176	; 0xb0
 8008570:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8008572:	79fa      	ldrb	r2, [r7, #7]
 8008574:	491e      	ldr	r1, [pc, #120]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 8008576:	4613      	mov	r3, r2
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	1a9b      	subs	r3, r3, r2
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	440b      	add	r3, r1
 8008580:	33b4      	adds	r3, #180	; 0xb4
 8008582:	2208      	movs	r2, #8
 8008584:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8008586:	79fa      	ldrb	r2, [r7, #7]
 8008588:	4919      	ldr	r1, [pc, #100]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 800858a:	4613      	mov	r3, r2
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	440b      	add	r3, r1
 8008594:	33b5      	adds	r3, #181	; 0xb5
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]
            break;
 800859a:	e056      	b.n	800864a <rfalNfcPollActivation+0x62e>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 800859c:	f004 f8dc 	bl	800c758 <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 80085a0:	79f9      	ldrb	r1, [r7, #7]
 80085a2:	79fa      	ldrb	r2, [r7, #7]
 80085a4:	460b      	mov	r3, r1
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	1a5b      	subs	r3, r3, r1
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	3398      	adds	r3, #152	; 0x98
 80085ae:	4910      	ldr	r1, [pc, #64]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80085b0:	440b      	add	r3, r1
 80085b2:	1cd9      	adds	r1, r3, #3
 80085b4:	480e      	ldr	r0, [pc, #56]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80085b6:	4613      	mov	r3, r2
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	4403      	add	r3, r0
 80085c0:	33b0      	adds	r3, #176	; 0xb0
 80085c2:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 80085c4:	79fa      	ldrb	r2, [r7, #7]
 80085c6:	490a      	ldr	r1, [pc, #40]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80085c8:	4613      	mov	r3, r2
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	440b      	add	r3, r1
 80085d2:	33b4      	adds	r3, #180	; 0xb4
 80085d4:	2208      	movs	r2, #8
 80085d6:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 80085d8:	79fa      	ldrb	r2, [r7, #7]
 80085da:	4905      	ldr	r1, [pc, #20]	; (80085f0 <rfalNfcPollActivation+0x5d4>)
 80085dc:	4613      	mov	r3, r2
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	1a9b      	subs	r3, r3, r2
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	440b      	add	r3, r1
 80085e6:	33b5      	adds	r3, #181	; 0xb5
 80085e8:	2200      	movs	r2, #0
 80085ea:	701a      	strb	r2, [r3, #0]
            break;
 80085ec:	e02d      	b.n	800864a <rfalNfcPollActivation+0x62e>
 80085ee:	bf00      	nop
 80085f0:	20000aa8 	.word	0x20000aa8
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 80085f4:	f008 f9c8 	bl	8010988 <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 80085f8:	79f9      	ldrb	r1, [r7, #7]
 80085fa:	79fa      	ldrb	r2, [r7, #7]
 80085fc:	460b      	mov	r3, r1
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	1a5b      	subs	r3, r3, r1
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	3398      	adds	r3, #152	; 0x98
 8008606:	4918      	ldr	r1, [pc, #96]	; (8008668 <rfalNfcPollActivation+0x64c>)
 8008608:	440b      	add	r3, r1
 800860a:	1c99      	adds	r1, r3, #2
 800860c:	4816      	ldr	r0, [pc, #88]	; (8008668 <rfalNfcPollActivation+0x64c>)
 800860e:	4613      	mov	r3, r2
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4403      	add	r3, r0
 8008618:	33b0      	adds	r3, #176	; 0xb0
 800861a:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 800861c:	79fa      	ldrb	r2, [r7, #7]
 800861e:	4912      	ldr	r1, [pc, #72]	; (8008668 <rfalNfcPollActivation+0x64c>)
 8008620:	4613      	mov	r3, r2
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	440b      	add	r3, r1
 800862a:	33b4      	adds	r3, #180	; 0xb4
 800862c:	2208      	movs	r2, #8
 800862e:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 8008630:	79fa      	ldrb	r2, [r7, #7]
 8008632:	490d      	ldr	r1, [pc, #52]	; (8008668 <rfalNfcPollActivation+0x64c>)
 8008634:	4613      	mov	r3, r2
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	440b      	add	r3, r1
 800863e:	33b5      	adds	r3, #181	; 0xb5
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
            break;
 8008644:	e001      	b.n	800864a <rfalNfcPollActivation+0x62e>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 8008646:	2321      	movs	r3, #33	; 0x21
 8008648:	e00a      	b.n	8008660 <rfalNfcPollActivation+0x644>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 800864a:	79fa      	ldrb	r2, [r7, #7]
 800864c:	4613      	mov	r3, r2
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	3398      	adds	r3, #152	; 0x98
 8008656:	4a04      	ldr	r2, [pc, #16]	; (8008668 <rfalNfcPollActivation+0x64c>)
 8008658:	4413      	add	r3, r2
 800865a:	4a03      	ldr	r2, [pc, #12]	; (8008668 <rfalNfcPollActivation+0x64c>)
 800865c:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3728      	adds	r7, #40	; 0x28
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20000aa8 	.word	0x20000aa8

0800866c <rfalNfcListenActivation>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_LISTEN_MODE
static ReturnCode rfalNfcListenActivation( void )
{
 800866c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866e:	b08f      	sub	sp, #60	; 0x3c
 8008670:	af04      	add	r7, sp, #16
    rfalBitRate               bitRate;
#if RFAL_FEATURE_NFC_DEP    
    uint8_t                   hdrLen;
    
    /* Set the header length in NFC-A */
    hdrLen = (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN);
 8008672:	2302      	movs	r3, #2
 8008674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif /* RFAL_FEATURE_NFC_DEP */

    
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 8008678:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800867c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f007 fb86 	bl	800fd94 <rfalListenGetState>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch(lmSt)
 800868e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008692:	3b01      	subs	r3, #1
 8008694:	2b0f      	cmp	r3, #15
 8008696:	f200 81b3 	bhi.w	8008a00 <rfalNfcListenActivation+0x394>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <rfalNfcListenActivation+0x34>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080089e5 	.word	0x080089e5
 80086a4:	0800892b 	.word	0x0800892b
 80086a8:	080089e1 	.word	0x080089e1
 80086ac:	08008a01 	.word	0x08008a01
 80086b0:	08008853 	.word	0x08008853
 80086b4:	080086e1 	.word	0x080086e1
 80086b8:	08008821 	.word	0x08008821
 80086bc:	08008a01 	.word	0x08008a01
 80086c0:	080088e5 	.word	0x080088e5
 80086c4:	08008909 	.word	0x08008909
 80086c8:	08008909 	.word	0x08008909
 80086cc:	080089e1 	.word	0x080089e1
 80086d0:	08008a01 	.word	0x08008a01
 80086d4:	080089e1 	.word	0x080089e1
 80086d8:	080086e1 	.word	0x080086e1
 80086dc:	080089e1 	.word	0x080089e1
    #if RFAL_FEATURE_NFCA
        /*******************************************************************************/
        case RFAL_LM_STATE_ACTIVE_A:                                                  /* NFC-A CE activation */
        case RFAL_LM_STATE_ACTIVE_Ax:
            
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 80086e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8099 	beq.w	800881c <rfalNfcListenActivation+0x1b0>
            {
                /* Check if received data is a Sleep request */
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 80086ea:	4bbf      	ldr	r3, [pc, #764]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80086ec:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80086f0:	3307      	adds	r3, #7
 80086f2:	08db      	lsrs	r3, r3, #3
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	4619      	mov	r1, r3
 80086f8:	48bc      	ldr	r0, [pc, #752]	; (80089ec <rfalNfcListenActivation+0x380>)
 80086fa:	f003 fb40 	bl	800bd7e <rfalNfcaListenerIsSleepReq>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00d      	beq.n	8008720 <rfalNfcListenActivation+0xb4>
                {
                    /* Set the Listen Mode in Sleep state */
                    EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 8008704:	4bba      	ldr	r3, [pc, #744]	; (80089f0 <rfalNfcListenActivation+0x384>)
 8008706:	f44f 7281 	mov.w	r2, #258	; 0x102
 800870a:	49b8      	ldr	r1, [pc, #736]	; (80089ec <rfalNfcListenActivation+0x380>)
 800870c:	200c      	movs	r0, #12
 800870e:	f007 facd 	bl	800fcac <rfalListenSleepStart>
 8008712:	4603      	mov	r3, r0
 8008714:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d07f      	beq.n	800881c <rfalNfcListenActivation+0x1b0>
 800871c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800871e:	e171      	b.n	8008a04 <rfalNfcListenActivation+0x398>
                }
                
            #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_LISTEN
                /* Check if received data is a valid RATS */
                else if( rfalIsoDepIsRats( gNfcDev.rxBuf.rfBuf, (uint8_t)rfalConvBitsToBytes(gNfcDev.rxLen) ) )
 8008720:	4bb1      	ldr	r3, [pc, #708]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008722:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8008726:	3307      	adds	r3, #7
 8008728:	08db      	lsrs	r3, r3, #3
 800872a:	b2db      	uxtb	r3, r3
 800872c:	4619      	mov	r1, r3
 800872e:	48af      	ldr	r0, [pc, #700]	; (80089ec <rfalNfcListenActivation+0x380>)
 8008730:	f7fc fb38 	bl	8004da4 <rfalIsoDepIsRats>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d031      	beq.n	800879e <rfalNfcListenActivation+0x132>
                {
                    rfalIsoDepAtsParam        atsParam;
                    rfalIsoDepListenActvParam rxParam;
                    
                    /* Set ATS parameters */
                    atsParam.fsci       = (uint8_t)RFAL_ISODEP_DEFAULT_FSCI;
 800873a:	2308      	movs	r3, #8
 800873c:	743b      	strb	r3, [r7, #16]
                    atsParam.fwi        = RFAL_ISODEP_DEFAULT_FWI;
 800873e:	2308      	movs	r3, #8
 8008740:	747b      	strb	r3, [r7, #17]
                    atsParam.sfgi       = RFAL_ISODEP_DEFAULT_SFGI;
 8008742:	2300      	movs	r3, #0
 8008744:	74bb      	strb	r3, [r7, #18]
                    atsParam.didSupport = false;
 8008746:	2300      	movs	r3, #0
 8008748:	74fb      	strb	r3, [r7, #19]
                    atsParam.ta         = RFAL_ISODEP_ATS_TA_SAME_D;
 800874a:	2380      	movs	r3, #128	; 0x80
 800874c:	753b      	strb	r3, [r7, #20]
                    atsParam.hb         = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	61bb      	str	r3, [r7, #24]
                    atsParam.hbLen      = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	773b      	strb	r3, [r7, #28]

                    /* Set Rx parameters */
                    rxParam.rxBuf        = (rfalIsoDepBufFormat*) &gNfcDev.rxBuf.isoDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8008756:	4ba5      	ldr	r3, [pc, #660]	; (80089ec <rfalNfcListenActivation+0x380>)
 8008758:	603b      	str	r3, [r7, #0]
                    rxParam.rxLen        = &gNfcDev.rxLen;
 800875a:	4ba5      	ldr	r3, [pc, #660]	; (80089f0 <rfalNfcListenActivation+0x384>)
 800875c:	607b      	str	r3, [r7, #4]
                    rxParam.isoDepDev    = &gNfcDev.devList->proto.isoDep;
 800875e:	4ba5      	ldr	r3, [pc, #660]	; (80089f4 <rfalNfcListenActivation+0x388>)
 8008760:	60fb      	str	r3, [r7, #12]
                    rxParam.isRxChaining = &gNfcDev.isRxChaining;
 8008762:	4ba5      	ldr	r3, [pc, #660]	; (80089f8 <rfalNfcListenActivation+0x38c>)
 8008764:	60bb      	str	r3, [r7, #8]

                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_4A );                   /* Set next state CE T4T */
 8008766:	2007      	movs	r0, #7
 8008768:	f007 fb34 	bl	800fdd4 <rfalListenSetState>
                    rfalIsoDepInitialize();                                           /* Initialize ISO-DEP layer to handle ISO14443-a activation / RATS */
 800876c:	f7fb ff22 	bl	80045b4 <rfalIsoDepInitialize>
                    
                    /* Set ISO-DEP layer to digest RATS and handle activation */
                    EXIT_ON_ERR( ret, rfalIsoDepListenStartActivation( &atsParam, NULL, gNfcDev.rxBuf.rfBuf, gNfcDev.rxLen, rxParam ) );
 8008770:	4b9d      	ldr	r3, [pc, #628]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008772:	f8b3 670c 	ldrh.w	r6, [r3, #1804]	; 0x70c
 8008776:	f107 0510 	add.w	r5, r7, #16
 800877a:	466c      	mov	r4, sp
 800877c:	463b      	mov	r3, r7
 800877e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008784:	4633      	mov	r3, r6
 8008786:	4a99      	ldr	r2, [pc, #612]	; (80089ec <rfalNfcListenActivation+0x380>)
 8008788:	2100      	movs	r1, #0
 800878a:	4628      	mov	r0, r5
 800878c:	f7fc fb22 	bl	8004dd4 <rfalIsoDepListenStartActivation>
 8008790:	4603      	mov	r3, r0
 8008792:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008796:	2b00      	cmp	r3, #0
 8008798:	d040      	beq.n	800881c <rfalNfcListenActivation+0x1b0>
 800879a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800879c:	e132      	b.n	8008a04 <rfalNfcListenActivation+0x398>
            #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
            
            #if RFAL_FEATURE_NFC_DEP

                /* Check if received data is a valid ATR_REQ */
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 800879e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	4a90      	ldr	r2, [pc, #576]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80087a8:	4413      	add	r3, r2
 80087aa:	1dd8      	adds	r0, r3, #7
 80087ac:	4b8e      	ldr	r3, [pc, #568]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80087ae:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80087b2:	3307      	adds	r3, #7
 80087b4:	08db      	lsrs	r3, r3, #3
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087bc:	b29b      	uxth	r3, r3
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	4a89      	ldr	r2, [pc, #548]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80087c4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80087c8:	4619      	mov	r1, r3
 80087ca:	f001 fdd9 	bl	800a380 <rfalNfcDepIsAtrReq>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d021      	beq.n	8008818 <rfalNfcListenActivation+0x1ac>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 80087d4:	4b84      	ldr	r3, [pc, #528]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80087d6:	220a      	movs	r2, #10
 80087d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 80087dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e4:	4a80      	ldr	r2, [pc, #512]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80087e6:	4413      	add	r3, r2
 80087e8:	1dd9      	adds	r1, r3, #7
 80087ea:	4b7f      	ldr	r3, [pc, #508]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80087ec:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80087f0:	3307      	adds	r3, #7
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	b29b      	uxth	r3, r3
 8008800:	460a      	mov	r2, r1
 8008802:	2100      	movs	r1, #0
 8008804:	487d      	ldr	r0, [pc, #500]	; (80089fc <rfalNfcListenActivation+0x390>)
 8008806:	f000 f901 	bl	8008a0c <rfalNfcNfcDepActivate>
 800880a:	4603      	mov	r3, r0
 800880c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800880e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <rfalNfcListenActivation+0x1b0>
 8008814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008816:	e0f5      	b.n	8008a04 <rfalNfcListenActivation+0x398>
                }
            #endif /* RFAL_FEATURE_NFC_DEP */
                
                else
                {
                    return ERR_PROTO;
 8008818:	230b      	movs	r3, #11
 800881a:	e0f3      	b.n	8008a04 <rfalNfcListenActivation+0x398>
                }
            }
            return ERR_BUSY;
 800881c:	2302      	movs	r3, #2
 800881e:	e0f1      	b.n	8008a04 <rfalNfcListenActivation+0x398>
            
    #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_LISTEN
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_4A:                                                /* T4T ISO-DEP activation */
            
            ret = rfalIsoDepListenGetActivationStatus();
 8008820:	f7fc fc2a 	bl	8005078 <rfalIsoDepListenGetActivationStatus>
 8008824:	4603      	mov	r3, r0
 8008826:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret == ERR_NONE )
 8008828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10f      	bne.n	800884e <rfalNfcListenActivation+0x1e2>
            {
                gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCA;
 800882e:	4b6e      	ldr	r3, [pc, #440]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008830:	220a      	movs	r2, #10
 8008832:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_ISODEP;
 8008836:	4b6c      	ldr	r3, [pc, #432]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008838:	2201      	movs	r2, #1
 800883a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
                gNfcDev.devList->nfcid       = NULL;
 800883e:	4b6a      	ldr	r3, [pc, #424]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008840:	2200      	movs	r2, #0
 8008842:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                gNfcDev.devList->nfcidLen    = 0;
 8008846:	4b68      	ldr	r3, [pc, #416]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008848:	2200      	movs	r2, #0
 800884a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
            }
            return ret;
 800884e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008850:	e0d8      	b.n	8008a04 <rfalNfcListenActivation+0x398>
    #endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_F:                                                   /* NFC-F CE activation */
            
            if( isDataRcvd )                                                          /* Wait for the first received data */
 8008852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008856:	2b00      	cmp	r3, #0
 8008858:	d042      	beq.n	80088e0 <rfalNfcListenActivation+0x274>
            {
            #if RFAL_FEATURE_NFC_DEP
                /* Set the header length in NFC-F */
                hdrLen = RFAL_NFCDEP_LEN_LEN;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 8008860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008868:	4a5f      	ldr	r2, [pc, #380]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 800886a:	4413      	add	r3, r2
 800886c:	1dd8      	adds	r0, r3, #7
 800886e:	4b5e      	ldr	r3, [pc, #376]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008870:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8008874:	3307      	adds	r3, #7
 8008876:	08db      	lsrs	r3, r3, #3
 8008878:	b29a      	uxth	r2, r3
 800887a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800887e:	b29b      	uxth	r3, r3
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	b29b      	uxth	r3, r3
 8008884:	4a58      	ldr	r2, [pc, #352]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008886:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800888a:	4619      	mov	r1, r3
 800888c:	f001 fd78 	bl	800a380 <rfalNfcDepIsAtrReq>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d021      	beq.n	80088da <rfalNfcListenActivation+0x26e>
                {
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 8008896:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008898:	220c      	movs	r2, #12
 800889a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                    EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800889e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a6:	4a50      	ldr	r2, [pc, #320]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80088a8:	4413      	add	r3, r2
 80088aa:	1dd9      	adds	r1, r3, #7
 80088ac:	4b4e      	ldr	r3, [pc, #312]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80088ae:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80088b2:	3307      	adds	r3, #7
 80088b4:	08db      	lsrs	r3, r3, #3
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088bc:	b29b      	uxth	r3, r3
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	460a      	mov	r2, r1
 80088c4:	2100      	movs	r1, #0
 80088c6:	484d      	ldr	r0, [pc, #308]	; (80089fc <rfalNfcListenActivation+0x390>)
 80088c8:	f000 f8a0 	bl	8008a0c <rfalNfcNfcDepActivate>
 80088cc:	4603      	mov	r3, r0
 80088ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80088d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <rfalNfcListenActivation+0x274>
 80088d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d8:	e094      	b.n	8008a04 <rfalNfcListenActivation+0x398>
                }
                else
            #endif /* RFAL_FEATURE_NFC_DEP */
                {
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 80088da:	2009      	movs	r0, #9
 80088dc:	f007 fa7a 	bl	800fdd4 <rfalListenSetState>
                }
            }
            return ERR_BUSY;
 80088e0:	2302      	movs	r3, #2
 80088e2:	e08f      	b.n	8008a04 <rfalNfcListenActivation+0x398>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_CARDEMU_3:                                                 /* T3T activated */
            
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 80088e4:	4b40      	ldr	r3, [pc, #256]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80088e6:	220c      	movs	r2, #12
 80088e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_RF;
 80088ec:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
            gNfcDev.devList->nfcid       = NULL;
 80088f4:	4b3c      	ldr	r3, [pc, #240]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            gNfcDev.devList->nfcidLen    = 0;
 80088fc:	4b3a      	ldr	r3, [pc, #232]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
            
            return ERR_NONE;
 8008904:	2300      	movs	r3, #0
 8008906:	e07d      	b.n	8008a04 <rfalNfcListenActivation+0x398>
    #if RFAL_FEATURE_NFC_DEP
        /*******************************************************************************/
        case RFAL_LM_STATE_TARGET_A:                                                  /* NFC-DEP activation */
        case RFAL_LM_STATE_TARGET_F:
            
            ret = rfalNfcDepListenGetActivationStatus();
 8008908:	f002 fb26 	bl	800af58 <rfalNfcDepListenGetActivationStatus>
 800890c:	4603      	mov	r3, r0
 800890e:	84bb      	strh	r3, [r7, #36]	; 0x24
            if( ret == ERR_NONE )
 8008910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <rfalNfcListenActivation+0x2ba>
            {
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8008916:	4b34      	ldr	r3, [pc, #208]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008918:	2202      	movs	r2, #2
 800891a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
                gNfcDev.devList->nfcidLen    = RFAL_NFCDEP_NFCID3_LEN;
 800891e:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008920:	220a      	movs	r2, #10
 8008922:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
            }
            return ret;
 8008926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008928:	e06c      	b.n	8008a04 <rfalNfcListenActivation+0x398>
    #endif /* RFAL_FEATURE_NFC_DEP */
        
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:                                                      /* AP2P activation */
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 800892a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800892e:	2b00      	cmp	r3, #0
 8008930:	d054      	beq.n	80089dc <rfalNfcListenActivation+0x370>
            {
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 8008932:	4b2d      	ldr	r3, [pc, #180]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008934:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8008938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d04d      	beq.n	80089dc <rfalNfcListenActivation+0x370>
                {
                    
                #if RFAL_FEATURE_NFC_DEP
                    /* Calculate the header length in NFC-A or NFC-F mode*/
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 8008940:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <rfalNfcListenActivation+0x2e0>
 8008948:	2302      	movs	r3, #2
 800894a:	e000      	b.n	800894e <rfalNfcListenActivation+0x2e2>
 800894c:	2301      	movs	r3, #1
 800894e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 8008952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800895a:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 800895c:	4413      	add	r3, r2
 800895e:	1dd8      	adds	r0, r3, #7
 8008960:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008962:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8008966:	3307      	adds	r3, #7
 8008968:	08db      	lsrs	r3, r3, #3
 800896a:	b29a      	uxth	r2, r3
 800896c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008970:	b29b      	uxth	r3, r3
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	b29b      	uxth	r3, r3
 8008976:	2200      	movs	r2, #0
 8008978:	4619      	mov	r1, r3
 800897a:	f001 fd01 	bl	800a380 <rfalNfcDepIsAtrReq>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d029      	beq.n	80089d8 <rfalNfcListenActivation+0x36c>
                    {
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 8008984:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 8008986:	220f      	movs	r2, #15
 8008988:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        rfalSetMode( (RFAL_MODE_LISTEN_ACTIVE_P2P), bitRate, bitRate );
 800898c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008990:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008994:	4619      	mov	r1, r3
 8008996:	200d      	movs	r0, #13
 8008998:	f004 f9ce 	bl	800cd38 <rfalSetMode>
                        EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800899c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a4:	4a10      	ldr	r2, [pc, #64]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80089a6:	4413      	add	r3, r2
 80089a8:	1dd9      	adds	r1, r3, #7
 80089aa:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <rfalNfcListenActivation+0x37c>)
 80089ac:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80089b0:	3307      	adds	r3, #7
 80089b2:	08db      	lsrs	r3, r3, #3
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	b29b      	uxth	r3, r3
 80089c0:	460a      	mov	r2, r1
 80089c2:	2101      	movs	r1, #1
 80089c4:	480d      	ldr	r0, [pc, #52]	; (80089fc <rfalNfcListenActivation+0x390>)
 80089c6:	f000 f821 	bl	8008a0c <rfalNfcNfcDepActivate>
 80089ca:	4603      	mov	r3, r0
 80089cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80089ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <rfalNfcListenActivation+0x370>
 80089d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089d6:	e015      	b.n	8008a04 <rfalNfcListenActivation+0x398>
                    }
                    else
                #endif /* RFAL_FEATURE_NFC_DEP */
                    {
                        return ERR_PROTO;
 80089d8:	230b      	movs	r3, #11
 80089da:	e013      	b.n	8008a04 <rfalNfcListenActivation+0x398>
                    }
                }
            }
            return ERR_BUSY;
 80089dc:	2302      	movs	r3, #2
 80089de:	e011      	b.n	8008a04 <rfalNfcListenActivation+0x398>
        /*******************************************************************************/
        case RFAL_LM_STATE_READY_A:
        case RFAL_LM_STATE_READY_Ax:
        case RFAL_LM_STATE_SLEEP_A:
        case RFAL_LM_STATE_SLEEP_AF:
            return ERR_BUSY;
 80089e0:	2302      	movs	r3, #2
 80089e2:	e00f      	b.n	8008a04 <rfalNfcListenActivation+0x398>
        
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            return ERR_LINK_LOSS;
 80089e4:	2325      	movs	r3, #37	; 0x25
 80089e6:	e00d      	b.n	8008a04 <rfalNfcListenActivation+0x398>
 80089e8:	20000aa8 	.word	0x20000aa8
 80089ec:	20000faf 	.word	0x20000faf
 80089f0:	200011b4 	.word	0x200011b4
 80089f4:	20000b60 	.word	0x20000b60
 80089f8:	20000da3 	.word	0x20000da3
 80089fc:	20000b40 	.word	0x20000b40
        
        default:                                                                      /* Wait for activation */
            break;
 8008a00:	bf00      	nop
    }

    return ERR_INTERNAL;
 8008a02:	230c      	movs	r3, #12
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	372c      	adds	r7, #44	; 0x2c
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a0c <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 8008a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a0e:	b0a5      	sub	sp, #148	; 0x94
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	461a      	mov	r2, r3
 8008a18:	460b      	mov	r3, r1
 8008a1a:	72fb      	strb	r3, [r7, #11]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	813b      	strh	r3, [r7, #8]
    /* Supress warnings if Listen mode is disabled */
    NO_WARNING(atrReq);
    NO_WARNING(atrReqLen);
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d839      	bhi.n	8008a9c <rfalNfcNfcDepActivate+0x90>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d106      	bne.n	8008a3e <rfalNfcNfcDepActivate+0x32>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3303      	adds	r3, #3
 8008a34:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8008a36:	2308      	movs	r3, #8
 8008a38:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8008a3c:	e004      	b.n	8008a48 <rfalNfcNfcDepActivate+0x3c>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 8008a3e:	4b4c      	ldr	r3, [pc, #304]	; (8008b70 <rfalNfcNfcDepActivate+0x164>)
 8008a40:	66fb      	str	r3, [r7, #108]	; 0x6c
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8008a42:	230a      	movs	r3, #10
 8008a44:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        initParam.LR        = RFAL_NFCDEP_LR_254;
 8008a60:	2303      	movs	r3, #3
 8008a62:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
        initParam.GB        = gNfcDev.disc.GB;
 8008a66:	4b43      	ldr	r3, [pc, #268]	; (8008b74 <rfalNfcNfcDepActivate+0x168>)
 8008a68:	67bb      	str	r3, [r7, #120]	; 0x78
        initParam.GBLen     = gNfcDev.disc.GBLen;
 8008a6a:	4b43      	ldr	r3, [pc, #268]	; (8008b78 <rfalNfcNfcDepActivate+0x16c>)
 8008a6c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8008a70:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        initParam.commMode  = commMode;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8008a7a:	230e      	movs	r3, #14
 8008a7c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        
        rfalNfcDepInitialize();
 8008a80:	f001 fbac 	bl	800a1dc <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, gNfcDev.disc.maxBR, &device->proto.nfcDep );
 8008a84:	4b3c      	ldr	r3, [pc, #240]	; (8008b78 <rfalNfcNfcDepActivate+0x16c>)
 8008a86:	7cd9      	ldrb	r1, [r3, #19]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f103 0220 	add.w	r2, r3, #32
 8008a8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 ffe0 	bl	800aa58 <rfalNfcDepInitiatorHandleActivation>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	e064      	b.n	8008b66 <rfalNfcNfcDepActivate+0x15a>
    }
    
    /* If we are in Listen mode */
#if RFAL_FEATURE_LISTEN_MODE
    else if( rfalNfcIsRemDevPoller( device->type ) )
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b09      	cmp	r3, #9
 8008aa2:	d95f      	bls.n	8008b64 <rfalNfcNfcDepActivate+0x158>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b0f      	cmp	r3, #15
 8008aaa:	d85b      	bhi.n	8008b64 <rfalNfcNfcDepActivate+0x158>
    {
        rfalNfcDepListenActvParam   actvParams;
        rfalNfcDepTargetParam       targetParam;
        
        ST_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8008aac:	4a32      	ldr	r2, [pc, #200]	; (8008b78 <rfalNfcNfcDepActivate+0x16c>)
 8008aae:	f107 0315 	add.w	r3, r7, #21
 8008ab2:	3215      	adds	r2, #21
 8008ab4:	6810      	ldr	r0, [r2, #0]
 8008ab6:	6851      	ldr	r1, [r2, #4]
 8008ab8:	6018      	str	r0, [r3, #0]
 8008aba:	6059      	str	r1, [r3, #4]
 8008abc:	8912      	ldrh	r2, [r2, #8]
 8008abe:	811a      	strh	r2, [r3, #8]
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	77fb      	strb	r3, [r7, #31]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 3020 	strb.w	r3, [r7, #32]
        targetParam.to        = RFAL_NFCDEP_WT_TRG_MAX_L13; /* [LLCP] 1.3 6.2.1 */ 
 8008aca:	230a      	movs	r3, #10
 8008acc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        targetParam.ppt       = rfalNfcDepLR2PP(RFAL_NFCDEP_LR_254);
 8008ad0:	2330      	movs	r3, #48	; 0x30
 8008ad2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 8008ad6:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <rfalNfcNfcDepActivate+0x16c>)
 8008ad8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8008adc:	2b2f      	cmp	r3, #47	; 0x2f
 8008ade:	d901      	bls.n	8008ae4 <rfalNfcNfcDepActivate+0xd8>
        {
            return ERR_PARAM;
 8008ae0:	2307      	movs	r3, #7
 8008ae2:	e040      	b.n	8008b66 <rfalNfcNfcDepActivate+0x15a>
        }
        targetParam.GBtLen    = gNfcDev.disc.GBLen;
 8008ae4:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <rfalNfcNfcDepActivate+0x16c>)
 8008ae6:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8008aea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if( gNfcDev.disc.GBLen > 0U )
 8008aee:	4b22      	ldr	r3, [pc, #136]	; (8008b78 <rfalNfcNfcDepActivate+0x16c>)
 8008af0:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <rfalNfcNfcDepActivate+0x102>
        {
            ST_MEMCPY(targetParam.GBt, gNfcDev.disc.GB, gNfcDev.disc.GBLen);
 8008af8:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <rfalNfcNfcDepActivate+0x16c>)
 8008afa:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8008afe:	461a      	mov	r2, r3
 8008b00:	f107 0314 	add.w	r3, r7, #20
 8008b04:	330f      	adds	r3, #15
 8008b06:	491b      	ldr	r1, [pc, #108]	; (8008b74 <rfalNfcNfcDepActivate+0x168>)
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f009 fb07 	bl	801211c <memcpy>
        }
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8008b0e:	230e      	movs	r3, #14
 8008b10:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        targetParam.commMode  = commMode;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	753b      	strb	r3, [r7, #20]
            
        
        /* Set activation buffer (including header) for NFC-DEP */
        actvParams.rxBuf        = (rfalNfcDepBufFormat*) &gNfcDev.rxBuf.nfcDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8008b18:	4b18      	ldr	r3, [pc, #96]	; (8008b7c <rfalNfcNfcDepActivate+0x170>)
 8008b1a:	65bb      	str	r3, [r7, #88]	; 0x58
        actvParams.rxLen        = &gNfcDev.rxLen;
 8008b1c:	4b18      	ldr	r3, [pc, #96]	; (8008b80 <rfalNfcNfcDepActivate+0x174>)
 8008b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 8008b20:	4b18      	ldr	r3, [pc, #96]	; (8008b84 <rfalNfcNfcDepActivate+0x178>)
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 8008b24:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <rfalNfcNfcDepActivate+0x17c>)
 8008b26:	667b      	str	r3, [r7, #100]	; 0x64

        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b0a      	cmp	r3, #10
 8008b2e:	d101      	bne.n	8008b34 <rfalNfcNfcDepActivate+0x128>
 8008b30:	230a      	movs	r3, #10
 8008b32:	e000      	b.n	8008b36 <rfalNfcNfcDepActivate+0x12a>
 8008b34:	230b      	movs	r3, #11
 8008b36:	4618      	mov	r0, r3
 8008b38:	f007 f94c 	bl	800fdd4 <rfalListenSetState>
        
        rfalNfcDepInitialize();
 8008b3c:	f001 fb4e 	bl	800a1dc <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: send ATR_RES and handle activation */
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 8008b40:	893e      	ldrh	r6, [r7, #8]
 8008b42:	f107 0514 	add.w	r5, r7, #20
 8008b46:	466c      	mov	r4, sp
 8008b48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008b4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b56:	4632      	mov	r2, r6
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f002 f8ea 	bl	800ad34 <rfalNfcDepListenStartActivation>
 8008b60:	4603      	mov	r3, r0
 8008b62:	e000      	b.n	8008b66 <rfalNfcNfcDepActivate+0x15a>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 8008b64:	230c      	movs	r3, #12
    }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3784      	adds	r7, #132	; 0x84
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20000abd 	.word	0x20000abd
 8008b74:	20000ac7 	.word	0x20000ac7
 8008b78:	20000aa8 	.word	0x20000aa8
 8008b7c:	20000faf 	.word	0x20000faf
 8008b80:	200011b4 	.word	0x200011b4
 8008b84:	20000da3 	.word	0x20000da3
 8008b88:	20000b60 	.word	0x20000b60

08008b8c <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 8008b90:	4b18      	ldr	r3, [pc, #96]	; (8008bf4 <rfalNfcDeactivation+0x68>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d020      	beq.n	8008bda <rfalNfcDeactivation+0x4e>
    {
        if( rfalNfcIsRemDevListener( gNfcDev.activeDev->type ) )                          /* Listen mode no additional deactivation to be performed*/
 8008b98:	4b16      	ldr	r3, [pc, #88]	; (8008bf4 <rfalNfcDeactivation+0x68>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	d81b      	bhi.n	8008bda <rfalNfcDeactivation+0x4e>
        {
        #ifndef RFAL_NFC_SKIP_DEACT
            switch( gNfcDev.activeDev->rfInterface )
 8008ba2:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <rfalNfcDeactivation+0x68>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	7f5b      	ldrb	r3, [r3, #29]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d008      	beq.n	8008bbe <rfalNfcDeactivation+0x32>
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	dc12      	bgt.n	8008bd6 <rfalNfcDeactivation+0x4a>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d014      	beq.n	8008bde <rfalNfcDeactivation+0x52>
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d10e      	bne.n	8008bd6 <rfalNfcDeactivation+0x4a>
                    break;                                                                /* No specific deactivation to be performed */
                
                /*******************************************************************************/
            #if RFAL_FEATURE_ISO_DEP && RFAL_FEATURE_ISO_DEP_POLL
                case RFAL_NFC_INTERFACE_ISODEP:
                    rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 8008bb8:	f7fc f81e 	bl	8004bf8 <rfalIsoDepDeselect>
                    break;
 8008bbc:	e010      	b.n	8008be0 <rfalNfcDeactivation+0x54>
            #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    
                /*******************************************************************************/
            #if RFAL_FEATURE_NFC_DEP
                case RFAL_NFC_INTERFACE_NFCDEP:
                    switch ( gNfcDev.activeDev->type )
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <rfalNfcDeactivation+0x68>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b05      	cmp	r3, #5
 8008bc6:	d102      	bne.n	8008bce <rfalNfcDeactivation+0x42>
                    {
                        case RFAL_NFC_LISTEN_TYPE_AP2P:
                            rfalNfcDepRLS();                                              /* Send a Release to device */
 8008bc8:	f001 feda 	bl	800a980 <rfalNfcDepRLS>
                            break;
 8008bcc:	e002      	b.n	8008bd4 <rfalNfcDeactivation+0x48>
                        default:
                            rfalNfcDepDSL();                                              /* Send a Deselect to device */
 8008bce:	f001 fe6b 	bl	800a8a8 <rfalNfcDepDSL>
                            break;
 8008bd2:	bf00      	nop
                    }
                    break;
 8008bd4:	e004      	b.n	8008be0 <rfalNfcDeactivation+0x54>
            #endif /* RFAL_FEATURE_NFC_DEP */
                    
                default:
                    return ERR_REQUEST;
 8008bd6:	2305      	movs	r3, #5
 8008bd8:	e00a      	b.n	8008bf0 <rfalNfcDeactivation+0x64>
            }
        #endif /* RFAL_NFC_SKIP_DEACT */
        }
 8008bda:	bf00      	nop
 8008bdc:	e000      	b.n	8008be0 <rfalNfcDeactivation+0x54>
                    break;                                                                /* No specific deactivation to be performed */
 8008bde:	bf00      	nop
    }
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 8008be0:	f007 fdee 	bl	80107c0 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
 8008be4:	f007 f830 	bl	800fc48 <rfalListenStop>
    #else
        rfalFieldOff();
    #endif
    
    gNfcDev.activeDev = NULL;
 8008be8:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <rfalNfcDeactivation+0x68>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20000aa8 	.word	0x20000aa8

08008bf8 <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	71fb      	strb	r3, [r7, #7]
 8008c02:	460b      	mov	r3, r1
 8008c04:	71bb      	strb	r3, [r7, #6]
 8008c06:	4613      	mov	r3, r2
 8008c08:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 8008c0a:	797a      	ldrb	r2, [r7, #5]
 8008c0c:	79bb      	ldrb	r3, [r7, #6]
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bf28      	it	cs
 8008c12:	4613      	movcs	r3, r2
 8008c14:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d801      	bhi.n	8008c20 <nfcipDxIsSupported+0x28>
	{
		return true;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e008      	b.n	8008c32 <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d104      	bne.n	8008c30 <nfcipDxIsSupported+0x38>
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <nfcipDxIsSupported+0x38>
	{
		return true;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <nfcipDxIsSupported+0x3a>
	}

	return false;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	2b06      	cmp	r3, #6
 8008c50:	d002      	beq.n	8008c58 <nfcipTxRx+0x1c>
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	2b07      	cmp	r3, #7
 8008c56:	d101      	bne.n	8008c5c <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 8008c58:	2307      	movs	r3, #7
 8008c5a:	e030      	b.n	8008cbe <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 8008c5c:	4a1a      	ldr	r2, [pc, #104]	; (8008cc8 <nfcipTxRx+0x8c>)
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 8008c62:	4a19      	ldr	r2, [pc, #100]	; (8008cc8 <nfcipTxRx+0x8c>)
 8008c64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c66:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <nfcipTxRx+0x8c>)
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d013      	beq.n	8008c9e <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 8008c76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	7bf8      	ldrb	r0, [r7, #15]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	2300      	movs	r3, #0
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	4613      	mov	r3, r2
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	f000 ffa8 	bl	8009be0 <nfcipTx>
 8008c90:	4603      	mov	r3, r0
 8008c92:	82fb      	strh	r3, [r7, #22]
 8008c94:	8afb      	ldrh	r3, [r7, #22]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <nfcipTxRx+0x62>
 8008c9a:	8afb      	ldrh	r3, [r7, #22]
 8008c9c:	e00f      	b.n	8008cbe <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	f002 f804 	bl	800acac <nfcipDataRx>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 8008ca8:	8afb      	ldrh	r3, [r7, #22]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <nfcipTxRx+0x76>
    {
        return ret;
 8008cae:	8afb      	ldrh	r3, [r7, #22]
 8008cb0:	e005      	b.n	8008cbe <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	2000132c 	.word	0x2000132c

08008ccc <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	; 0x30
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	460a      	mov	r2, r1
 8008cd6:	71fb      	strb	r3, [r7, #7]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 8008cdc:	4b2a      	ldr	r3, [pc, #168]	; (8008d88 <nfcipDEPControlMsg+0xbc>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <nfcipDEPControlMsg+0x1c>
 8008ce4:	2307      	movs	r3, #7
 8008ce6:	e000      	b.n	8008cea <nfcipDEPControlMsg+0x1e>
 8008ce8:	2306      	movs	r3, #6
 8008cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 8008cee:	4b26      	ldr	r3, [pc, #152]	; (8008d88 <nfcipDEPControlMsg+0xbc>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d018      	beq.n	8008d28 <nfcipDEPControlMsg+0x5c>
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008cfc:	2b80      	cmp	r3, #128	; 0x80
 8008cfe:	d10d      	bne.n	8008d1c <nfcipDEPControlMsg+0x50>
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	f003 0310 	and.w	r3, r3, #16
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d008      	beq.n	8008d1c <nfcipDEPControlMsg+0x50>
 8008d0a:	79bb      	ldrb	r3, [r7, #6]
 8008d0c:	4a1e      	ldr	r2, [pc, #120]	; (8008d88 <nfcipDEPControlMsg+0xbc>)
 8008d0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d10:	fb02 f203 	mul.w	r2, r2, r3
 8008d14:	4b1c      	ldr	r3, [pc, #112]	; (8008d88 <nfcipDEPControlMsg+0xbc>)
 8008d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d18:	4413      	add	r3, r2
 8008d1a:	e007      	b.n	8008d2c <nfcipDEPControlMsg+0x60>
 8008d1c:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <nfcipDEPControlMsg+0xbc>)
 8008d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d20:	4b19      	ldr	r3, [pc, #100]	; (8008d88 <nfcipDEPControlMsg+0xbc>)
 8008d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d24:	4413      	add	r3, r2
 8008d26:	e001      	b.n	8008d2c <nfcipDEPControlMsg+0x60>
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2c:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d116      	bne.n	8008d66 <nfcipDEPControlMsg+0x9a>
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	f003 0310 	and.w	r3, r3, #16
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d011      	beq.n	8008d66 <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 8008d42:	79bb      	ldrb	r3, [r7, #6]
 8008d44:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 8008d46:	f107 030c 	add.w	r3, r7, #12
 8008d4a:	1d5a      	adds	r2, r3, #5
 8008d4c:	f107 010c 	add.w	r1, r7, #12
 8008d50:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f000 ff3f 	bl	8009be0 <nfcipTx>
 8008d62:	4603      	mov	r3, r0
 8008d64:	e00c      	b.n	8008d80 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 8008d66:	f107 010c 	add.w	r1, r7, #12
 8008d6a:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	2300      	movs	r3, #0
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f000 ff31 	bl	8009be0 <nfcipTx>
 8008d7e:	4603      	mov	r3, r0
    }
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3728      	adds	r7, #40	; 0x28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	2000132c 	.word	0x2000132c

08008d8c <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <nfcipClearCounters+0x34>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 8008d98:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <nfcipClearCounters+0x34>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 8008da0:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <nfcipClearCounters+0x34>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <nfcipClearCounters+0x34>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 8008db0:	4b03      	ldr	r3, [pc, #12]	; (8008dc0 <nfcipClearCounters+0x34>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8008db8:	bf00      	nop
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr
 8008dc0:	2000132c 	.word	0x2000132c

08008dc4 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60ba      	str	r2, [r7, #8]
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	4603      	mov	r3, r0
 8008dd0:	81fb      	strh	r3, [r7, #14]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 8008dd6:	230c      	movs	r3, #12
 8008dd8:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2200      	movs	r2, #0
 8008de6:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 8008dee:	89fb      	ldrh	r3, [r7, #14]
 8008df0:	2b1d      	cmp	r3, #29
 8008df2:	f200 80c6 	bhi.w	8008f82 <nfcipInitiatorHandleDEP+0x1be>
 8008df6:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <nfcipInitiatorHandleDEP+0x38>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008f87 	.word	0x08008f87
 8008e00:	08008f83 	.word	0x08008f83
 8008e04:	08008f7f 	.word	0x08008f7f
 8008e08:	08008f83 	.word	0x08008f83
 8008e0c:	08008e75 	.word	0x08008e75
 8008e10:	08008f83 	.word	0x08008f83
 8008e14:	08008f83 	.word	0x08008f83
 8008e18:	08008f83 	.word	0x08008f83
 8008e1c:	08008f83 	.word	0x08008f83
 8008e20:	08008f3b 	.word	0x08008f3b
 8008e24:	08008f83 	.word	0x08008f83
 8008e28:	08008f83 	.word	0x08008f83
 8008e2c:	08008f83 	.word	0x08008f83
 8008e30:	08008f83 	.word	0x08008f83
 8008e34:	08008f83 	.word	0x08008f83
 8008e38:	08008f83 	.word	0x08008f83
 8008e3c:	08008f83 	.word	0x08008f83
 8008e40:	08008f83 	.word	0x08008f83
 8008e44:	08008f83 	.word	0x08008f83
 8008e48:	08008f83 	.word	0x08008f83
 8008e4c:	08008f83 	.word	0x08008f83
 8008e50:	08008f3b 	.word	0x08008f3b
 8008e54:	08008f83 	.word	0x08008f83
 8008e58:	08008f83 	.word	0x08008f83
 8008e5c:	08008f83 	.word	0x08008f83
 8008e60:	08008f83 	.word	0x08008f83
 8008e64:	08008f83 	.word	0x08008f83
 8008e68:	08008f3b 	.word	0x08008f3b
 8008e6c:	08008f83 	.word	0x08008f83
 8008e70:	08008f3b 	.word	0x08008f3b
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= RFAL_NFCDEP_TO_RETRYS )
 8008e74:	4bac      	ldr	r3, [pc, #688]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008e76:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	b2d1      	uxtb	r1, r2
 8008e7e:	4aaa      	ldr	r2, [pc, #680]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008e80:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d901      	bls.n	8008e8c <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 8008e88:	230b      	movs	r3, #11
 8008e8a:	e264      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 8008e8c:	4ba6      	ldr	r3, [pc, #664]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <nfcipInitiatorHandleDEP+0xe4>
 8008e96:	4ba4      	ldr	r3, [pc, #656]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e9c:	4798      	blx	r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	e256      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 8008ea8:	4b9f      	ldr	r3, [pc, #636]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008eaa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008eae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	d128      	bne.n	8008f08 <nfcipInitiatorHandleDEP+0x144>
 8008eb6:	4b9c      	ldr	r3, [pc, #624]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008eb8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d021      	beq.n	8008f08 <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 8008ec4:	4b98      	ldr	r3, [pc, #608]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	b2d1      	uxtb	r1, r2
 8008ece:	4a96      	ldr	r2, [pc, #600]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008ed0:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d901      	bls.n	8008edc <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 8008ed8:	230b      	movs	r3, #11
 8008eda:	e23c      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8008edc:	4b92      	ldr	r3, [pc, #584]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2100      	movs	r1, #0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff feeb 	bl	8008ccc <nfcipDEPControlMsg>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	82fb      	strh	r3, [r7, #22]
 8008efa:	8afb      	ldrh	r3, [r7, #22]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <nfcipInitiatorHandleDEP+0x140>
 8008f00:	8afb      	ldrh	r3, [r7, #22]
 8008f02:	e228      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 8008f04:	2302      	movs	r3, #2
 8008f06:	e226      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 8008f08:	4b87      	ldr	r3, [pc, #540]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008f0a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	b2d1      	uxtb	r1, r2
 8008f12:	4a85      	ldr	r2, [pc, #532]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008f14:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d901      	bls.n	8008f20 <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 8008f1c:	230b      	movs	r3, #11
 8008f1e:	e21a      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8008f20:	2100      	movs	r1, #0
 8008f22:	2080      	movs	r0, #128	; 0x80
 8008f24:	f7ff fed2 	bl	8008ccc <nfcipDEPControlMsg>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	82fb      	strh	r3, [r7, #22]
 8008f2c:	8afb      	ldrh	r3, [r7, #22]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <nfcipInitiatorHandleDEP+0x172>
 8008f32:	8afb      	ldrh	r3, [r7, #22]
 8008f34:	e20f      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8008f36:	2302      	movs	r3, #2
 8008f38:	e20d      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 8008f3a:	4b7b      	ldr	r3, [pc, #492]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008f3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	b2d1      	uxtb	r1, r2
 8008f44:	4a78      	ldr	r2, [pc, #480]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008f46:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d901      	bls.n	8008f52 <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 8008f4e:	2309      	movs	r3, #9
 8008f50:	e201      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 8008f52:	4b75      	ldr	r3, [pc, #468]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f58:	f003 0303 	and.w	r3, r3, #3
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff feb0 	bl	8008ccc <nfcipDEPControlMsg>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	82fb      	strh	r3, [r7, #22]
 8008f70:	8afb      	ldrh	r3, [r7, #22]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <nfcipInitiatorHandleDEP+0x1b6>
 8008f76:	8afb      	ldrh	r3, [r7, #22]
 8008f78:	e1ed      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e1eb      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 8008f7e:	2302      	movs	r3, #2
 8008f80:	e1e9      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 8008f82:	89fb      	ldrh	r3, [r7, #14]
 8008f84:	e1e7      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            break;
 8008f86:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 8008f88:	4b67      	ldr	r3, [pc, #412]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008f8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008f8c:	7d7b      	ldrb	r3, [r7, #21]
 8008f8e:	1c59      	adds	r1, r3, #1
 8008f90:	7579      	strb	r1, [r7, #21]
 8008f92:	4413      	add	r3, r2
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 8008f98:	4b63      	ldr	r3, [pc, #396]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008f9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008f9c:	7d7b      	ldrb	r3, [r7, #21]
 8008f9e:	1c59      	adds	r1, r3, #1
 8008fa0:	7579      	strb	r1, [r7, #21]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2bd5      	cmp	r3, #213	; 0xd5
 8008fa8:	d001      	beq.n	8008fae <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 8008faa:	230b      	movs	r3, #11
 8008fac:	e1d3      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 8008fae:	4b5e      	ldr	r3, [pc, #376]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008fb0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008fb2:	7d7b      	ldrb	r3, [r7, #21]
 8008fb4:	1c59      	adds	r1, r3, #1
 8008fb6:	7579      	strb	r1, [r7, #21]
 8008fb8:	4413      	add	r3, r2
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b07      	cmp	r3, #7
 8008fbe:	d001      	beq.n	8008fc4 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 8008fc0:	230b      	movs	r3, #11
 8008fc2:	e1c8      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 8008fc4:	4b58      	ldr	r3, [pc, #352]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008fc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008fc8:	7d7b      	ldrb	r3, [r7, #21]
 8008fca:	1c59      	adds	r1, r3, #1
 8008fcc:	7579      	strb	r1, [r7, #21]
 8008fce:	4413      	add	r3, r2
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 8008fd4:	7cbb      	ldrb	r3, [r7, #18]
 8008fd6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008fda:	2b80      	cmp	r3, #128	; 0x80
 8008fdc:	d00b      	beq.n	8008ff6 <nfcipInitiatorHandleDEP+0x232>
 8008fde:	7cbb      	ldrb	r3, [r7, #18]
 8008fe0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008fe4:	2b40      	cmp	r3, #64	; 0x40
 8008fe6:	d006      	beq.n	8008ff6 <nfcipInitiatorHandleDEP+0x232>
 8008fe8:	7cbb      	ldrb	r3, [r7, #18]
 8008fea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 8008ff2:	230b      	movs	r3, #11
 8008ff4:	e1af      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8008ff6:	4b4c      	ldr	r3, [pc, #304]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8008ff8:	78db      	ldrb	r3, [r3, #3]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d015      	beq.n	800902a <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8008ffe:	4b4a      	ldr	r3, [pc, #296]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8009000:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009002:	7d7b      	ldrb	r3, [r7, #21]
 8009004:	1c59      	adds	r1, r3, #1
 8009006:	7579      	strb	r1, [r7, #21]
 8009008:	4413      	add	r3, r2
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	4b46      	ldr	r3, [pc, #280]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 800900e:	78db      	ldrb	r3, [r3, #3]
 8009010:	429a      	cmp	r2, r3
 8009012:	d104      	bne.n	800901e <nfcipInitiatorHandleDEP+0x25a>
 8009014:	7cbb      	ldrb	r3, [r7, #18]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 800901e:	230b      	movs	r3, #11
 8009020:	e199      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8009022:	7d3b      	ldrb	r3, [r7, #20]
 8009024:	3301      	adds	r3, #1
 8009026:	753b      	strb	r3, [r7, #20]
 8009028:	e006      	b.n	8009038 <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 800902a:	7cbb      	ldrb	r3, [r7, #18]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 8009034:	230b      	movs	r3, #11
 8009036:	e18e      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8009038:	4b3b      	ldr	r3, [pc, #236]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 800903a:	791b      	ldrb	r3, [r3, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d015      	beq.n	800906c <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 8009040:	4b39      	ldr	r3, [pc, #228]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8009042:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009044:	7d7b      	ldrb	r3, [r7, #21]
 8009046:	1c59      	adds	r1, r3, #1
 8009048:	7579      	strb	r1, [r7, #21]
 800904a:	4413      	add	r3, r2
 800904c:	781a      	ldrb	r2, [r3, #0]
 800904e:	4b36      	ldr	r3, [pc, #216]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8009050:	791b      	ldrb	r3, [r3, #4]
 8009052:	429a      	cmp	r2, r3
 8009054:	d104      	bne.n	8009060 <nfcipInitiatorHandleDEP+0x29c>
 8009056:	7cbb      	ldrb	r3, [r7, #18]
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 8009060:	230b      	movs	r3, #11
 8009062:	e178      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8009064:	7d3b      	ldrb	r3, [r7, #20]
 8009066:	3301      	adds	r3, #1
 8009068:	753b      	strb	r3, [r7, #20]
 800906a:	e006      	b.n	800907a <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800906c:	7cbb      	ldrb	r3, [r7, #18]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 8009076:	230b      	movs	r3, #11
 8009078:	e16d      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 800907a:	7cbb      	ldrb	r3, [r7, #18]
 800907c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d153      	bne.n	800912c <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 8009084:	7cbb      	ldrb	r3, [r7, #18]
 8009086:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800908a:	2b40      	cmp	r3, #64	; 0x40
 800908c:	d14a      	bne.n	8009124 <nfcipInitiatorHandleDEP+0x360>
 800908e:	7cbb      	ldrb	r3, [r7, #18]
 8009090:	f003 0310 	and.w	r3, r3, #16
 8009094:	2b00      	cmp	r3, #0
 8009096:	d145      	bne.n	8009124 <nfcipInitiatorHandleDEP+0x360>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8009098:	4b23      	ldr	r3, [pc, #140]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 800909a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800909e:	461a      	mov	r2, r3
 80090a0:	7cbb      	ldrb	r3, [r7, #18]
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d11c      	bne.n	80090e4 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 80090aa:	4b1f      	ldr	r3, [pc, #124]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 80090ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090b0:	3301      	adds	r3, #1
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 0303 	and.w	r3, r3, #3
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	4b1b      	ldr	r3, [pc, #108]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 80090bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 80090c0:	4b19      	ldr	r3, [pc, #100]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 80090c2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80090c6:	f083 0301 	eor.w	r3, r3, #1
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 80090d0:	230b      	movs	r3, #11
 80090d2:	e140      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 80090d4:	f7ff fe5a 	bl	8008d8c <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 80090d8:	4b13      	ldr	r3, [pc, #76]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 80090da:	2204      	movs	r2, #4
 80090dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 80090e0:	2300      	movs	r3, #0
 80090e2:	e138      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 80090e4:	4b10      	ldr	r3, [pc, #64]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 80090e6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	b2d1      	uxtb	r1, r2
 80090ee:	4a0e      	ldr	r2, [pc, #56]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 80090f0:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d901      	bls.n	80090fc <nfcipInitiatorHandleDEP+0x338>
                {
                    return ERR_PROTO;
 80090f8:	230b      	movs	r3, #11
 80090fa:	e12c      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 80090fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009102:	3b01      	subs	r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	7cbb      	ldrb	r3, [r7, #18]
 8009108:	4053      	eors	r3, r2
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0303 	and.w	r3, r3, #3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d105      	bne.n	8009120 <nfcipInitiatorHandleDEP+0x35c>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <nfcipInitiatorHandleDEP+0x364>)
 8009116:	2205      	movs	r2, #5
 8009118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 800911c:	2302      	movs	r3, #2
 800911e:	e11a      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 8009120:	230b      	movs	r3, #11
 8009122:	e118      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 8009124:	230b      	movs	r3, #11
 8009126:	e116      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
 8009128:	2000132c 	.word	0x2000132c
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 800912c:	7cbb      	ldrb	r3, [r7, #18]
 800912e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009132:	2b80      	cmp	r3, #128	; 0x80
 8009134:	f040 8094 	bne.w	8009260 <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 8009138:	7cbb      	ldrb	r3, [r7, #18]
 800913a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800913e:	2b80      	cmp	r3, #128	; 0x80
 8009140:	d146      	bne.n	80091d0 <nfcipInitiatorHandleDEP+0x40c>
 8009142:	7cbb      	ldrb	r3, [r7, #18]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b00      	cmp	r3, #0
 800914a:	d141      	bne.n	80091d0 <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 800914c:	4b84      	ldr	r3, [pc, #528]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800914e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009152:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009156:	2b80      	cmp	r3, #128	; 0x80
 8009158:	d138      	bne.n	80091cc <nfcipInitiatorHandleDEP+0x408>
 800915a:	4b81      	ldr	r3, [pc, #516]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800915c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	2b00      	cmp	r3, #0
 8009166:	d131      	bne.n	80091cc <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 8009168:	4b7d      	ldr	r3, [pc, #500]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800916a:	2200      	movs	r2, #0
 800916c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8009170:	4b7b      	ldr	r3, [pc, #492]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009172:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009176:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800917a:	2b80      	cmp	r3, #128	; 0x80
 800917c:	d114      	bne.n	80091a8 <nfcipInitiatorHandleDEP+0x3e4>
 800917e:	4b78      	ldr	r3, [pc, #480]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009180:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009184:	f003 0310 	and.w	r3, r3, #16
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00d      	beq.n	80091a8 <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800918c:	4b74      	ldr	r3, [pc, #464]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800918e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009192:	4619      	mov	r1, r3
 8009194:	2090      	movs	r0, #144	; 0x90
 8009196:	f7ff fd99 	bl	8008ccc <nfcipDEPControlMsg>
 800919a:	4603      	mov	r3, r0
 800919c:	82fb      	strh	r3, [r7, #22]
 800919e:	8afb      	ldrh	r3, [r7, #22]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d011      	beq.n	80091c8 <nfcipInitiatorHandleDEP+0x404>
 80091a4:	8afb      	ldrh	r3, [r7, #22]
 80091a6:	e0d6      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 80091a8:	4b6d      	ldr	r3, [pc, #436]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80091aa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	b2d1      	uxtb	r1, r2
 80091b2:	4a6b      	ldr	r2, [pc, #428]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80091b4:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d901      	bls.n	80091c0 <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 80091bc:	230b      	movs	r3, #11
 80091be:	e0ca      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 80091c0:	4b67      	ldr	r3, [pc, #412]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80091c2:	2205      	movs	r2, #5
 80091c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 80091c8:	2302      	movs	r3, #2
 80091ca:	e0c4      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 80091cc:	230b      	movs	r3, #11
 80091ce:	e0c2      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 80091d0:	7cbb      	ldrb	r3, [r7, #18]
 80091d2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80091d6:	2b80      	cmp	r3, #128	; 0x80
 80091d8:	d140      	bne.n	800925c <nfcipInitiatorHandleDEP+0x498>
 80091da:	7cbb      	ldrb	r3, [r7, #18]
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d03b      	beq.n	800925c <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 80091e4:	4b5e      	ldr	r3, [pc, #376]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80091e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80091e8:	7d7b      	ldrb	r3, [r7, #21]
 80091ea:	1c59      	adds	r1, r3, #1
 80091ec:	7579      	strb	r1, [r7, #21]
 80091ee:	4413      	add	r3, r2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 80091f4:	4b5a      	ldr	r3, [pc, #360]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80091f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	b2d1      	uxtb	r1, r2
 80091fe:	4a58      	ldr	r2, [pc, #352]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009200:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8009204:	2b0a      	cmp	r3, #10
 8009206:	d80d      	bhi.n	8009224 <nfcipInitiatorHandleDEP+0x460>
 8009208:	4b55      	ldr	r3, [pc, #340]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800920a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800920e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009212:	2b80      	cmp	r3, #128	; 0x80
 8009214:	d108      	bne.n	8009228 <nfcipInitiatorHandleDEP+0x464>
 8009216:	4b52      	ldr	r3, [pc, #328]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009218:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 8009224:	230b      	movs	r3, #11
 8009226:	e096      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 8009228:	7c7b      	ldrb	r3, [r7, #17]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <nfcipInitiatorHandleDEP+0x470>
 800922e:	7c7b      	ldrb	r3, [r7, #17]
 8009230:	2b3b      	cmp	r3, #59	; 0x3b
 8009232:	d901      	bls.n	8009238 <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 8009234:	230b      	movs	r3, #11
 8009236:	e08e      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 8009238:	7c7b      	ldrb	r3, [r7, #17]
 800923a:	4619      	mov	r1, r3
 800923c:	2090      	movs	r0, #144	; 0x90
 800923e:	f7ff fd45 	bl	8008ccc <nfcipDEPControlMsg>
 8009242:	4603      	mov	r3, r0
 8009244:	82fb      	strh	r3, [r7, #22]
 8009246:	8afb      	ldrh	r3, [r7, #22]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <nfcipInitiatorHandleDEP+0x48c>
 800924c:	8afb      	ldrh	r3, [r7, #22]
 800924e:	e082      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 8009250:	4a43      	ldr	r2, [pc, #268]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009252:	7c7b      	ldrb	r3, [r7, #17]
 8009254:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 8009258:	2302      	movs	r3, #2
 800925a:	e07c      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 800925c:	230b      	movs	r3, #11
 800925e:	e07a      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 8009260:	7cbb      	ldrb	r3, [r7, #18]
 8009262:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d174      	bne.n	8009354 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800926a:	4b3d      	ldr	r3, [pc, #244]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800926c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009270:	461a      	mov	r2, r3
 8009272:	7cbb      	ldrb	r3, [r7, #18]
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	429a      	cmp	r2, r3
 800927a:	d001      	beq.n	8009280 <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 800927c:	230b      	movs	r3, #11
 800927e:	e06a      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8009280:	4b37      	ldr	r3, [pc, #220]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009286:	3301      	adds	r3, #1
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f003 0303 	and.w	r3, r3, #3
 800928e:	b2da      	uxtb	r2, r3
 8009290:	4b33      	ldr	r3, [pc, #204]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 8009296:	f7ff fd79 	bl	8008d8c <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800929a:	7cfb      	ldrb	r3, [r7, #19]
 800929c:	b29a      	uxth	r2, r3
 800929e:	7d3b      	ldrb	r3, [r7, #20]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b04      	subs	r3, #4
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 80092ae:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80092b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80092b4:	461a      	mov	r2, r3
 80092b6:	7d3b      	ldrb	r3, [r7, #20]
 80092b8:	3304      	adds	r3, #4
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d013      	beq.n	80092e6 <nfcipInitiatorHandleDEP+0x522>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00f      	beq.n	80092e6 <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 80092c6:	4b26      	ldr	r3, [pc, #152]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80092c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ca:	4a25      	ldr	r2, [pc, #148]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80092cc:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 80092d0:	1898      	adds	r0, r3, r2
 80092d2:	4b23      	ldr	r3, [pc, #140]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80092d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80092d6:	7d3b      	ldrb	r3, [r7, #20]
 80092d8:	3304      	adds	r3, #4
 80092da:	18d1      	adds	r1, r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	f008 ff29 	bl	8012138 <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 80092e6:	7cbb      	ldrb	r3, [r7, #18]
 80092e8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d127      	bne.n	8009340 <nfcipInitiatorHandleDEP+0x57c>
 80092f0:	7cbb      	ldrb	r3, [r7, #18]
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d022      	beq.n	8009340 <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 80092fa:	4b19      	ldr	r3, [pc, #100]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8009308:	4b15      	ldr	r3, [pc, #84]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800930a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009318:	b2d8      	uxtb	r0, r3
 800931a:	4b11      	ldr	r3, [pc, #68]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800931c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800931e:	7d7b      	ldrb	r3, [r7, #21]
 8009320:	1c59      	adds	r1, r3, #1
 8009322:	7579      	strb	r1, [r7, #21]
 8009324:	4413      	add	r3, r2
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	4619      	mov	r1, r3
 800932a:	f7ff fccf 	bl	8008ccc <nfcipDEPControlMsg>
 800932e:	4603      	mov	r3, r0
 8009330:	82fb      	strh	r3, [r7, #22]
 8009332:	8afb      	ldrh	r3, [r7, #22]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <nfcipInitiatorHandleDEP+0x578>
 8009338:	8afb      	ldrh	r3, [r7, #22]
 800933a:	e00c      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800933c:	230d      	movs	r3, #13
 800933e:	e00a      	b.n	8009356 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 8009340:	4b07      	ldr	r3, [pc, #28]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 8009342:	2200      	movs	r2, #0
 8009344:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <nfcipInitiatorHandleDEP+0x59c>)
 800934a:	2204      	movs	r2, #4
 800934c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 8009350:	2300      	movs	r3, #0
 8009352:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 8009354:	8afb      	ldrh	r3, [r7, #22]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	2000132c 	.word	0x2000132c

08009364 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08c      	sub	sp, #48	; 0x30
 8009368:	af04      	add	r7, sp, #16
 800936a:	4603      	mov	r3, r0
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 8009372:	230c      	movs	r3, #12
 8009374:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2200      	movs	r2, #0
 8009382:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 800938a:	89fb      	ldrh	r3, [r7, #14]
 800938c:	2b25      	cmp	r3, #37	; 0x25
 800938e:	d006      	beq.n	800939e <nfcipTargetHandleRX+0x3a>
 8009390:	2b25      	cmp	r3, #37	; 0x25
 8009392:	dc0a      	bgt.n	80093aa <nfcipTargetHandleRX+0x46>
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01c      	beq.n	80093d2 <nfcipTargetHandleRX+0x6e>
 8009398:	2b02      	cmp	r3, #2
 800939a:	d003      	beq.n	80093a4 <nfcipTargetHandleRX+0x40>
 800939c:	e005      	b.n	80093aa <nfcipTargetHandleRX+0x46>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 800939e:	89fb      	ldrh	r3, [r7, #14]
 80093a0:	f000 bc15 	b.w	8009bce <nfcipTargetHandleRX+0x86a>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 80093a4:	2302      	movs	r3, #2
 80093a6:	f000 bc12 	b.w	8009bce <nfcipTargetHandleRX+0x86a>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80093aa:	4b9e      	ldr	r3, [pc, #632]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80093ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80093ae:	4b9d      	ldr	r3, [pc, #628]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80093b0:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80093b4:	4b9b      	ldr	r3, [pc, #620]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80093b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	9002      	str	r0, [sp, #8]
 80093be:	2004      	movs	r0, #4
 80093c0:	9001      	str	r0, [sp, #4]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	460b      	mov	r3, r1
 80093c6:	2100      	movs	r1, #0
 80093c8:	2000      	movs	r0, #0
 80093ca:	f004 fb6b 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 80093ce:	2302      	movs	r3, #2
 80093d0:	e3fd      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            break;
 80093d2:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 80093d4:	4b93      	ldr	r3, [pc, #588]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80093d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80093d8:	7f7b      	ldrb	r3, [r7, #29]
 80093da:	1c59      	adds	r1, r3, #1
 80093dc:	7779      	strb	r1, [r7, #29]
 80093de:	4413      	add	r3, r2
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 80093e4:	4b8f      	ldr	r3, [pc, #572]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80093e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80093e8:	7f7b      	ldrb	r3, [r7, #29]
 80093ea:	1c59      	adds	r1, r3, #1
 80093ec:	7779      	strb	r1, [r7, #29]
 80093ee:	4413      	add	r3, r2
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2bd4      	cmp	r3, #212	; 0xd4
 80093f4:	d013      	beq.n	800941e <nfcipTargetHandleRX+0xba>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80093f6:	4b8b      	ldr	r3, [pc, #556]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80093f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80093fa:	4b8a      	ldr	r3, [pc, #552]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80093fc:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8009400:	4b88      	ldr	r3, [pc, #544]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	9002      	str	r0, [sp, #8]
 800940a:	2004      	movs	r0, #4
 800940c:	9001      	str	r0, [sp, #4]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	460b      	mov	r3, r1
 8009412:	2100      	movs	r1, #0
 8009414:	2000      	movs	r0, #0
 8009416:	f004 fb45 	bl	800daa4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 800941a:	2302      	movs	r3, #2
 800941c:	e3d7      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 800941e:	4b81      	ldr	r3, [pc, #516]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009420:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009422:	7f7b      	ldrb	r3, [r7, #29]
 8009424:	1c59      	adds	r1, r3, #1
 8009426:	7779      	strb	r1, [r7, #29]
 8009428:	4413      	add	r3, r2
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	2b0a      	cmp	r3, #10
 800942e:	d032      	beq.n	8009496 <nfcipTargetHandleRX+0x132>
 8009430:	2b0a      	cmp	r3, #10
 8009432:	dc5d      	bgt.n	80094f0 <nfcipTargetHandleRX+0x18c>
 8009434:	2b06      	cmp	r3, #6
 8009436:	d06f      	beq.n	8009518 <nfcipTargetHandleRX+0x1b4>
 8009438:	2b08      	cmp	r3, #8
 800943a:	d159      	bne.n	80094f0 <nfcipTargetHandleRX+0x18c>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800943c:	4b79      	ldr	r3, [pc, #484]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800943e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009440:	7f7b      	ldrb	r3, [r7, #29]
 8009442:	1c59      	adds	r1, r3, #1
 8009444:	7779      	strb	r1, [r7, #29]
 8009446:	4413      	add	r3, r2
 8009448:	781a      	ldrb	r2, [r3, #0]
 800944a:	4b76      	ldr	r3, [pc, #472]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800944c:	78db      	ldrb	r3, [r3, #3]
 800944e:	429a      	cmp	r2, r3
 8009450:	d102      	bne.n	8009458 <nfcipTargetHandleRX+0xf4>
 8009452:	7efb      	ldrb	r3, [r7, #27]
 8009454:	2b04      	cmp	r3, #4
 8009456:	d003      	beq.n	8009460 <nfcipTargetHandleRX+0xfc>
 8009458:	4b72      	ldr	r3, [pc, #456]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800945a:	78db      	ldrb	r3, [r3, #3]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d106      	bne.n	800946e <nfcipTargetHandleRX+0x10a>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 8009460:	4b70      	ldr	r3, [pc, #448]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009462:	78db      	ldrb	r3, [r3, #3]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <nfcipTargetHandleRX+0x10e>
 8009468:	7efb      	ldrb	r3, [r7, #27]
 800946a:	2b03      	cmp	r3, #3
 800946c:	d001      	beq.n	8009472 <nfcipTargetHandleRX+0x10e>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 800946e:	2302      	movs	r3, #2
 8009470:	e3ad      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 8009472:	f107 0114 	add.w	r1, r7, #20
 8009476:	f04f 33ff 	mov.w	r3, #4294967295
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	2300      	movs	r3, #0
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2009      	movs	r0, #9
 8009486:	f000 fbab 	bl	8009be0 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800948a:	4b66      	ldr	r3, [pc, #408]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800948c:	2210      	movs	r2, #16
 800948e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 8009492:	2320      	movs	r3, #32
 8009494:	e39b      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 8009496:	4b63      	ldr	r3, [pc, #396]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009498:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800949a:	7f7b      	ldrb	r3, [r7, #29]
 800949c:	1c59      	adds	r1, r3, #1
 800949e:	7779      	strb	r1, [r7, #29]
 80094a0:	4413      	add	r3, r2
 80094a2:	781a      	ldrb	r2, [r3, #0]
 80094a4:	4b5f      	ldr	r3, [pc, #380]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80094a6:	78db      	ldrb	r3, [r3, #3]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d102      	bne.n	80094b2 <nfcipTargetHandleRX+0x14e>
 80094ac:	7efb      	ldrb	r3, [r7, #27]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d003      	beq.n	80094ba <nfcipTargetHandleRX+0x156>
 80094b2:	4b5c      	ldr	r3, [pc, #368]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80094b4:	78db      	ldrb	r3, [r3, #3]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <nfcipTargetHandleRX+0x164>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 80094ba:	4b5a      	ldr	r3, [pc, #360]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80094bc:	78db      	ldrb	r3, [r3, #3]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <nfcipTargetHandleRX+0x168>
 80094c2:	7efb      	ldrb	r3, [r7, #27]
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d901      	bls.n	80094cc <nfcipTargetHandleRX+0x168>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 80094c8:	2302      	movs	r3, #2
 80094ca:	e380      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 80094cc:	f107 0114 	add.w	r1, r7, #20
 80094d0:	f04f 33ff 	mov.w	r3, #4294967295
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	2300      	movs	r3, #0
 80094dc:	2200      	movs	r2, #0
 80094de:	200b      	movs	r0, #11
 80094e0:	f000 fb7e 	bl	8009be0 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 80094e4:	4b4f      	ldr	r3, [pc, #316]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80094e6:	220c      	movs	r2, #12
 80094e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 80094ec:	231f      	movs	r3, #31
 80094ee:	e36e      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80094f0:	4b4c      	ldr	r3, [pc, #304]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80094f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80094f4:	4b4b      	ldr	r3, [pc, #300]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80094f6:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80094fa:	4b4a      	ldr	r3, [pc, #296]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80094fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009502:	9002      	str	r0, [sp, #8]
 8009504:	2004      	movs	r0, #4
 8009506:	9001      	str	r0, [sp, #4]
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	460b      	mov	r3, r1
 800950c:	2100      	movs	r1, #0
 800950e:	2000      	movs	r0, #0
 8009510:	f004 fac8 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 8009514:	2302      	movs	r3, #2
 8009516:	e35a      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            break;                                /* Continue to normal DEP processing */
 8009518:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 800951a:	4b42      	ldr	r3, [pc, #264]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800951c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800951e:	7f7b      	ldrb	r3, [r7, #29]
 8009520:	1c59      	adds	r1, r3, #1
 8009522:	7779      	strb	r1, [r7, #29]
 8009524:	4413      	add	r3, r2
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800952a:	7ebb      	ldrb	r3, [r7, #26]
 800952c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009530:	2b80      	cmp	r3, #128	; 0x80
 8009532:	d01d      	beq.n	8009570 <nfcipTargetHandleRX+0x20c>
 8009534:	7ebb      	ldrb	r3, [r7, #26]
 8009536:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800953a:	2b40      	cmp	r3, #64	; 0x40
 800953c:	d018      	beq.n	8009570 <nfcipTargetHandleRX+0x20c>
 800953e:	7ebb      	ldrb	r3, [r7, #26]
 8009540:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d013      	beq.n	8009570 <nfcipTargetHandleRX+0x20c>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8009548:	4b36      	ldr	r3, [pc, #216]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800954a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800954c:	4b35      	ldr	r3, [pc, #212]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800954e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8009552:	4b34      	ldr	r3, [pc, #208]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
 800955a:	9002      	str	r0, [sp, #8]
 800955c:	2004      	movs	r0, #4
 800955e:	9001      	str	r0, [sp, #4]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	460b      	mov	r3, r1
 8009564:	2100      	movs	r1, #0
 8009566:	2000      	movs	r0, #0
 8009568:	f004 fa9c 	bl	800daa4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 800956c:	2302      	movs	r3, #2
 800956e:	e32e      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 8009570:	4b2c      	ldr	r3, [pc, #176]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009572:	78db      	ldrb	r3, [r3, #3]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d03b      	beq.n	80095f0 <nfcipTargetHandleRX+0x28c>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 8009578:	7ebb      	ldrb	r3, [r7, #26]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	d113      	bne.n	80095aa <nfcipTargetHandleRX+0x246>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8009582:	4b28      	ldr	r3, [pc, #160]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009584:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009586:	4b27      	ldr	r3, [pc, #156]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009588:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 800958c:	4b25      	ldr	r3, [pc, #148]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 800958e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	9002      	str	r0, [sp, #8]
 8009596:	2004      	movs	r0, #4
 8009598:	9001      	str	r0, [sp, #4]
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	460b      	mov	r3, r1
 800959e:	2100      	movs	r1, #0
 80095a0:	2000      	movs	r0, #0
 80095a2:	f004 fa7f 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 80095a6:	2302      	movs	r3, #2
 80095a8:	e311      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 80095aa:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80095ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80095ae:	7f7b      	ldrb	r3, [r7, #29]
 80095b0:	1c59      	adds	r1, r3, #1
 80095b2:	7779      	strb	r1, [r7, #29]
 80095b4:	4413      	add	r3, r2
 80095b6:	781a      	ldrb	r2, [r3, #0]
 80095b8:	4b1a      	ldr	r3, [pc, #104]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80095ba:	78db      	ldrb	r3, [r3, #3]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d013      	beq.n	80095e8 <nfcipTargetHandleRX+0x284>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80095c0:	4b18      	ldr	r3, [pc, #96]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80095c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80095c4:	4b17      	ldr	r3, [pc, #92]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80095c6:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80095ca:	4b16      	ldr	r3, [pc, #88]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80095cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ce:	f04f 30ff 	mov.w	r0, #4294967295
 80095d2:	9002      	str	r0, [sp, #8]
 80095d4:	2004      	movs	r0, #4
 80095d6:	9001      	str	r0, [sp, #4]
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	460b      	mov	r3, r1
 80095dc:	2100      	movs	r1, #0
 80095de:	2000      	movs	r0, #0
 80095e0:	f004 fa60 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 80095e4:	2302      	movs	r3, #2
 80095e6:	e2f2      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 80095e8:	7f3b      	ldrb	r3, [r7, #28]
 80095ea:	3301      	adds	r3, #1
 80095ec:	773b      	strb	r3, [r7, #28]
 80095ee:	e01b      	b.n	8009628 <nfcipTargetHandleRX+0x2c4>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 80095f0:	7ebb      	ldrb	r3, [r7, #26]
 80095f2:	f003 0304 	and.w	r3, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d016      	beq.n	8009628 <nfcipTargetHandleRX+0x2c4>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80095fa:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 80095fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80095fe:	4b09      	ldr	r3, [pc, #36]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009600:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8009604:	4b07      	ldr	r3, [pc, #28]	; (8009624 <nfcipTargetHandleRX+0x2c0>)
 8009606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	9002      	str	r0, [sp, #8]
 800960e:	2004      	movs	r0, #4
 8009610:	9001      	str	r0, [sp, #4]
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	460b      	mov	r3, r1
 8009616:	2100      	movs	r1, #0
 8009618:	2000      	movs	r0, #0
 800961a:	f004 fa43 	bl	800daa4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 800961e:	2302      	movs	r3, #2
 8009620:	e2d5      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
 8009622:	bf00      	nop
 8009624:	2000132c 	.word	0x2000132c
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 8009628:	4bb2      	ldr	r3, [pc, #712]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d027      	beq.n	8009680 <nfcipTargetHandleRX+0x31c>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 8009630:	4bb0      	ldr	r3, [pc, #704]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009632:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009634:	7f7b      	ldrb	r3, [r7, #29]
 8009636:	1c59      	adds	r1, r3, #1
 8009638:	7779      	strb	r1, [r7, #29]
 800963a:	4413      	add	r3, r2
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	4bad      	ldr	r3, [pc, #692]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009640:	78db      	ldrb	r3, [r3, #3]
 8009642:	429a      	cmp	r2, r3
 8009644:	d104      	bne.n	8009650 <nfcipTargetHandleRX+0x2ec>
 8009646:	7ebb      	ldrb	r3, [r7, #26]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d113      	bne.n	8009678 <nfcipTargetHandleRX+0x314>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8009650:	4ba8      	ldr	r3, [pc, #672]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009654:	4ba7      	ldr	r3, [pc, #668]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009656:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 800965a:	4ba6      	ldr	r3, [pc, #664]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800965c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965e:	f04f 30ff 	mov.w	r0, #4294967295
 8009662:	9002      	str	r0, [sp, #8]
 8009664:	2004      	movs	r0, #4
 8009666:	9001      	str	r0, [sp, #4]
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	460b      	mov	r3, r1
 800966c:	2100      	movs	r1, #0
 800966e:	2000      	movs	r0, #0
 8009670:	f004 fa18 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 8009674:	2302      	movs	r3, #2
 8009676:	e2aa      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 8009678:	7f3b      	ldrb	r3, [r7, #28]
 800967a:	3301      	adds	r3, #1
 800967c:	773b      	strb	r3, [r7, #28]
 800967e:	e018      	b.n	80096b2 <nfcipTargetHandleRX+0x34e>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 8009680:	7ebb      	ldrb	r3, [r7, #26]
 8009682:	f003 0308 	and.w	r3, r3, #8
 8009686:	2b00      	cmp	r3, #0
 8009688:	d013      	beq.n	80096b2 <nfcipTargetHandleRX+0x34e>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800968a:	4b9a      	ldr	r3, [pc, #616]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800968c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800968e:	4b99      	ldr	r3, [pc, #612]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009690:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8009694:	4b97      	ldr	r3, [pc, #604]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009698:	f04f 30ff 	mov.w	r0, #4294967295
 800969c:	9002      	str	r0, [sp, #8]
 800969e:	2004      	movs	r0, #4
 80096a0:	9001      	str	r0, [sp, #4]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	460b      	mov	r3, r1
 80096a6:	2100      	movs	r1, #0
 80096a8:	2000      	movs	r0, #0
 80096aa:	f004 f9fb 	bl	800daa4 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 80096ae:	2302      	movs	r3, #2
 80096b0:	e28d      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 80096b2:	7ebb      	ldrb	r3, [r7, #26]
 80096b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80096b8:	2b40      	cmp	r3, #64	; 0x40
 80096ba:	f040 80c5 	bne.w	8009848 <nfcipTargetHandleRX+0x4e4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 80096be:	7ebb      	ldrb	r3, [r7, #26]
 80096c0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80096c4:	2b40      	cmp	r3, #64	; 0x40
 80096c6:	f040 8083 	bne.w	80097d0 <nfcipTargetHandleRX+0x46c>
 80096ca:	7ebb      	ldrb	r3, [r7, #26]
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d17d      	bne.n	80097d0 <nfcipTargetHandleRX+0x46c>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 80096d4:	4b87      	ldr	r3, [pc, #540]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80096d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096da:	461a      	mov	r2, r3
 80096dc:	7ebb      	ldrb	r3, [r7, #26]
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d149      	bne.n	800977a <nfcipTargetHandleRX+0x416>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 80096e6:	4b83      	ldr	r3, [pc, #524]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80096e8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80096ec:	f083 0301 	eor.w	r3, r3, #1
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d013      	beq.n	800971e <nfcipTargetHandleRX+0x3ba>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80096f6:	4b7f      	ldr	r3, [pc, #508]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80096f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80096fa:	4b7e      	ldr	r3, [pc, #504]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80096fc:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8009700:	4b7c      	ldr	r3, [pc, #496]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	9002      	str	r0, [sp, #8]
 800970a:	2004      	movs	r0, #4
 800970c:	9001      	str	r0, [sp, #4]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	460b      	mov	r3, r1
 8009712:	2100      	movs	r1, #0
 8009714:	2000      	movs	r0, #0
 8009716:	f004 f9c5 	bl	800daa4 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 800971a:	2302      	movs	r3, #2
 800971c:	e257      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800971e:	4b75      	ldr	r3, [pc, #468]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009724:	f003 030f 	and.w	r3, r3, #15
 8009728:	330c      	adds	r3, #12
 800972a:	2201      	movs	r2, #1
 800972c:	fa02 f303 	lsl.w	r3, r2, r3
 8009730:	4a71      	ldr	r2, [pc, #452]	; (80098f8 <nfcipTargetHandleRX+0x594>)
 8009732:	fba2 2303 	umull	r2, r3, r2, r3
 8009736:	0b1b      	lsrs	r3, r3, #12
 8009738:	b29a      	uxth	r2, r3
 800973a:	4b6e      	ldr	r3, [pc, #440]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800973c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	330c      	adds	r3, #12
 8009746:	2101      	movs	r1, #1
 8009748:	fa01 f303 	lsl.w	r3, r1, r3
 800974c:	496a      	ldr	r1, [pc, #424]	; (80098f8 <nfcipTargetHandleRX+0x594>)
 800974e:	fba1 1303 	umull	r1, r3, r1, r3
 8009752:	0b1b      	lsrs	r3, r3, #12
 8009754:	3301      	adds	r3, #1
 8009756:	08db      	lsrs	r3, r3, #3
 8009758:	b29b      	uxth	r3, r3
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	b29b      	uxth	r3, r3
 800975e:	3301      	adds	r3, #1
 8009760:	b29b      	uxth	r3, r3
 8009762:	4618      	mov	r0, r3
 8009764:	f008 fc7e 	bl	8012064 <timerCalculateTimer>
 8009768:	4603      	mov	r3, r0
 800976a:	4a62      	ldr	r2, [pc, #392]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800976c:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800976e:	4b61      	ldr	r3, [pc, #388]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009770:	220e      	movs	r2, #14
 8009772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 8009776:	2300      	movs	r3, #0
 8009778:	e229      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800977a:	4b5e      	ldr	r3, [pc, #376]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800977c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009780:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009784:	2b80      	cmp	r3, #128	; 0x80
 8009786:	d15e      	bne.n	8009846 <nfcipTargetHandleRX+0x4e2>
 8009788:	4b5a      	ldr	r3, [pc, #360]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800978a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	2b00      	cmp	r3, #0
 8009794:	d157      	bne.n	8009846 <nfcipTargetHandleRX+0x4e2>
 8009796:	4b57      	ldr	r3, [pc, #348]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800979c:	3b01      	subs	r3, #1
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	7ebb      	ldrb	r3, [r7, #26]
 80097a2:	4053      	eors	r3, r2
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d14b      	bne.n	8009846 <nfcipTargetHandleRX+0x4e2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 80097ae:	4b51      	ldr	r3, [pc, #324]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80097b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	4b4d      	ldr	r3, [pc, #308]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80097c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 80097c4:	4b4b      	ldr	r3, [pc, #300]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80097c6:	220f      	movs	r2, #15
 80097c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 80097cc:	2302      	movs	r3, #2
 80097ce:	e1fe      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 80097d0:	7ebb      	ldrb	r3, [r7, #26]
 80097d2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80097d6:	2b40      	cmp	r3, #64	; 0x40
 80097d8:	d121      	bne.n	800981e <nfcipTargetHandleRX+0x4ba>
 80097da:	7ebb      	ldrb	r3, [r7, #26]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01c      	beq.n	800981e <nfcipTargetHandleRX+0x4ba>
 80097e4:	4b43      	ldr	r3, [pc, #268]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80097e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	7ebb      	ldrb	r3, [r7, #26]
 80097f0:	4053      	eors	r3, r2
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0303 	and.w	r3, r3, #3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d110      	bne.n	800981e <nfcipTargetHandleRX+0x4ba>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 80097fc:	4b3d      	ldr	r3, [pc, #244]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80097fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009802:	3b01      	subs	r3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	f003 0303 	and.w	r3, r3, #3
 800980a:	b2da      	uxtb	r2, r3
 800980c:	4b39      	ldr	r3, [pc, #228]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800980e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8009812:	4b38      	ldr	r3, [pc, #224]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009814:	220f      	movs	r2, #15
 8009816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 800981a:	2302      	movs	r3, #2
 800981c:	e1d7      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800981e:	4b35      	ldr	r3, [pc, #212]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009820:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009822:	4b34      	ldr	r3, [pc, #208]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009824:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8009828:	4b32      	ldr	r3, [pc, #200]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 800982a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800982c:	f04f 30ff 	mov.w	r0, #4294967295
 8009830:	9002      	str	r0, [sp, #8]
 8009832:	2004      	movs	r0, #4
 8009834:	9001      	str	r0, [sp, #4]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	460b      	mov	r3, r1
 800983a:	2100      	movs	r1, #0
 800983c:	2000      	movs	r0, #0
 800983e:	f004 f931 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 8009842:	2302      	movs	r3, #2
 8009844:	e1c3      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 8009846:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 8009848:	7ebb      	ldrb	r3, [r7, #26]
 800984a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800984e:	2b80      	cmp	r3, #128	; 0x80
 8009850:	f040 80ac 	bne.w	80099ac <nfcipTargetHandleRX+0x648>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 8009854:	7ebb      	ldrb	r3, [r7, #26]
 8009856:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	d111      	bne.n	8009882 <nfcipTargetHandleRX+0x51e>
 800985e:	7ebb      	ldrb	r3, [r7, #26]
 8009860:	f003 0310 	and.w	r3, r3, #16
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10c      	bne.n	8009882 <nfcipTargetHandleRX+0x51e>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 8009868:	2100      	movs	r1, #0
 800986a:	2080      	movs	r0, #128	; 0x80
 800986c:	f7ff fa2e 	bl	8008ccc <nfcipDEPControlMsg>
 8009870:	4603      	mov	r3, r0
 8009872:	83fb      	strh	r3, [r7, #30]
 8009874:	8bfb      	ldrh	r3, [r7, #30]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <nfcipTargetHandleRX+0x51a>
 800987a:	8bfb      	ldrh	r3, [r7, #30]
 800987c:	e1a7      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            return ERR_BUSY;
 800987e:	2302      	movs	r3, #2
 8009880:	e1a5      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 8009882:	7ebb      	ldrb	r3, [r7, #26]
 8009884:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009888:	2b80      	cmp	r3, #128	; 0x80
 800988a:	d17a      	bne.n	8009982 <nfcipTargetHandleRX+0x61e>
 800988c:	7ebb      	ldrb	r3, [r7, #26]
 800988e:	f003 0310 	and.w	r3, r3, #16
 8009892:	2b00      	cmp	r3, #0
 8009894:	d075      	beq.n	8009982 <nfcipTargetHandleRX+0x61e>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 8009896:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 8009898:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800989c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80098a0:	2b80      	cmp	r3, #128	; 0x80
 80098a2:	f040 8082 	bne.w	80099aa <nfcipTargetHandleRX+0x646>
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80098a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80098ac:	f003 0310 	and.w	r3, r3, #16
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d07a      	beq.n	80099aa <nfcipTargetHandleRX+0x646>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80098b6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80098ba:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80098bc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80098be:	7f7b      	ldrb	r3, [r7, #29]
 80098c0:	1c58      	adds	r0, r3, #1
 80098c2:	7778      	strb	r0, [r7, #29]
 80098c4:	440b      	add	r3, r1
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d017      	beq.n	80098fc <nfcipTargetHandleRX+0x598>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80098ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80098d0:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80098d2:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 80098d6:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <nfcipTargetHandleRX+0x590>)
 80098d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098da:	f04f 30ff 	mov.w	r0, #4294967295
 80098de:	9002      	str	r0, [sp, #8]
 80098e0:	2004      	movs	r0, #4
 80098e2:	9001      	str	r0, [sp, #4]
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	460b      	mov	r3, r1
 80098e8:	2100      	movs	r1, #0
 80098ea:	2000      	movs	r0, #0
 80098ec:	f004 f8da 	bl	800daa4 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 80098f0:	2302      	movs	r3, #2
 80098f2:	e16c      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
 80098f4:	2000132c 	.word	0x2000132c
 80098f8:	4d542005 	.word	0x4d542005
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 80098fc:	4bb6      	ldr	r3, [pc, #728]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 8009904:	4bb4      	ldr	r3, [pc, #720]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009906:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <nfcipTargetHandleRX+0x5b6>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800990e:	4bb2      	ldr	r3, [pc, #712]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009910:	220f      	movs	r2, #15
 8009912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 8009916:	2302      	movs	r3, #2
 8009918:	e159      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800991a:	4baf      	ldr	r3, [pc, #700]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 800991c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009920:	461a      	mov	r2, r3
 8009922:	4bad      	ldr	r3, [pc, #692]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009928:	f003 030f 	and.w	r3, r3, #15
 800992c:	330c      	adds	r3, #12
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	4aaa      	ldr	r2, [pc, #680]	; (8009bdc <nfcipTargetHandleRX+0x878>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	0b1b      	lsrs	r3, r3, #12
 800993a:	b29a      	uxth	r2, r3
 800993c:	4ba6      	ldr	r3, [pc, #664]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 800993e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009942:	4619      	mov	r1, r3
 8009944:	4ba4      	ldr	r3, [pc, #656]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	330c      	adds	r3, #12
 8009950:	fa01 f303 	lsl.w	r3, r1, r3
 8009954:	49a1      	ldr	r1, [pc, #644]	; (8009bdc <nfcipTargetHandleRX+0x878>)
 8009956:	fba1 1303 	umull	r1, r3, r1, r3
 800995a:	0b1b      	lsrs	r3, r3, #12
 800995c:	3301      	adds	r3, #1
 800995e:	08db      	lsrs	r3, r3, #3
 8009960:	b29b      	uxth	r3, r3
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	b29b      	uxth	r3, r3
 8009966:	3301      	adds	r3, #1
 8009968:	b29b      	uxth	r3, r3
 800996a:	4618      	mov	r0, r3
 800996c:	f008 fb7a 	bl	8012064 <timerCalculateTimer>
 8009970:	4603      	mov	r3, r0
 8009972:	4a99      	ldr	r2, [pc, #612]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009974:	67d3      	str	r3, [r2, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8009976:	4b98      	ldr	r3, [pc, #608]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009978:	220e      	movs	r2, #14
 800997a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 800997e:	2302      	movs	r3, #2
 8009980:	e125      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8009982:	4b95      	ldr	r3, [pc, #596]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009984:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009986:	4b94      	ldr	r3, [pc, #592]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009988:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 800998c:	4b92      	ldr	r3, [pc, #584]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 800998e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009990:	f04f 30ff 	mov.w	r0, #4294967295
 8009994:	9002      	str	r0, [sp, #8]
 8009996:	2004      	movs	r0, #4
 8009998:	9001      	str	r0, [sp, #4]
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	460b      	mov	r3, r1
 800999e:	2100      	movs	r1, #0
 80099a0:	2000      	movs	r0, #0
 80099a2:	f004 f87f 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 80099a6:	2302      	movs	r3, #2
 80099a8:	e111      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 80099aa:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 80099ac:	7ebb      	ldrb	r3, [r7, #26]
 80099ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f040 810a 	bne.w	8009bcc <nfcipTargetHandleRX+0x868>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 80099b8:	4b87      	ldr	r3, [pc, #540]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 80099ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099be:	461a      	mov	r2, r3
 80099c0:	7ebb      	ldrb	r3, [r7, #26]
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d06e      	beq.n	8009aa8 <nfcipTargetHandleRX+0x744>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 80099ca:	4b83      	ldr	r3, [pc, #524]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 80099cc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80099d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80099d4:	2b80      	cmp	r3, #128	; 0x80
 80099d6:	d153      	bne.n	8009a80 <nfcipTargetHandleRX+0x71c>
 80099d8:	4b7f      	ldr	r3, [pc, #508]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 80099da:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80099de:	f003 0310 	and.w	r3, r3, #16
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d14c      	bne.n	8009a80 <nfcipTargetHandleRX+0x71c>
 80099e6:	4b7c      	ldr	r3, [pc, #496]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 80099e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	7ebb      	ldrb	r3, [r7, #26]
 80099f2:	4053      	eors	r3, r2
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d140      	bne.n	8009a80 <nfcipTargetHandleRX+0x71c>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 80099fe:	4b76      	ldr	r3, [pc, #472]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a04:	3b01      	subs	r3, #1
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	4b72      	ldr	r3, [pc, #456]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 8009a14:	7ebb      	ldrb	r3, [r7, #26]
 8009a16:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d12a      	bne.n	8009a74 <nfcipTargetHandleRX+0x710>
 8009a1e:	7ebb      	ldrb	r3, [r7, #26]
 8009a20:	f003 0310 	and.w	r3, r3, #16
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d025      	beq.n	8009a74 <nfcipTargetHandleRX+0x710>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8009a28:	4b6b      	ldr	r3, [pc, #428]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a38:	b2d8      	uxtb	r0, r3
 8009a3a:	4b67      	ldr	r3, [pc, #412]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a3e:	7f7b      	ldrb	r3, [r7, #29]
 8009a40:	1c59      	adds	r1, r3, #1
 8009a42:	7779      	strb	r1, [r7, #29]
 8009a44:	4413      	add	r3, r2
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f7ff f93f 	bl	8008ccc <nfcipDEPControlMsg>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	83fb      	strh	r3, [r7, #30]
 8009a52:	8bfb      	ldrh	r3, [r7, #30]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <nfcipTargetHandleRX+0x6f8>
 8009a58:	8bfb      	ldrh	r3, [r7, #30]
 8009a5a:	e0b8      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8009a5c:	4b5e      	ldr	r3, [pc, #376]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a62:	3301      	adds	r3, #1
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	4b5a      	ldr	r3, [pc, #360]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009a72:	e003      	b.n	8009a7c <nfcipTargetHandleRX+0x718>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 8009a74:	4b58      	ldr	r3, [pc, #352]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a76:	220f      	movs	r2, #15
 8009a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e0a6      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 8009a80:	4b55      	ldr	r3, [pc, #340]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a84:	4b54      	ldr	r3, [pc, #336]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a86:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 8009a8a:	4b53      	ldr	r3, [pc, #332]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	9002      	str	r0, [sp, #8]
 8009a94:	2004      	movs	r0, #4
 8009a96:	9001      	str	r0, [sp, #4]
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	f004 f800 	bl	800daa4 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e092      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 8009aa8:	7efb      	ldrb	r3, [r7, #27]
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	7f3b      	ldrb	r3, [r7, #28]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	3b04      	subs	r3, #4
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 8009abc:	f7ff f966 	bl	8008d8c <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 8009ac0:	4b45      	ldr	r3, [pc, #276]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009ac2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	7f3b      	ldrb	r3, [r7, #28]
 8009aca:	3304      	adds	r3, #4
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d013      	beq.n	8009af8 <nfcipTargetHandleRX+0x794>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00f      	beq.n	8009af8 <nfcipTargetHandleRX+0x794>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 8009ad8:	4b3f      	ldr	r3, [pc, #252]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009adc:	4a3e      	ldr	r2, [pc, #248]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009ade:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8009ae2:	1898      	adds	r0, r3, r2
 8009ae4:	4b3c      	ldr	r3, [pc, #240]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009ae6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ae8:	7f3b      	ldrb	r3, [r7, #28]
 8009aea:	3304      	adds	r3, #4
 8009aec:	18d1      	adds	r1, r2, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f008 fb20 	bl	8012138 <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 8009af8:	7ebb      	ldrb	r3, [r7, #26]
 8009afa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d132      	bne.n	8009b68 <nfcipTargetHandleRX+0x804>
 8009b02:	7ebb      	ldrb	r3, [r7, #26]
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d02d      	beq.n	8009b68 <nfcipTargetHandleRX+0x804>
        {
            gNfcip.isRxChaining = true;
 8009b0c:	4b32      	ldr	r3, [pc, #200]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 8009b1a:	4b2f      	ldr	r3, [pc, #188]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b2a:	b2d8      	uxtb	r0, r3
 8009b2c:	4b2a      	ldr	r3, [pc, #168]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009b2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b30:	7f7b      	ldrb	r3, [r7, #29]
 8009b32:	1c59      	adds	r1, r3, #1
 8009b34:	7779      	strb	r1, [r7, #29]
 8009b36:	4413      	add	r3, r2
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f7ff f8c6 	bl	8008ccc <nfcipDEPControlMsg>
 8009b40:	4603      	mov	r3, r0
 8009b42:	83fb      	strh	r3, [r7, #30]
 8009b44:	8bfb      	ldrh	r3, [r7, #30]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <nfcipTargetHandleRX+0x7ea>
 8009b4a:	8bfb      	ldrh	r3, [r7, #30]
 8009b4c:	e03f      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 8009b4e:	4b22      	ldr	r3, [pc, #136]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009b50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b54:	3301      	adds	r3, #1
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	4b1e      	ldr	r3, [pc, #120]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 8009b64:	230d      	movs	r3, #13
 8009b66:	e032      	b.n	8009bce <nfcipTargetHandleRX+0x86a>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 8009b68:	4b1b      	ldr	r3, [pc, #108]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	330c      	adds	r3, #12
 8009b74:	2201      	movs	r2, #1
 8009b76:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7a:	4a18      	ldr	r2, [pc, #96]	; (8009bdc <nfcipTargetHandleRX+0x878>)
 8009b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b80:	0b1b      	lsrs	r3, r3, #12
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	4b14      	ldr	r3, [pc, #80]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b8a:	f003 030f 	and.w	r3, r3, #15
 8009b8e:	330c      	adds	r3, #12
 8009b90:	2101      	movs	r1, #1
 8009b92:	fa01 f303 	lsl.w	r3, r1, r3
 8009b96:	4911      	ldr	r1, [pc, #68]	; (8009bdc <nfcipTargetHandleRX+0x878>)
 8009b98:	fba1 1303 	umull	r1, r3, r1, r3
 8009b9c:	0b1b      	lsrs	r3, r3, #12
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	08db      	lsrs	r3, r3, #3
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4618      	mov	r0, r3
 8009bae:	f008 fa59 	bl	8012064 <timerCalculateTimer>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4a08      	ldr	r2, [pc, #32]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009bb6:	67d3      	str	r3, [r2, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 8009bb8:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009bba:	220e      	movs	r2, #14
 8009bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 8009bc0:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <nfcipTargetHandleRX+0x874>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 8009bc8:	2300      	movs	r3, #0
 8009bca:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 8009bcc:	8bfb      	ldrh	r3, [r7, #30]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	2000132c 	.word	0x2000132c
 8009bdc:	4d542005 	.word	0x4d542005

08009be0 <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60b9      	str	r1, [r7, #8]
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	461a      	mov	r2, r3
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 8009bfa:	2307      	movs	r3, #7
 8009bfc:	e177      	b.n	8009eee <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 8009c02:	89bb      	ldrh	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <nfcipTx+0x2e>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	3305      	adds	r3, #5
 8009c12:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 8009c18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c1c:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 8009c22:	4aac      	ldr	r2, [pc, #688]	; (8009ed4 <nfcipTx+0x2f4>)
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 8009c2a:	4baa      	ldr	r3, [pc, #680]	; (8009ed4 <nfcipTx+0x2f4>)
 8009c2c:	22ff      	movs	r2, #255	; 0xff
 8009c2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b0b      	cmp	r3, #11
 8009c36:	f200 8120 	bhi.w	8009e7a <nfcipTx+0x29a>
 8009c3a:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <nfcipTx+0x60>)
 8009c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c40:	08009c71 	.word	0x08009c71
 8009c44:	08009c71 	.word	0x08009c71
 8009c48:	08009d65 	.word	0x08009d65
 8009c4c:	08009d9b 	.word	0x08009d9b
 8009c50:	08009d9b 	.word	0x08009d9b
 8009c54:	08009d9b 	.word	0x08009d9b
 8009c58:	08009dc3 	.word	0x08009dc3
 8009c5c:	08009dc3 	.word	0x08009dc3
 8009c60:	08009dab 	.word	0x08009dab
 8009c64:	08009dab 	.word	0x08009dab
 8009c68:	08009dab 	.word	0x08009dab
 8009c6c:	08009dab 	.word	0x08009dab
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 8009c70:	220a      	movs	r2, #10
 8009c72:	2100      	movs	r1, #0
 8009c74:	6978      	ldr	r0, [r7, #20]
 8009c76:	f008 fa79 	bl	801216c <memset>
 8009c7a:	4b96      	ldr	r3, [pc, #600]	; (8009ed4 <nfcipTx+0x2f4>)
 8009c7c:	7c5b      	ldrb	r3, [r3, #17]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d006      	beq.n	8009c90 <nfcipTx+0xb0>
 8009c82:	4b94      	ldr	r3, [pc, #592]	; (8009ed4 <nfcipTx+0x2f4>)
 8009c84:	7c5b      	ldrb	r3, [r3, #17]
 8009c86:	461a      	mov	r2, r3
 8009c88:	4993      	ldr	r1, [pc, #588]	; (8009ed8 <nfcipTx+0x2f8>)
 8009c8a:	6978      	ldr	r0, [r7, #20]
 8009c8c:	f008 fa46 	bl	801211c <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8009c90:	8bfb      	ldrh	r3, [r7, #30]
 8009c92:	330a      	adds	r3, #10
 8009c94:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 8009c96:	8bfb      	ldrh	r3, [r7, #30]
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	83fa      	strh	r2, [r7, #30]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4a8c      	ldr	r2, [pc, #560]	; (8009ed4 <nfcipTx+0x2f4>)
 8009ca4:	78d2      	ldrb	r2, [r2, #3]
 8009ca6:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 8009ca8:	8bfb      	ldrh	r3, [r7, #30]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	83fa      	strh	r2, [r7, #30]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	4a87      	ldr	r2, [pc, #540]	; (8009ed4 <nfcipTx+0x2f4>)
 8009cb6:	7952      	ldrb	r2, [r2, #5]
 8009cb8:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 8009cba:	8bfb      	ldrh	r3, [r7, #30]
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	83fa      	strh	r2, [r7, #30]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	4a83      	ldr	r2, [pc, #524]	; (8009ed4 <nfcipTx+0x2f4>)
 8009cc8:	7992      	ldrb	r2, [r2, #6]
 8009cca:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d109      	bne.n	8009ce6 <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 8009cd2:	8bfb      	ldrh	r3, [r7, #30]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	83fa      	strh	r2, [r7, #30]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	4413      	add	r3, r2
 8009cde:	4a7d      	ldr	r2, [pc, #500]	; (8009ed4 <nfcipTx+0x2f4>)
 8009ce0:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8009ce4:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 8009ce6:	4b7b      	ldr	r3, [pc, #492]	; (8009ed4 <nfcipTx+0x2f4>)
 8009ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d023      	beq.n	8009d38 <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 8009cf0:	4b78      	ldr	r3, [pc, #480]	; (8009ed4 <nfcipTx+0x2f4>)
 8009cf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	8bfb      	ldrh	r3, [r7, #30]
 8009d02:	1c59      	adds	r1, r3, #1
 8009d04:	83f9      	strh	r1, [r7, #30]
 8009d06:	4619      	mov	r1, r3
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	440b      	add	r3, r1
 8009d0c:	f042 0202 	orr.w	r2, r2, #2
 8009d10:	b2d2      	uxtb	r2, r2
 8009d12:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 8009d14:	8bfb      	ldrh	r3, [r7, #30]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	4413      	add	r3, r2
 8009d1a:	4a6e      	ldr	r2, [pc, #440]	; (8009ed4 <nfcipTx+0x2f4>)
 8009d1c:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8009d20:	496e      	ldr	r1, [pc, #440]	; (8009edc <nfcipTx+0x2fc>)
 8009d22:	4618      	mov	r0, r3
 8009d24:	f008 f9fa 	bl	801211c <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 8009d28:	4b6a      	ldr	r3, [pc, #424]	; (8009ed4 <nfcipTx+0x2f4>)
 8009d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	8bfb      	ldrh	r3, [r7, #30]
 8009d32:	4413      	add	r3, r2
 8009d34:	83fb      	strh	r3, [r7, #30]
 8009d36:	e00e      	b.n	8009d56 <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 8009d38:	4b66      	ldr	r3, [pc, #408]	; (8009ed4 <nfcipTx+0x2f4>)
 8009d3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	8bfb      	ldrh	r3, [r7, #30]
 8009d44:	1c59      	adds	r1, r3, #1
 8009d46:	83f9      	strh	r1, [r7, #30]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	440b      	add	r3, r1
 8009d4e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 8009d56:	8bfb      	ldrh	r3, [r7, #30]
 8009d58:	3302      	adds	r3, #2
 8009d5a:	2b40      	cmp	r3, #64	; 0x40
 8009d5c:	f240 808f 	bls.w	8009e7e <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 8009d60:	2307      	movs	r3, #7
 8009d62:	e0c4      	b.n	8009eee <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 8009d64:	220a      	movs	r2, #10
 8009d66:	2100      	movs	r1, #0
 8009d68:	6978      	ldr	r0, [r7, #20]
 8009d6a:	f008 f9ff 	bl	801216c <memset>
 8009d6e:	4b59      	ldr	r3, [pc, #356]	; (8009ed4 <nfcipTx+0x2f4>)
 8009d70:	7c5b      	ldrb	r3, [r3, #17]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d006      	beq.n	8009d84 <nfcipTx+0x1a4>
 8009d76:	4b57      	ldr	r3, [pc, #348]	; (8009ed4 <nfcipTx+0x2f4>)
 8009d78:	7c5b      	ldrb	r3, [r3, #17]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4956      	ldr	r1, [pc, #344]	; (8009ed8 <nfcipTx+0x2f8>)
 8009d7e:	6978      	ldr	r0, [r7, #20]
 8009d80:	f008 f9cc 	bl	801211c <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 8009d84:	8bfb      	ldrh	r3, [r7, #30]
 8009d86:	330a      	adds	r3, #10
 8009d88:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	61bb      	str	r3, [r7, #24]
 8009d90:	4b50      	ldr	r3, [pc, #320]	; (8009ed4 <nfcipTx+0x2f4>)
 8009d92:	78da      	ldrb	r2, [r3, #3]
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	701a      	strb	r2, [r3, #0]
            break;
 8009d98:	e076      	b.n	8009e88 <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	61bb      	str	r3, [r7, #24]
 8009da0:	4b4c      	ldr	r3, [pc, #304]	; (8009ed4 <nfcipTx+0x2f4>)
 8009da2:	78da      	ldrb	r2, [r3, #3]
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	701a      	strb	r2, [r3, #0]
            break;
 8009da8:	e06e      	b.n	8009e88 <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8009daa:	4b4a      	ldr	r3, [pc, #296]	; (8009ed4 <nfcipTx+0x2f4>)
 8009dac:	78db      	ldrb	r3, [r3, #3]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d067      	beq.n	8009e82 <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	4b46      	ldr	r3, [pc, #280]	; (8009ed4 <nfcipTx+0x2f4>)
 8009dba:	78da      	ldrb	r2, [r3, #3]
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	701a      	strb	r2, [r3, #0]
            }
            break;
 8009dc0:	e05f      	b.n	8009e82 <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 8009dc2:	4b44      	ldr	r3, [pc, #272]	; (8009ed4 <nfcipTx+0x2f4>)
 8009dc4:	78db      	ldrb	r3, [r3, #3]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <nfcipTx+0x1f2>
 8009dca:	7cfb      	ldrb	r3, [r7, #19]
 8009dcc:	f043 0304 	orr.w	r3, r3, #4
 8009dd0:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 8009dd2:	4b40      	ldr	r3, [pc, #256]	; (8009ed4 <nfcipTx+0x2f4>)
 8009dd4:	791b      	ldrb	r3, [r3, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <nfcipTx+0x202>
 8009dda:	7cfb      	ldrb	r3, [r7, #19]
 8009ddc:	f043 0308 	orr.w	r3, r3, #8
 8009de0:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 8009de2:	4b3c      	ldr	r3, [pc, #240]	; (8009ed4 <nfcipTx+0x2f4>)
 8009de4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <nfcipTx+0x21e>
 8009dec:	7cfb      	ldrb	r3, [r7, #19]
 8009dee:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d103      	bne.n	8009dfe <nfcipTx+0x21e>
 8009df6:	7cfb      	ldrb	r3, [r7, #19]
 8009df8:	f043 0310 	orr.w	r3, r3, #16
 8009dfc:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 8009dfe:	4a35      	ldr	r2, [pc, #212]	; (8009ed4 <nfcipTx+0x2f4>)
 8009e00:	7cfb      	ldrb	r3, [r7, #19]
 8009e02:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 8009e06:	7cfb      	ldrb	r3, [r7, #19]
 8009e08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009e0c:	2b80      	cmp	r3, #128	; 0x80
 8009e0e:	d104      	bne.n	8009e1a <nfcipTx+0x23a>
 8009e10:	7cfb      	ldrb	r3, [r7, #19]
 8009e12:	f003 0310 	and.w	r3, r3, #16
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 8009e1a:	4a2e      	ldr	r2, [pc, #184]	; (8009ed4 <nfcipTx+0x2f4>)
 8009e1c:	7cfb      	ldrb	r3, [r7, #19]
 8009e1e:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 8009e22:	4b2c      	ldr	r3, [pc, #176]	; (8009ed4 <nfcipTx+0x2f4>)
 8009e24:	791b      	ldrb	r3, [r3, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	61bb      	str	r3, [r7, #24]
 8009e30:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <nfcipTx+0x2f4>)
 8009e32:	791a      	ldrb	r2, [r3, #4]
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 8009e38:	4b26      	ldr	r3, [pc, #152]	; (8009ed4 <nfcipTx+0x2f4>)
 8009e3a:	78db      	ldrb	r3, [r3, #3]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d006      	beq.n	8009e4e <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	4b23      	ldr	r3, [pc, #140]	; (8009ed4 <nfcipTx+0x2f4>)
 8009e48:	78da      	ldrb	r2, [r3, #3]
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	61bb      	str	r3, [r7, #24]
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	7cfa      	ldrb	r2, [r7, #19]
 8009e58:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 8009e5a:	89bb      	ldrh	r3, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d112      	bne.n	8009e86 <nfcipTx+0x2a6>
 8009e60:	4b1c      	ldr	r3, [pc, #112]	; (8009ed4 <nfcipTx+0x2f4>)
 8009e62:	789b      	ldrb	r3, [r3, #2]
 8009e64:	f003 0304 	and.w	r3, r3, #4
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00c      	beq.n	8009e86 <nfcipTx+0x2a6>
 8009e6c:	7cfb      	ldrb	r3, [r7, #19]
 8009e6e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d107      	bne.n	8009e86 <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 8009e76:	2307      	movs	r3, #7
 8009e78:	e039      	b.n	8009eee <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 8009e7a:	2307      	movs	r3, #7
 8009e7c:	e037      	b.n	8009eee <nfcipTx+0x30e>
            break;
 8009e7e:	bf00      	nop
 8009e80:	e002      	b.n	8009e88 <nfcipTx+0x2a8>
            break;
 8009e82:	bf00      	nop
 8009e84:	e000      	b.n	8009e88 <nfcipTx+0x2a8>
            break;
 8009e86:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	7bfa      	ldrb	r2, [r7, #15]
 8009e92:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <nfcipTx+0x2c4>
 8009ea0:	22d4      	movs	r2, #212	; 0xd4
 8009ea2:	e000      	b.n	8009ea6 <nfcipTx+0x2c6>
 8009ea4:	22d5      	movs	r2, #213	; 0xd5
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	61bb      	str	r3, [r7, #24]
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	89bb      	ldrh	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	8bfb      	ldrh	r3, [r7, #30]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 8009ec4:	4b03      	ldr	r3, [pc, #12]	; (8009ed4 <nfcipTx+0x2f4>)
 8009ec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009eca:	8bfa      	ldrh	r2, [r7, #30]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d907      	bls.n	8009ee0 <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 8009ed0:	2318      	movs	r3, #24
 8009ed2:	e00c      	b.n	8009eee <nfcipTx+0x30e>
 8009ed4:	2000132c 	.word	0x2000132c
 8009ed8:	20001333 	.word	0x20001333
 8009edc:	2000133e 	.word	0x2000133e
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 8009ee0:	8bfb      	ldrh	r3, [r7, #30]
 8009ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	69b8      	ldr	r0, [r7, #24]
 8009ee8:	f000 fec0 	bl	800ac6c <nfcipDataTx>
 8009eec:	4603      	mov	r3, r0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop

08009ef8 <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d034      	beq.n	8009f70 <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 8009f06:	2250      	movs	r2, #80	; 0x50
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	481b      	ldr	r0, [pc, #108]	; (8009f78 <nfcipConfig+0x80>)
 8009f0c:	f008 f906 	bl	801211c <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 8009f10:	4b19      	ldr	r3, [pc, #100]	; (8009f78 <nfcipConfig+0x80>)
 8009f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f16:	2b0e      	cmp	r3, #14
 8009f18:	bf28      	it	cs
 8009f1a:	230e      	movcs	r3, #14
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4b16      	ldr	r3, [pc, #88]	; (8009f78 <nfcipConfig+0x80>)
 8009f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 8009f24:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <nfcipConfig+0x80>)
 8009f26:	78db      	ldrb	r3, [r3, #3]
 8009f28:	2b0e      	cmp	r3, #14
 8009f2a:	bf28      	it	cs
 8009f2c:	230e      	movcs	r3, #14
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <nfcipConfig+0x80>)
 8009f32:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <nfcipConfig+0x80>)
 8009f36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	019b      	lsls	r3, r3, #6
 8009f3e:	2bfd      	cmp	r3, #253	; 0xfd
 8009f40:	d807      	bhi.n	8009f52 <nfcipConfig+0x5a>
 8009f42:	4b0d      	ldr	r3, [pc, #52]	; (8009f78 <nfcipConfig+0x80>)
 8009f44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f48:	3301      	adds	r3, #1
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	019b      	lsls	r3, r3, #6
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	e000      	b.n	8009f54 <nfcipConfig+0x5c>
 8009f52:	23fe      	movs	r3, #254	; 0xfe
 8009f54:	4a08      	ldr	r2, [pc, #32]	; (8009f78 <nfcipConfig+0x80>)
 8009f56:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <nfcipConfig+0x80>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <nfcipConfig+0x6e>
 8009f62:	220a      	movs	r2, #10
 8009f64:	e000      	b.n	8009f68 <nfcipConfig+0x70>
 8009f66:	2201      	movs	r2, #1
 8009f68:	4b03      	ldr	r3, [pc, #12]	; (8009f78 <nfcipConfig+0x80>)
 8009f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009f6e:	e000      	b.n	8009f72 <nfcipConfig+0x7a>
        return;
 8009f70:	bf00      	nop
}
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	2000132c 	.word	0x2000132c

08009f7c <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 8009f7c:	b5b0      	push	{r4, r5, r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af02      	add	r7, sp, #8
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 8009f86:	2314      	movs	r3, #20
 8009f88:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 8009f8a:	4b93      	ldr	r3, [pc, #588]	; (800a1d8 <nfcipRun+0x25c>)
 8009f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f90:	2b10      	cmp	r3, #16
 8009f92:	f200 8117 	bhi.w	800a1c4 <nfcipRun+0x248>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <nfcipRun+0x20>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fe1 	.word	0x08009fe1
 8009fa0:	0800a1c5 	.word	0x0800a1c5
 8009fa4:	0800a1c5 	.word	0x0800a1c5
 8009fa8:	0800a1c5 	.word	0x0800a1c5
 8009fac:	08009fe1 	.word	0x08009fe1
 8009fb0:	08009fe5 	.word	0x08009fe5
 8009fb4:	0800a041 	.word	0x0800a041
 8009fb8:	0800a1c5 	.word	0x0800a1c5
 8009fbc:	0800a1c5 	.word	0x0800a1c5
 8009fc0:	0800a1c5 	.word	0x0800a1c5
 8009fc4:	0800a1c5 	.word	0x0800a1c5
 8009fc8:	0800a1c5 	.word	0x0800a1c5
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	0800a18b 	.word	0x0800a18b
 8009fd4:	0800a069 	.word	0x0800a069
 8009fd8:	0800a113 	.word	0x0800a113
 8009fdc:	08009fe1 	.word	0x08009fe1
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e0f5      	b.n	800a1d0 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 8009fe4:	4b7c      	ldr	r3, [pc, #496]	; (800a1d8 <nfcipRun+0x25c>)
 8009fe6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009fe8:	4b7b      	ldr	r3, [pc, #492]	; (800a1d8 <nfcipRun+0x25c>)
 8009fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fec:	4a7a      	ldr	r2, [pc, #488]	; (800a1d8 <nfcipRun+0x25c>)
 8009fee:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8009ff2:	189c      	adds	r4, r3, r2
 8009ff4:	4b78      	ldr	r3, [pc, #480]	; (800a1d8 <nfcipRun+0x25c>)
 8009ff6:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 8009ffa:	4b77      	ldr	r3, [pc, #476]	; (800a1d8 <nfcipRun+0x25c>)
 8009ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a000:	f003 0303 	and.w	r3, r3, #3
 800a004:	b2db      	uxtb	r3, r3
 800a006:	4a74      	ldr	r2, [pc, #464]	; (800a1d8 <nfcipRun+0x25c>)
 800a008:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800a00a:	4a73      	ldr	r2, [pc, #460]	; (800a1d8 <nfcipRun+0x25c>)
 800a00c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a00e:	440a      	add	r2, r1
 800a010:	9201      	str	r2, [sp, #4]
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	462b      	mov	r3, r5
 800a016:	4622      	mov	r2, r4
 800a018:	4601      	mov	r1, r0
 800a01a:	2006      	movs	r0, #6
 800a01c:	f7ff fde0 	bl	8009be0 <nfcipTx>
 800a020:	4603      	mov	r3, r0
 800a022:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 800a024:	89fb      	ldrh	r3, [r7, #14]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <nfcipRun+0xb8>
            {
                case ERR_NONE:
                    gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 800a02a:	4b6b      	ldr	r3, [pc, #428]	; (800a1d8 <nfcipRun+0x25c>)
 800a02c:	2206      	movs	r2, #6
 800a02e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 800a032:	e005      	b.n	800a040 <nfcipRun+0xc4>
                
                case ERR_PARAM:
                default:
                    gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800a034:	4b68      	ldr	r3, [pc, #416]	; (800a1d8 <nfcipRun+0x25c>)
 800a036:	2204      	movs	r2, #4
 800a038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ret;
 800a03c:	89fb      	ldrh	r3, [r7, #14]
 800a03e:	e0c7      	b.n	800a1d0 <nfcipRun+0x254>
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 800a040:	2000      	movs	r0, #0
 800a042:	f000 fe33 	bl	800acac <nfcipDataRx>
 800a046:	4603      	mov	r3, r0
 800a048:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 800a04a:	89fb      	ldrh	r3, [r7, #14]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	f000 80bb 	beq.w	800a1c8 <nfcipRun+0x24c>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 800a052:	4b61      	ldr	r3, [pc, #388]	; (800a1d8 <nfcipRun+0x25c>)
 800a054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a056:	8819      	ldrh	r1, [r3, #0]
 800a058:	89f8      	ldrh	r0, [r7, #14]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	f7fe feb1 	bl	8008dc4 <nfcipInitiatorHandleDEP>
 800a062:	4603      	mov	r3, r0
 800a064:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 800a066:	e0af      	b.n	800a1c8 <nfcipRun+0x24c>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 800a068:	4b5b      	ldr	r3, [pc, #364]	; (800a1d8 <nfcipRun+0x25c>)
 800a06a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a06c:	4618      	mov	r0, r3
 800a06e:	f008 f807 	bl	8012080 <timerIsExpired>
 800a072:	4603      	mov	r3, r0
 800a074:	f083 0301 	eor.w	r3, r3, #1
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <nfcipRun+0x106>
            {
                return ERR_BUSY;
 800a07e:	2302      	movs	r3, #2
 800a080:	e0a6      	b.n	800a1d0 <nfcipRun+0x254>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 800a082:	4b55      	ldr	r3, [pc, #340]	; (800a1d8 <nfcipRun+0x25c>)
 800a084:	789b      	ldrb	r3, [r3, #2]
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 800a08e:	2304      	movs	r3, #4
 800a090:	e09e      	b.n	800a1d0 <nfcipRun+0x254>
            } 

            if( gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 800a092:	4b51      	ldr	r3, [pc, #324]	; (800a1d8 <nfcipRun+0x25c>)
 800a094:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	b2d1      	uxtb	r1, r2
 800a09c:	4a4e      	ldr	r2, [pc, #312]	; (800a1d8 <nfcipRun+0x25c>)
 800a09e:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 800a0a2:	2b0a      	cmp	r3, #10
 800a0a4:	d901      	bls.n	800a0aa <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 800a0a6:	230b      	movs	r3, #11
 800a0a8:	e092      	b.n	800a1d0 <nfcipRun+0x254>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 800a0aa:	4b4b      	ldr	r3, [pc, #300]	; (800a1d8 <nfcipRun+0x25c>)
 800a0ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b0:	f003 030f 	and.w	r3, r3, #15
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a0be:	2b3a      	cmp	r3, #58	; 0x3a
 800a0c0:	d80b      	bhi.n	800a0da <nfcipRun+0x15e>
 800a0c2:	4b45      	ldr	r3, [pc, #276]	; (800a1d8 <nfcipRun+0x25c>)
 800a0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0c8:	f003 030f 	and.w	r3, r3, #15
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	e000      	b.n	800a0dc <nfcipRun+0x160>
 800a0da:	233b      	movs	r3, #59	; 0x3b
 800a0dc:	4a3e      	ldr	r2, [pc, #248]	; (800a1d8 <nfcipRun+0x25c>)
 800a0de:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800a0e2:	4b3d      	ldr	r3, [pc, #244]	; (800a1d8 <nfcipRun+0x25c>)
 800a0e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	2090      	movs	r0, #144	; 0x90
 800a0ec:	f7fe fdee 	bl	8008ccc <nfcipDEPControlMsg>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	81fb      	strh	r3, [r7, #14]
 800a0f4:	89fb      	ldrh	r3, [r7, #14]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <nfcipRun+0x182>
 800a0fa:	89fb      	ldrh	r3, [r7, #14]
 800a0fc:	e068      	b.n	800a1d0 <nfcipRun+0x254>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 800a0fe:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <nfcipRun+0x25c>)
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 800a106:	4b34      	ldr	r3, [pc, #208]	; (800a1d8 <nfcipRun+0x25c>)
 800a108:	220d      	movs	r2, #13
 800a10a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 800a10e:	2302      	movs	r3, #2
 800a110:	e05e      	b.n	800a1d0 <nfcipRun+0x254>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 800a112:	4b31      	ldr	r3, [pc, #196]	; (800a1d8 <nfcipRun+0x25c>)
 800a114:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800a116:	4b30      	ldr	r3, [pc, #192]	; (800a1d8 <nfcipRun+0x25c>)
 800a118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a11a:	4a2f      	ldr	r2, [pc, #188]	; (800a1d8 <nfcipRun+0x25c>)
 800a11c:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 800a120:	441a      	add	r2, r3
 800a122:	4b2d      	ldr	r3, [pc, #180]	; (800a1d8 <nfcipRun+0x25c>)
 800a124:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
 800a128:	4b2b      	ldr	r3, [pc, #172]	; (800a1d8 <nfcipRun+0x25c>)
 800a12a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f04f 34ff 	mov.w	r4, #4294967295
 800a138:	9401      	str	r4, [sp, #4]
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	4603      	mov	r3, r0
 800a13e:	2007      	movs	r0, #7
 800a140:	f7ff fd4e 	bl	8009be0 <nfcipTx>
 800a144:	4603      	mov	r3, r0
 800a146:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 800a148:	4b23      	ldr	r3, [pc, #140]	; (800a1d8 <nfcipRun+0x25c>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 800a150:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <nfcipRun+0x25c>)
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800a158:	4b1f      	ldr	r3, [pc, #124]	; (800a1d8 <nfcipRun+0x25c>)
 800a15a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a15e:	3301      	adds	r3, #1
 800a160:	b2db      	uxtb	r3, r3
 800a162:	f003 0303 	and.w	r3, r3, #3
 800a166:	b2da      	uxtb	r2, r3
 800a168:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <nfcipRun+0x25c>)
 800a16a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 800a16e:	89fb      	ldrh	r3, [r7, #14]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d104      	bne.n	800a17e <nfcipRun+0x202>
            {
                case ERR_NONE:
                    gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 800a174:	4b18      	ldr	r3, [pc, #96]	; (800a1d8 <nfcipRun+0x25c>)
 800a176:	220d      	movs	r2, #13
 800a178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 800a17c:	e005      	b.n	800a18a <nfcipRun+0x20e>
                
                case ERR_PARAM:
                default:
                    gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 800a17e:	4b16      	ldr	r3, [pc, #88]	; (800a1d8 <nfcipRun+0x25c>)
 800a180:	220c      	movs	r2, #12
 800a182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ret;
 800a186:	89fb      	ldrh	r3, [r7, #14]
 800a188:	e022      	b.n	800a1d0 <nfcipRun+0x254>
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 800a18a:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <nfcipRun+0x25c>)
 800a18c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a190:	2b00      	cmp	r3, #0
 800a192:	d006      	beq.n	800a1a2 <nfcipRun+0x226>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 800a194:	4b10      	ldr	r3, [pc, #64]	; (800a1d8 <nfcipRun+0x25c>)
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 800a19c:	2300      	movs	r3, #0
 800a19e:	81fb      	strh	r3, [r7, #14]
 800a1a0:	e004      	b.n	800a1ac <nfcipRun+0x230>
            }
            else
            {
                ret = nfcipDataRx( false );
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	f000 fd82 	bl	800acac <nfcipDataRx>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 800a1ac:	89fb      	ldrh	r3, [r7, #14]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d00c      	beq.n	800a1cc <nfcipRun+0x250>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 800a1b2:	89fb      	ldrh	r3, [r7, #14]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff f8d3 	bl	8009364 <nfcipTargetHandleRX>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 800a1c2:	e003      	b.n	800a1cc <nfcipRun+0x250>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800a1c4:	bf00      	nop
 800a1c6:	e002      	b.n	800a1ce <nfcipRun+0x252>
            break;
 800a1c8:	bf00      	nop
 800a1ca:	e000      	b.n	800a1ce <nfcipRun+0x252>
            break;
 800a1cc:	bf00      	nop
    }
    return ret;
 800a1ce:	89fb      	ldrh	r3, [r7, #14]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bdb0      	pop	{r4, r5, r7, pc}
 800a1d8:	2000132c 	.word	0x2000132c

0800a1dc <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 800a1e0:	4b32      	ldr	r3, [pc, #200]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 800a1e8:	4b30      	ldr	r3, [pc, #192]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 800a1f0:	4b2e      	ldr	r3, [pc, #184]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 800a1f8:	4b2c      	ldr	r3, [pc, #176]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 800a200:	4b2a      	ldr	r3, [pc, #168]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800a208:	4b28      	ldr	r3, [pc, #160]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a20a:	2202      	movs	r2, #2
 800a20c:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 800a20e:	4b27      	ldr	r3, [pc, #156]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a210:	2200      	movs	r2, #0
 800a212:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 800a214:	4b25      	ldr	r3, [pc, #148]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a216:	2200      	movs	r2, #0
 800a218:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a21a:	4b24      	ldr	r3, [pc, #144]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a220:	4b22      	ldr	r3, [pc, #136]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a222:	2200      	movs	r2, #0
 800a224:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 800a226:	4b21      	ldr	r3, [pc, #132]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a228:	2203      	movs	r2, #3
 800a22a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800a22e:	4b1f      	ldr	r3, [pc, #124]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a230:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a234:	3301      	adds	r3, #1
 800a236:	019b      	lsls	r3, r3, #6
 800a238:	2bfd      	cmp	r3, #253	; 0xfd
 800a23a:	d807      	bhi.n	800a24c <rfalNfcDepInitialize+0x70>
 800a23c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a23e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a242:	3301      	adds	r3, #1
 800a244:	b29b      	uxth	r3, r3
 800a246:	019b      	lsls	r3, r3, #6
 800a248:	b29b      	uxth	r3, r3
 800a24a:	e000      	b.n	800a24e <rfalNfcDepInitialize+0x72>
 800a24c:	23fe      	movs	r3, #254	; 0xfe
 800a24e:	4a17      	ldr	r2, [pc, #92]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a250:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 800a254:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 800a25c:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a25e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a262:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 800a264:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a26a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    
    /* Destroy any ongoing RTOX timer*/
    nfcipTimerDestroy( gNfcip.RTOXTimer );
    gNfcip.RTOXTimer = 0U;
 800a274:	4b0d      	ldr	r3, [pc, #52]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a276:	2200      	movs	r2, #0
 800a278:	67da      	str	r2, [r3, #124]	; 0x7c
    
    gNfcip.PDUTxPos = 0;
 800a27a:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
    gNfcip.PDURxPos = 0;
 800a282:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a284:	2200      	movs	r2, #0
 800a286:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    gNfcip.PDUParam.rxLen = NULL;
 800a28a:	4b08      	ldr	r3, [pc, #32]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    gNfcip.PDUParam.rxBuf = NULL;
 800a292:	4b06      	ldr	r3, [pc, #24]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    gNfcip.PDUParam.txBuf = NULL;
 800a29a:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <rfalNfcDepInitialize+0xd0>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    

    nfcipClearCounters();
 800a2a2:	f7fe fd73 	bl	8008d8c <nfcipClearCounters>
}
 800a2a6:	bf00      	nop
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000132c 	.word	0x2000132c

0800a2b0 <nfcipSetDEPParams>:


/*******************************************************************************/
static void nfcipSetDEPParams( const rfalNfcDepDEPParams *DEPParams )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
    nfcipLogD( " NFCIP SetDEP() txLen: %d \r\n", DEPParams->txBufLen );
	
    gNfcip.isTxChaining = DEPParams->txChaining;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	7ada      	ldrb	r2, [r3, #11]
 800a2bc:	4b2f      	ldr	r3, [pc, #188]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a2be:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    gNfcip.txBuf        = DEPParams->txBuf;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4a2d      	ldr	r2, [pc, #180]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a2c8:	6613      	str	r3, [r2, #96]	; 0x60
    gNfcip.rxBuf        = DEPParams->rxBuf;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	4a2b      	ldr	r2, [pc, #172]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a2d0:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.txBufLen     = DEPParams->txBufLen;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	891a      	ldrh	r2, [r3, #8]
 800a2d6:	4b29      	ldr	r3, [pc, #164]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a2d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	8a1a      	ldrh	r2, [r3, #16]
 800a2e0:	4b26      	ldr	r3, [pc, #152]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a2e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	7a9a      	ldrb	r2, [r3, #10]
 800a2ea:	4b24      	ldr	r3, [pc, #144]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a2ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    gNfcip.rxBufPaylPos = DEPParams->rxBufPaylPos;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	7c9a      	ldrb	r2, [r3, #18]
 800a2f4:	4b21      	ldr	r3, [pc, #132]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a2f6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    
    if( DEPParams->did != RFAL_NFCDEP_DID_KEEP )
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2bff      	cmp	r3, #255	; 0xff
 800a300:	d007      	beq.n	800a312 <nfcipSetDEPParams+0x62>
    {
        gNfcip.cfg.did  = nfcip_DIDMax( DEPParams->did );
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2b0e      	cmp	r3, #14
 800a308:	bf28      	it	cs
 800a30a:	230e      	movcs	r3, #14
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	4b1b      	ldr	r3, [pc, #108]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a310:	70da      	strb	r2, [r3, #3]
    }
    
    gNfcip.cfg.fwt      = DEPParams->fwt;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	4a19      	ldr	r2, [pc, #100]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a318:	6493      	str	r3, [r2, #72]	; 0x48
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	4a17      	ldr	r2, [pc, #92]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a320:	64d3      	str	r3, [r2, #76]	; 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	8b9a      	ldrh	r2, [r3, #28]
 800a326:	4b15      	ldr	r3, [pc, #84]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    
    
    
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 800a32c:	4b13      	ldr	r3, [pc, #76]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d119      	bne.n	800a368 <nfcipSetDEPParams+0xb8>
    {
        /* If there's any data to be sent go for Tx */
        if(DEPParams->txBufLen > 0U)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	891b      	ldrh	r3, [r3, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d010      	beq.n	800a35e <nfcipSetDEPParams+0xae>
        {
            /* Ensure that an RTOX Ack is not being expected at moment */
            if( !gNfcip.isWait4RTOX )
 800a33c:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a33e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800a342:	f083 0301 	eor.w	r3, r3, #1
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d004      	beq.n	800a356 <nfcipSetDEPParams+0xa6>
            {
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800a34c:	4b0b      	ldr	r3, [pc, #44]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a34e:	220f      	movs	r2, #15
 800a350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return;
 800a354:	e00e      	b.n	800a374 <nfcipSetDEPParams+0xc4>
            }
            else
            {
                /* If RTOX Ack is expected, signal a pending Tx to be transmitted right after */
                gNfcip.isTxPending = true;
 800a356:	4b09      	ldr	r3, [pc, #36]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
                nfcipLogW( " NFCIP(T) Waiting RTOX, queueing outgoing DEP Block \r\n" );                
            }
        }    
    
        /*Digital 1.0  14.12.4.1 In target mode the first PDU MUST be sent by the Initiator */
        gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800a35e:	4b07      	ldr	r3, [pc, #28]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a360:	220d      	movs	r2, #13
 800a362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return;
 800a366:	e005      	b.n	800a374 <nfcipSetDEPParams+0xc4>
    }

    /* New data TxRx request clear previous error counters for consecutive TxRx without reseting communication/protocol layer*/
    nfcipClearCounters();
 800a368:	f7fe fd10 	bl	8008d8c <nfcipClearCounters>
    
    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800a36c:	4b03      	ldr	r3, [pc, #12]	; (800a37c <nfcipSetDEPParams+0xcc>)
 800a36e:	2205      	movs	r2, #5
 800a370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	2000132c 	.word	0x2000132c

0800a380 <rfalNfcDepIsAtrReq>:
}


/*******************************************************************************/
bool rfalNfcDepIsAtrReq( const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3 )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	460b      	mov	r3, r1
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	817b      	strh	r3, [r7, #10]
    uint8_t msgIt;
    
    msgIt = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	75fb      	strb	r3, [r7, #23]
    
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 800a392:	897b      	ldrh	r3, [r7, #10]
 800a394:	2b0f      	cmp	r3, #15
 800a396:	d902      	bls.n	800a39e <rfalNfcDepIsAtrReq+0x1e>
 800a398:	897b      	ldrh	r3, [r7, #10]
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	d901      	bls.n	800a3a2 <rfalNfcDepIsAtrReq+0x22>
    {
        return false;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e020      	b.n	800a3e4 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if ( buf[msgIt++] != NFCIP_REQ )
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	75fa      	strb	r2, [r7, #23]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2bd4      	cmp	r3, #212	; 0xd4
 800a3b2:	d001      	beq.n	800a3b8 <rfalNfcDepIsAtrReq+0x38>
    {
        return false;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e015      	b.n	800a3e4 <rfalNfcDepIsAtrReq+0x64>
    }
    
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	75fa      	strb	r2, [r7, #23]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <rfalNfcDepIsAtrReq+0x4e>
    {
        return false;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e00a      	b.n	800a3e4 <rfalNfcDepIsAtrReq+0x64>
    }
    
    /* Output NFID3 if requested */
    if( nfcid3 != NULL )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <rfalNfcDepIsAtrReq+0x62>
    {
        ST_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	220a      	movs	r2, #10
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f007 fe9d 	bl	801211c <memcpy>
    }
     
    return true;
 800a3e2:	2301      	movs	r3, #1
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <nfcipTargetHandleActivation>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleActivation( rfalNfcDepDevice *nfcDepDev, uint8_t *outBRS )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b088      	sub	sp, #32
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_PSLRES_LEN];
    
    /*******************************************************************************/
    /*  Check if we are in correct state                                           */
    /*******************************************************************************/
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 800a3f6:	4b7d      	ldr	r3, [pc, #500]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a3f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3fc:	2b0b      	cmp	r3, #11
 800a3fe:	d001      	beq.n	800a404 <nfcipTargetHandleActivation+0x18>
    {
        return ERR_WRONG_STATE;
 800a400:	2321      	movs	r3, #33	; 0x21
 800a402:	e0ee      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
    
    
    /*******************************************************************************/
    /*  Check required parameters                                                  */
    /*******************************************************************************/
    if( outBRS == NULL )
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <nfcipTargetHandleActivation+0x22>
    {
        return ERR_PARAM;
 800a40a:	2307      	movs	r3, #7
 800a40c:	e0e9      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
    }
    
    /*******************************************************************************/
    /*  Wait and process incoming cmd (PSL / DEP)                                  */
    /*******************************************************************************/        
    ret = nfcipDataRx( false );
 800a40e:	2000      	movs	r0, #0
 800a410:	f000 fc4c 	bl	800acac <nfcipDataRx>
 800a414:	4603      	mov	r3, r0
 800a416:	82fb      	strh	r3, [r7, #22]

    if( ret != ERR_NONE )
 800a418:	8afb      	ldrh	r3, [r7, #22]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <nfcipTargetHandleActivation+0x36>
    {
        return ret;
 800a41e:	8afb      	ldrh	r3, [r7, #22]
 800a420:	e0df      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
    }
    
    msgIt   = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	757b      	strb	r3, [r7, #21]
    *outBRS = RFAL_NFCDEP_BRS_MAINTAIN;                   /* set out BRS to be maintained */
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	22c0      	movs	r2, #192	; 0xc0
 800a42a:	701a      	strb	r2, [r3, #0]
 
    msgIt++;                                              /* Skip LEN byte                */
 800a42c:	7d7b      	ldrb	r3, [r7, #21]
 800a42e:	3301      	adds	r3, #1
 800a430:	757b      	strb	r3, [r7, #21]
    
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 800a432:	4b6e      	ldr	r3, [pc, #440]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a434:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a436:	7d7b      	ldrb	r3, [r7, #21]
 800a438:	1c59      	adds	r1, r3, #1
 800a43a:	7579      	strb	r1, [r7, #21]
 800a43c:	4413      	add	r3, r2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2bd4      	cmp	r3, #212	; 0xd4
 800a442:	d001      	beq.n	800a448 <nfcipTargetHandleActivation+0x5c>
    {
        return ERR_PROTO;
 800a444:	230b      	movs	r3, #11
 800a446:	e0cc      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
    }
    
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 800a448:	4b68      	ldr	r3, [pc, #416]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a44a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a44c:	7d7b      	ldrb	r3, [r7, #21]
 800a44e:	4413      	add	r3, r2
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b04      	cmp	r3, #4
 800a454:	f040 808a 	bne.w	800a56c <nfcipTargetHandleActivation+0x180>
    {
        msgIt++;
 800a458:	7d7b      	ldrb	r3, [r7, #21]
 800a45a:	3301      	adds	r3, #1
 800a45c:	757b      	strb	r3, [r7, #21]
        
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 800a45e:	4b63      	ldr	r3, [pc, #396]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a460:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a462:	7d7b      	ldrb	r3, [r7, #21]
 800a464:	1c59      	adds	r1, r3, #1
 800a466:	7579      	strb	r1, [r7, #21]
 800a468:	4413      	add	r3, r2
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	4b5f      	ldr	r3, [pc, #380]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a46e:	78db      	ldrb	r3, [r3, #3]
 800a470:	429a      	cmp	r2, r3
 800a472:	d001      	beq.n	800a478 <nfcipTargetHandleActivation+0x8c>
        {
            return ERR_PROTO;
 800a474:	230b      	movs	r3, #11
 800a476:	e0b4      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
        }
        
        nfcipLogI( " NFCIP(T) PSL REQ rcvd \r\n" );
        
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 800a478:	4b5c      	ldr	r3, [pc, #368]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a47a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a47c:	7d7b      	ldrb	r3, [r7, #21]
 800a47e:	1c59      	adds	r1, r3, #1
 800a480:	7579      	strb	r1, [r7, #21]
 800a482:	4413      	add	r3, r2
 800a484:	781a      	ldrb	r2, [r3, #0]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	701a      	strb	r2, [r3, #0]
        
        /* Store FSL(LR) and update current config */
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800a48a:	4b58      	ldr	r3, [pc, #352]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a48c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a48e:	7d7b      	ldrb	r3, [r7, #21]
 800a490:	1c59      	adds	r1, r3, #1
 800a492:	7579      	strb	r1, [r7, #21]
 800a494:	4413      	add	r3, r2
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	f003 0303 	and.w	r3, r3, #3
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	4b53      	ldr	r3, [pc, #332]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800a4a4:	4b51      	ldr	r3, [pc, #324]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a4a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	019b      	lsls	r3, r3, #6
 800a4ae:	2bfd      	cmp	r3, #253	; 0xfd
 800a4b0:	d807      	bhi.n	800a4c2 <nfcipTargetHandleActivation+0xd6>
 800a4b2:	4b4e      	ldr	r3, [pc, #312]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a4b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	019b      	lsls	r3, r3, #6
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	e000      	b.n	800a4c4 <nfcipTargetHandleActivation+0xd8>
 800a4c2:	23fe      	movs	r3, #254	; 0xfe
 800a4c4:	4a49      	ldr	r2, [pc, #292]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a4c6:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
        
        /*******************************************************************************/
        /* Update NFC-DDE Device info */
        if( nfcDepDev != NULL )
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d032      	beq.n	800a536 <nfcipTargetHandleActivation+0x14a>
        {
            /* Update Bitrate info */
            /* PRQA S 4342 2 # MISRA 10.5 - Layout of enum rfalBitRate and definition of rfalNfcDepBRS2DSI guarantee no invalid enum values to be created */
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	08db      	lsrs	r3, r3, #3
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f003 0307 	and.w	r3, r3, #7
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	f003 0307 	and.w	r3, r3, #7
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            
            /* Update Length Reduction and Frame Size */
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 800a4f4:	4b3d      	ldr	r3, [pc, #244]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a4f6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 800a500:	4b3a      	ldr	r3, [pc, #232]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a502:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            
            /* Update PPi byte */
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	7bdb      	ldrb	r3, [r3, #15]
 800a510:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a514:	b2da      	uxtb	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	73da      	strb	r2, [r3, #15]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	7bda      	ldrb	r2, [r3, #15]
 800a51e:	4b33      	ldr	r3, [pc, #204]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a520:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	4313      	orrs	r3, r2
 800a530:	b2da      	uxtb	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	73da      	strb	r2, [r3, #15]
        }
        
        rfalSetBitRate( RFAL_BR_KEEP, gNfcip.nfcDepDev->info.DSI );
 800a536:	4b2d      	ldr	r3, [pc, #180]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a53a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a53e:	4619      	mov	r1, r3
 800a540:	20ff      	movs	r0, #255	; 0xff
 800a542:	f002 fd3b 	bl	800cfbc <rfalSetBitRate>
        
        EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800a546:	f107 010c 	add.w	r1, r7, #12
 800a54a:	f04f 33ff 	mov.w	r3, #4294967295
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	2300      	movs	r3, #0
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	2300      	movs	r3, #0
 800a556:	2200      	movs	r2, #0
 800a558:	2005      	movs	r0, #5
 800a55a:	f7ff fb41 	bl	8009be0 <nfcipTx>
 800a55e:	4603      	mov	r3, r0
 800a560:	82fb      	strh	r3, [r7, #22]
 800a562:	8afb      	ldrh	r3, [r7, #22]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d037      	beq.n	800a5d8 <nfcipTargetHandleActivation+0x1ec>
 800a568:	8afb      	ldrh	r3, [r7, #22]
 800a56a:	e03a      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
    }
    else
    {
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 800a56c:	4b1f      	ldr	r3, [pc, #124]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a56e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a570:	7d7b      	ldrb	r3, [r7, #21]
 800a572:	4413      	add	r3, r2
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b06      	cmp	r3, #6
 800a578:	d12a      	bne.n	800a5d0 <nfcipTargetHandleActivation+0x1e4>
        {
            msgIt++;
 800a57a:	7d7b      	ldrb	r3, [r7, #21]
 800a57c:	3301      	adds	r3, #1
 800a57e:	757b      	strb	r3, [r7, #21]
                    
            /*******************************************************************************/
            /* Digital 1.0 14.12.3.1 PNI must be initialized to 0 */
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 800a580:	4b1a      	ldr	r3, [pc, #104]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a582:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a584:	7d7b      	ldrb	r3, [r7, #21]
 800a586:	4413      	add	r3, r2
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	f003 0303 	and.w	r3, r3, #3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <nfcipTargetHandleActivation+0x1aa>
            {
                return ERR_PROTO;
 800a592:	230b      	movs	r3, #11
 800a594:	e025      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
            }
            
            /*******************************************************************************/
            /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 800a596:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a598:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a59a:	7d7b      	ldrb	r3, [r7, #21]
 800a59c:	4413      	add	r3, r2
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00d      	beq.n	800a5c4 <nfcipTargetHandleActivation+0x1d8>
            {
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 800a5a8:	4b10      	ldr	r3, [pc, #64]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a5aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a5ac:	7d7b      	ldrb	r3, [r7, #21]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	757b      	strb	r3, [r7, #21]
 800a5b2:	7d7b      	ldrb	r3, [r7, #21]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	781a      	ldrb	r2, [r3, #0]
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a5ba:	78db      	ldrb	r3, [r3, #3]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d007      	beq.n	800a5d0 <nfcipTargetHandleActivation+0x1e4>
                {
                    return ERR_PROTO;
 800a5c0:	230b      	movs	r3, #11
 800a5c2:	e00e      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
                }
            }
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 800a5c4:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a5c6:	78db      	ldrb	r3, [r3, #3]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <nfcipTargetHandleActivation+0x1e4>
            {
                return ERR_PROTO;
 800a5cc:	230b      	movs	r3, #11
 800a5ce:	e008      	b.n	800a5e2 <nfcipTargetHandleActivation+0x1f6>
                /* MISRA 15.7 - Empty else */
            }
        }
        
        /* Signal Request pending to be digested on normal Handling (DEP_REQ, DSL_REQ, RLS_REQ) */
        gNfcip.isReqPending = true;
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    }
    
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800a5d8:	4b04      	ldr	r3, [pc, #16]	; (800a5ec <nfcipTargetHandleActivation+0x200>)
 800a5da:	220d      	movs	r2, #13
 800a5dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return ERR_NONE;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	2000132c 	.word	0x2000132c

0800a5f0 <rfalNfcDepATR>:


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b0c0      	sub	sp, #256	; 0x100
 800a5f4:	af04      	add	r7, sp, #16
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d005      	beq.n	800a60e <rfalNfcDepATR+0x1e>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <rfalNfcDepATR+0x1e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 800a60e:	2307      	movs	r3, #7
 800a610:	e0be      	b.n	800a790 <rfalNfcDepATR+0x1a0>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	7a5b      	ldrb	r3, [r3, #9]
 800a616:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	7a9b      	ldrb	r3, [r3, #10]
 800a61e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 800a622:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 800a62a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a62e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	7b1b      	ldrb	r3, [r3, #12]
 800a636:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	7adb      	ldrb	r3, [r3, #11]
 800a63e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	7b5b      	ldrb	r3, [r3, #13]
 800a646:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 800a64a:	230e      	movs	r3, #14
 800a64c:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	7d1b      	ldrb	r3, [r3, #20]
 800a654:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 800a658:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00a      	beq.n	800a676 <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6919      	ldr	r1, [r3, #16]
 800a664:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800a668:	461a      	mov	r2, r3
 800a66a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a66e:	3312      	adds	r3, #18
 800a670:	4618      	mov	r0, r3
 800a672:	f007 fd53 	bl	801211c <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	7a1b      	ldrb	r3, [r3, #8]
 800a67a:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 800a67e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6859      	ldr	r1, [r3, #4]
 800a68a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800a68e:	461a      	mov	r2, r3
 800a690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a694:	3307      	adds	r3, #7
 800a696:	4618      	mov	r0, r3
 800a698:	f007 fd40 	bl	801211c <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	785b      	ldrb	r3, [r3, #1]
 800a6a6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 800a6b2:	f7ff fd93 	bl	800a1dc <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 800a6b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff fc1c 	bl	8009ef8 <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800a6c0:	4b35      	ldr	r3, [pc, #212]	; (800a798 <rfalNfcDepATR+0x1a8>)
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <rfalNfcDepATR+0xdc>
 800a6c8:	4a34      	ldr	r2, [pc, #208]	; (800a79c <rfalNfcDepATR+0x1ac>)
 800a6ca:	e000      	b.n	800a6ce <rfalNfcDepATR+0xde>
 800a6cc:	4a34      	ldr	r2, [pc, #208]	; (800a7a0 <rfalNfcDepATR+0x1b0>)
 800a6ce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a6d2:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 800a6d6:	9303      	str	r3, [sp, #12]
 800a6d8:	2341      	movs	r3, #65	; 0x41
 800a6da:	9302      	str	r3, [sp, #8]
 800a6dc:	f107 0314 	add.w	r3, r7, #20
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	f7fe faa7 	bl	8008c3c <nfcipTxRx>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 800a6f4:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <rfalNfcDepATR+0x112>
 800a6fc:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800a700:	e046      	b.n	800a790 <rfalNfcDepATR+0x1a0>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 800a708:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 800a712:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a716:	4413      	add	r3, r2
 800a718:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	3b01      	subs	r3, #1
 800a720:	b29b      	uxth	r3, r3
 800a722:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 800a726:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a72a:	2b10      	cmp	r3, #16
 800a72c:	d903      	bls.n	800a736 <rfalNfcDepATR+0x146>
 800a72e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a732:	2b40      	cmp	r3, #64	; 0x40
 800a734:	d901      	bls.n	800a73a <rfalNfcDepATR+0x14a>
    {
        return ERR_PROTO;
 800a736:	230b      	movs	r3, #11
 800a738:	e02a      	b.n	800a790 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 800a73a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 800a744:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a748:	4413      	add	r3, r2
 800a74a:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800a74e:	2bd5      	cmp	r3, #213	; 0xd5
 800a750:	d001      	beq.n	800a756 <rfalNfcDepATR+0x166>
    {
        return ERR_PROTO;
 800a752:	230b      	movs	r3, #11
 800a754:	e01c      	b.n	800a790 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 800a756:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800a75a:	1c5a      	adds	r2, r3, #1
 800a75c:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 800a760:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a764:	4413      	add	r3, r2
 800a766:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d001      	beq.n	800a772 <rfalNfcDepATR+0x182>
    {
        return ERR_PROTO;
 800a76e:	230b      	movs	r3, #11
 800a770:	e00e      	b.n	800a790 <rfalNfcDepATR+0x1a0>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 800a772:	f107 0314 	add.w	r3, r7, #20
 800a776:	3301      	adds	r3, #1
 800a778:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800a77c:	4619      	mov	r1, r3
 800a77e:	68b8      	ldr	r0, [r7, #8]
 800a780:	f007 fccc 	bl	801211c <memcpy>
    *atrResLen = (uint8_t)rxLen;
 800a784:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a788:	b2da      	uxtb	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	37f0      	adds	r7, #240	; 0xf0
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	2000132c 	.word	0x2000132c
 800a79c:	00200c01 	.word	0x00200c01
 800a7a0:	01000c01 	.word	0x01000c01

0800a7a4 <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b08b      	sub	sp, #44	; 0x2c
 800a7a8:	af04      	add	r7, sp, #16
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	460a      	mov	r2, r1
 800a7ae:	71fb      	strb	r3, [r7, #7]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 800a7b8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	75fa      	strb	r2, [r7, #23]
 800a7be:	f107 0218 	add.w	r2, r7, #24
 800a7c2:	4413      	add	r3, r2
 800a7c4:	79fa      	ldrb	r2, [r7, #7]
 800a7c6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	75fa      	strb	r2, [r7, #23]
 800a7d0:	f107 0218 	add.w	r2, r7, #24
 800a7d4:	4413      	add	r3, r2
 800a7d6:	79ba      	ldrb	r2, [r7, #6]
 800a7d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 800a7dc:	4b2f      	ldr	r3, [pc, #188]	; (800a89c <rfalNfcDepPSL+0xf8>)
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <rfalNfcDepPSL+0x44>
 800a7e4:	482e      	ldr	r0, [pc, #184]	; (800a8a0 <rfalNfcDepPSL+0xfc>)
 800a7e6:	e000      	b.n	800a7ea <rfalNfcDepPSL+0x46>
 800a7e8:	482e      	ldr	r0, [pc, #184]	; (800a8a4 <rfalNfcDepPSL+0x100>)
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	3b04      	subs	r3, #4
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f107 020c 	add.w	r2, r7, #12
 800a7f4:	1d14      	adds	r4, r2, #4
 800a7f6:	f107 010c 	add.w	r1, r7, #12
 800a7fa:	f107 0212 	add.w	r2, r7, #18
 800a7fe:	9203      	str	r2, [sp, #12]
 800a800:	2204      	movs	r2, #4
 800a802:	9202      	str	r2, [sp, #8]
 800a804:	f107 0208 	add.w	r2, r7, #8
 800a808:	9201      	str	r2, [sp, #4]
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	4623      	mov	r3, r4
 800a80e:	4602      	mov	r2, r0
 800a810:	2004      	movs	r0, #4
 800a812:	f7fe fa13 	bl	8008c3c <nfcipTxRx>
 800a816:	4603      	mov	r3, r0
 800a818:	82bb      	strh	r3, [r7, #20]
 800a81a:	8abb      	ldrh	r3, [r7, #20]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <rfalNfcDepPSL+0x80>
 800a820:	8abb      	ldrh	r3, [r7, #20]
 800a822:	e037      	b.n	800a894 <rfalNfcDepPSL+0xf0>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	75fa      	strb	r2, [r7, #23]
 800a82e:	f107 0218 	add.w	r2, r7, #24
 800a832:	4413      	add	r3, r2
 800a834:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a838:	b29b      	uxth	r3, r3
 800a83a:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 800a83c:	8a7b      	ldrh	r3, [r7, #18]
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d801      	bhi.n	800a846 <rfalNfcDepPSL+0xa2>
    {
        return ERR_PROTO;
 800a842:	230b      	movs	r3, #11
 800a844:	e026      	b.n	800a894 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	75fa      	strb	r2, [r7, #23]
 800a84c:	f107 0218 	add.w	r2, r7, #24
 800a850:	4413      	add	r3, r2
 800a852:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a856:	2bd5      	cmp	r3, #213	; 0xd5
 800a858:	d001      	beq.n	800a85e <rfalNfcDepPSL+0xba>
    {
        return ERR_PROTO;
 800a85a:	230b      	movs	r3, #11
 800a85c:	e01a      	b.n	800a894 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	75fa      	strb	r2, [r7, #23]
 800a864:	f107 0218 	add.w	r2, r7, #24
 800a868:	4413      	add	r3, r2
 800a86a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a86e:	2b05      	cmp	r3, #5
 800a870:	d001      	beq.n	800a876 <rfalNfcDepPSL+0xd2>
    {
        return ERR_PROTO;
 800a872:	230b      	movs	r3, #11
 800a874:	e00e      	b.n	800a894 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	75fa      	strb	r2, [r7, #23]
 800a87c:	f107 0218 	add.w	r2, r7, #24
 800a880:	4413      	add	r3, r2
 800a882:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800a886:	4b05      	ldr	r3, [pc, #20]	; (800a89c <rfalNfcDepPSL+0xf8>)
 800a888:	78db      	ldrb	r3, [r3, #3]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d001      	beq.n	800a892 <rfalNfcDepPSL+0xee>
    {
        return ERR_PROTO;
 800a88e:	230b      	movs	r3, #11
 800a890:	e000      	b.n	800a894 <rfalNfcDepPSL+0xf0>
    }
    
    return ERR_NONE;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	371c      	adds	r7, #28
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd90      	pop	{r4, r7, pc}
 800a89c:	2000132c 	.word	0x2000132c
 800a8a0:	00200c01 	.word	0x00200c01
 800a8a4:	01000c01 	.word	0x01000c01

0800a8a8 <rfalNfcDepDSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepDSL( void )
{   
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08a      	sub	sp, #40	; 0x28
 800a8ac:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t  txBuf[ RFAL_NFCDEP_HEADER_PAD + NFCIP_DSLREQ_LEN];
    uint8_t  rxBuf[NFCIP_DSLRES_LEN];
    uint8_t  rxMsgIt;
    uint16_t rxLen = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	80fb      	strh	r3, [r7, #6]
        
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 800a8b2:	4b30      	ldr	r3, [pc, #192]	; (800a974 <rfalNfcDepDSL+0xcc>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d101      	bne.n	800a8be <rfalNfcDepDSL+0x16>
    {
        return ERR_NONE;                                  /* Target has no deselect procedure */
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e055      	b.n	800a96a <rfalNfcDepDSL+0xc2>
    }
    
    /* Repeating a DSL REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_DSL_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 800a8be:	4b2d      	ldr	r3, [pc, #180]	; (800a974 <rfalNfcDepDSL+0xcc>)
 800a8c0:	785b      	ldrb	r3, [r3, #1]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <rfalNfcDepDSL+0x22>
 800a8c6:	4a2c      	ldr	r2, [pc, #176]	; (800a978 <rfalNfcDepDSL+0xd0>)
 800a8c8:	e000      	b.n	800a8cc <rfalNfcDepDSL+0x24>
 800a8ca:	4a2c      	ldr	r2, [pc, #176]	; (800a97c <rfalNfcDepDSL+0xd4>)
 800a8cc:	f107 010c 	add.w	r1, r7, #12
 800a8d0:	1dbb      	adds	r3, r7, #6
 800a8d2:	9303      	str	r3, [sp, #12]
 800a8d4:	2304      	movs	r3, #4
 800a8d6:	9302      	str	r3, [sp, #8]
 800a8d8:	f107 0308 	add.w	r3, r7, #8
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	2008      	movs	r0, #8
 800a8e6:	f7fe f9a9 	bl	8008c3c <nfcipTxRx>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	82fb      	strh	r3, [r7, #22]
 800a8ee:	8afb      	ldrh	r3, [r7, #22]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <rfalNfcDepDSL+0x50>
 800a8f4:	8afb      	ldrh	r3, [r7, #22]
 800a8f6:	e038      	b.n	800a96a <rfalNfcDepDSL+0xc2>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	757b      	strb	r3, [r7, #21]
    
    if( rxBuf[rxMsgIt++] < NFCIP_DSLRES_MIN )             /* Checking length: LEN + DSL_RES */
 800a8fc:	7d7b      	ldrb	r3, [r7, #21]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	757a      	strb	r2, [r7, #21]
 800a902:	f107 0218 	add.w	r2, r7, #24
 800a906:	4413      	add	r3, r2
 800a908:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d801      	bhi.n	800a914 <rfalNfcDepDSL+0x6c>
    {
        return ERR_PROTO;
 800a910:	230b      	movs	r3, #11
 800a912:	e02a      	b.n	800a96a <rfalNfcDepDSL+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800a914:	7d7b      	ldrb	r3, [r7, #21]
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	757a      	strb	r2, [r7, #21]
 800a91a:	f107 0218 	add.w	r2, r7, #24
 800a91e:	4413      	add	r3, r2
 800a920:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a924:	2bd5      	cmp	r3, #213	; 0xd5
 800a926:	d001      	beq.n	800a92c <rfalNfcDepDSL+0x84>
    {
        return ERR_PROTO;
 800a928:	230b      	movs	r3, #11
 800a92a:	e01e      	b.n	800a96a <rfalNfcDepDSL+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DSL_RES )  /* Checking if is DSL RES          */
 800a92c:	7d7b      	ldrb	r3, [r7, #21]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	757a      	strb	r2, [r7, #21]
 800a932:	f107 0218 	add.w	r2, r7, #24
 800a936:	4413      	add	r3, r2
 800a938:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	d001      	beq.n	800a944 <rfalNfcDepDSL+0x9c>
    {
        return ERR_PROTO;
 800a940:	230b      	movs	r3, #11
 800a942:	e012      	b.n	800a96a <rfalNfcDepDSL+0xc2>
    }
    
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800a944:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <rfalNfcDepDSL+0xcc>)
 800a946:	78db      	ldrb	r3, [r3, #3]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00d      	beq.n	800a968 <rfalNfcDepDSL+0xc0>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800a94c:	7d7b      	ldrb	r3, [r7, #21]
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	757a      	strb	r2, [r7, #21]
 800a952:	f107 0218 	add.w	r2, r7, #24
 800a956:	4413      	add	r3, r2
 800a958:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <rfalNfcDepDSL+0xcc>)
 800a95e:	78db      	ldrb	r3, [r3, #3]
 800a960:	429a      	cmp	r2, r3
 800a962:	d001      	beq.n	800a968 <rfalNfcDepDSL+0xc0>
        {
            return ERR_PROTO;
 800a964:	230b      	movs	r3, #11
 800a966:	e000      	b.n	800a96a <rfalNfcDepDSL+0xc2>
        }
    }

    return ERR_NONE;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3718      	adds	r7, #24
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	2000132c 	.word	0x2000132c
 800a978:	00200c01 	.word	0x00200c01
 800a97c:	01000c01 	.word	0x01000c01

0800a980 <rfalNfcDepRLS>:


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 800a980:	b580      	push	{r7, lr}
 800a982:	b08a      	sub	sp, #40	; 0x28
 800a984:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800a98a:	4b30      	ldr	r3, [pc, #192]	; (800aa4c <rfalNfcDepRLS+0xcc>)
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 800a992:	2300      	movs	r3, #0
 800a994:	e055      	b.n	800aa42 <rfalNfcDepRLS+0xc2>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 800a996:	4b2d      	ldr	r3, [pc, #180]	; (800aa4c <rfalNfcDepRLS+0xcc>)
 800a998:	785b      	ldrb	r3, [r3, #1]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d101      	bne.n	800a9a2 <rfalNfcDepRLS+0x22>
 800a99e:	4a2c      	ldr	r2, [pc, #176]	; (800aa50 <rfalNfcDepRLS+0xd0>)
 800a9a0:	e000      	b.n	800a9a4 <rfalNfcDepRLS+0x24>
 800a9a2:	4a2c      	ldr	r2, [pc, #176]	; (800aa54 <rfalNfcDepRLS+0xd4>)
 800a9a4:	f107 010c 	add.w	r1, r7, #12
 800a9a8:	1dbb      	adds	r3, r7, #6
 800a9aa:	9303      	str	r3, [sp, #12]
 800a9ac:	2304      	movs	r3, #4
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	200a      	movs	r0, #10
 800a9be:	f7fe f93d 	bl	8008c3c <nfcipTxRx>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	82fb      	strh	r3, [r7, #22]
 800a9c6:	8afb      	ldrh	r3, [r7, #22]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <rfalNfcDepRLS+0x50>
 800a9cc:	8afb      	ldrh	r3, [r7, #22]
 800a9ce:	e038      	b.n	800aa42 <rfalNfcDepRLS+0xc2>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 800a9d4:	7d7b      	ldrb	r3, [r7, #21]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	757a      	strb	r2, [r7, #21]
 800a9da:	f107 0218 	add.w	r2, r7, #24
 800a9de:	4413      	add	r3, r2
 800a9e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d801      	bhi.n	800a9ec <rfalNfcDepRLS+0x6c>
    {
        return ERR_PROTO;
 800a9e8:	230b      	movs	r3, #11
 800a9ea:	e02a      	b.n	800aa42 <rfalNfcDepRLS+0xc2>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800a9ec:	7d7b      	ldrb	r3, [r7, #21]
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	757a      	strb	r2, [r7, #21]
 800a9f2:	f107 0218 	add.w	r2, r7, #24
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a9fc:	2bd5      	cmp	r3, #213	; 0xd5
 800a9fe:	d001      	beq.n	800aa04 <rfalNfcDepRLS+0x84>
    {
        return ERR_PROTO;
 800aa00:	230b      	movs	r3, #11
 800aa02:	e01e      	b.n	800aa42 <rfalNfcDepRLS+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 800aa04:	7d7b      	ldrb	r3, [r7, #21]
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	757a      	strb	r2, [r7, #21]
 800aa0a:	f107 0218 	add.w	r2, r7, #24
 800aa0e:	4413      	add	r3, r2
 800aa10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800aa14:	2b0b      	cmp	r3, #11
 800aa16:	d001      	beq.n	800aa1c <rfalNfcDepRLS+0x9c>
    {
        return ERR_PROTO;
 800aa18:	230b      	movs	r3, #11
 800aa1a:	e012      	b.n	800aa42 <rfalNfcDepRLS+0xc2>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800aa1c:	4b0b      	ldr	r3, [pc, #44]	; (800aa4c <rfalNfcDepRLS+0xcc>)
 800aa1e:	78db      	ldrb	r3, [r3, #3]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00d      	beq.n	800aa40 <rfalNfcDepRLS+0xc0>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800aa24:	7d7b      	ldrb	r3, [r7, #21]
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	757a      	strb	r2, [r7, #21]
 800aa2a:	f107 0218 	add.w	r2, r7, #24
 800aa2e:	4413      	add	r3, r2
 800aa30:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800aa34:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <rfalNfcDepRLS+0xcc>)
 800aa36:	78db      	ldrb	r3, [r3, #3]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d001      	beq.n	800aa40 <rfalNfcDepRLS+0xc0>
        {
            return ERR_PROTO;
 800aa3c:	230b      	movs	r3, #11
 800aa3e:	e000      	b.n	800aa42 <rfalNfcDepRLS+0xc2>
        }
    }
    
    return ERR_NONE;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	2000132c 	.word	0x2000132c
 800aa50:	00200c01 	.word	0x00200c01
 800aa54:	01000c01 	.word	0x01000c01

0800aa58 <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	460b      	mov	r3, r1
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <rfalNfcDepInitiatorHandleActivation+0x1a>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 800aa72:	2307      	movs	r3, #7
 800aa74:	e0dd      	b.n	800ac32 <rfalNfcDepInitiatorHandleActivation+0x1da>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3341      	adds	r3, #65	; 0x41
 800aa86:	461a      	mov	r2, r3
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7ff fdb1 	bl	800a5f0 <rfalNfcDepATR>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 800aa92:	8a7b      	ldrh	r3, [r7, #18]
 800aa94:	2b15      	cmp	r3, #21
 800aa96:	d005      	beq.n	800aaa4 <rfalNfcDepInitiatorHandleActivation+0x4c>
 800aa98:	8a7b      	ldrh	r3, [r7, #18]
 800aa9a:	2b09      	cmp	r3, #9
 800aa9c:	d002      	beq.n	800aaa4 <rfalNfcDepInitiatorHandleActivation+0x4c>
 800aa9e:	8a7b      	ldrh	r3, [r7, #18]
 800aaa0:	2b1b      	cmp	r3, #27
 800aaa2:	d105      	bne.n	800aab0 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
 800aaa6:	1e5a      	subs	r2, r3, #1
 800aaa8:	75fa      	strb	r2, [r7, #23]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e8      	bne.n	800aa80 <rfalNfcDepInitiatorHandleActivation+0x28>
 800aaae:	e000      	b.n	800aab2 <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 800aab0:	bf00      	nop
    
    if( ret != ERR_NONE )
 800aab2:	8a7b      	ldrh	r3, [r7, #18]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 800aab8:	8a7b      	ldrh	r3, [r7, #18]
 800aaba:	e0ba      	b.n	800ac32 <rfalNfcDepInitiatorHandleActivation+0x1da>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac2:	3b11      	subs	r3, #17
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	7b1a      	ldrb	r2, [r3, #12]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	7c1b      	ldrb	r3, [r3, #16]
 800aae2:	091b      	lsrs	r3, r3, #4
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	f003 0303 	and.w	r3, r3, #3
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aaf8:	3301      	adds	r3, #1
 800aafa:	019b      	lsls	r3, r3, #6
 800aafc:	2bfd      	cmp	r3, #253	; 0xfd
 800aafe:	d807      	bhi.n	800ab10 <rfalNfcDepInitiatorHandleActivation+0xb8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab06:	3301      	adds	r3, #1
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	019b      	lsls	r3, r3, #6
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	e000      	b.n	800ab12 <rfalNfcDepInitiatorHandleActivation+0xba>
 800ab10:	22fe      	movs	r2, #254	; 0xfe
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	7bdb      	ldrb	r3, [r3, #15]
 800ab1c:	f003 030f 	and.w	r3, r3, #15
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f886 	bl	800ac40 <rfalNfcDepCalculateRWT>
 800ab34:	4602      	mov	r2, r0
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	220c      	movs	r2, #12
 800ab3e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	3355      	adds	r3, #85	; 0x55
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f002 fd11 	bl	800d574 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 800ab52:	2300      	movs	r3, #0
 800ab54:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ab6c:	f003 0307 	and.w	r3, r3, #7
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	4313      	orrs	r3, r2
 800ab74:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab7c:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( (nfcDepDev->info.DSI != desiredBR) && (desiredBR != RFAL_BR_KEEP) )    /* if desired BR is different    */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ab84:	7afa      	ldrb	r2, [r7, #11]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d01b      	beq.n	800abc2 <rfalNfcDepInitiatorHandleActivation+0x16a>
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	2bff      	cmp	r3, #255	; 0xff
 800ab8e:	d018      	beq.n	800abc2 <rfalNfcDepInitiatorHandleActivation+0x16a>
    {
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7b99      	ldrb	r1, [r3, #14]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7b5a      	ldrb	r2, [r3, #13]
 800ab98:	7afb      	ldrb	r3, [r7, #11]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe f82c 	bl	8008bf8 <nfcipDxIsSupported>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00d      	beq.n	800abc2 <rfalNfcDepInitiatorHandleActivation+0x16a>
        {
            sendPSL = true;
 800aba6:	2301      	movs	r3, #1
 800aba8:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 800abaa:	7afb      	ldrb	r3, [r7, #11]
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	7afb      	ldrb	r3, [r7, #11]
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	4313      	orrs	r3, r2
 800abc0:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 800abc2:	7d7b      	ldrb	r3, [r7, #21]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d033      	beq.n	800ac30 <rfalNfcDepInitiatorHandleActivation+0x1d8>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800abc8:	7c7a      	ldrb	r2, [r7, #17]
 800abca:	7dbb      	ldrb	r3, [r7, #22]
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fde8 	bl	800a7a4 <rfalNfcDepPSL>
 800abd4:	4603      	mov	r3, r0
 800abd6:	827b      	strh	r3, [r7, #18]
 800abd8:	8a7b      	ldrh	r3, [r7, #18]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <rfalNfcDepInitiatorHandleActivation+0x18a>
 800abde:	8a7b      	ldrh	r3, [r7, #18]
 800abe0:	e027      	b.n	800ac32 <rfalNfcDepInitiatorHandleActivation+0x1da>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800abe8:	7afa      	ldrb	r2, [r7, #11]
 800abea:	429a      	cmp	r2, r3
 800abec:	d01e      	beq.n	800ac2c <rfalNfcDepInitiatorHandleActivation+0x1d4>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d107      	bne.n	800ac08 <rfalNfcDepInitiatorHandleActivation+0x1b0>
 800abf8:	4b10      	ldr	r3, [pc, #64]	; (800ac3c <rfalNfcDepInitiatorHandleActivation+0x1e4>)
 800abfa:	785b      	ldrb	r3, [r3, #1]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d103      	bne.n	800ac08 <rfalNfcDepInitiatorHandleActivation+0x1b0>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 800ac00:	7afb      	ldrb	r3, [r7, #11]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f001 fcca 	bl	800c59c <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	7afa      	ldrb	r2, [r7, #11]
 800ac0c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	7afa      	ldrb	r2, [r7, #11]
 800ac14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ac24:	4619      	mov	r1, r3
 800ac26:	4610      	mov	r0, r2
 800ac28:	f002 f9c8 	bl	800cfbc <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	e000      	b.n	800ac32 <rfalNfcDepInitiatorHandleActivation+0x1da>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	2000132c 	.word	0x2000132c

0800ac40 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	2b0e      	cmp	r3, #14
 800ac4e:	bf28      	it	cs
 800ac50:	230e      	movcs	r3, #14
 800ac52:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	330c      	adds	r3, #12
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	fa02 f303 	lsl.w	r3, r2, r3
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bc80      	pop	{r7}
 800ac6a:	4770      	bx	lr

0800ac6c <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 800ac6c:	b590      	push	{r4, r7, lr}
 800ac6e:	b089      	sub	sp, #36	; 0x24
 800ac70:	af04      	add	r7, sp, #16
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	460b      	mov	r3, r1
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 800ac7a:	4b0b      	ldr	r3, [pc, #44]	; (800aca8 <nfcipDataTx+0x3c>)
 800ac7c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <nfcipDataTx+0x3c>)
 800ac80:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 800ac84:	4b08      	ldr	r3, [pc, #32]	; (800aca8 <nfcipDataTx+0x3c>)
 800ac86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac88:	8979      	ldrh	r1, [r7, #10]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	9202      	str	r2, [sp, #8]
 800ac8e:	2204      	movs	r2, #4
 800ac90:	9201      	str	r2, [sp, #4]
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	4623      	mov	r3, r4
 800ac96:	4602      	mov	r2, r0
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f002 ff03 	bl	800daa4 <rfalTransceiveBlockingTx>
 800ac9e:	4603      	mov	r3, r0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd90      	pop	{r4, r7, pc}
 800aca8:	2000132c 	.word	0x2000132c

0800acac <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d004      	beq.n	800acc6 <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 800acbc:	f002 ff3e 	bl	800db3c <rfalTransceiveBlockingRx>
 800acc0:	4603      	mov	r3, r0
 800acc2:	81fb      	strh	r3, [r7, #14]
 800acc4:	e003      	b.n	800acce <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 800acc6:	f002 ffb5 	bl	800dc34 <rfalGetTransceiveStatus>
 800acca:	4603      	mov	r3, r0
 800accc:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 800acce:	89fb      	ldrh	r3, [r7, #14]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d028      	beq.n	800ad26 <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 800acd4:	4b16      	ldr	r3, [pc, #88]	; (800ad30 <nfcipDataRx+0x84>)
 800acd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d024      	beq.n	800ad26 <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 800acdc:	4b14      	ldr	r3, [pc, #80]	; (800ad30 <nfcipDataRx+0x84>)
 800acde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	3307      	adds	r3, #7
 800ace4:	08da      	lsrs	r2, r3, #3
 800ace6:	4b12      	ldr	r3, [pc, #72]	; (800ad30 <nfcipDataRx+0x84>)
 800ace8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acea:	b292      	uxth	r2, r2
 800acec:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800acee:	89fb      	ldrh	r3, [r7, #14]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d118      	bne.n	800ad26 <nfcipDataRx+0x7a>
 800acf4:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <nfcipDataRx+0x84>)
 800acf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d014      	beq.n	800ad26 <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 800acfc:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <nfcipDataRx+0x84>)
 800acfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad00:	881a      	ldrh	r2, [r3, #0]
 800ad02:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <nfcipDataRx+0x84>)
 800ad04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d109      	bne.n	800ad22 <nfcipDataRx+0x76>
 800ad0e:	4b08      	ldr	r3, [pc, #32]	; (800ad30 <nfcipDataRx+0x84>)
 800ad10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d904      	bls.n	800ad22 <nfcipDataRx+0x76>
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <nfcipDataRx+0x84>)
 800ad1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	2bff      	cmp	r3, #255	; 0xff
 800ad20:	d901      	bls.n	800ad26 <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 800ad22:	2309      	movs	r3, #9
 800ad24:	e000      	b.n	800ad28 <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 800ad26:	89fb      	ldrh	r3, [r7, #14]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	2000132c 	.word	0x2000132c

0800ad34 <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 800ad34:	b082      	sub	sp, #8
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b09c      	sub	sp, #112	; 0x70
 800ad3a:	af02      	add	r7, sp, #8
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	677b      	str	r3, [r7, #116]	; 0x74
 800ad42:	4613      	mov	r3, r2
 800ad44:	80fb      	strh	r3, [r7, #6]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d005      	beq.n	800ad58 <rfalNfcDepListenStartActivation+0x24>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <rfalNfcDepListenStartActivation+0x24>
 800ad52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d101      	bne.n	800ad5c <rfalNfcDepListenStartActivation+0x28>
    {
        return ERR_PARAM;
 800ad58:	2307      	movs	r3, #7
 800ad5a:	e0f4      	b.n	800af46 <rfalNfcDepListenStartActivation+0x212>
    }
    
    
    /*******************************************************************************/
    /*  Check whether is a valid ATR_REQ Compute NFC-DEP device                    */
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 800ad5c:	88fb      	ldrh	r3, [r7, #6]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	4619      	mov	r1, r3
 800ad62:	68b8      	ldr	r0, [r7, #8]
 800ad64:	f7ff fb0c 	bl	800a380 <rfalNfcDepIsAtrReq>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f083 0301 	eor.w	r3, r3, #1
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <rfalNfcDepListenStartActivation+0x44>
    {
        return ERR_PARAM;
 800ad74:	2307      	movs	r3, #7
 800ad76:	e0e6      	b.n	800af46 <rfalNfcDepListenStartActivation+0x212>
    }
    
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 800ad78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad7c:	88fa      	ldrh	r2, [r7, #6]
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d007      	beq.n	800ad9a <rfalNfcDepListenStartActivation+0x66>
    {
        ST_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 800ad8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad8e:	4618      	mov	r0, r3
 800ad90:	88fb      	ldrh	r3, [r7, #6]
 800ad92:	461a      	mov	r2, r3
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	f007 f9c1 	bl	801211c <memcpy>
    }        
    
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ada2:	3a10      	subs	r2, #16
 800ada4:	b2d2      	uxtb	r2, r2
 800ada6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800adaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800adae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adb2:	7b12      	ldrb	r2, [r2, #12]
 800adb4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800adb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 800adc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adc6:	7bdb      	ldrb	r3, [r3, #15]
 800adc8:	091b      	lsrs	r3, r3, #4
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800add0:	f002 0203 	and.w	r2, r2, #3
 800add4:	b2d2      	uxtb	r2, r2
 800add6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 800adda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ade2:	3301      	adds	r3, #1
 800ade4:	019b      	lsls	r3, r3, #6
 800ade6:	2bfd      	cmp	r3, #253	; 0xfd
 800ade8:	d808      	bhi.n	800adfc <rfalNfcDepListenStartActivation+0xc8>
 800adea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800adf2:	3301      	adds	r3, #1
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	019b      	lsls	r3, r3, #6
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	e000      	b.n	800adfe <rfalNfcDepListenStartActivation+0xca>
 800adfc:	22fe      	movs	r2, #254	; 0xfe
 800adfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    rxParam.nfcDepDev->info.WT    = 0;
 800ae06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 800ae10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae14:	f04f 32ff 	mov.w	r2, #4294967295
 800ae18:	649a      	str	r2, [r3, #72]	; 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 800ae1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae22:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 800ae24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae28:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ae2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae30:	3355      	adds	r3, #85	; 0x55
 800ae32:	4619      	mov	r1, r3
 800ae34:	4610      	mov	r0, r2
 800ae36:	f002 fb9d 	bl	800d574 <rfalGetBitRate>
    
    
    /* Store Device Info location, updated upon a PSL  */
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 800ae3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae3e:	4a45      	ldr	r2, [pc, #276]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800ae40:	6793      	str	r3, [r2, #120]	; 0x78
    
    
    /*******************************************************************************/
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800ae42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae46:	7b1b      	ldrb	r3, [r3, #12]
 800ae48:	75fb      	strb	r3, [r7, #23]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	763b      	strb	r3, [r7, #24]
    
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 800ae4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae52:	65fb      	str	r3, [r7, #92]	; 0x5c
    cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 800ae54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae58:	663b      	str	r3, [r7, #96]	; 0x60

    cfg.br = param->brt;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	7b1b      	ldrb	r3, [r3, #12]
 800ae5e:	76bb      	strb	r3, [r7, #26]
    cfg.bs = param->bst;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	7adb      	ldrb	r3, [r3, #11]
 800ae64:	767b      	strb	r3, [r7, #25]
    
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	7b9b      	ldrb	r3, [r3, #14]
 800ae6a:	091b      	lsrs	r3, r3, #4
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    cfg.gbLen = param->GBtLen;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae7e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 800ae82:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00b      	beq.n	800aea2 <rfalNfcDepListenStartActivation+0x16e>
    {
        ST_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f103 010f 	add.w	r1, r3, #15
 800ae90:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800ae94:	461a      	mov	r2, r3
 800ae96:	f107 0314 	add.w	r3, r7, #20
 800ae9a:	3312      	adds	r3, #18
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f007 f93d 	bl	801211c <memcpy>
    }
    
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800aea2:	230a      	movs	r3, #10
 800aea4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ST_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	1c5a      	adds	r2, r3, #1
 800aeac:	f107 031b 	add.w	r3, r7, #27
 800aeb0:	6810      	ldr	r0, [r2, #0]
 800aeb2:	6851      	ldr	r1, [r2, #4]
 800aeb4:	6018      	str	r0, [r3, #0]
 800aeb6:	6059      	str	r1, [r3, #4]
 800aeb8:	8912      	ldrh	r2, [r2, #8]
 800aeba:	811a      	strh	r2, [r3, #8]

    cfg.to = param->to;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	7b5b      	ldrb	r3, [r3, #13]
 800aec0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 800aec4:	2301      	movs	r3, #1
 800aec6:	753b      	strb	r3, [r7, #20]
    cfg.oper     = param->operParam;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aece:	75bb      	strb	r3, [r7, #22]
    cfg.commMode = param->commMode;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	757b      	strb	r3, [r7, #21]

    rfalNfcDepInitialize();
 800aed6:	f7ff f981 	bl	800a1dc <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 800aeda:	f107 0314 	add.w	r3, r7, #20
 800aede:	4618      	mov	r0, r3
 800aee0:	f7ff f80a 	bl	8009ef8 <nfcipConfig>
        
    
    /*******************************************************************************/
    /*  Reply with ATR RES to Initiator                                            */
    /*******************************************************************************/
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 800aee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aee6:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800aee8:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 800aeea:	4b1a      	ldr	r3, [pc, #104]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800aeec:	f240 1203 	movw	r2, #259	; 0x103
 800aef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 800aef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aef6:	4a17      	ldr	r2, [pc, #92]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800aef8:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800aefa:	4b16      	ldr	r3, [pc, #88]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800aefc:	2205      	movs	r2, #5
 800aefe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    gNfcip.isChaining   = rxParam.isRxChaining;
 800af02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af04:	4a13      	ldr	r2, [pc, #76]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800af06:	6753      	str	r3, [r2, #116]	; 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800af08:	4b12      	ldr	r3, [pc, #72]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800af0a:	2205      	movs	r2, #5
 800af0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   
    EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800af10:	4b10      	ldr	r3, [pc, #64]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800af12:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800af14:	f04f 33ff 	mov.w	r3, #4294967295
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	2300      	movs	r3, #0
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	2300      	movs	r3, #0
 800af20:	2200      	movs	r2, #0
 800af22:	2001      	movs	r0, #1
 800af24:	f7fe fe5c 	bl	8009be0 <nfcipTx>
 800af28:	4603      	mov	r3, r0
 800af2a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800af2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800af32:	2b00      	cmp	r3, #0
 800af34:	d002      	beq.n	800af3c <rfalNfcDepListenStartActivation+0x208>
 800af36:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800af3a:	e004      	b.n	800af46 <rfalNfcDepListenStartActivation+0x212>
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 800af3c:	4b05      	ldr	r3, [pc, #20]	; (800af54 <rfalNfcDepListenStartActivation+0x220>)
 800af3e:	220b      	movs	r2, #11
 800af40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return ERR_NONE;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3768      	adds	r7, #104	; 0x68
 800af4a:	46bd      	mov	sp, r7
 800af4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af50:	b002      	add	sp, #8
 800af52:	4770      	bx	lr
 800af54:	2000132c 	.word	0x2000132c

0800af58 <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af04      	add	r7, sp, #16
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
 800af5e:	23c0      	movs	r3, #192	; 0xc0
 800af60:	717b      	strb	r3, [r7, #5]
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 800af62:	4b2f      	ldr	r3, [pc, #188]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800af64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af66:	1d7a      	adds	r2, r7, #5
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fa3e 	bl	800a3ec <nfcipTargetHandleActivation>
 800af70:	4603      	mov	r3, r0
 800af72:	80fb      	strh	r3, [r7, #6]
    
    switch (err)
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d002      	beq.n	800af80 <rfalNfcDepListenGetActivationStatus+0x28>
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d048      	beq.n	800b010 <rfalNfcDepListenGetActivationStatus+0xb8>
 800af7e:	e034      	b.n	800afea <rfalNfcDepListenGetActivationStatus+0x92>
    {
        case ERR_NONE:
            
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 800af80:	797b      	ldrb	r3, [r7, #5]
 800af82:	2bc0      	cmp	r3, #192	; 0xc0
 800af84:	d046      	beq.n	800b014 <rfalNfcDepListenGetActivationStatus+0xbc>
            {
                /* DSI codes the bit rate from Initiator to Target */
                /* DRI codes the bit rate from Target to Initiator */
                
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 800af86:	4b26      	ldr	r3, [pc, #152]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800af88:	785b      	ldrb	r3, [r3, #1]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d112      	bne.n	800afb4 <rfalNfcDepListenGetActivationStatus+0x5c>
                {
                    EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800af8e:	4b24      	ldr	r3, [pc, #144]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800af90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af92:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 800af96:	4b22      	ldr	r3, [pc, #136]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800af98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af9a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800af9e:	461a      	mov	r2, r3
 800afa0:	200d      	movs	r0, #13
 800afa2:	f001 fec9 	bl	800cd38 <rfalSetMode>
 800afa6:	4603      	mov	r3, r0
 800afa8:	80fb      	strh	r3, [r7, #6]
 800afaa:	88fb      	ldrh	r3, [r7, #6]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d031      	beq.n	800b014 <rfalNfcDepListenGetActivationStatus+0xbc>
 800afb0:	88fb      	ldrh	r3, [r7, #6]
 800afb2:	e031      	b.n	800b018 <rfalNfcDepListenGetActivationStatus+0xc0>
                }
                else
                {
                    EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800afb4:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800afb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afb8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <rfalNfcDepListenGetActivationStatus+0x6c>
 800afc0:	200a      	movs	r0, #10
 800afc2:	e000      	b.n	800afc6 <rfalNfcDepListenGetActivationStatus+0x6e>
 800afc4:	200c      	movs	r0, #12
 800afc6:	4b16      	ldr	r3, [pc, #88]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800afc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afca:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 800afce:	4b14      	ldr	r3, [pc, #80]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800afd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afd2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800afd6:	461a      	mov	r2, r3
 800afd8:	f001 feae 	bl	800cd38 <rfalSetMode>
 800afdc:	4603      	mov	r3, r0
 800afde:	80fb      	strh	r3, [r7, #6]
 800afe0:	88fb      	ldrh	r3, [r7, #6]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d016      	beq.n	800b014 <rfalNfcDepListenGetActivationStatus+0xbc>
 800afe6:	88fb      	ldrh	r3, [r7, #6]
 800afe8:	e016      	b.n	800b018 <rfalNfcDepListenGetActivationStatus+0xc0>
            break;
            
        case ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800afea:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800afec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800afee:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800aff0:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
 800aff4:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <rfalNfcDepListenGetActivationStatus+0xc8>)
 800aff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff8:	f04f 30ff 	mov.w	r0, #4294967295
 800affc:	9002      	str	r0, [sp, #8]
 800affe:	2004      	movs	r0, #4
 800b000:	9001      	str	r0, [sp, #4]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	460b      	mov	r3, r1
 800b006:	2100      	movs	r1, #0
 800b008:	2000      	movs	r0, #0
 800b00a:	f002 fd4b 	bl	800daa4 <rfalTransceiveBlockingTx>
            break;
 800b00e:	e002      	b.n	800b016 <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 800b010:	bf00      	nop
 800b012:	e000      	b.n	800b016 <rfalNfcDepListenGetActivationStatus+0xbe>
            break;
 800b014:	bf00      	nop
    }
    
    return err;
 800b016:	88fb      	ldrh	r3, [r7, #6]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	2000132c 	.word	0x2000132c

0800b024 <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( const rfalNfcDepTxRxParam *param )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08a      	sub	sp, #40	; 0x28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
    rfalNfcDepDEPParams nfcDepParams;
    
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	60fb      	str	r3, [r7, #12]
    nfcDepParams.txBufLen     = param->txBufLen;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	889b      	ldrh	r3, [r3, #4]
 800b036:	823b      	strh	r3, [r7, #16]
    nfcDepParams.txChaining   = param->isTxChaining;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	799b      	ldrb	r3, [r3, #6]
 800b03c:	74fb      	strb	r3, [r7, #19]
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
 800b03e:	2305      	movs	r3, #5
 800b040:	74bb      	strb	r3, [r7, #18]
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
 800b042:	23ff      	movs	r3, #255	; 0xff
 800b044:	723b      	strb	r3, [r7, #8]
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800b046:	2305      	movs	r3, #5
 800b048:	76bb      	strb	r3, [r7, #26]
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	617b      	str	r3, [r7, #20]
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 800b050:	f240 1303 	movw	r3, #259	; 0x103
 800b054:	833b      	strh	r3, [r7, #24]
    nfcDepParams.fsc          = param->FSx;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	8b9b      	ldrh	r3, [r3, #28]
 800b05a:	84bb      	strh	r3, [r7, #36]	; 0x24
    nfcDepParams.fwt          = param->FWT;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	61fb      	str	r3, [r7, #28]
    nfcDepParams.dFwt         = param->dFWT;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	623b      	str	r3, [r7, #32]

    gNfcip.rxRcvdLen          = param->rxLen;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	4a07      	ldr	r2, [pc, #28]	; (800b08c <rfalNfcDepStartTransceive+0x68>)
 800b06e:	66d3      	str	r3, [r2, #108]	; 0x6c
    gNfcip.isChaining         = param->isRxChaining;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	4a05      	ldr	r2, [pc, #20]	; (800b08c <rfalNfcDepStartTransceive+0x68>)
 800b076:	6753      	str	r3, [r2, #116]	; 0x74

    nfcipSetDEPParams(&nfcDepParams);
 800b078:	f107 0308 	add.w	r3, r7, #8
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff f917 	bl	800a2b0 <nfcipSetDEPParams>
    
    return ERR_NONE;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3728      	adds	r7, #40	; 0x28
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	2000132c 	.word	0x2000132c

0800b090 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800b094:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <rfalNfcDepGetTransceiveStatus+0x1c>)
 800b096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b098:	4a04      	ldr	r2, [pc, #16]	; (800b0ac <rfalNfcDepGetTransceiveStatus+0x1c>)
 800b09a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe ff6c 	bl	8009f7c <nfcipRun>
 800b0a4:	4603      	mov	r3, r0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	2000132c 	.word	0x2000132c

0800b0b0 <rfalNfcDepPdu2BLockParam>:



 /*******************************************************************************/
 static void rfalNfcDepPdu2BLockParam( rfalNfcDepPduTxRxParam pduParam, rfalNfcDepTxRxParam *blockParam, uint16_t txPos, uint16_t rxPos )
{
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	f107 0c10 	add.w	ip, r7, #16
 800b0bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint16_t maxInfLen;
    
    NO_WARNING(rxPos); /* Keep this param for future use */

    blockParam->DID    = pduParam.DID;
 800b0c0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	779a      	strb	r2, [r3, #30]
    blockParam->FSx    = pduParam.FSx;
 800b0c8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	839a      	strh	r2, [r3, #28]
    blockParam->FWT    = pduParam.FWT;
 800b0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	615a      	str	r2, [r3, #20]
    blockParam->dFWT   = pduParam.dFWT;
 800b0d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	619a      	str	r2, [r3, #24]

    /* Calculate max INF/Payload to be sent to other device */
    maxInfLen  = (blockParam->FSx - (RFAL_NFCDEP_HEADER + RFAL_NFCDEP_DEP_PFB_LEN));
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	8b9b      	ldrh	r3, [r3, #28]
 800b0de:	3b03      	subs	r3, #3
 800b0e0:	80fb      	strh	r3, [r7, #6]
    maxInfLen += ((blockParam->DID != RFAL_NFCDEP_DID_NO) ? RFAL_NFCDEP_DID_LEN : 0U);
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	7f9b      	ldrb	r3, [r3, #30]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <rfalNfcDepPdu2BLockParam+0x3e>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	e000      	b.n	800b0f0 <rfalNfcDepPdu2BLockParam+0x40>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	88fb      	ldrh	r3, [r7, #6]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	80fb      	strh	r3, [r7, #6]


    if( (pduParam.txBufLen - txPos) > maxInfLen )
 800b0f6:	8abb      	ldrh	r3, [r7, #20]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0fc:	1ad2      	subs	r2, r2, r3
 800b0fe:	88fb      	ldrh	r3, [r7, #6]
 800b100:	429a      	cmp	r2, r3
 800b102:	dd06      	ble.n	800b112 <rfalNfcDepPdu2BLockParam+0x62>
    {
        blockParam->isTxChaining = true;
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	2201      	movs	r2, #1
 800b108:	719a      	strb	r2, [r3, #6]
        blockParam->txBufLen     = maxInfLen;
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	88fa      	ldrh	r2, [r7, #6]
 800b10e:	809a      	strh	r2, [r3, #4]
 800b110:	e008      	b.n	800b124 <rfalNfcDepPdu2BLockParam+0x74>
    }
    else
    {
        blockParam->isTxChaining = false;
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	2200      	movs	r2, #0
 800b116:	719a      	strb	r2, [r3, #6]
        blockParam->txBufLen     = (pduParam.txBufLen - txPos);
 800b118:	8aba      	ldrh	r2, [r7, #20]
 800b11a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	b29a      	uxth	r2, r3
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	809a      	strh	r2, [r3, #4]
    }

    /* TxBuf is moved to the beginning for every Block */
    blockParam->txBuf        = (rfalNfcDepBufFormat*)pduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b128:	601a      	str	r2, [r3, #0]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 800b12a:	6a3a      	ldr	r2, [r7, #32]
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	609a      	str	r2, [r3, #8]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	4a05      	ldr	r2, [pc, #20]	; (800b148 <rfalNfcDepPdu2BLockParam+0x98>)
 800b134:	611a      	str	r2, [r3, #16]
    blockParam->rxLen        = pduParam.rxLen;
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13a:	60da      	str	r2, [r3, #12]
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	bc80      	pop	{r7}
 800b144:	b004      	add	sp, #16
 800b146:	4770      	bx	lr
 800b148:	200013d8 	.word	0x200013d8

0800b14c <rfalNfcDepStartPduTransceive>:
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepStartPduTransceive( rfalNfcDepPduTxRxParam param )
{
 800b14c:	b084      	sub	sp, #16
 800b14e:	b5b0      	push	{r4, r5, r7, lr}
 800b150:	b090      	sub	sp, #64	; 0x40
 800b152:	af08      	add	r7, sp, #32
 800b154:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800b158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rfalNfcDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gNfcip.PDUParam = param;
 800b15c:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <rfalNfcDepStartPduTransceive+0x7c>)
 800b15e:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800b162:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800b166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b16a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b16e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    gNfcip.PDUTxPos = 0;
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <rfalNfcDepStartPduTransceive+0x7c>)
 800b174:	2200      	movs	r2, #0
 800b176:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
    gNfcip.PDURxPos = 0;
 800b17a:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <rfalNfcDepStartPduTransceive+0x7c>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    
    /* Convert PDU TxRxParams to Block TxRxParams */
    rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 800b182:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <rfalNfcDepStartPduTransceive+0x7c>)
 800b184:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800b188:	4a0f      	ldr	r2, [pc, #60]	; (800b1c8 <rfalNfcDepStartPduTransceive+0x7c>)
 800b18a:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 800b18e:	4d0e      	ldr	r5, [pc, #56]	; (800b1c8 <rfalNfcDepStartPduTransceive+0x7c>)
 800b190:	9206      	str	r2, [sp, #24]
 800b192:	9305      	str	r3, [sp, #20]
 800b194:	463b      	mov	r3, r7
 800b196:	9304      	str	r3, [sp, #16]
 800b198:	466c      	mov	r4, sp
 800b19a:	f105 0398 	add.w	r3, r5, #152	; 0x98
 800b19e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b1a4:	f105 0388 	add.w	r3, r5, #136	; 0x88
 800b1a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1aa:	f7ff ff81 	bl	800b0b0 <rfalNfcDepPdu2BLockParam>
    
    return rfalNfcDepStartTransceive( &txRxParam );
 800b1ae:	463b      	mov	r3, r7
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7ff ff37 	bl	800b024 <rfalNfcDepStartTransceive>
 800b1b6:	4603      	mov	r3, r0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3720      	adds	r7, #32
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b1c2:	b004      	add	sp, #16
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	2000132c 	.word	0x2000132c

0800b1cc <rfalNfcDepGetPduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepGetPduTransceiveStatus( void )
{
 800b1cc:	b5b0      	push	{r4, r5, r7, lr}
 800b1ce:	b092      	sub	sp, #72	; 0x48
 800b1d0:	af08      	add	r7, sp, #32
    ReturnCode          ret;
    rfalNfcDepTxRxParam txRxParam;
    
    ret = rfalNfcDepGetTransceiveStatus();
 800b1d2:	f7ff ff5d 	bl	800b090 <rfalNfcDepGetTransceiveStatus>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    switch( ret )
 800b1da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d004      	beq.n	800b1ea <rfalNfcDepGetPduTransceiveStatus+0x1e>
 800b1e0:	2b0d      	cmp	r3, #13
 800b1e2:	d048      	beq.n	800b276 <rfalNfcDepGetPduTransceiveStatus+0xaa>
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
        
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800b1e4:	bf00      	nop
    }
    
    return ret;
 800b1e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1e8:	e091      	b.n	800b30e <rfalNfcDepGetPduTransceiveStatus+0x142>
            if( gNfcip.isTxChaining )
 800b1ea:	4b4b      	ldr	r3, [pc, #300]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b1ec:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d040      	beq.n	800b276 <rfalNfcDepGetPduTransceiveStatus+0xaa>
                gNfcip.PDUTxPos += gNfcip.txBufLen;
 800b1f4:	4b48      	ldr	r3, [pc, #288]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b1f6:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 800b1fa:	4b47      	ldr	r3, [pc, #284]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b1fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b200:	4413      	add	r3, r2
 800b202:	b29a      	uxth	r2, r3
 800b204:	4b44      	ldr	r3, [pc, #272]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b206:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
                rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 800b20a:	4b43      	ldr	r3, [pc, #268]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b20c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800b210:	4a41      	ldr	r2, [pc, #260]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b212:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 800b216:	4d40      	ldr	r5, [pc, #256]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b218:	9206      	str	r2, [sp, #24]
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	1d3b      	adds	r3, r7, #4
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	466c      	mov	r4, sp
 800b222:	f105 0398 	add.w	r3, r5, #152	; 0x98
 800b226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b22c:	f105 0388 	add.w	r3, r5, #136	; 0x88
 800b230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b232:	f7ff ff3d 	bl	800b0b0 <rfalNfcDepPdu2BLockParam>
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 800b236:	893b      	ldrh	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00f      	beq.n	800b25c <rfalNfcDepGetPduTransceiveStatus+0x90>
                    ST_MEMCPY( gNfcip.PDUParam.txBuf->pdu, &gNfcip.PDUParam.txBuf->pdu[gNfcip.PDUTxPos], txRxParam.txBufLen );
 800b23c:	4b36      	ldr	r3, [pc, #216]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b242:	1d58      	adds	r0, r3, #5
 800b244:	4b34      	ldr	r3, [pc, #208]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24a:	4a33      	ldr	r2, [pc, #204]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b24c:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 800b250:	4413      	add	r3, r2
 800b252:	3305      	adds	r3, #5
 800b254:	893a      	ldrh	r2, [r7, #8]
 800b256:	4619      	mov	r1, r3
 800b258:	f006 ff60 	bl	801211c <memcpy>
                EXIT_ON_ERR( ret, rfalNfcDepStartTransceive( &txRxParam ) );
 800b25c:	1d3b      	adds	r3, r7, #4
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff fee0 	bl	800b024 <rfalNfcDepStartTransceive>
 800b264:	4603      	mov	r3, r0
 800b266:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b268:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <rfalNfcDepGetPduTransceiveStatus+0xa6>
 800b26e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b270:	e04d      	b.n	800b30e <rfalNfcDepGetPduTransceiveStatus+0x142>
                return ERR_BUSY;
 800b272:	2302      	movs	r3, #2
 800b274:	e04b      	b.n	800b30e <rfalNfcDepGetPduTransceiveStatus+0x142>
            if( gNfcip.PDUParam.rxLen == NULL )
 800b276:	4b28      	ldr	r3, [pc, #160]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d106      	bne.n	800b28e <rfalNfcDepGetPduTransceiveStatus+0xc2>
                if( ret == ERR_AGAIN  )
 800b280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b282:	2b0d      	cmp	r3, #13
 800b284:	d101      	bne.n	800b28a <rfalNfcDepGetPduTransceiveStatus+0xbe>
                    return ERR_NOTSUPP;
 800b286:	2318      	movs	r3, #24
 800b288:	e041      	b.n	800b30e <rfalNfcDepGetPduTransceiveStatus+0x142>
                return ERR_NONE;
 800b28a:	2300      	movs	r3, #0
 800b28c:	e03f      	b.n	800b30e <rfalNfcDepGetPduTransceiveStatus+0x142>
            if( (*gNfcip.PDUParam.rxLen) > 0U )    /* MISRA 21.18 */
 800b28e:	4b22      	ldr	r3, [pc, #136]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d02c      	beq.n	800b2f4 <rfalNfcDepGetPduTransceiveStatus+0x128>
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800b29a:	4b1f      	ldr	r3, [pc, #124]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b29c:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800b2a0:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b0:	d901      	bls.n	800b2b6 <rfalNfcDepGetPduTransceiveStatus+0xea>
                    return ERR_NOMEM;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e02b      	b.n	800b30e <rfalNfcDepGetPduTransceiveStatus+0x142>
                ST_MEMCPY( &gNfcip.PDUParam.rxBuf->pdu[gNfcip.PDURxPos], gNfcip.PDUParam.tmpBuf->inf, *gNfcip.PDUParam.rxLen );
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2bc:	4a16      	ldr	r2, [pc, #88]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2be:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 800b2c2:	4413      	add	r3, r2
 800b2c4:	1d58      	adds	r0, r3, #5
 800b2c6:	4b14      	ldr	r3, [pc, #80]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2cc:	1d59      	adds	r1, r3, #5
 800b2ce:	4b12      	ldr	r3, [pc, #72]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	f006 ff20 	bl	801211c <memcpy>
                gNfcip.PDURxPos += *gNfcip.PDUParam.rxLen;
 800b2dc:	4b0e      	ldr	r3, [pc, #56]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2de:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800b2e2:	4b0d      	ldr	r3, [pc, #52]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2f0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
            *gNfcip.PDUParam.rxLen = gNfcip.PDURxPos;
 800b2f4:	4b08      	ldr	r3, [pc, #32]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2fa:	4a07      	ldr	r2, [pc, #28]	; (800b318 <rfalNfcDepGetPduTransceiveStatus+0x14c>)
 800b2fc:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 800b300:	801a      	strh	r2, [r3, #0]
            return ((ret == ERR_AGAIN) ? ERR_BUSY : ERR_NONE);
 800b302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b304:	2b0d      	cmp	r3, #13
 800b306:	d101      	bne.n	800b30c <rfalNfcDepGetPduTransceiveStatus+0x140>
 800b308:	2302      	movs	r3, #2
 800b30a:	e000      	b.n	800b30e <rfalNfcDepGetPduTransceiveStatus+0x142>
 800b30c:	2300      	movs	r3, #0
 }
 800b30e:	4618      	mov	r0, r3
 800b310:	3728      	adds	r7, #40	; 0x28
 800b312:	46bd      	mov	sp, r7
 800b314:	bdb0      	pop	{r4, r5, r7, pc}
 800b316:	bf00      	nop
 800b318:	2000132c 	.word	0x2000132c

0800b31c <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	460b      	mov	r3, r1
 800b326:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 800b32c:	2300      	movs	r3, #0
 800b32e:	73fb      	strb	r3, [r7, #15]
 800b330:	e009      	b.n	800b346 <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	4413      	add	r3, r2
 800b338:	781a      	ldrb	r2, [r3, #0]
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	4053      	eors	r3, r2
 800b33e:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	3301      	adds	r3, #1
 800b344:	73fb      	strb	r3, [r7, #15]
 800b346:	7bfa      	ldrb	r2, [r7, #15]
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d3f1      	bcc.n	800b332 <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr
	...

0800b35c <rfalNfcaPollerStartSingleCollisionResolution>:

/*******************************************************************************/
static ReturnCode rfalNfcaPollerStartSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d008      	beq.n	800b384 <rfalNfcaPollerStartSingleCollisionResolution+0x28>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <rfalNfcaPollerStartSingleCollisionResolution+0x28>
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <rfalNfcaPollerStartSingleCollisionResolution+0x28>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <rfalNfcaPollerStartSingleCollisionResolution+0x2c>
    {
        return ERR_PARAM;
 800b384:	2307      	movs	r3, #7
 800b386:	e031      	b.n	800b3ec <rfalNfcaPollerStartSingleCollisionResolution+0x90>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2200      	movs	r2, #0
 800b38c:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	2200      	movs	r2, #0
 800b392:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800b394:	220a      	movs	r2, #10
 800b396:	2100      	movs	r1, #0
 800b398:	6838      	ldr	r0, [r7, #0]
 800b39a:	f006 fee7 	bl	801216c <memset>
    
    
    /* Save parameters */
    gNfca.CR.devLimit    = devLimit;
 800b39e:	4a15      	ldr	r2, [pc, #84]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	7013      	strb	r3, [r2, #0]
    gNfca.CR.collPend    = collPending;
 800b3a4:	4a13      	ldr	r2, [pc, #76]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	6113      	str	r3, [r2, #16]
    gNfca.CR.selRes      = selRes;
 800b3aa:	4a12      	ldr	r2, [pc, #72]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	61d3      	str	r3, [r2, #28]
    gNfca.CR.nfcId1      = nfcId1;
 800b3b0:	4a10      	ldr	r2, [pc, #64]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	6213      	str	r3, [r2, #32]
    gNfca.CR.nfcId1Len   = nfcId1Len;
 800b3b6:	4a0f      	ldr	r2, [pc, #60]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	6253      	str	r3, [r2, #36]	; 0x24

    platformTimerDestroy( gNfca.CR.tmrFDT );
    gNfca.CR.tmrFDT      = 0U;
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	631a      	str	r2, [r3, #48]	; 0x30
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    gNfca.CR.cascadeLv   = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1;
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    gNfca.CR.state       = RFAL_NFCA_CR_CL;
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   
    gNfca.CR.doBacktrack  = false;
 800b3da:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    gNfca.CR.backtrackCnt = 3U;
 800b3e2:	4b04      	ldr	r3, [pc, #16]	; (800b3f4 <rfalNfcaPollerStartSingleCollisionResolution+0x98>)
 800b3e4:	2203      	movs	r2, #3
 800b3e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    return ERR_NONE;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	200013dc 	.word	0x200013dc

0800b3f8 <rfalNfcaPollerGetSingleCollisionResolutionStatus>:


/*******************************************************************************/
static ReturnCode rfalNfcaPollerGetSingleCollisionResolutionStatus( void )
{
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    collBit = 1U;  /* standards mandate or recommend collision bit to be set to One. */
 800b3fe:	2301      	movs	r3, #1
 800b400:	717b      	strb	r3, [r7, #5]
    
    
    /* Check if FDT timer is still running */
    if( !platformTimerIsExpired( gNfca.CR.tmrFDT ) && (gNfca.CR.tmrFDT != 0U) )
 800b402:	4baf      	ldr	r3, [pc, #700]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b406:	4618      	mov	r0, r3
 800b408:	f006 fe3a 	bl	8012080 <timerIsExpired>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f083 0301 	eor.w	r3, r3, #1
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d005      	beq.n	800b424 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c>
 800b418:	4ba9      	ldr	r3, [pc, #676]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c>
    {
        return ERR_BUSY;
 800b420:	2302      	movs	r3, #2
 800b422:	e228      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
    }
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */    
    if( gNfca.CR.cascadeLv > (uint8_t)RFAL_NFCA_SEL_CASCADE_L3 )
 800b424:	4ba6      	ldr	r3, [pc, #664]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d901      	bls.n	800b432 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3a>
    {
        return ERR_INTERNAL;
 800b42e:	230c      	movs	r3, #12
 800b430:	e221      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
    }
    
    switch( gNfca.CR.state )
 800b432:	4ba3      	ldr	r3, [pc, #652]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b434:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b438:	3b01      	subs	r3, #1
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	f200 8217 	bhi.w	800b86e <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x476>
 800b440:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x50>)
 800b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b446:	bf00      	nop
 800b448:	0800b459 	.word	0x0800b459
 800b44c:	0800b47b 	.word	0x0800b47b
 800b450:	0800b789 	.word	0x0800b789
 800b454:	0800b86b 	.word	0x0800b86b
    {
        /*******************************************************************************/
        case RFAL_NFCA_CR_CL:
            
            /* Initialize the SDD_REQ to send for the new cascade level */
            ST_MEMSET( (uint8_t*)&gNfca.CR.selReq, 0x00, sizeof(rfalNfcaSelReq) );
 800b458:	2207      	movs	r2, #7
 800b45a:	2100      	movs	r1, #0
 800b45c:	4899      	ldr	r0, [pc, #612]	; (800b6c4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 800b45e:	f006 fe85 	bl	801216c <memset>
        
            gNfca.CR.bytesTxRx = RFAL_NFCA_SDD_REQ_LEN;
 800b462:	4b97      	ldr	r3, [pc, #604]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b464:	2202      	movs	r2, #2
 800b466:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            gNfca.CR.bitsTxRx  = 0U;
 800b46a:	4b95      	ldr	r3, [pc, #596]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            gNfca.CR.state     = RFAL_NFCA_CR_SDD;
 800b472:	4b93      	ldr	r3, [pc, #588]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b474:	2202      	movs	r2, #2
 800b476:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        
        /*******************************************************************************/
        case RFAL_NFCA_CR_SDD:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Calculate SEL_CMD and SEL_PAR with the bytes/bits to be sent */
            gNfca.CR.selReq.selCmd = rfalNfcaCLn2SELCMD( gNfca.CR.cascadeLv );
 800b47a:	4b91      	ldr	r3, [pc, #580]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	b2db      	uxtb	r3, r3
 800b484:	3b6d      	subs	r3, #109	; 0x6d
 800b486:	b2da      	uxtb	r2, r3
 800b488:	4b8d      	ldr	r3, [pc, #564]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b48a:	751a      	strb	r2, [r3, #20]
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800b48c:	4b8c      	ldr	r3, [pc, #560]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b48e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b492:	011b      	lsls	r3, r3, #4
 800b494:	b2da      	uxtb	r2, r3
 800b496:	4b8a      	ldr	r3, [pc, #552]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b498:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b49c:	f003 030f 	and.w	r3, r3, #15
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	4b86      	ldr	r3, [pc, #536]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b4a8:	755a      	strb	r2, [r3, #21]
        
            /* Send SDD_REQ (Anticollision frame) */
            ret = rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&gNfca.CR.selReq, &gNfca.CR.bytesTxRx, &gNfca.CR.bitsTxRx, &gNfca.CR.rxLen, RFAL_NFCA_FDTMIN );
 800b4aa:	f240 6354 	movw	r3, #1620	; 0x654
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	4b85      	ldr	r3, [pc, #532]	; (800b6c8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2d0>)
 800b4b2:	4a86      	ldr	r2, [pc, #536]	; (800b6cc <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2d4>)
 800b4b4:	4986      	ldr	r1, [pc, #536]	; (800b6d0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2d8>)
 800b4b6:	4883      	ldr	r0, [pc, #524]	; (800b6c4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 800b4b8:	f003 fc2e 	bl	800ed18 <rfalISO14443ATransceiveAnticollisionFrame>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	80fb      	strh	r3, [r7, #6]

            /* Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            if( (ret == ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	2b04      	cmp	r3, #4
 800b4c4:	d117      	bne.n	800b4f6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xfe>
 800b4c6:	4b7e      	ldr	r3, [pc, #504]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d113      	bne.n	800b4f6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xfe>
 800b4ce:	4b7c      	ldr	r3, [pc, #496]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b4d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00e      	beq.n	800b4f6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xfe>
            {
                gNfca.CR.retries--;
 800b4d8:	4b79      	ldr	r3, [pc, #484]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b4da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	4b77      	ldr	r3, [pc, #476]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                platformTimerDestroy( gNfca.CR.tmrFDT );
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800b4e8:	2005      	movs	r0, #5
 800b4ea:	f006 fdbb 	bl	8012064 <timerCalculateTimer>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4a73      	ldr	r2, [pc, #460]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b4f2:	6313      	str	r3, [r2, #48]	; 0x30
                break;
 800b4f4:	e1be      	b.n	800b874 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
            }
            
            /* Covert rxLen into bytes */
            gNfca.CR.rxLen = rfalConvBitsToBytes( gNfca.CR.rxLen );
 800b4f6:	4b72      	ldr	r3, [pc, #456]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b4f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4fa:	3307      	adds	r3, #7
 800b4fc:	08db      	lsrs	r3, r3, #3
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	4b6f      	ldr	r3, [pc, #444]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b502:	859a      	strh	r2, [r3, #44]	; 0x2c
            
            
            if( (ret == ERR_TIMEOUT) && (gNfca.CR.backtrackCnt != 0U) && (!gNfca.CR.doBacktrack)
 800b504:	88fb      	ldrh	r3, [r7, #6]
 800b506:	2b04      	cmp	r3, #4
 800b508:	d15b      	bne.n	800b5c2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
 800b50a:	4b6d      	ldr	r3, [pc, #436]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b50c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b510:	2b00      	cmp	r3, #0
 800b512:	d056      	beq.n	800b5c2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
 800b514:	4b6a      	ldr	r3, [pc, #424]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b516:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b51a:	f083 0301 	eor.w	r3, r3, #1
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d04e      	beq.n	800b5c2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
                && !((RFAL_NFCA_SDD_REQ_LEN == gNfca.CR.bytesTxRx) && (0U == gNfca.CR.bitsTxRx))     )
 800b524:	4b66      	ldr	r3, [pc, #408]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b526:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d104      	bne.n	800b538 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x140>
 800b52e:	4b64      	ldr	r3, [pc, #400]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b530:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b534:	2b00      	cmp	r3, #0
 800b536:	d044      	beq.n	800b5c2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ca>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 800b538:	231d      	movs	r3, #29
 800b53a:	80fb      	strh	r3, [r7, #6]
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 800b53c:	463b      	mov	r3, r7
 800b53e:	4619      	mov	r1, r3
 800b540:	2026      	movs	r0, #38	; 0x26
 800b542:	f000 f9cb 	bl	800b8dc <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == gNfca.CR.bitsTxRx)
 800b546:	4b5e      	ldr	r3, [pc, #376]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b548:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10c      	bne.n	800b56a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x172>
                {
                    gNfca.CR.bitsTxRx = 7;
 800b550:	4b5b      	ldr	r3, [pc, #364]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b552:	2207      	movs	r2, #7
 800b554:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                    gNfca.CR.bytesTxRx--;
 800b558:	4b59      	ldr	r3, [pc, #356]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b55a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b55e:	3b01      	subs	r3, #1
 800b560:	b2da      	uxtb	r2, r3
 800b562:	4b57      	ldr	r3, [pc, #348]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b564:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800b568:	e007      	b.n	800b57a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x182>
                }
                else
                {
                    gNfca.CR.bitsTxRx--;
 800b56a:	4b55      	ldr	r3, [pc, #340]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b56c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b570:	3b01      	subs	r3, #1
 800b572:	b2da      	uxtb	r2, r3
 800b574:	4b52      	ldr	r3, [pc, #328]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b576:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                }
                collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) );
 800b57a:	4b51      	ldr	r3, [pc, #324]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b57c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b580:	461a      	mov	r2, r3
 800b582:	4b50      	ldr	r3, [pc, #320]	; (800b6c4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 800b584:	4413      	add	r3, r2
 800b586:	781a      	ldrb	r2, [r3, #0]
 800b588:	4b4d      	ldr	r3, [pc, #308]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b58a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b58e:	4619      	mov	r1, r3
 800b590:	2301      	movs	r3, #1
 800b592:	408b      	lsls	r3, r1
 800b594:	b2db      	uxtb	r3, r3
 800b596:	4013      	ands	r3, r2
 800b598:	717b      	strb	r3, [r7, #5]
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 800b59a:	797b      	ldrb	r3, [r7, #5]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ac>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e000      	b.n	800b5a6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ae>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	717b      	strb	r3, [r7, #5]
                gNfca.CR.doBacktrack = true;
 800b5a8:	4b45      	ldr	r3, [pc, #276]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                gNfca.CR.backtrackCnt--;
 800b5b0:	4b43      	ldr	r3, [pc, #268]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	4b41      	ldr	r3, [pc, #260]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            {
 800b5c0:	e003      	b.n	800b5ca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1d2>
            }
            else
            {
                gNfca.CR.doBacktrack = false;
 800b5c2:	4b3f      	ldr	r3, [pc, #252]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            if( ret == ERR_RF_COLLISION )
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	2b1d      	cmp	r3, #29
 800b5ce:	f040 80b5 	bne.w	800b73c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x344>
            {
                /* Check received length */
                if( (gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 800b5d2:	4b3b      	ldr	r3, [pc, #236]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b5d8:	461a      	mov	r2, r3
 800b5da:	4b39      	ldr	r3, [pc, #228]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1f0>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e000      	b.n	800b5ea <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1f2>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4413      	add	r3, r2
 800b5ec:	2b07      	cmp	r3, #7
 800b5ee:	d901      	bls.n	800b5f4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1fc>
                {
                    return ERR_PROTO;
 800b5f0:	230b      	movs	r3, #11
 800b5f2:	e140      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
                }

                if( ((gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (gNfca.CR.backtrackCnt != 0U) )
 800b5f4:	4b32      	ldr	r3, [pc, #200]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5f6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4b30      	ldr	r3, [pc, #192]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b5fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x212>
 800b606:	2301      	movs	r3, #1
 800b608:	e000      	b.n	800b60c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x214>
 800b60a:	2300      	movs	r3, #0
 800b60c:	4413      	add	r3, r2
 800b60e:	2b06      	cmp	r3, #6
 800b610:	d924      	bls.n	800b65c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x264>
 800b612:	4b2b      	ldr	r3, [pc, #172]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d01f      	beq.n	800b65c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x264>
                { /* Collision in BCC: Anticollide only UID part */
                    gNfca.CR.backtrackCnt--;
 800b61c:	4b28      	ldr	r3, [pc, #160]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b61e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b622:	3b01      	subs	r3, #1
 800b624:	b2da      	uxtb	r2, r3
 800b626:	4b26      	ldr	r3, [pc, #152]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    gNfca.CR.bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 800b62c:	4b24      	ldr	r3, [pc, #144]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b62e:	2205      	movs	r2, #5
 800b630:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    gNfca.CR.bitsTxRx = 7;
 800b634:	4b22      	ldr	r3, [pc, #136]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b636:	2207      	movs	r2, #7
 800b638:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800b63c:	4b20      	ldr	r3, [pc, #128]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b63e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b642:	461a      	mov	r2, r3
 800b644:	4b1f      	ldr	r3, [pc, #124]	; (800b6c4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 800b646:	4413      	add	r3, r2
 800b648:	781a      	ldrb	r2, [r3, #0]
 800b64a:	4b1d      	ldr	r3, [pc, #116]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b64c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b650:	4619      	mov	r1, r3
 800b652:	2301      	movs	r3, #1
 800b654:	408b      	lsls	r3, r1
 800b656:	b2db      	uxtb	r3, r3
 800b658:	4013      	ands	r3, r2
 800b65a:	717b      	strb	r3, [r7, #5]
                }
                
                if( (gNfca.CR.devLimit == 0U) && !(*gNfca.CR.collPend) )
 800b65c:	4b18      	ldr	r3, [pc, #96]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10d      	bne.n	800b680 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x288>
 800b664:	4b16      	ldr	r3, [pc, #88]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	f083 0301 	eor.w	r3, r3, #1
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	d005      	beq.n	800b680 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x288>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *gNfca.CR.collPend = true;
 800b674:	4b12      	ldr	r3, [pc, #72]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	2201      	movs	r2, #1
 800b67a:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 800b67c:	2312      	movs	r3, #18
 800b67e:	e0fa      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
                }
                
                *gNfca.CR.collPend = true;
 800b680:	4b0f      	ldr	r3, [pc, #60]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	2201      	movs	r2, #1
 800b686:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 800b688:	797b      	ldrb	r3, [r7, #5]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d022      	beq.n	800b6d4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2dc>
                {
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] | (1U << gNfca.CR.bitsTxRx));   /* MISRA 10.3 */
 800b68e:	4b0c      	ldr	r3, [pc, #48]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b690:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b694:	461a      	mov	r2, r3
 800b696:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 800b698:	4413      	add	r3, r2
 800b69a:	7819      	ldrb	r1, [r3, #0]
 800b69c:	4b08      	ldr	r3, [pc, #32]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b69e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	4093      	lsls	r3, r2
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2c8>)
 800b6ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2cc>)
 800b6b4:	4403      	add	r3, r0
 800b6b6:	430a      	orrs	r2, r1
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	701a      	strb	r2, [r3, #0]
 800b6bc:	e023      	b.n	800b706 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x30e>
 800b6be:	bf00      	nop
 800b6c0:	200013dc 	.word	0x200013dc
 800b6c4:	200013f0 	.word	0x200013f0
 800b6c8:	20001408 	.word	0x20001408
 800b6cc:	20001407 	.word	0x20001407
 800b6d0:	20001406 	.word	0x20001406
                }
                else
                {
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & ~(1U << gNfca.CR.bitsTxRx));  /* MISRA 10.3 */
 800b6d4:	4b6a      	ldr	r3, [pc, #424]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b6d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b6da:	461a      	mov	r2, r3
 800b6dc:	4b69      	ldr	r3, [pc, #420]	; (800b884 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x48c>)
 800b6de:	4413      	add	r3, r2
 800b6e0:	7819      	ldrb	r1, [r3, #0]
 800b6e2:	4b67      	ldr	r3, [pc, #412]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b6e4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4093      	lsls	r3, r2
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	43db      	mvns	r3, r3
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	4b62      	ldr	r3, [pc, #392]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b6f6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	4b61      	ldr	r3, [pc, #388]	; (800b884 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x48c>)
 800b6fe:	4403      	add	r3, r0
 800b700:	400a      	ands	r2, r1
 800b702:	b2d2      	uxtb	r2, r2
 800b704:	701a      	strb	r2, [r3, #0]
                }

                gNfca.CR.bitsTxRx++;
 800b706:	4b5e      	ldr	r3, [pc, #376]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b708:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b70c:	3301      	adds	r3, #1
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	4b5b      	ldr	r3, [pc, #364]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b712:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                
                /* Check if number of bits form a byte */
                if( gNfca.CR.bitsTxRx == RFAL_BITS_IN_BYTE )
 800b716:	4b5a      	ldr	r3, [pc, #360]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b718:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	f040 80a8 	bne.w	800b872 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47a>
                {
                    gNfca.CR.bitsTxRx = 0;
 800b722:	4b57      	ldr	r3, [pc, #348]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b724:	2200      	movs	r2, #0
 800b726:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                    gNfca.CR.bytesTxRx++;
 800b72a:	4b55      	ldr	r3, [pc, #340]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b72c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b730:	3301      	adds	r3, #1
 800b732:	b2da      	uxtb	r2, r3
 800b734:	4b52      	ldr	r3, [pc, #328]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b736:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                }
                break;
 800b73a:	e09a      	b.n	800b872 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47a>
            }
            
            /*******************************************************************************/
            /* Check if Collision loop has failed */
            if( ret != ERR_NONE )
 800b73c:	88fb      	ldrh	r3, [r7, #6]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x34e>
            {
                return ret;
 800b742:	88fb      	ldrh	r3, [r7, #6]
 800b744:	e097      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            
            /* If collisions are to be reported check whether the response is complete */
            if( (gNfca.CR.devLimit == 0U) && (gNfca.CR.rxLen != sizeof(rfalNfcaSddRes)) )
 800b746:	4b4e      	ldr	r3, [pc, #312]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x362>
 800b74e:	4b4c      	ldr	r3, [pc, #304]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b752:	2b05      	cmp	r3, #5
 800b754:	d001      	beq.n	800b75a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x362>
            {
                return ERR_PROTO;
 800b756:	230b      	movs	r3, #11
 800b758:	e08d      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /* Check if the received BCC match */
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800b75a:	4b49      	ldr	r3, [pc, #292]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b75c:	7e9c      	ldrb	r4, [r3, #26]
 800b75e:	2104      	movs	r1, #4
 800b760:	4849      	ldr	r0, [pc, #292]	; (800b888 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x490>)
 800b762:	f7ff fddb 	bl	800b31c <rfalNfcaCalculateBcc>
 800b766:	4603      	mov	r3, r0
 800b768:	429c      	cmp	r4, r3
 800b76a:	d001      	beq.n	800b770 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x378>
            {
                return ERR_PROTO;
 800b76c:	230b      	movs	r3, #11
 800b76e:	e082      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /*******************************************************************************/
            /* Anticollision OK, Select this Cascade Level */
            gNfca.CR.selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800b770:	4b43      	ldr	r3, [pc, #268]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b772:	2270      	movs	r2, #112	; 0x70
 800b774:	755a      	strb	r2, [r3, #21]
            
            gNfca.CR.retries = RFAL_NFCA_N_RETRANS;
 800b776:	4b42      	ldr	r3, [pc, #264]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b778:	2202      	movs	r2, #2
 800b77a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            gNfca.CR.state   = RFAL_NFCA_CR_SEL;
 800b77e:	4b40      	ldr	r3, [pc, #256]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b780:	2203      	movs	r2, #3
 800b782:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            break;
 800b786:	e075      	b.n	800b874 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
            
        /*******************************************************************************/
        case RFAL_NFCA_CR_SEL:
            
            /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            ret = rfalTransceiveBlockingTxRx( (uint8_t*)&gNfca.CR.selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.CR.selRes, sizeof(rfalNfcaSelRes), &gNfca.CR.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN );
 800b788:	4b3d      	ldr	r3, [pc, #244]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b78a:	69da      	ldr	r2, [r3, #28]
 800b78c:	f240 6354 	movw	r3, #1620	; 0x654
 800b790:	9302      	str	r3, [sp, #8]
 800b792:	2300      	movs	r3, #0
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	4b3d      	ldr	r3, [pc, #244]	; (800b88c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x494>)
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	2301      	movs	r3, #1
 800b79c:	2107      	movs	r1, #7
 800b79e:	4839      	ldr	r0, [pc, #228]	; (800b884 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x48c>)
 800b7a0:	f002 f9e2 	bl	800db68 <rfalTransceiveBlockingTxRx>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	80fb      	strh	r3, [r7, #6]
                
            /* Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            if( (ret == ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 800b7a8:	88fb      	ldrh	r3, [r7, #6]
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	d117      	bne.n	800b7de <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3e6>
 800b7ae:	4b34      	ldr	r3, [pc, #208]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d113      	bne.n	800b7de <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3e6>
 800b7b6:	4b32      	ldr	r3, [pc, #200]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00e      	beq.n	800b7de <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3e6>
            {
                gNfca.CR.retries--;
 800b7c0:	4b2f      	ldr	r3, [pc, #188]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                platformTimerDestroy( gNfca.CR.tmrFDT );
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800b7d0:	2005      	movs	r0, #5
 800b7d2:	f006 fc47 	bl	8012064 <timerCalculateTimer>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4a29      	ldr	r2, [pc, #164]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7da:	6313      	str	r3, [r2, #48]	; 0x30
                break;
 800b7dc:	e04a      	b.n	800b874 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
            }
            
            if( ret != ERR_NONE )
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d001      	beq.n	800b7e8 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3f0>
            {
                return ret;
 800b7e4:	88fb      	ldrh	r3, [r7, #6]
 800b7e6:	e046      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /* Ensure proper response length */
            if( gNfca.CR.rxLen != sizeof(rfalNfcaSelRes) )
 800b7e8:	4b25      	ldr	r3, [pc, #148]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d001      	beq.n	800b7f4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x3fc>
            {
                return ERR_PROTO;
 800b7f0:	230b      	movs	r3, #11
 800b7f2:	e040      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
            }
            
            /*******************************************************************************/
            /* Check cascade byte, if cascade tag then go next cascade level */
            if( *gNfca.CR.selReq.nfcid1 == RFAL_NFCA_SDD_CT )
 800b7f4:	4b22      	ldr	r3, [pc, #136]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7f6:	7d9b      	ldrb	r3, [r3, #22]
 800b7f8:	2b88      	cmp	r3, #136	; 0x88
 800b7fa:	d11f      	bne.n	800b83c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x444>
            {
                /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
                ST_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], &((uint8_t*)&gNfca.CR.selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800b7fc:	4b20      	ldr	r3, [pc, #128]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b7fe:	6a1b      	ldr	r3, [r3, #32]
 800b800:	4a1f      	ldr	r2, [pc, #124]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b802:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	4413      	add	r3, r2
 800b808:	4921      	ldr	r1, [pc, #132]	; (800b890 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x498>)
 800b80a:	2203      	movs	r2, #3
 800b80c:	4618      	mov	r0, r3
 800b80e:	f006 fc85 	bl	801211c <memcpy>
                *gNfca.CR.nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800b812:	4b1b      	ldr	r3, [pc, #108]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	781a      	ldrb	r2, [r3, #0]
 800b818:	4b19      	ldr	r3, [pc, #100]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	3203      	adds	r2, #3
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	701a      	strb	r2, [r3, #0]
                
                /* Go to next cascade level */
                gNfca.CR.state = RFAL_NFCA_CR_CL;
 800b822:	4b17      	ldr	r3, [pc, #92]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                gNfca.CR.cascadeLv++;
 800b82a:	4b15      	ldr	r3, [pc, #84]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b830:	3301      	adds	r3, #1
 800b832:	b2da      	uxtb	r2, r3
 800b834:	4b12      	ldr	r3, [pc, #72]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                *gNfca.CR.nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
                
                gNfca.CR.state = RFAL_NFCA_CR_DONE;
                break;                             /* Only flag operation complete on the next execution */
            }
            break;
 800b83a:	e01b      	b.n	800b874 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
                ST_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], (uint8_t*)&gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 800b83c:	4b10      	ldr	r3, [pc, #64]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	4a0f      	ldr	r2, [pc, #60]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b844:	7812      	ldrb	r2, [r2, #0]
 800b846:	4413      	add	r3, r2
 800b848:	4a0d      	ldr	r2, [pc, #52]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b84a:	f8d2 2016 	ldr.w	r2, [r2, #22]
 800b84e:	601a      	str	r2, [r3, #0]
                *gNfca.CR.nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 800b850:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	781a      	ldrb	r2, [r3, #0]
 800b856:	4b0a      	ldr	r3, [pc, #40]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	3204      	adds	r2, #4
 800b85c:	b2d2      	uxtb	r2, r2
 800b85e:	701a      	strb	r2, [r3, #0]
                gNfca.CR.state = RFAL_NFCA_CR_DONE;
 800b860:	4b07      	ldr	r3, [pc, #28]	; (800b880 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x488>)
 800b862:	2204      	movs	r2, #4
 800b864:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                break;                             /* Only flag operation complete on the next execution */
 800b868:	e004      	b.n	800b874 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47c>
        
        /*******************************************************************************/
        case RFAL_NFCA_CR_DONE:
            return ERR_NONE;
 800b86a:	2300      	movs	r3, #0
 800b86c:	e003      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 800b86e:	2321      	movs	r3, #33	; 0x21
 800b870:	e001      	b.n	800b876 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x47e>
                break;
 800b872:	bf00      	nop
    }
    return ERR_BUSY;
 800b874:	2302      	movs	r3, #2
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd90      	pop	{r4, r7, pc}
 800b87e:	bf00      	nop
 800b880:	200013dc 	.word	0x200013dc
 800b884:	200013f0 	.word	0x200013f0
 800b888:	200013f2 	.word	0x200013f2
 800b88c:	20001408 	.word	0x20001408
 800b890:	200013f3 	.word	0x200013f3

0800b894 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 800b89a:	2200      	movs	r2, #0
 800b89c:	2100      	movs	r1, #0
 800b89e:	2001      	movs	r0, #1
 800b8a0:	f001 fa4a 	bl	800cd38 <rfalSetMode>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	80fb      	strh	r3, [r7, #6]
 800b8a8:	88fb      	ldrh	r3, [r7, #6]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <rfalNfcaPollerInitialize+0x1e>
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	e00e      	b.n	800b8d0 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800b8b2:	2001      	movs	r0, #1
 800b8b4:	f001 fe84 	bl	800d5c0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 800b8b8:	4807      	ldr	r0, [pc, #28]	; (800b8d8 <rfalNfcaPollerInitialize+0x44>)
 800b8ba:	f001 fed5 	bl	800d668 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 800b8be:	f240 4094 	movw	r0, #1172	; 0x494
 800b8c2:	f001 febd 	bl	800d640 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 800b8c6:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800b8ca:	f001 fe9b 	bl	800d604 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	000108d8 	.word	0x000108d8

0800b8dc <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	6039      	str	r1, [r7, #0]
 800b8e6:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800b8e8:	f107 030c 	add.w	r3, r7, #12
 800b8ec:	79f8      	ldrb	r0, [r7, #7]
 800b8ee:	f240 6254 	movw	r2, #1620	; 0x654
 800b8f2:	9200      	str	r2, [sp, #0]
 800b8f4:	2210      	movs	r2, #16
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	f003 f90c 	bl	800eb14 <rfalISO14443ATransceiveShortFrame>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 800b900:	89fb      	ldrh	r3, [r7, #14]
 800b902:	2b1d      	cmp	r3, #29
 800b904:	d00b      	beq.n	800b91e <rfalNfcaPollerCheckPresence+0x42>
 800b906:	89fb      	ldrh	r3, [r7, #14]
 800b908:	2b15      	cmp	r3, #21
 800b90a:	d008      	beq.n	800b91e <rfalNfcaPollerCheckPresence+0x42>
 800b90c:	89fb      	ldrh	r3, [r7, #14]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d005      	beq.n	800b91e <rfalNfcaPollerCheckPresence+0x42>
 800b912:	89fb      	ldrh	r3, [r7, #14]
 800b914:	2b09      	cmp	r3, #9
 800b916:	d002      	beq.n	800b91e <rfalNfcaPollerCheckPresence+0x42>
 800b918:	89fb      	ldrh	r3, [r7, #14]
 800b91a:	2b1b      	cmp	r3, #27
 800b91c:	d101      	bne.n	800b922 <rfalNfcaPollerCheckPresence+0x46>
    {
       ret = ERR_NONE;
 800b91e:	2300      	movs	r3, #0
 800b920:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 800b922:	89fb      	ldrh	r3, [r7, #14]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	6039      	str	r1, [r7, #0]
 800b936:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 800b938:	79fb      	ldrb	r3, [r7, #7]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <rfalNfcaPollerTechnologyDetection+0x16>
 800b93e:	2352      	movs	r3, #82	; 0x52
 800b940:	e000      	b.n	800b944 <rfalNfcaPollerTechnologyDetection+0x18>
 800b942:	2326      	movs	r3, #38	; 0x26
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff ffc8 	bl	800b8dc <rfalNfcaPollerCheckPresence>
 800b94c:	4603      	mov	r3, r0
 800b94e:	81fb      	strh	r3, [r7, #14]
 800b950:	89fb      	ldrh	r3, [r7, #14]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <rfalNfcaPollerTechnologyDetection+0x2e>
 800b956:	89fb      	ldrh	r3, [r7, #14]
 800b958:	e005      	b.n	800b966 <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 800b95a:	79fb      	ldrb	r3, [r7, #7]
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d001      	beq.n	800b964 <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 800b960:	f000 f9f4 	bl	800bd4c <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <rfalNfcaPollerStartFullCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerStartFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b088      	sub	sp, #32
 800b974:	af02      	add	r7, sp, #8
 800b976:	60ba      	str	r2, [r7, #8]
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	4603      	mov	r3, r0
 800b97c:	73fb      	strb	r3, [r7, #15]
 800b97e:	460b      	mov	r3, r1
 800b980:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <rfalNfcaPollerStartFullCollisionResolution+0x1e>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <rfalNfcaPollerStartFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800b98e:	2307      	movs	r3, #7
 800b990:	e092      	b.n	800bab8 <rfalNfcaPollerStartFullCollisionResolution+0x148>
    }
    
    *devCnt = 0;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 800b998:	2300      	movs	r3, #0
 800b99a:	82fb      	strh	r3, [r7, #22]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d028      	beq.n	800b9f4 <rfalNfcaPollerStartFullCollisionResolution+0x84>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	1c59      	adds	r1, r3, #1
 800b9a6:	f107 0312 	add.w	r3, r7, #18
 800b9aa:	f240 6254 	movw	r2, #1620	; 0x654
 800b9ae:	9200      	str	r2, [sp, #0]
 800b9b0:	2210      	movs	r2, #16
 800b9b2:	2052      	movs	r0, #82	; 0x52
 800b9b4:	f003 f8ae 	bl	800eb14 <rfalISO14443ATransceiveShortFrame>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	82fb      	strh	r3, [r7, #22]
        if(ret != ERR_NONE)
 800b9bc:	8afb      	ldrh	r3, [r7, #22]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d010      	beq.n	800b9e4 <rfalNfcaPollerStartFullCollisionResolution+0x74>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d00b      	beq.n	800b9e0 <rfalNfcaPollerStartFullCollisionResolution+0x70>
 800b9c8:	8afb      	ldrh	r3, [r7, #22]
 800b9ca:	2b1d      	cmp	r3, #29
 800b9cc:	d00a      	beq.n	800b9e4 <rfalNfcaPollerStartFullCollisionResolution+0x74>
 800b9ce:	8afb      	ldrh	r3, [r7, #22]
 800b9d0:	2b15      	cmp	r3, #21
 800b9d2:	d007      	beq.n	800b9e4 <rfalNfcaPollerStartFullCollisionResolution+0x74>
 800b9d4:	8afb      	ldrh	r3, [r7, #22]
 800b9d6:	2b09      	cmp	r3, #9
 800b9d8:	d004      	beq.n	800b9e4 <rfalNfcaPollerStartFullCollisionResolution+0x74>
 800b9da:	8afb      	ldrh	r3, [r7, #22]
 800b9dc:	2b1b      	cmp	r3, #27
 800b9de:	d001      	beq.n	800b9e4 <rfalNfcaPollerStartFullCollisionResolution+0x74>
            {
                return ret;
 800b9e0:	8afb      	ldrh	r3, [r7, #22]
 800b9e2:	e069      	b.n	800bab8 <rfalNfcaPollerStartFullCollisionResolution+0x148>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800b9e4:	8afb      	ldrh	r3, [r7, #22]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d104      	bne.n	800b9f4 <rfalNfcaPollerStartFullCollisionResolution+0x84>
 800b9ea:	8a7b      	ldrh	r3, [r7, #18]
 800b9ec:	2b10      	cmp	r3, #16
 800b9ee:	d001      	beq.n	800b9f4 <rfalNfcaPollerStartFullCollisionResolution+0x84>
        {
            return ERR_PROTO;
 800b9f0:	230b      	movs	r3, #11
 800b9f2:	e061      	b.n	800bab8 <rfalNfcaPollerStartFullCollisionResolution+0x148>
        }
    }
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	f107 0314 	add.w	r3, r7, #20
 800b9fa:	3201      	adds	r2, #1
 800b9fc:	8812      	ldrh	r2, [r2, #0]
 800b9fe:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d008      	beq.n	800ba18 <rfalNfcaPollerStartFullCollisionResolution+0xa8>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 800ba06:	7bbb      	ldrb	r3, [r7, #14]
 800ba08:	2216      	movs	r2, #22
 800ba0a:	fb02 f303 	mul.w	r3, r2, r3
 800ba0e:	461a      	mov	r2, r3
 800ba10:	2100      	movs	r1, #0
 800ba12:	68b8      	ldr	r0, [r7, #8]
 800ba14:	f006 fbaa 	bl	801216c <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	f107 0214 	add.w	r2, r7, #20
 800ba20:	8812      	ldrh	r2, [r2, #0]
 800ba22:	801a      	strh	r2, [r3, #0]
    
    /* Save parameters */
    gNfca.CR.devCnt      = devCnt;
 800ba24:	4a26      	ldr	r2, [pc, #152]	; (800bac0 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6093      	str	r3, [r2, #8]
    gNfca.CR.devLimit    = devLimit;
 800ba2a:	4a25      	ldr	r2, [pc, #148]	; (800bac0 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	7013      	strb	r3, [r2, #0]
    gNfca.CR.nfcaDevList = nfcaDevList;
 800ba30:	4a23      	ldr	r2, [pc, #140]	; (800bac0 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	6053      	str	r3, [r2, #4]
    gNfca.CR.compMode    = compMode;
 800ba36:	4a22      	ldr	r2, [pc, #136]	; (800bac0 <rfalNfcaPollerStartFullCollisionResolution+0x150>)
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	7053      	strb	r3, [r2, #1]
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	789b      	ldrb	r3, [r3, #2]
 800ba40:	f003 030f 	and.w	r3, r3, #15
 800ba44:	2b0c      	cmp	r3, #12
 800ba46:	d12a      	bne.n	800ba9e <rfalNfcaPollerStartFullCollisionResolution+0x12e>
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d027      	beq.n	800ba9e <rfalNfcaPollerStartFullCollisionResolution+0x12e>
 800ba4e:	8afb      	ldrh	r3, [r7, #22]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d124      	bne.n	800ba9e <rfalNfcaPollerStartFullCollisionResolution+0x12e>
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d021      	beq.n	800ba9e <rfalNfcaPollerStartFullCollisionResolution+0x12e>
    {
        /* RID_REQ shall be performed              Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 800ba5a:	f005 f905 	bl	8010c68 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	330f      	adds	r3, #15
 800ba62:	4618      	mov	r0, r3
 800ba64:	f005 f922 	bl	8010cac <rfalT1TPollerRid>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	82fb      	strh	r3, [r7, #22]
 800ba6c:	8afb      	ldrh	r3, [r7, #22]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <rfalNfcaPollerStartFullCollisionResolution+0x106>
 800ba72:	8afb      	ldrh	r3, [r7, #22]
 800ba74:	e020      	b.n	800bab8 <rfalNfcaPollerStartFullCollisionResolution+0x148>
        
        *devCnt = 1U;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2201      	movs	r2, #1
 800ba86:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2204      	movs	r2, #4
 800ba8c:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	3305      	adds	r3, #5
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	3211      	adds	r2, #17
 800ba96:	6812      	ldr	r2, [r2, #0]
 800ba98:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e00c      	b.n	800bab8 <rfalNfcaPollerStartFullCollisionResolution+0x148>
    }
    #endif /* RFAL_FEATURE_T1T */
    
    return rfalNfcaPollerStartSingleCollisionResolution( devLimit, &gNfca.CR.collPending, &nfcaDevList->selRes, (uint8_t*)&nfcaDevList->nfcId1, &nfcaDevList->nfcId1Len );
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	1cda      	adds	r2, r3, #3
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	1d59      	adds	r1, r3, #5
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	3304      	adds	r3, #4
 800baaa:	7bb8      	ldrb	r0, [r7, #14]
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	460b      	mov	r3, r1
 800bab0:	4904      	ldr	r1, [pc, #16]	; (800bac4 <rfalNfcaPollerStartFullCollisionResolution+0x154>)
 800bab2:	f7ff fc53 	bl	800b35c <rfalNfcaPollerStartSingleCollisionResolution>
 800bab6:	4603      	mov	r3, r0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	200013dc 	.word	0x200013dc
 800bac4:	200013e8 	.word	0x200013e8

0800bac8 <rfalNfcaPollerGetFullCollisionResolutionStatus>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerGetFullCollisionResolutionStatus( void )
{
 800bac8:	b5b0      	push	{r4, r5, r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af02      	add	r7, sp, #8
    ReturnCode ret;
    uint8_t    newDevType;
    
    if( (gNfca.CR.nfcaDevList == NULL) || (gNfca.CR.devCnt == NULL) )
 800bace:	4b64      	ldr	r3, [pc, #400]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <rfalNfcaPollerGetFullCollisionResolutionStatus+0x16>
 800bad6:	4b62      	ldr	r3, [pc, #392]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x1a>
    {
        return ERR_WRONG_STATE;
 800bade:	2321      	movs	r3, #33	; 0x21
 800bae0:	e0b9      	b.n	800bc56 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
    }
    
    /*******************************************************************************/
    /* Check whether a T1T has already been detected */
    if( rfalNfcaIsSensResT1T( &gNfca.CR.nfcaDevList->sensRes ) && (gNfca.CR.nfcaDevList->type == RFAL_NFCA_T1T) )
 800bae2:	4b5f      	ldr	r3, [pc, #380]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	789b      	ldrb	r3, [r3, #2]
 800bae8:	f003 030f 	and.w	r3, r3, #15
 800baec:	2b0c      	cmp	r3, #12
 800baee:	d106      	bne.n	800bafe <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
 800baf0:	4b5b      	ldr	r3, [pc, #364]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d101      	bne.n	800bafe <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
    {
        /* T1T doesn't support Anticollision */
        return ERR_NONE;
 800bafa:	2300      	movs	r3, #0
 800bafc:	e0ab      	b.n	800bc56 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
    }
    
    
    /*******************************************************************************/
    EXIT_ON_ERR( ret, rfalNfcaPollerGetSingleCollisionResolutionStatus() );
 800bafe:	f7ff fc7b 	bl	800b3f8 <rfalNfcaPollerGetSingleCollisionResolutionStatus>
 800bb02:	4603      	mov	r3, r0
 800bb04:	80fb      	strh	r3, [r7, #6]
 800bb06:	88fb      	ldrh	r3, [r7, #6]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x48>
 800bb0c:	88fb      	ldrh	r3, [r7, #6]
 800bb0e:	e0a2      	b.n	800bc56 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>

    /* Assign Listen Device */
    newDevType = ((uint8_t)gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 800bb10:	4b53      	ldr	r3, [pc, #332]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	4b52      	ldr	r3, [pc, #328]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	2316      	movs	r3, #22
 800bb1e:	fb03 f301 	mul.w	r3, r3, r1
 800bb22:	4413      	add	r3, r2
 800bb24:	78db      	ldrb	r3, [r3, #3]
 800bb26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb2a:	717b      	strb	r3, [r7, #5]
    /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
    gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].type    = (rfalNfcaListenDeviceType) newDevType;
 800bb2c:	4b4c      	ldr	r3, [pc, #304]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	4b4b      	ldr	r3, [pc, #300]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	4619      	mov	r1, r3
 800bb38:	2316      	movs	r3, #22
 800bb3a:	fb03 f301 	mul.w	r3, r3, r1
 800bb3e:	4413      	add	r3, r2
 800bb40:	797a      	ldrb	r2, [r7, #5]
 800bb42:	701a      	strb	r2, [r3, #0]
    gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].isSleep = false;
 800bb44:	4b46      	ldr	r3, [pc, #280]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	4b45      	ldr	r3, [pc, #276]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	2316      	movs	r3, #22
 800bb52:	fb03 f301 	mul.w	r3, r3, r1
 800bb56:	4413      	add	r3, r2
 800bb58:	2200      	movs	r2, #0
 800bb5a:	755a      	strb	r2, [r3, #21]
    (*gNfca.CR.devCnt)++;
 800bb5c:	4b40      	ldr	r3, [pc, #256]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	3201      	adds	r2, #1
 800bb64:	b2d2      	uxtb	r2, r2
 800bb66:	701a      	strb	r2, [r3, #0]

    
    /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
    if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800bb68:	4b3d      	ldr	r3, [pc, #244]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	781a      	ldrb	r2, [r3, #0]
 800bb6e:	4b3c      	ldr	r3, [pc, #240]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d22e      	bcs.n	800bbd4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x10c>
 800bb76:	4b3a      	ldr	r3, [pc, #232]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb78:	7b1b      	ldrb	r3, [r3, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d02a      	beq.n	800bbd4 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x10c>
    {
        /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
        rfalNfcaPollerSleep();
 800bb7e:	f000 f8e5 	bl	800bd4c <rfalNfcaPollerSleep>
        gNfca.CR.nfcaDevList[(*gNfca.CR.devCnt - 1U)].isSleep = true;
 800bb82:	4b37      	ldr	r3, [pc, #220]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	4b36      	ldr	r3, [pc, #216]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	2316      	movs	r3, #22
 800bb90:	fb03 f301 	mul.w	r3, r3, r1
 800bb94:	3b16      	subs	r3, #22
 800bb96:	4413      	add	r3, r2
 800bb98:	2201      	movs	r2, #1
 800bb9a:	755a      	strb	r2, [r3, #21]
        
        
        /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
        ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].sensRes );
 800bb9c:	4b30      	ldr	r3, [pc, #192]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	4b2f      	ldr	r3, [pc, #188]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	4619      	mov	r1, r3
 800bba8:	2316      	movs	r3, #22
 800bbaa:	fb03 f301 	mul.w	r3, r3, r1
 800bbae:	4413      	add	r3, r2
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	2026      	movs	r0, #38	; 0x26
 800bbb6:	f7ff fe91 	bl	800b8dc <rfalNfcaPollerCheckPresence>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	80fb      	strh	r3, [r7, #6]
        if( ret == ERR_TIMEOUT )
 800bbbe:	88fb      	ldrh	r3, [r7, #6]
 800bbc0:	2b04      	cmp	r3, #4
 800bbc2:	d103      	bne.n	800bbcc <rfalNfcaPollerGetFullCollisionResolutionStatus+0x104>
        {
            /* No more devices found, exit */
            gNfca.CR.collPending = false;
 800bbc4:	4b26      	ldr	r3, [pc, #152]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	731a      	strb	r2, [r3, #12]
        if( ret == ERR_TIMEOUT )
 800bbca:	e006      	b.n	800bbda <rfalNfcaPollerGetFullCollisionResolutionStatus+0x112>
        }
        else
        {
            /* Another device found, continue loop */
            gNfca.CR.collPending = true;
 800bbcc:	4b24      	ldr	r3, [pc, #144]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	731a      	strb	r2, [r3, #12]
        if( ret == ERR_TIMEOUT )
 800bbd2:	e002      	b.n	800bbda <rfalNfcaPollerGetFullCollisionResolutionStatus+0x112>
        }
    }
    else
    {
        /* Exit loop */
        gNfca.CR.collPending = false;
 800bbd4:	4b22      	ldr	r3, [pc, #136]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	731a      	strb	r2, [r3, #12]
    }
        
    
    /*******************************************************************************/
    /* Check if collision resolution shall continue */
    if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800bbda:	4b21      	ldr	r3, [pc, #132]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	781a      	ldrb	r2, [r3, #0]
 800bbe0:	4b1f      	ldr	r3, [pc, #124]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d235      	bcs.n	800bc54 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18c>
 800bbe8:	4b1d      	ldr	r3, [pc, #116]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbea:	7b1b      	ldrb	r3, [r3, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d031      	beq.n	800bc54 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18c>
    {
        EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution(  gNfca.CR.devLimit, 
 800bbf0:	4b1b      	ldr	r3, [pc, #108]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbf2:	7818      	ldrb	r0, [r3, #0]
 800bbf4:	4b1a      	ldr	r3, [pc, #104]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	4b19      	ldr	r3, [pc, #100]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	2316      	movs	r3, #22
 800bc02:	fb03 f301 	mul.w	r3, r3, r1
 800bc06:	4413      	add	r3, r2
 800bc08:	1cd9      	adds	r1, r3, #3
 800bc0a:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	4b14      	ldr	r3, [pc, #80]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	461c      	mov	r4, r3
 800bc16:	2316      	movs	r3, #22
 800bc18:	fb03 f304 	mul.w	r3, r3, r4
 800bc1c:	4413      	add	r3, r2
 800bc1e:	1d5c      	adds	r4, r3, #5
 800bc20:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bc22:	685a      	ldr	r2, [r3, #4]
 800bc24:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x198>)
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	461d      	mov	r5, r3
 800bc2c:	2316      	movs	r3, #22
 800bc2e:	fb03 f305 	mul.w	r3, r3, r5
 800bc32:	4413      	add	r3, r2
 800bc34:	3304      	adds	r3, #4
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	4623      	mov	r3, r4
 800bc3a:	460a      	mov	r2, r1
 800bc3c:	4909      	ldr	r1, [pc, #36]	; (800bc64 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x19c>)
 800bc3e:	f7ff fb8d 	bl	800b35c <rfalNfcaPollerStartSingleCollisionResolution>
 800bc42:	4603      	mov	r3, r0
 800bc44:	80fb      	strh	r3, [r7, #6]
 800bc46:	88fb      	ldrh	r3, [r7, #6]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x188>
 800bc4c:	88fb      	ldrh	r3, [r7, #6]
 800bc4e:	e002      	b.n	800bc56 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
                                                                         &gNfca.CR.collPending, 
                                                                         &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].selRes, 
                                                                         (uint8_t*)&gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].nfcId1, 
                                                                         &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].nfcId1Len ) );
    
        return ERR_BUSY;
 800bc50:	2302      	movs	r3, #2
 800bc52:	e000      	b.n	800bc56 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x18e>
    }
    
    return ERR_NONE;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200013dc 	.word	0x200013dc
 800bc64:	200013e8 	.word	0x200013e8

0800bc68 <rfalNfcaPollerSelect>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08c      	sub	sp, #48	; 0x30
 800bc6c:	af04      	add	r7, sp, #16
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	460b      	mov	r3, r1
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d005      	beq.n	800bc88 <rfalNfcaPollerSelect+0x20>
 800bc7c:	7afb      	ldrb	r3, [r7, #11]
 800bc7e:	2b0a      	cmp	r3, #10
 800bc80:	d802      	bhi.n	800bc88 <rfalNfcaPollerSelect+0x20>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 800bc88:	2307      	movs	r3, #7
 800bc8a:	e058      	b.n	800bd3e <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 800bc8c:	7afb      	ldrb	r3, [r7, #11]
 800bc8e:	4a2e      	ldr	r2, [pc, #184]	; (800bd48 <rfalNfcaPollerSelect+0xe0>)
 800bc90:	fba2 2303 	umull	r2, r3, r2, r3
 800bc94:	089b      	lsrs	r3, r3, #2
 800bc96:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	77fb      	strb	r3, [r7, #31]
 800bca0:	e048      	b.n	800bd34 <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 800bca2:	7ffb      	ldrb	r3, [r7, #31]
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	3b6d      	subs	r3, #109	; 0x6d
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800bcae:	2370      	movs	r3, #112	; 0x70
 800bcb0:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 800bcb2:	7f7a      	ldrb	r2, [r7, #29]
 800bcb4:	7ffb      	ldrb	r3, [r7, #31]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d00f      	beq.n	800bcda <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 800bcba:	2388      	movs	r3, #136	; 0x88
 800bcbc:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800bcbe:	7fbb      	ldrb	r3, [r7, #30]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	18d1      	adds	r1, r2, r3
 800bcc4:	f107 0310 	add.w	r3, r7, #16
 800bcc8:	3303      	adds	r3, #3
 800bcca:	2203      	movs	r2, #3
 800bccc:	4618      	mov	r0, r3
 800bcce:	f006 fa25 	bl	801211c <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800bcd2:	7fbb      	ldrb	r3, [r7, #30]
 800bcd4:	3303      	adds	r3, #3
 800bcd6:	77bb      	strb	r3, [r7, #30]
 800bcd8:	e005      	b.n	800bce6 <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 800bcda:	7fbb      	ldrb	r3, [r7, #30]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4413      	add	r3, r2
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 800bce6:	f107 0310 	add.w	r3, r7, #16
 800bcea:	3302      	adds	r3, #2
 800bcec:	2104      	movs	r1, #4
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff fb14 	bl	800b31c <rfalNfcaCalculateBcc>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800bcf8:	f107 0010 	add.w	r0, r7, #16
 800bcfc:	f240 6354 	movw	r3, #1620	; 0x654
 800bd00:	9302      	str	r3, [sp, #8]
 800bd02:	2300      	movs	r3, #0
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	f107 0318 	add.w	r3, r7, #24
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	2107      	movs	r1, #7
 800bd12:	f001 ff29 	bl	800db68 <rfalTransceiveBlockingTxRx>
 800bd16:	4603      	mov	r3, r0
 800bd18:	837b      	strh	r3, [r7, #26]
 800bd1a:	8b7b      	ldrh	r3, [r7, #26]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <rfalNfcaPollerSelect+0xbc>
 800bd20:	8b7b      	ldrh	r3, [r7, #26]
 800bd22:	e00c      	b.n	800bd3e <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 800bd24:	8b3b      	ldrh	r3, [r7, #24]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d001      	beq.n	800bd2e <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 800bd2a:	230b      	movs	r3, #11
 800bd2c:	e007      	b.n	800bd3e <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 800bd2e:	7ffb      	ldrb	r3, [r7, #31]
 800bd30:	3301      	adds	r3, #1
 800bd32:	77fb      	strb	r3, [r7, #31]
 800bd34:	7ffa      	ldrb	r2, [r7, #31]
 800bd36:	7f7b      	ldrb	r3, [r7, #29]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d9b2      	bls.n	800bca2 <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3720      	adds	r7, #32
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	cccccccd 	.word	0xcccccccd

0800bd4c <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800bd52:	2350      	movs	r3, #80	; 0x50
 800bd54:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 800bd56:	2300      	movs	r3, #0
 800bd58:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800bd5a:	1cfa      	adds	r2, r7, #3
 800bd5c:	1d38      	adds	r0, r7, #4
 800bd5e:	f243 43f8 	movw	r3, #13560	; 0x34f8
 800bd62:	9302      	str	r3, [sp, #8]
 800bd64:	2300      	movs	r3, #0
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	2102      	movs	r1, #2
 800bd70:	f001 fefa 	bl	800db68 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b083      	sub	sp, #12
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	460b      	mov	r3, r1
 800bd88:	807b      	strh	r3, [r7, #2]
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 800bd8a:	887b      	ldrh	r3, [r7, #2]
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d108      	bne.n	800bda2 <rfalNfcaListenerIsSleepReq+0x24>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b50      	cmp	r3, #80	; 0x50
 800bd96:	d104      	bne.n	800bda2 <rfalNfcaListenerIsSleepReq+0x24>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <rfalNfcaListenerIsSleepReq+0x28>
    {
        return false;
 800bda2:	2300      	movs	r3, #0
 800bda4:	e000      	b.n	800bda8 <rfalNfcaListenerIsSleepReq+0x2a>
    }
    
    return true;
 800bda6:	2301      	movs	r3, #1
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bc80      	pop	{r7}
 800bdb0:	4770      	bx	lr

0800bdb2 <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	2b0c      	cmp	r3, #12
 800bdc2:	d004      	beq.n	800bdce <rfalNfcbCheckSensbRes+0x1c>
 800bdc4:	78fb      	ldrb	r3, [r7, #3]
 800bdc6:	2b0d      	cmp	r3, #13
 800bdc8:	d001      	beq.n	800bdce <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 800bdca:	230b      	movs	r3, #11
 800bdcc:	e00c      	b.n	800bde8 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	7a9b      	ldrb	r3, [r3, #10]
 800bdd2:	f003 0308 	and.w	r3, r3, #8
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d103      	bne.n	800bde2 <rfalNfcbCheckSensbRes+0x30>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b50      	cmp	r3, #80	; 0x50
 800bde0:	d001      	beq.n	800bde6 <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 800bde2:	230b      	movs	r3, #11
 800bde4:	e000      	b.n	800bde8 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bc80      	pop	{r7}
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	2003      	movs	r0, #3
 800be00:	f000 ff9a 	bl	800cd38 <rfalSetMode>
 800be04:	4603      	mov	r3, r0
 800be06:	80fb      	strh	r3, [r7, #6]
 800be08:	88fb      	ldrh	r3, [r7, #6]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <rfalNfcbPollerInitialize+0x1e>
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	e014      	b.n	800be3c <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800be12:	2001      	movs	r0, #1
 800be14:	f001 fbd4 	bl	800d5c0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 800be18:	480a      	ldr	r0, [pc, #40]	; (800be44 <rfalNfcbPollerInitialize+0x50>)
 800be1a:	f001 fc25 	bl	800d668 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 800be1e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800be22:	f001 fc0d 	bl	800d640 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800be26:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800be2a:	f001 fbeb 	bl	800d604 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 800be2e:	4b06      	ldr	r3, [pc, #24]	; (800be48 <rfalNfcbPollerInitialize+0x54>)
 800be30:	2200      	movs	r2, #0
 800be32:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 800be34:	4b04      	ldr	r3, [pc, #16]	; (800be48 <rfalNfcbPollerInitialize+0x54>)
 800be36:	2200      	movs	r2, #0
 800be38:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	000108d8 	.word	0x000108d8
 800be48:	20001414 	.word	0x20001414

0800be4c <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08a      	sub	sp, #40	; 0x28
 800be50:	af04      	add	r7, sp, #16
 800be52:	60ba      	str	r2, [r7, #8]
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	4603      	mov	r3, r0
 800be58:	73fb      	strb	r3, [r7, #15]
 800be5a:	460b      	mov	r3, r1
 800be5c:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <rfalNfcbPollerCheckPresence+0x1e>
 800be64:	7bfb      	ldrb	r3, [r7, #15]
 800be66:	2b08      	cmp	r3, #8
 800be68:	d108      	bne.n	800be7c <rfalNfcbPollerCheckPresence+0x30>
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	2b04      	cmp	r3, #4
 800be6e:	d805      	bhi.n	800be7c <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d002      	beq.n	800be7c <rfalNfcbPollerCheckPresence+0x30>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 800be7c:	2307      	movs	r3, #7
 800be7e:	e044      	b.n	800bf0a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 800be86:	220d      	movs	r2, #13
 800be88:	2100      	movs	r1, #0
 800be8a:	68b8      	ldr	r0, [r7, #8]
 800be8c:	f006 f96e 	bl	801216c <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800be90:	2305      	movs	r3, #5
 800be92:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 800be94:	4b1f      	ldr	r3, [pc, #124]	; (800bf14 <rfalNfcbPollerCheckPresence+0xc8>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800be9a:	4b1e      	ldr	r3, [pc, #120]	; (800bf14 <rfalNfcbPollerCheckPresence+0xc8>)
 800be9c:	785b      	ldrb	r3, [r3, #1]
 800be9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	4313      	orrs	r3, r2
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800beb2:	f107 0010 	add.w	r0, r7, #16
 800beb6:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800beba:	9302      	str	r3, [sp, #8]
 800bebc:	2300      	movs	r3, #0
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	f107 0314 	add.w	r3, r7, #20
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	230d      	movs	r3, #13
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	2103      	movs	r1, #3
 800becc:	f001 fe4c 	bl	800db68 <rfalTransceiveBlockingTxRx>
 800bed0:	4603      	mov	r3, r0
 800bed2:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 800bed4:	8abb      	ldrh	r3, [r7, #20]
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800bedc:	8afb      	ldrh	r3, [r7, #22]
 800bede:	2b15      	cmp	r3, #21
 800bee0:	d002      	beq.n	800bee8 <rfalNfcbPollerCheckPresence+0x9c>
 800bee2:	8afb      	ldrh	r3, [r7, #22]
 800bee4:	2b09      	cmp	r3, #9
 800bee6:	d104      	bne.n	800bef2 <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 800beee:	2300      	movs	r3, #0
 800bef0:	e00b      	b.n	800bf0a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 800bef2:	8afb      	ldrh	r3, [r7, #22]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d107      	bne.n	800bf08 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	4619      	mov	r1, r3
 800befe:	68b8      	ldr	r0, [r7, #8]
 800bf00:	f7ff ff57 	bl	800bdb2 <rfalNfcbCheckSensbRes>
 800bf04:	4603      	mov	r3, r0
 800bf06:	e000      	b.n	800bf0a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 800bf08:	8afb      	ldrh	r3, [r7, #22]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	20001414 	.word	0x20001414

0800bf18 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08a      	sub	sp, #40	; 0x28
 800bf1c:	af04      	add	r7, sp, #16
 800bf1e:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 800bf26:	2307      	movs	r3, #7
 800bf28:	e024      	b.n	800bf74 <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800bf2a:	2350      	movs	r3, #80	; 0x50
 800bf2c:	733b      	strb	r3, [r7, #12]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800bf32:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 800bf36:	f107 0208 	add.w	r2, r7, #8
 800bf3a:	f107 000c 	add.w	r0, r7, #12
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <rfalNfcbPollerSleep+0x64>)
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	2300      	movs	r3, #0
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	f107 0314 	add.w	r3, r7, #20
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	2105      	movs	r1, #5
 800bf50:	f001 fe0a 	bl	800db68 <rfalTransceiveBlockingTxRx>
 800bf54:	4603      	mov	r3, r0
 800bf56:	82fb      	strh	r3, [r7, #22]
 800bf58:	8afb      	ldrh	r3, [r7, #22]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <rfalNfcbPollerSleep+0x4a>
 800bf5e:	8afb      	ldrh	r3, [r7, #22]
 800bf60:	e008      	b.n	800bf74 <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 800bf62:	8abb      	ldrh	r3, [r7, #20]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d102      	bne.n	800bf6e <rfalNfcbPollerSleep+0x56>
 800bf68:	7a3b      	ldrb	r3, [r7, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 800bf6e:	230b      	movs	r3, #11
 800bf70:	e000      	b.n	800bf74 <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	0003a278 	.word	0x0003a278

0800bf80 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08a      	sub	sp, #40	; 0x28
 800bf84:	af04      	add	r7, sp, #16
 800bf86:	4603      	mov	r3, r0
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
 800bf8c:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d008      	beq.n	800bfa6 <rfalNfcbPollerSlotMarker+0x26>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d005      	beq.n	800bfa6 <rfalNfcbPollerSlotMarker+0x26>
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b10      	cmp	r3, #16
 800bfa4:	d901      	bls.n	800bfaa <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 800bfa6:	2307      	movs	r3, #7
 800bfa8:	e02f      	b.n	800c00a <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	b25b      	sxtb	r3, r3
 800bfb0:	f043 0305 	orr.w	r3, r3, #5
 800bfb4:	b25b      	sxtb	r3, r3
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 800bfba:	f107 0014 	add.w	r0, r7, #20
 800bfbe:	4b15      	ldr	r3, [pc, #84]	; (800c014 <rfalNfcbPollerSlotMarker+0x94>)
 800bfc0:	9302      	str	r3, [sp, #8]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	f107 0312 	add.w	r3, r7, #18
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	230d      	movs	r3, #13
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	f001 fdc9 	bl	800db68 <rfalTransceiveBlockingTxRx>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 800bfda:	8a7b      	ldrh	r3, [r7, #18]
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800bfe2:	8afb      	ldrh	r3, [r7, #22]
 800bfe4:	2b15      	cmp	r3, #21
 800bfe6:	d002      	beq.n	800bfee <rfalNfcbPollerSlotMarker+0x6e>
 800bfe8:	8afb      	ldrh	r3, [r7, #22]
 800bfea:	2b09      	cmp	r3, #9
 800bfec:	d101      	bne.n	800bff2 <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 800bfee:	231d      	movs	r3, #29
 800bff0:	e00b      	b.n	800c00a <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 800bff2:	8afb      	ldrh	r3, [r7, #22]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d107      	bne.n	800c008 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	4619      	mov	r1, r3
 800bffe:	68b8      	ldr	r0, [r7, #8]
 800c000:	f7ff fed7 	bl	800bdb2 <rfalNfcbCheckSensbRes>
 800c004:	4603      	mov	r3, r0
 800c006:	e000      	b.n	800c00a <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 800c008:	8afb      	ldrh	r3, [r7, #22]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3718      	adds	r7, #24
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	0003a278 	.word	0x0003a278

0800c018 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	2100      	movs	r1, #0
 800c02c:	2000      	movs	r0, #0
 800c02e:	f7ff ff0d 	bl	800be4c <rfalNfcbPollerCheckPresence>
 800c032:	4603      	mov	r3, r0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08a      	sub	sp, #40	; 0x28
 800c040:	af04      	add	r7, sp, #16
 800c042:	60ba      	str	r2, [r7, #8]
 800c044:	607b      	str	r3, [r7, #4]
 800c046:	4603      	mov	r3, r0
 800c048:	73fb      	strb	r3, [r7, #15]
 800c04a:	460b      	mov	r3, r1
 800c04c:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 800c04e:	7bb9      	ldrb	r1, [r7, #14]
 800c050:	7bf8      	ldrb	r0, [r7, #15]
 800c052:	f107 0317 	add.w	r3, r7, #23
 800c056:	9302      	str	r3, [sp, #8]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	9301      	str	r3, [sp, #4]
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	2304      	movs	r3, #4
 800c062:	2200      	movs	r2, #0
 800c064:	f000 f805 	bl	800c072 <rfalNfcbPollerSlottedCollisionResolution>
 800c068:	4603      	mov	r3, r0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 800c072:	b590      	push	{r4, r7, lr}
 800c074:	b085      	sub	sp, #20
 800c076:	af00      	add	r7, sp, #0
 800c078:	4604      	mov	r4, r0
 800c07a:	4608      	mov	r0, r1
 800c07c:	4611      	mov	r1, r2
 800c07e:	461a      	mov	r2, r3
 800c080:	4623      	mov	r3, r4
 800c082:	71fb      	strb	r3, [r7, #7]
 800c084:	4603      	mov	r3, r0
 800c086:	71bb      	strb	r3, [r7, #6]
 800c088:	460b      	mov	r3, r1
 800c08a:	717b      	strb	r3, [r7, #5]
 800c08c:	4613      	mov	r3, r2
 800c08e:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d011      	beq.n	800c0ba <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00e      	beq.n	800c0ba <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00b      	beq.n	800c0ba <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c0a2:	797b      	ldrb	r3, [r7, #5]
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	d808      	bhi.n	800c0ba <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c0a8:	793b      	ldrb	r3, [r7, #4]
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	d805      	bhi.n	800c0ba <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d104      	bne.n	800c0be <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 800c0b4:	797b      	ldrb	r3, [r7, #5]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 800c0ba:	2307      	movs	r3, #7
 800c0bc:	e14c      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d010      	beq.n	800c0fa <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	7979      	ldrb	r1, [r7, #5]
 800c0e0:	2008      	movs	r0, #8
 800c0e2:	f7ff feb3 	bl	800be4c <rfalNfcbPollerCheckPresence>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 800c0ea:	89fb      	ldrh	r3, [r7, #14]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <rfalNfcbPollerSlottedCollisionResolution+0x88>
 800c0f0:	797b      	ldrb	r3, [r7, #5]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 800c0f6:	89fb      	ldrh	r3, [r7, #14]
 800c0f8:	e12e      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 800c0fa:	79fb      	ldrb	r3, [r7, #7]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d105      	bne.n	800c10c <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 800c100:	6a3b      	ldr	r3, [r7, #32]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 800c108:	2309      	movs	r3, #9
 800c10a:	e125      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800c10c:	797b      	ldrb	r3, [r7, #5]
 800c10e:	737b      	strb	r3, [r7, #13]
 800c110:	e11c      	b.n	800c34c <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d11a      	bne.n	800c14e <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 800c118:	7afb      	ldrb	r3, [r7, #11]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d017      	beq.n	800c14e <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[((*devCnt) - (uint8_t)1U)].sensbRes.nfcid0 );
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	4613      	mov	r3, r2
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	3b0f      	subs	r3, #15
 800c12c:	6a3a      	ldr	r2, [r7, #32]
 800c12e:	4413      	add	r3, r2
 800c130:	3302      	adds	r3, #2
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff fef0 	bl	800bf18 <rfalNfcbPollerSleep>
                    nfcbDevList[((*devCnt) - (uint8_t)1U)].isSleep = true;
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	4613      	mov	r3, r2
 800c140:	011b      	lsls	r3, r3, #4
 800c142:	1a9b      	subs	r3, r3, r2
 800c144:	3b0f      	subs	r3, #15
 800c146:	6a3a      	ldr	r2, [r7, #32]
 800c148:	4413      	add	r3, r2
 800c14a:	2201      	movs	r2, #1
 800c14c:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 800c14e:	7b7a      	ldrb	r2, [r7, #13]
 800c150:	797b      	ldrb	r3, [r7, #5]
 800c152:	429a      	cmp	r2, r3
 800c154:	d103      	bne.n	800c15e <rfalNfcbPollerSlottedCollisionResolution+0xec>
 800c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d017      	beq.n	800c18e <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	461a      	mov	r2, r3
 800c164:	4613      	mov	r3, r2
 800c166:	011b      	lsls	r3, r3, #4
 800c168:	1a9b      	subs	r3, r3, r2
 800c16a:	6a3a      	ldr	r2, [r7, #32]
 800c16c:	4413      	add	r3, r2
 800c16e:	1c58      	adds	r0, r3, #1
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	461a      	mov	r2, r3
 800c176:	4613      	mov	r3, r2
 800c178:	011b      	lsls	r3, r3, #4
 800c17a:	1a9b      	subs	r3, r3, r2
 800c17c:	6a3a      	ldr	r2, [r7, #32]
 800c17e:	4413      	add	r3, r2
 800c180:	7b79      	ldrb	r1, [r7, #13]
 800c182:	4602      	mov	r2, r0
 800c184:	2000      	movs	r0, #0
 800c186:	f7ff fe61 	bl	800be4c <rfalNfcbPollerCheckPresence>
 800c18a:	4603      	mov	r3, r0
 800c18c:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 800c19c:	7b3b      	ldrb	r3, [r7, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d017      	beq.n	800c1d2 <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	011b      	lsls	r3, r3, #4
 800c1ac:	1a9b      	subs	r3, r3, r2
 800c1ae:	6a3a      	ldr	r2, [r7, #32]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	1c59      	adds	r1, r3, #1
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	011b      	lsls	r3, r3, #4
 800c1be:	1a9b      	subs	r3, r3, r2
 800c1c0:	6a3a      	ldr	r2, [r7, #32]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	7b3b      	ldrb	r3, [r7, #12]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7ff fed9 	bl	800bf80 <rfalNfcbPollerSlotMarker>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 800c1d2:	89fb      	ldrh	r3, [r7, #14]
 800c1d4:	2b04      	cmp	r3, #4
 800c1d6:	f000 809d 	beq.w	800c314 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	1a9b      	subs	r3, r3, r2
 800c1e6:	6a3a      	ldr	r2, [r7, #32]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	1c58      	adds	r0, r3, #1
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	1a9b      	subs	r3, r3, r2
 800c1f8:	6a3a      	ldr	r2, [r7, #32]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	4619      	mov	r1, r3
 800c200:	f7ff fdd7 	bl	800bdb2 <rfalNfcbCheckSensbRes>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d177      	bne.n	800c2fa <rfalNfcbPollerSlottedCollisionResolution+0x288>
 800c20a:	89fb      	ldrh	r3, [r7, #14]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d174      	bne.n	800c2fa <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	461a      	mov	r2, r3
 800c216:	4613      	mov	r3, r2
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	1a9b      	subs	r3, r3, r2
 800c21c:	6a3a      	ldr	r2, [r7, #32]
 800c21e:	4413      	add	r3, r2
 800c220:	2200      	movs	r2, #0
 800c222:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d107      	bne.n	800c23a <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	3301      	adds	r3, #1
 800c230:	b2da      	uxtb	r2, r3
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	701a      	strb	r2, [r3, #0]
                                return ret;
 800c236:	89fb      	ldrh	r3, [r7, #14]
 800c238:	e08e      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d12b      	bne.n	800c298 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	3301      	adds	r3, #1
 800c246:	b2da      	uxtb	r2, r3
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800c24c:	7afb      	ldrb	r3, [r7, #11]
 800c24e:	3301      	adds	r3, #1
 800c250:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800c252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	79ba      	ldrb	r2, [r7, #6]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d902      	bls.n	800c262 <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 800c25c:	7b7b      	ldrb	r3, [r7, #13]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 800c262:	89fb      	ldrh	r3, [r7, #14]
 800c264:	e078      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	4613      	mov	r3, r2
 800c26e:	011b      	lsls	r3, r3, #4
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	3b0f      	subs	r3, #15
 800c274:	6a3a      	ldr	r2, [r7, #32]
 800c276:	4413      	add	r3, r2
 800c278:	3302      	adds	r3, #2
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff fe4c 	bl	800bf18 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	461a      	mov	r2, r3
 800c286:	4613      	mov	r3, r2
 800c288:	011b      	lsls	r3, r3, #4
 800c28a:	1a9b      	subs	r3, r3, r2
 800c28c:	3b0f      	subs	r3, #15
 800c28e:	6a3a      	ldr	r2, [r7, #32]
 800c290:	4413      	add	r3, r2
 800c292:	2201      	movs	r2, #1
 800c294:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800c296:	e03c      	b.n	800c312 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d139      	bne.n	800c312 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 800c29e:	7afb      	ldrb	r3, [r7, #11]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d017      	beq.n	800c2d4 <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt) - (uint8_t)1U].sensbRes.nfcid0 );
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	3b0f      	subs	r3, #15
 800c2b2:	6a3a      	ldr	r2, [r7, #32]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	3302      	adds	r3, #2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff fe2d 	bl	800bf18 <rfalNfcbPollerSleep>
                                    nfcbDevList[(*devCnt) - (uint8_t)1U].isSleep = true;
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	011b      	lsls	r3, r3, #4
 800c2c8:	1a9b      	subs	r3, r3, r2
 800c2ca:	3b0f      	subs	r3, #15
 800c2cc:	6a3a      	ldr	r2, [r7, #32]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2de:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	79ba      	ldrb	r2, [r7, #6]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d902      	bls.n	800c2f6 <rfalNfcbPollerSlottedCollisionResolution+0x284>
 800c2f0:	7b7b      	ldrb	r3, [r7, #13]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10d      	bne.n	800c312 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 800c2f6:	89fb      	ldrh	r3, [r7, #14]
 800c2f8:	e02e      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800c2fa:	79bb      	ldrb	r3, [r7, #6]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d104      	bne.n	800c30a <rfalNfcbPollerSlottedCollisionResolution+0x298>
 800c300:	7b7b      	ldrb	r3, [r7, #13]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 800c306:	231d      	movs	r3, #29
 800c308:	e026      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	2201      	movs	r2, #1
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	e000      	b.n	800c314 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800c312:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 800c314:	7b3b      	ldrb	r3, [r7, #12]
 800c316:	3301      	adds	r3, #1
 800c318:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 800c31a:	7b7b      	ldrb	r3, [r7, #13]
 800c31c:	2201      	movs	r2, #1
 800c31e:	fa02 f303 	lsl.w	r3, r2, r3
 800c322:	b2db      	uxtb	r3, r3
 800c324:	7b3a      	ldrb	r2, [r7, #12]
 800c326:	429a      	cmp	r2, r3
 800c328:	f4ff af38 	bcc.w	800c19c <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	f083 0301 	eor.w	r3, r3, #1
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 800c33a:	2300      	movs	r3, #0
 800c33c:	e00c      	b.n	800c358 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 800c33e:	7afb      	ldrb	r3, [r7, #11]
 800c340:	2b00      	cmp	r3, #0
 800c342:	f47f aee6 	bne.w	800c112 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800c346:	7b7b      	ldrb	r3, [r7, #13]
 800c348:	3301      	adds	r3, #1
 800c34a:	737b      	strb	r3, [r7, #13]
 800c34c:	7b7a      	ldrb	r2, [r7, #13]
 800c34e:	793b      	ldrb	r3, [r7, #4]
 800c350:	429a      	cmp	r2, r3
 800c352:	f67f aede 	bls.w	800c112 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd90      	pop	{r4, r7, pc}

0800c360 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	4603      	mov	r3, r0
 800c368:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 800c36a:	4a0a      	ldr	r2, [pc, #40]	; (800c394 <rfalNfcbTR2ToFDT+0x34>)
 800c36c:	f107 0308 	add.w	r3, r7, #8
 800c370:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c374:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	005b      	lsls	r3, r3, #1
 800c380:	f107 0210 	add.w	r2, r7, #16
 800c384:	4413      	add	r3, r2
 800c386:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	bc80      	pop	{r7}
 800c392:	4770      	bx	lr
 800c394:	08013550 	.word	0x08013550

0800c398 <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 800c398:	b5b0      	push	{r4, r5, r7, lr}
 800c39a:	b08c      	sub	sp, #48	; 0x30
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	71fb      	strb	r3, [r7, #7]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800c3ae:	e0e5      	b.n	800c57c <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 800c3b6:	4b78      	ldr	r3, [pc, #480]	; (800c598 <rfalNfcfComputeValidSENF+0x200>)
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	4b76      	ldr	r3, [pc, #472]	; (800c598 <rfalNfcfComputeValidSENF+0x200>)
 800c3c0:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 800c3c2:	4b75      	ldr	r3, [pc, #468]	; (800c598 <rfalNfcfComputeValidSENF+0x200>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4413      	add	r3, r2
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4a71      	ldr	r2, [pc, #452]	; (800c598 <rfalNfcfComputeValidSENF+0x200>)
 800c3d2:	4413      	add	r3, r2
 800c3d4:	3302      	adds	r3, #2
 800c3d6:	f107 0414 	add.w	r4, r7, #20
 800c3da:	461d      	mov	r5, r3
 800c3dc:	6828      	ldr	r0, [r5, #0]
 800c3de:	6869      	ldr	r1, [r5, #4]
 800c3e0:	68aa      	ldr	r2, [r5, #8]
 800c3e2:	68eb      	ldr	r3, [r5, #12]
 800c3e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3e6:	8a2b      	ldrh	r3, [r5, #16]
 800c3e8:	7caa      	ldrb	r2, [r5, #18]
 800c3ea:	8023      	strh	r3, [r4, #0]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 800c3f0:	f107 0314 	add.w	r3, r7, #20
 800c3f4:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c3fc:	e01b      	b.n	800c436 <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	1c98      	adds	r0, r3, #2
 800c402:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c406:	4613      	mov	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	4413      	add	r3, r2
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	4413      	add	r3, r2
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4413      	add	r3, r2
 800c414:	3302      	adds	r3, #2
 800c416:	2208      	movs	r2, #8
 800c418:	4619      	mov	r1, r3
 800c41a:	f005 fe71 	bl	8012100 <memcmp>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d103      	bne.n	800c42c <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 800c424:	2301      	movs	r3, #1
 800c426:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800c42a:	e00a      	b.n	800c442 <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800c42c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c430:	3301      	adds	r3, #1
 800c432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c43e:	429a      	cmp	r2, r3
 800c440:	d3dd      	bcc.n	800c3fe <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 800c442:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c446:	2b00      	cmp	r3, #0
 800c448:	d006      	beq.n	800c458 <rfalNfcfComputeValidSENF+0xc0>
 800c44a:	79bb      	ldrb	r3, [r7, #6]
 800c44c:	f083 0301 	eor.w	r3, r3, #1
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b00      	cmp	r3, #0
 800c454:	d000      	beq.n	800c458 <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 800c456:	e091      	b.n	800c57c <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	3b02      	subs	r3, #2
 800c45e:	2b0f      	cmp	r3, #15
 800c460:	f240 808c 	bls.w	800c57c <rfalNfcfComputeValidSENF+0x1e4>
 800c464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	3b02      	subs	r3, #2
 800c46a:	2b12      	cmp	r3, #18
 800c46c:	d900      	bls.n	800c470 <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 800c46e:	e085      	b.n	800c57c <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d000      	beq.n	800c47a <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 800c478:	e080      	b.n	800c57c <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 800c47a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d02a      	beq.n	800c4d8 <rfalNfcfComputeValidSENF+0x140>
 800c482:	79bb      	ldrb	r3, [r7, #6]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d027      	beq.n	800c4d8 <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48a:	7819      	ldrb	r1, [r3, #0]
 800c48c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c490:	4613      	mov	r3, r2
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	4413      	add	r3, r2
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	4413      	add	r3, r2
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	4413      	add	r3, r2
 800c49e:	1e4a      	subs	r2, r1, #1
 800c4a0:	b2d2      	uxtb	r2, r2
 800c4a2:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 800c4a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	4413      	add	r3, r2
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	4413      	add	r3, r2
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	1c58      	adds	r0, r3, #1
 800c4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ba:	1c59      	adds	r1, r3, #1
 800c4bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	4413      	add	r3, r2
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	4413      	add	r3, r2
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f005 fe23 	bl	801211c <memcpy>
            continue;
 800c4d6:	e051      	b.n	800c57c <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4da:	7819      	ldrb	r1, [r3, #0]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	4413      	add	r3, r2
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	1e4a      	subs	r2, r1, #1
 800c4f2:	b2d2      	uxtb	r2, r2
 800c4f4:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	4413      	add	r3, r2
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	4413      	add	r3, r2
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	4413      	add	r3, r2
 800c50a:	1c58      	adds	r0, r3, #1
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	1c59      	adds	r1, r3, #1
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	4613      	mov	r3, r2
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	4413      	add	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4413      	add	r3, r2
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	4413      	add	r3, r2
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	f005 fdf8 	bl	801211c <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	4613      	mov	r3, r2
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	4413      	add	r3, r2
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4413      	add	r3, r2
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	4413      	add	r3, r2
 800c540:	789b      	ldrb	r3, [r3, #2]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d10e      	bne.n	800c564 <rfalNfcfComputeValidSENF+0x1cc>
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	4613      	mov	r3, r2
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	4413      	add	r3, r2
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	4413      	add	r3, r2
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	78db      	ldrb	r3, [r3, #3]
 800c55c:	2bfe      	cmp	r3, #254	; 0xfe
 800c55e:	d101      	bne.n	800c564 <rfalNfcfComputeValidSENF+0x1cc>
 800c560:	2301      	movs	r3, #1
 800c562:	e000      	b.n	800c566 <rfalNfcfComputeValidSENF+0x1ce>
 800c564:	2300      	movs	r3, #0
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c56e:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	3301      	adds	r3, #1
 800c576:	b2da      	uxtb	r2, r3
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800c57c:	4b06      	ldr	r3, [pc, #24]	; (800c598 <rfalNfcfComputeValidSENF+0x200>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d005      	beq.n	800c590 <rfalNfcfComputeValidSENF+0x1f8>
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	79fa      	ldrb	r2, [r7, #7]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	f63f af10 	bhi.w	800c3b0 <rfalNfcfComputeValidSENF+0x18>
    }
}
 800c590:	bf00      	nop
 800c592:	3730      	adds	r7, #48	; 0x30
 800c594:	46bd      	mov	sp, r7
 800c596:	bdb0      	pop	{r4, r5, r7, pc}
 800c598:	20001418 	.word	0x20001418

0800c59c <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d004      	beq.n	800c5b6 <rfalNfcfPollerInitialize+0x1a>
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d001      	beq.n	800c5b6 <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 800c5b2:	2307      	movs	r3, #7
 800c5b4:	e01b      	b.n	800c5ee <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 800c5b6:	79fa      	ldrb	r2, [r7, #7]
 800c5b8:	79fb      	ldrb	r3, [r7, #7]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	2006      	movs	r0, #6
 800c5be:	f000 fbbb 	bl	800cd38 <rfalSetMode>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	81fb      	strh	r3, [r7, #14]
 800c5c6:	89fb      	ldrh	r3, [r7, #14]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <rfalNfcfPollerInitialize+0x34>
 800c5cc:	89fb      	ldrh	r3, [r7, #14]
 800c5ce:	e00e      	b.n	800c5ee <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800c5d0:	2001      	movs	r0, #1
 800c5d2:	f000 fff5 	bl	800d5c0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 800c5d6:	4808      	ldr	r0, [pc, #32]	; (800c5f8 <rfalNfcfPollerInitialize+0x5c>)
 800c5d8:	f001 f846 	bl	800d668 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 800c5dc:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 800c5e0:	f001 f82e 	bl	800d640 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 800c5e4:	f641 2090 	movw	r0, #6800	; 0x1a90
 800c5e8:	f001 f80c 	bl	800d604 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	00042360 	.word	0x00042360

0800c5fc <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 800c5fc:	b590      	push	{r4, r7, lr}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af04      	add	r7, sp, #16
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	4603      	mov	r3, r0
 800c606:	71fb      	strb	r3, [r7, #7]
 800c608:	460b      	mov	r3, r1
 800c60a:	80bb      	strh	r3, [r7, #4]
 800c60c:	4613      	mov	r3, r2
 800c60e:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	3301      	adds	r3, #1
 800c614:	b2db      	uxtb	r3, r3
 800c616:	79bc      	ldrb	r4, [r7, #6]
 800c618:	88b9      	ldrh	r1, [r7, #4]
 800c61a:	79f8      	ldrb	r0, [r7, #7]
 800c61c:	69fa      	ldr	r2, [r7, #28]
 800c61e:	9202      	str	r2, [sp, #8]
 800c620:	69ba      	ldr	r2, [r7, #24]
 800c622:	9201      	str	r2, [sp, #4]
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	4622      	mov	r2, r4
 800c62a:	f002 fd81 	bl	800f130 <rfalFeliCaPoll>
 800c62e:	4603      	mov	r3, r0
}
 800c630:	4618      	mov	r0, r3
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	bd90      	pop	{r4, r7, pc}

0800c638 <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 800c63e:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <rfalNfcfPollerCheckPresence+0x34>)
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 800c644:	4b09      	ldr	r3, [pc, #36]	; (800c66c <rfalNfcfPollerCheckPresence+0x34>)
 800c646:	2200      	movs	r2, #0
 800c648:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <rfalNfcfPollerCheckPresence+0x38>)
 800c64c:	9302      	str	r3, [sp, #8]
 800c64e:	4b07      	ldr	r3, [pc, #28]	; (800c66c <rfalNfcfPollerCheckPresence+0x34>)
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	2304      	movs	r3, #4
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	4b07      	ldr	r3, [pc, #28]	; (800c674 <rfalNfcfPollerCheckPresence+0x3c>)
 800c658:	2200      	movs	r2, #0
 800c65a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c65e:	2003      	movs	r0, #3
 800c660:	f002 fd66 	bl	800f130 <rfalFeliCaPoll>
 800c664:	4603      	mov	r3, r0
}
 800c666:	4618      	mov	r0, r3
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20001418 	.word	0x20001418
 800c670:	20001419 	.word	0x20001419
 800c674:	2000141a 	.word	0x2000141a

0800c678 <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b088      	sub	sp, #32
 800c67c:	af02      	add	r7, sp, #8
 800c67e:	60ba      	str	r2, [r7, #8]
 800c680:	607b      	str	r3, [r7, #4]
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]
 800c686:	460b      	mov	r3, r1
 800c688:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <rfalNfcfPollerCollisionResolution+0x1e>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800c696:	2307      	movs	r3, #7
 800c698:	e053      	b.n	800c742 <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <rfalNfcfPollerCollisionResolution+0x36>
 800c6aa:	7bba      	ldrb	r2, [r7, #14]
 800c6ac:	e000      	b.n	800c6b0 <rfalNfcfPollerCollisionResolution+0x38>
 800c6ae:	2204      	movs	r2, #4
 800c6b0:	f107 0315 	add.w	r3, r7, #21
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	68b8      	ldr	r0, [r7, #8]
 800c6bc:	f7ff fe6c 	bl	800c398 <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	7bba      	ldrb	r2, [r7, #14]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d93a      	bls.n	800c740 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800c6d0:	4b1e      	ldr	r3, [pc, #120]	; (800c74c <rfalNfcfPollerCollisionResolution+0xd4>)
 800c6d2:	9301      	str	r3, [sp, #4]
 800c6d4:	4b1e      	ldr	r3, [pc, #120]	; (800c750 <rfalNfcfPollerCollisionResolution+0xd8>)
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	4b1e      	ldr	r3, [pc, #120]	; (800c754 <rfalNfcfPollerCollisionResolution+0xdc>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c6e0:	200f      	movs	r0, #15
 800c6e2:	f7ff ff8b 	bl	800c5fc <rfalNfcfPollerPoll>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 800c6ea:	8afb      	ldrh	r3, [r7, #22]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d108      	bne.n	800c702 <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 800c6f0:	7bba      	ldrb	r2, [r7, #14]
 800c6f2:	f107 0315 	add.w	r3, r7, #21
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	68b8      	ldr	r0, [r7, #8]
 800c6fe:	f7ff fe4b 	bl	800c398 <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 800c702:	7d7b      	ldrb	r3, [r7, #21]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d01b      	beq.n	800c740 <rfalNfcfPollerCollisionResolution+0xc8>
 800c708:	7bfb      	ldrb	r3, [r7, #15]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d118      	bne.n	800c740 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800c70e:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <rfalNfcfPollerCollisionResolution+0xd4>)
 800c710:	9301      	str	r3, [sp, #4]
 800c712:	4b0f      	ldr	r3, [pc, #60]	; (800c750 <rfalNfcfPollerCollisionResolution+0xd8>)
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <rfalNfcfPollerCollisionResolution+0xdc>)
 800c718:	2201      	movs	r2, #1
 800c71a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c71e:	200f      	movs	r0, #15
 800c720:	f7ff ff6c 	bl	800c5fc <rfalNfcfPollerPoll>
 800c724:	4603      	mov	r3, r0
 800c726:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 800c728:	8afb      	ldrh	r3, [r7, #22]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d108      	bne.n	800c740 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 800c72e:	7bba      	ldrb	r2, [r7, #14]
 800c730:	f107 0315 	add.w	r3, r7, #21
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	2301      	movs	r3, #1
 800c738:	6879      	ldr	r1, [r7, #4]
 800c73a:	68b8      	ldr	r0, [r7, #8]
 800c73c:	f7ff fe2c 	bl	800c398 <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20001419 	.word	0x20001419
 800c750:	20001418 	.word	0x20001418
 800c754:	2000141a 	.word	0x2000141a

0800c758 <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 800c75e:	22ec      	movs	r2, #236	; 0xec
 800c760:	21ec      	movs	r1, #236	; 0xec
 800c762:	2007      	movs	r0, #7
 800c764:	f000 fae8 	bl	800cd38 <rfalSetMode>
 800c768:	4603      	mov	r3, r0
 800c76a:	80fb      	strh	r3, [r7, #6]
 800c76c:	88fb      	ldrh	r3, [r7, #6]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <rfalNfcvPollerInitialize+0x1e>
 800c772:	88fb      	ldrh	r3, [r7, #6]
 800c774:	e00e      	b.n	800c794 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800c776:	2001      	movs	r0, #1
 800c778:	f000 ff22 	bl	800d5c0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 800c77c:	4807      	ldr	r0, [pc, #28]	; (800c79c <rfalNfcvPollerInitialize+0x44>)
 800c77e:	f000 ff73 	bl	800d668 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 800c782:	f241 00d6 	movw	r0, #4310	; 0x10d6
 800c786:	f000 ff5b 	bl	800d640 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 800c78a:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 800c78e:	f000 ff39 	bl	800d604 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	000108d8 	.word	0x000108d8

0800c7a0 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	2020      	movs	r0, #32
 800c7b4:	f000 f815 	bl	800c7e2 <rfalNfcvPollerInventory>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 800c7bc:	89fb      	ldrh	r3, [r7, #14]
 800c7be:	2b1d      	cmp	r3, #29
 800c7c0:	d008      	beq.n	800c7d4 <rfalNfcvPollerCheckPresence+0x34>
 800c7c2:	89fb      	ldrh	r3, [r7, #14]
 800c7c4:	2b15      	cmp	r3, #21
 800c7c6:	d005      	beq.n	800c7d4 <rfalNfcvPollerCheckPresence+0x34>
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	2b09      	cmp	r3, #9
 800c7cc:	d002      	beq.n	800c7d4 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 800c7ce:	89fb      	ldrh	r3, [r7, #14]
 800c7d0:	2b0b      	cmp	r3, #11
 800c7d2:	d101      	bne.n	800c7d8 <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 800c7d8:	89fb      	ldrh	r3, [r7, #14]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b08c      	sub	sp, #48	; 0x30
 800c7e6:	af02      	add	r7, sp, #8
 800c7e8:	60ba      	str	r2, [r7, #8]
 800c7ea:	607b      	str	r3, [r7, #4]
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <rfalNfcvPollerInventory+0x1e>
 800c7fa:	7bbb      	ldrb	r3, [r7, #14]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <rfalNfcvPollerInventory+0x24>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 800c806:	2307      	movs	r3, #7
 800c808:	e051      	b.n	800c8ae <rfalNfcvPollerInventory+0xcc>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	f043 0306 	orr.w	r3, r3, #6
 800c810:	b2db      	uxtb	r3, r3
 800c812:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 800c814:	2301      	movs	r3, #1
 800c816:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 800c818:	7bbb      	ldrb	r3, [r7, #14]
 800c81a:	7bfa      	ldrb	r2, [r7, #15]
 800c81c:	2a20      	cmp	r2, #32
 800c81e:	d101      	bne.n	800c824 <rfalNfcvPollerInventory+0x42>
 800c820:	2240      	movs	r2, #64	; 0x40
 800c822:	e000      	b.n	800c826 <rfalNfcvPollerInventory+0x44>
 800c824:	223c      	movs	r2, #60	; 0x3c
 800c826:	429a      	cmp	r2, r3
 800c828:	d806      	bhi.n	800c838 <rfalNfcvPollerInventory+0x56>
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
 800c82c:	2b20      	cmp	r3, #32
 800c82e:	d101      	bne.n	800c834 <rfalNfcvPollerInventory+0x52>
 800c830:	2340      	movs	r3, #64	; 0x40
 800c832:	e002      	b.n	800c83a <rfalNfcvPollerInventory+0x58>
 800c834:	233c      	movs	r3, #60	; 0x3c
 800c836:	e000      	b.n	800c83a <rfalNfcvPollerInventory+0x58>
 800c838:	7bbb      	ldrb	r3, [r7, #14]
 800c83a:	76bb      	strb	r3, [r7, #26]
    
    if( (rfalConvBitsToBytes(invReq.MASK_LEN) > 0U) && (maskVal != NULL) )  /* MISRA 21.18 & 1.3 */
 800c83c:	7ebb      	ldrb	r3, [r7, #26]
 800c83e:	3307      	adds	r3, #7
 800c840:	08db      	lsrs	r3, r3, #3
 800c842:	b29b      	uxth	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00e      	beq.n	800c866 <rfalNfcvPollerInventory+0x84>
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00b      	beq.n	800c866 <rfalNfcvPollerInventory+0x84>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 800c84e:	7ebb      	ldrb	r3, [r7, #26]
 800c850:	3307      	adds	r3, #7
 800c852:	08db      	lsrs	r3, r3, #3
 800c854:	b29b      	uxth	r3, r3
 800c856:	461a      	mov	r2, r3
 800c858:	f107 0318 	add.w	r3, r7, #24
 800c85c:	3303      	adds	r3, #3
 800c85e:	68b9      	ldr	r1, [r7, #8]
 800c860:	4618      	mov	r0, r3
 800c862:	f005 fc5b 	bl	801211c <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800c866:	7ebb      	ldrb	r3, [r7, #26]
 800c868:	3307      	adds	r3, #7
 800c86a:	08db      	lsrs	r3, r3, #3
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	3303      	adds	r3, #3
 800c870:	b2d9      	uxtb	r1, r3
 800c872:	f107 0018 	add.w	r0, r7, #24
 800c876:	f107 0316 	add.w	r3, r7, #22
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	230c      	movs	r3, #12
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	f002 fb88 	bl	800ef94 <rfalISO15693TransceiveAnticollisionFrame>
 800c884:	4603      	mov	r3, r0
 800c886:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 800c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <rfalNfcvPollerInventory+0xb2>
    {
        *rcvdLen = rxLen;
 800c88e:	8afa      	ldrh	r2, [r7, #22]
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 800c894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c896:	2b00      	cmp	r3, #0
 800c898:	d108      	bne.n	800c8ac <rfalNfcvPollerInventory+0xca>
    {
        /* Check for valid INVENTORY_RES   Digital 2.2  9.6.2.1 & 9.6.2.3 */
        if( !rfalNfcvCheckInvRes( invRes->RES_FLAG, rxLen ) )
 800c89a:	8afb      	ldrh	r3, [r7, #22]
 800c89c:	2b60      	cmp	r3, #96	; 0x60
 800c89e:	d103      	bne.n	800c8a8 <rfalNfcvPollerInventory+0xc6>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <rfalNfcvPollerInventory+0xca>
        {
            return ERR_PROTO;
 800c8a8:	230b      	movs	r3, #11
 800c8aa:	e000      	b.n	800c8ae <rfalNfcvPollerInventory+0xcc>
        }
    }
    
    return ret;
 800c8ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3728      	adds	r7, #40	; 0x28
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b0ae      	sub	sp, #184	; 0xb8
 800c8ba:	af02      	add	r7, sp, #8
 800c8bc:	60ba      	str	r2, [r7, #8]
 800c8be:	607b      	str	r3, [r7, #4]
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	73fb      	strb	r3, [r7, #15]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d002      	beq.n	800c8d4 <rfalNfcvPollerCollisionResolution+0x1e>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800c8d4:	2307      	movs	r3, #7
 800c8d6:	e1a3      	b.n	800cc20 <rfalNfcvPollerCollisionResolution+0x36a>
    }

    /* Initialize parameters */
    *devCnt = 0;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 800c8f0:	f107 0314 	add.w	r3, r7, #20
 800c8f4:	2290      	movs	r2, #144	; 0x90
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f005 fc37 	bl	801216c <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00a      	beq.n	800c91a <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 800c904:	7bba      	ldrb	r2, [r7, #14]
 800c906:	4613      	mov	r3, r2
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	4413      	add	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	461a      	mov	r2, r3
 800c912:	2100      	movs	r1, #0
 800c914:	68b8      	ldr	r0, [r7, #8]
 800c916:	f005 fc29 	bl	801216c <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d12b      	bne.n	800c978 <rfalNfcvPollerCollisionResolution+0xc2>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.1  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2200      	movs	r2, #0
 800c924:	9200      	str	r2, [sp, #0]
 800c926:	2200      	movs	r2, #0
 800c928:	2100      	movs	r1, #0
 800c92a:	2020      	movs	r0, #32
 800c92c:	f7ff ff59 	bl	800c7e2 <rfalNfcvPollerInventory>
 800c930:	4603      	mov	r3, r0
 800c932:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.1  9.3.7.2 (Symbol 1)  */
 800c936:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d101      	bne.n	800c942 <rfalNfcvPollerCollisionResolution+0x8c>
        {
            return ERR_NONE;
 800c93e:	2300      	movs	r3, #0
 800c940:	e16e      	b.n	800cc20 <rfalNfcvPollerCollisionResolution+0x36a>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.1  9.3.7.3 (Symbol 2)  */
 800c942:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c946:	2b00      	cmp	r3, #0
 800c948:	d107      	bne.n	800c95a <rfalNfcvPollerCollisionResolution+0xa4>
        {
            (*devCnt)++;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	b2da      	uxtb	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 800c956:	2300      	movs	r3, #0
 800c958:	e162      	b.n	800cc20 <rfalNfcvPollerCollisionResolution+0x36a>
        }

        /* A Collision has been identified  Activity 2.1  9.3.7.4  (Symbol 3) */
        colPending = true;
 800c95a:	2301      	movs	r3, #1
 800c95c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 800c960:	2301      	movs	r3, #1
 800c962:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.1  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 800c966:	7bbb      	ldrb	r3, [r7, #14]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d101      	bne.n	800c970 <rfalNfcvPollerCollisionResolution+0xba>
        {
            return ERR_RF_COLLISION;
 800c96c:	231d      	movs	r3, #29
 800c96e:	e157      	b.n	800cc20 <rfalNfcvPollerCollisionResolution+0x36a>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800c970:	2004      	movs	r0, #4
 800c972:	f7f4 fffd 	bl	8001970 <HAL_Delay>
 800c976:	e005      	b.n	800c984 <rfalNfcvPollerCollisionResolution+0xce>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 800c978:	2301      	movs	r3, #1
 800c97a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 800c97e:	2301      	movs	r3, #1
 800c980:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.1 9.3.7.18  (Symbol 17) */
    do
    {
        /* Activity 2.1  9.3.7.7  (Symbol 6 / 7) */
        colPending = false;
 800c984:	2300      	movs	r3, #0
 800c986:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 800c990:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800c994:	2b00      	cmp	r3, #0
 800c996:	d12a      	bne.n	800c9ee <rfalNfcvPollerCollisionResolution+0x138>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.1  9.3.7.9  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 800c998:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800c99c:	4613      	mov	r3, r2
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800c9a6:	4413      	add	r3, r2
 800c9a8:	3b9c      	subs	r3, #156	; 0x9c
 800c9aa:	7818      	ldrb	r0, [r3, #0]
 800c9ac:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800c9b0:	f107 0114 	add.w	r1, r7, #20
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	00db      	lsls	r3, r3, #3
 800c9b8:	4413      	add	r3, r2
 800c9ba:	440b      	add	r3, r1
 800c9bc:	1c59      	adds	r1, r3, #1
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	005b      	lsls	r3, r3, #1
 800c9c8:	4413      	add	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	460a      	mov	r2, r1
 800c9de:	4601      	mov	r1, r0
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	f7ff fefe 	bl	800c7e2 <rfalNfcvPollerInventory>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800c9ec:	e013      	b.n	800ca16 <rfalNfcvPollerCollisionResolution+0x160>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	005b      	lsls	r3, r3, #1
 800c9f8:	4413      	add	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	4413      	add	r3, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 800ca08:	461a      	mov	r2, r3
 800ca0a:	210c      	movs	r1, #12
 800ca0c:	f002 fb7a 	bl	800f104 <rfalISO15693TransceiveEOFAnticollision>
 800ca10:	4603      	mov	r3, r0
 800ca12:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 800ca16:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 800ca20:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	f000 80dd 	beq.w	800cbe4 <rfalNfcvPollerCollisionResolution+0x32e>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800ca2a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ca2e:	2b5f      	cmp	r3, #95	; 0x5f
 800ca30:	d802      	bhi.n	800ca38 <rfalNfcvPollerCollisionResolution+0x182>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800ca32:	2004      	movs	r0, #4
 800ca34:	f7f4 ff9c 	bl	8001970 <HAL_Delay>
                }
                
                /* Check if response is a correct frame (no TxRx error)  Activity 2.1  9.3.7.11  (Symbol 10)*/
                if( (ret == ERR_NONE) || (ret == ERR_PROTO) )
 800ca38:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <rfalNfcvPollerCollisionResolution+0x192>
 800ca40:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800ca44:	2b0b      	cmp	r3, #11
 800ca46:	d119      	bne.n	800ca7c <rfalNfcvPollerCollisionResolution+0x1c6>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 800ca48:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ca4c:	2b60      	cmp	r3, #96	; 0x60
 800ca4e:	f040 80cd 	bne.w	800cbec <rfalNfcvPollerCollisionResolution+0x336>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	4613      	mov	r3, r2
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	4413      	add	r3, r2
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f040 80bf 	bne.w	800cbec <rfalNfcvPollerCollisionResolution+0x336>
                    {
                        /* Activity 2.1  9.3.7.12  (Symbol 11) */
                        (*devCnt)++;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	3301      	adds	r3, #1
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	701a      	strb	r2, [r3, #0]
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 800ca7a:	e0b7      	b.n	800cbec <rfalNfcvPollerCollisionResolution+0x336>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.1  9.3.7.17  (Symbol 16) */
                    colPending = true;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 800ca82:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	f200 80b1 	bhi.w	800cbee <rfalNfcvPollerCollisionResolution+0x338>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.1  9.3.7.17  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 800ca8c:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800ca90:	f107 0114 	add.w	r1, r7, #20
 800ca94:	4613      	mov	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	4413      	add	r3, r2
 800ca9a:	440b      	add	r3, r1
 800ca9c:	1c58      	adds	r0, r3, #1
 800ca9e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800caa2:	f107 0114 	add.w	r1, r7, #20
 800caa6:	4613      	mov	r3, r2
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	4413      	add	r3, r2
 800caac:	440b      	add	r3, r1
 800caae:	3301      	adds	r3, #1
 800cab0:	2208      	movs	r2, #8
 800cab2:	4619      	mov	r1, r3
 800cab4:	f005 fb32 	bl	801211c <memcpy>
                        colPos = colFound[colIt].maskLen;
 800cab8:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800cabc:	4613      	mov	r3, r2
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	4413      	add	r3, r2
 800cac2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cac6:	4413      	add	r3, r2
 800cac8:	3b9c      	subs	r3, #156	; 0x9c
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 800cad0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800cad4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800cad8:	08db      	lsrs	r3, r3, #3
 800cada:	b2d8      	uxtb	r0, r3
 800cadc:	4601      	mov	r1, r0
 800cade:	4613      	mov	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	4413      	add	r3, r2
 800cae4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cae8:	4413      	add	r3, r2
 800caea:	440b      	add	r3, r1
 800caec:	3b9b      	subs	r3, #155	; 0x9b
 800caee:	7819      	ldrb	r1, [r3, #0]
 800caf0:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800caf4:	f003 0307 	and.w	r3, r3, #7
 800caf8:	2201      	movs	r2, #1
 800cafa:	fa02 f303 	lsl.w	r3, r2, r3
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800cb08:	400b      	ands	r3, r1
 800cb0a:	b2d9      	uxtb	r1, r3
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	4413      	add	r3, r2
 800cb12:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cb16:	4413      	add	r3, r2
 800cb18:	4403      	add	r3, r0
 800cb1a:	3b9b      	subs	r3, #155	; 0x9b
 800cb1c:	460a      	mov	r2, r1
 800cb1e:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 800cb20:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800cb24:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800cb28:	08db      	lsrs	r3, r3, #3
 800cb2a:	b2d8      	uxtb	r0, r3
 800cb2c:	4601      	mov	r1, r0
 800cb2e:	4613      	mov	r3, r2
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	4413      	add	r3, r2
 800cb34:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cb38:	4413      	add	r3, r2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3b9b      	subs	r3, #155	; 0x9b
 800cb3e:	7819      	ldrb	r1, [r3, #0]
 800cb40:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800cb44:	1e5a      	subs	r2, r3, #1
 800cb46:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800cb4a:	f003 0307 	and.w	r3, r3, #7
 800cb4e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800cb58:	430b      	orrs	r3, r1
 800cb5a:	b2d9      	uxtb	r1, r3
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	4413      	add	r3, r2
 800cb62:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cb66:	4413      	add	r3, r2
 800cb68:	4403      	add	r3, r0
 800cb6a:	3b9b      	subs	r3, #155	; 0x9b
 800cb6c:	460a      	mov	r2, r1
 800cb6e:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 800cb70:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800cb74:	1e5a      	subs	r2, r3, #1
 800cb76:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	f1c3 0308 	rsb	r3, r3, #8
 800cb82:	fa22 f003 	lsr.w	r0, r2, r3
 800cb86:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800cb8a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800cb8e:	08db      	lsrs	r3, r3, #3
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	1c59      	adds	r1, r3, #1
 800cb94:	b2c0      	uxtb	r0, r0
 800cb96:	4613      	mov	r3, r2
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	4413      	add	r3, r2
 800cb9c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cba0:	4413      	add	r3, r2
 800cba2:	440b      	add	r3, r1
 800cba4:	3b9b      	subs	r3, #155	; 0x9b
 800cba6:	4602      	mov	r2, r0
 800cba8:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800cbaa:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800cbae:	4613      	mov	r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cbb8:	4413      	add	r3, r2
 800cbba:	3b9c      	subs	r3, #156	; 0x9c
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	b2d9      	uxtb	r1, r3
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	4413      	add	r3, r2
 800cbcc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cbd0:	4413      	add	r3, r2
 800cbd2:	3b9c      	subs	r3, #156	; 0x9c
 800cbd4:	460a      	mov	r2, r1
 800cbd6:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 800cbd8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800cbdc:	3301      	adds	r3, #1
 800cbde:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800cbe2:	e004      	b.n	800cbee <rfalNfcvPollerCollisionResolution+0x338>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800cbe4:	2004      	movs	r0, #4
 800cbe6:	f7f4 fec3 	bl	8001970 <HAL_Delay>
 800cbea:	e000      	b.n	800cbee <rfalNfcvPollerCollisionResolution+0x338>
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 800cbec:	bf00      	nop
            }
            
            /* Check if devices found have reached device limit   Activity 2.1  9.3.7.13  (Symbol 12) */
            if( *devCnt >= devLimit )
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	7bba      	ldrb	r2, [r7, #14]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d801      	bhi.n	800cbfc <rfalNfcvPollerCollisionResolution+0x346>
            {
                return ERR_NONE;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	e011      	b.n	800cc20 <rfalNfcvPollerCollisionResolution+0x36a>
            }
            
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 800cbfc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800cc00:	2b0f      	cmp	r3, #15
 800cc02:	f67f aec5 	bls.w	800c990 <rfalNfcvPollerCollisionResolution+0xda>
        colIt++;
 800cc06:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 800cc10:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800cc14:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	f4ff aeb3 	bcc.w	800c984 <rfalNfcvPollerCollisionResolution+0xce>
    
    return ERR_NONE;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	37b0      	adds	r7, #176	; 0xb0
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <rfalInitialize>:
*/


/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    EXIT_ON_ERR( err, st25r3916Initialize() );
 800cc2e:	f004 f8d3 	bl	8010dd8 <st25r3916Initialize>
 800cc32:	4603      	mov	r3, r0
 800cc34:	80fb      	strh	r3, [r7, #6]
 800cc36:	88fb      	ldrh	r3, [r7, #6]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <rfalInitialize+0x18>
 800cc3c:	88fb      	ldrh	r3, [r7, #6]
 800cc3e:	e059      	b.n	800ccf4 <rfalInitialize+0xcc>
    
    st25r3916ClearInterrupts();
 800cc40:	f005 f95a 	bl	8011ef8 <st25r3916ClearInterrupts>
    
    /* Disable any previous observation mode */
    rfalST25R3916ObsModeDisable();
 800cc44:	2140      	movs	r1, #64	; 0x40
 800cc46:	2001      	movs	r0, #1
 800cc48:	f004 fe57 	bl	80118fa <st25r3916WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f7f6 fe09 	bl	8003864 <rfalSetAnalogConfig>
    

    /*******************************************************************************/
    /* Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800cc52:	2203      	movs	r2, #3
 800cc54:	2103      	movs	r1, #3
 800cc56:	2002      	movs	r0, #2
 800cc58:	f004 fed8 	bl	8011a0c <st25r3916ChangeRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800cc5c:	f001 fefe 	bl	800ea5c <rfalFIFOStatusClear>
    
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800cc60:	4b26      	ldr	r3, [pc, #152]	; (800ccfc <rfalInitialize+0xd4>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800cc66:	4b25      	ldr	r3, [pc, #148]	; (800ccfc <rfalInitialize+0xd4>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800cc6c:	4b23      	ldr	r3, [pc, #140]	; (800ccfc <rfalInitialize+0xd4>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800cc72:	4b22      	ldr	r3, [pc, #136]	; (800ccfc <rfalInitialize+0xd4>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800cc78:	4b20      	ldr	r3, [pc, #128]	; (800ccfc <rfalInitialize+0xd4>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800cc7e:	4b1f      	ldr	r3, [pc, #124]	; (800ccfc <rfalInitialize+0xd4>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800cc84:	4b1d      	ldr	r3, [pc, #116]	; (800ccfc <rfalInitialize+0xd4>)
 800cc86:	2200      	movs	r2, #0
 800cc88:	765a      	strb	r2, [r3, #25]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800cc8a:	4b1c      	ldr	r3, [pc, #112]	; (800ccfc <rfalInitialize+0xd4>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	761a      	strb	r2, [r3, #24]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800cc90:	4b1a      	ldr	r3, [pc, #104]	; (800ccfc <rfalInitialize+0xd4>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800cc96:	4b19      	ldr	r3, [pc, #100]	; (800ccfc <rfalInitialize+0xd4>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800cc9c:	4b17      	ldr	r3, [pc, #92]	; (800ccfc <rfalInitialize+0xd4>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	609a      	str	r2, [r3, #8]
    gRFAL.timings.nTRFW      = 0U;
 800cca2:	4b16      	ldr	r3, [pc, #88]	; (800ccfc <rfalInitialize+0xd4>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	751a      	strb	r2, [r3, #20]
    
    /* Destroy any previous pending timers */
    rfalTimerDestroy( gRFAL.tmr.GT );
    rfalTimerDestroy( gRFAL.tmr.txRx );
    rfalTimerDestroy( gRFAL.tmr.RXE );
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800cca8:	4b14      	ldr	r3, [pc, #80]	; (800ccfc <rfalInitialize+0xd4>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	641a      	str	r2, [r3, #64]	; 0x40
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 800ccae:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <rfalInitialize+0xd4>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.tmr.RXE            = RFAL_TIMING_NONE;
 800ccb4:	4b11      	ldr	r3, [pc, #68]	; (800ccfc <rfalInitialize+0xd4>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    gRFAL.callbacks.preTxRx  = NULL;
 800ccba:	4b10      	ldr	r3, [pc, #64]	; (800ccfc <rfalInitialize+0xd4>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 800ccc0:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <rfalInitialize+0xd4>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	651a      	str	r2, [r3, #80]	; 0x50
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800ccc6:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <rfalInitialize+0xd4>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
#endif /* RFAL_FEATURE_NFCV */
    

#if RFAL_FEATURE_LISTEN_MODE
    /* Initialize Listen Mode */
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 800ccce:	4b0b      	ldr	r3, [pc, #44]	; (800ccfc <rfalInitialize+0xd4>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 800ccd6:	4b09      	ldr	r3, [pc, #36]	; (800ccfc <rfalInitialize+0xd4>)
 800ccd8:	22ff      	movs	r2, #255	; 0xff
 800ccda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    gRFAL.Lm.iniFlag         = false;
 800ccde:	4b07      	ldr	r3, [pc, #28]	; (800ccfc <rfalInitialize+0xd4>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800cce6:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <rfalInitialize+0xd4>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800ccee:	f000 f807 	bl	800cd00 <rfalCalibrate>
    
    return ERR_NONE;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	2000155c 	.word	0x2000155c

0800cd00 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800cd06:	4b0b      	ldr	r3, [pc, #44]	; (800cd34 <rfalCalibrate+0x34>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800cd0e:	2321      	movs	r3, #33	; 0x21
 800cd10:	e00c      	b.n	800cd2c <rfalCalibrate+0x2c>
    /*******************************************************************************/
    /* Perform ST25R3916 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800cd12:	2200      	movs	r2, #0
 800cd14:	2180      	movs	r1, #128	; 0x80
 800cd16:	202c      	movs	r0, #44	; 0x2c
 800cd18:	f004 fefc 	bl	8011b14 <st25r3916CheckReg>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d003      	beq.n	800cd2a <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3916AdjustRegulators( &resValue );
 800cd22:	1dbb      	adds	r3, r7, #6
 800cd24:	4618      	mov	r0, r3
 800cd26:	f004 f917 	bl	8010f58 <st25r3916AdjustRegulators>
    }
    
    return ERR_NONE;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	2000155c 	.word	0x2000155c

0800cd38 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	71fb      	strb	r3, [r7, #7]
 800cd42:	460b      	mov	r3, r1
 800cd44:	71bb      	strb	r3, [r7, #6]
 800cd46:	4613      	mov	r3, r2
 800cd48:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800cd4a:	4b9b      	ldr	r3, [pc, #620]	; (800cfb8 <rfalSetMode+0x280>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d101      	bne.n	800cd56 <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800cd52:	2321      	movs	r3, #33	; 0x21
 800cd54:	e12b      	b.n	800cfae <rfalSetMode+0x276>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800cd56:	79bb      	ldrb	r3, [r7, #6]
 800cd58:	2bff      	cmp	r3, #255	; 0xff
 800cd5a:	d002      	beq.n	800cd62 <rfalSetMode+0x2a>
 800cd5c:	797b      	ldrb	r3, [r7, #5]
 800cd5e:	2bff      	cmp	r3, #255	; 0xff
 800cd60:	d101      	bne.n	800cd66 <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800cd62:	2307      	movs	r3, #7
 800cd64:	e123      	b.n	800cfae <rfalSetMode+0x276>
    }
   
    switch( mode )
 800cd66:	79fb      	ldrb	r3, [r7, #7]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	2b0c      	cmp	r3, #12
 800cd6c:	f200 810b 	bhi.w	800cf86 <rfalSetMode+0x24e>
 800cd70:	a201      	add	r2, pc, #4	; (adr r2, 800cd78 <rfalSetMode+0x40>)
 800cd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd76:	bf00      	nop
 800cd78:	0800cdad 	.word	0x0800cdad
 800cd7c:	0800cdcf 	.word	0x0800cdcf
 800cd80:	0800cdf1 	.word	0x0800cdf1
 800cd84:	0800ce27 	.word	0x0800ce27
 800cd88:	0800ce5d 	.word	0x0800ce5d
 800cd8c:	0800ce93 	.word	0x0800ce93
 800cd90:	0800ceb5 	.word	0x0800ceb5
 800cd94:	0800ceb5 	.word	0x0800ceb5
 800cd98:	0800cecf 	.word	0x0800cecf
 800cd9c:	0800cf3f 	.word	0x0800cf3f
 800cda0:	0800cf83 	.word	0x0800cf83
 800cda4:	0800cf61 	.word	0x0800cf61
 800cda8:	0800cf03 	.word	0x0800cf03
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800cdac:	2104      	movs	r1, #4
 800cdae:	2002      	movs	r0, #2
 800cdb0:	f004 fdc8 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 800cdb4:	2108      	movs	r1, #8
 800cdb6:	2003      	movs	r0, #3
 800cdb8:	f004 fc74 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cdbc:	f240 1001 	movw	r0, #257	; 0x101
 800cdc0:	f7f6 fd50 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cdc4:	f44f 7081 	mov.w	r0, #258	; 0x102
 800cdc8:	f7f6 fd4c 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800cdcc:	e0dd      	b.n	800cf8a <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800cdce:	2104      	movs	r1, #4
 800cdd0:	2002      	movs	r0, #2
 800cdd2:	f004 fdb7 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 800cdd6:	2120      	movs	r1, #32
 800cdd8:	2003      	movs	r0, #3
 800cdda:	f004 fc63 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cdde:	f240 1001 	movw	r0, #257	; 0x101
 800cde2:	f7f6 fd3f 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cde6:	f44f 7081 	mov.w	r0, #258	; 0x102
 800cdea:	f7f6 fd3b 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800cdee:	e0cc      	b.n	800cf8a <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800cdf0:	2104      	movs	r1, #4
 800cdf2:	2002      	movs	r0, #2
 800cdf4:	f004 fda6 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800cdf8:	2110      	movs	r1, #16
 800cdfa:	2003      	movs	r0, #3
 800cdfc:	f004 fc52 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800ce00:	2200      	movs	r2, #0
 800ce02:	21fc      	movs	r1, #252	; 0xfc
 800ce04:	2006      	movs	r0, #6
 800ce06:	f004 fe01 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	21f0      	movs	r1, #240	; 0xf0
 800ce0e:	2007      	movs	r0, #7
 800ce10:	f004 fdfc 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ce14:	f240 2001 	movw	r0, #513	; 0x201
 800ce18:	f7f6 fd24 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ce1c:	f240 2002 	movw	r0, #514	; 0x202
 800ce20:	f7f6 fd20 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800ce24:	e0b1      	b.n	800cf8a <rfalSetMode+0x252>
            
        /*******************************************************************************/    
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ce26:	2104      	movs	r1, #4
 800ce28:	2002      	movs	r0, #2
 800ce2a:	f004 fd8b 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800ce2e:	2110      	movs	r1, #16
 800ce30:	2003      	movs	r0, #3
 800ce32:	f004 fc37 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800ce36:	2200      	movs	r2, #0
 800ce38:	21fc      	movs	r1, #252	; 0xfc
 800ce3a:	2006      	movs	r0, #6
 800ce3c:	f004 fde6 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                      ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800ce40:	2220      	movs	r2, #32
 800ce42:	21f0      	movs	r1, #240	; 0xf0
 800ce44:	2007      	movs	r0, #7
 800ce46:	f004 fde1 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                      (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                      (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof  ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ce4a:	f240 2001 	movw	r0, #513	; 0x201
 800ce4e:	f7f6 fd09 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ce52:	f240 2002 	movw	r0, #514	; 0x202
 800ce56:	f7f6 fd05 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800ce5a:	e096      	b.n	800cf8a <rfalSetMode+0x252>
            
            /*******************************************************************************/    
            case RFAL_MODE_POLL_B_CTS:
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ce5c:	2104      	movs	r1, #4
 800ce5e:	2002      	movs	r0, #2
 800ce60:	f004 fd70 	bl	8011944 <st25r3916ClrRegisterBits>
                
                /* Enable ISO14443B mode */
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 800ce64:	2110      	movs	r1, #16
 800ce66:	2003      	movs	r0, #3
 800ce68:	f004 fc1c 	bl	80116a4 <st25r3916WriteRegister>
                
                /* Set the EGT, SOF, EOF and EOF */
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	21fc      	movs	r1, #252	; 0xfc
 800ce70:	2006      	movs	r0, #6
 800ce72:	f004 fdcb 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_1_egt_mask | ST25R3916_REG_ISO14443B_1_sof_mask | ST25R3916_REG_ISO14443B_1_eof), 
                                          ( (0U<<ST25R3916_REG_ISO14443B_1_egt_shift) | ST25R3916_REG_ISO14443B_1_sof_0_10etu | ST25R3916_REG_ISO14443B_1_sof_1_2etu | ST25R3916_REG_ISO14443B_1_eof_10etu) );
                            
                /* Set the minimum TR1, clear SOF, EOF and EOF12 */
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 800ce76:	2230      	movs	r2, #48	; 0x30
 800ce78:	21f0      	movs	r1, #240	; 0xf0
 800ce7a:	2007      	movs	r0, #7
 800ce7c:	f004 fdc6 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                          (ST25R3916_REG_ISO14443B_2_tr1_mask | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof),
                                          (ST25R3916_REG_ISO14443B_2_tr1_80fs80fs | ST25R3916_REG_ISO14443B_2_no_sof | ST25R3916_REG_ISO14443B_2_no_eof ) );


                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800ce80:	f240 2001 	movw	r0, #513	; 0x201
 800ce84:	f7f6 fcee 	bl	8003864 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ce88:	f240 2002 	movw	r0, #514	; 0x202
 800ce8c:	f7f6 fcea 	bl	8003864 <rfalSetAnalogConfig>
                break;
 800ce90:	e07b      	b.n	800cf8a <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ce92:	2104      	movs	r1, #4
 800ce94:	2002      	movs	r0, #2
 800ce96:	f004 fd55 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800ce9a:	2118      	movs	r1, #24
 800ce9c:	2003      	movs	r0, #3
 800ce9e:	f004 fc01 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cea2:	f240 4001 	movw	r0, #1025	; 0x401
 800cea6:	f7f6 fcdd 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800ceaa:	f240 4002 	movw	r0, #1026	; 0x402
 800ceae:	f7f6 fcd9 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800ceb2:	e06a      	b.n	800cf8a <rfalSetMode+0x252>
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
                
                /* Disable wake up mode, if set */
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800ceb4:	2104      	movs	r1, #4
 800ceb6:	2002      	movs	r0, #2
 800ceb8:	f004 fd44 	bl	8011944 <st25r3916ClrRegisterBits>
                
                /* Set Analog configurations for this mode and bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cebc:	f241 0001 	movw	r0, #4097	; 0x1001
 800cec0:	f7f6 fcd0 	bl	8003864 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cec4:	f241 0002 	movw	r0, #4098	; 0x1002
 800cec8:	f7f6 fccc 	bl	8003864 <rfalSetAnalogConfig>
                break;
 800cecc:	e05d      	b.n	800cf8a <rfalSetMode+0x252>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication Initiator mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 800cece:	2102      	movs	r1, #2
 800ced0:	2003      	movs	r0, #3
 800ced2:	f004 fbe7 	bl	80116a4 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */ 
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800ced6:	2200      	movs	r2, #0
 800ced8:	2104      	movs	r1, #4
 800ceda:	2012      	movs	r0, #18
 800cedc:	f004 fd96 	bl	8011a0c <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800cee0:	2160      	movs	r1, #96	; 0x60
 800cee2:	2040      	movs	r0, #64	; 0x40
 800cee4:	f004 fa27 	bl	8011336 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800cee8:	2180      	movs	r1, #128	; 0x80
 800ceea:	2015      	movs	r0, #21
 800ceec:	f004 fbda 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cef0:	f640 0001 	movw	r0, #2049	; 0x801
 800cef4:	f7f6 fcb6 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cef8:	f640 0002 	movw	r0, #2050	; 0x802
 800cefc:	f7f6 fcb2 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800cf00:	e043      	b.n	800cf8a <rfalSetMode+0x252>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication Target mode and Automatic Response RF Collision Avoidance to always after EOF */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 800cf02:	21ba      	movs	r1, #186	; 0xba
 800cf04:	2003      	movs	r0, #3
 800cf06:	f004 fbcd 	bl	80116a4 <st25r3916WriteRegister>
        
            /* Set TARFG: 0 (75us+0ms=75us), as Target no Guard time needed */
            st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	2055      	movs	r0, #85	; 0x55
 800cf0e:	f004 fbc9 	bl	80116a4 <st25r3916WriteRegister>
            
            /* External Field Detector enabled as Automatics on rfalInitialize() */
            
            /* Set NRT to start at end of TX (own) field */
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800cf12:	2200      	movs	r2, #0
 800cf14:	2104      	movs	r1, #4
 800cf16:	2012      	movs	r0, #18
 800cf18:	f004 fd78 	bl	8011a0c <st25r3916ChangeRegisterBits>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 800cf1c:	2160      	movs	r1, #96	; 0x60
 800cf1e:	2040      	movs	r0, #64	; 0x40
 800cf20:	f004 fa09 	bl	8011336 <st25r3916SetStartGPTimer>
            
            /* Set PPon2 timer with the max time between our field Off and other peer field On : Tadt + (n x Trfw)    */
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800cf24:	2180      	movs	r1, #128	; 0x80
 800cf26:	2015      	movs	r0, #21
 800cf28:	f004 fbbc 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cf2c:	f648 0001 	movw	r0, #34817	; 0x8801
 800cf30:	f7f6 fc98 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cf34:	f648 0002 	movw	r0, #34818	; 0x8802
 800cf38:	f7f6 fc94 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800cf3c:	e025      	b.n	800cf8a <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:

            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800cf3e:	2104      	movs	r1, #4
 800cf40:	2002      	movs	r0, #2
 800cf42:	f004 fcff 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-A mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 800cf46:	2188      	movs	r1, #136	; 0x88
 800cf48:	2003      	movs	r0, #3
 800cf4a:	f004 fbab 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cf4e:	f248 1001 	movw	r0, #33025	; 0x8101
 800cf52:	f7f6 fc87 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cf56:	f248 1002 	movw	r0, #33026	; 0x8102
 800cf5a:	f7f6 fc83 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800cf5e:	e014      	b.n	800cf8a <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800cf60:	2104      	movs	r1, #4
 800cf62:	2002      	movs	r0, #2
 800cf64:	f004 fcee 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Enable Passive Target NFC-F mode, disable any Collision Avoidance */
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 800cf68:	21a0      	movs	r1, #160	; 0xa0
 800cf6a:	2003      	movs	r0, #3
 800cf6c:	f004 fb9a 	bl	80116a4 <st25r3916WriteRegister>
            
            
            /* Set Analog configurations for this mode */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800cf70:	f248 4001 	movw	r0, #33793	; 0x8401
 800cf74:	f7f6 fc76 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800cf78:	f248 4002 	movw	r0, #33794	; 0x8402
 800cf7c:	f7f6 fc72 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800cf80:	e003      	b.n	800cf8a <rfalSetMode+0x252>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
            return ERR_NOTSUPP;
 800cf82:	2318      	movs	r3, #24
 800cf84:	e013      	b.n	800cfae <rfalSetMode+0x276>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800cf86:	230f      	movs	r3, #15
 800cf88:	e011      	b.n	800cfae <rfalSetMode+0x276>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800cf8a:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <rfalSetMode+0x280>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	bf38      	it	cc
 800cf92:	2302      	movcc	r3, #2
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	4b08      	ldr	r3, [pc, #32]	; (800cfb8 <rfalSetMode+0x280>)
 800cf98:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800cf9a:	4a07      	ldr	r2, [pc, #28]	; (800cfb8 <rfalSetMode+0x280>)
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
 800cf9e:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800cfa0:	797a      	ldrb	r2, [r7, #5]
 800cfa2:	79bb      	ldrb	r3, [r7, #6]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f808 	bl	800cfbc <rfalSetBitRate>
 800cfac:	4603      	mov	r3, r0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2000155c 	.word	0x2000155c

0800cfbc <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b088      	sub	sp, #32
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	460a      	mov	r2, r1
 800cfc6:	71fb      	strb	r3, [r7, #7]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800cfcc:	4ba4      	ldr	r3, [pc, #656]	; (800d260 <rfalSetBitRate+0x2a4>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800cfd4:	2321      	movs	r3, #33	; 0x21
 800cfd6:	e2c2      	b.n	800d55e <rfalSetBitRate+0x5a2>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	2bff      	cmp	r3, #255	; 0xff
 800cfdc:	d102      	bne.n	800cfe4 <rfalSetBitRate+0x28>
 800cfde:	4ba0      	ldr	r3, [pc, #640]	; (800d260 <rfalSetBitRate+0x2a4>)
 800cfe0:	789b      	ldrb	r3, [r3, #2]
 800cfe2:	e000      	b.n	800cfe6 <rfalSetBitRate+0x2a>
 800cfe4:	79fb      	ldrb	r3, [r7, #7]
 800cfe6:	4a9e      	ldr	r2, [pc, #632]	; (800d260 <rfalSetBitRate+0x2a4>)
 800cfe8:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800cfea:	79bb      	ldrb	r3, [r7, #6]
 800cfec:	2bff      	cmp	r3, #255	; 0xff
 800cfee:	d102      	bne.n	800cff6 <rfalSetBitRate+0x3a>
 800cff0:	4b9b      	ldr	r3, [pc, #620]	; (800d260 <rfalSetBitRate+0x2a4>)
 800cff2:	78db      	ldrb	r3, [r3, #3]
 800cff4:	e000      	b.n	800cff8 <rfalSetBitRate+0x3c>
 800cff6:	79bb      	ldrb	r3, [r7, #6]
 800cff8:	4a99      	ldr	r2, [pc, #612]	; (800d260 <rfalSetBitRate+0x2a4>)
 800cffa:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800cffc:	4b98      	ldr	r3, [pc, #608]	; (800d260 <rfalSetBitRate+0x2a4>)
 800cffe:	785b      	ldrb	r3, [r3, #1]
 800d000:	2b07      	cmp	r3, #7
 800d002:	d012      	beq.n	800d02a <rfalSetBitRate+0x6e>
 800d004:	4b96      	ldr	r3, [pc, #600]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d006:	785b      	ldrb	r3, [r3, #1]
 800d008:	2b08      	cmp	r3, #8
 800d00a:	d00e      	beq.n	800d02a <rfalSetBitRate+0x6e>
    {
        /* Set bit rate register */
        EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800d00c:	4b94      	ldr	r3, [pc, #592]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d00e:	789b      	ldrb	r3, [r3, #2]
 800d010:	4a93      	ldr	r2, [pc, #588]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d012:	78d2      	ldrb	r2, [r2, #3]
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f004 f843 	bl	80110a2 <st25r3916SetBitrate>
 800d01c:	4603      	mov	r3, r0
 800d01e:	83fb      	strh	r3, [r7, #30]
 800d020:	8bfb      	ldrh	r3, [r7, #30]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <rfalSetBitRate+0x6e>
 800d026:	8bfb      	ldrh	r3, [r7, #30]
 800d028:	e299      	b.n	800d55e <rfalSetBitRate+0x5a2>
    }
    
    
    switch( gRFAL.mode )
 800d02a:	4b8d      	ldr	r3, [pc, #564]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d02c:	785b      	ldrb	r3, [r3, #1]
 800d02e:	2b0d      	cmp	r3, #13
 800d030:	f200 8292 	bhi.w	800d558 <rfalSetBitRate+0x59c>
 800d034:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <rfalSetBitRate+0x80>)
 800d036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03a:	bf00      	nop
 800d03c:	0800d555 	.word	0x0800d555
 800d040:	0800d075 	.word	0x0800d075
 800d044:	0800d075 	.word	0x0800d075
 800d048:	0800d0fd 	.word	0x0800d0fd
 800d04c:	0800d0fd 	.word	0x0800d0fd
 800d050:	0800d0fd 	.word	0x0800d0fd
 800d054:	0800d18d 	.word	0x0800d18d
 800d058:	0800d21d 	.word	0x0800d21d
 800d05c:	0800d21d 	.word	0x0800d21d
 800d060:	0800d32d 	.word	0x0800d32d
 800d064:	0800d43d 	.word	0x0800d43d
 800d068:	0800d555 	.word	0x0800d555
 800d06c:	0800d4bd 	.word	0x0800d4bd
 800d070:	0800d3bd 	.word	0x0800d3bd
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d074:	2008      	movs	r0, #8
 800d076:	f7f6 fbf5 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d07a:	4b79      	ldr	r3, [pc, #484]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d07c:	789b      	ldrb	r3, [r3, #2]
 800d07e:	2bea      	cmp	r3, #234	; 0xea
 800d080:	d90c      	bls.n	800d09c <rfalSetBitRate+0xe0>
 800d082:	4b77      	ldr	r3, [pc, #476]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d084:	789b      	ldrb	r3, [r3, #2]
 800d086:	b29b      	uxth	r3, r3
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	b29b      	uxth	r3, r3
 800d090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d094:	f043 0301 	orr.w	r3, r3, #1
 800d098:	b29b      	uxth	r3, r3
 800d09a:	e00d      	b.n	800d0b8 <rfalSetBitRate+0xfc>
 800d09c:	4b70      	ldr	r3, [pc, #448]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d09e:	789b      	ldrb	r3, [r3, #2]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	011b      	lsls	r3, r3, #4
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0b2:	f043 0301 	orr.w	r3, r3, #1
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7f6 fbd3 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d0be:	4b68      	ldr	r3, [pc, #416]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d0c0:	78db      	ldrb	r3, [r3, #3]
 800d0c2:	2bea      	cmp	r3, #234	; 0xea
 800d0c4:	d90a      	bls.n	800d0dc <rfalSetBitRate+0x120>
 800d0c6:	4b66      	ldr	r3, [pc, #408]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d0c8:	78db      	ldrb	r3, [r3, #3]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	011b      	lsls	r3, r3, #4
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	e00b      	b.n	800d0f4 <rfalSetBitRate+0x138>
 800d0dc:	4b60      	ldr	r3, [pc, #384]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d0de:	78db      	ldrb	r3, [r3, #3]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7f6 fbb5 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800d0fa:	e22f      	b.n	800d55c <rfalSetBitRate+0x5a0>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d0fc:	2008      	movs	r0, #8
 800d0fe:	f7f6 fbb1 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d102:	4b57      	ldr	r3, [pc, #348]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d104:	789b      	ldrb	r3, [r3, #2]
 800d106:	2bea      	cmp	r3, #234	; 0xea
 800d108:	d90c      	bls.n	800d124 <rfalSetBitRate+0x168>
 800d10a:	4b55      	ldr	r3, [pc, #340]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d10c:	789b      	ldrb	r3, [r3, #2]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	011b      	lsls	r3, r3, #4
 800d112:	b29b      	uxth	r3, r3
 800d114:	b2db      	uxtb	r3, r3
 800d116:	b29b      	uxth	r3, r3
 800d118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d11c:	f043 0301 	orr.w	r3, r3, #1
 800d120:	b29b      	uxth	r3, r3
 800d122:	e00d      	b.n	800d140 <rfalSetBitRate+0x184>
 800d124:	4b4e      	ldr	r3, [pc, #312]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d126:	789b      	ldrb	r3, [r3, #2]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	3301      	adds	r3, #1
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	011b      	lsls	r3, r3, #4
 800d130:	b29b      	uxth	r3, r3
 800d132:	b2db      	uxtb	r3, r3
 800d134:	b29b      	uxth	r3, r3
 800d136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d13a:	f043 0301 	orr.w	r3, r3, #1
 800d13e:	b29b      	uxth	r3, r3
 800d140:	4618      	mov	r0, r3
 800d142:	f7f6 fb8f 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d146:	4b46      	ldr	r3, [pc, #280]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d148:	78db      	ldrb	r3, [r3, #3]
 800d14a:	2bea      	cmp	r3, #234	; 0xea
 800d14c:	d90c      	bls.n	800d168 <rfalSetBitRate+0x1ac>
 800d14e:	4b44      	ldr	r3, [pc, #272]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d150:	78db      	ldrb	r3, [r3, #3]
 800d152:	b29b      	uxth	r3, r3
 800d154:	011b      	lsls	r3, r3, #4
 800d156:	b29b      	uxth	r3, r3
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d160:	f043 0302 	orr.w	r3, r3, #2
 800d164:	b29b      	uxth	r3, r3
 800d166:	e00d      	b.n	800d184 <rfalSetBitRate+0x1c8>
 800d168:	4b3d      	ldr	r3, [pc, #244]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d16a:	78db      	ldrb	r3, [r3, #3]
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	3301      	adds	r3, #1
 800d170:	b29b      	uxth	r3, r3
 800d172:	011b      	lsls	r3, r3, #4
 800d174:	b29b      	uxth	r3, r3
 800d176:	b2db      	uxtb	r3, r3
 800d178:	b29b      	uxth	r3, r3
 800d17a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d17e:	f043 0302 	orr.w	r3, r3, #2
 800d182:	b29b      	uxth	r3, r3
 800d184:	4618      	mov	r0, r3
 800d186:	f7f6 fb6d 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800d18a:	e1e7      	b.n	800d55c <rfalSetBitRate+0x5a0>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d18c:	2008      	movs	r0, #8
 800d18e:	f7f6 fb69 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d192:	4b33      	ldr	r3, [pc, #204]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d194:	789b      	ldrb	r3, [r3, #2]
 800d196:	2bea      	cmp	r3, #234	; 0xea
 800d198:	d90c      	bls.n	800d1b4 <rfalSetBitRate+0x1f8>
 800d19a:	4b31      	ldr	r3, [pc, #196]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d19c:	789b      	ldrb	r3, [r3, #2]
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1ac:	f043 0301 	orr.w	r3, r3, #1
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	e00d      	b.n	800d1d0 <rfalSetBitRate+0x214>
 800d1b4:	4b2a      	ldr	r3, [pc, #168]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d1b6:	789b      	ldrb	r3, [r3, #2]
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	011b      	lsls	r3, r3, #4
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1ca:	f043 0301 	orr.w	r3, r3, #1
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7f6 fb47 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d1d6:	4b22      	ldr	r3, [pc, #136]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d1d8:	78db      	ldrb	r3, [r3, #3]
 800d1da:	2bea      	cmp	r3, #234	; 0xea
 800d1dc:	d90c      	bls.n	800d1f8 <rfalSetBitRate+0x23c>
 800d1de:	4b20      	ldr	r3, [pc, #128]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d1e0:	78db      	ldrb	r3, [r3, #3]
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	011b      	lsls	r3, r3, #4
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1f0:	f043 0302 	orr.w	r3, r3, #2
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	e00d      	b.n	800d214 <rfalSetBitRate+0x258>
 800d1f8:	4b19      	ldr	r3, [pc, #100]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d1fa:	78db      	ldrb	r3, [r3, #3]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	3301      	adds	r3, #1
 800d200:	b29b      	uxth	r3, r3
 800d202:	011b      	lsls	r3, r3, #4
 800d204:	b29b      	uxth	r3, r3
 800d206:	b2db      	uxtb	r3, r3
 800d208:	b29b      	uxth	r3, r3
 800d20a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d20e:	f043 0302 	orr.w	r3, r3, #2
 800d212:	b29b      	uxth	r3, r3
 800d214:	4618      	mov	r0, r3
 800d216:	f7f6 fb25 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800d21a:	e19f      	b.n	800d55c <rfalSetBitRate+0x5a0>
            
            #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
            #else
            
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97))
 800d21c:	4b10      	ldr	r3, [pc, #64]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d21e:	78db      	ldrb	r3, [r3, #3]
 800d220:	2bec      	cmp	r3, #236	; 0xec
 800d222:	d003      	beq.n	800d22c <rfalSetBitRate+0x270>
 800d224:	4b0e      	ldr	r3, [pc, #56]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d226:	78db      	ldrb	r3, [r3, #3]
 800d228:	2beb      	cmp	r3, #235	; 0xeb
 800d22a:	d107      	bne.n	800d23c <rfalSetBitRate+0x280>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800d22c:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d22e:	789b      	ldrb	r3, [r3, #2]
 800d230:	2bed      	cmp	r3, #237	; 0xed
 800d232:	d005      	beq.n	800d240 <rfalSetBitRate+0x284>
 800d234:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d236:	789b      	ldrb	r3, [r3, #2]
 800d238:	2bec      	cmp	r3, #236	; 0xec
 800d23a:	d001      	beq.n	800d240 <rfalSetBitRate+0x284>
                {
                    return ERR_PARAM;
 800d23c:	2307      	movs	r3, #7
 800d23e:	e18e      	b.n	800d55e <rfalSetBitRate+0x5a2>
                {
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3916StreamConfig      streamConf;
                    iso15693PhyConfig_t                config;
                    
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800d240:	4b07      	ldr	r3, [pc, #28]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d242:	789b      	ldrb	r3, [r3, #2]
 800d244:	2bed      	cmp	r3, #237	; 0xed
 800d246:	bf0c      	ite	eq
 800d248:	2301      	moveq	r3, #1
 800d24a:	2300      	movne	r3, #0
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800d250:	4b03      	ldr	r3, [pc, #12]	; (800d260 <rfalSetBitRate+0x2a4>)
 800d252:	78db      	ldrb	r3, [r3, #3]
 800d254:	2beb      	cmp	r3, #235	; 0xeb
 800d256:	d105      	bne.n	800d264 <rfalSetBitRate+0x2a8>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800d258:	2301      	movs	r3, #1
 800d25a:	613b      	str	r3, [r7, #16]
                            break;
 800d25c:	e005      	b.n	800d26a <rfalSetBitRate+0x2ae>
 800d25e:	bf00      	nop
 800d260:	2000155c 	.word	0x2000155c
                        default:
                            config.speedMode = 0;
 800d264:	2300      	movs	r3, #0
 800d266:	613b      	str	r3, [r7, #16]
                            break;
 800d268:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);
 800d26a:	f107 0218 	add.w	r2, r7, #24
 800d26e:	f107 030c 	add.w	r3, r7, #12
 800d272:	4611      	mov	r1, r2
 800d274:	4618      	mov	r0, r3
 800d276:	f7f6 fc5b 	bl	8003b30 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	785b      	ldrb	r3, [r3, #1]
 800d27e:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	789b      	ldrb	r3, [r3, #2]
 800d284:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	78db      	ldrb	r3, [r3, #3]
 800d28a:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	753b      	strb	r3, [r7, #20]
                    st25r3916StreamConfigure(&streamConf);
 800d292:	f107 0314 	add.w	r3, r7, #20
 800d296:	4618      	mov	r0, r3
 800d298:	f004 f892 	bl	80113c0 <st25r3916StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d29c:	2008      	movs	r0, #8
 800d29e:	f7f6 fae1 	bl	8003864 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d2a2:	4b8f      	ldr	r3, [pc, #572]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d2a4:	789b      	ldrb	r3, [r3, #2]
 800d2a6:	2bea      	cmp	r3, #234	; 0xea
 800d2a8:	d90c      	bls.n	800d2c4 <rfalSetBitRate+0x308>
 800d2aa:	4b8d      	ldr	r3, [pc, #564]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d2ac:	789b      	ldrb	r3, [r3, #2]
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	011b      	lsls	r3, r3, #4
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d2bc:	f043 0301 	orr.w	r3, r3, #1
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	e00d      	b.n	800d2e0 <rfalSetBitRate+0x324>
 800d2c4:	4b86      	ldr	r3, [pc, #536]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d2c6:	789b      	ldrb	r3, [r3, #2]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	011b      	lsls	r3, r3, #4
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d2da:	f043 0301 	orr.w	r3, r3, #1
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7f6 fabf 	bl	8003864 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d2e6:	4b7e      	ldr	r3, [pc, #504]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d2e8:	78db      	ldrb	r3, [r3, #3]
 800d2ea:	2bea      	cmp	r3, #234	; 0xea
 800d2ec:	d90c      	bls.n	800d308 <rfalSetBitRate+0x34c>
 800d2ee:	4b7c      	ldr	r3, [pc, #496]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d2f0:	78db      	ldrb	r3, [r3, #3]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	011b      	lsls	r3, r3, #4
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d300:	f043 0302 	orr.w	r3, r3, #2
 800d304:	b29b      	uxth	r3, r3
 800d306:	e00d      	b.n	800d324 <rfalSetBitRate+0x368>
 800d308:	4b75      	ldr	r3, [pc, #468]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d30a:	78db      	ldrb	r3, [r3, #3]
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	3301      	adds	r3, #1
 800d310:	b29b      	uxth	r3, r3
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	b29b      	uxth	r3, r3
 800d316:	b2db      	uxtb	r3, r3
 800d318:	b29b      	uxth	r3, r3
 800d31a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d31e:	f043 0302 	orr.w	r3, r3, #2
 800d322:	b29b      	uxth	r3, r3
 800d324:	4618      	mov	r0, r3
 800d326:	f7f6 fa9d 	bl	8003864 <rfalSetAnalogConfig>
                break;
 800d32a:	e117      	b.n	800d55c <rfalSetBitRate+0x5a0>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d32c:	2008      	movs	r0, #8
 800d32e:	f7f6 fa99 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d332:	4b6b      	ldr	r3, [pc, #428]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d334:	789b      	ldrb	r3, [r3, #2]
 800d336:	2bea      	cmp	r3, #234	; 0xea
 800d338:	d90c      	bls.n	800d354 <rfalSetBitRate+0x398>
 800d33a:	4b69      	ldr	r3, [pc, #420]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d33c:	789b      	ldrb	r3, [r3, #2]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	011b      	lsls	r3, r3, #4
 800d342:	b29b      	uxth	r3, r3
 800d344:	b2db      	uxtb	r3, r3
 800d346:	b29b      	uxth	r3, r3
 800d348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d34c:	f043 0301 	orr.w	r3, r3, #1
 800d350:	b29b      	uxth	r3, r3
 800d352:	e00d      	b.n	800d370 <rfalSetBitRate+0x3b4>
 800d354:	4b62      	ldr	r3, [pc, #392]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d356:	789b      	ldrb	r3, [r3, #2]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	3301      	adds	r3, #1
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	011b      	lsls	r3, r3, #4
 800d360:	b29b      	uxth	r3, r3
 800d362:	b2db      	uxtb	r3, r3
 800d364:	b29b      	uxth	r3, r3
 800d366:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d36a:	f043 0301 	orr.w	r3, r3, #1
 800d36e:	b29b      	uxth	r3, r3
 800d370:	4618      	mov	r0, r3
 800d372:	f7f6 fa77 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d376:	4b5a      	ldr	r3, [pc, #360]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d378:	78db      	ldrb	r3, [r3, #3]
 800d37a:	2bea      	cmp	r3, #234	; 0xea
 800d37c:	d90c      	bls.n	800d398 <rfalSetBitRate+0x3dc>
 800d37e:	4b58      	ldr	r3, [pc, #352]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d380:	78db      	ldrb	r3, [r3, #3]
 800d382:	b29b      	uxth	r3, r3
 800d384:	011b      	lsls	r3, r3, #4
 800d386:	b29b      	uxth	r3, r3
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d390:	f043 0302 	orr.w	r3, r3, #2
 800d394:	b29b      	uxth	r3, r3
 800d396:	e00d      	b.n	800d3b4 <rfalSetBitRate+0x3f8>
 800d398:	4b51      	ldr	r3, [pc, #324]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d39a:	78db      	ldrb	r3, [r3, #3]
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	3301      	adds	r3, #1
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	011b      	lsls	r3, r3, #4
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d3ae:	f043 0302 	orr.w	r3, r3, #2
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7f6 fa55 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800d3ba:	e0cf      	b.n	800d55c <rfalSetBitRate+0x5a0>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800d3bc:	2009      	movs	r0, #9
 800d3be:	f7f6 fa51 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d3c2:	4b47      	ldr	r3, [pc, #284]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d3c4:	789b      	ldrb	r3, [r3, #2]
 800d3c6:	2bea      	cmp	r3, #234	; 0xea
 800d3c8:	d90a      	bls.n	800d3e0 <rfalSetBitRate+0x424>
 800d3ca:	4b45      	ldr	r3, [pc, #276]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d3cc:	789b      	ldrb	r3, [r3, #2]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	011b      	lsls	r3, r3, #4
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	4b42      	ldr	r3, [pc, #264]	; (800d4e4 <rfalSetBitRate+0x528>)
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	e00b      	b.n	800d3f8 <rfalSetBitRate+0x43c>
 800d3e0:	4b3f      	ldr	r3, [pc, #252]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d3e2:	789b      	ldrb	r3, [r3, #2]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	011b      	lsls	r3, r3, #4
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	4b3c      	ldr	r3, [pc, #240]	; (800d4e4 <rfalSetBitRate+0x528>)
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f6 fa33 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d3fe:	4b38      	ldr	r3, [pc, #224]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d400:	78db      	ldrb	r3, [r3, #3]
 800d402:	2bea      	cmp	r3, #234	; 0xea
 800d404:	d90a      	bls.n	800d41c <rfalSetBitRate+0x460>
 800d406:	4b36      	ldr	r3, [pc, #216]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d408:	78db      	ldrb	r3, [r3, #3]
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	011b      	lsls	r3, r3, #4
 800d40e:	b29b      	uxth	r3, r3
 800d410:	b2db      	uxtb	r3, r3
 800d412:	b29a      	uxth	r2, r3
 800d414:	4b34      	ldr	r3, [pc, #208]	; (800d4e8 <rfalSetBitRate+0x52c>)
 800d416:	4313      	orrs	r3, r2
 800d418:	b29b      	uxth	r3, r3
 800d41a:	e00b      	b.n	800d434 <rfalSetBitRate+0x478>
 800d41c:	4b30      	ldr	r3, [pc, #192]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d41e:	78db      	ldrb	r3, [r3, #3]
 800d420:	b29b      	uxth	r3, r3
 800d422:	3301      	adds	r3, #1
 800d424:	b29b      	uxth	r3, r3
 800d426:	011b      	lsls	r3, r3, #4
 800d428:	b29b      	uxth	r3, r3
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	4b2e      	ldr	r3, [pc, #184]	; (800d4e8 <rfalSetBitRate+0x52c>)
 800d430:	4313      	orrs	r3, r2
 800d432:	b29b      	uxth	r3, r3
 800d434:	4618      	mov	r0, r3
 800d436:	f7f6 fa15 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800d43a:	e08f      	b.n	800d55c <rfalSetBitRate+0x5a0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800d43c:	2009      	movs	r0, #9
 800d43e:	f7f6 fa11 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d442:	4b27      	ldr	r3, [pc, #156]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d444:	789b      	ldrb	r3, [r3, #2]
 800d446:	2bea      	cmp	r3, #234	; 0xea
 800d448:	d90a      	bls.n	800d460 <rfalSetBitRate+0x4a4>
 800d44a:	4b25      	ldr	r3, [pc, #148]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d44c:	789b      	ldrb	r3, [r3, #2]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	011b      	lsls	r3, r3, #4
 800d452:	b29b      	uxth	r3, r3
 800d454:	b2db      	uxtb	r3, r3
 800d456:	b29a      	uxth	r2, r3
 800d458:	4b24      	ldr	r3, [pc, #144]	; (800d4ec <rfalSetBitRate+0x530>)
 800d45a:	4313      	orrs	r3, r2
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	e00b      	b.n	800d478 <rfalSetBitRate+0x4bc>
 800d460:	4b1f      	ldr	r3, [pc, #124]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d462:	789b      	ldrb	r3, [r3, #2]
 800d464:	b29b      	uxth	r3, r3
 800d466:	3301      	adds	r3, #1
 800d468:	b29b      	uxth	r3, r3
 800d46a:	011b      	lsls	r3, r3, #4
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	b29a      	uxth	r2, r3
 800d472:	4b1e      	ldr	r3, [pc, #120]	; (800d4ec <rfalSetBitRate+0x530>)
 800d474:	4313      	orrs	r3, r2
 800d476:	b29b      	uxth	r3, r3
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f6 f9f3 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d47e:	4b18      	ldr	r3, [pc, #96]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d480:	78db      	ldrb	r3, [r3, #3]
 800d482:	2bea      	cmp	r3, #234	; 0xea
 800d484:	d90a      	bls.n	800d49c <rfalSetBitRate+0x4e0>
 800d486:	4b16      	ldr	r3, [pc, #88]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d488:	78db      	ldrb	r3, [r3, #3]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	011b      	lsls	r3, r3, #4
 800d48e:	b29b      	uxth	r3, r3
 800d490:	b2db      	uxtb	r3, r3
 800d492:	b29a      	uxth	r2, r3
 800d494:	4b16      	ldr	r3, [pc, #88]	; (800d4f0 <rfalSetBitRate+0x534>)
 800d496:	4313      	orrs	r3, r2
 800d498:	b29b      	uxth	r3, r3
 800d49a:	e00b      	b.n	800d4b4 <rfalSetBitRate+0x4f8>
 800d49c:	4b10      	ldr	r3, [pc, #64]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d49e:	78db      	ldrb	r3, [r3, #3]
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	011b      	lsls	r3, r3, #4
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	4b10      	ldr	r3, [pc, #64]	; (800d4f0 <rfalSetBitRate+0x534>)
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7f6 f9d5 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800d4ba:	e04f      	b.n	800d55c <rfalSetBitRate+0x5a0>
                
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCF:
                        
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800d4bc:	2009      	movs	r0, #9
 800d4be:	f7f6 f9d1 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d4c2:	4b07      	ldr	r3, [pc, #28]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d4c4:	789b      	ldrb	r3, [r3, #2]
 800d4c6:	2bea      	cmp	r3, #234	; 0xea
 800d4c8:	d916      	bls.n	800d4f8 <rfalSetBitRate+0x53c>
 800d4ca:	4b05      	ldr	r3, [pc, #20]	; (800d4e0 <rfalSetBitRate+0x524>)
 800d4cc:	789b      	ldrb	r3, [r3, #2]
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	011b      	lsls	r3, r3, #4
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	4b06      	ldr	r3, [pc, #24]	; (800d4f4 <rfalSetBitRate+0x538>)
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	e017      	b.n	800d510 <rfalSetBitRate+0x554>
 800d4e0:	2000155c 	.word	0x2000155c
 800d4e4:	ffff8801 	.word	0xffff8801
 800d4e8:	ffff8802 	.word	0xffff8802
 800d4ec:	ffff8101 	.word	0xffff8101
 800d4f0:	ffff8102 	.word	0xffff8102
 800d4f4:	ffff8401 	.word	0xffff8401
 800d4f8:	4b1b      	ldr	r3, [pc, #108]	; (800d568 <rfalSetBitRate+0x5ac>)
 800d4fa:	789b      	ldrb	r3, [r3, #2]
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	3301      	adds	r3, #1
 800d500:	b29b      	uxth	r3, r3
 800d502:	011b      	lsls	r3, r3, #4
 800d504:	b29b      	uxth	r3, r3
 800d506:	b2db      	uxtb	r3, r3
 800d508:	b29a      	uxth	r2, r3
 800d50a:	4b18      	ldr	r3, [pc, #96]	; (800d56c <rfalSetBitRate+0x5b0>)
 800d50c:	4313      	orrs	r3, r2
 800d50e:	b29b      	uxth	r3, r3
 800d510:	4618      	mov	r0, r3
 800d512:	f7f6 f9a7 	bl	8003864 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d516:	4b14      	ldr	r3, [pc, #80]	; (800d568 <rfalSetBitRate+0x5ac>)
 800d518:	78db      	ldrb	r3, [r3, #3]
 800d51a:	2bea      	cmp	r3, #234	; 0xea
 800d51c:	d90a      	bls.n	800d534 <rfalSetBitRate+0x578>
 800d51e:	4b12      	ldr	r3, [pc, #72]	; (800d568 <rfalSetBitRate+0x5ac>)
 800d520:	78db      	ldrb	r3, [r3, #3]
 800d522:	b29b      	uxth	r3, r3
 800d524:	011b      	lsls	r3, r3, #4
 800d526:	b29b      	uxth	r3, r3
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	4b10      	ldr	r3, [pc, #64]	; (800d570 <rfalSetBitRate+0x5b4>)
 800d52e:	4313      	orrs	r3, r2
 800d530:	b29b      	uxth	r3, r3
 800d532:	e00b      	b.n	800d54c <rfalSetBitRate+0x590>
 800d534:	4b0c      	ldr	r3, [pc, #48]	; (800d568 <rfalSetBitRate+0x5ac>)
 800d536:	78db      	ldrb	r3, [r3, #3]
 800d538:	b29b      	uxth	r3, r3
 800d53a:	3301      	adds	r3, #1
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	011b      	lsls	r3, r3, #4
 800d540:	b29b      	uxth	r3, r3
 800d542:	b2db      	uxtb	r3, r3
 800d544:	b29a      	uxth	r2, r3
 800d546:	4b0a      	ldr	r3, [pc, #40]	; (800d570 <rfalSetBitRate+0x5b4>)
 800d548:	4313      	orrs	r3, r2
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f6 f989 	bl	8003864 <rfalSetAnalogConfig>
            break;
 800d552:	e003      	b.n	800d55c <rfalSetBitRate+0x5a0>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800d554:	2321      	movs	r3, #33	; 0x21
 800d556:	e002      	b.n	800d55e <rfalSetBitRate+0x5a2>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800d558:	230f      	movs	r3, #15
 800d55a:	e000      	b.n	800d55e <rfalSetBitRate+0x5a2>
    }
    
    return ERR_NONE;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3720      	adds	r7, #32
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	2000155c 	.word	0x2000155c
 800d56c:	ffff8401 	.word	0xffff8401
 800d570:	ffff8402 	.word	0xffff8402

0800d574 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 800d57e:	4b0f      	ldr	r3, [pc, #60]	; (800d5bc <rfalGetBitRate+0x48>)
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <rfalGetBitRate+0x1a>
 800d586:	4b0d      	ldr	r3, [pc, #52]	; (800d5bc <rfalGetBitRate+0x48>)
 800d588:	785b      	ldrb	r3, [r3, #1]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d101      	bne.n	800d592 <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 800d58e:	2321      	movs	r3, #33	; 0x21
 800d590:	e00e      	b.n	800d5b0 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d003      	beq.n	800d5a0 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 800d598:	4b08      	ldr	r3, [pc, #32]	; (800d5bc <rfalGetBitRate+0x48>)
 800d59a:	789a      	ldrb	r2, [r3, #2]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 800d5a6:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <rfalGetBitRate+0x48>)
 800d5a8:	78da      	ldrb	r2, [r3, #3]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bc80      	pop	{r7}
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	2000155c 	.word	0x2000155c

0800d5c0 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	71fb      	strb	r3, [r7, #7]
    switch(eHandling)
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	dc02      	bgt.n	800d5d6 <rfalSetErrorHandling+0x16>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	da03      	bge.n	800d5dc <rfalSetErrorHandling+0x1c>
                                 (ST25R3916_REG_EMD_SUP_CONF_emd_emv_on | RFAL_EMVCO_RX_MAXLEN) );
#endif /* RFAL_SW_EMD */
            break;
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800d5d4:	e00d      	b.n	800d5f2 <rfalSetErrorHandling+0x32>
    switch(eHandling)
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d005      	beq.n	800d5e6 <rfalSetErrorHandling+0x26>
            break;
 800d5da:	e00a      	b.n	800d5f2 <rfalSetErrorHandling+0x32>
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 800d5dc:	2180      	movs	r1, #128	; 0x80
 800d5de:	2045      	movs	r0, #69	; 0x45
 800d5e0:	f004 f9b0 	bl	8011944 <st25r3916ClrRegisterBits>
            break;
 800d5e4:	e005      	b.n	800d5f2 <rfalSetErrorHandling+0x32>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800d5e6:	2284      	movs	r2, #132	; 0x84
 800d5e8:	218f      	movs	r1, #143	; 0x8f
 800d5ea:	2045      	movs	r0, #69	; 0x45
 800d5ec:	f004 fa25 	bl	8011a3a <st25r3916ModifyRegister>
            break;
 800d5f0:	bf00      	nop
    }

    gRFAL.conf.eHandling = eHandling;
 800d5f2:	4a03      	ldr	r2, [pc, #12]	; (800d600 <rfalSetErrorHandling+0x40>)
 800d5f4:	79fb      	ldrb	r3, [r7, #7]
 800d5f6:	71d3      	strb	r3, [r2, #7]
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	2000155c 	.word	0x2000155c

0800d604 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a05      	ldr	r2, [pc, #20]	; (800d624 <rfalSetFDTPoll+0x20>)
 800d610:	4293      	cmp	r3, r2
 800d612:	bf28      	it	cs
 800d614:	4613      	movcs	r3, r2
 800d616:	4a04      	ldr	r2, [pc, #16]	; (800d628 <rfalSetFDTPoll+0x24>)
 800d618:	6113      	str	r3, [r2, #16]
}
 800d61a:	bf00      	nop
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	bc80      	pop	{r7}
 800d622:	4770      	bx	lr
 800d624:	0007fff8 	.word	0x0007fff8
 800d628:	2000155c 	.word	0x2000155c

0800d62c <rfalGetFDTPoll>:


/*******************************************************************************/
uint32_t rfalGetFDTPoll( void )
{
 800d62c:	b480      	push	{r7}
 800d62e:	af00      	add	r7, sp, #0
    return gRFAL.timings.FDTPoll;
 800d630:	4b02      	ldr	r3, [pc, #8]	; (800d63c <rfalGetFDTPoll+0x10>)
 800d632:	691b      	ldr	r3, [r3, #16]
}
 800d634:	4618      	mov	r0, r3
 800d636:	46bd      	mov	sp, r7
 800d638:	bc80      	pop	{r7}
 800d63a:	4770      	bx	lr
 800d63c:	2000155c 	.word	0x2000155c

0800d640 <rfalSetFDTListen>:


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800d64e:	bf28      	it	cs
 800d650:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800d654:	4a03      	ldr	r2, [pc, #12]	; (800d664 <rfalSetFDTListen+0x24>)
 800d656:	60d3      	str	r3, [r2, #12]
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bc80      	pop	{r7}
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	2000155c 	.word	0x2000155c

0800d668 <rfalSetGT>:
}


/*******************************************************************************/
void rfalSetGT( uint32_t GT )
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a05      	ldr	r2, [pc, #20]	; (800d688 <rfalSetGT+0x20>)
 800d674:	4293      	cmp	r3, r2
 800d676:	bf28      	it	cs
 800d678:	4613      	movcs	r3, r2
 800d67a:	4a04      	ldr	r2, [pc, #16]	; (800d68c <rfalSetGT+0x24>)
 800d67c:	6093      	str	r3, [r2, #8]
}
 800d67e:	bf00      	nop
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	bc80      	pop	{r7}
 800d686:	4770      	bx	lr
 800d688:	04d97480 	.word	0x04d97480
 800d68c:	2000155c 	.word	0x2000155c

0800d690 <rfalIsGTExpired>:
}


/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800d694:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <rfalIsGTExpired+0x2c>)
 800d696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00c      	beq.n	800d6b6 <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800d69c:	4b07      	ldr	r3, [pc, #28]	; (800d6bc <rfalIsGTExpired+0x2c>)
 800d69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f004 fced 	bl	8012080 <timerIsExpired>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	f083 0301 	eor.w	r3, r3, #1
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <rfalIsGTExpired+0x26>
        {
            return false;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	e000      	b.n	800d6b8 <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800d6b6:	2301      	movs	r3, #1
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	2000155c 	.word	0x2000155c

0800d6c0 <rfalFieldOnAndStartGT>:


/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3916IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800d6c6:	2280      	movs	r2, #128	; 0x80
 800d6c8:	2180      	movs	r1, #128	; 0x80
 800d6ca:	2002      	movs	r0, #2
 800d6cc:	f004 fa22 	bl	8011b14 <st25r3916CheckReg>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f083 0301 	eor.w	r3, r3, #1
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d103      	bne.n	800d6e4 <rfalFieldOnAndStartGT+0x24>
 800d6dc:	4b2f      	ldr	r3, [pc, #188]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800d6e4:	2321      	movs	r3, #33	; 0x21
 800d6e6:	e054      	b.n	800d792 <rfalFieldOnAndStartGT+0xd2>
    }
    
    ret = ERR_NONE;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800d6ec:	2002      	movs	r0, #2
 800d6ee:	f7f6 f8b9 	bl	8003864 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3916IsTxEnabled() || !gRFAL.field )
 800d6f2:	2208      	movs	r2, #8
 800d6f4:	2108      	movs	r1, #8
 800d6f6:	2002      	movs	r0, #2
 800d6f8:	f004 fa0c 	bl	8011b14 <st25r3916CheckReg>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f083 0301 	eor.w	r3, r3, #1
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b00      	cmp	r3, #0
 800d706:	d106      	bne.n	800d716 <rfalFieldOnAndStartGT+0x56>
 800d708:	4b24      	ldr	r3, [pc, #144]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d70a:	791b      	ldrb	r3, [r3, #4]
 800d70c:	f083 0301 	eor.w	r3, r3, #1
 800d710:	b2db      	uxtb	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d026      	beq.n	800d764 <rfalFieldOnAndStartGT+0xa4>
    {
        
        /* Set TARFG: 0 (75us+0ms=75us), GT is fulfilled using a SW timer */
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800d716:	2100      	movs	r1, #0
 800d718:	2055      	movs	r0, #85	; 0x55
 800d71a:	f003 ffc3 	bl	80116a4 <st25r3916WriteRegister>
        
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, gRFAL.timings.nTRFW );
 800d71e:	4b1f      	ldr	r3, [pc, #124]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d720:	7d1b      	ldrb	r3, [r3, #20]
 800d722:	22ff      	movs	r2, #255	; 0xff
 800d724:	21ff      	movs	r1, #255	; 0xff
 800d726:	20c8      	movs	r0, #200	; 0xc8
 800d728:	f003 fcfc 	bl	8011124 <st25r3916PerformCollisionAvoidance>
 800d72c:	4603      	mov	r3, r0
 800d72e:	80fb      	strh	r3, [r7, #6]
        
        /* n * TRFW timing shall vary  Activity 2.1  3.3.1.1 */
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 800d730:	4b1a      	ldr	r3, [pc, #104]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d732:	7d1b      	ldrb	r3, [r3, #20]
 800d734:	3301      	adds	r3, #1
 800d736:	b2db      	uxtb	r3, r3
 800d738:	f003 0303 	and.w	r3, r3, #3
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	4b17      	ldr	r3, [pc, #92]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d740:	751a      	strb	r2, [r3, #20]
        
        gRFAL.field = st25r3916IsTxEnabled(); //(ret == ERR_NONE);
 800d742:	2208      	movs	r2, #8
 800d744:	2108      	movs	r1, #8
 800d746:	2002      	movs	r0, #2
 800d748:	f004 f9e4 	bl	8011b14 <st25r3916CheckReg>
 800d74c:	4603      	mov	r3, r0
 800d74e:	461a      	mov	r2, r3
 800d750:	4b12      	ldr	r3, [pc, #72]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d752:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800d754:	4b11      	ldr	r3, [pc, #68]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d756:	791b      	ldrb	r3, [r3, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <rfalFieldOnAndStartGT+0xa4>
        {
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 800d75c:	2148      	movs	r1, #72	; 0x48
 800d75e:	2002      	movs	r0, #2
 800d760:	f004 f927 	bl	80119b2 <st25r3916SetRegisterBits>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800d764:	4b0d      	ldr	r3, [pc, #52]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d011      	beq.n	800d790 <rfalFieldOnAndStartGT+0xd0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 800d76c:	4b0b      	ldr	r3, [pc, #44]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800d774:	4293      	cmp	r3, r2
 800d776:	bf38      	it	cc
 800d778:	4613      	movcc	r3, r2
 800d77a:	4a09      	ldr	r2, [pc, #36]	; (800d7a0 <rfalFieldOnAndStartGT+0xe0>)
 800d77c:	fba2 2303 	umull	r2, r3, r2, r3
 800d780:	0b1b      	lsrs	r3, r3, #12
 800d782:	b29b      	uxth	r3, r3
 800d784:	4618      	mov	r0, r3
 800d786:	f004 fc6d 	bl	8012064 <timerCalculateTimer>
 800d78a:	4603      	mov	r3, r0
 800d78c:	4a03      	ldr	r2, [pc, #12]	; (800d79c <rfalFieldOnAndStartGT+0xdc>)
 800d78e:	6413      	str	r3, [r2, #64]	; 0x40
    }
    
    return ret;
 800d790:	88fb      	ldrh	r3, [r7, #6]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	2000155c 	.word	0x2000155c
 800d7a0:	4d542005 	.word	0x4d542005

0800d7a4 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800d7a8:	4b09      	ldr	r3, [pc, #36]	; (800d7d0 <rfalFieldOff+0x2c>)
 800d7aa:	7e1b      	ldrb	r3, [r3, #24]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800d7b0:	f000 faa4 	bl	800dcfc <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3916TxRxOff();
 800d7b4:	2148      	movs	r1, #72	; 0x48
 800d7b6:	2002      	movs	r0, #2
 800d7b8:	f004 f8c4 	bl	8011944 <st25r3916ClrRegisterBits>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800d7bc:	2003      	movs	r0, #3
 800d7be:	f7f6 f851 	bl	8003864 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800d7c2:	4b03      	ldr	r3, [pc, #12]	; (800d7d0 <rfalFieldOff+0x2c>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	2000155c 	.word	0x2000155c

0800d7d4 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800d7d4:	b5b0      	push	{r4, r5, r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800d7e2:	2307      	movs	r3, #7
 800d7e4:	e12e      	b.n	800da44 <rfalStartTransceive+0x270>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800d7e6:	4b99      	ldr	r3, [pc, #612]	; (800da4c <rfalStartTransceive+0x278>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	f240 8129 	bls.w	800da42 <rfalStartTransceive+0x26e>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3916IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800d7f0:	2208      	movs	r2, #8
 800d7f2:	2108      	movs	r1, #8
 800d7f4:	2002      	movs	r0, #2
 800d7f6:	f004 f98d 	bl	8011b14 <st25r3916CheckReg>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	f083 0301 	eor.w	r3, r3, #1
 800d800:	b2db      	uxtb	r3, r3
 800d802:	2b00      	cmp	r3, #0
 800d804:	d011      	beq.n	800d82a <rfalStartTransceive+0x56>
 800d806:	4b91      	ldr	r3, [pc, #580]	; (800da4c <rfalStartTransceive+0x278>)
 800d808:	785b      	ldrb	r3, [r3, #1]
 800d80a:	2b0a      	cmp	r3, #10
 800d80c:	d00d      	beq.n	800d82a <rfalStartTransceive+0x56>
 800d80e:	4b8f      	ldr	r3, [pc, #572]	; (800da4c <rfalStartTransceive+0x278>)
 800d810:	785b      	ldrb	r3, [r3, #1]
 800d812:	2b0b      	cmp	r3, #11
 800d814:	d009      	beq.n	800d82a <rfalStartTransceive+0x56>
 800d816:	4b8d      	ldr	r3, [pc, #564]	; (800da4c <rfalStartTransceive+0x278>)
 800d818:	785b      	ldrb	r3, [r3, #1]
 800d81a:	2b0c      	cmp	r3, #12
 800d81c:	d005      	beq.n	800d82a <rfalStartTransceive+0x56>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d001      	beq.n	800d82a <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800d826:	2321      	movs	r3, #33	; 0x21
 800d828:	e10c      	b.n	800da44 <rfalStartTransceive+0x270>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800d82a:	4b88      	ldr	r3, [pc, #544]	; (800da4c <rfalStartTransceive+0x278>)
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	f103 041c 	add.w	r4, r3, #28
 800d832:	4615      	mov	r5, r2
 800d834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d83c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800d840:	4b82      	ldr	r3, [pc, #520]	; (800da4c <rfalStartTransceive+0x278>)
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d04b      	beq.n	800d8e0 <rfalStartTransceive+0x10c>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800d848:	2340      	movs	r3, #64	; 0x40
 800d84a:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800d84c:	4b7f      	ldr	r3, [pc, #508]	; (800da4c <rfalStartTransceive+0x278>)
 800d84e:	785b      	ldrb	r3, [r3, #1]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d102      	bne.n	800d85a <rfalStartTransceive+0x86>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	33d4      	adds	r3, #212	; 0xd4
 800d858:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800d85a:	4b7c      	ldr	r3, [pc, #496]	; (800da4c <rfalStartTransceive+0x278>)
 800d85c:	785b      	ldrb	r3, [r3, #1]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d102      	bne.n	800d868 <rfalStartTransceive+0x94>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	33d4      	adds	r3, #212	; 0xd4
 800d866:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800d868:	4b78      	ldr	r3, [pc, #480]	; (800da4c <rfalStartTransceive+0x278>)
 800d86a:	785b      	ldrb	r3, [r3, #1]
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d103      	bne.n	800d878 <rfalStartTransceive+0xa4>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d876:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800d878:	4b74      	ldr	r3, [pc, #464]	; (800da4c <rfalStartTransceive+0x278>)
 800d87a:	785b      	ldrb	r3, [r3, #1]
 800d87c:	2b07      	cmp	r3, #7
 800d87e:	d102      	bne.n	800d886 <rfalStartTransceive+0xb2>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	3340      	adds	r3, #64	; 0x40
 800d884:	60fb      	str	r3, [r7, #12]
            
            /* Ensure that MRT is using 64/fc steps */
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800d886:	2108      	movs	r1, #8
 800d888:	2012      	movs	r0, #18
 800d88a:	f004 f85b 	bl	8011944 <st25r3916ClrRegisterBits>
            
            
            /* If Correlator is being used further adjustment is required for NFCB */
            if( (st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U)) && (gRFAL.mode == RFAL_MODE_POLL_NFCB) )
 800d88e:	2200      	movs	r2, #0
 800d890:	2104      	movs	r1, #4
 800d892:	200a      	movs	r0, #10
 800d894:	f004 f93e 	bl	8011b14 <st25r3916CheckReg>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00f      	beq.n	800d8be <rfalStartTransceive+0xea>
 800d89e:	4b6b      	ldr	r3, [pc, #428]	; (800da4c <rfalStartTransceive+0x278>)
 800d8a0:	785b      	ldrb	r3, [r3, #1]
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	d10b      	bne.n	800d8be <rfalStartTransceive+0xea>
            {
                FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3380      	adds	r3, #128	; 0x80
 800d8aa:	60fb      	str	r3, [r7, #12]
                st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800d8ac:	2108      	movs	r1, #8
 800d8ae:	204c      	movs	r0, #76	; 0x4c
 800d8b0:	f004 f87f 	bl	80119b2 <st25r3916SetRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800d8b4:	2214      	movs	r2, #20
 800d8b6:	211f      	movs	r1, #31
 800d8b8:	2046      	movs	r0, #70	; 0x46
 800d8ba:	f004 f8a7 	bl	8011a0c <st25r3916ChangeRegisterBits>
            }
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800d8be:	4b63      	ldr	r3, [pc, #396]	; (800da4c <rfalStartTransceive+0x278>)
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d806      	bhi.n	800d8d6 <rfalStartTransceive+0x102>
 800d8c8:	4b60      	ldr	r3, [pc, #384]	; (800da4c <rfalStartTransceive+0x278>)
 800d8ca:	68da      	ldr	r2, [r3, #12]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	099b      	lsrs	r3, r3, #6
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	e000      	b.n	800d8d8 <rfalStartTransceive+0x104>
 800d8d6:	2304      	movs	r3, #4
 800d8d8:	4619      	mov	r1, r3
 800d8da:	200f      	movs	r0, #15
 800d8dc:	f003 fee2 	bl	80116a4 <st25r3916WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800d8e0:	4b5a      	ldr	r3, [pc, #360]	; (800da4c <rfalStartTransceive+0x278>)
 800d8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e8:	d04a      	beq.n	800d980 <rfalStartTransceive+0x1ac>
 800d8ea:	4b58      	ldr	r3, [pc, #352]	; (800da4c <rfalStartTransceive+0x278>)
 800d8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d046      	beq.n	800d980 <rfalStartTransceive+0x1ac>
        {
            /* Ensure proper timing configuration */
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800d8f2:	4b56      	ldr	r3, [pc, #344]	; (800da4c <rfalStartTransceive+0x278>)
 800d8f4:	68da      	ldr	r2, [r3, #12]
 800d8f6:	4b55      	ldr	r3, [pc, #340]	; (800da4c <rfalStartTransceive+0x278>)
 800d8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d301      	bcc.n	800d902 <rfalStartTransceive+0x12e>
            {
                return ERR_PARAM;
 800d8fe:	2307      	movs	r3, #7
 800d900:	e0a0      	b.n	800da44 <rfalStartTransceive+0x270>
            }
            
            FxTAdj = RFAL_FWT_ADJUSTMENT;
 800d902:	2340      	movs	r3, #64	; 0x40
 800d904:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800d906:	4b51      	ldr	r3, [pc, #324]	; (800da4c <rfalStartTransceive+0x278>)
 800d908:	785b      	ldrb	r3, [r3, #1]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d103      	bne.n	800d916 <rfalStartTransceive+0x142>
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800d914:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800d916:	4b4d      	ldr	r3, [pc, #308]	; (800da4c <rfalStartTransceive+0x278>)
 800d918:	785b      	ldrb	r3, [r3, #1]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d103      	bne.n	800d926 <rfalStartTransceive+0x152>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800d924:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800d926:	4b49      	ldr	r3, [pc, #292]	; (800da4c <rfalStartTransceive+0x278>)
 800d928:	785b      	ldrb	r3, [r3, #1]
 800d92a:	2b03      	cmp	r3, #3
 800d92c:	d103      	bne.n	800d936 <rfalStartTransceive+0x162>
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d934:	60fb      	str	r3, [r7, #12]
            if( (gRFAL.mode == RFAL_MODE_POLL_NFCF) || (gRFAL.mode == RFAL_MODE_POLL_ACTIVE_P2P) )
 800d936:	4b45      	ldr	r3, [pc, #276]	; (800da4c <rfalStartTransceive+0x278>)
 800d938:	785b      	ldrb	r3, [r3, #1]
 800d93a:	2b06      	cmp	r3, #6
 800d93c:	d003      	beq.n	800d946 <rfalStartTransceive+0x172>
 800d93e:	4b43      	ldr	r3, [pc, #268]	; (800da4c <rfalStartTransceive+0x278>)
 800d940:	785b      	ldrb	r3, [r3, #1]
 800d942:	2b09      	cmp	r3, #9
 800d944:	d10b      	bne.n	800d95e <rfalStartTransceive+0x18a>
            {
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800d946:	4b41      	ldr	r3, [pc, #260]	; (800da4c <rfalStartTransceive+0x278>)
 800d948:	789b      	ldrb	r3, [r3, #2]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d102      	bne.n	800d954 <rfalStartTransceive+0x180>
 800d94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d952:	e001      	b.n	800d958 <rfalStartTransceive+0x184>
 800d954:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4413      	add	r3, r2
 800d95c:	60fb      	str	r3, [r7, #12]
            }
            
            /* Ensure that the given FWT doesn't exceed NRT maximum */
            gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 800d95e:	4b3b      	ldr	r3, [pc, #236]	; (800da4c <rfalStartTransceive+0x278>)
 800d960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	4413      	add	r3, r2
 800d966:	4a3a      	ldr	r2, [pc, #232]	; (800da50 <rfalStartTransceive+0x27c>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	bf28      	it	cs
 800d96c:	4613      	movcs	r3, r2
 800d96e:	4a37      	ldr	r2, [pc, #220]	; (800da4c <rfalStartTransceive+0x278>)
 800d970:	6353      	str	r3, [r2, #52]	; 0x34
            
            /* Set FWT in the NRT */
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800d972:	4b36      	ldr	r3, [pc, #216]	; (800da4c <rfalStartTransceive+0x278>)
 800d974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d976:	099b      	lsrs	r3, r3, #6
 800d978:	4618      	mov	r0, r3
 800d97a:	f003 fc87 	bl	801128c <st25r3916SetNoResponseTime>
 800d97e:	e002      	b.n	800d986 <rfalStartTransceive+0x1b2>
        }
        else
        {
            /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800d980:	2000      	movs	r0, #0
 800d982:	f003 fc83 	bl	801128c <st25r3916SetNoResponseTime>
        }
        
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800d986:	4b31      	ldr	r3, [pc, #196]	; (800da4c <rfalStartTransceive+0x278>)
 800d988:	2203      	movs	r2, #3
 800d98a:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800d98c:	4b2f      	ldr	r3, [pc, #188]	; (800da4c <rfalStartTransceive+0x278>)
 800d98e:	220b      	movs	r2, #11
 800d990:	761a      	strb	r2, [r3, #24]
        gRFAL.TxRx.status = ERR_BUSY;
 800d992:	4b2e      	ldr	r3, [pc, #184]	; (800da4c <rfalStartTransceive+0x278>)
 800d994:	2202      	movs	r2, #2
 800d996:	835a      	strh	r2, [r3, #26]
        
        
    #if RFAL_FEATURE_NFCV
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800d998:	4b2c      	ldr	r3, [pc, #176]	; (800da4c <rfalStartTransceive+0x278>)
 800d99a:	785b      	ldrb	r3, [r3, #1]
 800d99c:	2b07      	cmp	r3, #7
 800d99e:	d003      	beq.n	800d9a8 <rfalStartTransceive+0x1d4>
 800d9a0:	4b2a      	ldr	r3, [pc, #168]	; (800da4c <rfalStartTransceive+0x278>)
 800d9a2:	785b      	ldrb	r3, [r3, #1]
 800d9a4:	2b08      	cmp	r3, #8
 800d9a6:	d128      	bne.n	800d9fa <rfalStartTransceive+0x226>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800d9a8:	4a28      	ldr	r2, [pc, #160]	; (800da4c <rfalStartTransceive+0x278>)
 800d9aa:	4b28      	ldr	r3, [pc, #160]	; (800da4c <rfalStartTransceive+0x278>)
 800d9ac:	f502 7479 	add.w	r4, r2, #996	; 0x3e4
 800d9b0:	f103 051c 	add.w	r5, r3, #28
 800d9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d9bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800d9c0:	4b22      	ldr	r3, [pc, #136]	; (800da4c <rfalStartTransceive+0x278>)
 800d9c2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <rfalStartTransceive+0x1fa>
 800d9ca:	4b22      	ldr	r3, [pc, #136]	; (800da54 <rfalStartTransceive+0x280>)
 800d9cc:	e000      	b.n	800d9d0 <rfalStartTransceive+0x1fc>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	4a1e      	ldr	r2, [pc, #120]	; (800da4c <rfalStartTransceive+0x278>)
 800d9d2:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800d9d4:	4b1d      	ldr	r3, [pc, #116]	; (800da4c <rfalStartTransceive+0x278>)
 800d9d6:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800d9da:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800d9dc:	4b1b      	ldr	r3, [pc, #108]	; (800da4c <rfalStartTransceive+0x278>)
 800d9de:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800d9e2:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800d9e6:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800d9ea:	4a18      	ldr	r2, [pc, #96]	; (800da4c <rfalStartTransceive+0x278>)
 800d9ec:	6313      	str	r3, [r2, #48]	; 0x30
          
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800d9ee:	4b17      	ldr	r3, [pc, #92]	; (800da4c <rfalStartTransceive+0x278>)
 800d9f0:	69db      	ldr	r3, [r3, #28]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <rfalStartTransceive+0x226>
            {
                return  ERR_NONE;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e024      	b.n	800da44 <rfalStartTransceive+0x270>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800d9fa:	4b14      	ldr	r3, [pc, #80]	; (800da4c <rfalStartTransceive+0x278>)
 800d9fc:	69db      	ldr	r3, [r3, #28]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <rfalStartTransceive+0x236>
 800da02:	4b12      	ldr	r3, [pc, #72]	; (800da4c <rfalStartTransceive+0x278>)
 800da04:	8c1b      	ldrh	r3, [r3, #32]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d119      	bne.n	800da3e <rfalStartTransceive+0x26a>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800da0a:	f000 f993 	bl	800dd34 <rfalPrepareTransceive>
            
            /* In AP2P check the field status */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800da0e:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <rfalStartTransceive+0x278>)
 800da10:	785b      	ldrb	r3, [r3, #1]
 800da12:	2b09      	cmp	r3, #9
 800da14:	d003      	beq.n	800da1e <rfalStartTransceive+0x24a>
 800da16:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <rfalStartTransceive+0x278>)
 800da18:	785b      	ldrb	r3, [r3, #1]
 800da1a:	2b0d      	cmp	r3, #13
 800da1c:	d106      	bne.n	800da2c <rfalStartTransceive+0x258>
            {
                /* Disable our field upon a Rx reEnable, and start PPON2 manually */
                st25r3916TxOff();                
 800da1e:	2108      	movs	r1, #8
 800da20:	2002      	movs	r0, #2
 800da22:	f003 ff8f 	bl	8011944 <st25r3916ClrRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_START_PPON2_TIMER );
 800da26:	20e4      	movs	r0, #228	; 0xe4
 800da28:	f003 ff2b 	bl	8011882 <st25r3916ExecuteCommand>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800da2c:	20d1      	movs	r0, #209	; 0xd1
 800da2e:	f003 ff28 	bl	8011882 <st25r3916ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800da32:	20e3      	movs	r0, #227	; 0xe3
 800da34:	f003 ff25 	bl	8011882 <st25r3916ExecuteCommand>

            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800da38:	4b04      	ldr	r3, [pc, #16]	; (800da4c <rfalStartTransceive+0x278>)
 800da3a:	2251      	movs	r2, #81	; 0x51
 800da3c:	761a      	strb	r2, [r3, #24]
        }
        
        return ERR_NONE;
 800da3e:	2300      	movs	r3, #0
 800da40:	e000      	b.n	800da44 <rfalStartTransceive+0x270>
    }
    
    return ERR_WRONG_STATE;
 800da42:	2321      	movs	r3, #33	; 0x21
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bdb0      	pop	{r4, r5, r7, pc}
 800da4c:	2000155c 	.word	0x2000155c
 800da50:	0ffff000 	.word	0x0ffff000
 800da54:	20001734 	.word	0x20001734

0800da58 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800da58:	b480      	push	{r7}
 800da5a:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800da5c:	4b08      	ldr	r3, [pc, #32]	; (800da80 <rfalIsTransceiveInTx+0x28>)
 800da5e:	7e1b      	ldrb	r3, [r3, #24]
 800da60:	2b0a      	cmp	r3, #10
 800da62:	d905      	bls.n	800da70 <rfalIsTransceiveInTx+0x18>
 800da64:	4b06      	ldr	r3, [pc, #24]	; (800da80 <rfalIsTransceiveInTx+0x28>)
 800da66:	7e1b      	ldrb	r3, [r3, #24]
 800da68:	2b50      	cmp	r3, #80	; 0x50
 800da6a:	d801      	bhi.n	800da70 <rfalIsTransceiveInTx+0x18>
 800da6c:	2301      	movs	r3, #1
 800da6e:	e000      	b.n	800da72 <rfalIsTransceiveInTx+0x1a>
 800da70:	2300      	movs	r3, #0
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	b2db      	uxtb	r3, r3
}
 800da78:	4618      	mov	r0, r3
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bc80      	pop	{r7}
 800da7e:	4770      	bx	lr
 800da80:	2000155c 	.word	0x2000155c

0800da84 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800da84:	b480      	push	{r7}
 800da86:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800da88:	4b05      	ldr	r3, [pc, #20]	; (800daa0 <rfalIsTransceiveInRx+0x1c>)
 800da8a:	7e1b      	ldrb	r3, [r3, #24]
 800da8c:	2b50      	cmp	r3, #80	; 0x50
 800da8e:	bf8c      	ite	hi
 800da90:	2301      	movhi	r3, #1
 800da92:	2300      	movls	r3, #0
 800da94:	b2db      	uxtb	r3, r3
}
 800da96:	4618      	mov	r0, r3
 800da98:	46bd      	mov	sp, r7
 800da9a:	bc80      	pop	{r7}
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	2000155c 	.word	0x2000155c

0800daa4 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08c      	sub	sp, #48	; 0x30
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	607a      	str	r2, [r7, #4]
 800daae:	461a      	mov	r2, r3
 800dab0:	460b      	mov	r3, r1
 800dab2:	817b      	strh	r3, [r7, #10]
 800dab4:	4613      	mov	r3, r2
 800dab6:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	897b      	ldrh	r3, [r7, #10]
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	82bb      	strh	r3, [r7, #20]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	61bb      	str	r3, [r7, #24]
 800dac8:	893b      	ldrh	r3, [r7, #8]
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	b29b      	uxth	r3, r3
 800dace:	83bb      	strh	r3, [r7, #28]
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	623b      	str	r3, [r7, #32]
 800dad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
 800dad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dada:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800dadc:	f107 0310 	add.w	r3, r7, #16
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff fe77 	bl	800d7d4 <rfalStartTransceive>
 800dae6:	4603      	mov	r3, r0
 800dae8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800daea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daec:	2b00      	cmp	r3, #0
 800daee:	d001      	beq.n	800daf4 <rfalTransceiveBlockingTx+0x50>
 800daf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daf2:	e002      	b.n	800dafa <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800daf4:	f000 f805 	bl	800db02 <rfalTransceiveRunBlockingTx>
 800daf8:	4603      	mov	r3, r0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3730      	adds	r7, #48	; 0x30
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	af00      	add	r7, sp, #0
    ReturnCode ret;
        
    do{
        rfalWorker();
 800db08:	f000 f8a4 	bl	800dc54 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800db0c:	f000 f892 	bl	800dc34 <rfalGetTransceiveStatus>
 800db10:	4603      	mov	r3, r0
 800db12:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800db14:	f7ff ffa0 	bl	800da58 <rfalIsTransceiveInTx>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <rfalTransceiveRunBlockingTx+0x22>
 800db1e:	88fb      	ldrh	r3, [r7, #6]
 800db20:	2b02      	cmp	r3, #2
 800db22:	d0f1      	beq.n	800db08 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800db24:	f7ff ffae 	bl	800da84 <rfalIsTransceiveInRx>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800db2e:	2300      	movs	r3, #0
 800db30:	e000      	b.n	800db34 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800db32:	88fb      	ldrh	r3, [r7, #6]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800db42:	f000 f887 	bl	800dc54 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800db46:	f000 f875 	bl	800dc34 <rfalGetTransceiveStatus>
 800db4a:	4603      	mov	r3, r0
 800db4c:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );    
 800db4e:	f7ff ff99 	bl	800da84 <rfalIsTransceiveInRx>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <rfalTransceiveBlockingRx+0x22>
 800db58:	88fb      	ldrh	r3, [r7, #6]
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d0f1      	beq.n	800db42 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800db5e:	88fb      	ldrh	r3, [r7, #6]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08a      	sub	sp, #40	; 0x28
 800db6c:	af04      	add	r7, sp, #16
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	607a      	str	r2, [r7, #4]
 800db72:	461a      	mov	r2, r3
 800db74:	460b      	mov	r3, r1
 800db76:	817b      	strh	r3, [r7, #10]
 800db78:	4613      	mov	r3, r2
 800db7a:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800db7c:	893a      	ldrh	r2, [r7, #8]
 800db7e:	8979      	ldrh	r1, [r7, #10]
 800db80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db82:	9302      	str	r3, [sp, #8]
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	9301      	str	r3, [sp, #4]
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	4613      	mov	r3, r2
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7ff ff87 	bl	800daa4 <rfalTransceiveBlockingTx>
 800db96:	4603      	mov	r3, r0
 800db98:	82fb      	strh	r3, [r7, #22]
 800db9a:	8afb      	ldrh	r3, [r7, #22]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <rfalTransceiveBlockingTxRx+0x3c>
 800dba0:	8afb      	ldrh	r3, [r7, #22]
 800dba2:	e00e      	b.n	800dbc2 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800dba4:	f7ff ffca 	bl	800db3c <rfalTransceiveBlockingRx>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800dbac:	6a3b      	ldr	r3, [r7, #32]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d006      	beq.n	800dbc0 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen = rfalConvBitsToBytes(*actLen);
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	3307      	adds	r3, #7
 800dbb8:	08db      	lsrs	r3, r3, #3
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800dbc0:	8afb      	ldrh	r3, [r7, #22]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3718      	adds	r7, #24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
	...

0800dbcc <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800dbd0:	4b17      	ldr	r3, [pc, #92]	; (800dc30 <rfalRunTransceiveWorker+0x64>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d127      	bne.n	800dc28 <rfalRunTransceiveWorker+0x5c>
    {
        /*******************************************************************************/
        /* Check Transceive Sanity Timer has expired */
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 800dbd8:	4b15      	ldr	r3, [pc, #84]	; (800dc30 <rfalRunTransceiveWorker+0x64>)
 800dbda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <rfalRunTransceiveWorker+0x30>
        {
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 800dbe0:	4b13      	ldr	r3, [pc, #76]	; (800dc30 <rfalRunTransceiveWorker+0x64>)
 800dbe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f004 fa4b 	bl	8012080 <timerIsExpired>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d005      	beq.n	800dbfc <rfalRunTransceiveWorker+0x30>
            {
                /* If sanity timer has expired abort ongoing transceive and signal error */
                gRFAL.TxRx.status = ERR_IO;
 800dbf0:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <rfalRunTransceiveWorker+0x64>)
 800dbf2:	2203      	movs	r2, #3
 800dbf4:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800dbf6:	4b0e      	ldr	r3, [pc, #56]	; (800dc30 <rfalRunTransceiveWorker+0x64>)
 800dbf8:	225a      	movs	r2, #90	; 0x5a
 800dbfa:	761a      	strb	r2, [r3, #24]
            }
        }
        
        /*******************************************************************************/
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800dbfc:	f7ff ff2c 	bl	800da58 <rfalIsTransceiveInTx>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d005      	beq.n	800dc12 <rfalRunTransceiveWorker+0x46>
        {
            rfalTransceiveTx();
 800dc06:	f000 f96d 	bl	800dee4 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800dc0a:	f000 f813 	bl	800dc34 <rfalGetTransceiveStatus>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	e00b      	b.n	800dc2a <rfalRunTransceiveWorker+0x5e>
        }
        if( rfalIsTransceiveInRx() )
 800dc12:	f7ff ff37 	bl	800da84 <rfalIsTransceiveInRx>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <rfalRunTransceiveWorker+0x5c>
        {
            rfalTransceiveRx();
 800dc1c:	f000 fba6 	bl	800e36c <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800dc20:	f000 f808 	bl	800dc34 <rfalGetTransceiveStatus>
 800dc24:	4603      	mov	r3, r0
 800dc26:	e000      	b.n	800dc2a <rfalRunTransceiveWorker+0x5e>
        }
    }    
    return ERR_WRONG_STATE;
 800dc28:	2321      	movs	r3, #33	; 0x21
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	2000155c 	.word	0x2000155c

0800dc34 <rfalGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalGetTransceiveStatus( void )
{
 800dc34:	b480      	push	{r7}
 800dc36:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800dc38:	4b05      	ldr	r3, [pc, #20]	; (800dc50 <rfalGetTransceiveStatus+0x1c>)
 800dc3a:	7e1b      	ldrb	r3, [r3, #24]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d102      	bne.n	800dc46 <rfalGetTransceiveStatus+0x12>
 800dc40:	4b03      	ldr	r3, [pc, #12]	; (800dc50 <rfalGetTransceiveStatus+0x1c>)
 800dc42:	8b5b      	ldrh	r3, [r3, #26]
 800dc44:	e000      	b.n	800dc48 <rfalGetTransceiveStatus+0x14>
 800dc46:	2302      	movs	r3, #2
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bc80      	pop	{r7}
 800dc4e:	4770      	bx	lr
 800dc50:	2000155c 	.word	0x2000155c

0800dc54 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800dc58:	4b0b      	ldr	r3, [pc, #44]	; (800dc88 <rfalWorker+0x34>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b05      	cmp	r3, #5
 800dc5e:	d00c      	beq.n	800dc7a <rfalWorker+0x26>
 800dc60:	2b05      	cmp	r3, #5
 800dc62:	dc0d      	bgt.n	800dc80 <rfalWorker+0x2c>
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	d002      	beq.n	800dc6e <rfalWorker+0x1a>
 800dc68:	2b04      	cmp	r3, #4
 800dc6a:	d003      	beq.n	800dc74 <rfalWorker+0x20>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800dc6c:	e008      	b.n	800dc80 <rfalWorker+0x2c>
            rfalRunTransceiveWorker();
 800dc6e:	f7ff ffad 	bl	800dbcc <rfalRunTransceiveWorker>
            break;
 800dc72:	e006      	b.n	800dc82 <rfalWorker+0x2e>
            rfalRunListenModeWorker();
 800dc74:	f001 fcec 	bl	800f650 <rfalRunListenModeWorker>
            break;
 800dc78:	e003      	b.n	800dc82 <rfalWorker+0x2e>
            rfalRunWakeUpModeWorker();
 800dc7a:	f002 fca3 	bl	80105c4 <rfalRunWakeUpModeWorker>
            break;
 800dc7e:	e000      	b.n	800dc82 <rfalWorker+0x2e>
            break;
 800dc80:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800dc82:	bf00      	nop
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	2000155c 	.word	0x2000155c

0800dc8c <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
    uint16_t fifoBytesToRead;
 
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800dc92:	f000 feef 	bl	800ea74 <rfalFIFOStatusGetNumBytes>
 800dc96:	4603      	mov	r3, r0
 800dc98:	80fb      	strh	r3, [r7, #6]
    

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800dc9a:	4b17      	ldr	r3, [pc, #92]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dc9c:	785b      	ldrb	r3, [r3, #1]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d125      	bne.n	800dcee <rfalErrorHandling+0x62>
        
        /*******************************************************************************/
        /* If we received a frame with a incomplete byte we`ll raise a specific error  *
         * ( support for T2T 4 bit ACK / NAK, MIFARE and Kovio )                       */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800dca2:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	2b1b      	cmp	r3, #27
 800dca8:	d003      	beq.n	800dcb2 <rfalErrorHandling+0x26>
 800dcaa:	4b13      	ldr	r3, [pc, #76]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dcac:	8b5b      	ldrh	r3, [r3, #26]
 800dcae:	2b15      	cmp	r3, #21
 800dcb0:	d11d      	bne.n	800dcee <rfalErrorHandling+0x62>
        {
            if( rfalFIFOStatusIsIncompleteByte() )
 800dcb2:	f000 fefb 	bl	800eaac <rfalFIFOStatusIsIncompleteByte>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d018      	beq.n	800dcee <rfalErrorHandling+0x62>
            {
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800dcbc:	4b0e      	ldr	r3, [pc, #56]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc0:	88fa      	ldrh	r2, [r7, #6]
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f003 fd5a 	bl	801177e <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800dcca:	4b0b      	ldr	r3, [pc, #44]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <rfalErrorHandling+0x56>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800dcd2:	f000 ff0f 	bl	800eaf4 <rfalFIFOGetNumIncompleteBits>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4b07      	ldr	r3, [pc, #28]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcde:	b292      	uxth	r2, r2
 800dce0:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dce4:	2228      	movs	r2, #40	; 0x28
 800dce6:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800dce8:	4b03      	ldr	r3, [pc, #12]	; (800dcf8 <rfalErrorHandling+0x6c>)
 800dcea:	225a      	movs	r2, #90	; 0x5a
 800dcec:	761a      	strb	r2, [r3, #24]
            }
        }
    }
    
}
 800dcee:	bf00      	nop
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	2000155c 	.word	0x2000155c

0800dcfc <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800dd00:	21e0      	movs	r1, #224	; 0xe0
 800dd02:	2005      	movs	r0, #5
 800dd04:	f003 fe1e 	bl	8011944 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800dd08:	2108      	movs	r1, #8
 800dd0a:	200c      	movs	r0, #12
 800dd0c:	f003 fe51 	bl	80119b2 <st25r3916SetRegisterBits>
    /*******************************************************************************/
    /* Transceive timers                                                           */
    /*******************************************************************************/
    rfalTimerDestroy( gRFAL.tmr.txRx );
    rfalTimerDestroy( gRFAL.tmr.RXE );
    gRFAL.tmr.txRx = RFAL_TIMING_NONE; 
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <rfalCleanupTransceive+0x34>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	649a      	str	r2, [r3, #72]	; 0x48
    gRFAL.tmr.RXE  = RFAL_TIMING_NONE;
 800dd16:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <rfalCleanupTransceive+0x34>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	645a      	str	r2, [r3, #68]	; 0x44
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800dd1c:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <rfalCleanupTransceive+0x34>)
 800dd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <rfalCleanupTransceive+0x2e>
    {
        gRFAL.callbacks.postTxRx();
 800dd24:	4b02      	ldr	r3, [pc, #8]	; (800dd30 <rfalCleanupTransceive+0x34>)
 800dd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd28:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800dd2a:	bf00      	nop
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	2000155c 	.word	0x2000155c

0800dd34 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800dd3a:	4b67      	ldr	r3, [pc, #412]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd3c:	785b      	ldrb	r3, [r3, #1]
 800dd3e:	2b0a      	cmp	r3, #10
 800dd40:	d00e      	beq.n	800dd60 <rfalPrepareTransceive+0x2c>
 800dd42:	4b65      	ldr	r3, [pc, #404]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd44:	785b      	ldrb	r3, [r3, #1]
 800dd46:	2b0b      	cmp	r3, #11
 800dd48:	d00a      	beq.n	800dd60 <rfalPrepareTransceive+0x2c>
 800dd4a:	4b63      	ldr	r3, [pc, #396]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd4c:	785b      	ldrb	r3, [r3, #1]
 800dd4e:	2b0c      	cmp	r3, #12
 800dd50:	d006      	beq.n	800dd60 <rfalPrepareTransceive+0x2c>
    {
        /* Reset receive logic with STOP command */
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800dd52:	20c2      	movs	r0, #194	; 0xc2
 800dd54:	f003 fd95 	bl	8011882 <st25r3916ExecuteCommand>
    
        /* Reset Rx Gain */
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800dd58:	20d5      	movs	r0, #213	; 0xd5
 800dd5a:	f003 fd92 	bl	8011882 <st25r3916ExecuteCommand>
 800dd5e:	e002      	b.n	800dd66 <rfalPrepareTransceive+0x32>
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800dd60:	20db      	movs	r0, #219	; 0xdb
 800dd62:	f003 fd8e 	bl	8011882 <st25r3916ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800dd66:	4b5c      	ldr	r3, [pc, #368]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd68:	785b      	ldrb	r3, [r3, #1]
 800dd6a:	2b09      	cmp	r3, #9
 800dd6c:	d01c      	beq.n	800dda8 <rfalPrepareTransceive+0x74>
 800dd6e:	4b5a      	ldr	r3, [pc, #360]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd70:	785b      	ldrb	r3, [r3, #1]
 800dd72:	2b0d      	cmp	r3, #13
 800dd74:	d018      	beq.n	800dda8 <rfalPrepareTransceive+0x74>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800dd76:	4b58      	ldr	r3, [pc, #352]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d014      	beq.n	800dda8 <rfalPrepareTransceive+0x74>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800dd7e:	4b56      	ldr	r3, [pc, #344]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	f240 423b 	movw	r2, #1083	; 0x43b
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d804      	bhi.n	800dd94 <rfalPrepareTransceive+0x60>
 800dd8a:	4b53      	ldr	r3, [pc, #332]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd8c:	691b      	ldr	r3, [r3, #16]
 800dd8e:	08db      	lsrs	r3, r3, #3
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	e005      	b.n	800dda0 <rfalPrepareTransceive+0x6c>
 800dd94:	4b50      	ldr	r3, [pc, #320]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dd96:	691b      	ldr	r3, [r3, #16]
 800dd98:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800dd9c:	08db      	lsrs	r3, r3, #3
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	2120      	movs	r1, #32
 800dda2:	4618      	mov	r0, r3
 800dda4:	f003 fac7 	bl	8011336 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800dda8:	4b4b      	ldr	r3, [pc, #300]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800ddaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d002      	beq.n	800ddb6 <rfalPrepareTransceive+0x82>
    {
        gRFAL.callbacks.preTxRx();
 800ddb0:	4b49      	ldr	r3, [pc, #292]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800ddb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddb4:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800ddb6:	4b49      	ldr	r3, [pc, #292]	; (800dedc <rfalPrepareTransceive+0x1a8>)
 800ddb8:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
 800ddba:	2300      	movs	r3, #0
 800ddbc:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800ddbe:	4b46      	ldr	r3, [pc, #280]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800ddc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc2:	f003 0304 	and.w	r3, r3, #4
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <rfalPrepareTransceive+0x9e>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
 800ddca:	78fb      	ldrb	r3, [r7, #3]
 800ddcc:	f043 0320 	orr.w	r3, r3, #32
 800ddd0:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800ddd2:	4b41      	ldr	r3, [pc, #260]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800ddd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd6:	f003 0310 	and.w	r3, r3, #16
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <rfalPrepareTransceive+0xb2>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 800ddde:	78fb      	ldrb	r3, [r7, #3]
 800dde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde4:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800dde6:	4b3c      	ldr	r3, [pc, #240]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddea:	f003 0320 	and.w	r3, r3, #32
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d003      	beq.n	800ddfa <rfalPrepareTransceive+0xc6>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 800ddf2:	78fb      	ldrb	r3, [r7, #3]
 800ddf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ddf8:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 800ddfa:	78fb      	ldrb	r3, [r7, #3]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	21e0      	movs	r1, #224	; 0xe0
 800de00:	2005      	movs	r0, #5
 800de02:	f003 fe03 	bl	8011a0c <st25r3916ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800de06:	4b34      	ldr	r3, [pc, #208]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d004      	beq.n	800de1c <rfalPrepareTransceive+0xe8>
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800de12:	2108      	movs	r1, #8
 800de14:	200c      	movs	r0, #12
 800de16:	f003 fd95 	bl	8011944 <st25r3916ClrRegisterBits>
 800de1a:	e003      	b.n	800de24 <rfalPrepareTransceive+0xf0>
    }
    else
    {
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800de1c:	2108      	movs	r1, #8
 800de1e:	200c      	movs	r0, #12
 800de20:	f003 fdc7 	bl	80119b2 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800de24:	4b2c      	ldr	r3, [pc, #176]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de26:	79db      	ldrb	r3, [r3, #7]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d108      	bne.n	800de3e <rfalPrepareTransceive+0x10a>
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800de2c:	2102      	movs	r1, #2
 800de2e:	2012      	movs	r0, #18
 800de30:	f003 fdbf 	bl	80119b2 <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f043 0302 	orr.w	r3, r3, #2
 800de3a:	607b      	str	r3, [r7, #4]
 800de3c:	e003      	b.n	800de46 <rfalPrepareTransceive+0x112>
    }
    else
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 800de3e:	2102      	movs	r1, #2
 800de40:	2012      	movs	r0, #18
 800de42:	f003 fd7f 	bl	8011944 <st25r3916ClrRegisterBits>
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 800de46:	4b24      	ldr	r3, [pc, #144]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	2b0a      	cmp	r3, #10
 800de4c:	d007      	beq.n	800de5e <rfalPrepareTransceive+0x12a>
 800de4e:	4b22      	ldr	r3, [pc, #136]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de50:	785b      	ldrb	r3, [r3, #1]
 800de52:	2b0b      	cmp	r3, #11
 800de54:	d003      	beq.n	800de5e <rfalPrepareTransceive+0x12a>
 800de56:	4b20      	ldr	r3, [pc, #128]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de58:	785b      	ldrb	r3, [r3, #1]
 800de5a:	2b0c      	cmp	r3, #12
 800de5c:	d103      	bne.n	800de66 <rfalPrepareTransceive+0x132>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
 800de64:	607b      	str	r3, [r7, #4]
    }
    
    /* In Active comms enable also External Field interrupts and set RF Collsion Avoindance */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800de66:	4b1c      	ldr	r3, [pc, #112]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de68:	785b      	ldrb	r3, [r3, #1]
 800de6a:	2b09      	cmp	r3, #9
 800de6c:	d003      	beq.n	800de76 <rfalPrepareTransceive+0x142>
 800de6e:	4b1a      	ldr	r3, [pc, #104]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de70:	785b      	ldrb	r3, [r3, #1]
 800de72:	2b0d      	cmp	r3, #13
 800de74:	d10a      	bne.n	800de8c <rfalPrepareTransceive+0x158>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de7c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800de80:	607b      	str	r3, [r7, #4]
        
        /* Set n=0 for subsequent RF Collision Avoidance */
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
 800de82:	2200      	movs	r2, #0
 800de84:	2103      	movs	r1, #3
 800de86:	200a      	movs	r0, #10
 800de88:	f003 fdc0 	bl	8011a0c <st25r3916ChangeRegisterBits>
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800de8c:	4b12      	ldr	r3, [pc, #72]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de94:	d013      	beq.n	800debe <rfalPrepareTransceive+0x18a>
 800de96:	4b10      	ldr	r3, [pc, #64]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800de98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00f      	beq.n	800debe <rfalPrepareTransceive+0x18a>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800de9e:	4b0e      	ldr	r3, [pc, #56]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800dea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea2:	4a0f      	ldr	r2, [pc, #60]	; (800dee0 <rfalPrepareTransceive+0x1ac>)
 800dea4:	fba2 2303 	umull	r2, r3, r2, r3
 800dea8:	0b1b      	lsrs	r3, r3, #12
 800deaa:	b29b      	uxth	r3, r3
 800deac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	4618      	mov	r0, r3
 800deb4:	f004 f8d6 	bl	8012064 <timerCalculateTimer>
 800deb8:	4603      	mov	r3, r0
 800deba:	4a07      	ldr	r2, [pc, #28]	; (800ded8 <rfalPrepareTransceive+0x1a4>)
 800debc:	6493      	str	r3, [r2, #72]	; 0x48
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f003 ffb8 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f003 ffff 	bl	8011ec8 <st25r3916EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800deca:	f000 fdc7 	bl	800ea5c <rfalFIFOStatusClear>
}
 800dece:	bf00      	nop
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	2000155c 	.word	0x2000155c
 800dedc:	00f04078 	.word	0x00f04078
 800dee0:	4d542005 	.word	0x4d542005

0800dee4 <rfalTransceiveTx>:


/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800dee4:	b5b0      	push	{r4, r5, r7, lr}
 800dee6:	b08a      	sub	sp, #40	; 0x28
 800dee8:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800deea:	2300      	movs	r3, #0
 800deec:	81fb      	strh	r3, [r7, #14]
    NO_WARNING( ret );
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800deee:	2300      	movs	r3, #0
 800def0:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800def2:	4ba0      	ldr	r3, [pc, #640]	; (800e174 <rfalTransceiveTx+0x290>)
 800def4:	7e1a      	ldrb	r2, [r3, #24]
 800def6:	4b9f      	ldr	r3, [pc, #636]	; (800e174 <rfalTransceiveTx+0x290>)
 800def8:	7e5b      	ldrb	r3, [r3, #25]
 800defa:	429a      	cmp	r2, r3
 800defc:	d003      	beq.n	800df06 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800defe:	4b9d      	ldr	r3, [pc, #628]	; (800e174 <rfalTransceiveTx+0x290>)
 800df00:	7e1a      	ldrb	r2, [r3, #24]
 800df02:	4b9c      	ldr	r3, [pc, #624]	; (800e174 <rfalTransceiveTx+0x290>)
 800df04:	765a      	strb	r2, [r3, #25]
    }
    
    switch( gRFAL.TxRx.state )
 800df06:	4b9b      	ldr	r3, [pc, #620]	; (800e174 <rfalTransceiveTx+0x290>)
 800df08:	7e1b      	ldrb	r3, [r3, #24]
 800df0a:	3b0b      	subs	r3, #11
 800df0c:	2b08      	cmp	r3, #8
 800df0e:	f200 8210 	bhi.w	800e332 <rfalTransceiveTx+0x44e>
 800df12:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <rfalTransceiveTx+0x34>)
 800df14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df18:	0800df3d 	.word	0x0800df3d
 800df1c:	0800df43 	.word	0x0800df43
 800df20:	0800df61 	.word	0x0800df61
 800df24:	0800df89 	.word	0x0800df89
 800df28:	0800e107 	.word	0x0800e107
 800df2c:	0800e143 	.word	0x0800e143
 800df30:	0800e283 	.word	0x0800e283
 800df34:	0800e2bd 	.word	0x0800e2bd
 800df38:	0800e309 	.word	0x0800e309
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800df3c:	4b8d      	ldr	r3, [pc, #564]	; (800e174 <rfalTransceiveTx+0x290>)
 800df3e:	220c      	movs	r2, #12
 800df40:	761a      	strb	r2, [r3, #24]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800df42:	f7ff fba5 	bl	800d690 <rfalIsGTExpired>
 800df46:	4603      	mov	r3, r0
 800df48:	f083 0301 	eor.w	r3, r3, #1
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f040 81f6 	bne.w	800e340 <rfalTransceiveTx+0x45c>
            {
                break;
            }
            
            rfalTimerDestroy( gRFAL.tmr.GT );
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800df54:	4b87      	ldr	r3, [pc, #540]	; (800e174 <rfalTransceiveTx+0x290>)
 800df56:	2200      	movs	r2, #0
 800df58:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800df5a:	4b86      	ldr	r3, [pc, #536]	; (800e174 <rfalTransceiveTx+0x290>)
 800df5c:	220d      	movs	r2, #13
 800df5e:	761a      	strb	r2, [r3, #24]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800df60:	4b84      	ldr	r3, [pc, #528]	; (800e174 <rfalTransceiveTx+0x290>)
 800df62:	785b      	ldrb	r3, [r3, #1]
 800df64:	2b09      	cmp	r3, #9
 800df66:	d00c      	beq.n	800df82 <rfalTransceiveTx+0x9e>
 800df68:	4b82      	ldr	r3, [pc, #520]	; (800e174 <rfalTransceiveTx+0x290>)
 800df6a:	785b      	ldrb	r3, [r3, #1]
 800df6c:	2b0d      	cmp	r3, #13
 800df6e:	d008      	beq.n	800df82 <rfalTransceiveTx+0x9e>
            {
                if( st25r3916IsGPTRunning() )
 800df70:	2204      	movs	r2, #4
 800df72:	2104      	movs	r1, #4
 800df74:	2024      	movs	r0, #36	; 0x24
 800df76:	f003 fdcd 	bl	8011b14 <st25r3916CheckReg>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f040 81e1 	bne.w	800e344 <rfalTransceiveTx+0x460>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800df82:	4b7c      	ldr	r3, [pc, #496]	; (800e174 <rfalTransceiveTx+0x290>)
 800df84:	220e      	movs	r2, #14
 800df86:	761a      	strb	r2, [r3, #24]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800df88:	f7ff fed4 	bl	800dd34 <rfalPrepareTransceive>

            /* ST25R3916 has a fixed FIFO water level */
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800df8c:	4b79      	ldr	r3, [pc, #484]	; (800e174 <rfalTransceiveTx+0x290>)
 800df8e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800df92:	871a      	strh	r2, [r3, #56]	; 0x38

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800df94:	4b77      	ldr	r3, [pc, #476]	; (800e174 <rfalTransceiveTx+0x290>)
 800df96:	785b      	ldrb	r3, [r3, #1]
 800df98:	2b07      	cmp	r3, #7
 800df9a:	d003      	beq.n	800dfa4 <rfalTransceiveTx+0xc0>
 800df9c:	4b75      	ldr	r3, [pc, #468]	; (800e174 <rfalTransceiveTx+0x290>)
 800df9e:	785b      	ldrb	r3, [r3, #1]
 800dfa0:	2b08      	cmp	r3, #8
 800dfa2:	d151      	bne.n	800e048 <rfalTransceiveTx+0x164>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3916WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
#endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800dfa4:	4b73      	ldr	r3, [pc, #460]	; (800e174 <rfalTransceiveTx+0x290>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8a3 23e0 	strh.w	r2, [r3, #992]	; 0x3e0
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800dfac:	4b71      	ldr	r3, [pc, #452]	; (800e174 <rfalTransceiveTx+0x290>)
 800dfae:	69d8      	ldr	r0, [r3, #28]
 800dfb0:	4b70      	ldr	r3, [pc, #448]	; (800e174 <rfalTransceiveTx+0x290>)
 800dfb2:	8c1b      	ldrh	r3, [r3, #32]
 800dfb4:	3307      	adds	r3, #7
 800dfb6:	08db      	lsrs	r3, r3, #3
 800dfb8:	b299      	uxth	r1, r3
 800dfba:	4b6e      	ldr	r3, [pc, #440]	; (800e174 <rfalTransceiveTx+0x290>)
 800dfbc:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800dfc0:	f003 0301 	and.w	r3, r3, #1
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	bf0c      	ite	eq
 800dfc8:	2301      	moveq	r3, #1
 800dfca:	2300      	movne	r3, #0
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	4b69      	ldr	r3, [pc, #420]	; (800e174 <rfalTransceiveTx+0x290>)
 800dfd0:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800dfd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	bf0c      	ite	eq
 800dfdc:	2301      	moveq	r3, #1
 800dfde:	2300      	movne	r3, #0
 800dfe0:	b2dc      	uxtb	r4, r3
 800dfe2:	4b64      	ldr	r3, [pc, #400]	; (800e174 <rfalTransceiveTx+0x290>)
 800dfe4:	785b      	ldrb	r3, [r3, #1]
 800dfe6:	2b08      	cmp	r3, #8
 800dfe8:	bf0c      	ite	eq
 800dfea:	2301      	moveq	r3, #1
 800dfec:	2300      	movne	r3, #0
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	4d61      	ldr	r5, [pc, #388]	; (800e178 <rfalTransceiveTx+0x294>)
 800dff2:	9505      	str	r5, [sp, #20]
 800dff4:	f44f 7500 	mov.w	r5, #512	; 0x200
 800dff8:	9504      	str	r5, [sp, #16]
 800dffa:	4d60      	ldr	r5, [pc, #384]	; (800e17c <rfalTransceiveTx+0x298>)
 800dffc:	9503      	str	r5, [sp, #12]
 800dffe:	4d60      	ldr	r5, [pc, #384]	; (800e180 <rfalTransceiveTx+0x29c>)
 800e000:	9502      	str	r5, [sp, #8]
 800e002:	4d60      	ldr	r5, [pc, #384]	; (800e184 <rfalTransceiveTx+0x2a0>)
 800e004:	9501      	str	r5, [sp, #4]
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	4623      	mov	r3, r4
 800e00a:	f7f5 fdb7 	bl	8003b7c <iso15693VCDCode>
 800e00e:	4603      	mov	r3, r0
 800e010:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3916_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800e012:	89fb      	ldrh	r3, [r7, #14]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d009      	beq.n	800e02c <rfalTransceiveTx+0x148>
 800e018:	89fb      	ldrh	r3, [r7, #14]
 800e01a:	2b0d      	cmp	r3, #13
 800e01c:	d006      	beq.n	800e02c <rfalTransceiveTx+0x148>
                {
                    gRFAL.TxRx.status = ret;
 800e01e:	4a55      	ldr	r2, [pc, #340]	; (800e174 <rfalTransceiveTx+0x290>)
 800e020:	89fb      	ldrh	r3, [r7, #14]
 800e022:	8353      	strh	r3, [r2, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e024:	4b53      	ldr	r3, [pc, #332]	; (800e174 <rfalTransceiveTx+0x290>)
 800e026:	2213      	movs	r2, #19
 800e028:	761a      	strb	r2, [r3, #24]
                    break;
 800e02a:	e192      	b.n	800e352 <rfalTransceiveTx+0x46e>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800e02c:	4b51      	ldr	r3, [pc, #324]	; (800e174 <rfalTransceiveTx+0x290>)
 800e02e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	b29b      	uxth	r3, r3
 800e034:	4618      	mov	r0, r3
 800e036:	f003 f8f3 	bl	8011220 <st25r3916SetNumTxBits>

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 800e03a:	4b4e      	ldr	r3, [pc, #312]	; (800e174 <rfalTransceiveTx+0x290>)
 800e03c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e03e:	4619      	mov	r1, r3
 800e040:	484e      	ldr	r0, [pc, #312]	; (800e17c <rfalTransceiveTx+0x298>)
 800e042:	f003 fb79 	bl	8011738 <st25r3916WriteFifo>
 800e046:	e01d      	b.n	800e084 <rfalTransceiveTx+0x1a0>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800e048:	4b4a      	ldr	r3, [pc, #296]	; (800e174 <rfalTransceiveTx+0x290>)
 800e04a:	8c1b      	ldrh	r3, [r3, #32]
 800e04c:	3307      	adds	r3, #7
 800e04e:	08db      	lsrs	r3, r3, #3
 800e050:	b29a      	uxth	r2, r3
 800e052:	4b48      	ldr	r3, [pc, #288]	; (800e174 <rfalTransceiveTx+0x290>)
 800e054:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800e056:	4b47      	ldr	r3, [pc, #284]	; (800e174 <rfalTransceiveTx+0x290>)
 800e058:	8c1b      	ldrh	r3, [r3, #32]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f003 f8e0 	bl	8011220 <st25r3916SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 800e060:	4b44      	ldr	r3, [pc, #272]	; (800e174 <rfalTransceiveTx+0x290>)
 800e062:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e068:	bf28      	it	cs
 800e06a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e06e:	b29a      	uxth	r2, r3
 800e070:	4b40      	ldr	r3, [pc, #256]	; (800e174 <rfalTransceiveTx+0x290>)
 800e072:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800e074:	4b3f      	ldr	r3, [pc, #252]	; (800e174 <rfalTransceiveTx+0x290>)
 800e076:	69db      	ldr	r3, [r3, #28]
 800e078:	4a3e      	ldr	r2, [pc, #248]	; (800e174 <rfalTransceiveTx+0x290>)
 800e07a:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800e07c:	4611      	mov	r1, r2
 800e07e:	4618      	mov	r0, r3
 800e080:	f003 fb5a 	bl	8011738 <st25r3916WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx();
 800e084:	4b3b      	ldr	r3, [pc, #236]	; (800e174 <rfalTransceiveTx+0x290>)
 800e086:	795b      	ldrb	r3, [r3, #5]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d008      	beq.n	800e09e <rfalTransceiveTx+0x1ba>
 800e08c:	4b39      	ldr	r3, [pc, #228]	; (800e174 <rfalTransceiveTx+0x290>)
 800e08e:	795b      	ldrb	r3, [r3, #5]
 800e090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e094:	b2db      	uxtb	r3, r3
 800e096:	4619      	mov	r1, r3
 800e098:	2001      	movs	r0, #1
 800e09a:	f003 fc2e 	bl	80118fa <st25r3916WriteTestRegister>
            
            
            /*******************************************************************************/
            /* If we're in Passive Listen mode ensure that the external field is still On  */
            if( rfalIsModePassiveListen(gRFAL.mode) )
 800e09e:	4b35      	ldr	r3, [pc, #212]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0a0:	785b      	ldrb	r3, [r3, #1]
 800e0a2:	2b0a      	cmp	r3, #10
 800e0a4:	d007      	beq.n	800e0b6 <rfalTransceiveTx+0x1d2>
 800e0a6:	4b33      	ldr	r3, [pc, #204]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0a8:	785b      	ldrb	r3, [r3, #1]
 800e0aa:	2b0b      	cmp	r3, #11
 800e0ac:	d003      	beq.n	800e0b6 <rfalTransceiveTx+0x1d2>
 800e0ae:	4b31      	ldr	r3, [pc, #196]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0b0:	785b      	ldrb	r3, [r3, #1]
 800e0b2:	2b0c      	cmp	r3, #12
 800e0b4:	d10e      	bne.n	800e0d4 <rfalTransceiveTx+0x1f0>
            {
                if( !rfalIsExtFieldOn() )
 800e0b6:	f001 f927 	bl	800f308 <rfalIsExtFieldOn>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	f083 0301 	eor.w	r3, r3, #1
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d006      	beq.n	800e0d4 <rfalTransceiveTx+0x1f0>
                {
                    gRFAL.TxRx.status = ERR_LINK_LOSS;
 800e0c6:	4b2b      	ldr	r3, [pc, #172]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0c8:	2225      	movs	r2, #37	; 0x25
 800e0ca:	835a      	strh	r2, [r3, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e0cc:	4b29      	ldr	r3, [pc, #164]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0ce:	2213      	movs	r2, #19
 800e0d0:	761a      	strb	r2, [r3, #24]
                    break;
 800e0d2:	e13e      	b.n	800e352 <rfalTransceiveTx+0x46e>
                }
            }
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800e0d4:	4b27      	ldr	r3, [pc, #156]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d8:	f003 0301 	and.w	r3, r3, #1
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d003      	beq.n	800e0e8 <rfalTransceiveTx+0x204>
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 800e0e0:	20c5      	movs	r0, #197	; 0xc5
 800e0e2:	f003 fbce 	bl	8011882 <st25r3916ExecuteCommand>
 800e0e6:	e002      	b.n	800e0ee <rfalTransceiveTx+0x20a>
            }
            else
            {
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 800e0e8:	20c4      	movs	r0, #196	; 0xc4
 800e0ea:	f003 fbca 	bl	8011882 <st25r3916ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800e0ee:	4b21      	ldr	r3, [pc, #132]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0f0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e0f2:	4b20      	ldr	r3, [pc, #128]	; (800e174 <rfalTransceiveTx+0x290>)
 800e0f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d201      	bcs.n	800e0fe <rfalTransceiveTx+0x21a>
 800e0fa:	220f      	movs	r2, #15
 800e0fc:	e000      	b.n	800e100 <rfalTransceiveTx+0x21c>
 800e0fe:	2211      	movs	r2, #17
 800e100:	4b1c      	ldr	r3, [pc, #112]	; (800e174 <rfalTransceiveTx+0x290>)
 800e102:	761a      	strb	r2, [r3, #24]
            break;
 800e104:	e125      	b.n	800e352 <rfalTransceiveTx+0x46e>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800e106:	2048      	movs	r0, #72	; 0x48
 800e108:	f003 fe94 	bl	8011e34 <st25r3916GetInterrupt>
 800e10c:	4603      	mov	r3, r0
 800e10e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2b00      	cmp	r3, #0
 800e114:	f000 8118 	beq.w	800e348 <rfalTransceiveTx+0x464>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d008      	beq.n	800e134 <rfalTransceiveTx+0x250>
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	f003 0308 	and.w	r3, r3, #8
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d103      	bne.n	800e134 <rfalTransceiveTx+0x250>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800e12c:	4b11      	ldr	r3, [pc, #68]	; (800e174 <rfalTransceiveTx+0x290>)
 800e12e:	2210      	movs	r2, #16
 800e130:	761a      	strb	r2, [r3, #24]
 800e132:	e006      	b.n	800e142 <rfalTransceiveTx+0x25e>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800e134:	4b0f      	ldr	r3, [pc, #60]	; (800e174 <rfalTransceiveTx+0x290>)
 800e136:	2203      	movs	r2, #3
 800e138:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e13a:	4b0e      	ldr	r3, [pc, #56]	; (800e174 <rfalTransceiveTx+0x290>)
 800e13c:	2213      	movs	r2, #19
 800e13e:	761a      	strb	r2, [r3, #24]
                break;
 800e140:	e107      	b.n	800e352 <rfalTransceiveTx+0x46e>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e142:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <rfalTransceiveTx+0x290>)
 800e144:	785b      	ldrb	r3, [r3, #1]
 800e146:	2b07      	cmp	r3, #7
 800e148:	d003      	beq.n	800e152 <rfalTransceiveTx+0x26e>
 800e14a:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <rfalTransceiveTx+0x290>)
 800e14c:	785b      	ldrb	r3, [r3, #1]
 800e14e:	2b08      	cmp	r3, #8
 800e150:	d16c      	bne.n	800e22c <rfalTransceiveTx+0x348>
            {
                uint16_t maxLen;
                                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800e152:	4b08      	ldr	r3, [pc, #32]	; (800e174 <rfalTransceiveTx+0x290>)
 800e154:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e156:	461a      	mov	r2, r3
 800e158:	4b06      	ldr	r3, [pc, #24]	; (800e174 <rfalTransceiveTx+0x290>)
 800e15a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	4a05      	ldr	r2, [pc, #20]	; (800e174 <rfalTransceiveTx+0x290>)
 800e160:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800e162:	4293      	cmp	r3, r2
 800e164:	da10      	bge.n	800e188 <rfalTransceiveTx+0x2a4>
 800e166:	4b03      	ldr	r3, [pc, #12]	; (800e174 <rfalTransceiveTx+0x290>)
 800e168:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e16a:	4b02      	ldr	r3, [pc, #8]	; (800e174 <rfalTransceiveTx+0x290>)
 800e16c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e16e:	1ad3      	subs	r3, r2, r3
 800e170:	b29b      	uxth	r3, r3
 800e172:	e00b      	b.n	800e18c <rfalTransceiveTx+0x2a8>
 800e174:	2000155c 	.word	0x2000155c
 800e178:	20001598 	.word	0x20001598
 800e17c:	20001734 	.word	0x20001734
 800e180:	2000193c 	.word	0x2000193c
 800e184:	20001596 	.word	0x20001596
 800e188:	4b74      	ldr	r3, [pc, #464]	; (800e35c <rfalTransceiveTx+0x478>)
 800e18a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e18c:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800e18e:	89bb      	ldrh	r3, [r7, #12]
 800e190:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800e194:	bf28      	it	cs
 800e196:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800e19a:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800e1a0:	4b6e      	ldr	r3, [pc, #440]	; (800e35c <rfalTransceiveTx+0x478>)
 800e1a2:	69d8      	ldr	r0, [r3, #28]
 800e1a4:	4b6d      	ldr	r3, [pc, #436]	; (800e35c <rfalTransceiveTx+0x478>)
 800e1a6:	8c1b      	ldrh	r3, [r3, #32]
 800e1a8:	3307      	adds	r3, #7
 800e1aa:	08db      	lsrs	r3, r3, #3
 800e1ac:	b299      	uxth	r1, r3
 800e1ae:	4b6b      	ldr	r3, [pc, #428]	; (800e35c <rfalTransceiveTx+0x478>)
 800e1b0:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800e1b4:	f003 0301 	and.w	r3, r3, #1
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	bf0c      	ite	eq
 800e1bc:	2301      	moveq	r3, #1
 800e1be:	2300      	movne	r3, #0
 800e1c0:	b2dc      	uxtb	r4, r3
 800e1c2:	4b66      	ldr	r3, [pc, #408]	; (800e35c <rfalTransceiveTx+0x478>)
 800e1c4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800e1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	bf0c      	ite	eq
 800e1d0:	2301      	moveq	r3, #1
 800e1d2:	2300      	movne	r3, #0
 800e1d4:	b2dd      	uxtb	r5, r3
 800e1d6:	4b61      	ldr	r3, [pc, #388]	; (800e35c <rfalTransceiveTx+0x478>)
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	2b08      	cmp	r3, #8
 800e1dc:	bf0c      	ite	eq
 800e1de:	2301      	moveq	r3, #1
 800e1e0:	2300      	movne	r3, #0
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	1dba      	adds	r2, r7, #6
 800e1e6:	9205      	str	r2, [sp, #20]
 800e1e8:	89ba      	ldrh	r2, [r7, #12]
 800e1ea:	9204      	str	r2, [sp, #16]
 800e1ec:	4a5c      	ldr	r2, [pc, #368]	; (800e360 <rfalTransceiveTx+0x47c>)
 800e1ee:	9203      	str	r2, [sp, #12]
 800e1f0:	4a5c      	ldr	r2, [pc, #368]	; (800e364 <rfalTransceiveTx+0x480>)
 800e1f2:	9202      	str	r2, [sp, #8]
 800e1f4:	4a5c      	ldr	r2, [pc, #368]	; (800e368 <rfalTransceiveTx+0x484>)
 800e1f6:	9201      	str	r2, [sp, #4]
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	462b      	mov	r3, r5
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	f7f5 fcbd 	bl	8003b7c <iso15693VCDCode>
 800e202:	4603      	mov	r3, r0
 800e204:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800e206:	89fb      	ldrh	r3, [r7, #14]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d009      	beq.n	800e220 <rfalTransceiveTx+0x33c>
 800e20c:	89fb      	ldrh	r3, [r7, #14]
 800e20e:	2b0d      	cmp	r3, #13
 800e210:	d006      	beq.n	800e220 <rfalTransceiveTx+0x33c>
                {
                    gRFAL.TxRx.status = ret;
 800e212:	4a52      	ldr	r2, [pc, #328]	; (800e35c <rfalTransceiveTx+0x478>)
 800e214:	89fb      	ldrh	r3, [r7, #14]
 800e216:	8353      	strh	r3, [r2, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e218:	4b50      	ldr	r3, [pc, #320]	; (800e35c <rfalTransceiveTx+0x478>)
 800e21a:	2213      	movs	r2, #19
 800e21c:	761a      	strb	r2, [r3, #24]
                    break;
 800e21e:	e098      	b.n	800e352 <rfalTransceiveTx+0x46e>
                }

                /* Load FIFO with coded bytes */
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 800e220:	88fb      	ldrh	r3, [r7, #6]
 800e222:	4619      	mov	r1, r3
 800e224:	484e      	ldr	r0, [pc, #312]	; (800e360 <rfalTransceiveTx+0x47c>)
 800e226:	f003 fa87 	bl	8011738 <st25r3916WriteFifo>
            {
 800e22a:	e017      	b.n	800e25c <rfalTransceiveTx+0x378>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800e22c:	4b4b      	ldr	r3, [pc, #300]	; (800e35c <rfalTransceiveTx+0x478>)
 800e22e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e230:	461a      	mov	r2, r3
 800e232:	4b4a      	ldr	r3, [pc, #296]	; (800e35c <rfalTransceiveTx+0x478>)
 800e234:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e236:	4619      	mov	r1, r3
 800e238:	4b48      	ldr	r3, [pc, #288]	; (800e35c <rfalTransceiveTx+0x478>)
 800e23a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e23c:	1acb      	subs	r3, r1, r3
 800e23e:	4293      	cmp	r3, r2
 800e240:	bfa8      	it	ge
 800e242:	4613      	movge	r3, r2
 800e244:	b29b      	uxth	r3, r3
 800e246:	80fb      	strh	r3, [r7, #6]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 800e248:	4b44      	ldr	r3, [pc, #272]	; (800e35c <rfalTransceiveTx+0x478>)
 800e24a:	69db      	ldr	r3, [r3, #28]
 800e24c:	4a43      	ldr	r2, [pc, #268]	; (800e35c <rfalTransceiveTx+0x478>)
 800e24e:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800e250:	4413      	add	r3, r2
 800e252:	88fa      	ldrh	r2, [r7, #6]
 800e254:	4611      	mov	r1, r2
 800e256:	4618      	mov	r0, r3
 800e258:	f003 fa6e 	bl	8011738 <st25r3916WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800e25c:	4b3f      	ldr	r3, [pc, #252]	; (800e35c <rfalTransceiveTx+0x478>)
 800e25e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e260:	88fb      	ldrh	r3, [r7, #6]
 800e262:	4413      	add	r3, r2
 800e264:	b29a      	uxth	r2, r3
 800e266:	4b3d      	ldr	r3, [pc, #244]	; (800e35c <rfalTransceiveTx+0x478>)
 800e268:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800e26a:	4b3c      	ldr	r3, [pc, #240]	; (800e35c <rfalTransceiveTx+0x478>)
 800e26c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e26e:	4b3b      	ldr	r3, [pc, #236]	; (800e35c <rfalTransceiveTx+0x478>)
 800e270:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e272:	429a      	cmp	r2, r3
 800e274:	d201      	bcs.n	800e27a <rfalTransceiveTx+0x396>
 800e276:	220f      	movs	r2, #15
 800e278:	e000      	b.n	800e27c <rfalTransceiveTx+0x398>
 800e27a:	2211      	movs	r2, #17
 800e27c:	4b37      	ldr	r3, [pc, #220]	; (800e35c <rfalTransceiveTx+0x478>)
 800e27e:	761a      	strb	r2, [r3, #24]
            break;
 800e280:	e067      	b.n	800e352 <rfalTransceiveTx+0x46e>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800e282:	2048      	movs	r0, #72	; 0x48
 800e284:	f003 fdd6 	bl	8011e34 <st25r3916GetInterrupt>
 800e288:	4603      	mov	r3, r0
 800e28a:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d05c      	beq.n	800e34c <rfalTransceiveTx+0x468>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	f003 0308 	and.w	r3, r3, #8
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <rfalTransceiveTx+0x3c0>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800e29c:	4b2f      	ldr	r3, [pc, #188]	; (800e35c <rfalTransceiveTx+0x478>)
 800e29e:	2212      	movs	r2, #18
 800e2a0:	761a      	strb	r2, [r3, #24]
 800e2a2:	e00b      	b.n	800e2bc <rfalTransceiveTx+0x3d8>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d150      	bne.n	800e350 <rfalTransceiveTx+0x46c>
            {
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800e2ae:	4b2b      	ldr	r3, [pc, #172]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2b0:	2203      	movs	r2, #3
 800e2b2:	835a      	strh	r2, [r3, #26]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e2b4:	4b29      	ldr	r3, [pc, #164]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2b6:	2213      	movs	r2, #19
 800e2b8:	761a      	strb	r2, [r3, #24]
               break;
 800e2ba:	e04a      	b.n	800e352 <rfalTransceiveTx+0x46e>
                           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800e2bc:	4b27      	ldr	r3, [pc, #156]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d110      	bne.n	800e2e6 <rfalTransceiveTx+0x402>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800e2c4:	4b25      	ldr	r3, [pc, #148]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2c6:	799b      	ldrb	r3, [r3, #6]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d003      	beq.n	800e2d4 <rfalTransceiveTx+0x3f0>
 800e2cc:	2140      	movs	r1, #64	; 0x40
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	f003 fb13 	bl	80118fa <st25r3916WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800e2d4:	f7ff fd12 	bl	800dcfc <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800e2d8:	4b20      	ldr	r3, [pc, #128]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800e2de:	4b1f      	ldr	r3, [pc, #124]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	761a      	strb	r2, [r3, #24]
                break;
 800e2e4:	e035      	b.n	800e352 <rfalTransceiveTx+0x46e>
            }
            
            rfalCheckEnableObsModeRx();
 800e2e6:	4b1d      	ldr	r3, [pc, #116]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2e8:	799b      	ldrb	r3, [r3, #6]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d008      	beq.n	800e300 <rfalTransceiveTx+0x41c>
 800e2ee:	4b1b      	ldr	r3, [pc, #108]	; (800e35c <rfalTransceiveTx+0x478>)
 800e2f0:	799b      	ldrb	r3, [r3, #6]
 800e2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	2001      	movs	r0, #1
 800e2fc:	f003 fafd 	bl	80118fa <st25r3916WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800e300:	4b16      	ldr	r3, [pc, #88]	; (800e35c <rfalTransceiveTx+0x478>)
 800e302:	2251      	movs	r2, #81	; 0x51
 800e304:	761a      	strb	r2, [r3, #24]
            break;
 800e306:	e024      	b.n	800e352 <rfalTransceiveTx+0x46e>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800e308:	4b14      	ldr	r3, [pc, #80]	; (800e35c <rfalTransceiveTx+0x478>)
 800e30a:	8b5b      	ldrh	r3, [r3, #26]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d102      	bne.n	800e316 <rfalTransceiveTx+0x432>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800e310:	4b12      	ldr	r3, [pc, #72]	; (800e35c <rfalTransceiveTx+0x478>)
 800e312:	2208      	movs	r2, #8
 800e314:	835a      	strh	r2, [r3, #26]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800e316:	4b11      	ldr	r3, [pc, #68]	; (800e35c <rfalTransceiveTx+0x478>)
 800e318:	799b      	ldrb	r3, [r3, #6]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d003      	beq.n	800e326 <rfalTransceiveTx+0x442>
 800e31e:	2140      	movs	r1, #64	; 0x40
 800e320:	2001      	movs	r0, #1
 800e322:	f003 faea 	bl	80118fa <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800e326:	f7ff fce9 	bl	800dcfc <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800e32a:	4b0c      	ldr	r3, [pc, #48]	; (800e35c <rfalTransceiveTx+0x478>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	761a      	strb	r2, [r3, #24]
            break;
 800e330:	e00f      	b.n	800e352 <rfalTransceiveTx+0x46e>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800e332:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <rfalTransceiveTx+0x478>)
 800e334:	2208      	movs	r2, #8
 800e336:	835a      	strh	r2, [r3, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e338:	4b08      	ldr	r3, [pc, #32]	; (800e35c <rfalTransceiveTx+0x478>)
 800e33a:	2213      	movs	r2, #19
 800e33c:	761a      	strb	r2, [r3, #24]
            break;
 800e33e:	e008      	b.n	800e352 <rfalTransceiveTx+0x46e>
                break;
 800e340:	bf00      	nop
 800e342:	e006      	b.n	800e352 <rfalTransceiveTx+0x46e>
                   break;
 800e344:	bf00      	nop
 800e346:	e004      	b.n	800e352 <rfalTransceiveTx+0x46e>
               break;  /* No interrupt to process */
 800e348:	bf00      	nop
 800e34a:	e002      	b.n	800e352 <rfalTransceiveTx+0x46e>
               break;  /* No interrupt to process */
 800e34c:	bf00      	nop
 800e34e:	e000      	b.n	800e352 <rfalTransceiveTx+0x46e>
                break;  /* Ignore ST25R3916 FIFO WL if total TxLen is already on the FIFO */
 800e350:	bf00      	nop
    }
}
 800e352:	bf00      	nop
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bdb0      	pop	{r4, r5, r7, pc}
 800e35a:	bf00      	nop
 800e35c:	2000155c 	.word	0x2000155c
 800e360:	20001734 	.word	0x20001734
 800e364:	2000193c 	.word	0x2000193c
 800e368:	20001596 	.word	0x20001596

0800e36c <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800e36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e36e:	b089      	sub	sp, #36	; 0x24
 800e370:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint16_t          tmp;
    uint16_t          aux;
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 800e372:	2300      	movs	r3, #0
 800e374:	607b      	str	r3, [r7, #4]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800e376:	4baf      	ldr	r3, [pc, #700]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e378:	7e1a      	ldrb	r2, [r3, #24]
 800e37a:	4bae      	ldr	r3, [pc, #696]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e37c:	7e5b      	ldrb	r3, [r3, #25]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d003      	beq.n	800e38a <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800e382:	4bac      	ldr	r3, [pc, #688]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e384:	7e1a      	ldrb	r2, [r3, #24]
 800e386:	4bab      	ldr	r3, [pc, #684]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e388:	765a      	strb	r2, [r3, #25]
    }
    
    switch( gRFAL.TxRx.state )
 800e38a:	4baa      	ldr	r3, [pc, #680]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e38c:	7e1b      	ldrb	r3, [r3, #24]
 800e38e:	3b51      	subs	r3, #81	; 0x51
 800e390:	2b09      	cmp	r3, #9
 800e392:	f200 8339 	bhi.w	800ea08 <rfalTransceiveRx+0x69c>
 800e396:	a201      	add	r2, pc, #4	; (adr r2, 800e39c <rfalTransceiveRx+0x30>)
 800e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39c:	0800e3c5 	.word	0x0800e3c5
 800e3a0:	0800e975 	.word	0x0800e975
 800e3a4:	0800e3fd 	.word	0x0800e3fd
 800e3a8:	0800e4a1 	.word	0x0800e4a1
 800e3ac:	0800e8b9 	.word	0x0800e8b9
 800e3b0:	0800e57f 	.word	0x0800e57f
 800e3b4:	0800e6b3 	.word	0x0800e6b3
 800e3b8:	0800e9bf 	.word	0x0800e9bf
 800e3bc:	0800e891 	.word	0x0800e891
 800e3c0:	0800e94b 	.word	0x0800e94b
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 800e3c4:	4b9b      	ldr	r3, [pc, #620]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 800e3ca:	4b9a      	ldr	r3, [pc, #616]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800e3d0:	4b98      	ldr	r3, [pc, #608]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d003      	beq.n	800e3e0 <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800e3d8:	4b96      	ldr	r3, [pc, #600]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3dc:	2200      	movs	r2, #0
 800e3de:	801a      	strh	r2, [r3, #0]
            }
           
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800e3e0:	4b94      	ldr	r3, [pc, #592]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e3e2:	785b      	ldrb	r3, [r3, #1]
 800e3e4:	2b09      	cmp	r3, #9
 800e3e6:	d003      	beq.n	800e3f0 <rfalTransceiveRx+0x84>
 800e3e8:	4b92      	ldr	r3, [pc, #584]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e3ea:	785b      	ldrb	r3, [r3, #1]
 800e3ec:	2b0d      	cmp	r3, #13
 800e3ee:	d101      	bne.n	800e3f4 <rfalTransceiveRx+0x88>
 800e3f0:	2252      	movs	r2, #82	; 0x52
 800e3f2:	e000      	b.n	800e3f6 <rfalTransceiveRx+0x8a>
 800e3f4:	2253      	movs	r2, #83	; 0x53
 800e3f6:	4b8f      	ldr	r3, [pc, #572]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e3f8:	761a      	strb	r2, [r3, #24]
            break;
 800e3fa:	e315      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
            
            /*******************************************************************************/
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 800e3fc:	f644 0020 	movw	r0, #18464	; 0x4820
 800e400:	f003 fd18 	bl	8011e34 <st25r3916GetInterrupt>
 800e404:	4603      	mov	r3, r0
 800e406:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f000 8303 	beq.w	800ea16 <rfalTransceiveRx+0x6aa>
            {
                break;  /* No interrupt to process */
            }
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode) */
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00b      	beq.n	800e432 <rfalTransceiveRx+0xc6>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f003 0320 	and.w	r3, r3, #32
 800e420:	2b00      	cmp	r3, #0
 800e422:	d106      	bne.n	800e432 <rfalTransceiveRx+0xc6>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800e424:	4b83      	ldr	r3, [pc, #524]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e426:	2204      	movs	r2, #4
 800e428:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e42a:	4b82      	ldr	r3, [pc, #520]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e42c:	225a      	movs	r2, #90	; 0x5a
 800e42e:	761a      	strb	r2, [r3, #24]
                break;
 800e430:	e2fa      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d015      	beq.n	800e468 <rfalTransceiveRx+0xfc>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f003 0320 	and.w	r3, r3, #32
 800e442:	2b00      	cmp	r3, #0
 800e444:	d110      	bne.n	800e468 <rfalTransceiveRx+0xfc>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800e446:	4b7b      	ldr	r3, [pc, #492]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e448:	785b      	ldrb	r3, [r3, #1]
 800e44a:	2b09      	cmp	r3, #9
 800e44c:	d003      	beq.n	800e456 <rfalTransceiveRx+0xea>
 800e44e:	4b79      	ldr	r3, [pc, #484]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e450:	785b      	ldrb	r3, [r3, #1]
 800e452:	2b0d      	cmp	r3, #13
 800e454:	d101      	bne.n	800e45a <rfalTransceiveRx+0xee>
 800e456:	2204      	movs	r2, #4
 800e458:	e000      	b.n	800e45c <rfalTransceiveRx+0xf0>
 800e45a:	2225      	movs	r2, #37	; 0x25
 800e45c:	4b75      	ldr	r3, [pc, #468]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e45e:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e460:	4b74      	ldr	r3, [pc, #464]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e462:	225a      	movs	r2, #90	; 0x5a
 800e464:	761a      	strb	r2, [r3, #24]
                break;
 800e466:	e2df      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f003 0320 	and.w	r3, r3, #32
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00f      	beq.n	800e492 <rfalTransceiveRx+0x126>
            {
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                /* Use a SW timer to handle an eventual missing RXE                            */
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800e472:	2032      	movs	r0, #50	; 0x32
 800e474:	f003 fdf6 	bl	8012064 <timerCalculateTimer>
 800e478:	4603      	mov	r3, r0
 800e47a:	4a6e      	ldr	r2, [pc, #440]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e47c:	6453      	str	r3, [r2, #68]	; 0x44
                /*******************************************************************************/
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800e47e:	4b6d      	ldr	r3, [pc, #436]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e480:	2254      	movs	r2, #84	; 0x54
 800e482:	761a      	strb	r2, [r3, #24]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
                break;
            }
            
            /* remove NRE that might appear together (NRT EMV mode), and remove RXS, but keep EOF if present for next state */
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e48a:	f023 0320 	bic.w	r3, r3, #32
 800e48e:	607b      	str	r3, [r7, #4]
 800e490:	e006      	b.n	800e4a0 <rfalTransceiveRx+0x134>
                gRFAL.TxRx.status = ERR_IO;
 800e492:	4b68      	ldr	r3, [pc, #416]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e494:	2203      	movs	r2, #3
 800e496:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e498:	4b66      	ldr	r3, [pc, #408]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e49a:	225a      	movs	r2, #90	; 0x5a
 800e49c:	761a      	strb	r2, [r3, #24]
                break;
 800e49e:	e2c3      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* ST25R396 may indicate RXS without RXE afterwards, this happens rarely on    */
            /* corrupted frames.                                                           */
            /* SW timer is used to timeout upon a missing RXE                              */
            if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800e4a0:	4b64      	ldr	r3, [pc, #400]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f003 fdeb 	bl	8012080 <timerIsExpired>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d005      	beq.n	800e4bc <rfalTransceiveRx+0x150>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800e4b0:	4b60      	ldr	r3, [pc, #384]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e4b2:	2209      	movs	r2, #9
 800e4b4:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e4b6:	4b5f      	ldr	r3, [pc, #380]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e4b8:	225a      	movs	r2, #90	; 0x5a
 800e4ba:	761a      	strb	r2, [r3, #24]
            }
            /*******************************************************************************/
            
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800e4bc:	485e      	ldr	r0, [pc, #376]	; (800e638 <rfalTransceiveRx+0x2cc>)
 800e4be:	f003 fcb9 	bl	8011e34 <st25r3916GetInterrupt>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f000 82a4 	beq.w	800ea1a <rfalTransceiveRx+0x6ae>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f003 0302 	and.w	r3, r3, #2
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d02f      	beq.n	800e53c <rfalTransceiveRx+0x1d0>
            {
                /* RX_REST indicates that Receiver has been reseted due to EMD, therefore a RXS + RXE should *
                 * follow if a good reception is followed within the valid initial timeout                   */
                
                /* Check whether NRT has expired already, if so signal a timeout */
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800e4dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e4e0:	f003 fca8 	bl	8011e34 <st25r3916GetInterrupt>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d006      	beq.n	800e4f8 <rfalTransceiveRx+0x18c>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800e4ea:	4b52      	ldr	r3, [pc, #328]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e4ec:	2204      	movs	r2, #4
 800e4ee:	835a      	strh	r2, [r3, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e4f0:	4b50      	ldr	r3, [pc, #320]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e4f2:	225a      	movs	r2, #90	; 0x5a
 800e4f4:	761a      	strb	r2, [r3, #24]
                    break;
 800e4f6:	e297      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
                }
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	2102      	movs	r1, #2
 800e4fc:	2024      	movs	r0, #36	; 0x24
 800e4fe:	f003 fb09 	bl	8011b14 <st25r3916CheckReg>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d006      	beq.n	800e516 <rfalTransceiveRx+0x1aa>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800e508:	4b4a      	ldr	r3, [pc, #296]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e50a:	2204      	movs	r2, #4
 800e50c:	835a      	strh	r2, [r3, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e50e:	4b49      	ldr	r3, [pc, #292]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e510:	225a      	movs	r2, #90	; 0x5a
 800e512:	761a      	strb	r2, [r3, #24]
                    break;
 800e514:	e288      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
                }
                
                /* Discard any previous RXS */
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 800e516:	2020      	movs	r0, #32
 800e518:	f003 fc8c 	bl	8011e34 <st25r3916GetInterrupt>
                
                /* Check whether a following reception has already started */
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 800e51c:	2204      	movs	r2, #4
 800e51e:	2104      	movs	r1, #4
 800e520:	2031      	movs	r0, #49	; 0x31
 800e522:	f003 faf7 	bl	8011b14 <st25r3916CheckReg>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d003      	beq.n	800e534 <rfalTransceiveRx+0x1c8>
                {
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800e52c:	4b41      	ldr	r3, [pc, #260]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e52e:	2254      	movs	r2, #84	; 0x54
 800e530:	761a      	strb	r2, [r3, #24]
                    break;
 800e532:	e279      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
                }
                
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800e534:	4b3f      	ldr	r3, [pc, #252]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e536:	2253      	movs	r2, #83	; 0x53
 800e538:	761a      	strb	r2, [r3, #24]
                break;
 800e53a:	e275      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e542:	2b00      	cmp	r3, #0
 800e544:	d008      	beq.n	800e558 <rfalTransceiveRx+0x1ec>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f003 0310 	and.w	r3, r3, #16
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d103      	bne.n	800e558 <rfalTransceiveRx+0x1ec>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800e550:	4b38      	ldr	r3, [pc, #224]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e552:	2255      	movs	r2, #85	; 0x55
 800e554:	761a      	strb	r2, [r3, #24]
                break;
 800e556:	e267      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            
            /* Automatic responses allowed during TxRx only for the SENSF_REQ */
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d003      	beq.n	800e56a <rfalTransceiveRx+0x1fe>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800e562:	4b34      	ldr	r3, [pc, #208]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e564:	2253      	movs	r2, #83	; 0x53
 800e566:	761a      	strb	r2, [r3, #24]
                break;
 800e568:	e25e      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            
            /* After RXE retrieve and check for any error irqs */
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 800e56a:	4834      	ldr	r0, [pc, #208]	; (800e63c <rfalTransceiveRx+0x2d0>)
 800e56c:	f003 fc62 	bl	8011e34 <st25r3916GetInterrupt>
 800e570:	4602      	mov	r2, r0
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4313      	orrs	r3, r2
 800e576:	607b      	str	r3, [r7, #4]
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800e578:	4b2e      	ldr	r3, [pc, #184]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e57a:	2256      	movs	r2, #86	; 0x56
 800e57c:	761a      	strb	r2, [r3, #24]
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d008      	beq.n	800e59a <rfalTransceiveRx+0x22e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800e588:	4b2a      	ldr	r3, [pc, #168]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e58a:	2209      	movs	r2, #9
 800e58c:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e58e:	4b29      	ldr	r3, [pc, #164]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e590:	2257      	movs	r2, #87	; 0x57
 800e592:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e594:	f7ff fb7a 	bl	800dc8c <rfalErrorHandling>
                break;
 800e598:	e246      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            /* Discard Soft Framing errors in AP2P and CE */
            else if( rfalIsModePassivePoll( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) )
 800e59a:	4b26      	ldr	r3, [pc, #152]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e59c:	785b      	ldrb	r3, [r3, #1]
 800e59e:	2b09      	cmp	r3, #9
 800e5a0:	d01d      	beq.n	800e5de <rfalTransceiveRx+0x272>
 800e5a2:	4b24      	ldr	r3, [pc, #144]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5a4:	785b      	ldrb	r3, [r3, #1]
 800e5a6:	2b0d      	cmp	r3, #13
 800e5a8:	d019      	beq.n	800e5de <rfalTransceiveRx+0x272>
 800e5aa:	4b22      	ldr	r3, [pc, #136]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5ac:	785b      	ldrb	r3, [r3, #1]
 800e5ae:	2b0a      	cmp	r3, #10
 800e5b0:	d015      	beq.n	800e5de <rfalTransceiveRx+0x272>
 800e5b2:	4b20      	ldr	r3, [pc, #128]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	2b0b      	cmp	r3, #11
 800e5b8:	d011      	beq.n	800e5de <rfalTransceiveRx+0x272>
 800e5ba:	4b1e      	ldr	r3, [pc, #120]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5bc:	785b      	ldrb	r3, [r3, #1]
 800e5be:	2b0c      	cmp	r3, #12
 800e5c0:	d00d      	beq.n	800e5de <rfalTransceiveRx+0x272>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d008      	beq.n	800e5de <rfalTransceiveRx+0x272>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800e5cc:	4b19      	ldr	r3, [pc, #100]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5ce:	2209      	movs	r2, #9
 800e5d0:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e5d2:	4b18      	ldr	r3, [pc, #96]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5d4:	2257      	movs	r2, #87	; 0x57
 800e5d6:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e5d8:	f7ff fb58 	bl	800dc8c <rfalErrorHandling>
                break;
 800e5dc:	e224      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d008      	beq.n	800e5fa <rfalTransceiveRx+0x28e>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800e5e8:	4b12      	ldr	r3, [pc, #72]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5ea:	221b      	movs	r2, #27
 800e5ec:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e5ee:	4b11      	ldr	r3, [pc, #68]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e5f0:	2257      	movs	r2, #87	; 0x57
 800e5f2:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e5f4:	f7ff fb4a 	bl	800dc8c <rfalErrorHandling>
                break;
 800e5f8:	e216      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d008      	beq.n	800e616 <rfalTransceiveRx+0x2aa>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800e604:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e606:	2215      	movs	r2, #21
 800e608:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e60a:	4b0a      	ldr	r3, [pc, #40]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e60c:	2257      	movs	r2, #87	; 0x57
 800e60e:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e610:	f7ff fb3c 	bl	800dc8c <rfalErrorHandling>
                break;
 800e614:	e208      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f003 0304 	and.w	r3, r3, #4
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00f      	beq.n	800e640 <rfalTransceiveRx+0x2d4>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800e620:	4b04      	ldr	r3, [pc, #16]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e622:	221d      	movs	r2, #29
 800e624:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800e626:	4b03      	ldr	r3, [pc, #12]	; (800e634 <rfalTransceiveRx+0x2c8>)
 800e628:	2257      	movs	r2, #87	; 0x57
 800e62a:	761a      	strb	r2, [r3, #24]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800e62c:	f7ff fb2e 	bl	800dc8c <rfalErrorHandling>
                break;
 800e630:	e1fa      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
 800e632:	bf00      	nop
 800e634:	2000155c 	.word	0x2000155c
 800e638:	08000852 	.word	0x08000852
 800e63c:	00f00004 	.word	0x00f00004
            }
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 800e640:	4b9c      	ldr	r3, [pc, #624]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e642:	785b      	ldrb	r3, [r3, #1]
 800e644:	2b0a      	cmp	r3, #10
 800e646:	d007      	beq.n	800e658 <rfalTransceiveRx+0x2ec>
 800e648:	4b9a      	ldr	r3, [pc, #616]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e64a:	785b      	ldrb	r3, [r3, #1]
 800e64c:	2b0b      	cmp	r3, #11
 800e64e:	d003      	beq.n	800e658 <rfalTransceiveRx+0x2ec>
 800e650:	4b98      	ldr	r3, [pc, #608]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e652:	785b      	ldrb	r3, [r3, #1]
 800e654:	2b0c      	cmp	r3, #12
 800e656:	d10b      	bne.n	800e670 <rfalTransceiveRx+0x304>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d006      	beq.n	800e670 <rfalTransceiveRx+0x304>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800e662:	4b94      	ldr	r3, [pc, #592]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e664:	2225      	movs	r2, #37	; 0x25
 800e666:	835a      	strh	r2, [r3, #26]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e668:	4b92      	ldr	r3, [pc, #584]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e66a:	225a      	movs	r2, #90	; 0x5a
 800e66c:	761a      	strb	r2, [r3, #24]
                 break;
 800e66e:	e1db      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f003 0310 	and.w	r3, r3, #16
 800e676:	2b00      	cmp	r3, #0
 800e678:	d014      	beq.n	800e6a4 <rfalTransceiveRx+0x338>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800e67a:	f000 fa17 	bl	800eaac <rfalFIFOStatusIsIncompleteByte>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d003      	beq.n	800e68c <rfalTransceiveRx+0x320>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800e684:	4b8b      	ldr	r3, [pc, #556]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e686:	2228      	movs	r2, #40	; 0x28
 800e688:	835a      	strh	r2, [r3, #26]
 800e68a:	e007      	b.n	800e69c <rfalTransceiveRx+0x330>
                }
                /* Check if the reception ends missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800e68c:	f000 fa20 	bl	800ead0 <rfalFIFOStatusIsMissingPar>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <rfalTransceiveRx+0x330>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800e696:	4b87      	ldr	r3, [pc, #540]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e698:	2209      	movs	r2, #9
 800e69a:	835a      	strh	r2, [r3, #26]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800e69c:	4b85      	ldr	r3, [pc, #532]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e69e:	2257      	movs	r2, #87	; 0x57
 800e6a0:	761a      	strb	r2, [r3, #24]
 800e6a2:	e006      	b.n	800e6b2 <rfalTransceiveRx+0x346>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800e6a4:	4b83      	ldr	r3, [pc, #524]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6a6:	2203      	movs	r2, #3
 800e6a8:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e6aa:	4b82      	ldr	r3, [pc, #520]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6ac:	225a      	movs	r2, #90	; 0x5a
 800e6ae:	761a      	strb	r2, [r3, #24]
                break;
 800e6b0:	e1ba      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                      
            tmp = rfalFIFOStatusGetNumBytes();
 800e6b2:	f000 f9df 	bl	800ea74 <rfalFIFOStatusGetNumBytes>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	81fb      	strh	r3, [r7, #14]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800e6ba:	4b7e      	ldr	r3, [pc, #504]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6be:	f003 0302 	and.w	r3, r3, #2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d117      	bne.n	800e6f6 <rfalTransceiveRx+0x38a>
            {
                /* if received frame was bigger than CRC */
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 800e6c6:	4b7b      	ldr	r3, [pc, #492]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6c8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e6ca:	89fb      	ldrh	r3, [r7, #14]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d010      	beq.n	800e6f6 <rfalTransceiveRx+0x38a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > RFAL_CRC_LEN) )  
 800e6d4:	89fb      	ldrh	r3, [r7, #14]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d903      	bls.n	800e6e2 <rfalTransceiveRx+0x376>
                    {
                        tmp -= RFAL_CRC_LEN;
 800e6da:	89fb      	ldrh	r3, [r7, #14]
 800e6dc:	3b02      	subs	r3, #2
 800e6de:	81fb      	strh	r3, [r7, #14]
 800e6e0:	e009      	b.n	800e6f6 <rfalTransceiveRx+0x38a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 800e6e2:	4b74      	ldr	r3, [pc, #464]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6e4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e6e6:	2b02      	cmp	r3, #2
 800e6e8:	d905      	bls.n	800e6f6 <rfalTransceiveRx+0x38a>
                    {                        
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 800e6ea:	4b72      	ldr	r3, [pc, #456]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e6ee:	3b02      	subs	r3, #2
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	4b70      	ldr	r3, [pc, #448]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6f4:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800e6f6:	4b6f      	ldr	r3, [pc, #444]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e6f8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e6fa:	89fb      	ldrh	r3, [r7, #14]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	4b6c      	ldr	r3, [pc, #432]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e702:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800e704:	4b6b      	ldr	r3, [pc, #428]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e706:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e708:	4b6a      	ldr	r3, [pc, #424]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e70a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e70c:	3307      	adds	r3, #7
 800e70e:	08db      	lsrs	r3, r3, #3
 800e710:	b29b      	uxth	r3, r3
 800e712:	429a      	cmp	r2, r3
 800e714:	d90f      	bls.n	800e736 <rfalTransceiveRx+0x3ca>
            {
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800e716:	4b67      	ldr	r3, [pc, #412]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e71a:	3307      	adds	r3, #7
 800e71c:	08db      	lsrs	r3, r3, #3
 800e71e:	b29a      	uxth	r2, r3
 800e720:	4b64      	ldr	r3, [pc, #400]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e722:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e724:	1ad3      	subs	r3, r2, r3
 800e726:	81fb      	strh	r3, [r7, #14]
                
                /* Transmission errors have precedence over buffer error */
                if( gRFAL.TxRx.status == ERR_BUSY )
 800e728:	4b62      	ldr	r3, [pc, #392]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e72a:	8b5b      	ldrh	r3, [r3, #26]
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	d102      	bne.n	800e736 <rfalTransceiveRx+0x3ca>
                {
                    gRFAL.TxRx.status = ERR_NOMEM;
 800e730:	4b60      	ldr	r3, [pc, #384]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e732:	2201      	movs	r2, #1
 800e734:	835a      	strh	r2, [r3, #26]
                }
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800e736:	4b5f      	ldr	r3, [pc, #380]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73a:	4a5e      	ldr	r2, [pc, #376]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e73c:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800e73e:	4413      	add	r3, r2
 800e740:	89fa      	ldrh	r2, [r7, #14]
 800e742:	4611      	mov	r1, r2
 800e744:	4618      	mov	r0, r3
 800e746:	f003 f81a 	bl	801177e <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800e74a:	4b5a      	ldr	r3, [pc, #360]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d019      	beq.n	800e786 <rfalTransceiveRx+0x41a>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800e752:	4b58      	ldr	r3, [pc, #352]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e754:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e756:	4b57      	ldr	r3, [pc, #348]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e75a:	00d2      	lsls	r2, r2, #3
 800e75c:	b292      	uxth	r2, r2
 800e75e:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800e760:	f000 f9a4 	bl	800eaac <rfalFIFOStatusIsIncompleteByte>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00d      	beq.n	800e786 <rfalTransceiveRx+0x41a>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800e76a:	f000 f9c3 	bl	800eaf4 <rfalFIFOGetNumIncompleteBits>
 800e76e:	4603      	mov	r3, r0
 800e770:	f1c3 0208 	rsb	r2, r3, #8
 800e774:	4b4f      	ldr	r3, [pc, #316]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e778:	8819      	ldrh	r1, [r3, #0]
 800e77a:	b292      	uxth	r2, r2
 800e77c:	4b4d      	ldr	r3, [pc, #308]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e780:	1a8a      	subs	r2, r1, r2
 800e782:	b292      	uxth	r2, r2
 800e784:	801a      	strh	r2, [r3, #0]
            }

        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800e786:	4b4b      	ldr	r3, [pc, #300]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e788:	785b      	ldrb	r3, [r3, #1]
 800e78a:	2b07      	cmp	r3, #7
 800e78c:	d003      	beq.n	800e796 <rfalTransceiveRx+0x42a>
 800e78e:	4b49      	ldr	r3, [pc, #292]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e790:	785b      	ldrb	r3, [r3, #1]
 800e792:	2b08      	cmp	r3, #8
 800e794:	d165      	bne.n	800e862 <rfalTransceiveRx+0x4f6>
 800e796:	4b47      	ldr	r3, [pc, #284]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e798:	8b5b      	ldrh	r3, [r3, #26]
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	d161      	bne.n	800e862 <rfalTransceiveRx+0x4f6>
            {
                ReturnCode ret;
                uint16_t offset = 0; /* REMARK offset not currently used */
 800e79e:	2300      	movs	r3, #0
 800e7a0:	807b      	strh	r3, [r7, #2]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800e7a2:	4b44      	ldr	r3, [pc, #272]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e7a6:	4b43      	ldr	r3, [pc, #268]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7a8:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 800e7aa:	4b42      	ldr	r3, [pc, #264]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7ac:	f8d3 53ec 	ldr.w	r5, [r3, #1004]	; 0x3ec
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800e7b0:	4b40      	ldr	r3, [pc, #256]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7b2:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 800e7b6:	3307      	adds	r3, #7
 800e7b8:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800e7ba:	b29e      	uxth	r6, r3
 800e7bc:	4b3d      	ldr	r3, [pc, #244]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7be:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800e7c2:	4a3c      	ldr	r2, [pc, #240]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7c4:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 800e7c8:	493a      	ldr	r1, [pc, #232]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7ca:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800e7cc:	2908      	cmp	r1, #8
 800e7ce:	bf0c      	ite	eq
 800e7d0:	2101      	moveq	r1, #1
 800e7d2:	2100      	movne	r1, #0
 800e7d4:	b2c9      	uxtb	r1, r1
 800e7d6:	9103      	str	r1, [sp, #12]
 800e7d8:	9202      	str	r2, [sp, #8]
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	1cbb      	adds	r3, r7, #2
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	4633      	mov	r3, r6
 800e7e2:	462a      	mov	r2, r5
 800e7e4:	4621      	mov	r1, r4
 800e7e6:	f7f5 fb3f 	bl	8003e68 <iso15693VICCDecode>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	817b      	strh	r3, [r7, #10]
                
                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800e7ee:	897b      	ldrh	r3, [r7, #10]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <rfalTransceiveRx+0x48e>
 800e7f4:	897b      	ldrh	r3, [r7, #10]
 800e7f6:	2b15      	cmp	r3, #21
 800e7f8:	d11f      	bne.n	800e83a <rfalTransceiveRx+0x4ce>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800e7fa:	4b2e      	ldr	r3, [pc, #184]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e7fc:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800e800:	f003 0302 	and.w	r3, r3, #2
 800e804:	2b00      	cmp	r3, #0
 800e806:	d118      	bne.n	800e83a <rfalTransceiveRx+0x4ce>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800e808:	4b2a      	ldr	r3, [pc, #168]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e80a:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800e80e:	881b      	ldrh	r3, [r3, #0]
 800e810:	f003 0307 	and.w	r3, r3, #7
 800e814:	b29b      	uxth	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10f      	bne.n	800e83a <rfalTransceiveRx+0x4ce>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800e81a:	4b26      	ldr	r3, [pc, #152]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e81c:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800e820:	881b      	ldrh	r3, [r3, #0]
 800e822:	2b0f      	cmp	r3, #15
 800e824:	d909      	bls.n	800e83a <rfalTransceiveRx+0x4ce>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800e826:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e828:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800e82c:	881a      	ldrh	r2, [r3, #0]
 800e82e:	4b21      	ldr	r3, [pc, #132]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e830:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800e834:	3a10      	subs	r2, #16
 800e836:	b292      	uxth	r2, r2
 800e838:	801a      	strh	r2, [r3, #0]
                st25r3916WriteFifo(gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes( *gRFAL.nfcvData.origCtx.rxRcvdLen));
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
            #endif
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800e83a:	4a1e      	ldr	r2, [pc, #120]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e83c:	4b1d      	ldr	r3, [pc, #116]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e83e:	f102 041c 	add.w	r4, r2, #28
 800e842:	f503 7579 	add.w	r5, r3, #996	; 0x3e4
 800e846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e84a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e84e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800e852:	897b      	ldrh	r3, [r7, #10]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d001      	beq.n	800e85c <rfalTransceiveRx+0x4f0>
 800e858:	897b      	ldrh	r3, [r7, #10]
 800e85a:	e000      	b.n	800e85e <rfalTransceiveRx+0x4f2>
 800e85c:	2302      	movs	r3, #2
 800e85e:	4a15      	ldr	r2, [pc, #84]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e860:	8353      	strh	r3, [r2, #26]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800e862:	4b14      	ldr	r3, [pc, #80]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e864:	8b5b      	ldrh	r3, [r3, #26]
 800e866:	2b02      	cmp	r3, #2
 800e868:	d003      	beq.n	800e872 <rfalTransceiveRx+0x506>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800e86a:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e86c:	225a      	movs	r2, #90	; 0x5a
 800e86e:	761a      	strb	r2, [r3, #24]
                break;
 800e870:	e0da      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800e872:	4b10      	ldr	r3, [pc, #64]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e874:	785b      	ldrb	r3, [r3, #1]
 800e876:	2b09      	cmp	r3, #9
 800e878:	d003      	beq.n	800e882 <rfalTransceiveRx+0x516>
 800e87a:	4b0e      	ldr	r3, [pc, #56]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e87c:	785b      	ldrb	r3, [r3, #1]
 800e87e:	2b0d      	cmp	r3, #13
 800e880:	d103      	bne.n	800e88a <rfalTransceiveRx+0x51e>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800e882:	4b0c      	ldr	r3, [pc, #48]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e884:	2258      	movs	r2, #88	; 0x58
 800e886:	761a      	strb	r2, [r3, #24]
                break;
 800e888:	e0ce      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800e88a:	4b0a      	ldr	r3, [pc, #40]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e88c:	2259      	movs	r2, #89	; 0x59
 800e88e:	761a      	strb	r2, [r3, #24]
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800e890:	4b08      	ldr	r3, [pc, #32]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e892:	799b      	ldrb	r3, [r3, #6]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d003      	beq.n	800e8a0 <rfalTransceiveRx+0x534>
 800e898:	2140      	movs	r1, #64	; 0x40
 800e89a:	2001      	movs	r0, #1
 800e89c:	f003 f82d 	bl	80118fa <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800e8a0:	f7ff fa2c 	bl	800dcfc <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800e8a4:	4b03      	ldr	r3, [pc, #12]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	835a      	strh	r2, [r3, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800e8aa:	4b02      	ldr	r3, [pc, #8]	; (800e8b4 <rfalTransceiveRx+0x548>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	761a      	strb	r2, [r3, #24]
            break;
 800e8b0:	e0ba      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
 800e8b2:	bf00      	nop
 800e8b4:	2000155c 	.word	0x2000155c
            
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
            /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
            /* Use a SW timer to handle an eventual missing RXE                            */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800e8b8:	2032      	movs	r0, #50	; 0x32
 800e8ba:	f003 fbd3 	bl	8012064 <timerCalculateTimer>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	4a5b      	ldr	r2, [pc, #364]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e8c2:	6453      	str	r3, [r2, #68]	; 0x44
            /*******************************************************************************/
            
            tmp = rfalFIFOStatusGetNumBytes();
 800e8c4:	f000 f8d6 	bl	800ea74 <rfalFIFOStatusGetNumBytes>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	81fb      	strh	r3, [r7, #14]
            gRFAL.fifo.bytesTotal += tmp;
 800e8cc:	4b58      	ldr	r3, [pc, #352]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e8ce:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e8d0:	89fb      	ldrh	r3, [r7, #14]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	4b56      	ldr	r3, [pc, #344]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e8d8:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800e8da:	4b55      	ldr	r3, [pc, #340]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e8dc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e8de:	4b54      	ldr	r3, [pc, #336]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e8e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8e2:	3307      	adds	r3, #7
 800e8e4:	08db      	lsrs	r3, r3, #3
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d909      	bls.n	800e900 <rfalTransceiveRx+0x594>
 800e8ec:	4b50      	ldr	r3, [pc, #320]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e8ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8f0:	3307      	adds	r3, #7
 800e8f2:	08db      	lsrs	r3, r3, #3
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	4b4e      	ldr	r3, [pc, #312]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e8f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	e000      	b.n	800e902 <rfalTransceiveRx+0x596>
 800e900:	89fb      	ldrh	r3, [r7, #14]
 800e902:	81bb      	strh	r3, [r7, #12]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800e904:	4b4a      	ldr	r3, [pc, #296]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e908:	4a49      	ldr	r2, [pc, #292]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e90a:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800e90c:	4413      	add	r3, r2
 800e90e:	89ba      	ldrh	r2, [r7, #12]
 800e910:	4611      	mov	r1, r2
 800e912:	4618      	mov	r0, r3
 800e914:	f002 ff33 	bl	801177e <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800e918:	4b45      	ldr	r3, [pc, #276]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e91a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e91c:	89bb      	ldrh	r3, [r7, #12]
 800e91e:	4413      	add	r3, r2
 800e920:	b29a      	uxth	r2, r3
 800e922:	4b43      	ldr	r3, [pc, #268]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e924:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800e926:	89ba      	ldrh	r2, [r7, #12]
 800e928:	89fb      	ldrh	r3, [r7, #14]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d207      	bcs.n	800e93e <rfalTransceiveRx+0x5d2>
            {
                st25r3916ReadFifo( NULL, (tmp - aux) );
 800e92e:	89fa      	ldrh	r2, [r7, #14]
 800e930:	89bb      	ldrh	r3, [r7, #12]
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	b29b      	uxth	r3, r3
 800e936:	4619      	mov	r1, r3
 800e938:	2000      	movs	r0, #0
 800e93a:	f002 ff20 	bl	801177e <st25r3916ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800e93e:	f000 f88d 	bl	800ea5c <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800e942:	4b3b      	ldr	r3, [pc, #236]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e944:	2254      	movs	r2, #84	; 0x54
 800e946:	761a      	strb	r2, [r3, #24]
            break;
 800e948:	e06e      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800e94a:	4b39      	ldr	r3, [pc, #228]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e94c:	799b      	ldrb	r3, [r3, #6]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d003      	beq.n	800e95a <rfalTransceiveRx+0x5ee>
 800e952:	2140      	movs	r1, #64	; 0x40
 800e954:	2001      	movs	r0, #1
 800e956:	f002 ffd0 	bl	80118fa <st25r3916WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800e95a:	f7ff f9cf 	bl	800dcfc <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800e95e:	4b34      	ldr	r3, [pc, #208]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e960:	8b5b      	ldrh	r3, [r3, #26]
 800e962:	2b02      	cmp	r3, #2
 800e964:	d102      	bne.n	800e96c <rfalTransceiveRx+0x600>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800e966:	4b32      	ldr	r3, [pc, #200]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e968:	2208      	movs	r2, #8
 800e96a:	835a      	strh	r2, [r3, #26]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800e96c:	4b30      	ldr	r3, [pc, #192]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e96e:	2200      	movs	r2, #0
 800e970:	761a      	strb	r2, [r3, #24]
            break;
 800e972:	e059      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
        
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800e974:	482f      	ldr	r0, [pc, #188]	; (800ea34 <rfalTransceiveRx+0x6c8>)
 800e976:	f003 fa5d 	bl	8011e34 <st25r3916GetInterrupt>
 800e97a:	4603      	mov	r3, r0
 800e97c:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d04c      	beq.n	800ea1e <rfalTransceiveRx+0x6b2>
            {    
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d002      	beq.n	800e994 <rfalTransceiveRx+0x628>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800e98e:	4b28      	ldr	r3, [pc, #160]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e990:	2253      	movs	r2, #83	; 0x53
 800e992:	761a      	strb	r2, [r3, #24]
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d005      	beq.n	800e9aa <rfalTransceiveRx+0x63e>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800e99e:	4b24      	ldr	r3, [pc, #144]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9a0:	2204      	movs	r2, #4
 800e9a2:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e9a4:	4b22      	ldr	r3, [pc, #136]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9a6:	225a      	movs	r2, #90	; 0x5a
 800e9a8:	761a      	strb	r2, [r3, #24]
            }
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	da38      	bge.n	800ea22 <rfalTransceiveRx+0x6b6>
            {
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800e9b0:	4b1f      	ldr	r3, [pc, #124]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9b2:	2225      	movs	r2, #37	; 0x25
 800e9b4:	835a      	strh	r2, [r3, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e9b6:	4b1e      	ldr	r3, [pc, #120]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9b8:	225a      	movs	r2, #90	; 0x5a
 800e9ba:	761a      	strb	r2, [r3, #24]
            }
            break;
 800e9bc:	e031      	b.n	800ea22 <rfalTransceiveRx+0x6b6>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800e9be:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800e9c2:	f003 fa37 	bl	8011e34 <st25r3916GetInterrupt>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d02a      	beq.n	800ea26 <rfalTransceiveRx+0x6ba>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <rfalTransceiveRx+0x676>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800e9da:	4b15      	ldr	r3, [pc, #84]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9dc:	2259      	movs	r2, #89	; 0x59
 800e9de:	761a      	strb	r2, [r3, #24]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800e9e0:	e022      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d006      	beq.n	800e9fa <rfalTransceiveRx+0x68e>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800e9ec:	4b10      	ldr	r3, [pc, #64]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9ee:	221d      	movs	r2, #29
 800e9f0:	835a      	strh	r2, [r3, #26]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e9f2:	4b0f      	ldr	r3, [pc, #60]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9f4:	225a      	movs	r2, #90	; 0x5a
 800e9f6:	761a      	strb	r2, [r3, #24]
            break;
 800e9f8:	e016      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
               gRFAL.TxRx.status = ERR_IO;
 800e9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800e9fc:	2203      	movs	r2, #3
 800e9fe:	835a      	strh	r2, [r3, #26]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ea00:	4b0b      	ldr	r3, [pc, #44]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800ea02:	225a      	movs	r2, #90	; 0x5a
 800ea04:	761a      	strb	r2, [r3, #24]
            break;
 800ea06:	e00f      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800ea08:	4b09      	ldr	r3, [pc, #36]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800ea0a:	2208      	movs	r2, #8
 800ea0c:	835a      	strh	r2, [r3, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ea0e:	4b08      	ldr	r3, [pc, #32]	; (800ea30 <rfalTransceiveRx+0x6c4>)
 800ea10:	225a      	movs	r2, #90	; 0x5a
 800ea12:	761a      	strb	r2, [r3, #24]
            break;           
 800ea14:	e008      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800ea16:	bf00      	nop
 800ea18:	e006      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800ea1a:	bf00      	nop
 800ea1c:	e004      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
                break;  /* No interrupt to process */
 800ea1e:	bf00      	nop
 800ea20:	e002      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
            break;
 800ea22:	bf00      	nop
 800ea24:	e000      	b.n	800ea28 <rfalTransceiveRx+0x6bc>
               break;  /* No interrupt to process */
 800ea26:	bf00      	nop
    }    
}
 800ea28:	bf00      	nop
 800ea2a:	3714      	adds	r7, #20
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea30:	2000155c 	.word	0x2000155c
 800ea34:	80005000 	.word	0x80005000

0800ea38 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800ea3c:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <rfalFIFOStatusUpdate+0x1c>)
 800ea3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ea42:	2bff      	cmp	r3, #255	; 0xff
 800ea44:	d104      	bne.n	800ea50 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 800ea46:	2202      	movs	r2, #2
 800ea48:	4903      	ldr	r1, [pc, #12]	; (800ea58 <rfalFIFOStatusUpdate+0x20>)
 800ea4a:	201e      	movs	r0, #30
 800ea4c:	f002 fdfd 	bl	801164a <st25r3916ReadMultipleRegisters>
    }
}
 800ea50:	bf00      	nop
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	2000155c 	.word	0x2000155c
 800ea58:	2000159a 	.word	0x2000159a

0800ea5c <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800ea60:	4b03      	ldr	r3, [pc, #12]	; (800ea70 <rfalFIFOStatusClear+0x14>)
 800ea62:	22ff      	movs	r2, #255	; 0xff
 800ea64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 800ea68:	bf00      	nop
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bc80      	pop	{r7}
 800ea6e:	4770      	bx	lr
 800ea70:	2000155c 	.word	0x2000155c

0800ea74 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint16_t rfalFIFOStatusGetNumBytes( void )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
    uint16_t result;
    
    rfalFIFOStatusUpdate();
 800ea7a:	f7ff ffdd 	bl	800ea38 <rfalFIFOStatusUpdate>
    
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800ea7e:	4b0a      	ldr	r3, [pc, #40]	; (800eaa8 <rfalFIFOStatusGetNumBytes+0x34>)
 800ea80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ea84:	099b      	lsrs	r3, r3, #6
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	021b      	lsls	r3, r3, #8
 800ea8c:	80fb      	strh	r3, [r7, #6]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 800ea8e:	4b06      	ldr	r3, [pc, #24]	; (800eaa8 <rfalFIFOStatusGetNumBytes+0x34>)
 800ea90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	88fb      	ldrh	r3, [r7, #6]
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	80fb      	strh	r3, [r7, #6]
    return result;
 800ea9c:	88fb      	ldrh	r3, [r7, #6]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	2000155c 	.word	0x2000155c

0800eaac <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800eab0:	f7ff ffc2 	bl	800ea38 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <rfalFIFOStatusIsIncompleteByte+0x20>)
 800eab6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eaba:	f003 030e 	and.w	r3, r3, #14
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	bf14      	ite	ne
 800eac2:	2301      	movne	r3, #1
 800eac4:	2300      	moveq	r3, #0
 800eac6:	b2db      	uxtb	r3, r3
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	2000155c 	.word	0x2000155c

0800ead0 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800ead4:	f7ff ffb0 	bl	800ea38 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 800ead8:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <rfalFIFOStatusIsMissingPar+0x20>)
 800eada:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eade:	f003 0301 	and.w	r3, r3, #1
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	bf14      	ite	ne
 800eae6:	2301      	movne	r3, #1
 800eae8:	2300      	moveq	r3, #0
 800eaea:	b2db      	uxtb	r3, r3
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	2000155c 	.word	0x2000155c

0800eaf4 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800eaf8:	f7ff ff9e 	bl	800ea38 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800eafc:	4b04      	ldr	r3, [pc, #16]	; (800eb10 <rfalFIFOGetNumIncompleteBits+0x1c>)
 800eafe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb02:	085b      	lsrs	r3, r3, #1
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	f003 0307 	and.w	r3, r3, #7
 800eb0a:	b2db      	uxtb	r3, r3
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	2000155c 	.word	0x2000155c

0800eb14 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607b      	str	r3, [r7, #4]
 800eb1e:	4603      	mov	r3, r0
 800eb20:	73fb      	strb	r3, [r7, #15]
 800eb22:	4613      	mov	r3, r2
 800eb24:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3916IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 800eb26:	2208      	movs	r2, #8
 800eb28:	2108      	movs	r1, #8
 800eb2a:	2002      	movs	r0, #2
 800eb2c:	f002 fff2 	bl	8011b14 <st25r3916CheckReg>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f083 0301 	eor.w	r3, r3, #1
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d10b      	bne.n	800eb54 <rfalISO14443ATransceiveShortFrame+0x40>
 800eb3c:	4b73      	ldr	r3, [pc, #460]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d907      	bls.n	800eb54 <rfalISO14443ATransceiveShortFrame+0x40>
 800eb44:	4b71      	ldr	r3, [pc, #452]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800eb46:	785b      	ldrb	r3, [r3, #1]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d005      	beq.n	800eb58 <rfalISO14443ATransceiveShortFrame+0x44>
 800eb4c:	4b6f      	ldr	r3, [pc, #444]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800eb4e:	785b      	ldrb	r3, [r3, #1]
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d001      	beq.n	800eb58 <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 800eb54:	2321      	movs	r3, #33	; 0x21
 800eb56:	e0d4      	b.n	800ed02 <rfalISO14443ATransceiveShortFrame+0x1ee>
    }
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d006      	beq.n	800eb6c <rfalISO14443ATransceiveShortFrame+0x58>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d003      	beq.n	800eb6c <rfalISO14443ATransceiveShortFrame+0x58>
 800eb64:	6a3b      	ldr	r3, [r7, #32]
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6a:	d101      	bne.n	800eb70 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 800eb6c:	2307      	movs	r3, #7
 800eb6e:	e0c8      	b.n	800ed02 <rfalISO14443ATransceiveShortFrame+0x1ee>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
 800eb72:	2b26      	cmp	r3, #38	; 0x26
 800eb74:	d004      	beq.n	800eb80 <rfalISO14443ATransceiveShortFrame+0x6c>
 800eb76:	2b52      	cmp	r3, #82	; 0x52
 800eb78:	d105      	bne.n	800eb86 <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3916_CMD_TRANSMIT_WUPA;
 800eb7a:	23c7      	movs	r3, #199	; 0xc7
 800eb7c:	757b      	strb	r3, [r7, #21]
            break;
 800eb7e:	e004      	b.n	800eb8a <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3916_CMD_TRANSMIT_REQA;
 800eb80:	23c6      	movs	r3, #198	; 0xc6
 800eb82:	757b      	strb	r3, [r7, #21]
            break;
 800eb84:	e001      	b.n	800eb8a <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 800eb86:	2307      	movs	r3, #7
 800eb88:	e0bb      	b.n	800ed02 <rfalISO14443ATransceiveShortFrame+0x1ee>
    }
    
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 800eb8a:	2180      	movs	r1, #128	; 0x80
 800eb8c:	200a      	movs	r0, #10
 800eb8e:	f002 ff10 	bl	80119b2 <st25r3916SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 800eb92:	bf00      	nop
 800eb94:	f7fe fd7c 	bl	800d690 <rfalIsGTExpired>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	f083 0301 	eor.w	r3, r3, #1
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1f7      	bne.n	800eb94 <rfalISO14443ATransceiveShortFrame+0x80>
    while( st25r3916IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 800eba4:	bf00      	nop
 800eba6:	2204      	movs	r2, #4
 800eba8:	2104      	movs	r1, #4
 800ebaa:	2024      	movs	r0, #36	; 0x24
 800ebac:	f002 ffb2 	bl	8011b14 <st25r3916CheckReg>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1f7      	bne.n	800eba6 <rfalISO14443ATransceiveShortFrame+0x92>

    rfalTimerDestroy( gRFAL.tmr.GT );
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800ebb6:	4b55      	ldr	r3, [pc, #340]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/        
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 800ebbc:	4b53      	ldr	r3, [pc, #332]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ebbe:	2203      	movs	r2, #3
 800ebc0:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 800ebc2:	4a52      	ldr	r2, [pc, #328]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 800ebc8:	7bbb      	ldrb	r3, [r7, #14]
 800ebca:	b29a      	uxth	r2, r3
 800ebcc:	4b4f      	ldr	r3, [pc, #316]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ebce:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 800ebd0:	4a4e      	ldr	r2, [pc, #312]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    gRFAL.TxRx.ctx.fwt       = fwt;
 800ebd6:	4a4d      	ldr	r2, [pc, #308]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	6353      	str	r3, [r2, #52]	; 0x34
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 800ebdc:	6a3b      	ldr	r3, [r7, #32]
 800ebde:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ebe2:	4a4b      	ldr	r2, [pc, #300]	; (800ed10 <rfalISO14443ATransceiveShortFrame+0x1fc>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	bf28      	it	cs
 800ebe8:	4613      	movcs	r3, r2
 800ebea:	099b      	lsrs	r3, r3, #6
 800ebec:	4618      	mov	r0, r3
 800ebee:	f002 fb4d 	bl	801128c <st25r3916SetNoResponseTime>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800ebf2:	4b46      	ldr	r3, [pc, #280]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d014      	beq.n	800ec24 <rfalISO14443ATransceiveShortFrame+0x110>
    {
        
        /* Ensure that MRT is using 64/fc steps */
        st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 800ebfa:	2108      	movs	r1, #8
 800ebfc:	2012      	movs	r0, #18
 800ebfe:	f002 fea1 	bl	8011944 <st25r3916ClrRegisterBits>
        
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 800ec02:	4b42      	ldr	r3, [pc, #264]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 800ec0a:	d306      	bcc.n	800ec1a <rfalISO14443ATransceiveShortFrame+0x106>
 800ec0c:	4b3f      	ldr	r3, [pc, #252]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800ec14:	099b      	lsrs	r3, r3, #6
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	e000      	b.n	800ec1c <rfalISO14443ATransceiveShortFrame+0x108>
 800ec1a:	2304      	movs	r3, #4
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	200f      	movs	r0, #15
 800ec20:	f002 fd40 	bl	80116a4 <st25r3916WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800ec24:	4b39      	ldr	r3, [pc, #228]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec26:	691b      	ldr	r3, [r3, #16]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d014      	beq.n	800ec56 <rfalISO14443ATransceiveShortFrame+0x142>
    {
        /* Configure GPT to start at RX end */
        st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ) , ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800ec2c:	4b37      	ldr	r3, [pc, #220]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec2e:	691b      	ldr	r3, [r3, #16]
 800ec30:	f240 423b 	movw	r2, #1083	; 0x43b
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d804      	bhi.n	800ec42 <rfalISO14443ATransceiveShortFrame+0x12e>
 800ec38:	4b34      	ldr	r3, [pc, #208]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	08db      	lsrs	r3, r3, #3
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	e005      	b.n	800ec4e <rfalISO14443ATransceiveShortFrame+0x13a>
 800ec42:	4b32      	ldr	r3, [pc, #200]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800ec4a:	08db      	lsrs	r3, r3, #3
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	2120      	movs	r1, #32
 800ec50:	4618      	mov	r0, r3
 800ec52:	f002 fb70 	bl	8011336 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 800ec56:	f7ff f86d 	bl	800dd34 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 800ec5a:	2004      	movs	r0, #4
 800ec5c:	f003 f8ea 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 800ec60:	2004      	movs	r0, #4
 800ec62:	f003 f931 	bl	8011ec8 <st25r3916EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 800ec66:	4b29      	ldr	r3, [pc, #164]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec68:	795b      	ldrb	r3, [r3, #5]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d008      	beq.n	800ec80 <rfalISO14443ATransceiveShortFrame+0x16c>
 800ec6e:	4b27      	ldr	r3, [pc, #156]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ec70:	795b      	ldrb	r3, [r3, #5]
 800ec72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	4619      	mov	r1, r3
 800ec7a:	2001      	movs	r0, #1
 800ec7c:	f002 fe3d 	bl	80118fa <st25r3916WriteTestRegister>
    
    /*******************************************************************************/
    /* Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3916 will report parity error, Note2 of the register */
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, 0);
 800ec80:	2100      	movs	r1, #0
 800ec82:	2023      	movs	r0, #35	; 0x23
 800ec84:	f002 fd0e 	bl	80116a4 <st25r3916WriteRegister>
    
    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3916ExecuteCommand( directCmd );
 800ec88:	7d7b      	ldrb	r3, [r7, #21]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f002 fdf9 	bl	8011882 <st25r3916ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3916_SW_TMR_MIN_1MS ) ) == 0U )
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	f646 12ef 	movw	r2, #27119	; 0x69ef
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d906      	bls.n	800eca8 <rfalISO14443ATransceiveShortFrame+0x194>
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	4a1d      	ldr	r2, [pc, #116]	; (800ed14 <rfalISO14443ATransceiveShortFrame+0x200>)
 800ec9e:	fba2 2303 	umull	r2, r3, r2, r3
 800eca2:	0b1b      	lsrs	r3, r3, #12
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	e000      	b.n	800ecaa <rfalISO14443ATransceiveShortFrame+0x196>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	4619      	mov	r1, r3
 800ecac:	2008      	movs	r0, #8
 800ecae:	f003 f86d 	bl	8011d8c <st25r3916WaitForInterruptsTimed>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <rfalISO14443ATransceiveShortFrame+0x1aa>
    {
        ret = ERR_IO;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	82fb      	strh	r3, [r7, #22]
 800ecbc:	e019      	b.n	800ecf2 <rfalISO14443ATransceiveShortFrame+0x1de>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 800ecbe:	4b13      	ldr	r3, [pc, #76]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ecc0:	799b      	ldrb	r3, [r3, #6]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d008      	beq.n	800ecd8 <rfalISO14443ATransceiveShortFrame+0x1c4>
 800ecc6:	4b11      	ldr	r3, [pc, #68]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ecc8:	799b      	ldrb	r3, [r3, #6]
 800ecca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	f002 fe11 	bl	80118fa <st25r3916WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 800ecd8:	4b0c      	ldr	r3, [pc, #48]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ecda:	2203      	movs	r2, #3
 800ecdc:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800ecde:	4b0b      	ldr	r3, [pc, #44]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ece0:	2251      	movs	r2, #81	; 0x51
 800ece2:	761a      	strb	r2, [r3, #24]
        gRFAL.TxRx.status = ERR_BUSY;
 800ece4:	4b09      	ldr	r3, [pc, #36]	; (800ed0c <rfalISO14443ATransceiveShortFrame+0x1f8>)
 800ece6:	2202      	movs	r2, #2
 800ece8:	835a      	strh	r2, [r3, #26]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 800ecea:	f7fe ff27 	bl	800db3c <rfalTransceiveBlockingRx>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 800ecf2:	2004      	movs	r0, #4
 800ecf4:	f003 f8f4 	bl	8011ee0 <st25r3916DisableInterrupts>
    
    /* ReEnable CRC on Rx */
    st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 800ecf8:	2180      	movs	r1, #128	; 0x80
 800ecfa:	200a      	movs	r0, #10
 800ecfc:	f002 fe22 	bl	8011944 <st25r3916ClrRegisterBits>
    
    return ret;
 800ed00:	8afb      	ldrh	r3, [r7, #22]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	2000155c 	.word	0x2000155c
 800ed10:	0ffff000 	.word	0x0ffff000
 800ed14:	4d542005 	.word	0x4d542005

0800ed18 <rfalISO14443ATransceiveAnticollisionFrame>:


/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08e      	sub	sp, #56	; 0x38
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
 800ed24:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800ed26:	4b9a      	ldr	r3, [pc, #616]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d903      	bls.n	800ed36 <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 800ed2e:	4b98      	ldr	r3, [pc, #608]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ed30:	785b      	ldrb	r3, [r3, #1]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d001      	beq.n	800ed3a <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 800ed36:	2321      	movs	r3, #33	; 0x21
 800ed38:	e125      	b.n	800ef86 <rfalISO14443ATransceiveAnticollisionFrame+0x26e>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d008      	beq.n	800ed52 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d005      	beq.n	800ed52 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 800ed52:	2307      	movs	r3, #7
 800ed54:	e117      	b.n	800ef86 <rfalISO14443ATransceiveAnticollisionFrame+0x26e>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800ed56:	f240 1003 	movw	r0, #259	; 0x103
 800ed5a:	f7f4 fd83 	bl	8003864 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3916SetRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 800ed5e:	2101      	movs	r1, #1
 800ed60:	2005      	movs	r0, #5
 800ed62:	f002 fe26 	bl	80119b2 <st25r3916SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 800ed66:	2180      	movs	r1, #128	; 0x80
 800ed68:	200a      	movs	r0, #10
 800ed6a:	f002 fe22 	bl	80119b2 <st25r3916SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 800ed6e:	2303      	movs	r3, #3
 800ed70:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	00db      	lsls	r3, r3, #3
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	4413      	add	r3, r2
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	461a      	mov	r2, r3
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	4413      	add	r3, r2
 800ed96:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 800ed98:	2328      	movs	r3, #40	; 0x28
 800ed9a:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 800eda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda2:	633b      	str	r3, [r7, #48]	; 0x30
    
    /* Disable Automatic Gain Control (AGC) for better detection of collisions if using Coherent Receiver */
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 800eda4:	2204      	movs	r2, #4
 800eda6:	2104      	movs	r1, #4
 800eda8:	200a      	movs	r0, #10
 800edaa:	f002 feb3 	bl	8011b14 <st25r3916CheckReg>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d001      	beq.n	800edb8 <rfalISO14443ATransceiveAnticollisionFrame+0xa0>
 800edb4:	2208      	movs	r2, #8
 800edb6:	e000      	b.n	800edba <rfalISO14443ATransceiveAnticollisionFrame+0xa2>
 800edb8:	2200      	movs	r2, #0
 800edba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbc:	4313      	orrs	r3, r2
 800edbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    
    rfalStartTransceive( &ctx );
 800edc0:	f107 0318 	add.w	r3, r7, #24
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fe fd05 	bl	800d7d4 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 800edca:	2004      	movs	r0, #4
 800edcc:	f003 f832 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 800edd0:	2004      	movs	r0, #4
 800edd2:	f003 f879 	bl	8011ec8 <st25r3916EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d02d      	beq.n	800ee40 <rfalISO14443ATransceiveAnticollisionFrame+0x128>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	461a      	mov	r2, r3
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	4413      	add	r3, r2
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	461a      	mov	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	f1c3 0308 	rsb	r3, r3, #8
 800edfa:	409a      	lsls	r2, r3
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	4619      	mov	r1, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	440b      	add	r3, r1
 800ee06:	b2d2      	uxtb	r2, r2
 800ee08:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	4413      	add	r3, r2
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	f1c3 0308 	rsb	r3, r3, #8
 800ee20:	411a      	asrs	r2, r3
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	4619      	mov	r1, r3
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	440b      	add	r3, r1
 800ee2c:	b2d2      	uxtb	r2, r2
 800ee2e:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	461a      	mov	r2, r3
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	4413      	add	r3, r2
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800ee40:	f7fe fe5f 	bl	800db02 <rfalTransceiveRunBlockingTx>
 800ee44:	4603      	mov	r3, r0
 800ee46:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 800ee48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d14f      	bne.n	800eeee <rfalISO14443ATransceiveAnticollisionFrame+0x1d6>
    {
       ret = rfalTransceiveBlockingRx();
 800ee4e:	f7fe fe75 	bl	800db3c <rfalTransceiveBlockingRx>
 800ee52:	4603      	mov	r3, r0
 800ee54:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d031      	beq.n	800eec2 <rfalISO14443ATransceiveAnticollisionFrame+0x1aa>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	461a      	mov	r2, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	4413      	add	r3, r2
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	411a      	asrs	r2, r3
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	4619      	mov	r1, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	440b      	add	r3, r1
 800ee7c:	b2d2      	uxtb	r2, r2
 800ee7e:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	461a      	mov	r2, r3
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	4413      	add	r3, r2
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	409a      	lsls	r2, r3
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	440b      	add	r3, r1
 800ee9e:	b2d2      	uxtb	r2, r2
 800eea0:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	461a      	mov	r2, r3
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	4413      	add	r3, r2
 800eeac:	7819      	ldrb	r1, [r3, #0]
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800eebc:	430a      	orrs	r2, r1
 800eebe:	b2d2      	uxtb	r2, r2
 800eec0:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 800eec2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eec4:	2b1d      	cmp	r3, #29
 800eec6:	d112      	bne.n	800eeee <rfalISO14443ATransceiveAnticollisionFrame+0x1d6>
       {                      
           /* read out collision register */
           st25r3916ReadRegister( ST25R3916_REG_COLLISION_STATUS, &collData);
 800eec8:	f107 0317 	add.w	r3, r7, #23
 800eecc:	4619      	mov	r1, r3
 800eece:	2020      	movs	r0, #32
 800eed0:	f002 fbaa 	bl	8011628 <st25r3916ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_byte_shift) & 0x0FU); // 4-bits Byte information
 800eed4:	7dfb      	ldrb	r3, [r7, #23]
 800eed6:	091b      	lsrs	r3, r3, #4
 800eed8:	b2da      	uxtb	r2, r3
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_bit_shift)  & 0x07U); // 3-bits bit information
 800eede:	7dfb      	ldrb	r3, [r7, #23]
 800eee0:	085b      	lsrs	r3, r3, #1
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	f003 0307 	and.w	r3, r3, #7
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 800eeee:	2004      	movs	r0, #4
 800eef0:	f002 fff6 	bl	8011ee0 <st25r3916DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 800eef4:	2101      	movs	r1, #1
 800eef6:	2005      	movs	r0, #5
 800eef8:	f002 fd24 	bl	8011944 <st25r3916ClrRegisterBits>

    /* ReEnable CRC on Rx */
    st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 800eefc:	2180      	movs	r1, #128	; 0x80
 800eefe:	200a      	movs	r0, #10
 800ef00:	f002 fd20 	bl	8011944 <st25r3916ClrRegisterBits>
    /*******************************************************************************/
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800ef04:	4b22      	ldr	r3, [pc, #136]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ef06:	789b      	ldrb	r3, [r3, #2]
 800ef08:	2bea      	cmp	r3, #234	; 0xea
 800ef0a:	d90c      	bls.n	800ef26 <rfalISO14443ATransceiveAnticollisionFrame+0x20e>
 800ef0c:	4b20      	ldr	r3, [pc, #128]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ef0e:	789b      	ldrb	r3, [r3, #2]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	011b      	lsls	r3, r3, #4
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef1e:	f043 0301 	orr.w	r3, r3, #1
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	e00d      	b.n	800ef42 <rfalISO14443ATransceiveAnticollisionFrame+0x22a>
 800ef26:	4b1a      	ldr	r3, [pc, #104]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ef28:	789b      	ldrb	r3, [r3, #2]
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef3c:	f043 0301 	orr.w	r3, r3, #1
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7f4 fc8e 	bl	8003864 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800ef48:	4b11      	ldr	r3, [pc, #68]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ef4a:	78db      	ldrb	r3, [r3, #3]
 800ef4c:	2bea      	cmp	r3, #234	; 0xea
 800ef4e:	d90a      	bls.n	800ef66 <rfalISO14443ATransceiveAnticollisionFrame+0x24e>
 800ef50:	4b0f      	ldr	r3, [pc, #60]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ef52:	78db      	ldrb	r3, [r3, #3]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	011b      	lsls	r3, r3, #4
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	e00b      	b.n	800ef7e <rfalISO14443ATransceiveAnticollisionFrame+0x266>
 800ef66:	4b0a      	ldr	r3, [pc, #40]	; (800ef90 <rfalISO14443ATransceiveAnticollisionFrame+0x278>)
 800ef68:	78db      	ldrb	r3, [r3, #3]
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	011b      	lsls	r3, r3, #4
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7f4 fc70 	bl	8003864 <rfalSetAnalogConfig>
    
    return ret;
 800ef84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3738      	adds	r7, #56	; 0x38
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	2000155c 	.word	0x2000155c

0800ef94 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b08c      	sub	sp, #48	; 0x30
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	607a      	str	r2, [r7, #4]
 800ef9e:	461a      	mov	r2, r3
 800efa0:	460b      	mov	r3, r1
 800efa2:	72fb      	strb	r3, [r7, #11]
 800efa4:	4613      	mov	r3, r2
 800efa6:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800efa8:	4b55      	ldr	r3, [pc, #340]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d903      	bls.n	800efb8 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800efb0:	4b53      	ldr	r3, [pc, #332]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800efb2:	785b      	ldrb	r3, [r3, #1]
 800efb4:	2b07      	cmp	r3, #7
 800efb6:	d001      	beq.n	800efbc <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800efb8:	2321      	movs	r3, #33	; 0x21
 800efba:	e09d      	b.n	800f0f8 <rfalISO15693TransceiveAnticollisionFrame+0x164>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800efbc:	f241 0003 	movw	r0, #4099	; 0x1003
 800efc0:	f7f4 fc50 	bl	8003864 <rfalSetAnalogConfig>
    
    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800efc4:	4b4e      	ldr	r3, [pc, #312]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800efc6:	2210      	movs	r2, #16
 800efc8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800efcc:	7afb      	ldrb	r3, [r7, #11]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d101      	bne.n	800efd6 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800efd2:	220b      	movs	r2, #11
 800efd4:	e000      	b.n	800efd8 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800efd6:	220a      	movs	r2, #10
 800efd8:	7afb      	ldrb	r3, [r7, #11]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d101      	bne.n	800efe2 <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800efde:	2340      	movs	r3, #64	; 0x40
 800efe0:	e000      	b.n	800efe4 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800efe2:	2300      	movs	r3, #0
 800efe4:	4313      	orrs	r3, r2
 800efe6:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800efec:	7afb      	ldrb	r3, [r7, #11]
 800efee:	b29b      	uxth	r3, r3
 800eff0:	00db      	lsls	r3, r3, #3
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800effa:	7abb      	ldrb	r3, [r7, #10]
 800effc:	b29b      	uxth	r3, r3
 800effe:	00db      	lsls	r3, r3, #3
 800f000:	b29b      	uxth	r3, r3
 800f002:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800f008:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800f00c:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800f00e:	f107 0310 	add.w	r3, r7, #16
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe fbde 	bl	800d7d4 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800f018:	f7fe fd73 	bl	800db02 <rfalTransceiveRunBlockingTx>
 800f01c:	4603      	mov	r3, r0
 800f01e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800f020:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f022:	2b00      	cmp	r3, #0
 800f024:	d103      	bne.n	800f02e <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800f026:	f7fe fd89 	bl	800db3c <rfalTransceiveBlockingRx>
 800f02a:	4603      	mov	r3, r0
 800f02c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Check if a Transmission error and received data is less then expected */
    if( ((ret == ERR_RF_COLLISION) || (ret == ERR_CRC) || (ret == ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 800f02e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f030:	2b1d      	cmp	r3, #29
 800f032:	d005      	beq.n	800f040 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f036:	2b15      	cmp	r3, #21
 800f038:	d002      	beq.n	800f040 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 800f03a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f03c:	2b09      	cmp	r3, #9
 800f03e:	d112      	bne.n	800f066 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	881b      	ldrh	r3, [r3, #0]
 800f044:	3307      	adds	r3, #7
 800f046:	08db      	lsrs	r3, r3, #3
 800f048:	b29b      	uxth	r3, r3
 800f04a:	2b0b      	cmp	r3, #11
 800f04c:	d80b      	bhi.n	800f066 <rfalISO15693TransceiveAnticollisionFrame+0xd2>
    {
        /* If INVENTORY_RES is shorter than expected, tag is still modulating *
         * Ensure that response is complete before next frame                 */
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	881b      	ldrh	r3, [r3, #0]
 800f052:	3307      	adds	r3, #7
 800f054:	08db      	lsrs	r3, r3, #3
 800f056:	b29b      	uxth	r3, r3
 800f058:	f1c3 030c 	rsb	r3, r3, #12
 800f05c:	089b      	lsrs	r3, r3, #2
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	4618      	mov	r0, r3
 800f062:	f7f2 fc85 	bl	8001970 <HAL_Delay>
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 800f066:	4b26      	ldr	r3, [pc, #152]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f068:	789b      	ldrb	r3, [r3, #2]
 800f06a:	2bea      	cmp	r3, #234	; 0xea
 800f06c:	d90c      	bls.n	800f088 <rfalISO15693TransceiveAnticollisionFrame+0xf4>
 800f06e:	4b24      	ldr	r3, [pc, #144]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f070:	789b      	ldrb	r3, [r3, #2]
 800f072:	b29b      	uxth	r3, r3
 800f074:	011b      	lsls	r3, r3, #4
 800f076:	b29b      	uxth	r3, r3
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f080:	f043 0301 	orr.w	r3, r3, #1
 800f084:	b29b      	uxth	r3, r3
 800f086:	e00d      	b.n	800f0a4 <rfalISO15693TransceiveAnticollisionFrame+0x110>
 800f088:	4b1d      	ldr	r3, [pc, #116]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f08a:	789b      	ldrb	r3, [r3, #2]
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	3301      	adds	r3, #1
 800f090:	b29b      	uxth	r3, r3
 800f092:	011b      	lsls	r3, r3, #4
 800f094:	b29b      	uxth	r3, r3
 800f096:	b2db      	uxtb	r3, r3
 800f098:	b29b      	uxth	r3, r3
 800f09a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f09e:	f043 0301 	orr.w	r3, r3, #1
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f4 fbdd 	bl	8003864 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800f0aa:	4b15      	ldr	r3, [pc, #84]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f0ac:	78db      	ldrb	r3, [r3, #3]
 800f0ae:	2bea      	cmp	r3, #234	; 0xea
 800f0b0:	d90c      	bls.n	800f0cc <rfalISO15693TransceiveAnticollisionFrame+0x138>
 800f0b2:	4b13      	ldr	r3, [pc, #76]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f0b4:	78db      	ldrb	r3, [r3, #3]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	011b      	lsls	r3, r3, #4
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f0c4:	f043 0302 	orr.w	r3, r3, #2
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	e00d      	b.n	800f0e8 <rfalISO15693TransceiveAnticollisionFrame+0x154>
 800f0cc:	4b0c      	ldr	r3, [pc, #48]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f0ce:	78db      	ldrb	r3, [r3, #3]
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	011b      	lsls	r3, r3, #4
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f0e2:	f043 0302 	orr.w	r3, r3, #2
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7f4 fbbb 	bl	8003864 <rfalSetAnalogConfig>
    
    gRFAL.nfcvData.ignoreBits = 0;
 800f0ee:	4b04      	ldr	r3, [pc, #16]	; (800f100 <rfalISO15693TransceiveAnticollisionFrame+0x16c>)
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    return ret;
 800f0f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3730      	adds	r7, #48	; 0x30
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	2000155c 	.word	0x2000155c

0800f104 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b088      	sub	sp, #32
 800f108:	af02      	add	r7, sp, #8
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	460b      	mov	r3, r1
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800f112:	7afa      	ldrb	r2, [r7, #11]
 800f114:	f107 0017 	add.w	r0, r7, #23
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	4613      	mov	r3, r2
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	2100      	movs	r1, #0
 800f122:	f7ff ff37 	bl	800ef94 <rfalISO15693TransceiveAnticollisionFrame>
 800f126:	4603      	mov	r3, r0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3718      	adds	r7, #24
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b08c      	sub	sp, #48	; 0x30
 800f134:	af04      	add	r7, sp, #16
 800f136:	603b      	str	r3, [r7, #0]
 800f138:	4603      	mov	r3, r0
 800f13a:	71fb      	strb	r3, [r7, #7]
 800f13c:	460b      	mov	r3, r1
 800f13e:	80bb      	strh	r3, [r7, #4]
 800f140:	4613      	mov	r3, r2
 800f142:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 800f144:	4b6e      	ldr	r3, [pc, #440]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d903      	bls.n	800f154 <rfalFeliCaPoll+0x24>
 800f14c:	4b6c      	ldr	r3, [pc, #432]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f14e:	785b      	ldrb	r3, [r3, #1]
 800f150:	2b06      	cmp	r3, #6
 800f152:	d001      	beq.n	800f158 <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 800f154:	2321      	movs	r3, #33	; 0x21
 800f156:	e0ce      	b.n	800f2f6 <rfalFeliCaPoll+0x1c6>
    }
    
    frameIdx    = 0;
 800f158:	2300      	movs	r3, #0
 800f15a:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 800f164:	79fb      	ldrb	r3, [r7, #7]
 800f166:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */   
 800f168:	7e7b      	ldrb	r3, [r7, #25]
 800f16a:	1c5a      	adds	r2, r3, #1
 800f16c:	767a      	strb	r2, [r7, #25]
 800f16e:	f107 0220 	add.w	r2, r7, #32
 800f172:	4413      	add	r3, r2
 800f174:	2200      	movs	r2, #0
 800f176:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 800f17a:	88bb      	ldrh	r3, [r7, #4]
 800f17c:	0a1b      	lsrs	r3, r3, #8
 800f17e:	b29a      	uxth	r2, r3
 800f180:	7e7b      	ldrb	r3, [r7, #25]
 800f182:	1c59      	adds	r1, r3, #1
 800f184:	7679      	strb	r1, [r7, #25]
 800f186:	b2d2      	uxtb	r2, r2
 800f188:	f107 0120 	add.w	r1, r7, #32
 800f18c:	440b      	add	r3, r1
 800f18e:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 800f192:	7e7b      	ldrb	r3, [r7, #25]
 800f194:	1c5a      	adds	r2, r3, #1
 800f196:	767a      	strb	r2, [r7, #25]
 800f198:	88ba      	ldrh	r2, [r7, #4]
 800f19a:	b2d2      	uxtb	r2, r2
 800f19c:	f107 0120 	add.w	r1, r7, #32
 800f1a0:	440b      	add	r3, r1
 800f1a2:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 800f1a6:	7e7b      	ldrb	r3, [r7, #25]
 800f1a8:	1c5a      	adds	r2, r3, #1
 800f1aa:	767a      	strb	r2, [r7, #25]
 800f1ac:	f107 0220 	add.w	r2, r7, #32
 800f1b0:	4413      	add	r3, r2
 800f1b2:	79ba      	ldrb	r2, [r7, #6]
 800f1b4:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 800f1b8:	7e7b      	ldrb	r3, [r7, #25]
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	767a      	strb	r2, [r7, #25]
 800f1be:	f107 0220 	add.w	r2, r7, #32
 800f1c2:	4413      	add	r3, r2
 800f1c4:	7efa      	ldrb	r2, [r7, #27]
 800f1c6:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 800f1ca:	4b4d      	ldr	r3, [pc, #308]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f1cc:	79db      	ldrb	r3, [r3, #7]
 800f1ce:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800f1d0:	2002      	movs	r0, #2
 800f1d2:	f7fe f9f5 	bl	800d5c0 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */       
    ret = rfalTransceiveBlockingTx( frame, 
 800f1d6:	7e7b      	ldrb	r3, [r7, #25]
 800f1d8:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses,
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 800f1da:	7efb      	ldrb	r3, [r7, #27]
 800f1dc:	3303      	adds	r3, #3
    ret = rfalTransceiveBlockingTx( frame, 
 800f1de:	039b      	lsls	r3, r3, #14
 800f1e0:	f107 0010 	add.w	r0, r7, #16
 800f1e4:	9302      	str	r3, [sp, #8]
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	f107 030e 	add.w	r3, r7, #14
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	2314      	movs	r3, #20
 800f1f2:	4a44      	ldr	r2, [pc, #272]	; (800f304 <rfalFeliCaPoll+0x1d4>)
 800f1f4:	f7fe fc56 	bl	800daa4 <rfalTransceiveBlockingTx>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 800f1fc:	8bfb      	ldrh	r3, [r7, #30]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d145      	bne.n	800f28e <rfalFeliCaPoll+0x15e>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 800f202:	f7fe fc9b 	bl	800db3c <rfalTransceiveBlockingRx>
 800f206:	4603      	mov	r3, r0
 800f208:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 800f20a:	8bfb      	ldrh	r3, [r7, #30]
 800f20c:	2b04      	cmp	r3, #4
 800f20e:	d102      	bne.n	800f216 <rfalFeliCaPoll+0xe6>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 800f210:	2301      	movs	r3, #1
 800f212:	76bb      	strb	r3, [r7, #26]
 800f214:	e030      	b.n	800f278 <rfalFeliCaPoll+0x148>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800f216:	20d1      	movs	r0, #209	; 0xd1
 800f218:	f002 fb33 	bl	8011882 <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 800f21c:	20d5      	movs	r0, #213	; 0xd5
 800f21e:	f002 fb30 	bl	8011882 <st25r3916ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 800f222:	8bfb      	ldrh	r3, [r7, #30]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d10e      	bne.n	800f246 <rfalFeliCaPoll+0x116>
                {
                   devDetected++;
 800f228:	7f7b      	ldrb	r3, [r7, #29]
 800f22a:	3301      	adds	r3, #1
 800f22c:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 800f22e:	7f7a      	ldrb	r2, [r7, #29]
 800f230:	4613      	mov	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	4413      	add	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	3390      	adds	r3, #144	; 0x90
 800f23a:	4a31      	ldr	r2, [pc, #196]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f23c:	4413      	add	r3, r2
 800f23e:	3306      	adds	r3, #6
 800f240:	4a2f      	ldr	r2, [pc, #188]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f242:	6253      	str	r3, [r2, #36]	; 0x24
 800f244:	e002      	b.n	800f24c <rfalFeliCaPoll+0x11c>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 800f246:	7f3b      	ldrb	r3, [r7, #28]
 800f248:	3301      	adds	r3, #1
 800f24a:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0x00 );
 800f24c:	2200      	movs	r2, #0
 800f24e:	2102      	movs	r1, #2
 800f250:	2024      	movs	r0, #36	; 0x24
 800f252:	f002 fc5f 	bl	8011b14 <st25r3916CheckReg>
 800f256:	4603      	mov	r3, r0
 800f258:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 800f25a:	7ebb      	ldrb	r3, [r7, #26]
 800f25c:	f083 0301 	eor.w	r3, r3, #1
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b00      	cmp	r3, #0
 800f264:	d008      	beq.n	800f278 <rfalFeliCaPoll+0x148>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 800f266:	4b26      	ldr	r3, [pc, #152]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f268:	2202      	movs	r2, #2
 800f26a:	835a      	strh	r2, [r3, #26]
                    gRFAL.state       = RFAL_STATE_TXRX;
 800f26c:	4b24      	ldr	r3, [pc, #144]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f26e:	2203      	movs	r2, #3
 800f270:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800f272:	4b23      	ldr	r3, [pc, #140]	; (800f300 <rfalFeliCaPoll+0x1d0>)
 800f274:	2251      	movs	r2, #81	; 0x51
 800f276:	761a      	strb	r2, [r3, #24]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 800f278:	7efb      	ldrb	r3, [r7, #27]
 800f27a:	1e5a      	subs	r2, r3, #1
 800f27c:	76fa      	strb	r2, [r7, #27]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d005      	beq.n	800f28e <rfalFeliCaPoll+0x15e>
 800f282:	7ebb      	ldrb	r3, [r7, #26]
 800f284:	f083 0301 	eor.w	r3, r3, #1
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1b9      	bne.n	800f202 <rfalFeliCaPoll+0xd2>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 800f28e:	7e3b      	ldrb	r3, [r7, #24]
 800f290:	4618      	mov	r0, r3
 800f292:	f7fe f995 	bl	800d5c0 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d017      	beq.n	800f2cc <rfalFeliCaPoll+0x19c>
 800f29c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d013      	beq.n	800f2cc <rfalFeliCaPoll+0x19c>
 800f2a4:	7f7b      	ldrb	r3, [r7, #29]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d010      	beq.n	800f2cc <rfalFeliCaPoll+0x19c>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 800f2aa:	7f7a      	ldrb	r2, [r7, #29]
 800f2ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	bf28      	it	cs
 800f2b4:	4613      	movcs	r3, r2
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	4413      	add	r3, r2
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	490f      	ldr	r1, [pc, #60]	; (800f304 <rfalFeliCaPoll+0x1d4>)
 800f2c6:	6838      	ldr	r0, [r7, #0]
 800f2c8:	f002 ff28 	bl	801211c <memcpy>
    }
    
    if( devicesDetected != NULL )
 800f2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <rfalFeliCaPoll+0x1a8>
    {
        *devicesDetected = devDetected;
 800f2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d4:	7f7a      	ldrb	r2, [r7, #29]
 800f2d6:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d002      	beq.n	800f2e4 <rfalFeliCaPoll+0x1b4>
    {
        *collisionsDetected = colDetected;
 800f2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e0:	7f3a      	ldrb	r2, [r7, #28]
 800f2e2:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 800f2e4:	7f3b      	ldrb	r3, [r7, #28]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d104      	bne.n	800f2f4 <rfalFeliCaPoll+0x1c4>
 800f2ea:	7f7b      	ldrb	r3, [r7, #29]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d101      	bne.n	800f2f4 <rfalFeliCaPoll+0x1c4>
 800f2f0:	8bfb      	ldrh	r3, [r7, #30]
 800f2f2:	e000      	b.n	800f2f6 <rfalFeliCaPoll+0x1c6>
 800f2f4:	2300      	movs	r3, #0
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3720      	adds	r7, #32
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	2000155c 	.word	0x2000155c
 800f304:	200015f2 	.word	0x200015f2

0800f308 <rfalIsExtFieldOn>:



/*******************************************************************************/
bool rfalIsExtFieldOn( void )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	af00      	add	r7, sp, #0
    return st25r3916IsExtFieldOn();
 800f30c:	2240      	movs	r2, #64	; 0x40
 800f30e:	2140      	movs	r1, #64	; 0x40
 800f310:	2031      	movs	r0, #49	; 0x31
 800f312:	f002 fbff 	bl	8011b14 <st25r3916CheckReg>
 800f316:	4603      	mov	r3, r0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <rfalListenStart>:

#if RFAL_FEATURE_LISTEN_MODE

/*******************************************************************************/
ReturnCode rfalListenStart( uint32_t lmMask, const rfalLmConfPA *confA, const rfalLmConfPB *confB, const rfalLmConfPF *confF, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08c      	sub	sp, #48	; 0x30
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	607a      	str	r2, [r7, #4]
 800f328:	603b      	str	r3, [r7, #0]
    uint8_t*    pPTMem;
    uint8_t     autoResp;
    
    
    /* Check if RFAL is initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 800f32a:	4b4f      	ldr	r3, [pc, #316]	; (800f468 <rfalListenStart+0x14c>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d101      	bne.n	800f336 <rfalListenStart+0x1a>
    {
        return ERR_WRONG_STATE;
 800f332:	2321      	movs	r3, #33	; 0x21
 800f334:	e185      	b.n	800f642 <rfalListenStart+0x326>
    }
    
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 800f336:	4b4c      	ldr	r3, [pc, #304]	; (800f468 <rfalListenStart+0x14c>)
 800f338:	2200      	movs	r2, #0
 800f33a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.Lm.mdIrqs = ST25R3916_IRQ_MASK_NONE;
 800f33e:	4b4a      	ldr	r3, [pc, #296]	; (800f468 <rfalListenStart+0x14c>)
 800f340:	2200      	movs	r2, #0
 800f342:	661a      	str	r2, [r3, #96]	; 0x60
    gRFAL.Lm.mdReg  = (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_off);
 800f344:	4b48      	ldr	r3, [pc, #288]	; (800f468 <rfalListenStart+0x14c>)
 800f346:	2200      	movs	r2, #0
 800f348:	65da      	str	r2, [r3, #92]	; 0x5c
    
    
    /* By default disable all automatic responses */     
    autoResp = (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_rfu | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 800f34a:	230f      	movs	r3, #15
 800f34c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_NFCA) != 0U )
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f356:	2b00      	cmp	r3, #0
 800f358:	d06c      	beq.n	800f434 <rfalListenStart+0x118>
    {
        /* Check if the conf has been provided */
        if( confA == NULL )
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d101      	bne.n	800f364 <rfalListenStart+0x48>
        {
            return ERR_PARAM;
 800f360:	2307      	movs	r3, #7
 800f362:	e16e      	b.n	800f642 <rfalListenStart+0x326>
        }
        
        pPTMem = (uint8_t*)PTMem.PTMem_A;
 800f364:	f107 0310 	add.w	r3, r7, #16
 800f368:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /*******************************************************************************/
        /* Check and set supported NFCID Length */
        switch(confA->nfcidLen)
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	2b04      	cmp	r3, #4
 800f370:	d002      	beq.n	800f378 <rfalListenStart+0x5c>
 800f372:	2b07      	cmp	r3, #7
 800f374:	d006      	beq.n	800f384 <rfalListenStart+0x68>
 800f376:	e00b      	b.n	800f390 <rfalListenStart+0x74>
        {
            case RFAL_LM_NFCID_LEN_04:
                st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_id_mask, ST25R3916_REG_AUX_nfc_id_4bytes );
 800f378:	2200      	movs	r2, #0
 800f37a:	2130      	movs	r1, #48	; 0x30
 800f37c:	200a      	movs	r0, #10
 800f37e:	f002 fb45 	bl	8011a0c <st25r3916ChangeRegisterBits>
                break;
 800f382:	e007      	b.n	800f394 <rfalListenStart+0x78>
                
            case RFAL_LM_NFCID_LEN_07:
                st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_id_mask, ST25R3916_REG_AUX_nfc_id_7bytes );
 800f384:	2210      	movs	r2, #16
 800f386:	2130      	movs	r1, #48	; 0x30
 800f388:	200a      	movs	r0, #10
 800f38a:	f002 fb3f 	bl	8011a0c <st25r3916ChangeRegisterBits>
                break;
 800f38e:	e001      	b.n	800f394 <rfalListenStart+0x78>
                
            default:
                return ERR_PARAM;
 800f390:	2307      	movs	r3, #7
 800f392:	e156      	b.n	800f642 <rfalListenStart+0x326>
        }
        
        /*******************************************************************************/
        /* Set NFCID */
        ST_MEMCPY( pPTMem, confA->nfcid, RFAL_NFCID1_TRIPLE_LEN );
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	3301      	adds	r3, #1
 800f398:	220a      	movs	r2, #10
 800f39a:	4619      	mov	r1, r3
 800f39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f39e:	f002 febd 	bl	801211c <memcpy>
        pPTMem = &pPTMem[RFAL_NFCID1_TRIPLE_LEN];                  /* MISRA 18.4 */
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	330a      	adds	r3, #10
 800f3a6:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Set SENS_RES */
        ST_MEMCPY( pPTMem, confA->SENS_RES, RFAL_LM_SENS_RES_LEN );
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	330b      	adds	r3, #11
 800f3ac:	881b      	ldrh	r3, [r3, #0]
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	801a      	strh	r2, [r3, #0]
        pPTMem = &pPTMem[RFAL_LM_SENS_RES_LEN];             /* MISRA 18.4 */
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	3302      	adds	r3, #2
 800f3b8:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Set SEL_RES */
        *pPTMem++ = ( (confA->nfcidLen == RFAL_LM_NFCID_LEN_04) ? ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE ) : (confA->SEL_RES | RFAL_LM_NFCID_INCOMPLETE) );
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	d105      	bne.n	800f3ce <rfalListenStart+0xb2>
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	7b5b      	ldrb	r3, [r3, #13]
 800f3c6:	f023 0304 	bic.w	r3, r3, #4
 800f3ca:	b2da      	uxtb	r2, r3
 800f3cc:	e004      	b.n	800f3d8 <rfalListenStart+0xbc>
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	7b5b      	ldrb	r3, [r3, #13]
 800f3d2:	f043 0304 	orr.w	r3, r3, #4
 800f3d6:	b2da      	uxtb	r2, r3
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	1c59      	adds	r1, r3, #1
 800f3dc:	62b9      	str	r1, [r7, #40]	; 0x28
 800f3de:	701a      	strb	r2, [r3, #0]
        *pPTMem++ = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	7b5a      	ldrb	r2, [r3, #13]
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e6:	1c59      	adds	r1, r3, #1
 800f3e8:	62b9      	str	r1, [r7, #40]	; 0x28
 800f3ea:	f022 0204 	bic.w	r2, r2, #4
 800f3ee:	b2d2      	uxtb	r2, r2
 800f3f0:	701a      	strb	r2, [r3, #0]
        *pPTMem++ = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	7b5a      	ldrb	r2, [r3, #13]
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	1c59      	adds	r1, r3, #1
 800f3fa:	62b9      	str	r1, [r7, #40]	; 0x28
 800f3fc:	f022 0204 	bic.w	r2, r2, #4
 800f400:	b2d2      	uxtb	r2, r2
 800f402:	701a      	strb	r2, [r3, #0]
        
        /* Write into PTMem-A */
        st25r3916WritePTMem( PTMem.PTMem_A, ST25R3916_PTM_A_LEN );
 800f404:	f107 0310 	add.w	r3, r7, #16
 800f408:	210f      	movs	r1, #15
 800f40a:	4618      	mov	r0, r3
 800f40c:	f002 f9d3 	bl	80117b6 <st25r3916WritePTMem>
        
        
        /*******************************************************************************/
        /* Enable automatic responses for A */
        autoResp &= ~ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a;
 800f410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f414:	f023 0301 	bic.w	r3, r3, #1
 800f418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                
        /* Set Target mode, Bit Rate detection and Listen Mode for NFC-F */        
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off);
 800f41c:	4b12      	ldr	r3, [pc, #72]	; (800f468 <rfalListenStart+0x14c>)
 800f41e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f420:	f043 03c8 	orr.w	r3, r3, #200	; 0xc8
 800f424:	4a10      	ldr	r2, [pc, #64]	; (800f468 <rfalListenStart+0x14c>)
 800f426:	65d3      	str	r3, [r2, #92]	; 0x5c
        
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RXE_PTA);
 800f428:	4b0f      	ldr	r3, [pc, #60]	; (800f468 <rfalListenStart+0x14c>)
 800f42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f42c:	f043 5398 	orr.w	r3, r3, #318767104	; 0x13000000
 800f430:	4a0d      	ldr	r2, [pc, #52]	; (800f468 <rfalListenStart+0x14c>)
 800f432:	6613      	str	r3, [r2, #96]	; 0x60
    }
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_NFCB) != 0U )
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d006      	beq.n	800f44c <rfalListenStart+0x130>
    {
        /* Check if the conf has been provided */
        if( confB == NULL )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <rfalListenStart+0x12c>
        {
            return ERR_PARAM;
 800f444:	2307      	movs	r3, #7
 800f446:	e0fc      	b.n	800f642 <rfalListenStart+0x326>
        }
        
        return ERR_NOTSUPP;
 800f448:	2318      	movs	r3, #24
 800f44a:	e0fa      	b.n	800f642 <rfalListenStart+0x326>
    }
    
    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_NFCF) != 0U )
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f452:	2b00      	cmp	r3, #0
 800f454:	f000 808b 	beq.w	800f56e <rfalListenStart+0x252>
    {
        pPTMem = (uint8_t*)PTMem.PTMem_F;
 800f458:	f107 0310 	add.w	r3, r7, #16
 800f45c:	62bb      	str	r3, [r7, #40]	; 0x28
                       
        /* Check if the conf has been provided */
        if( confF == NULL )
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d103      	bne.n	800f46c <rfalListenStart+0x150>
        {
            return ERR_PARAM;
 800f464:	2307      	movs	r3, #7
 800f466:	e0ec      	b.n	800f642 <rfalListenStart+0x326>
 800f468:	2000155c 	.word	0x2000155c
        }
        
        /*******************************************************************************/
        /* Set System Code */
        ST_MEMCPY( pPTMem, confF->SC, RFAL_LM_SENSF_SC_LEN );
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	b29a      	uxth	r2, r3
 800f472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f474:	801a      	strh	r2, [r3, #0]
        pPTMem = &pPTMem[RFAL_LM_SENSF_SC_LEN];             /* MISRA 18.4 */
 800f476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f478:	3302      	adds	r3, #2
 800f47a:	62bb      	str	r3, [r7, #40]	; 0x28
                            
        /* Set SENSF_RES */
        ST_MEMCPY( pPTMem, confF->SENSF_RES, RFAL_LM_SENSF_RES_LEN );
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	3302      	adds	r3, #2
 800f480:	2213      	movs	r2, #19
 800f482:	4619      	mov	r1, r3
 800f484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f486:	f002 fe49 	bl	801211c <memcpy>

        /* Set RD bytes to 0x00 as ST25R3916 cannot support advances features */
        pPTMem[RFAL_LM_SENSF_RD0_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 46: 0x00                   */
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48c:	3311      	adds	r3, #17
 800f48e:	2200      	movs	r2, #0
 800f490:	701a      	strb	r2, [r3, #0]
        pPTMem[RFAL_LM_SENSF_RD1_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 47: No automatic bit rates */
 800f492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f494:	3312      	adds	r3, #18
 800f496:	2200      	movs	r2, #0
 800f498:	701a      	strb	r2, [r3, #0]
        
        pPTMem = &pPTMem[RFAL_LM_SENS_RES_LEN];             /* MISRA 18.4 */
 800f49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49c:	3302      	adds	r3, #2
 800f49e:	62bb      	str	r3, [r7, #40]	; 0x28
                               
        /* Write into PTMem-F */
        st25r3916WritePTMemF( PTMem.PTMem_F, ST25R3916_PTM_F_LEN );
 800f4a0:	f107 0310 	add.w	r3, r7, #16
 800f4a4:	2115      	movs	r1, #21
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f002 f9a7 	bl	80117fa <st25r3916WritePTMemF>
        
        
        /*******************************************************************************/
        /* Write 24 TSN "Random" Numbers at first initialization and let it rollover   */
        if( !gRFAL.Lm.iniFlag )
 800f4ac:	4b67      	ldr	r3, [pc, #412]	; (800f64c <rfalListenStart+0x330>)
 800f4ae:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f4b2:	f083 0301 	eor.w	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d044      	beq.n	800f546 <rfalListenStart+0x22a>
        {
            pPTMem = (uint8_t*)PTMem.TSN;
 800f4bc:	f107 0310 	add.w	r3, r7, #16
 800f4c0:	62bb      	str	r3, [r7, #40]	; 0x28
            
            *pPTMem++ = 0x12;
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	1c5a      	adds	r2, r3, #1
 800f4c6:	62ba      	str	r2, [r7, #40]	; 0x28
 800f4c8:	2212      	movs	r2, #18
 800f4ca:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x34;
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	62ba      	str	r2, [r7, #40]	; 0x28
 800f4d2:	2234      	movs	r2, #52	; 0x34
 800f4d4:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x56;
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	1c5a      	adds	r2, r3, #1
 800f4da:	62ba      	str	r2, [r7, #40]	; 0x28
 800f4dc:	2256      	movs	r2, #86	; 0x56
 800f4de:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x78;
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	1c5a      	adds	r2, r3, #1
 800f4e4:	62ba      	str	r2, [r7, #40]	; 0x28
 800f4e6:	2278      	movs	r2, #120	; 0x78
 800f4e8:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x9A;
 800f4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ec:	1c5a      	adds	r2, r3, #1
 800f4ee:	62ba      	str	r2, [r7, #40]	; 0x28
 800f4f0:	229a      	movs	r2, #154	; 0x9a
 800f4f2:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0xBC;
 800f4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f6:	1c5a      	adds	r2, r3, #1
 800f4f8:	62ba      	str	r2, [r7, #40]	; 0x28
 800f4fa:	22bc      	movs	r2, #188	; 0xbc
 800f4fc:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0xDF;
 800f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f500:	1c5a      	adds	r2, r3, #1
 800f502:	62ba      	str	r2, [r7, #40]	; 0x28
 800f504:	22df      	movs	r2, #223	; 0xdf
 800f506:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x21;
 800f508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50a:	1c5a      	adds	r2, r3, #1
 800f50c:	62ba      	str	r2, [r7, #40]	; 0x28
 800f50e:	2221      	movs	r2, #33	; 0x21
 800f510:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x43;
 800f512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f514:	1c5a      	adds	r2, r3, #1
 800f516:	62ba      	str	r2, [r7, #40]	; 0x28
 800f518:	2243      	movs	r2, #67	; 0x43
 800f51a:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x65;
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	1c5a      	adds	r2, r3, #1
 800f520:	62ba      	str	r2, [r7, #40]	; 0x28
 800f522:	2265      	movs	r2, #101	; 0x65
 800f524:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0x87;
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	1c5a      	adds	r2, r3, #1
 800f52a:	62ba      	str	r2, [r7, #40]	; 0x28
 800f52c:	2287      	movs	r2, #135	; 0x87
 800f52e:	701a      	strb	r2, [r3, #0]
            *pPTMem++ = 0xA9;
 800f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	62ba      	str	r2, [r7, #40]	; 0x28
 800f536:	22a9      	movs	r2, #169	; 0xa9
 800f538:	701a      	strb	r2, [r3, #0]
            
            /* Write into PTMem-TSN */
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 800f53a:	f107 0310 	add.w	r3, r7, #16
 800f53e:	210c      	movs	r1, #12
 800f540:	4618      	mov	r0, r3
 800f542:	f002 f97c 	bl	801183e <st25r3916WritePTMemTSN>
        }
        
        /*******************************************************************************/
        /* Enable automatic responses for F */
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r);
 800f546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f54a:	f023 0304 	bic.w	r3, r3, #4
 800f54e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        
        /* Set Target mode, Bit Rate detection and Listen Mode for NFC-F */
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_nfc_ar_off);
 800f552:	4b3e      	ldr	r3, [pc, #248]	; (800f64c <rfalListenStart+0x330>)
 800f554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f556:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800f55a:	4a3c      	ldr	r2, [pc, #240]	; (800f64c <rfalListenStart+0x330>)
 800f55c:	65d3      	str	r3, [r2, #92]	; 0x5c
        
        /* In CE NFC-F any data without error will be passed to FIFO, to support CUP */
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_RXE);
 800f55e:	4b3b      	ldr	r3, [pc, #236]	; (800f64c <rfalListenStart+0x330>)
 800f560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f562:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 800f566:	f043 0310 	orr.w	r3, r3, #16
 800f56a:	4a38      	ldr	r2, [pc, #224]	; (800f64c <rfalListenStart+0x330>)
 800f56c:	6613      	str	r3, [r2, #96]	; 0x60
    }
    

    /*******************************************************************************/
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f574:	2b00      	cmp	r3, #0
 800f576:	d021      	beq.n	800f5bc <rfalListenStart+0x2a0>
    {
        /* Enable Reception of P2P frames */
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 800f578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f57c:	f023 0308 	bic.w	r3, r3, #8
 800f580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        
        /* Set Target mode, Bit Rate detection and Automatic Response RF Collision Avoidance */
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 800f584:	4b31      	ldr	r3, [pc, #196]	; (800f64c <rfalListenStart+0x330>)
 800f586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f588:	f043 03e9 	orr.w	r3, r3, #233	; 0xe9
 800f58c:	4a2f      	ldr	r2, [pc, #188]	; (800f64c <rfalListenStart+0x330>)
 800f58e:	65d3      	str	r3, [r2, #92]	; 0x5c
        
        /* n * TRFW timing shall vary  Activity 2.1  3.4.1.1 */
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, gRFAL.timings.nTRFW);
 800f590:	4b2e      	ldr	r3, [pc, #184]	; (800f64c <rfalListenStart+0x330>)
 800f592:	7d1b      	ldrb	r3, [r3, #20]
 800f594:	461a      	mov	r2, r3
 800f596:	2103      	movs	r1, #3
 800f598:	200a      	movs	r0, #10
 800f59a:	f002 fa37 	bl	8011a0c <st25r3916ChangeRegisterBits>
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 800f59e:	4b2b      	ldr	r3, [pc, #172]	; (800f64c <rfalListenStart+0x330>)
 800f5a0:	7d1b      	ldrb	r3, [r3, #20]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	f003 0303 	and.w	r3, r3, #3
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	4b27      	ldr	r3, [pc, #156]	; (800f64c <rfalListenStart+0x330>)
 800f5ae:	751a      	strb	r2, [r3, #20]
        
        gRFAL.Lm.mdIrqs |= ( ST25R3916_IRQ_MASK_RXE );
 800f5b0:	4b26      	ldr	r3, [pc, #152]	; (800f64c <rfalListenStart+0x330>)
 800f5b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5b4:	f043 0310 	orr.w	r3, r3, #16
 800f5b8:	4a24      	ldr	r2, [pc, #144]	; (800f64c <rfalListenStart+0x330>)
 800f5ba:	6613      	str	r3, [r2, #96]	; 0x60
    }
    
    
    /* Check if one of the modes were selected */
    if( (gRFAL.Lm.mdReg & ST25R3916_REG_MODE_targ) == ST25R3916_REG_MODE_targ_targ )
 800f5bc:	4b23      	ldr	r3, [pc, #140]	; (800f64c <rfalListenStart+0x330>)
 800f5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d03b      	beq.n	800f640 <rfalListenStart+0x324>
    {
        gRFAL.state     = RFAL_STATE_LM;
 800f5c8:	4b20      	ldr	r3, [pc, #128]	; (800f64c <rfalListenStart+0x330>)
 800f5ca:	2204      	movs	r2, #4
 800f5cc:	701a      	strb	r2, [r3, #0]
        gRFAL.Lm.mdMask = lmMask;
 800f5ce:	4a1f      	ldr	r2, [pc, #124]	; (800f64c <rfalListenStart+0x330>)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6593      	str	r3, [r2, #88]	; 0x58
        
        gRFAL.Lm.rxBuf    = rxBuf;
 800f5d4:	4a1d      	ldr	r2, [pc, #116]	; (800f64c <rfalListenStart+0x330>)
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d8:	6693      	str	r3, [r2, #104]	; 0x68
        gRFAL.Lm.rxBufLen = rxBufLen;
 800f5da:	4a1c      	ldr	r2, [pc, #112]	; (800f64c <rfalListenStart+0x330>)
 800f5dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f5de:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
        gRFAL.Lm.rxLen    = rxLen;
 800f5e2:	4a1a      	ldr	r2, [pc, #104]	; (800f64c <rfalListenStart+0x330>)
 800f5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5e6:	6713      	str	r3, [r2, #112]	; 0x70
        *gRFAL.Lm.rxLen   = 0;
 800f5e8:	4b18      	ldr	r3, [pc, #96]	; (800f64c <rfalListenStart+0x330>)
 800f5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	801a      	strh	r2, [r3, #0]
        gRFAL.Lm.dataFlag = false;
 800f5f0:	4b16      	ldr	r3, [pc, #88]	; (800f64c <rfalListenStart+0x330>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        gRFAL.Lm.iniFlag  = true;
 800f5f8:	4b14      	ldr	r3, [pc, #80]	; (800f64c <rfalListenStart+0x330>)
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        
        /* Apply the Automatic Responses configuration */
        st25r3916ChangeRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_rfu | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p ), autoResp );
 800f600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f604:	461a      	mov	r2, r3
 800f606:	210f      	movs	r1, #15
 800f608:	2008      	movs	r0, #8
 800f60a:	f002 f9ff 	bl	8011a0c <st25r3916ChangeRegisterBits>
        
        /* Disable GPT trigger source */
        st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger );
 800f60e:	2200      	movs	r2, #0
 800f610:	21e0      	movs	r1, #224	; 0xe0
 800f612:	2012      	movs	r0, #18
 800f614:	f002 f9fa 	bl	8011a0c <st25r3916ChangeRegisterBits>
      
        /* On Bit Rate Detection Mode ST25R391x will filter incoming frames during MRT time starting on External Field On event, use 512/fc steps */
        st25r3916SetRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step_512 );
 800f618:	2108      	movs	r1, #8
 800f61a:	2012      	movs	r0, #18
 800f61c:	f002 f9c9 	bl	80119b2 <st25r3916SetRegisterBits>
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 800f620:	2102      	movs	r1, #2
 800f622:	200f      	movs	r0, #15
 800f624:	f002 f83e 	bl	80116a4 <st25r3916WriteRegister>
        
        
        /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
        st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800f628:	21e0      	movs	r1, #224	; 0xe0
 800f62a:	2005      	movs	r0, #5
 800f62c:	f002 f98a 	bl	8011944 <st25r3916ClrRegisterBits>
        
        /* External Field Detector enabled as Automatics on rfalInitialize() */
        
        /* Set Analog configurations for generic Listen mode */
        /* Not on SetState(POWER OFF) as otherwise would be applied on every Field Event */
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );        
 800f630:	2006      	movs	r0, #6
 800f632:	f7f4 f917 	bl	8003864 <rfalSetAnalogConfig>
        
        /* Initialize as POWER_OFF and set proper mode in RF Chip */
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 800f636:	2001      	movs	r0, #1
 800f638:	f000 fbcc 	bl	800fdd4 <rfalListenSetState>
    else
    {
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
    }
    
    return ERR_NONE;
 800f63c:	2300      	movs	r3, #0
 800f63e:	e000      	b.n	800f642 <rfalListenStart+0x326>
        return ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 800f640:	2305      	movs	r3, #5
}
 800f642:	4618      	mov	r0, r3
 800f644:	3730      	adds	r7, #48	; 0x30
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	2000155c 	.word	0x2000155c

0800f650 <rfalRunListenModeWorker>:



/*******************************************************************************/
static ReturnCode rfalRunListenModeWorker( void )
{
 800f650:	b590      	push	{r4, r7, lr}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
    volatile uint32_t irqs;
    uint8_t           tmp;
    
    if( gRFAL.state != RFAL_STATE_LM )
 800f656:	4bae      	ldr	r3, [pc, #696]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	2b04      	cmp	r3, #4
 800f65c:	d001      	beq.n	800f662 <rfalRunListenModeWorker+0x12>
    {
        return ERR_WRONG_STATE;
 800f65e:	2321      	movs	r3, #33	; 0x21
 800f660:	e2ee      	b.n	800fc40 <rfalRunListenModeWorker+0x5f0>
    }
    
    switch( gRFAL.Lm.state )
 800f662:	4bab      	ldr	r3, [pc, #684]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f664:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f668:	3b01      	subs	r3, #1
 800f66a:	2b0f      	cmp	r3, #15
 800f66c:	f200 82c6 	bhi.w	800fbfc <rfalRunListenModeWorker+0x5ac>
 800f670:	a201      	add	r2, pc, #4	; (adr r2, 800f678 <rfalRunListenModeWorker+0x28>)
 800f672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f676:	bf00      	nop
 800f678:	0800f6b9 	.word	0x0800f6b9
 800f67c:	0800f6df 	.word	0x0800f6df
 800f680:	0800f99d 	.word	0x0800f99d
 800f684:	0800fbfd 	.word	0x0800fbfd
 800f688:	0800f8b7 	.word	0x0800f8b7
 800f68c:	0800f9d5 	.word	0x0800f9d5
 800f690:	0800fc01 	.word	0x0800fc01
 800f694:	0800fc01 	.word	0x0800fc01
 800f698:	0800fc01 	.word	0x0800fc01
 800f69c:	0800fc01 	.word	0x0800fc01
 800f6a0:	0800fc01 	.word	0x0800fc01
 800f6a4:	0800fadb 	.word	0x0800fadb
 800f6a8:	0800fadb 	.word	0x0800fadb
 800f6ac:	0800fbb9 	.word	0x0800fbb9
 800f6b0:	0800f9d5 	.word	0x0800f9d5
 800f6b4:	0800fadb 	.word	0x0800fadb
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_POWER_OFF:
            
            irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EON ) );
 800f6b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f6bc:	f002 fbba 	bl	8011e34 <st25r3916GetInterrupt>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f000 829c 	beq.w	800fc04 <rfalRunListenModeWorker+0x5b4>
            {
              break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	f000 8298 	beq.w	800fc08 <rfalRunListenModeWorker+0x5b8>
            {
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 800f6d8:	2002      	movs	r0, #2
 800f6da:	f000 fb7b 	bl	800fdd4 <rfalListenSetState>
            
              
        /*******************************************************************************/
        case RFAL_LM_STATE_IDLE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 800f6de:	488d      	ldr	r0, [pc, #564]	; (800f914 <rfalRunListenModeWorker+0x2c4>)
 800f6e0:	f002 fba8 	bl	8011e34 <st25r3916GetInterrupt>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	607b      	str	r3, [r7, #4]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 828e 	beq.w	800fc0c <rfalRunListenModeWorker+0x5bc>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d011      	beq.n	800f71e <rfalRunListenModeWorker+0xce>
            {
                /* Retrieve detected bitrate */
                uint8_t    newBr;
                st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 800f6fa:	1cbb      	adds	r3, r7, #2
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	2024      	movs	r0, #36	; 0x24
 800f700:	f001 ff92 	bl	8011628 <st25r3916ReadRegister>
                newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 800f704:	78bb      	ldrb	r3, [r7, #2]
 800f706:	091b      	lsrs	r3, r3, #4
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	70bb      	strb	r3, [r7, #2]

                if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 800f70c:	78bb      	ldrb	r3, [r7, #2]
 800f70e:	2b02      	cmp	r3, #2
 800f710:	d901      	bls.n	800f716 <rfalRunListenModeWorker+0xc6>
                {
                    newBr = ST25R3916_REG_BIT_RATE_rxrate_424;
 800f712:	2302      	movs	r3, #2
 800f714:	70bb      	strb	r3, [r7, #2]
                }

                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 800f716:	78ba      	ldrb	r2, [r7, #2]
 800f718:	4b7d      	ldr	r3, [pc, #500]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f71a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            }
            
            if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f724:	2b00      	cmp	r3, #0
 800f726:	d008      	beq.n	800f73a <rfalRunListenModeWorker+0xea>
 800f728:	4b79      	ldr	r3, [pc, #484]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f72a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f72e:	2bff      	cmp	r3, #255	; 0xff
 800f730:	d003      	beq.n	800f73a <rfalRunListenModeWorker+0xea>
            {
                rfalListenSetState( RFAL_LM_STATE_READY_F );
 800f732:	2005      	movs	r0, #5
 800f734:	f000 fb4e 	bl	800fdd4 <rfalListenSetState>
 800f738:	e0bc      	b.n	800f8b4 <rfalRunListenModeWorker+0x264>
            }
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f003 0310 	and.w	r3, r3, #16
 800f740:	2b00      	cmp	r3, #0
 800f742:	f000 8082 	beq.w	800f84a <rfalRunListenModeWorker+0x1fa>
 800f746:	4b72      	ldr	r3, [pc, #456]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f748:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f74c:	2bff      	cmp	r3, #255	; 0xff
 800f74e:	d07c      	beq.n	800f84a <rfalRunListenModeWorker+0x1fa>
            {
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1 ) );
 800f750:	4871      	ldr	r0, [pc, #452]	; (800f918 <rfalRunListenModeWorker+0x2c8>)
 800f752:	f002 fb6f 	bl	8011e34 <st25r3916GetInterrupt>
 800f756:	4603      	mov	r3, r0
 800f758:	607b      	str	r3, [r7, #4]
                
                if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U))
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f760:	2b00      	cmp	r3, #0
 800f762:	d109      	bne.n	800f778 <rfalRunListenModeWorker+0x128>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d104      	bne.n	800f778 <rfalRunListenModeWorker+0x128>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00a      	beq.n	800f78e <rfalRunListenModeWorker+0x13e>
                {
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800f778:	20db      	movs	r0, #219	; 0xdb
 800f77a:	f002 f882 	bl	8011882 <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800f77e:	20d1      	movs	r0, #209	; 0xd1
 800f780:	f002 f87f 	bl	8011882 <st25r3916ExecuteCommand>
                    st25r3916TxOff();
 800f784:	2108      	movs	r1, #8
 800f786:	2002      	movs	r0, #2
 800f788:	f002 f8dc 	bl	8011944 <st25r3916ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 800f78c:	e257      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                }
                
                /* Retrieve received data */
                *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800f78e:	4b60      	ldr	r3, [pc, #384]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f790:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800f792:	f001 fd5c 	bl	801124e <st25r3916GetNumFIFOBytes>
 800f796:	4603      	mov	r3, r0
 800f798:	8023      	strh	r3, [r4, #0]
                st25r3916ReadFifo( gRFAL.Lm.rxBuf, MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 800f79a:	4b5d      	ldr	r3, [pc, #372]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f79c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800f79e:	4b5c      	ldr	r3, [pc, #368]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f7a0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800f7a4:	3307      	adds	r3, #7
 800f7a6:	08db      	lsrs	r3, r3, #3
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	4b59      	ldr	r3, [pc, #356]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	bf28      	it	cs
 800f7b4:	4613      	movcs	r3, r2
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	f001 ffe0 	bl	801177e <st25r3916ReadFifo>
                
                
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3916 Errata #TBD                            */
                /* In bitrate detection mode CRC is now checked for NFC-A frames               */
                if( (*gRFAL.Lm.rxLen > RFAL_CRC_LEN) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800f7be:	4b54      	ldr	r3, [pc, #336]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d91c      	bls.n	800f802 <rfalRunListenModeWorker+0x1b2>
 800f7c8:	4b51      	ldr	r3, [pc, #324]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f7ca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d117      	bne.n	800f802 <rfalRunListenModeWorker+0x1b2>
                {
                    if( rfalCrcCalculateCcitt( RFAL_ISO14443A_CRC_INTVAL, gRFAL.Lm.rxBuf, *gRFAL.Lm.rxLen ) != 0U )
 800f7d2:	4b4f      	ldr	r3, [pc, #316]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f7d4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800f7d6:	4b4e      	ldr	r3, [pc, #312]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	f246 3063 	movw	r0, #25443	; 0x6363
 800f7e2:	f7f4 f94d 	bl	8003a80 <rfalCrcCalculateCcitt>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00a      	beq.n	800f802 <rfalRunListenModeWorker+0x1b2>
                    {
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800f7ec:	20db      	movs	r0, #219	; 0xdb
 800f7ee:	f002 f848 	bl	8011882 <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800f7f2:	20d1      	movs	r0, #209	; 0xd1
 800f7f4:	f002 f845 	bl	8011882 <st25r3916ExecuteCommand>
                        st25r3916TxOff();
 800f7f8:	2108      	movs	r1, #8
 800f7fa:	2002      	movs	r0, #2
 800f7fc:	f002 f8a2 	bl	8011944 <st25r3916ClrRegisterBits>
                        break; /* A bad reception occurred, remain in same state */
 800f800:	e21d      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    }
                }
                /*******************************************************************************/
                
                /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 800f802:	4b43      	ldr	r3, [pc, #268]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f806:	8819      	ldrh	r1, [r3, #0]
 800f808:	4b41      	ldr	r3, [pc, #260]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	bf28      	it	cs
 800f812:	2302      	movcs	r3, #2
 800f814:	b29a      	uxth	r2, r3
 800f816:	4b3e      	ldr	r3, [pc, #248]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81a:	1a8a      	subs	r2, r1, r2
 800f81c:	b292      	uxth	r2, r2
 800f81e:	801a      	strh	r2, [r3, #0]
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 800f820:	4b3b      	ldr	r3, [pc, #236]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f824:	881a      	ldrh	r2, [r3, #0]
 800f826:	4b3a      	ldr	r3, [pc, #232]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f82a:	00d2      	lsls	r2, r2, #3
 800f82c:	b292      	uxth	r2, r2
 800f82e:	801a      	strh	r2, [r3, #0]
                gRFAL.Lm.dataFlag = true;
 800f830:	4b37      	ldr	r3, [pc, #220]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f832:	2201      	movs	r2, #1
 800f834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800f838:	4b35      	ldr	r3, [pc, #212]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f83a:	799b      	ldrb	r3, [r3, #6]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d039      	beq.n	800f8b4 <rfalRunListenModeWorker+0x264>
 800f840:	2140      	movs	r1, #64	; 0x40
 800f842:	2001      	movs	r0, #1
 800f844:	f002 f859 	bl	80118fa <st25r3916WriteTestRegister>
 800f848:	e034      	b.n	800f8b4 <rfalRunListenModeWorker+0x264>
            }
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f850:	2b00      	cmp	r3, #0
 800f852:	d01b      	beq.n	800f88c <rfalRunListenModeWorker+0x23c>
 800f854:	4b2e      	ldr	r3, [pc, #184]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f856:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f85a:	2bff      	cmp	r3, #255	; 0xff
 800f85c:	d016      	beq.n	800f88c <rfalRunListenModeWorker+0x23c>
            {
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800f85e:	4b2c      	ldr	r3, [pc, #176]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f866:	2b00      	cmp	r3, #0
 800f868:	d023      	beq.n	800f8b2 <rfalRunListenModeWorker+0x262>
 800f86a:	4b29      	ldr	r3, [pc, #164]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f86c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f870:	2b00      	cmp	r3, #0
 800f872:	d11e      	bne.n	800f8b2 <rfalRunListenModeWorker+0x262>
                {
                    st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 800f874:	1cfb      	adds	r3, r7, #3
 800f876:	4619      	mov	r1, r3
 800f878:	2021      	movs	r0, #33	; 0x21
 800f87a:	f001 fed5 	bl	8011628 <st25r3916ReadRegister>
                    if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_idle )
 800f87e:	78fb      	ldrb	r3, [r7, #3]
 800f880:	2b01      	cmp	r3, #1
 800f882:	d916      	bls.n	800f8b2 <rfalRunListenModeWorker+0x262>
                    {                            
                        rfalListenSetState( RFAL_LM_STATE_READY_A );
 800f884:	2003      	movs	r0, #3
 800f886:	f000 faa5 	bl	800fdd4 <rfalListenSetState>
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800f88a:	e012      	b.n	800f8b2 <rfalRunListenModeWorker+0x262>
                    }
                }
            }
            else if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f892:	2b00      	cmp	r3, #0
 800f894:	f000 81bc 	beq.w	800fc10 <rfalRunListenModeWorker+0x5c0>
 800f898:	4b1d      	ldr	r3, [pc, #116]	; (800f910 <rfalRunListenModeWorker+0x2c0>)
 800f89a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f89e:	f083 0301 	eor.w	r3, r3, #1
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f000 81b3 	beq.w	800fc10 <rfalRunListenModeWorker+0x5c0>
            {
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 800f8aa:	2001      	movs	r0, #1
 800f8ac:	f000 fa92 	bl	800fdd4 <rfalListenSetState>
            }
            else
            {
                /* MISRA 15.7 - Empty else */
            }
            break;
 800f8b0:	e1ae      	b.n	800fc10 <rfalRunListenModeWorker+0x5c0>
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800f8b2:	bf00      	nop
            break;
 800f8b4:	e1ac      	b.n	800fc10 <rfalRunListenModeWorker+0x5c0>
            
            /*******************************************************************************/
            case RFAL_LM_STATE_READY_F:
                
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 800f8b6:	4819      	ldr	r0, [pc, #100]	; (800f91c <rfalRunListenModeWorker+0x2cc>)
 800f8b8:	f002 fabc 	bl	8011e34 <st25r3916GetInterrupt>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f000 81a6 	beq.w	800fc14 <rfalRunListenModeWorker+0x5c4>
                {
                    break;  /* No interrupt to process */
                }

                if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f040 81a2 	bne.w	800fc18 <rfalRunListenModeWorker+0x5c8>
                {
                    break;
                }
                else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f003 0310 	and.w	r3, r3, #16
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d054      	beq.n	800f988 <rfalRunListenModeWorker+0x338>
                {
                    /* Retrieve the error flags/irqs */
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 800f8de:	f44f 0030 	mov.w	r0, #11534336	; 0xb00000
 800f8e2:	f002 faa7 	bl	8011e34 <st25r3916GetInterrupt>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	607b      	str	r3, [r7, #4]
                    
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U) )
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d104      	bne.n	800f902 <rfalRunListenModeWorker+0x2b2>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00e      	beq.n	800f920 <rfalRunListenModeWorker+0x2d0>
                    {
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800f902:	20db      	movs	r0, #219	; 0xdb
 800f904:	f001 ffbd 	bl	8011882 <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800f908:	20d1      	movs	r0, #209	; 0xd1
 800f90a:	f001 ffba 	bl	8011882 <st25r3916ExecuteCommand>
                        break; /* A bad reception occurred, remain in same state */
 800f90e:	e196      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
 800f910:	2000155c 	.word	0x2000155c
 800f914:	18000910 	.word	0x18000910
 800f918:	08f00810 	.word	0x08f00810
 800f91c:	08000810 	.word	0x08000810
                    }
                    
                    /* Retrieve received data */
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800f920:	4bb2      	ldr	r3, [pc, #712]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f922:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800f924:	f001 fc93 	bl	801124e <st25r3916GetNumFIFOBytes>
 800f928:	4603      	mov	r3, r0
 800f92a:	8023      	strh	r3, [r4, #0]
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 800f92c:	4baf      	ldr	r3, [pc, #700]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f92e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800f930:	4bae      	ldr	r3, [pc, #696]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f932:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800f936:	3307      	adds	r3, #7
 800f938:	08db      	lsrs	r3, r3, #3
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	4bab      	ldr	r3, [pc, #684]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f940:	881b      	ldrh	r3, [r3, #0]
 800f942:	4293      	cmp	r3, r2
 800f944:	bf28      	it	cs
 800f946:	4613      	movcs	r3, r2
 800f948:	b29b      	uxth	r3, r3
 800f94a:	4619      	mov	r1, r3
 800f94c:	f001 ff17 	bl	801177e <st25r3916ReadFifo>
                    
                    /* Check if the data we got has at least the CRC and remove it, otherwise leave at 0 */
                    *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 800f950:	4ba6      	ldr	r3, [pc, #664]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f954:	8819      	ldrh	r1, [r3, #0]
 800f956:	4ba5      	ldr	r3, [pc, #660]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f95a:	881b      	ldrh	r3, [r3, #0]
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	bf28      	it	cs
 800f960:	2302      	movcs	r3, #2
 800f962:	b29a      	uxth	r2, r3
 800f964:	4ba1      	ldr	r3, [pc, #644]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f968:	1a8a      	subs	r2, r1, r2
 800f96a:	b292      	uxth	r2, r2
 800f96c:	801a      	strh	r2, [r3, #0]
                    *gRFAL.Lm.rxLen  = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 800f96e:	4b9f      	ldr	r3, [pc, #636]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f972:	881a      	ldrh	r2, [r3, #0]
 800f974:	4b9d      	ldr	r3, [pc, #628]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f978:	00d2      	lsls	r2, r2, #3
 800f97a:	b292      	uxth	r2, r2
 800f97c:	801a      	strh	r2, [r3, #0]
                    gRFAL.Lm.dataFlag = true;
 800f97e:	4b9b      	ldr	r3, [pc, #620]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800f980:	2201      	movs	r2, #1
 800f982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 800f986:	e149      	b.n	800fc1c <rfalRunListenModeWorker+0x5cc>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 8144 	beq.w	800fc1c <rfalRunListenModeWorker+0x5cc>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 800f994:	2001      	movs	r0, #1
 800f996:	f000 fa1d 	bl	800fdd4 <rfalListenSetState>
                break;
 800f99a:	e13f      	b.n	800fc1c <rfalRunListenModeWorker+0x5cc>
                
            /*******************************************************************************/
            case RFAL_LM_STATE_READY_A:
                
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A  ) );
 800f99c:	4894      	ldr	r0, [pc, #592]	; (800fbf0 <rfalRunListenModeWorker+0x5a0>)
 800f99e:	f002 fa49 	bl	8011e34 <st25r3916GetInterrupt>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 8139 	beq.w	800fc20 <rfalRunListenModeWorker+0x5d0>
                {
                    break;  /* No interrupt to process */
                }
                
                if( (irqs & ST25R3916_IRQ_MASK_WU_A) != 0U )
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d003      	beq.n	800f9c0 <rfalRunListenModeWorker+0x370>
                {                    
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_A );
 800f9b8:	2006      	movs	r0, #6
 800f9ba:	f000 fa0b 	bl	800fdd4 <rfalListenSetState>
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 800f9be:	e131      	b.n	800fc24 <rfalRunListenModeWorker+0x5d4>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f000 812c 	beq.w	800fc24 <rfalRunListenModeWorker+0x5d4>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	f000 fa01 	bl	800fdd4 <rfalListenSetState>
                break;
 800f9d2:	e127      	b.n	800fc24 <rfalRunListenModeWorker+0x5d4>
            
            /*******************************************************************************/                
            case RFAL_LM_STATE_ACTIVE_A:
            case RFAL_LM_STATE_ACTIVE_Ax:
                
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 800f9d4:	f44f 6001 	mov.w	r0, #2064	; 0x810
 800f9d8:	f002 fa2c 	bl	8011e34 <st25r3916GetInterrupt>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 8120 	beq.w	800fc28 <rfalRunListenModeWorker+0x5d8>
                {                        
                    break;  /* No interrupt to process */
                }

                if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f003 0310 	and.w	r3, r3, #16
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d069      	beq.n	800fac6 <rfalRunListenModeWorker+0x476>
                {
                    /* Retrieve the error flags/irqs */
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 800f9f2:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 800f9f6:	f002 fa1d 	bl	8011e34 <st25r3916GetInterrupt>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	607b      	str	r3, [r7, #4]
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800fa02:	4b7a      	ldr	r3, [pc, #488]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa04:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800fa06:	f001 fc22 	bl	801124e <st25r3916GetNumFIFOBytes>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	8023      	strh	r3, [r4, #0]
                    
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d10e      	bne.n	800fa36 <rfalRunListenModeWorker+0x3e6>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d109      	bne.n	800fa36 <rfalRunListenModeWorker+0x3e6>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d104      	bne.n	800fa36 <rfalRunListenModeWorker+0x3e6>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 800fa2c:	4b6f      	ldr	r3, [pc, #444]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d820      	bhi.n	800fa78 <rfalRunListenModeWorker+0x428>
                    {
                        /* Clear rx context and FIFO */
                        *gRFAL.Lm.rxLen = 0;
 800fa36:	4b6d      	ldr	r3, [pc, #436]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	801a      	strh	r2, [r3, #0]
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800fa3e:	20db      	movs	r0, #219	; 0xdb
 800fa40:	f001 ff1f 	bl	8011882 <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800fa44:	20d1      	movs	r0, #209	; 0xd1
 800fa46:	f001 ff1c 	bl	8011882 <st25r3916ExecuteCommand>
                        
                        /* Check if we should go to IDLE or Sleep */ 
                        if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_Ax )
 800fa4a:	4b68      	ldr	r3, [pc, #416]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fa50:	2b0f      	cmp	r3, #15
 800fa52:	d10a      	bne.n	800fa6a <rfalRunListenModeWorker+0x41a>
                        {
                            rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gRFAL.Lm.rxBuf, gRFAL.Lm.rxBufLen, gRFAL.Lm.rxLen );
 800fa54:	4b65      	ldr	r3, [pc, #404]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa56:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800fa58:	4b64      	ldr	r3, [pc, #400]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa5a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 800fa5e:	4b63      	ldr	r3, [pc, #396]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa62:	200c      	movs	r0, #12
 800fa64:	f000 f922 	bl	800fcac <rfalListenSleepStart>
 800fa68:	e002      	b.n	800fa70 <rfalRunListenModeWorker+0x420>
                        }
                        else
                        {
                            rfalListenSetState( RFAL_LM_STATE_IDLE );
 800fa6a:	2002      	movs	r0, #2
 800fa6c:	f000 f9b2 	bl	800fdd4 <rfalListenSetState>
                        }
                        
                        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_RXE );
 800fa70:	2010      	movs	r0, #16
 800fa72:	f002 fa35 	bl	8011ee0 <st25r3916DisableInterrupts>
                        break;
 800fa76:	e0e2      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    }

                    /* Remove CRC from length */
                    *gRFAL.Lm.rxLen -= RFAL_CRC_LEN;
 800fa78:	4b5c      	ldr	r3, [pc, #368]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa7c:	881a      	ldrh	r2, [r3, #0]
 800fa7e:	4b5b      	ldr	r3, [pc, #364]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa82:	3a02      	subs	r2, #2
 800fa84:	b292      	uxth	r2, r2
 800fa86:	801a      	strh	r2, [r3, #0]
                    
                    /* Retrieve received data */
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );                    
 800fa88:	4b58      	ldr	r3, [pc, #352]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fa8c:	4b57      	ldr	r3, [pc, #348]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa8e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800fa92:	3307      	adds	r3, #7
 800fa94:	08db      	lsrs	r3, r3, #3
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	4b54      	ldr	r3, [pc, #336]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fa9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa9c:	881b      	ldrh	r3, [r3, #0]
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	bf28      	it	cs
 800faa2:	4613      	movcs	r3, r2
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	4619      	mov	r1, r3
 800faa8:	f001 fe69 	bl	801177e <st25r3916ReadFifo>
                    *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 800faac:	4b4f      	ldr	r3, [pc, #316]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800faae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fab0:	881a      	ldrh	r2, [r3, #0]
 800fab2:	4b4e      	ldr	r3, [pc, #312]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fab6:	00d2      	lsls	r2, r2, #3
 800fab8:	b292      	uxth	r2, r2
 800faba:	801a      	strh	r2, [r3, #0]
                    gRFAL.Lm.dataFlag = true;
 800fabc:	4b4b      	ldr	r3, [pc, #300]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 800fac4:	e0b2      	b.n	800fc2c <rfalRunListenModeWorker+0x5dc>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800facc:	2b00      	cmp	r3, #0
 800face:	f000 80ad 	beq.w	800fc2c <rfalRunListenModeWorker+0x5dc>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 800fad2:	2001      	movs	r0, #1
 800fad4:	f000 f97e 	bl	800fdd4 <rfalListenSetState>
                break;
 800fad8:	e0a8      	b.n	800fc2c <rfalRunListenModeWorker+0x5dc>
            /*******************************************************************************/
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
                
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 800fada:	4846      	ldr	r0, [pc, #280]	; (800fbf4 <rfalRunListenModeWorker+0x5a4>)
 800fadc:	f002 f9aa 	bl	8011e34 <st25r3916GetInterrupt>
 800fae0:	4603      	mov	r3, r0
 800fae2:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f000 80a2 	beq.w	800fc30 <rfalRunListenModeWorker+0x5e0>
                {
                    break;  /* No interrupt to process */
                }
                
                if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d011      	beq.n	800fb1a <rfalRunListenModeWorker+0x4ca>
                {
                    uint8_t    newBr;
                    /* Retrieve detected bitrate */
                    st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 800faf6:	1c7b      	adds	r3, r7, #1
 800faf8:	4619      	mov	r1, r3
 800fafa:	2024      	movs	r0, #36	; 0x24
 800fafc:	f001 fd94 	bl	8011628 <st25r3916ReadRegister>
                    newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 800fb00:	787b      	ldrb	r3, [r7, #1]
 800fb02:	091b      	lsrs	r3, r3, #4
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	707b      	strb	r3, [r7, #1]
    
                    if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 800fb08:	787b      	ldrb	r3, [r7, #1]
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	d901      	bls.n	800fb12 <rfalRunListenModeWorker+0x4c2>
                    {
                        newBr = ST25R3916_REG_BIT_RATE_rxrate_424;
 800fb0e:	2302      	movs	r3, #2
 800fb10:	707b      	strb	r3, [r7, #1]
                    }
    
                    gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 800fb12:	787a      	ldrb	r2, [r7, #1]
 800fb14:	4b35      	ldr	r3, [pc, #212]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fb16:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                }
                
                if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d008      	beq.n	800fb36 <rfalRunListenModeWorker+0x4e6>
 800fb24:	4b31      	ldr	r3, [pc, #196]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fb26:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fb2a:	2bff      	cmp	r3, #255	; 0xff
 800fb2c:	d003      	beq.n	800fb36 <rfalRunListenModeWorker+0x4e6>
                {
                    rfalListenSetState( RFAL_LM_STATE_READY_F );
 800fb2e:	2005      	movs	r0, #5
 800fb30:	f000 f950 	bl	800fdd4 <rfalListenSetState>
 800fb34:	e03f      	b.n	800fbb6 <rfalRunListenModeWorker+0x566>
                }
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f003 0310 	and.w	r3, r3, #16
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00f      	beq.n	800fb60 <rfalRunListenModeWorker+0x510>
 800fb40:	4b2a      	ldr	r3, [pc, #168]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fb42:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fb46:	2bff      	cmp	r3, #255	; 0xff
 800fb48:	d00a      	beq.n	800fb60 <rfalRunListenModeWorker+0x510>
                {
                    /* Clear rx context and FIFO */
                    *gRFAL.Lm.rxLen = 0;
 800fb4a:	4b28      	ldr	r3, [pc, #160]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb4e:	2200      	movs	r2, #0
 800fb50:	801a      	strh	r2, [r3, #0]
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800fb52:	20db      	movs	r0, #219	; 0xdb
 800fb54:	f001 fe95 	bl	8011882 <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800fb58:	20d1      	movs	r0, #209	; 0xd1
 800fb5a:	f001 fe92 	bl	8011882 <st25r3916ExecuteCommand>
 800fb5e:	e02a      	b.n	800fbb6 <rfalRunListenModeWorker+0x566>
                    
                    /* REMARK: In order to support CUP or proprietary frames, handling could be added here */
                }
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d01b      	beq.n	800fba2 <rfalRunListenModeWorker+0x552>
 800fb6a:	4b20      	ldr	r3, [pc, #128]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fb6c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fb70:	2bff      	cmp	r3, #255	; 0xff
 800fb72:	d016      	beq.n	800fba2 <rfalRunListenModeWorker+0x552>
                {
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800fb74:	4b1d      	ldr	r3, [pc, #116]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fb76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d019      	beq.n	800fbb4 <rfalRunListenModeWorker+0x564>
 800fb80:	4b1a      	ldr	r3, [pc, #104]	; (800fbec <rfalRunListenModeWorker+0x59c>)
 800fb82:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d114      	bne.n	800fbb4 <rfalRunListenModeWorker+0x564>
                    {
                        st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 800fb8a:	1cfb      	adds	r3, r7, #3
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	2021      	movs	r0, #33	; 0x21
 800fb90:	f001 fd4a 	bl	8011628 <st25r3916ReadRegister>
                        if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_halt )
 800fb94:	78fb      	ldrb	r3, [r7, #3]
 800fb96:	2b09      	cmp	r3, #9
 800fb98:	d90c      	bls.n	800fbb4 <rfalRunListenModeWorker+0x564>
                        {
                            rfalListenSetState( RFAL_LM_STATE_READY_Ax );
 800fb9a:	200e      	movs	r0, #14
 800fb9c:	f000 f91a 	bl	800fdd4 <rfalListenSetState>
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800fba0:	e008      	b.n	800fbb4 <rfalRunListenModeWorker+0x564>
                        }
                    }
                }
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d043      	beq.n	800fc34 <rfalRunListenModeWorker+0x5e4>
                {
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 800fbac:	2001      	movs	r0, #1
 800fbae:	f000 f911 	bl	800fdd4 <rfalListenSetState>
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 800fbb2:	e03f      	b.n	800fc34 <rfalRunListenModeWorker+0x5e4>
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800fbb4:	bf00      	nop
                break;
 800fbb6:	e03d      	b.n	800fc34 <rfalRunListenModeWorker+0x5e4>
            
            /*******************************************************************************/
            case RFAL_LM_STATE_READY_Ax:
                
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A_X  ) );
 800fbb8:	480f      	ldr	r0, [pc, #60]	; (800fbf8 <rfalRunListenModeWorker+0x5a8>)
 800fbba:	f002 f93b 	bl	8011e34 <st25r3916GetInterrupt>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	607b      	str	r3, [r7, #4]
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d037      	beq.n	800fc38 <rfalRunListenModeWorker+0x5e8>
                {
                    break;  /* No interrupt to process */
                }
                
                if( (irqs & ST25R3916_IRQ_MASK_WU_A_X) != 0U )
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d003      	beq.n	800fbda <rfalRunListenModeWorker+0x58a>
                {                    
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_Ax );
 800fbd2:	200f      	movs	r0, #15
 800fbd4:	f000 f8fe 	bl	800fdd4 <rfalListenSetState>
                }
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                break;
 800fbd8:	e030      	b.n	800fc3c <rfalRunListenModeWorker+0x5ec>
                else if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d02b      	beq.n	800fc3c <rfalRunListenModeWorker+0x5ec>
                    rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	f000 f8f5 	bl	800fdd4 <rfalListenSetState>
                break;
 800fbea:	e027      	b.n	800fc3c <rfalRunListenModeWorker+0x5ec>
 800fbec:	2000155c 	.word	0x2000155c
 800fbf0:	01000800 	.word	0x01000800
 800fbf4:	18000910 	.word	0x18000910
 800fbf8:	02000800 	.word	0x02000800
            case RFAL_LM_STATE_TARGET_A:
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 800fbfc:	2321      	movs	r3, #33	; 0x21
 800fbfe:	e01f      	b.n	800fc40 <rfalRunListenModeWorker+0x5f0>
                break;
 800fc00:	bf00      	nop
 800fc02:	e01c      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
              break;  /* No interrupt to process */
 800fc04:	bf00      	nop
 800fc06:	e01a      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                break;
 800fc08:	bf00      	nop
 800fc0a:	e018      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                break;  /* No interrupt to process */
 800fc0c:	bf00      	nop
 800fc0e:	e016      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
            break;
 800fc10:	bf00      	nop
 800fc12:	e014      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 800fc14:	bf00      	nop
 800fc16:	e012      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    break;
 800fc18:	bf00      	nop
 800fc1a:	e010      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                break;
 800fc1c:	bf00      	nop
 800fc1e:	e00e      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 800fc20:	bf00      	nop
 800fc22:	e00c      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                break;
 800fc24:	bf00      	nop
 800fc26:	e00a      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 800fc28:	bf00      	nop
 800fc2a:	e008      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                break;
 800fc2c:	bf00      	nop
 800fc2e:	e006      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 800fc30:	bf00      	nop
 800fc32:	e004      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                break;
 800fc34:	bf00      	nop
 800fc36:	e002      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                    break;  /* No interrupt to process */
 800fc38:	bf00      	nop
 800fc3a:	e000      	b.n	800fc3e <rfalRunListenModeWorker+0x5ee>
                break;
 800fc3c:	bf00      	nop
    }
    return ERR_NONE;
 800fc3e:	2300      	movs	r3, #0
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd90      	pop	{r4, r7, pc}

0800fc48 <rfalListenStop>:


/*******************************************************************************/
ReturnCode rfalListenStop( void )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	af00      	add	r7, sp, #0
    
    /* Check if RFAL is initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 800fc4c:	4b15      	ldr	r3, [pc, #84]	; (800fca4 <rfalListenStop+0x5c>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d101      	bne.n	800fc58 <rfalListenStop+0x10>
    {
        return ERR_WRONG_STATE;
 800fc54:	2321      	movs	r3, #33	; 0x21
 800fc56:	e022      	b.n	800fc9e <rfalListenStop+0x56>
    }
    
    gRFAL.Lm.state = RFAL_LM_STATE_NOT_INIT;
 800fc58:	4b12      	ldr	r3, [pc, #72]	; (800fca4 <rfalListenStop+0x5c>)
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    /*Check if Observation Mode was enabled and disable it on ST25R391x */
    rfalCheckDisableObsMode();
 800fc60:	4b10      	ldr	r3, [pc, #64]	; (800fca4 <rfalListenStop+0x5c>)
 800fc62:	799b      	ldrb	r3, [r3, #6]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d003      	beq.n	800fc70 <rfalListenStop+0x28>
 800fc68:	2140      	movs	r1, #64	; 0x40
 800fc6a:	2001      	movs	r0, #1
 800fc6c:	f001 fe45 	bl	80118fa <st25r3916WriteTestRegister>
	
    /* Re-Enable the Oscillator if not running */
    st25r3916OscOn();
 800fc70:	f001 f906 	bl	8010e80 <st25r3916OscOn>
    
    /* Disable Receiver and Transmitter */
    rfalFieldOff();
 800fc74:	f7fd fd96 	bl	800d7a4 <rfalFieldOff>
    
    /* Disable all automatic responses */
    st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_rfu | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p) );
 800fc78:	210f      	movs	r1, #15
 800fc7a:	2008      	movs	r0, #8
 800fc7c:	f001 fe99 	bl	80119b2 <st25r3916SetRegisterBits>
    
    /* As there's no Off mode, set default value: ISO14443A with automatic RF Collision Avoidance Off */
    st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_om_iso14443a | ST25R3916_REG_MODE_tr_am_ook | ST25R3916_REG_MODE_nfc_ar_off) );
 800fc80:	2108      	movs	r1, #8
 800fc82:	2003      	movs	r0, #3
 800fc84:	f001 fd0e 	bl	80116a4 <st25r3916WriteRegister>
    
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 | ST25R3916_IRQ_MASK_OSC ) );
 800fc88:	4807      	ldr	r0, [pc, #28]	; (800fca8 <rfalListenStop+0x60>)
 800fc8a:	f002 f929 	bl	8011ee0 <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 ) );
 800fc8e:	f04f 50f8 	mov.w	r0, #520093696	; 0x1f000000
 800fc92:	f002 f8cf 	bl	8011e34 <st25r3916GetInterrupt>
    
    /* Set Analog configurations for Listen Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 800fc96:	2007      	movs	r0, #7
 800fc98:	f7f3 fde4 	bl	8003864 <rfalSetAnalogConfig>
    
    return ERR_NONE;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	2000155c 	.word	0x2000155c
 800fca8:	1f000080 	.word	0x1f000080

0800fcac <rfalListenSleepStart>:

/*******************************************************************************/
ReturnCode rfalListenSleepStart( rfalLmState sleepSt, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rxLen )
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60b9      	str	r1, [r7, #8]
 800fcb4:	607b      	str	r3, [r7, #4]
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	73fb      	strb	r3, [r7, #15]
 800fcba:	4613      	mov	r3, r2
 800fcbc:	81bb      	strh	r3, [r7, #12]
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 800fcbe:	4b34      	ldr	r3, [pc, #208]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d101      	bne.n	800fcca <rfalListenSleepStart+0x1e>
    {
        return ERR_WRONG_STATE;
 800fcc6:	2321      	movs	r3, #33	; 0x21
 800fcc8:	e05d      	b.n	800fd86 <rfalListenSleepStart+0xda>
    }
    
    switch(sleepSt)
 800fcca:	7bfb      	ldrb	r3, [r7, #15]
 800fccc:	2b10      	cmp	r3, #16
 800fcce:	d013      	beq.n	800fcf8 <rfalListenSleepStart+0x4c>
 800fcd0:	2b10      	cmp	r3, #16
 800fcd2:	dc20      	bgt.n	800fd16 <rfalListenSleepStart+0x6a>
 800fcd4:	2b0c      	cmp	r3, #12
 800fcd6:	d002      	beq.n	800fcde <rfalListenSleepStart+0x32>
 800fcd8:	2b0d      	cmp	r3, #13
 800fcda:	d01a      	beq.n	800fd12 <rfalListenSleepStart+0x66>
 800fcdc:	e01b      	b.n	800fd16 <rfalListenSleepStart+0x6a>
    {
        /*******************************************************************************/
        case RFAL_LM_STATE_SLEEP_A:
            
            /* Enable automatic responses for A */
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 800fcde:	2101      	movs	r1, #1
 800fce0:	2008      	movs	r0, #8
 800fce2:	f001 fe2f 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Reset NFCA target */
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 800fce6:	20ce      	movs	r0, #206	; 0xce
 800fce8:	f001 fdcb 	bl	8011882 <st25r3916ExecuteCommand>
            
            
            /* Set Target mode, Bit Rate detection and Listen Mode for NFC-A */
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                     ,
 800fcec:	22c8      	movs	r2, #200	; 0xc8
 800fcee:	21fb      	movs	r1, #251	; 0xfb
 800fcf0:	2003      	movs	r0, #3
 800fcf2:	f001 fe8b 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                     (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask)                       ,
                                     (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off)  );
            break;
 800fcf6:	e010      	b.n	800fd1a <rfalListenSleepStart+0x6e>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_SLEEP_AF:
            
            /* Enable automatic responses for A + F */
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 800fcf8:	2105      	movs	r1, #5
 800fcfa:	2008      	movs	r0, #8
 800fcfc:	f001 fe22 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Reset NFCA target state */
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 800fd00:	20ce      	movs	r0, #206	; 0xce
 800fd02:	f001 fdbe 	bl	8011882 <st25r3916ExecuteCommand>
            
            /* Set Target mode, Bit Rate detection, Listen Mode for NFC-A and NFC-F */
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                                           ,
 800fd06:	22e8      	movs	r2, #232	; 0xe8
 800fd08:	21fb      	movs	r1, #251	; 0xfb
 800fd0a:	2003      	movs	r0, #3
 800fd0c:	f001 fe7e 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                     (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask)                                             ,
                                     (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off)  );
            break;
 800fd10:	e003      	b.n	800fd1a <rfalListenSleepStart+0x6e>
            
        /*******************************************************************************/
        case RFAL_LM_STATE_SLEEP_B:
            /* REMARK: Support for CE-B would be added here  */
            return ERR_NOT_IMPLEMENTED;                    
 800fd12:	230f      	movs	r3, #15
 800fd14:	e037      	b.n	800fd86 <rfalListenSleepStart+0xda>
            
        /*******************************************************************************/
        default:
            return ERR_PARAM;
 800fd16:	2307      	movs	r3, #7
 800fd18:	e035      	b.n	800fd86 <rfalListenSleepStart+0xda>
            
    }
    
    
    /* Ensure that the  NFCIP1 mode is disabled */
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 800fd1a:	2120      	movs	r1, #32
 800fd1c:	2005      	movs	r0, #5
 800fd1e:	f001 fe11 	bl	8011944 <st25r3916ClrRegisterBits>
    
    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800fd22:	20d1      	movs	r0, #209	; 0xd1
 800fd24:	f001 fdad 	bl	8011882 <st25r3916ExecuteCommand>
    
    
    /* Clear and enable required IRQs */
    st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | 
                                     ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_EOF  | gRFAL.Lm.mdIrqs ) );
 800fd28:	4b19      	ldr	r3, [pc, #100]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | 
 800fd2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fd30:	f443 53c9 	orr.w	r3, r3, #6432	; 0x1920
 800fd34:	4618      	mov	r0, r3
 800fd36:	f002 f8b9 	bl	8011eac <st25r3916ClearAndEnableInterrupts>
    
    /* Check whether the field was turn off right after the Sleep request */
    if( !rfalIsExtFieldOn() )
 800fd3a:	f7ff fae5 	bl	800f308 <rfalIsExtFieldOn>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	f083 0301 	eor.w	r3, r3, #1
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d003      	beq.n	800fd52 <rfalListenSleepStart+0xa6>
    {
        /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, RFAL_LM_STATE_NOT_INIT );*/
        
        rfalListenStop();
 800fd4a:	f7ff ff7d 	bl	800fc48 <rfalListenStop>
        return ERR_LINK_LOSS;
 800fd4e:	2325      	movs	r3, #37	; 0x25
 800fd50:	e019      	b.n	800fd86 <rfalListenSleepStart+0xda>
    }
    
    /*rfalLogD( "RFAL: curState: %02X newState: %02X \r\n", gRFAL.Lm.state, sleepSt );*/

    /* Set the new Sleep State*/
    gRFAL.Lm.state    = sleepSt;
 800fd52:	4a0f      	ldr	r2, [pc, #60]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    gRFAL.state       = RFAL_STATE_LM;
 800fd5a:	4b0d      	ldr	r3, [pc, #52]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd5c:	2204      	movs	r2, #4
 800fd5e:	701a      	strb	r2, [r3, #0]
    
    gRFAL.Lm.rxBuf    = rxBuf;
 800fd60:	4a0b      	ldr	r2, [pc, #44]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	6693      	str	r3, [r2, #104]	; 0x68
    gRFAL.Lm.rxBufLen = rxBufLen;
 800fd66:	4a0a      	ldr	r2, [pc, #40]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd68:	89bb      	ldrh	r3, [r7, #12]
 800fd6a:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
    gRFAL.Lm.rxLen    = rxLen;
 800fd6e:	4a08      	ldr	r2, [pc, #32]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6713      	str	r3, [r2, #112]	; 0x70
    *gRFAL.Lm.rxLen   = 0;
 800fd74:	4b06      	ldr	r3, [pc, #24]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd78:	2200      	movs	r2, #0
 800fd7a:	801a      	strh	r2, [r3, #0]
    gRFAL.Lm.dataFlag = false;
 800fd7c:	4b04      	ldr	r3, [pc, #16]	; (800fd90 <rfalListenSleepStart+0xe4>)
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
             
    return ERR_NONE;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	2000155c 	.word	0x2000155c

0800fd94 <rfalListenGetState>:

/*******************************************************************************/
rfalLmState rfalListenGetState( bool *dataFlag, rfalBitRate *lastBR )
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
    /* Allow state retrieval even if gRFAL.state != RFAL_STATE_LM so  *
     * that this Lm state can be used by caller after activation      */

    if( lastBR != NULL )
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d004      	beq.n	800fdae <rfalListenGetState+0x1a>
    {
        *lastBR = gRFAL.Lm.brDetected;
 800fda4:	4b0a      	ldr	r3, [pc, #40]	; (800fdd0 <rfalListenGetState+0x3c>)
 800fda6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	701a      	strb	r2, [r3, #0]
    }
    
    if( dataFlag != NULL )
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d004      	beq.n	800fdbe <rfalListenGetState+0x2a>
    {
        *dataFlag = gRFAL.Lm.dataFlag;
 800fdb4:	4b06      	ldr	r3, [pc, #24]	; (800fdd0 <rfalListenGetState+0x3c>)
 800fdb6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	701a      	strb	r2, [r3, #0]
    }
    
    return gRFAL.Lm.state;
 800fdbe:	4b04      	ldr	r3, [pc, #16]	; (800fdd0 <rfalListenGetState+0x3c>)
 800fdc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bc80      	pop	{r7}
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	2000155c 	.word	0x2000155c

0800fdd4 <rfalListenSetState>:


/*******************************************************************************/
ReturnCode rfalListenSetState( rfalLmState newSt )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	4603      	mov	r3, r0
 800fddc:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    rfalLmState newState;
    bool        reSetState;

    /* Check if RFAL is initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 800fdde:	4bba      	ldr	r3, [pc, #744]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d101      	bne.n	800fdea <rfalListenSetState+0x16>
    {
        return ERR_WRONG_STATE;
 800fde6:	2321      	movs	r3, #33	; 0x21
 800fde8:	e16a      	b.n	80100c0 <rfalListenSetState+0x2ec>
    }
    
    /* SetState clears the Data flag */
    gRFAL.Lm.dataFlag = false;
 800fdea:	4bb7      	ldr	r3, [pc, #732]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    newState          = newSt;
 800fdf2:	79fb      	ldrb	r3, [r7, #7]
 800fdf4:	737b      	strb	r3, [r7, #13]
    ret               = ERR_NONE;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	81fb      	strh	r3, [r7, #14]

    do{
        reSetState = false;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	733b      	strb	r3, [r7, #12]

        /*******************************************************************************/
        switch( newState )
 800fdfe:	7b7b      	ldrb	r3, [r7, #13]
 800fe00:	3b01      	subs	r3, #1
 800fe02:	2b0f      	cmp	r3, #15
 800fe04:	f200 814e 	bhi.w	80100a4 <rfalListenSetState+0x2d0>
 800fe08:	a201      	add	r2, pc, #4	; (adr r2, 800fe10 <rfalListenSetState+0x3c>)
 800fe0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0e:	bf00      	nop
 800fe10:	0800fe51 	.word	0x0800fe51
 800fe14:	0800ff03 	.word	0x0800ff03
 800fe18:	08010043 	.word	0x08010043
 800fe1c:	080100a5 	.word	0x080100a5
 800fe20:	0800ffd3 	.word	0x0800ffd3
 800fe24:	0801007f 	.word	0x0801007f
 800fe28:	080100a9 	.word	0x080100a9
 800fe2c:	080100a9 	.word	0x080100a9
 800fe30:	08010029 	.word	0x08010029
 800fe34:	080100a9 	.word	0x080100a9
 800fe38:	08010097 	.word	0x08010097
 800fe3c:	080100a1 	.word	0x080100a1
 800fe40:	080100a1 	.word	0x080100a1
 800fe44:	08010043 	.word	0x08010043
 800fe48:	0801007f 	.word	0x0801007f
 800fe4c:	080100a1 	.word	0x080100a1
        {
            /*******************************************************************************/
            case RFAL_LM_STATE_POWER_OFF:
                
                /* Enable the receiver and reset logic */
                st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_rx_en );
 800fe50:	2140      	movs	r1, #64	; 0x40
 800fe52:	2002      	movs	r0, #2
 800fe54:	f001 fdad 	bl	80119b2 <st25r3916SetRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800fe58:	20c2      	movs	r0, #194	; 0xc2
 800fe5a:	f001 fd12 	bl	8011882 <st25r3916ExecuteCommand>
                
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U )
 800fe5e:	4b9a      	ldr	r3, [pc, #616]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fe60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d006      	beq.n	800fe78 <rfalListenSetState+0xa4>
                {
                    /* Enable automatic responses for A */
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a );
 800fe6a:	2101      	movs	r1, #1
 800fe6c:	2008      	movs	r0, #8
 800fe6e:	f001 fd69 	bl	8011944 <st25r3916ClrRegisterBits>
                    
                    /* Prepares the NFCIP-1 Passive target logic to wait in the Sense/Idle state */
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 800fe72:	20cd      	movs	r0, #205	; 0xcd
 800fe74:	f001 fd05 	bl	8011882 <st25r3916ExecuteCommand>
                }
                
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCF) != 0U )
 800fe78:	4b93      	ldr	r3, [pc, #588]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fe7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d003      	beq.n	800fe8c <rfalListenSetState+0xb8>
                {
                    /* Enable automatic responses for F */
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 800fe84:	2104      	movs	r1, #4
 800fe86:	2008      	movs	r0, #8
 800fe88:	f001 fd5c 	bl	8011944 <st25r3916ClrRegisterBits>
                }
                
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 800fe8c:	4b8e      	ldr	r3, [pc, #568]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fe8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d008      	beq.n	800feaa <rfalListenSetState+0xd6>
                {
                    /* Ensure automatic response RF Collision Avoidance is back to only after Rx */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 800fe98:	2201      	movs	r2, #1
 800fe9a:	2103      	movs	r1, #3
 800fe9c:	2003      	movs	r0, #3
 800fe9e:	f001 fdb5 	bl	8011a0c <st25r3916ChangeRegisterBits>
                    
                    /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                    st25r3916TxOff();
 800fea2:	2108      	movs	r1, #8
 800fea4:	2002      	movs	r0, #2
 800fea6:	f001 fd4d 	bl	8011944 <st25r3916ClrRegisterBits>
                }
                
                /*******************************************************************************/
                /* Ensure that the  NFCIP1 mode is disabled */
                st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 800feaa:	2120      	movs	r1, #32
 800feac:	2005      	movs	r0, #5
 800feae:	f001 fd49 	bl	8011944 <st25r3916ClrRegisterBits>
                
                
                /*******************************************************************************/
                /* Clear and enable required IRQs */
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800feb2:	f04f 30ff 	mov.w	r0, #4294967295
 800feb6:	f002 f813 	bl	8011ee0 <st25r3916DisableInterrupts>
                
                st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_OSC |
                                                    ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_EOF  | gRFAL.Lm.mdIrqs ) );
 800feba:	4b83      	ldr	r3, [pc, #524]	; (80100c8 <rfalListenSetState+0x2f4>)
 800febc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_OSC |
 800febe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fec2:	f443 53cd 	orr.w	r3, r3, #6560	; 0x19a0
 800fec6:	4618      	mov	r0, r3
 800fec8:	f001 fff0 	bl	8011eac <st25r3916ClearAndEnableInterrupts>
                
                /*******************************************************************************/
                /* Clear the bitRate previously detected */
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 800fecc:	4b7e      	ldr	r3, [pc, #504]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fece:	22ff      	movs	r2, #255	; 0xff
 800fed0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                
                
                /*******************************************************************************/
                /* Apply the initial mode */
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 800fed4:	4b7c      	ldr	r3, [pc, #496]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	461a      	mov	r2, r3
 800fedc:	21fb      	movs	r1, #251	; 0xfb
 800fede:	2003      	movs	r0, #3
 800fee0:	f001 fd94 	bl	8011a0c <st25r3916ChangeRegisterBits>
                
                /*******************************************************************************/
                /* Check if external Field is already On */
                if( rfalIsExtFieldOn() )
 800fee4:	f7ff fa10 	bl	800f308 <rfalIsExtFieldOn>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d004      	beq.n	800fef8 <rfalListenSetState+0x124>
                {
                    reSetState = true;
 800feee:	2301      	movs	r3, #1
 800fef0:	733b      	strb	r3, [r7, #12]
                    newState   = RFAL_LM_STATE_IDLE;                         /* Set IDLE state */
 800fef2:	2302      	movs	r3, #2
 800fef4:	737b      	strb	r3, [r7, #13]
                else
                {
                    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_tx_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_en) );
                }
            #endif
                break;
 800fef6:	e0da      	b.n	80100ae <rfalListenSetState+0x2da>
                    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_tx_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_en) );
 800fef8:	21c8      	movs	r1, #200	; 0xc8
 800fefa:	2002      	movs	r0, #2
 800fefc:	f001 fd22 	bl	8011944 <st25r3916ClrRegisterBits>
                break;
 800ff00:	e0d5      	b.n	80100ae <rfalListenSetState+0x2da>
            /*******************************************************************************/
            case RFAL_LM_STATE_IDLE:
            
                /*******************************************************************************/
                /* Check if device is coming from Low Power bit rate detection */
                if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en )  )
 800ff02:	2280      	movs	r2, #128	; 0x80
 800ff04:	2180      	movs	r1, #128	; 0x80
 800ff06:	2002      	movs	r0, #2
 800ff08:	f001 fe04 	bl	8011b14 <st25r3916CheckReg>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f083 0301 	eor.w	r3, r3, #1
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d018      	beq.n	800ff4a <rfalListenSetState+0x176>
                {
                    /* Exit Low Power mode and confirm the temporarily enable */
                    st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en) );
 800ff18:	21c0      	movs	r1, #192	; 0xc0
 800ff1a:	2002      	movs	r0, #2
 800ff1c:	f001 fd49 	bl	80119b2 <st25r3916SetRegisterBits>
                
                    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok )  )
 800ff20:	2210      	movs	r2, #16
 800ff22:	2110      	movs	r1, #16
 800ff24:	2031      	movs	r0, #49	; 0x31
 800ff26:	f001 fdf5 	bl	8011b14 <st25r3916CheckReg>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	f083 0301 	eor.w	r3, r3, #1
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00c      	beq.n	800ff50 <rfalListenSetState+0x17c>
                    {
                        /* Wait for Oscilator ready */
                        if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE ) == 0U )
 800ff36:	210a      	movs	r1, #10
 800ff38:	2080      	movs	r0, #128	; 0x80
 800ff3a:	f001 ff27 	bl	8011d8c <st25r3916WaitForInterruptsTimed>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d105      	bne.n	800ff50 <rfalListenSetState+0x17c>
                        {
                            ret = ERR_IO;
 800ff44:	2303      	movs	r3, #3
 800ff46:	81fb      	strh	r3, [r7, #14]
                            break;
 800ff48:	e0b1      	b.n	80100ae <rfalListenSetState+0x2da>
                        }
                    }
                }
                else
                {
                    st25r3916GetInterrupt(ST25R3916_IRQ_MASK_OSC);
 800ff4a:	2080      	movs	r0, #128	; 0x80
 800ff4c:	f001 ff72 	bl	8011e34 <st25r3916GetInterrupt>
                 *      Avoidance keeping our field On; upon a Protocol error upper layer sets 
                 *      again the state to IDLE to clear dataFlag and wait for next data.
                 *      
                 * Ensure that when upper layer calls SetState(IDLE), it restores initial 
                 * configuration and that check whether an external Field is still present     */
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 800ff50:	4b5d      	ldr	r3, [pc, #372]	; (80100c8 <rfalListenSetState+0x2f4>)
 800ff52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d01a      	beq.n	800ff92 <rfalListenSetState+0x1be>
                {
                    /* Ensure nfc_ar is reseted and back to only after Rx */
                    st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800ff5c:	20c2      	movs	r0, #194	; 0xc2
 800ff5e:	f001 fc90 	bl	8011882 <st25r3916ExecuteCommand>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 800ff62:	2201      	movs	r2, #1
 800ff64:	2103      	movs	r1, #3
 800ff66:	2003      	movs	r0, #3
 800ff68:	f001 fd50 	bl	8011a0c <st25r3916ChangeRegisterBits>
                    
                    /* Ensure that our field is Off, as automatic response RF Collision Avoidance may have been triggered */
                    st25r3916TxOff();
 800ff6c:	2108      	movs	r1, #8
 800ff6e:	2002      	movs	r0, #2
 800ff70:	f001 fce8 	bl	8011944 <st25r3916ClrRegisterBits>
                    
                    /* If external Field is no longer detected go back to POWER_OFF */
                    if( !st25r3916IsExtFieldOn() )
 800ff74:	2240      	movs	r2, #64	; 0x40
 800ff76:	2140      	movs	r1, #64	; 0x40
 800ff78:	2031      	movs	r0, #49	; 0x31
 800ff7a:	f001 fdcb 	bl	8011b14 <st25r3916CheckReg>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	f083 0301 	eor.w	r3, r3, #1
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d003      	beq.n	800ff92 <rfalListenSetState+0x1be>
                    {
                        reSetState = true;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	733b      	strb	r3, [r7, #12]
                        newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 800ff8e:	2301      	movs	r3, #1
 800ff90:	737b      	strb	r3, [r7, #13]
                    }
                }
                /*******************************************************************************/
                
                /* If we are in ACTIVE_A, reEnable Listen for A before going to IDLE, otherwise do nothing */
                if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_A )
 800ff92:	4b4d      	ldr	r3, [pc, #308]	; (80100c8 <rfalListenSetState+0x2f4>)
 800ff94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ff98:	2b06      	cmp	r3, #6
 800ff9a:	d106      	bne.n	800ffaa <rfalListenSetState+0x1d6>
                {
                    /* Enable automatic responses for A and Reset NFCA target state */
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	2008      	movs	r0, #8
 800ffa0:	f001 fcd0 	bl	8011944 <st25r3916ClrRegisterBits>
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 800ffa4:	20cd      	movs	r0, #205	; 0xcd
 800ffa6:	f001 fc6c 	bl	8011882 <st25r3916ExecuteCommand>
                }
                
                /* ReEnable the receiver */
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800ffaa:	20db      	movs	r0, #219	; 0xdb
 800ffac:	f001 fc69 	bl	8011882 <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800ffb0:	20d1      	movs	r0, #209	; 0xd1
 800ffb2:	f001 fc66 	bl	8011882 <st25r3916ExecuteCommand>
    			
                /*******************************************************************************/
                /*Check if Observation Mode is enabled and set it on ST25R391x */
                rfalCheckEnableObsModeRx();
 800ffb6:	4b44      	ldr	r3, [pc, #272]	; (80100c8 <rfalListenSetState+0x2f4>)
 800ffb8:	799b      	ldrb	r3, [r3, #6]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d076      	beq.n	80100ac <rfalListenSetState+0x2d8>
 800ffbe:	4b42      	ldr	r3, [pc, #264]	; (80100c8 <rfalListenSetState+0x2f4>)
 800ffc0:	799b      	ldrb	r3, [r3, #6]
 800ffc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	4619      	mov	r1, r3
 800ffca:	2001      	movs	r0, #1
 800ffcc:	f001 fc95 	bl	80118fa <st25r3916WriteTestRegister>
                break;
 800ffd0:	e06c      	b.n	80100ac <rfalListenSetState+0x2d8>
                /* If we're coming from BitRate detection mode, the Bit Rate Definition reg 
                 * still has the last bit rate used.
                 * If a frame is received between setting the mode to Listen NFCA and 
                 * setting Bit Rate Definition reg, it will raise a framing error.
                 * Set the bitrate immediately, and then the normal SetMode procedure          */
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 800ffd2:	4b3d      	ldr	r3, [pc, #244]	; (80100c8 <rfalListenSetState+0x2f4>)
 800ffd4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800ffd8:	4a3b      	ldr	r2, [pc, #236]	; (80100c8 <rfalListenSetState+0x2f4>)
 800ffda:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 800ffde:	4611      	mov	r1, r2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f001 f85e 	bl	80110a2 <st25r3916SetBitrate>
                /*******************************************************************************/
                
                /* Disable automatic responses for NFC-A */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 800ffe6:	2101      	movs	r1, #1
 800ffe8:	2008      	movs	r0, #8
 800ffea:	f001 fce2 	bl	80119b2 <st25r3916SetRegisterBits>
                
                /* Set Mode NFC-F only */
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 800ffee:	4b36      	ldr	r3, [pc, #216]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fff0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fff4:	4a34      	ldr	r2, [pc, #208]	; (80100c8 <rfalListenSetState+0x2f4>)
 800fff6:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 800fffa:	4619      	mov	r1, r3
 800fffc:	200c      	movs	r0, #12
 800fffe:	f7fc fe9b 	bl	800cd38 <rfalSetMode>
 8010002:	4603      	mov	r3, r0
 8010004:	81fb      	strh	r3, [r7, #14]
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 8010006:	4b30      	ldr	r3, [pc, #192]	; (80100c8 <rfalListenSetState+0x2f4>)
 8010008:	2204      	movs	r2, #4
 801000a:	701a      	strb	r2, [r3, #0]
                
                /* ReEnable the receiver */
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 801000c:	20db      	movs	r0, #219	; 0xdb
 801000e:	f001 fc38 	bl	8011882 <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8010012:	20d1      	movs	r0, #209	; 0xd1
 8010014:	f001 fc35 	bl	8011882 <st25r3916ExecuteCommand>
                
                /* Clear any previous transmission errors (if Reader polled for other/unsupported technologies) */
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8010018:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 801001c:	f001 ff0a 	bl	8011e34 <st25r3916GetInterrupt>
                
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );     /* Start looking for any incoming data */
 8010020:	2010      	movs	r0, #16
 8010022:	f001 ff51 	bl	8011ec8 <st25r3916EnableInterrupts>
                break;
 8010026:	e042      	b.n	80100ae <rfalListenSetState+0x2da>
                
            /*******************************************************************************/
            case RFAL_LM_STATE_CARDEMU_3:
                
                /* Set Listen NFCF mode  */
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8010028:	4b27      	ldr	r3, [pc, #156]	; (80100c8 <rfalListenSetState+0x2f4>)
 801002a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801002e:	4a26      	ldr	r2, [pc, #152]	; (80100c8 <rfalListenSetState+0x2f4>)
 8010030:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8010034:	4619      	mov	r1, r3
 8010036:	200c      	movs	r0, #12
 8010038:	f7fc fe7e 	bl	800cd38 <rfalSetMode>
 801003c:	4603      	mov	r3, r0
 801003e:	81fb      	strh	r3, [r7, #14]
                break;
 8010040:	e035      	b.n	80100ae <rfalListenSetState+0x2da>
                /* If we're coming from BitRate detection mode, the Bit Rate Definition reg 
                 * still has the last bit rate used.
                 * If a frame is received between setting the mode to Listen NFCA and 
                 * setting Bit Rate Definition reg, it will raise a framing error.
                 * Set the bitrate immediately, and then the normal SetMode procedure          */
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 8010042:	4b21      	ldr	r3, [pc, #132]	; (80100c8 <rfalListenSetState+0x2f4>)
 8010044:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8010048:	4a1f      	ldr	r2, [pc, #124]	; (80100c8 <rfalListenSetState+0x2f4>)
 801004a:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 801004e:	4611      	mov	r1, r2
 8010050:	4618      	mov	r0, r3
 8010052:	f001 f826 	bl	80110a2 <st25r3916SetBitrate>
                /*******************************************************************************/
                
                /* Disable automatic responses for NFC-F */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 8010056:	2104      	movs	r1, #4
 8010058:	2008      	movs	r0, #8
 801005a:	f001 fcaa 	bl	80119b2 <st25r3916SetRegisterBits>
                
                /* Set Mode NFC-A only */
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCA, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 801005e:	4b1a      	ldr	r3, [pc, #104]	; (80100c8 <rfalListenSetState+0x2f4>)
 8010060:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8010064:	4a18      	ldr	r2, [pc, #96]	; (80100c8 <rfalListenSetState+0x2f4>)
 8010066:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 801006a:	4619      	mov	r1, r3
 801006c:	200a      	movs	r0, #10
 801006e:	f7fc fe63 	bl	800cd38 <rfalSetMode>
 8010072:	4603      	mov	r3, r0
 8010074:	81fb      	strh	r3, [r7, #14]
                
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 8010076:	4b14      	ldr	r3, [pc, #80]	; (80100c8 <rfalListenSetState+0x2f4>)
 8010078:	2204      	movs	r2, #4
 801007a:	701a      	strb	r2, [r3, #0]
                break;
 801007c:	e017      	b.n	80100ae <rfalListenSetState+0x2da>
            /*******************************************************************************/
            case RFAL_LM_STATE_ACTIVE_Ax:
            case RFAL_LM_STATE_ACTIVE_A:
                
                /* Disable automatic responses for A */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 801007e:	2101      	movs	r1, #1
 8010080:	2008      	movs	r0, #8
 8010082:	f001 fc96 	bl	80119b2 <st25r3916SetRegisterBits>
                
                /* Clear any previous transmission errors (if Reader polled for other/unsupported technologies) */
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8010086:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 801008a:	f001 fed3 	bl	8011e34 <st25r3916GetInterrupt>
                
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );    /* Start looking for any incoming data */
 801008e:	2010      	movs	r0, #16
 8010090:	f001 ff1a 	bl	8011ec8 <st25r3916EnableInterrupts>
                break;
 8010094:	e00b      	b.n	80100ae <rfalListenSetState+0x2da>
                
            case RFAL_LM_STATE_TARGET_F:
                /* Disable Automatic response SENSF_REQ */
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 8010096:	2104      	movs	r1, #4
 8010098:	2008      	movs	r0, #8
 801009a:	f001 fc8a 	bl	80119b2 <st25r3916SetRegisterBits>
                break;
 801009e:	e006      	b.n	80100ae <rfalListenSetState+0x2da>
            /*******************************************************************************/    
            case RFAL_LM_STATE_SLEEP_A:
            case RFAL_LM_STATE_SLEEP_B:
            case RFAL_LM_STATE_SLEEP_AF:
                /* These sleep states have to be set by the rfalListenSleepStart() method */
                return ERR_REQUEST;
 80100a0:	2305      	movs	r3, #5
 80100a2:	e00d      	b.n	80100c0 <rfalListenSetState+0x2ec>
                /* States not handled by the LM, just keep state context */
                break;
                
            /*******************************************************************************/
            default:
                return ERR_WRONG_STATE;
 80100a4:	2321      	movs	r3, #33	; 0x21
 80100a6:	e00b      	b.n	80100c0 <rfalListenSetState+0x2ec>
                break;
 80100a8:	bf00      	nop
 80100aa:	e000      	b.n	80100ae <rfalListenSetState+0x2da>
                break;
 80100ac:	bf00      	nop
        }
    }
    while( reSetState );
 80100ae:	7b3b      	ldrb	r3, [r7, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f47f aea2 	bne.w	800fdfa <rfalListenSetState+0x26>
    
    gRFAL.Lm.state = newState;
 80100b6:	4a04      	ldr	r2, [pc, #16]	; (80100c8 <rfalListenSetState+0x2f4>)
 80100b8:	7b7b      	ldrb	r3, [r7, #13]
 80100ba:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    
    return ret;
 80100be:	89fb      	ldrh	r3, [r7, #14]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	2000155c 	.word	0x2000155c

080100cc <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 80100cc:	b5b0      	push	{r4, r5, r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
    uint8_t                aux;
    uint8_t                reg;
    uint32_t               irqs;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state < RFAL_STATE_INIT )
 80100d4:	4ba4      	ldr	r3, [pc, #656]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <rfalWakeUpModeStart+0x14>
    {
        return ERR_WRONG_STATE;
 80100dc:	2321      	movs	r3, #33	; 0x21
 80100de:	e217      	b.n	8010510 <rfalWakeUpModeStart+0x444>
    }
    
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d134      	bne.n	8010150 <rfalWakeUpModeStart+0x84>
    {
        gRFAL.wum.cfg.period           = RFAL_WUM_PERIOD_200MS;
 80100e6:	4ba0      	ldr	r3, [pc, #640]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80100e8:	2211      	movs	r2, #17
 80100ea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        gRFAL.wum.cfg.irqTout          = false;
 80100ee:	4b9e      	ldr	r3, [pc, #632]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80100f0:	2200      	movs	r2, #0
 80100f2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        gRFAL.wum.cfg.indAmp.enabled   = true;
 80100f6:	4b9c      	ldr	r3, [pc, #624]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80100f8:	2201      	movs	r2, #1
 80100fa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        gRFAL.wum.cfg.indPha.enabled   = false;
 80100fe:	4b9a      	ldr	r3, [pc, #616]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010100:	2200      	movs	r2, #0
 8010102:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
        gRFAL.wum.cfg.cap.enabled      = false;
 8010106:	4b98      	ldr	r3, [pc, #608]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010108:	2200      	movs	r2, #0
 801010a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 801010e:	4b96      	ldr	r3, [pc, #600]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010110:	2202      	movs	r2, #2
 8010112:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 8010116:	4b94      	ldr	r3, [pc, #592]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010118:	22ff      	movs	r2, #255	; 0xff
 801011a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 801011e:	4b92      	ldr	r3, [pc, #584]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010120:	2200      	movs	r2, #0
 8010122:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
        
        /*******************************************************************************/
        /* Check if AAT is enabled and if so make use of the SW Tag Detection          */
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_aat_en, ST25R3916_REG_IO_CONF2_aat_en ) )
 8010126:	2220      	movs	r2, #32
 8010128:	2120      	movs	r1, #32
 801012a:	2001      	movs	r0, #1
 801012c:	f001 fcf2 	bl	8011b14 <st25r3916CheckReg>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d01d      	beq.n	8010172 <rfalWakeUpModeStart+0xa6>
        {
            gRFAL.wum.cfg.swTagDetect     = true;
 8010136:	4b8c      	ldr	r3, [pc, #560]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010138:	2201      	movs	r2, #1
 801013a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            gRFAL.wum.cfg.indAmp.autoAvg  = true;
 801013e:	4b8a      	ldr	r3, [pc, #552]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010140:	2201      	movs	r2, #1
 8010142:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
            gRFAL.wum.cfg.indAmp.aaWeight = RFAL_WUM_AA_WEIGHT_16;
 8010146:	4b88      	ldr	r3, [pc, #544]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010148:	2202      	movs	r2, #2
 801014a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 801014e:	e010      	b.n	8010172 <rfalWakeUpModeStart+0xa6>
        }
    }
    else
    {
        gRFAL.wum.cfg = *config;
 8010150:	4b85      	ldr	r3, [pc, #532]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	337a      	adds	r3, #122	; 0x7a
 8010156:	6814      	ldr	r4, [r2, #0]
 8010158:	6850      	ldr	r0, [r2, #4]
 801015a:	6891      	ldr	r1, [r2, #8]
 801015c:	68d5      	ldr	r5, [r2, #12]
 801015e:	601c      	str	r4, [r3, #0]
 8010160:	6058      	str	r0, [r3, #4]
 8010162:	6099      	str	r1, [r3, #8]
 8010164:	60dd      	str	r5, [r3, #12]
 8010166:	6914      	ldr	r4, [r2, #16]
 8010168:	6950      	ldr	r0, [r2, #20]
 801016a:	6991      	ldr	r1, [r2, #24]
 801016c:	611c      	str	r4, [r3, #16]
 801016e:	6158      	str	r0, [r3, #20]
 8010170:	6199      	str	r1, [r3, #24]
    }
    
    /* Check for valid configuration */
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 8010172:	4b7d      	ldr	r3, [pc, #500]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010174:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8010178:	f083 0301 	eor.w	r3, r3, #1
 801017c:	b2db      	uxtb	r3, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00f      	beq.n	80101a2 <rfalWakeUpModeStart+0xd6>
 8010182:	4b79      	ldr	r3, [pc, #484]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010184:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8010188:	f083 0301 	eor.w	r3, r3, #1
 801018c:	b2db      	uxtb	r3, r3
 801018e:	2b00      	cmp	r3, #0
 8010190:	d007      	beq.n	80101a2 <rfalWakeUpModeStart+0xd6>
 8010192:	4b75      	ldr	r3, [pc, #468]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010194:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8010198:	f083 0301 	eor.w	r3, r3, #1
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d127      	bne.n	80101f2 <rfalWakeUpModeStart+0x126>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 80101a2:	4b71      	ldr	r3, [pc, #452]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101a4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    if( (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d009      	beq.n	80101c0 <rfalWakeUpModeStart+0xf4>
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 80101ac:	4b6e      	ldr	r3, [pc, #440]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101ae:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d11d      	bne.n	80101f2 <rfalWakeUpModeStart+0x126>
 80101b6:	4b6c      	ldr	r3, [pc, #432]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101b8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d118      	bne.n	80101f2 <rfalWakeUpModeStart+0x126>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                      ||
 80101c0:	4b69      	ldr	r3, [pc, #420]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101c2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  ||
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d004      	beq.n	80101d4 <rfalWakeUpModeStart+0x108>
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                      ||
 80101ca:	4b67      	ldr	r3, [pc, #412]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d10e      	bne.n	80101f2 <rfalWakeUpModeStart+0x126>
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80101d4:	4b64      	ldr	r3, [pc, #400]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101d6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
        (gRFAL.wum.cfg.cap.enabled  &&  gRFAL.wum.cfg.swTagDetect)                                      ||
 80101da:	2bff      	cmp	r3, #255	; 0xff
 80101dc:	d809      	bhi.n	80101f2 <rfalWakeUpModeStart+0x126>
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80101de:	4b62      	ldr	r3, [pc, #392]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101e0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80101e4:	2bff      	cmp	r3, #255	; 0xff
 80101e6:	d804      	bhi.n	80101f2 <rfalWakeUpModeStart+0x126>
          (gRFAL.wum.cfg.cap.reference    > RFAL_WUM_REFERENCE_AUTO)    )                                )
 80101e8:	4b5f      	ldr	r3, [pc, #380]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80101ea:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80101ee:	2bff      	cmp	r3, #255	; 0xff
 80101f0:	d901      	bls.n	80101f6 <rfalWakeUpModeStart+0x12a>
    {
        return ERR_PARAM;
 80101f2:	2307      	movs	r3, #7
 80101f4:	e18c      	b.n	8010510 <rfalWakeUpModeStart+0x444>
    }
    
    irqs = ST25R3916_IRQ_MASK_NONE;
 80101f6:	2300      	movs	r3, #0
 80101f8:	613b      	str	r3, [r7, #16]
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3916TxRxOff();
 80101fa:	2148      	movs	r1, #72	; 0x48
 80101fc:	2002      	movs	r0, #2
 80101fe:	f001 fba1 	bl	8011944 <st25r3916ClrRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask );
 8010202:	2103      	movs	r1, #3
 8010204:	2002      	movs	r0, #2
 8010206:	f001 fb9d 	bl	8011944 <st25r3916ClrRegisterBits>
    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask), (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_iso14443a) );
 801020a:	2208      	movs	r2, #8
 801020c:	21f8      	movs	r1, #248	; 0xf8
 801020e:	2003      	movs	r0, #3
 8010210:	f001 fbfc 	bl	8011a0c <st25r3916ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 8010214:	2004      	movs	r0, #4
 8010216:	f7f3 fb25 	bl	8003864 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 801021a:	4b53      	ldr	r3, [pc, #332]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 801021c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8010220:	011b      	lsls	r3, r3, #4
 8010222:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8010224:	4b50      	ldr	r3, [pc, #320]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010226:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801022a:	2b0f      	cmp	r3, #15
 801022c:	d802      	bhi.n	8010234 <rfalWakeUpModeStart+0x168>
 801022e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8010232:	e000      	b.n	8010236 <rfalWakeUpModeStart+0x16a>
 8010234:	2200      	movs	r2, #0
 8010236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801023a:	4313      	orrs	r3, r2
 801023c:	b25b      	sxtb	r3, r3
 801023e:	75fb      	strb	r3, [r7, #23]
    
    if( gRFAL.wum.cfg.irqTout || gRFAL.wum.cfg.swTagDetect )
 8010240:	4b49      	ldr	r3, [pc, #292]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010242:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8010246:	2b00      	cmp	r3, #0
 8010248:	d104      	bne.n	8010254 <rfalWakeUpModeStart+0x188>
 801024a:	4b47      	ldr	r3, [pc, #284]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 801024c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010250:	2b00      	cmp	r3, #0
 8010252:	d007      	beq.n	8010264 <rfalWakeUpModeStart+0x198>
    {
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 8010254:	7dfb      	ldrb	r3, [r7, #23]
 8010256:	f043 0308 	orr.w	r3, r3, #8
 801025a:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3916_IRQ_MASK_WT;
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010262:	613b      	str	r3, [r7, #16]
    }
       
    
    /* Check if HW Wake-up is to be used or SW Tag detection */
    if( gRFAL.wum.cfg.swTagDetect )
 8010264:	4b40      	ldr	r3, [pc, #256]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010266:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00c      	beq.n	8010288 <rfalWakeUpModeStart+0x1bc>
    {
        gRFAL.wum.cfg.indAmp.reference = 0U;
 801026e:	4b3e      	ldr	r3, [pc, #248]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010270:	2200      	movs	r2, #0
 8010272:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
        gRFAL.wum.cfg.indPha.reference = 0U;
 8010276:	4b3c      	ldr	r3, [pc, #240]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010278:	2200      	movs	r2, #0
 801027a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        gRFAL.wum.cfg.cap.reference    = 0U;
 801027e:	4b3a      	ldr	r3, [pc, #232]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010280:	2200      	movs	r2, #0
 8010282:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8010286:	e127      	b.n	80104d8 <rfalWakeUpModeStart+0x40c>
    }
    else
    {
        /*******************************************************************************/
        /* Check if Inductive Amplitude is to be performed */
        if( gRFAL.wum.cfg.indAmp.enabled )
 8010288:	4b37      	ldr	r3, [pc, #220]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 801028a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801028e:	2b00      	cmp	r3, #0
 8010290:	d058      	beq.n	8010344 <rfalWakeUpModeStart+0x278>
        {
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 8010292:	4b35      	ldr	r3, [pc, #212]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010294:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8010298:	011b      	lsls	r3, r3, #4
 801029a:	b2db      	uxtb	r3, r3
 801029c:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 801029e:	4b32      	ldr	r3, [pc, #200]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80102a0:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d001      	beq.n	80102ac <rfalWakeUpModeStart+0x1e0>
 80102a8:	2208      	movs	r2, #8
 80102aa:	e000      	b.n	80102ae <rfalWakeUpModeStart+0x1e2>
 80102ac:	2200      	movs	r2, #0
 80102ae:	7bfb      	ldrb	r3, [r7, #15]
 80102b0:	b25b      	sxtb	r3, r3
 80102b2:	4313      	orrs	r3, r2
 80102b4:	b25b      	sxtb	r3, r3
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 80102ba:	4b2b      	ldr	r3, [pc, #172]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80102bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80102c0:	005b      	lsls	r3, r3, #1
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	b25b      	sxtb	r3, r3
 80102c6:	f003 0306 	and.w	r3, r3, #6
 80102ca:	b25a      	sxtb	r2, r3
 80102cc:	7bfb      	ldrb	r3, [r7, #15]
 80102ce:	b25b      	sxtb	r3, r3
 80102d0:	4313      	orrs	r3, r2
 80102d2:	b25b      	sxtb	r3, r3
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 80102d8:	4b23      	ldr	r3, [pc, #140]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80102da:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80102de:	b25a      	sxtb	r2, r3
 80102e0:	7bfb      	ldrb	r3, [r7, #15]
 80102e2:	b25b      	sxtb	r3, r3
 80102e4:	4313      	orrs	r3, r2
 80102e6:	b25b      	sxtb	r3, r3
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	73fb      	strb	r3, [r7, #15]
            
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 80102ec:	7bfb      	ldrb	r3, [r7, #15]
 80102ee:	4619      	mov	r1, r3
 80102f0:	2033      	movs	r0, #51	; 0x33
 80102f2:	f001 f9d7 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Only need to set the reference if not using Auto Average */
            if( !gRFAL.wum.cfg.indAmp.autoAvg )
 80102f6:	4b1c      	ldr	r3, [pc, #112]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 80102f8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80102fc:	f083 0301 	eor.w	r3, r3, #1
 8010300:	b2db      	uxtb	r3, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d016      	beq.n	8010334 <rfalWakeUpModeStart+0x268>
            {
                if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 8010306:	4b18      	ldr	r3, [pc, #96]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010308:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801030c:	2bff      	cmp	r3, #255	; 0xff
 801030e:	d109      	bne.n	8010324 <rfalWakeUpModeStart+0x258>
                {
                    st25r3916MeasureAmplitude( &aux );
 8010310:	f107 030f 	add.w	r3, r7, #15
 8010314:	4618      	mov	r0, r3
 8010316:	f000 fe6a 	bl	8010fee <st25r3916MeasureAmplitude>
                    gRFAL.wum.cfg.indAmp.reference = aux;
 801031a:	7bfb      	ldrb	r3, [r7, #15]
 801031c:	b29a      	uxth	r2, r3
 801031e:	4b12      	ldr	r3, [pc, #72]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010320:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                }
                st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indAmp.reference );
 8010324:	4b10      	ldr	r3, [pc, #64]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010326:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801032a:	b2db      	uxtb	r3, r3
 801032c:	4619      	mov	r1, r3
 801032e:	2034      	movs	r0, #52	; 0x34
 8010330:	f001 f9b8 	bl	80116a4 <st25r3916WriteRegister>
            }
            
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wam;
 8010334:	7dfb      	ldrb	r3, [r7, #23]
 8010336:	f043 0304 	orr.w	r3, r3, #4
 801033a:	75fb      	strb	r3, [r7, #23]
            irqs |= ST25R3916_IRQ_MASK_WAM;
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010342:	613b      	str	r3, [r7, #16]
        }
        
        /*******************************************************************************/
        /* Check if Inductive Phase is to be performed */
        if( gRFAL.wum.cfg.indPha.enabled )
 8010344:	4b08      	ldr	r3, [pc, #32]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010346:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 801034a:	2b00      	cmp	r3, #0
 801034c:	d05a      	beq.n	8010404 <rfalWakeUpModeStart+0x338>
        {
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 801034e:	4b06      	ldr	r3, [pc, #24]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 8010350:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8010354:	011b      	lsls	r3, r3, #4
 8010356:	b2db      	uxtb	r3, r3
 8010358:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 801035a:	4b03      	ldr	r3, [pc, #12]	; (8010368 <rfalWakeUpModeStart+0x29c>)
 801035c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8010360:	2b00      	cmp	r3, #0
 8010362:	d003      	beq.n	801036c <rfalWakeUpModeStart+0x2a0>
 8010364:	2208      	movs	r2, #8
 8010366:	e002      	b.n	801036e <rfalWakeUpModeStart+0x2a2>
 8010368:	2000155c 	.word	0x2000155c
 801036c:	2200      	movs	r2, #0
 801036e:	7bfb      	ldrb	r3, [r7, #15]
 8010370:	b25b      	sxtb	r3, r3
 8010372:	4313      	orrs	r3, r2
 8010374:	b25b      	sxtb	r3, r3
 8010376:	b2db      	uxtb	r3, r3
 8010378:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 801037a:	4b67      	ldr	r3, [pc, #412]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 801037c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8010380:	005b      	lsls	r3, r3, #1
 8010382:	b2db      	uxtb	r3, r3
 8010384:	b25b      	sxtb	r3, r3
 8010386:	f003 0306 	and.w	r3, r3, #6
 801038a:	b25a      	sxtb	r2, r3
 801038c:	7bfb      	ldrb	r3, [r7, #15]
 801038e:	b25b      	sxtb	r3, r3
 8010390:	4313      	orrs	r3, r2
 8010392:	b25b      	sxtb	r3, r3
 8010394:	b2db      	uxtb	r3, r3
 8010396:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8010398:	4b5f      	ldr	r3, [pc, #380]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 801039a:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 801039e:	b25a      	sxtb	r2, r3
 80103a0:	7bfb      	ldrb	r3, [r7, #15]
 80103a2:	b25b      	sxtb	r3, r3
 80103a4:	4313      	orrs	r3, r2
 80103a6:	b25b      	sxtb	r3, r3
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	73fb      	strb	r3, [r7, #15]
            
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 80103ac:	7bfb      	ldrb	r3, [r7, #15]
 80103ae:	4619      	mov	r1, r3
 80103b0:	2037      	movs	r0, #55	; 0x37
 80103b2:	f001 f977 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Only need to set the reference if not using Auto Average */
            if( !gRFAL.wum.cfg.indPha.autoAvg )
 80103b6:	4b58      	ldr	r3, [pc, #352]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 80103b8:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80103bc:	f083 0301 	eor.w	r3, r3, #1
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d016      	beq.n	80103f4 <rfalWakeUpModeStart+0x328>
            {
                if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 80103c6:	4b54      	ldr	r3, [pc, #336]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 80103c8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80103cc:	2bff      	cmp	r3, #255	; 0xff
 80103ce:	d109      	bne.n	80103e4 <rfalWakeUpModeStart+0x318>
                {
                    st25r3916MeasurePhase( &aux );
 80103d0:	f107 030f 	add.w	r3, r7, #15
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 fe19 	bl	801100c <st25r3916MeasurePhase>
                    gRFAL.wum.cfg.indPha.reference = aux;
 80103da:	7bfb      	ldrb	r3, [r7, #15]
 80103dc:	b29a      	uxth	r2, r3
 80103de:	4b4e      	ldr	r3, [pc, #312]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 80103e0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
                
                }
                st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indPha.reference );
 80103e4:	4b4c      	ldr	r3, [pc, #304]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 80103e6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	4619      	mov	r1, r3
 80103ee:	2038      	movs	r0, #56	; 0x38
 80103f0:	f001 f958 	bl	80116a4 <st25r3916WriteRegister>
            }
            
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wph;
 80103f4:	7dfb      	ldrb	r3, [r7, #23]
 80103f6:	f043 0302 	orr.w	r3, r3, #2
 80103fa:	75fb      	strb	r3, [r7, #23]
            irqs |= ST25R3916_IRQ_MASK_WPH;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010402:	613b      	str	r3, [r7, #16]
        }
        
        /*******************************************************************************/
        /* Check if Capacitive is to be performed */
        if( gRFAL.wum.cfg.cap.enabled )
 8010404:	4b44      	ldr	r3, [pc, #272]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 8010406:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 801040a:	2b00      	cmp	r3, #0
 801040c:	d064      	beq.n	80104d8 <rfalWakeUpModeStart+0x40c>
        {
            /*******************************************************************************/
            /* Perform Capacitive sensor calibration */
            
            /* Disable Oscillator and Field */
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_tx_en) );
 801040e:	2188      	movs	r1, #136	; 0x88
 8010410:	2002      	movs	r0, #2
 8010412:	f001 fa97 	bl	8011944 <st25r3916ClrRegisterBits>
            
            /* Sensor gain should be configured on Analog Config: RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON */
            
            /* Perform calibration procedure */
            st25r3916CalibrateCapacitiveSensor( NULL );
 8010416:	2000      	movs	r0, #0
 8010418:	f000 fe16 	bl	8011048 <st25r3916CalibrateCapacitiveSensor>
            
            
            /*******************************************************************************/
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 801041c:	4b3e      	ldr	r3, [pc, #248]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 801041e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8010422:	011b      	lsls	r3, r3, #4
 8010424:	b2db      	uxtb	r3, r3
 8010426:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 8010428:	4b3b      	ldr	r3, [pc, #236]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 801042a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 801042e:	2b00      	cmp	r3, #0
 8010430:	d001      	beq.n	8010436 <rfalWakeUpModeStart+0x36a>
 8010432:	2208      	movs	r2, #8
 8010434:	e000      	b.n	8010438 <rfalWakeUpModeStart+0x36c>
 8010436:	2200      	movs	r2, #0
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	b25b      	sxtb	r3, r3
 801043c:	4313      	orrs	r3, r2
 801043e:	b25b      	sxtb	r3, r3
 8010440:	b2db      	uxtb	r3, r3
 8010442:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 8010444:	4b34      	ldr	r3, [pc, #208]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 8010446:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801044a:	005b      	lsls	r3, r3, #1
 801044c:	b2db      	uxtb	r3, r3
 801044e:	b25b      	sxtb	r3, r3
 8010450:	f003 0306 	and.w	r3, r3, #6
 8010454:	b25a      	sxtb	r2, r3
 8010456:	7bfb      	ldrb	r3, [r7, #15]
 8010458:	b25b      	sxtb	r3, r3
 801045a:	4313      	orrs	r3, r2
 801045c:	b25b      	sxtb	r3, r3
 801045e:	b2db      	uxtb	r3, r3
 8010460:	73fb      	strb	r3, [r7, #15]
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8010462:	4b2d      	ldr	r3, [pc, #180]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 8010464:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8010468:	b25a      	sxtb	r2, r3
 801046a:	7bfb      	ldrb	r3, [r7, #15]
 801046c:	b25b      	sxtb	r3, r3
 801046e:	4313      	orrs	r3, r2
 8010470:	b25b      	sxtb	r3, r3
 8010472:	b2db      	uxtb	r3, r3
 8010474:	73fb      	strb	r3, [r7, #15]
            
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 8010476:	7bfb      	ldrb	r3, [r7, #15]
 8010478:	4619      	mov	r1, r3
 801047a:	203b      	movs	r0, #59	; 0x3b
 801047c:	f001 f912 	bl	80116a4 <st25r3916WriteRegister>
            
            /* Only need to set the reference if not using Auto Average */
            if( !gRFAL.wum.cfg.cap.autoAvg || gRFAL.wum.cfg.swTagDetect )
 8010480:	4b25      	ldr	r3, [pc, #148]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 8010482:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8010486:	f083 0301 	eor.w	r3, r3, #1
 801048a:	b2db      	uxtb	r3, r3
 801048c:	2b00      	cmp	r3, #0
 801048e:	d104      	bne.n	801049a <rfalWakeUpModeStart+0x3ce>
 8010490:	4b21      	ldr	r3, [pc, #132]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 8010492:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010496:	2b00      	cmp	r3, #0
 8010498:	d016      	beq.n	80104c8 <rfalWakeUpModeStart+0x3fc>
            {
                if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 801049a:	4b1f      	ldr	r3, [pc, #124]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 801049c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80104a0:	2bff      	cmp	r3, #255	; 0xff
 80104a2:	d109      	bne.n	80104b8 <rfalWakeUpModeStart+0x3ec>
                {
                    st25r3916MeasureCapacitance( &aux );
 80104a4:	f107 030f 	add.w	r3, r7, #15
 80104a8:	4618      	mov	r0, r3
 80104aa:	f000 fdbe 	bl	801102a <st25r3916MeasureCapacitance>
                    gRFAL.wum.cfg.cap.reference = aux;
 80104ae:	7bfb      	ldrb	r3, [r7, #15]
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	4b19      	ldr	r3, [pc, #100]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 80104b4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
                }
                st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.cap.reference );
 80104b8:	4b17      	ldr	r3, [pc, #92]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 80104ba:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	4619      	mov	r1, r3
 80104c2:	203c      	movs	r0, #60	; 0x3c
 80104c4:	f001 f8ee 	bl	80116a4 <st25r3916WriteRegister>
            }
            
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wcap;
 80104c8:	7dfb      	ldrb	r3, [r7, #23]
 80104ca:	f043 0301 	orr.w	r3, r3, #1
 80104ce:	75fb      	strb	r3, [r7, #23]
            irqs |= ST25R3916_IRQ_MASK_WCAP;
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104d6:	613b      	str	r3, [r7, #16]
        }
    }

    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 80104d8:	f04f 30ff 	mov.w	r0, #4294967295
 80104dc:	f001 fd00 	bl	8011ee0 <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( irqs );
 80104e0:	6938      	ldr	r0, [r7, #16]
 80104e2:	f001 fca7 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( irqs );
 80104e6:	6938      	ldr	r0, [r7, #16]
 80104e8:	f001 fcee 	bl	8011ec8 <st25r3916EnableInterrupts>
    
    
    /* Enable Low Power Wake-Up Mode (Disable: Oscilattor, Tx, Rx and External Field Detector) */
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, reg );
 80104ec:	7dfb      	ldrb	r3, [r7, #23]
 80104ee:	4619      	mov	r1, r3
 80104f0:	2032      	movs	r0, #50	; 0x32
 80104f2:	f001 f8d7 	bl	80116a4 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL , 
 80104f6:	2204      	movs	r2, #4
 80104f8:	21cf      	movs	r1, #207	; 0xcf
 80104fa:	2002      	movs	r0, #2
 80104fc:	f001 fa86 	bl	8011a0c <st25r3916ChangeRegisterBits>
                                (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_tx_en | 
                                 ST25R3916_REG_OP_CONTROL_en_fd_mask | ST25R3916_REG_OP_CONTROL_wu                              ) , 
                                 ST25R3916_REG_OP_CONTROL_wu );
    
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 8010500:	4b05      	ldr	r3, [pc, #20]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 8010502:	2201      	movs	r2, #1
 8010504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    gRFAL.state     = RFAL_STATE_WUM;
 8010508:	4b03      	ldr	r3, [pc, #12]	; (8010518 <rfalWakeUpModeStart+0x44c>)
 801050a:	2205      	movs	r2, #5
 801050c:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 801050e:	2300      	movs	r3, #0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bdb0      	pop	{r4, r5, r7, pc}
 8010518:	2000155c 	.word	0x2000155c

0801051c <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 801051c:	b480      	push	{r7}
 801051e:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 8010520:	4b05      	ldr	r3, [pc, #20]	; (8010538 <rfalWakeUpModeHasWoke+0x1c>)
 8010522:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010526:	2b01      	cmp	r3, #1
 8010528:	bf8c      	ite	hi
 801052a:	2301      	movhi	r3, #1
 801052c:	2300      	movls	r3, #0
 801052e:	b2db      	uxtb	r3, r3
}
 8010530:	4618      	mov	r0, r3
 8010532:	46bd      	mov	sp, r7
 8010534:	bc80      	pop	{r7}
 8010536:	4770      	bx	lr
 8010538:	2000155c 	.word	0x2000155c

0801053c <rfalWakeUpModeFilter>:


/*******************************************************************************/
static uint16_t rfalWakeUpModeFilter( uint16_t curRef, uint16_t curVal, uint8_t weight )
{
 801053c:	b480      	push	{r7}
 801053e:	b085      	sub	sp, #20
 8010540:	af00      	add	r7, sp, #0
 8010542:	4603      	mov	r3, r0
 8010544:	80fb      	strh	r3, [r7, #6]
 8010546:	460b      	mov	r3, r1
 8010548:	80bb      	strh	r3, [r7, #4]
 801054a:	4613      	mov	r3, r2
 801054c:	70fb      	strb	r3, [r7, #3]
    uint16_t newRef;    
    
    /* Perform the averaging|filter as describded in ST25R3916 DS */
    
    /* Avoid signed arithmetics by spliting in two cases */
    if( curVal > curRef )
 801054e:	88ba      	ldrh	r2, [r7, #4]
 8010550:	88fb      	ldrh	r3, [r7, #6]
 8010552:	429a      	cmp	r2, r3
 8010554:	d91a      	bls.n	801058c <rfalWakeUpModeFilter+0x50>
    {
        newRef = curRef + (( curVal - curRef ) / weight );
 8010556:	88ba      	ldrh	r2, [r7, #4]
 8010558:	88fb      	ldrh	r3, [r7, #6]
 801055a:	1ad2      	subs	r2, r2, r3
 801055c:	78fb      	ldrb	r3, [r7, #3]
 801055e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010562:	b29a      	uxth	r2, r3
 8010564:	88fb      	ldrh	r3, [r7, #6]
 8010566:	4413      	add	r3, r2
 8010568:	81fb      	strh	r3, [r7, #14]
        
        /* In order for the reference to converge to final value   *
         * increment once the diff is smaller that the weight      */
        if( (curVal != curRef) && (curRef == newRef) )
 801056a:	88ba      	ldrh	r2, [r7, #4]
 801056c:	88fb      	ldrh	r3, [r7, #6]
 801056e:	429a      	cmp	r2, r3
 8010570:	d022      	beq.n	80105b8 <rfalWakeUpModeFilter+0x7c>
 8010572:	88fa      	ldrh	r2, [r7, #6]
 8010574:	89fb      	ldrh	r3, [r7, #14]
 8010576:	429a      	cmp	r2, r3
 8010578:	d11e      	bne.n	80105b8 <rfalWakeUpModeFilter+0x7c>
        {
            newRef &= 0xFF00U;
 801057a:	89fb      	ldrh	r3, [r7, #14]
 801057c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010580:	81fb      	strh	r3, [r7, #14]
            newRef += 0x0100U;
 8010582:	89fb      	ldrh	r3, [r7, #14]
 8010584:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010588:	81fb      	strh	r3, [r7, #14]
 801058a:	e015      	b.n	80105b8 <rfalWakeUpModeFilter+0x7c>
        }
    }
    else
    {
        newRef = curRef - (( curRef - curVal ) / weight );
 801058c:	88fa      	ldrh	r2, [r7, #6]
 801058e:	88bb      	ldrh	r3, [r7, #4]
 8010590:	1ad2      	subs	r2, r2, r3
 8010592:	78fb      	ldrb	r3, [r7, #3]
 8010594:	fb92 f3f3 	sdiv	r3, r2, r3
 8010598:	b29b      	uxth	r3, r3
 801059a:	88fa      	ldrh	r2, [r7, #6]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	81fb      	strh	r3, [r7, #14]
        
        /* In order for the reference to converge to final value   *
         * decrement once the diff is smaller that the weight      */
        if( (curVal != curRef) && (curRef == newRef) )
 80105a0:	88ba      	ldrh	r2, [r7, #4]
 80105a2:	88fb      	ldrh	r3, [r7, #6]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d007      	beq.n	80105b8 <rfalWakeUpModeFilter+0x7c>
 80105a8:	88fa      	ldrh	r2, [r7, #6]
 80105aa:	89fb      	ldrh	r3, [r7, #14]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d103      	bne.n	80105b8 <rfalWakeUpModeFilter+0x7c>
        {
            newRef &= 0xFF00U;
 80105b0:	89fb      	ldrh	r3, [r7, #14]
 80105b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80105b6:	81fb      	strh	r3, [r7, #14]
        }
    }
    
    return newRef;
 80105b8:	89fb      	ldrh	r3, [r7, #14]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	bc80      	pop	{r7}
 80105c2:	4770      	bx	lr

080105c4 <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
    uint32_t irqs;
    uint8_t  reg;
    uint16_t value;
    uint16_t delta;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 80105ca:	4b7c      	ldr	r3, [pc, #496]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	2b05      	cmp	r3, #5
 80105d0:	f040 80ea 	bne.w	80107a8 <rfalRunWakeUpModeWorker+0x1e4>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 80105d4:	4b79      	ldr	r3, [pc, #484]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80105d6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80105da:	3b01      	subs	r3, #1
 80105dc:	2b01      	cmp	r3, #1
 80105de:	f200 80e5 	bhi.w	80107ac <rfalRunWakeUpModeWorker+0x1e8>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP ) );
 80105e2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 80105e6:	f001 fc25 	bl	8011e34 <st25r3916GetInterrupt>
 80105ea:	60f8      	str	r0, [r7, #12]
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 80de 	beq.w	80107b0 <rfalRunWakeUpModeWorker+0x1ec>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3916_IRQ_MASK_WAM) != 0U)
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d008      	beq.n	8010610 <rfalRunWakeUpModeWorker+0x4c>
            {
                st25r3916ReadRegister( ST25R3916_REG_AMPLITUDE_MEASURE_RESULT, &reg );
 80105fe:	1dfb      	adds	r3, r7, #7
 8010600:	4619      	mov	r1, r3
 8010602:	2036      	movs	r0, #54	; 0x36
 8010604:	f001 f810 	bl	8011628 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8010608:	4b6c      	ldr	r3, [pc, #432]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 801060a:	2202      	movs	r2, #2
 801060c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WPH) != 0U)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010616:	2b00      	cmp	r3, #0
 8010618:	d008      	beq.n	801062c <rfalRunWakeUpModeWorker+0x68>
            {
                st25r3916ReadRegister( ST25R3916_REG_PHASE_MEASURE_RESULT, &reg );
 801061a:	1dfb      	adds	r3, r7, #7
 801061c:	4619      	mov	r1, r3
 801061e:	203a      	movs	r0, #58	; 0x3a
 8010620:	f001 f802 	bl	8011628 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8010624:	4b65      	ldr	r3, [pc, #404]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010626:	2202      	movs	r2, #2
 8010628:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WCAP) != 0U)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010632:	2b00      	cmp	r3, #0
 8010634:	d008      	beq.n	8010648 <rfalRunWakeUpModeWorker+0x84>
            {
                st25r3916ReadRegister( ST25R3916_REG_CAPACITANCE_MEASURE_RESULT, &reg );
 8010636:	1dfb      	adds	r3, r7, #7
 8010638:	4619      	mov	r1, r3
 801063a:	203e      	movs	r0, #62	; 0x3e
 801063c:	f000 fff4 	bl	8011628 <st25r3916ReadRegister>
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;                
 8010640:	4b5e      	ldr	r3, [pc, #376]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010642:	2202      	movs	r2, #2
 8010644:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WT) != 0U)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801064e:	2b00      	cmp	r3, #0
 8010650:	f000 80b0 	beq.w	80107b4 <rfalRunWakeUpModeWorker+0x1f0>
            {
                /*******************************************************************************/
                if( gRFAL.wum.cfg.swTagDetect )
 8010654:	4b59      	ldr	r3, [pc, #356]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010656:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 80aa 	beq.w	80107b4 <rfalRunWakeUpModeWorker+0x1f0>
                {
                    /* Enable Ready mode and wait the settle time */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), ST25R3916_REG_OP_CONTROL_en );
 8010660:	2280      	movs	r2, #128	; 0x80
 8010662:	2184      	movs	r1, #132	; 0x84
 8010664:	2002      	movs	r0, #2
 8010666:	f001 f9d1 	bl	8011a0c <st25r3916ChangeRegisterBits>
                    platformDelay( RFAL_ST25R3916_AAT_SETTLE );
 801066a:	2005      	movs	r0, #5
 801066c:	f7f1 f980 	bl	8001970 <HAL_Delay>
                    
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indAmp.enabled )
 8010670:	4b52      	ldr	r3, [pc, #328]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010672:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8010676:	2b00      	cmp	r3, #0
 8010678:	d045      	beq.n	8010706 <rfalRunWakeUpModeWorker+0x142>
                    {
                        /* Perform amplitude measurement */
                        st25r3916MeasureAmplitude( &reg );
 801067a:	1dfb      	adds	r3, r7, #7
 801067c:	4618      	mov	r0, r3
 801067e:	f000 fcb6 	bl	8010fee <st25r3916MeasureAmplitude>
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	b29b      	uxth	r3, r3
 8010686:	021b      	lsls	r3, r3, #8
 8010688:	817b      	strh	r3, [r7, #10]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 801068a:	4b4c      	ldr	r3, [pc, #304]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 801068c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8010690:	b29b      	uxth	r3, r3
 8010692:	021b      	lsls	r3, r3, #8
 8010694:	813b      	strh	r3, [r7, #8]
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indAmp.reference == 0U )
 8010696:	4b49      	ldr	r3, [pc, #292]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010698:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801069c:	2b00      	cmp	r3, #0
 801069e:	d103      	bne.n	80106a8 <rfalRunWakeUpModeWorker+0xe4>
                        {
                            gRFAL.wum.cfg.indAmp.reference = value;
 80106a0:	4a46      	ldr	r2, [pc, #280]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80106a2:	897b      	ldrh	r3, [r7, #10]
 80106a4:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 80106a8:	897a      	ldrh	r2, [r7, #10]
 80106aa:	4b44      	ldr	r3, [pc, #272]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80106ac:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80106b0:	4619      	mov	r1, r3
 80106b2:	893b      	ldrh	r3, [r7, #8]
 80106b4:	440b      	add	r3, r1
 80106b6:	429a      	cmp	r2, r3
 80106b8:	da08      	bge.n	80106cc <rfalRunWakeUpModeWorker+0x108>
                            ( value <= (gRFAL.wum.cfg.indAmp.reference - delta) )   )
 80106ba:	897a      	ldrh	r2, [r7, #10]
 80106bc:	4b3f      	ldr	r3, [pc, #252]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80106be:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80106c2:	4619      	mov	r1, r3
 80106c4:	893b      	ldrh	r3, [r7, #8]
 80106c6:	1acb      	subs	r3, r1, r3
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 80106c8:	429a      	cmp	r2, r3
 80106ca:	dc04      	bgt.n	80106d6 <rfalRunWakeUpModeWorker+0x112>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80106cc:	4b3b      	ldr	r3, [pc, #236]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80106ce:	2202      	movs	r2, #2
 80106d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                            break;
 80106d4:	e06f      	b.n	80107b6 <rfalRunWakeUpModeWorker+0x1f2>
                        }
                        
                        /* Update moving reference if enabled */
                        if( gRFAL.wum.cfg.indAmp.autoAvg )
 80106d6:	4b39      	ldr	r3, [pc, #228]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80106d8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d012      	beq.n	8010706 <rfalRunWakeUpModeWorker+0x142>
                        {
                            gRFAL.wum.cfg.indAmp.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indAmp.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indAmp.aaWeight) );
 80106e0:	4b36      	ldr	r3, [pc, #216]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80106e2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80106e6:	4a35      	ldr	r2, [pc, #212]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 80106e8:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80106ec:	4611      	mov	r1, r2
 80106ee:	2204      	movs	r2, #4
 80106f0:	408a      	lsls	r2, r1
 80106f2:	b2d2      	uxtb	r2, r2
 80106f4:	8979      	ldrh	r1, [r7, #10]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff ff20 	bl	801053c <rfalWakeUpModeFilter>
 80106fc:	4603      	mov	r3, r0
 80106fe:	461a      	mov	r2, r3
 8010700:	4b2e      	ldr	r3, [pc, #184]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010702:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                        }
                    }
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indPha.enabled )
 8010706:	4b2d      	ldr	r3, [pc, #180]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010708:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 801070c:	2b00      	cmp	r3, #0
 801070e:	d045      	beq.n	801079c <rfalRunWakeUpModeWorker+0x1d8>
                    {
                        /* Perform Phase measurement */
                        st25r3916MeasurePhase( &reg );
 8010710:	1dfb      	adds	r3, r7, #7
 8010712:	4618      	mov	r0, r3
 8010714:	f000 fc7a 	bl	801100c <st25r3916MeasurePhase>
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
 8010718:	79fb      	ldrb	r3, [r7, #7]
 801071a:	b29b      	uxth	r3, r3
 801071c:	021b      	lsls	r3, r3, #8
 801071e:	817b      	strh	r3, [r7, #10]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 8010720:	4b26      	ldr	r3, [pc, #152]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010722:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8010726:	b29b      	uxth	r3, r3
 8010728:	021b      	lsls	r3, r3, #8
 801072a:	813b      	strh	r3, [r7, #8]
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indPha.reference == 0U )
 801072c:	4b23      	ldr	r3, [pc, #140]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 801072e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8010732:	2b00      	cmp	r3, #0
 8010734:	d103      	bne.n	801073e <rfalRunWakeUpModeWorker+0x17a>
                        {
                            gRFAL.wum.cfg.indPha.reference = value;
 8010736:	4a21      	ldr	r2, [pc, #132]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010738:	897b      	ldrh	r3, [r7, #10]
 801073a:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 801073e:	897a      	ldrh	r2, [r7, #10]
 8010740:	4b1e      	ldr	r3, [pc, #120]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010742:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8010746:	4619      	mov	r1, r3
 8010748:	893b      	ldrh	r3, [r7, #8]
 801074a:	440b      	add	r3, r1
 801074c:	429a      	cmp	r2, r3
 801074e:	da08      	bge.n	8010762 <rfalRunWakeUpModeWorker+0x19e>
                            ( value <= (gRFAL.wum.cfg.indPha.reference - delta) )   )
 8010750:	897a      	ldrh	r2, [r7, #10]
 8010752:	4b1a      	ldr	r3, [pc, #104]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010754:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8010758:	4619      	mov	r1, r3
 801075a:	893b      	ldrh	r3, [r7, #8]
 801075c:	1acb      	subs	r3, r1, r3
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 801075e:	429a      	cmp	r2, r3
 8010760:	dc04      	bgt.n	801076c <rfalRunWakeUpModeWorker+0x1a8>
                        {
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8010762:	4b16      	ldr	r3, [pc, #88]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010764:	2202      	movs	r2, #2
 8010766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                            break;
 801076a:	e024      	b.n	80107b6 <rfalRunWakeUpModeWorker+0x1f2>
                        }
                        
                        /* Update moving reference if enabled */
                        if( gRFAL.wum.cfg.indPha.autoAvg )
 801076c:	4b13      	ldr	r3, [pc, #76]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 801076e:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8010772:	2b00      	cmp	r3, #0
 8010774:	d012      	beq.n	801079c <rfalRunWakeUpModeWorker+0x1d8>
                        {
                            gRFAL.wum.cfg.indPha.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indPha.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indPha.aaWeight) );
 8010776:	4b11      	ldr	r3, [pc, #68]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010778:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801077c:	4a0f      	ldr	r2, [pc, #60]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 801077e:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8010782:	4611      	mov	r1, r2
 8010784:	2204      	movs	r2, #4
 8010786:	408a      	lsls	r2, r1
 8010788:	b2d2      	uxtb	r2, r2
 801078a:	8979      	ldrh	r1, [r7, #10]
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff fed5 	bl	801053c <rfalWakeUpModeFilter>
 8010792:	4603      	mov	r3, r0
 8010794:	461a      	mov	r2, r3
 8010796:	4b09      	ldr	r3, [pc, #36]	; (80107bc <rfalRunWakeUpModeWorker+0x1f8>)
 8010798:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
                        }
                    }
                    
                    /* Re-Enable low power Wake-Up mode for wto to trigger another measurement(s) */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_wu) );
 801079c:	2204      	movs	r2, #4
 801079e:	2184      	movs	r1, #132	; 0x84
 80107a0:	2002      	movs	r0, #2
 80107a2:	f001 f933 	bl	8011a0c <st25r3916ChangeRegisterBits>
                }
            }
            break;
 80107a6:	e005      	b.n	80107b4 <rfalRunWakeUpModeWorker+0x1f0>
        return;
 80107a8:	bf00      	nop
 80107aa:	e004      	b.n	80107b6 <rfalRunWakeUpModeWorker+0x1f2>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 80107ac:	bf00      	nop
 80107ae:	e002      	b.n	80107b6 <rfalRunWakeUpModeWorker+0x1f2>
               break;  /* No interrupt to process */
 80107b0:	bf00      	nop
 80107b2:	e000      	b.n	80107b6 <rfalRunWakeUpModeWorker+0x1f2>
            break;
 80107b4:	bf00      	nop
    }
}
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	2000155c 	.word	0x2000155c

080107c0 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	af00      	add	r7, sp, #0
    /* Check if RFAL is in Wake-up mode */
    if( gRFAL.state != RFAL_STATE_WUM )
 80107c4:	4b0f      	ldr	r3, [pc, #60]	; (8010804 <rfalWakeUpModeStop+0x44>)
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	2b05      	cmp	r3, #5
 80107ca:	d001      	beq.n	80107d0 <rfalWakeUpModeStop+0x10>
    {
        return ERR_WRONG_STATE;
 80107cc:	2321      	movs	r3, #33	; 0x21
 80107ce:	e016      	b.n	80107fe <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 80107d0:	4b0c      	ldr	r3, [pc, #48]	; (8010804 <rfalWakeUpModeStop+0x44>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    
    /* Disable Wake-Up Mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80107d8:	2104      	movs	r1, #4
 80107da:	2002      	movs	r0, #2
 80107dc:	f001 f8b2 	bl	8011944 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP) );
 80107e0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 80107e4:	f001 fb7c 	bl	8011ee0 <st25r3916DisableInterrupts>
    
    /* Re-Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 80107e8:	2203      	movs	r2, #3
 80107ea:	2103      	movs	r1, #3
 80107ec:	2002      	movs	r0, #2
 80107ee:	f001 f90d 	bl	8011a0c <st25r3916ChangeRegisterBits>
    
    /* Re-Enable the Oscillator */
    st25r3916OscOn();
 80107f2:	f000 fb45 	bl	8010e80 <st25r3916OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 80107f6:	2005      	movs	r0, #5
 80107f8:	f7f3 f834 	bl	8003864 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 80107fc:	2300      	movs	r3, #0
}
 80107fe:	4618      	mov	r0, r3
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	2000155c 	.word	0x2000155c

08010808 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	4603      	mov	r3, r0
 8010810:	80fb      	strh	r3, [r7, #6]
 8010812:	460b      	mov	r3, r1
 8010814:	717b      	strb	r3, [r7, #5]
 8010816:	4613      	mov	r3, r2
 8010818:	713b      	strb	r3, [r7, #4]
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 801081a:	88fb      	ldrh	r3, [r7, #6]
 801081c:	b2db      	uxtb	r3, r3
 801081e:	4618      	mov	r0, r3
 8010820:	f001 f998 	bl	8011b54 <st25r3916IsRegValid>
 8010824:	4603      	mov	r3, r0
 8010826:	f083 0301 	eor.w	r3, r3, #1
 801082a:	b2db      	uxtb	r3, r3
 801082c:	2b00      	cmp	r3, #0
 801082e:	d001      	beq.n	8010834 <rfalChipChangeRegBits+0x2c>
    {
        return ERR_PARAM;
 8010830:	2307      	movs	r3, #7
 8010832:	e007      	b.n	8010844 <rfalChipChangeRegBits+0x3c>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 8010834:	88fb      	ldrh	r3, [r7, #6]
 8010836:	b2db      	uxtb	r3, r3
 8010838:	793a      	ldrb	r2, [r7, #4]
 801083a:	7979      	ldrb	r1, [r7, #5]
 801083c:	4618      	mov	r0, r3
 801083e:	f001 f8e5 	bl	8011a0c <st25r3916ChangeRegisterBits>
 8010842:	4603      	mov	r3, r0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	4603      	mov	r3, r0
 8010854:	80fb      	strh	r3, [r7, #6]
 8010856:	460b      	mov	r3, r1
 8010858:	717b      	strb	r3, [r7, #5]
 801085a:	4613      	mov	r3, r2
 801085c:	713b      	strb	r3, [r7, #4]
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 801085e:	88fb      	ldrh	r3, [r7, #6]
 8010860:	b2db      	uxtb	r3, r3
 8010862:	793a      	ldrb	r2, [r7, #4]
 8010864:	7979      	ldrb	r1, [r7, #5]
 8010866:	4618      	mov	r0, r3
 8010868:	f001 f91c 	bl	8011aa4 <st25r3916ChangeTestRegisterBits>
    return ERR_NONE;
 801086c:	2300      	movs	r3, #0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b086      	sub	sp, #24
 801087a:	af00      	add	r7, sp, #0
 801087c:	4603      	mov	r3, r0
 801087e:	60b9      	str	r1, [r7, #8]
 8010880:	607a      	str	r2, [r7, #4]
 8010882:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 8010884:	2300      	movs	r3, #0
 8010886:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8010888:	2300      	movs	r3, #0
 801088a:	75fb      	strb	r3, [r7, #23]
 801088c:	e072      	b.n	8010974 <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 801088e:	2001      	movs	r0, #1
 8010890:	f7f1 f86e 	bl	8001970 <HAL_Delay>
        
        if( i==0U )
 8010894:	7dfb      	ldrb	r3, [r7, #23]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d107      	bne.n	80108aa <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 801089a:	f107 0312 	add.w	r3, r7, #18
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 f8c6 	bl	8010a30 <rfalSt25tbPollerPcall>
 80108a4:	4603      	mov	r3, r0
 80108a6:	82bb      	strh	r3, [r7, #20]
 80108a8:	e008      	b.n	80108bc <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 80108aa:	f107 0212 	add.w	r2, r7, #18
 80108ae:	7dfb      	ldrb	r3, [r7, #23]
 80108b0:	4611      	mov	r1, r2
 80108b2:	4618      	mov	r0, r3
 80108b4:	f000 f8e2 	bl	8010a7c <rfalSt25tbPollerSlotMarker>
 80108b8:	4603      	mov	r3, r0
 80108ba:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 80108bc:	8abb      	ldrh	r3, [r7, #20]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d148      	bne.n	8010954 <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	461a      	mov	r2, r3
 80108c8:	4613      	mov	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4413      	add	r3, r2
 80108ce:	005b      	lsls	r3, r3, #1
 80108d0:	461a      	mov	r2, r3
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	4413      	add	r3, r2
 80108d6:	7cba      	ldrb	r2, [r7, #18]
 80108d8:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	461a      	mov	r2, r3
 80108e0:	4613      	mov	r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4413      	add	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	461a      	mov	r2, r3
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	4413      	add	r3, r2
 80108ee:	2200      	movs	r2, #0
 80108f0:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 80108f2:	7cbb      	ldrb	r3, [r7, #18]
 80108f4:	4618      	mov	r0, r3
 80108f6:	f000 f8f4 	bl	8010ae2 <rfalSt25tbPollerSelect>
 80108fa:	4603      	mov	r3, r0
 80108fc:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00b      	beq.n	801091e <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	461a      	mov	r2, r3
 801090c:	4613      	mov	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4413      	add	r3, r2
 8010912:	005b      	lsls	r3, r3, #1
 8010914:	3b0a      	subs	r3, #10
 8010916:	68ba      	ldr	r2, [r7, #8]
 8010918:	4413      	add	r3, r2
 801091a:	2201      	movs	r2, #1
 801091c:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 801091e:	8abb      	ldrh	r3, [r7, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d10d      	bne.n	8010940 <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	461a      	mov	r2, r3
 801092a:	4613      	mov	r3, r2
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	4413      	add	r3, r2
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	461a      	mov	r2, r3
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	4413      	add	r3, r2
 8010938:	3301      	adds	r3, #1
 801093a:	4618      	mov	r0, r3
 801093c:	f000 f8fd 	bl	8010b3a <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 8010940:	8abb      	ldrh	r3, [r7, #20]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d10e      	bne.n	8010964 <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	3301      	adds	r3, #1
 801094c:	b2da      	uxtb	r2, r3
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	701a      	strb	r2, [r3, #0]
 8010952:	e007      	b.n	8010964 <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 8010954:	8abb      	ldrh	r3, [r7, #20]
 8010956:	2b15      	cmp	r3, #21
 8010958:	d002      	beq.n	8010960 <rfalSt25tbPollerDoCollisionResolution+0xea>
 801095a:	8abb      	ldrh	r3, [r7, #20]
 801095c:	2b09      	cmp	r3, #9
 801095e:	d101      	bne.n	8010964 <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 8010960:	2301      	movs	r3, #1
 8010962:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	7bfa      	ldrb	r2, [r7, #15]
 801096a:	429a      	cmp	r2, r3
 801096c:	d906      	bls.n	801097c <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 801096e:	7dfb      	ldrb	r3, [r7, #23]
 8010970:	3301      	adds	r3, #1
 8010972:	75fb      	strb	r3, [r7, #23]
 8010974:	7dfb      	ldrb	r3, [r7, #23]
 8010976:	2b0f      	cmp	r3, #15
 8010978:	d989      	bls.n	801088e <rfalSt25tbPollerDoCollisionResolution+0x18>
 801097a:	e000      	b.n	801097e <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 801097c:	bf00      	nop
        }
    }
    return col;
 801097e:	7cfb      	ldrb	r3, [r7, #19]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3718      	adds	r7, #24
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 801098c:	f7fb fa32 	bl	800bdf4 <rfalNfcbPollerInitialize>
 8010990:	4603      	mov	r3, r0
}
 8010992:	4618      	mov	r0, r3
 8010994:	bd80      	pop	{r7, pc}

08010996 <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b084      	sub	sp, #16
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 801099e:	2300      	movs	r3, #0
 80109a0:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 80109a2:	f107 030d 	add.w	r3, r7, #13
 80109a6:	4618      	mov	r0, r3
 80109a8:	f000 f815 	bl	80109d6 <rfalSt25tbPollerInitiate>
 80109ac:	4603      	mov	r3, r0
 80109ae:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 80109b0:	89fb      	ldrh	r3, [r7, #14]
 80109b2:	2b15      	cmp	r3, #21
 80109b4:	d002      	beq.n	80109bc <rfalSt25tbPollerCheckPresence+0x26>
 80109b6:	89fb      	ldrh	r3, [r7, #14]
 80109b8:	2b09      	cmp	r3, #9
 80109ba:	d101      	bne.n	80109c0 <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 80109bc:	2300      	movs	r3, #0
 80109be:	e006      	b.n	80109ce <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d002      	beq.n	80109cc <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 80109c6:	7b7a      	ldrb	r2, [r7, #13]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 80109cc:	89fb      	ldrh	r3, [r7, #14]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b08a      	sub	sp, #40	; 0x28
 80109da:	af04      	add	r7, sp, #16
 80109dc:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 80109de:	2306      	movs	r3, #6
 80109e0:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 80109e2:	2300      	movs	r3, #0
 80109e4:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80109e6:	f107 020c 	add.w	r2, r7, #12
 80109ea:	f107 0010 	add.w	r0, r7, #16
 80109ee:	f241 036d 	movw	r3, #4205	; 0x106d
 80109f2:	9302      	str	r3, [sp, #8]
 80109f4:	2300      	movs	r3, #0
 80109f6:	9301      	str	r3, [sp, #4]
 80109f8:	f107 0314 	add.w	r3, r7, #20
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	2303      	movs	r3, #3
 8010a00:	2102      	movs	r1, #2
 8010a02:	f7fd f8b1 	bl	800db68 <rfalTransceiveBlockingTxRx>
 8010a06:	4603      	mov	r3, r0
 8010a08:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8010a0a:	8afb      	ldrh	r3, [r7, #22]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d104      	bne.n	8010a1a <rfalSt25tbPollerInitiate+0x44>
 8010a10:	8abb      	ldrh	r3, [r7, #20]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d001      	beq.n	8010a1a <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 8010a16:	230b      	movs	r3, #11
 8010a18:	e006      	b.n	8010a28 <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d002      	beq.n	8010a26 <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 8010a20:	7b3a      	ldrb	r2, [r7, #12]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8010a26:	8afb      	ldrh	r3, [r7, #22]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3718      	adds	r7, #24
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af04      	add	r7, sp, #16
 8010a36:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 8010a38:	2306      	movs	r3, #6
 8010a3a:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 8010a3c:	2304      	movs	r3, #4
 8010a3e:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010a40:	f107 0008 	add.w	r0, r7, #8
 8010a44:	f241 036d 	movw	r3, #4205	; 0x106d
 8010a48:	9302      	str	r3, [sp, #8]
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	9301      	str	r3, [sp, #4]
 8010a4e:	f107 030c 	add.w	r3, r7, #12
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	2301      	movs	r3, #1
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	2102      	movs	r1, #2
 8010a5a:	f7fd f885 	bl	800db68 <rfalTransceiveBlockingTxRx>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8010a62:	89fb      	ldrh	r3, [r7, #14]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d104      	bne.n	8010a72 <rfalSt25tbPollerPcall+0x42>
 8010a68:	89bb      	ldrh	r3, [r7, #12]
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d001      	beq.n	8010a72 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 8010a6e:	230b      	movs	r3, #11
 8010a70:	e000      	b.n	8010a74 <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 8010a72:	89fb      	ldrh	r3, [r7, #14]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3710      	adds	r7, #16
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b088      	sub	sp, #32
 8010a80:	af04      	add	r7, sp, #16
 8010a82:	4603      	mov	r3, r0
 8010a84:	6039      	str	r1, [r7, #0]
 8010a86:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d002      	beq.n	8010a94 <rfalSt25tbPollerSlotMarker+0x18>
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	2b0f      	cmp	r3, #15
 8010a92:	d901      	bls.n	8010a98 <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 8010a94:	2307      	movs	r3, #7
 8010a96:	e020      	b.n	8010ada <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 8010a98:	79fb      	ldrb	r3, [r7, #7]
 8010a9a:	011b      	lsls	r3, r3, #4
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	f043 0306 	orr.w	r3, r3, #6
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010aa6:	f107 000b 	add.w	r0, r7, #11
 8010aaa:	f241 036d 	movw	r3, #4205	; 0x106d
 8010aae:	9302      	str	r3, [sp, #8]
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	9301      	str	r3, [sp, #4]
 8010ab4:	f107 030c 	add.w	r3, r7, #12
 8010ab8:	9300      	str	r3, [sp, #0]
 8010aba:	2301      	movs	r3, #1
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	2101      	movs	r1, #1
 8010ac0:	f7fd f852 	bl	800db68 <rfalTransceiveBlockingTxRx>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8010ac8:	89fb      	ldrh	r3, [r7, #14]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d104      	bne.n	8010ad8 <rfalSt25tbPollerSlotMarker+0x5c>
 8010ace:	89bb      	ldrh	r3, [r7, #12]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d001      	beq.n	8010ad8 <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 8010ad4:	230b      	movs	r3, #11
 8010ad6:	e000      	b.n	8010ada <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 8010ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b08a      	sub	sp, #40	; 0x28
 8010ae6:	af04      	add	r7, sp, #16
 8010ae8:	4603      	mov	r3, r0
 8010aea:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 8010aec:	230e      	movs	r3, #14
 8010aee:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 8010af0:	79fb      	ldrb	r3, [r7, #7]
 8010af2:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010af4:	f107 020f 	add.w	r2, r7, #15
 8010af8:	f107 0010 	add.w	r0, r7, #16
 8010afc:	f241 036d 	movw	r3, #4205	; 0x106d
 8010b00:	9302      	str	r3, [sp, #8]
 8010b02:	2300      	movs	r3, #0
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	f107 0314 	add.w	r3, r7, #20
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	2102      	movs	r1, #2
 8010b10:	f7fd f82a 	bl	800db68 <rfalTransceiveBlockingTxRx>
 8010b14:	4603      	mov	r3, r0
 8010b16:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 8010b18:	8afb      	ldrh	r3, [r7, #22]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d108      	bne.n	8010b30 <rfalSt25tbPollerSelect+0x4e>
 8010b1e:	8abb      	ldrh	r3, [r7, #20]
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d103      	bne.n	8010b2c <rfalSt25tbPollerSelect+0x4a>
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
 8010b26:	79fa      	ldrb	r2, [r7, #7]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d001      	beq.n	8010b30 <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 8010b2c:	230b      	movs	r3, #11
 8010b2e:	e000      	b.n	8010b32 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 8010b30:	8afb      	ldrh	r3, [r7, #22]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3718      	adds	r7, #24
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b088      	sub	sp, #32
 8010b3e:	af04      	add	r7, sp, #16
 8010b40:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 8010b42:	230b      	movs	r3, #11
 8010b44:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010b46:	f107 000b 	add.w	r0, r7, #11
 8010b4a:	f241 036d 	movw	r3, #4205	; 0x106d
 8010b4e:	9302      	str	r3, [sp, #8]
 8010b50:	2300      	movs	r3, #0
 8010b52:	9301      	str	r3, [sp, #4]
 8010b54:	f107 030c 	add.w	r3, r7, #12
 8010b58:	9300      	str	r3, [sp, #0]
 8010b5a:	2308      	movs	r3, #8
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	2101      	movs	r1, #1
 8010b60:	f7fd f802 	bl	800db68 <rfalTransceiveBlockingTxRx>
 8010b64:	4603      	mov	r3, r0
 8010b66:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 8010b68:	89fb      	ldrh	r3, [r7, #14]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d104      	bne.n	8010b78 <rfalSt25tbPollerGetUID+0x3e>
 8010b6e:	89bb      	ldrh	r3, [r7, #12]
 8010b70:	2b08      	cmp	r3, #8
 8010b72:	d001      	beq.n	8010b78 <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 8010b74:	230b      	movs	r3, #11
 8010b76:	e000      	b.n	8010b7a <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 8010b78:	89fb      	ldrh	r3, [r7, #14]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b086      	sub	sp, #24
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	4603      	mov	r3, r0
 8010b8a:	60b9      	str	r1, [r7, #8]
 8010b8c:	607a      	str	r2, [r7, #4]
 8010b8e:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d005      	beq.n	8010ba2 <rfalSt25tbPollerCollisionResolution+0x20>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d002      	beq.n	8010ba2 <rfalSt25tbPollerCollisionResolution+0x20>
 8010b9c:	7bfb      	ldrb	r3, [r7, #15]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d101      	bne.n	8010ba6 <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 8010ba2:	2307      	movs	r3, #7
 8010ba4:	e05c      	b.n	8010c60 <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 8010bac:	f107 0314 	add.w	r3, r7, #20
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7ff ff10 	bl	80109d6 <rfalSt25tbPollerInitiate>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 8010bba:	8afb      	ldrh	r3, [r7, #22]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d139      	bne.n	8010c34 <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	4613      	mov	r3, r2
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	4413      	add	r3, r2
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	461a      	mov	r2, r3
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	4413      	add	r3, r2
 8010bd4:	7d3a      	ldrb	r2, [r7, #20]
 8010bd6:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	461a      	mov	r2, r3
 8010bde:	4613      	mov	r3, r2
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	005b      	lsls	r3, r3, #1
 8010be6:	461a      	mov	r2, r3
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	4413      	add	r3, r2
 8010bec:	2200      	movs	r2, #0
 8010bee:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 8010bf0:	7d3b      	ldrb	r3, [r7, #20]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7ff ff75 	bl	8010ae2 <rfalSt25tbPollerSelect>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 8010bfc:	8afb      	ldrh	r3, [r7, #22]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d10f      	bne.n	8010c22 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	461a      	mov	r2, r3
 8010c08:	4613      	mov	r3, r2
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	4413      	add	r3, r2
 8010c0e:	005b      	lsls	r3, r3, #1
 8010c10:	461a      	mov	r2, r3
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	4413      	add	r3, r2
 8010c16:	3301      	adds	r3, #1
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff ff8e 	bl	8010b3a <rfalSt25tbPollerGetUID>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 8010c22:	8afb      	ldrh	r3, [r7, #22]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d105      	bne.n	8010c34 <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	b2da      	uxtb	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	7bfa      	ldrb	r2, [r7, #15]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d90f      	bls.n	8010c5e <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 8010c3e:	7bfb      	ldrb	r3, [r7, #15]
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	68b9      	ldr	r1, [r7, #8]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7ff fe16 	bl	8010876 <rfalSt25tbPollerDoCollisionResolution>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 8010c4e:	7d7b      	ldrb	r3, [r7, #21]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d004      	beq.n	8010c5e <rfalSt25tbPollerCollisionResolution+0xdc>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	7bfa      	ldrb	r2, [r7, #15]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d8ef      	bhi.n	8010c3e <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3718      	adds	r7, #24
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 8010c6e:	2200      	movs	r2, #0
 8010c70:	2100      	movs	r1, #0
 8010c72:	2002      	movs	r0, #2
 8010c74:	f7fc f860 	bl	800cd38 <rfalSetMode>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	80fb      	strh	r3, [r7, #6]
 8010c7c:	88fb      	ldrh	r3, [r7, #6]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <rfalT1TPollerInitialize+0x1e>
 8010c82:	88fb      	ldrh	r3, [r7, #6]
 8010c84:	e00e      	b.n	8010ca4 <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8010c86:	2001      	movs	r0, #1
 8010c88:	f7fc fc9a 	bl	800d5c0 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	f7fc fceb 	bl	800d668 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 8010c92:	f240 4094 	movw	r0, #1172	; 0x494
 8010c96:	f7fc fcd3 	bl	800d640 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 8010c9a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8010c9e:	f7fc fcb1 	bl	800d604 <rfalSetFDTPoll>
    
    return ERR_NONE;
 8010ca2:	2300      	movs	r3, #0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b08a      	sub	sp, #40	; 0x28
 8010cb0:	af04      	add	r7, sp, #16
 8010cb2:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d101      	bne.n	8010cbe <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 8010cba:	2307      	movs	r3, #7
 8010cbc:	e02a      	b.n	8010d14 <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 8010cbe:	f107 030c 	add.w	r3, r7, #12
 8010cc2:	2207      	movs	r2, #7
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f001 fa50 	bl	801216c <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 8010ccc:	2378      	movs	r3, #120	; 0x78
 8010cce:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 8010cd0:	f107 000c 	add.w	r0, r7, #12
 8010cd4:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8010cd8:	9302      	str	r3, [sp, #8]
 8010cda:	2300      	movs	r3, #0
 8010cdc:	9301      	str	r3, [sp, #4]
 8010cde:	f107 030a 	add.w	r3, r7, #10
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	2306      	movs	r3, #6
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	2107      	movs	r1, #7
 8010cea:	f7fc ff3d 	bl	800db68 <rfalTransceiveBlockingTxRx>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	82fb      	strh	r3, [r7, #22]
 8010cf2:	8afb      	ldrh	r3, [r7, #22]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d001      	beq.n	8010cfc <rfalT1TPollerRid+0x50>
 8010cf8:	8afb      	ldrh	r3, [r7, #22]
 8010cfa:	e00b      	b.n	8010d14 <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 8010cfc:	897b      	ldrh	r3, [r7, #10]
 8010cfe:	2b06      	cmp	r3, #6
 8010d00:	d105      	bne.n	8010d0e <rfalT1TPollerRid+0x62>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d0a:	2b10      	cmp	r3, #16
 8010d0c:	d001      	beq.n	8010d12 <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 8010d0e:	230b      	movs	r3, #11
 8010d10:	e000      	b.n	8010d14 <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3718      	adds	r7, #24
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <NFC06A1_LED_OFF>:
  * @brief     This function light off selected Led
  * @param[in] led : Led to be lit off
  * @return    None
  */
void NFC06A1_LED_OFF(const NFC06A1_Led_E led)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	4603      	mov	r3, r0
 8010d24:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(NFC06A1_Led[led].NFC06A1_LED_PIN_PORT, NFC06A1_Led[led].NFC06A1_LED_PIN, GPIO_PIN_RESET);
 8010d26:	79fb      	ldrb	r3, [r7, #7]
 8010d28:	4a07      	ldr	r2, [pc, #28]	; (8010d48 <NFC06A1_LED_OFF+0x2c>)
 8010d2a:	00db      	lsls	r3, r3, #3
 8010d2c:	4413      	add	r3, r2
 8010d2e:	6858      	ldr	r0, [r3, #4]
 8010d30:	79fb      	ldrb	r3, [r7, #7]
 8010d32:	4a05      	ldr	r2, [pc, #20]	; (8010d48 <NFC06A1_LED_OFF+0x2c>)
 8010d34:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	f7f1 fa17 	bl	800216e <HAL_GPIO_WritePin>
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	20000088 	.word	0x20000088

08010d4c <NFC06A1_LED_Toggle>:
  * @brief     Toggles the selected LED
  * @param[in] led : Specifies the Led to be toggled
  * @return    None
  */
void NFC06A1_LED_Toggle(const NFC06A1_Led_E led)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	4603      	mov	r3, r0
 8010d54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(NFC06A1_Led[led].NFC06A1_LED_PIN_PORT, NFC06A1_Led[led].NFC06A1_LED_PIN);
 8010d56:	79fb      	ldrb	r3, [r7, #7]
 8010d58:	4a07      	ldr	r2, [pc, #28]	; (8010d78 <NFC06A1_LED_Toggle+0x2c>)
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	4413      	add	r3, r2
 8010d5e:	685a      	ldr	r2, [r3, #4]
 8010d60:	79fb      	ldrb	r3, [r7, #7]
 8010d62:	4905      	ldr	r1, [pc, #20]	; (8010d78 <NFC06A1_LED_Toggle+0x2c>)
 8010d64:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8010d68:	4619      	mov	r1, r3
 8010d6a:	4610      	mov	r0, r2
 8010d6c:	f7f1 fa17 	bl	800219e <HAL_GPIO_TogglePin>
}
 8010d70:	bf00      	nop
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	20000088 	.word	0x20000088

08010d7c <st25r3916ExecuteCommandAndGetResult>:
 * LOCAL FUNCTION
 ******************************************************************************
 */

ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tout, uint8_t* result )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	603b      	str	r3, [r7, #0]
 8010d84:	4603      	mov	r3, r0
 8010d86:	71fb      	strb	r3, [r7, #7]
 8010d88:	460b      	mov	r3, r1
 8010d8a:	71bb      	strb	r3, [r7, #6]
 8010d8c:	4613      	mov	r3, r2
 8010d8e:	717b      	strb	r3, [r7, #5]
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 8010d90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010d94:	f001 f84e 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 8010d98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010d9c:	f001 f894 	bl	8011ec8 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 8010da0:	79fb      	ldrb	r3, [r7, #7]
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 fd6d 	bl	8011882 <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tout );
 8010da8:	797b      	ldrb	r3, [r7, #5]
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	4619      	mov	r1, r3
 8010dae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010db2:	f000 ffeb 	bl	8011d8c <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 8010db6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010dba:	f001 f891 	bl	8011ee0 <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d004      	beq.n	8010dce <st25r3916ExecuteCommandAndGetResult+0x52>
    {
        st25r3916ReadRegister( resReg, result);
 8010dc4:	79bb      	ldrb	r3, [r7, #6]
 8010dc6:	6839      	ldr	r1, [r7, #0]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f000 fc2d 	bl	8011628 <st25r3916ReadRegister>
    }

    return ERR_NONE;
 8010dce:	2300      	movs	r3, #0

}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <st25r3916Initialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode st25r3916Initialize( void )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;
    ReturnCode ret;

    /* Set default state on the ST25R3916 */
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 8010dde:	20c1      	movs	r0, #193	; 0xc1
 8010de0:	f000 fd4f 	bl	8011882 <st25r3916ExecuteCommand>

#ifndef RFAL_USE_I2C
    /* Increase MISO driving level as SPI can go up to 10MHz */
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_drv_lvl);
 8010de4:	2104      	movs	r1, #4
 8010de6:	2001      	movs	r0, #1
 8010de8:	f000 fc5c 	bl	80116a4 <st25r3916WriteRegister>
#endif /* RFAL_USE_I2C */

    if( !st25r3916CheckChipID( NULL ) )
 8010dec:	2000      	movs	r0, #0
 8010dee:	f000 fabf 	bl	8011370 <st25r3916CheckChipID>
 8010df2:	4603      	mov	r3, r0
 8010df4:	f083 0301 	eor.w	r3, r3, #1
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d003      	beq.n	8010e06 <st25r3916Initialize+0x2e>
    {
        platformErrorHandle();
 8010dfe:	f7f0 fa9a 	bl	8001336 <Error_Handler>
        return ERR_HW_MISMATCH;
 8010e02:	2324      	movs	r3, #36	; 0x24
 8010e04:	e036      	b.n	8010e74 <st25r3916Initialize+0x9c>
    }

    st25r3916InitInterrupts();
 8010e06:	f000 fef7 	bl	8011bf8 <st25r3916InitInterrupts>
    st25r3916ledInit();
 8010e0a:	f001 f8a9 	bl	8011f60 <st25r3916ledInit>


    gST25R3916NRT_64fcs = 0;
 8010e0e:	4b1b      	ldr	r3, [pc, #108]	; (8010e7c <st25r3916Initialize+0xa4>)
 8010e10:	2200      	movs	r2, #0
 8010e12:	601a      	str	r2, [r3, #0]

#ifndef RFAL_USE_I2C
    /* Enable pull downs on MISO line */
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 8010e14:	2118      	movs	r1, #24
 8010e16:	2001      	movs	r0, #1
 8010e18:	f000 fdcb 	bl	80119b2 <st25r3916SetRegisterBits>
#endif /* RFAL_USE_I2C */

    /* Disable internal overheat protection */
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 8010e1c:	2210      	movs	r2, #16
 8010e1e:	2110      	movs	r1, #16
 8010e20:	2004      	movs	r0, #4
 8010e22:	f000 fe3f 	bl	8011aa4 <st25r3916ChangeTestRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, 0U );
    /*******************************************************************************/
#endif /* ST25R_SELFTEST */

    /* Enable Oscillator and wait until it gets stable */
    ret = st25r3916OscOn();
 8010e26:	f000 f82b 	bl	8010e80 <st25r3916OscOn>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	80fb      	strh	r3, [r7, #6]
    if( ret != ERR_NONE )
 8010e2e:	88fb      	ldrh	r3, [r7, #6]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d003      	beq.n	8010e3c <st25r3916Initialize+0x64>
    {
        platformErrorHandle();
 8010e34:	f7f0 fa7f 	bl	8001336 <Error_Handler>
        return ret;
 8010e38:	88fb      	ldrh	r3, [r7, #6]
 8010e3a:	e01b      	b.n	8010e74 <st25r3916Initialize+0x9c>
    }

    /* Measure VDD and set sup3V bit according to Power supplied  */
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	f000 f865 	bl	8010f0c <st25r3916MeasureVoltage>
 8010e42:	4603      	mov	r3, r0
 8010e44:	80bb      	strh	r3, [r7, #4]
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 8010e46:	88bb      	ldrh	r3, [r7, #4]
 8010e48:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8010e4c:	d201      	bcs.n	8010e52 <st25r3916Initialize+0x7a>
 8010e4e:	2380      	movs	r3, #128	; 0x80
 8010e50:	e000      	b.n	8010e54 <st25r3916Initialize+0x7c>
 8010e52:	2300      	movs	r3, #0
 8010e54:	461a      	mov	r2, r3
 8010e56:	2180      	movs	r1, #128	; 0x80
 8010e58:	2001      	movs	r0, #1
 8010e5a:	f000 fdd7 	bl	8011a0c <st25r3916ChangeRegisterBits>

    /* Make sure Transmitter and Receiver are disabled */
    st25r3916TxRxOff();
 8010e5e:	2148      	movs	r1, #72	; 0x48
 8010e60:	2002      	movs	r0, #2
 8010e62:	f000 fd6f 	bl	8011944 <st25r3916ClrRegisterBits>
    /*******************************************************************************/
#endif /* ST25R_SELFTEST_TIMER */


    /* After reset all interrupts are enabled, so disable them at first */
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8010e66:	f04f 30ff 	mov.w	r0, #4294967295
 8010e6a:	f001 f839 	bl	8011ee0 <st25r3916DisableInterrupts>

    /* And clear them, just to be sure */
    st25r3916ClearInterrupts();
 8010e6e:	f001 f843 	bl	8011ef8 <st25r3916ClearInterrupts>

    return ERR_NONE;
 8010e72:	2300      	movs	r3, #0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	20001960 	.word	0x20001960

08010e80 <st25r3916OscOn>:
}


/*******************************************************************************/
ReturnCode st25r3916OscOn( void )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 8010e84:	2280      	movs	r2, #128	; 0x80
 8010e86:	2180      	movs	r1, #128	; 0x80
 8010e88:	2002      	movs	r0, #2
 8010e8a:	f000 fe43 	bl	8011b14 <st25r3916CheckReg>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	f083 0301 	eor.w	r3, r3, #1
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d010      	beq.n	8010ebc <st25r3916OscOn+0x3c>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 8010e9a:	2080      	movs	r0, #128	; 0x80
 8010e9c:	f000 ffca 	bl	8011e34 <st25r3916GetInterrupt>

        /* Enable oscillator frequency stable interrupt */
        st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 8010ea0:	2080      	movs	r0, #128	; 0x80
 8010ea2:	f001 f811 	bl	8011ec8 <st25r3916EnableInterrupts>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 8010ea6:	2180      	movs	r1, #128	; 0x80
 8010ea8:	2002      	movs	r0, #2
 8010eaa:	f000 fd82 	bl	80119b2 <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
 8010eae:	210a      	movs	r1, #10
 8010eb0:	2080      	movs	r0, #128	; 0x80
 8010eb2:	f000 ff6b 	bl	8011d8c <st25r3916WaitForInterruptsTimed>
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 8010eb6:	2080      	movs	r0, #128	; 0x80
 8010eb8:	f001 f812 	bl	8011ee0 <st25r3916DisableInterrupts>
    }

    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok ) )
 8010ebc:	2210      	movs	r2, #16
 8010ebe:	2110      	movs	r1, #16
 8010ec0:	2031      	movs	r0, #49	; 0x31
 8010ec2:	f000 fe27 	bl	8011b14 <st25r3916CheckReg>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	f083 0301 	eor.w	r3, r3, #1
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <st25r3916OscOn+0x56>
    {
        return ERR_SYSTEM;
 8010ed2:	2308      	movs	r3, #8
 8010ed4:	e000      	b.n	8010ed8 <st25r3916OscOn+0x58>
    }

    return ERR_NONE;
 8010ed6:	2300      	movs	r3, #0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	bd80      	pop	{r7, pc}

08010edc <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	71fb      	strb	r3, [r7, #7]
    uint8_t result;

    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	461a      	mov	r2, r3
 8010eea:	2107      	movs	r1, #7
 8010eec:	202c      	movs	r0, #44	; 0x2c
 8010eee:	f000 fd8d 	bl	8011a0c <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 8010ef2:	f107 030f 	add.w	r3, r7, #15
 8010ef6:	2264      	movs	r2, #100	; 0x64
 8010ef8:	2125      	movs	r1, #37	; 0x25
 8010efa:	20df      	movs	r0, #223	; 0xdf
 8010efc:	f7ff ff3e 	bl	8010d7c <st25r3916ExecuteCommandAndGetResult>

    return result;
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3710      	adds	r7, #16
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
	...

08010f0c <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4603      	mov	r3, r0
 8010f14:	71fb      	strb	r3, [r7, #7]
    uint8_t result;
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 8010f16:	79fb      	ldrb	r3, [r7, #7]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7ff ffdf 	bl	8010edc <st25r3916MeasurePowerSupply>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	73fb      	strb	r3, [r7, #15]

    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 8010f22:	7bfb      	ldrb	r3, [r7, #15]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	461a      	mov	r2, r3
 8010f28:	0052      	lsls	r2, r2, #1
 8010f2a:	441a      	add	r2, r3
 8010f2c:	00d2      	lsls	r2, r2, #3
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	81bb      	strh	r3, [r7, #12]
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 8010f32:	7bfb      	ldrb	r3, [r7, #15]
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	3305      	adds	r3, #5
 8010f38:	4a06      	ldr	r2, [pc, #24]	; (8010f54 <st25r3916MeasureVoltage+0x48>)
 8010f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8010f3e:	08db      	lsrs	r3, r3, #3
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	89bb      	ldrh	r3, [r7, #12]
 8010f44:	4413      	add	r3, r2
 8010f46:	81bb      	strh	r3, [r7, #12]

    return mV;
 8010f48:	89bb      	ldrh	r3, [r7, #12]
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3710      	adds	r7, #16
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	cccccccd 	.word	0xcccccccd

08010f58 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8010f60:	2180      	movs	r1, #128	; 0x80
 8010f62:	202c      	movs	r0, #44	; 0x2c
 8010f64:	f000 fd25 	bl	80119b2 <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8010f68:	2180      	movs	r1, #128	; 0x80
 8010f6a:	202c      	movs	r0, #44	; 0x2c
 8010f6c:	f000 fcea 	bl	8011944 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 8010f70:	f107 030f 	add.w	r3, r7, #15
 8010f74:	2206      	movs	r2, #6
 8010f76:	216c      	movs	r1, #108	; 0x6c
 8010f78:	20d6      	movs	r0, #214	; 0xd6
 8010f7a:	f7ff feff 	bl	8010d7c <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 8010f7e:	7bfb      	ldrb	r3, [r7, #15]
 8010f80:	091b      	lsrs	r3, r3, #4
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	73fb      	strb	r3, [r7, #15]

    if( result_mV != NULL )
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d02b      	beq.n	8010fe4 <st25r3916AdjustRegulators+0x8c>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 8010f8c:	2280      	movs	r2, #128	; 0x80
 8010f8e:	2180      	movs	r1, #128	; 0x80
 8010f90:	2001      	movs	r0, #1
 8010f92:	f000 fdbf 	bl	8011b14 <st25r3916CheckReg>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d00d      	beq.n	8010fb8 <st25r3916AdjustRegulators+0x60>
        {
            result = MIN( result, (uint8_t)(result-5U) );/* In 3.3V mode [0,4] are not used                       */
 8010f9c:	7bfb      	ldrb	r3, [r7, #15]
 8010f9e:	2b04      	cmp	r3, #4
 8010fa0:	d903      	bls.n	8010faa <st25r3916AdjustRegulators+0x52>
 8010fa2:	7bfb      	ldrb	r3, [r7, #15]
 8010fa4:	3b05      	subs	r3, #5
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	e000      	b.n	8010fac <st25r3916AdjustRegulators+0x54>
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	73fb      	strb	r3, [r7, #15]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8010fb4:	801a      	strh	r2, [r3, #0]
 8010fb6:	e003      	b.n	8010fc0 <st25r3916AdjustRegulators+0x68>
        }
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8010fbe:	801a      	strh	r2, [r3, #0]
        }

        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	881a      	ldrh	r2, [r3, #0]
 8010fc4:	7bfb      	ldrb	r3, [r7, #15]
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	4619      	mov	r1, r3
 8010fca:	0089      	lsls	r1, r1, #2
 8010fcc:	440b      	add	r3, r1
 8010fce:	4619      	mov	r1, r3
 8010fd0:	0088      	lsls	r0, r1, #2
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	440b      	add	r3, r1
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	4413      	add	r3, r2
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	801a      	strh	r2, [r3, #0]
    }
    return ERR_NONE;
 8010fe4:	2300      	movs	r3, #0
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3710      	adds	r7, #16
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <st25r3916MeasureAmplitude>:


/*******************************************************************************/
ReturnCode st25r3916MeasureAmplitude( uint8_t* result )
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b082      	sub	sp, #8
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_AMPLITUDE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_AMPLITUDE, result );
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	220a      	movs	r2, #10
 8010ffa:	2125      	movs	r1, #37	; 0x25
 8010ffc:	20d3      	movs	r0, #211	; 0xd3
 8010ffe:	f7ff febd 	bl	8010d7c <st25r3916ExecuteCommandAndGetResult>
 8011002:	4603      	mov	r3, r0
}
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <st25r3916MeasurePhase>:


/*******************************************************************************/
ReturnCode st25r3916MeasurePhase( uint8_t* result )
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_PHASE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_PHASE, result );
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	220a      	movs	r2, #10
 8011018:	2125      	movs	r1, #37	; 0x25
 801101a:	20d9      	movs	r0, #217	; 0xd9
 801101c:	f7ff feae 	bl	8010d7c <st25r3916ExecuteCommandAndGetResult>
 8011020:	4603      	mov	r3, r0
}
 8011022:	4618      	mov	r0, r3
 8011024:	3708      	adds	r7, #8
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <st25r3916MeasureCapacitance>:


/*******************************************************************************/
ReturnCode st25r3916MeasureCapacitance( uint8_t* result )
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b082      	sub	sp, #8
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_CAPACITANCE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_CAPACITANCE, result );
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	220a      	movs	r2, #10
 8011036:	2125      	movs	r1, #37	; 0x25
 8011038:	20de      	movs	r0, #222	; 0xde
 801103a:	f7ff fe9f 	bl	8010d7c <st25r3916ExecuteCommandAndGetResult>
 801103e:	4603      	mov	r3, r0
}
 8011040:	4618      	mov	r0, r3
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <st25r3916CalibrateCapacitiveSensor>:


/*******************************************************************************/
ReturnCode st25r3916CalibrateCapacitiveSensor( uint8_t* result )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;

    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 8011050:	21f8      	movs	r1, #248	; 0xf8
 8011052:	202f      	movs	r0, #47	; 0x2f
 8011054:	f000 fc76 	bl	8011944 <st25r3916ClrRegisterBits>

    /* Execute automatic calibration */
    ret = st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_CALIBRATE_C_SENSOR, ST25R3916_REG_CAP_SENSOR_RESULT, ST25R3916_TOUT_CALIBRATE_CAP_SENSOR, &res );
 8011058:	f107 030d 	add.w	r3, r7, #13
 801105c:	2204      	movs	r2, #4
 801105e:	2130      	movs	r1, #48	; 0x30
 8011060:	20dd      	movs	r0, #221	; 0xdd
 8011062:	f7ff fe8b 	bl	8010d7c <st25r3916ExecuteCommandAndGetResult>
 8011066:	4603      	mov	r3, r0
 8011068:	81fb      	strh	r3, [r7, #14]

    /* Check wether the calibration was successull */
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 801106a:	7b7b      	ldrb	r3, [r7, #13]
 801106c:	f003 0304 	and.w	r3, r3, #4
 8011070:	2b00      	cmp	r3, #0
 8011072:	d007      	beq.n	8011084 <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 8011074:	7b7b      	ldrb	r3, [r7, #13]
 8011076:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 801107a:	2b00      	cmp	r3, #0
 801107c:	d102      	bne.n	8011084 <st25r3916CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 801107e:	89fb      	ldrh	r3, [r7, #14]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <st25r3916CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 8011084:	2303      	movs	r3, #3
 8011086:	e008      	b.n	801109a <st25r3916CalibrateCapacitiveSensor+0x52>
    }

    if( result != NULL )
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d004      	beq.n	8011098 <st25r3916CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_shift);
 801108e:	7b7b      	ldrb	r3, [r7, #13]
 8011090:	08db      	lsrs	r3, r3, #3
 8011092:	b2da      	uxtb	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	701a      	strb	r2, [r3, #0]
    }

    return ERR_NONE;
 8011098:	2300      	movs	r3, #0
}
 801109a:	4618      	mov	r0, r3
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <st25r3916SetBitrate>:


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b084      	sub	sp, #16
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	4603      	mov	r3, r0
 80110aa:	460a      	mov	r2, r1
 80110ac:	71fb      	strb	r3, [r7, #7]
 80110ae:	4613      	mov	r3, r2
 80110b0:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 80110b2:	f107 030f 	add.w	r3, r7, #15
 80110b6:	4619      	mov	r1, r3
 80110b8:	2004      	movs	r0, #4
 80110ba:	f000 fab5 	bl	8011628 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 80110be:	79bb      	ldrb	r3, [r7, #6]
 80110c0:	2bff      	cmp	r3, #255	; 0xff
 80110c2:	d00e      	beq.n	80110e2 <st25r3916SetBitrate+0x40>
    {
        if(rxrate > ST25R3916_BR_848)
 80110c4:	79bb      	ldrb	r3, [r7, #6]
 80110c6:	2b03      	cmp	r3, #3
 80110c8:	d901      	bls.n	80110ce <st25r3916SetBitrate+0x2c>
        {
            return ERR_PARAM;
 80110ca:	2307      	movs	r3, #7
 80110cc:	e025      	b.n	801111a <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 80110ce:	7bfb      	ldrb	r3, [r7, #15]
 80110d0:	f023 0303 	bic.w	r3, r3, #3
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	73fb      	strb	r3, [r7, #15]
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 80110d8:	7bfa      	ldrb	r2, [r7, #15]
 80110da:	79bb      	ldrb	r3, [r7, #6]
 80110dc:	4313      	orrs	r3, r2
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	73fb      	strb	r3, [r7, #15]
    }
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 80110e2:	79fb      	ldrb	r3, [r7, #7]
 80110e4:	2bff      	cmp	r3, #255	; 0xff
 80110e6:	d012      	beq.n	801110e <st25r3916SetBitrate+0x6c>
    {
        if(txrate > ST25R3916_BR_6780)
 80110e8:	79fb      	ldrb	r3, [r7, #7]
 80110ea:	2b07      	cmp	r3, #7
 80110ec:	d901      	bls.n	80110f2 <st25r3916SetBitrate+0x50>
        {
            return ERR_PARAM;
 80110ee:	2307      	movs	r3, #7
 80110f0:	e013      	b.n	801111a <st25r3916SetBitrate+0x78>
        }

        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 80110f2:	7bfb      	ldrb	r3, [r7, #15]
 80110f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	73fb      	strb	r3, [r7, #15]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 80110fc:	79fb      	ldrb	r3, [r7, #7]
 80110fe:	011b      	lsls	r3, r3, #4
 8011100:	b25a      	sxtb	r2, r3
 8011102:	7bfb      	ldrb	r3, [r7, #15]
 8011104:	b25b      	sxtb	r3, r3
 8011106:	4313      	orrs	r3, r2
 8011108:	b25b      	sxtb	r3, r3
 801110a:	b2db      	uxtb	r3, r3
 801110c:	73fb      	strb	r3, [r7, #15]

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );
 801110e:	7bfb      	ldrb	r3, [r7, #15]
 8011110:	4619      	mov	r1, r3
 8011112:	2004      	movs	r0, #4
 8011114:	f000 fac6 	bl	80116a4 <st25r3916WriteRegister>
 8011118:	4603      	mov	r3, r0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
	...

08011124 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	4611      	mov	r1, r2
 8011130:	461a      	mov	r2, r3
 8011132:	4623      	mov	r3, r4
 8011134:	71fb      	strb	r3, [r7, #7]
 8011136:	4603      	mov	r3, r0
 8011138:	71bb      	strb	r3, [r7, #6]
 801113a:	460b      	mov	r3, r1
 801113c:	717b      	strb	r3, [r7, #5]
 801113e:	4613      	mov	r3, r2
 8011140:	713b      	strb	r3, [r7, #4]
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;

    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8011142:	79fb      	ldrb	r3, [r7, #7]
 8011144:	2bc8      	cmp	r3, #200	; 0xc8
 8011146:	d004      	beq.n	8011152 <st25r3916PerformCollisionAvoidance+0x2e>
 8011148:	79fb      	ldrb	r3, [r7, #7]
 801114a:	2bc9      	cmp	r3, #201	; 0xc9
 801114c:	d001      	beq.n	8011152 <st25r3916PerformCollisionAvoidance+0x2e>
    {
        return ERR_PARAM;
 801114e:	2307      	movs	r3, #7
 8011150:	e05d      	b.n	801120e <st25r3916PerformCollisionAvoidance+0xea>
    }

    err = ERR_INTERNAL;
 8011152:	230c      	movs	r3, #12
 8011154:	81bb      	strh	r3, [r7, #12]


    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 8011156:	79bb      	ldrb	r3, [r7, #6]
 8011158:	2bff      	cmp	r3, #255	; 0xff
 801115a:	d102      	bne.n	8011162 <st25r3916PerformCollisionAvoidance+0x3e>
 801115c:	797b      	ldrb	r3, [r7, #5]
 801115e:	2bff      	cmp	r3, #255	; 0xff
 8011160:	d01e      	beq.n	80111a0 <st25r3916PerformCollisionAvoidance+0x7c>
    {
        treMask = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	73fb      	strb	r3, [r7, #15]

        if(pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 8011166:	79bb      	ldrb	r3, [r7, #6]
 8011168:	2bff      	cmp	r3, #255	; 0xff
 801116a:	d003      	beq.n	8011174 <st25r3916PerformCollisionAvoidance+0x50>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask;
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8011172:	73fb      	strb	r3, [r7, #15]
        }

        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 8011174:	797b      	ldrb	r3, [r7, #5]
 8011176:	2bff      	cmp	r3, #255	; 0xff
 8011178:	d003      	beq.n	8011182 <st25r3916PerformCollisionAvoidance+0x5e>
        {
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 801117a:	7bfb      	ldrb	r3, [r7, #15]
 801117c:	f043 030f 	orr.w	r3, r3, #15
 8011180:	73fb      	strb	r3, [r7, #15]
        }

        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 8011182:	79bb      	ldrb	r3, [r7, #6]
 8011184:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011188:	b2da      	uxtb	r2, r3
 801118a:	797b      	ldrb	r3, [r7, #5]
 801118c:	f003 030f 	and.w	r3, r3, #15
 8011190:	b2db      	uxtb	r3, r3
 8011192:	4313      	orrs	r3, r2
 8011194:	b2da      	uxtb	r2, r3
 8011196:	7bfb      	ldrb	r3, [r7, #15]
 8011198:	4619      	mov	r1, r3
 801119a:	202a      	movs	r0, #42	; 0x2a
 801119c:	f000 fc36 	bl	8011a0c <st25r3916ChangeRegisterBits>
    }

    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 80111a0:	793b      	ldrb	r3, [r7, #4]
 80111a2:	461a      	mov	r2, r3
 80111a4:	2103      	movs	r1, #3
 80111a6:	200a      	movs	r0, #10
 80111a8:	f000 fc30 	bl	8011a0c <st25r3916ChangeRegisterBits>

    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80111ac:	481a      	ldr	r0, [pc, #104]	; (8011218 <st25r3916PerformCollisionAvoidance+0xf4>)
 80111ae:	f000 fe41 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80111b2:	4819      	ldr	r0, [pc, #100]	; (8011218 <st25r3916PerformCollisionAvoidance+0xf4>)
 80111b4:	f000 fe88 	bl	8011ec8 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( FieldONCmd );
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	4618      	mov	r0, r3
 80111bc:	f000 fb61 	bl	8011882 <st25r3916ExecuteCommand>

    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's
     * field is now on, or a CAC indicating a collision */
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );
 80111c0:	210a      	movs	r1, #10
 80111c2:	4816      	ldr	r0, [pc, #88]	; (801121c <st25r3916PerformCollisionAvoidance+0xf8>)
 80111c4:	f000 fde2 	bl	8011d8c <st25r3916WaitForInterruptsTimed>
 80111c8:	60b8      	str	r0, [r7, #8]

    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <st25r3916PerformCollisionAvoidance+0xb6>
    {
        err = ERR_RF_COLLISION;
 80111d4:	231d      	movs	r3, #29
 80111d6:	81bb      	strh	r3, [r7, #12]
 80111d8:	e011      	b.n	80111fe <st25r3916PerformCollisionAvoidance+0xda>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00c      	beq.n	80111fe <st25r3916PerformCollisionAvoidance+0xda>
    {
        /* After APON wait for CAT interrupt, indication field was switched on minimum guard time has been fulfilled */
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );
 80111e4:	210a      	movs	r1, #10
 80111e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80111ea:	f000 fdcf 	bl	8011d8c <st25r3916WaitForInterruptsTimed>
 80111ee:	60b8      	str	r0, [r7, #8]

        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d001      	beq.n	80111fe <st25r3916PerformCollisionAvoidance+0xda>
        {
            err = ERR_NONE;
 80111fa:	2300      	movs	r3, #0
 80111fc:	81bb      	strh	r3, [r7, #12]
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 80111fe:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8011202:	f000 fe17 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 8011206:	4804      	ldr	r0, [pc, #16]	; (8011218 <st25r3916PerformCollisionAvoidance+0xf4>)
 8011208:	f000 fe6a 	bl	8011ee0 <st25r3916DisableInterrupts>

    return err;
 801120c:	89bb      	ldrh	r3, [r7, #12]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3714      	adds	r7, #20
 8011212:	46bd      	mov	sp, r7
 8011214:	bd90      	pop	{r4, r7, pc}
 8011216:	bf00      	nop
 8011218:	20000600 	.word	0x20000600
 801121c:	20000400 	.word	0x20000400

08011220 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	4603      	mov	r3, r0
 8011228:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 801122a:	88fb      	ldrh	r3, [r7, #6]
 801122c:	b2db      	uxtb	r3, r3
 801122e:	4619      	mov	r1, r3
 8011230:	2023      	movs	r0, #35	; 0x23
 8011232:	f000 fa37 	bl	80116a4 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 8011236:	88fb      	ldrh	r3, [r7, #6]
 8011238:	0a1b      	lsrs	r3, r3, #8
 801123a:	b29b      	uxth	r3, r3
 801123c:	b2db      	uxtb	r3, r3
 801123e:	4619      	mov	r1, r3
 8011240:	2022      	movs	r0, #34	; 0x22
 8011242:	f000 fa2f 	bl	80116a4 <st25r3916WriteRegister>
}
 8011246:	bf00      	nop
 8011248:	3708      	adds	r7, #8
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <st25r3916GetNumFIFOBytes>:


/*******************************************************************************/
uint16_t st25r3916GetNumFIFOBytes( void )
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b082      	sub	sp, #8
 8011252:	af00      	add	r7, sp, #0
    uint8_t  reg;
    uint16_t result;


    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS2, &reg );
 8011254:	1d7b      	adds	r3, r7, #5
 8011256:	4619      	mov	r1, r3
 8011258:	201f      	movs	r0, #31
 801125a:	f000 f9e5 	bl	8011628 <st25r3916ReadRegister>
    reg    = ((reg & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift);
 801125e:	797b      	ldrb	r3, [r7, #5]
 8011260:	099b      	lsrs	r3, r3, #6
 8011262:	b2db      	uxtb	r3, r3
 8011264:	717b      	strb	r3, [r7, #5]
    result = ((uint16_t)reg << 8);
 8011266:	797b      	ldrb	r3, [r7, #5]
 8011268:	b29b      	uxth	r3, r3
 801126a:	021b      	lsls	r3, r3, #8
 801126c:	80fb      	strh	r3, [r7, #6]

    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS1, &reg );
 801126e:	1d7b      	adds	r3, r7, #5
 8011270:	4619      	mov	r1, r3
 8011272:	201e      	movs	r0, #30
 8011274:	f000 f9d8 	bl	8011628 <st25r3916ReadRegister>
    result |= (((uint16_t)reg) & 0x00FFU);
 8011278:	797b      	ldrb	r3, [r7, #5]
 801127a:	b29a      	uxth	r2, r3
 801127c:	88fb      	ldrh	r3, [r7, #6]
 801127e:	4313      	orrs	r3, r2
 8011280:	80fb      	strh	r3, [r7, #6]

    return result;
 8011282:	88fb      	ldrh	r3, [r7, #6]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <st25r3916SetNoResponseTime>:
}


/*******************************************************************************/
ReturnCode st25r3916SetNoResponseTime( uint32_t nrt_64fcs )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
    ReturnCode err;
    uint8_t    nrt_step;
    uint32_t   tmpNRT;

    tmpNRT = nrt_64fcs;       /* MISRA 17.8 */
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	60bb      	str	r3, [r7, #8]
    err    = ERR_NONE;
 8011298:	2300      	movs	r3, #0
 801129a:	81fb      	strh	r3, [r7, #14]

    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 801129c:	4a19      	ldr	r2, [pc, #100]	; (8011304 <st25r3916SetNoResponseTime+0x78>)
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	6013      	str	r3, [r2, #0]
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 80112a2:	2300      	movs	r3, #0
 80112a4:	737b      	strb	r3, [r7, #13]


    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112ac:	d312      	bcc.n	80112d4 <st25r3916SetNoResponseTime+0x48>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 80112ae:	2301      	movs	r3, #1
 80112b0:	737b      	strb	r3, [r7, #13]
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	333f      	adds	r3, #63	; 0x3f
 80112b6:	099b      	lsrs	r3, r3, #6
 80112b8:	60bb      	str	r3, [r7, #8]

        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112c0:	d304      	bcc.n	80112cc <st25r3916SetNoResponseTime+0x40>
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 80112c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112c6:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;                                           /* Signal parameter error                              */
 80112c8:	2307      	movs	r3, #7
 80112ca:	81fb      	strh	r3, [r7, #14]
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	019b      	lsls	r3, r3, #6
 80112d0:	4a0c      	ldr	r2, [pc, #48]	; (8011304 <st25r3916SetNoResponseTime+0x78>)
 80112d2:	6013      	str	r3, [r2, #0]
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 80112d4:	7b7b      	ldrb	r3, [r7, #13]
 80112d6:	461a      	mov	r2, r3
 80112d8:	2101      	movs	r1, #1
 80112da:	2012      	movs	r0, #18
 80112dc:	f000 fb96 	bl	8011a0c <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	0a1b      	lsrs	r3, r3, #8
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	4619      	mov	r1, r3
 80112e8:	2010      	movs	r0, #16
 80112ea:	f000 f9db 	bl	80116a4 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	4619      	mov	r1, r3
 80112f4:	2011      	movs	r0, #17
 80112f6:	f000 f9d5 	bl	80116a4 <st25r3916WriteRegister>

    return err;
 80112fa:	89fb      	ldrh	r3, [r7, #14]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	20001960 	.word	0x20001960

08011308 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	4603      	mov	r3, r0
 8011310:	80fb      	strh	r3, [r7, #6]
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 8011312:	88fb      	ldrh	r3, [r7, #6]
 8011314:	0a1b      	lsrs	r3, r3, #8
 8011316:	b29b      	uxth	r3, r3
 8011318:	b2db      	uxtb	r3, r3
 801131a:	4619      	mov	r1, r3
 801131c:	2013      	movs	r0, #19
 801131e:	f000 f9c1 	bl	80116a4 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 8011322:	88fb      	ldrh	r3, [r7, #6]
 8011324:	b2db      	uxtb	r3, r3
 8011326:	4619      	mov	r1, r3
 8011328:	2014      	movs	r0, #20
 801132a:	f000 f9bb 	bl	80116a4 <st25r3916WriteRegister>
}
 801132e:	bf00      	nop
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 8011336:	b580      	push	{r7, lr}
 8011338:	b082      	sub	sp, #8
 801133a:	af00      	add	r7, sp, #0
 801133c:	4603      	mov	r3, r0
 801133e:	460a      	mov	r2, r1
 8011340:	80fb      	strh	r3, [r7, #6]
 8011342:	4613      	mov	r3, r2
 8011344:	717b      	strb	r3, [r7, #5]
    st25r3916SetGPTime( gpt_8fcs );
 8011346:	88fb      	ldrh	r3, [r7, #6]
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff ffdd 	bl	8011308 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 801134e:	797b      	ldrb	r3, [r7, #5]
 8011350:	461a      	mov	r2, r3
 8011352:	21e0      	movs	r1, #224	; 0xe0
 8011354:	2012      	movs	r0, #18
 8011356:	f000 fb59 	bl	8011a0c <st25r3916ChangeRegisterBits>

    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 801135a:	797b      	ldrb	r3, [r7, #5]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d102      	bne.n	8011366 <st25r3916SetStartGPTimer+0x30>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 8011360:	20e0      	movs	r0, #224	; 0xe0
 8011362:	f000 fa8e 	bl	8011882 <st25r3916ExecuteCommand>
    }

    return ERR_NONE;
 8011366:	2300      	movs	r3, #0
}
 8011368:	4618      	mov	r0, r3
 801136a:	3708      	adds	r7, #8
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
    uint8_t ID;

    ID = 0;
 8011378:	2300      	movs	r3, #0
 801137a:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 801137c:	f107 030f 	add.w	r3, r7, #15
 8011380:	4619      	mov	r1, r3
 8011382:	203f      	movs	r0, #63	; 0x3f
 8011384:	f000 f950 	bl	8011628 <st25r3916ReadRegister>

    /* Check if IC Identity Register contains ST25R3916's IC type code */
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 8011388:	7bfb      	ldrb	r3, [r7, #15]
 801138a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801138e:	2b28      	cmp	r3, #40	; 0x28
 8011390:	d001      	beq.n	8011396 <st25r3916CheckChipID+0x26>
    {
        return false;
 8011392:	2300      	movs	r3, #0
 8011394:	e00e      	b.n	80113b4 <st25r3916CheckChipID+0x44>
    }

    if(rev != NULL)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d005      	beq.n	80113a8 <st25r3916CheckChipID+0x38>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 801139c:	7bfb      	ldrb	r3, [r7, #15]
 801139e:	f003 0307 	and.w	r3, r3, #7
 80113a2:	b2da      	uxtb	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	701a      	strb	r2, [r3, #0]
    }
    printf("str253916 ID [0x%02x]\r\n",ID);
 80113a8:	7bfb      	ldrb	r3, [r7, #15]
 80113aa:	4619      	mov	r1, r3
 80113ac:	4803      	ldr	r0, [pc, #12]	; (80113bc <st25r3916CheckChipID+0x4c>)
 80113ae:	f000 fee5 	bl	801217c <iprintf>
    return true;
 80113b2:	2301      	movs	r3, #1
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3710      	adds	r7, #16
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	08013558 	.word	0x08013558

080113c0 <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    uint8_t smd;
    uint8_t mode;

    smd = 0;
 80113c8:	2300      	movs	r3, #0
 80113ca:	73fb      	strb	r3, [r7, #15]

    if( config->useBPSK != 0U )
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d016      	beq.n	8011402 <st25r3916StreamConfigure+0x42>
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 80113d4:	2378      	movs	r3, #120	; 0x78
 80113d6:	73bb      	strb	r3, [r7, #14]
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	785b      	ldrb	r3, [r3, #1]
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d903      	bls.n	80113e8 <st25r3916StreamConfigure+0x28>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	785b      	ldrb	r3, [r3, #1]
 80113e4:	2b04      	cmp	r3, #4
 80113e6:	d901      	bls.n	80113ec <st25r3916StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 80113e8:	2307      	movs	r3, #7
 80113ea:	e053      	b.n	8011494 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	785b      	ldrb	r3, [r3, #1]
 80113f0:	f1c3 0304 	rsb	r3, r3, #4
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	015b      	lsls	r3, r3, #5
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
 80113fc:	4313      	orrs	r3, r2
 80113fe:	73fb      	strb	r3, [r7, #15]
 8011400:	e01b      	b.n	801143a <st25r3916StreamConfigure+0x7a>
    }
    else
    {
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 8011402:	2370      	movs	r3, #112	; 0x70
 8011404:	73bb      	strb	r3, [r7, #14]
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	785b      	ldrb	r3, [r3, #1]
 801140a:	2b02      	cmp	r3, #2
 801140c:	d903      	bls.n	8011416 <st25r3916StreamConfigure+0x56>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	785b      	ldrb	r3, [r3, #1]
 8011412:	2b06      	cmp	r3, #6
 8011414:	d901      	bls.n	801141a <st25r3916StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8011416:	2307      	movs	r3, #7
 8011418:	e03c      	b.n	8011494 <st25r3916StreamConfigure+0xd4>
        }
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	785b      	ldrb	r3, [r3, #1]
 801141e:	f1c3 0306 	rsb	r3, r3, #6
 8011422:	b2db      	uxtb	r3, r3
 8011424:	015b      	lsls	r3, r3, #5
 8011426:	b2da      	uxtb	r2, r3
 8011428:	7bfb      	ldrb	r3, [r7, #15]
 801142a:	4313      	orrs	r3, r2
 801142c:	73fb      	strb	r3, [r7, #15]
        if( config->report_period_length == 0U )
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	78db      	ldrb	r3, [r3, #3]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d101      	bne.n	801143a <st25r3916StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8011436:	2307      	movs	r3, #7
 8011438:	e02c      	b.n	8011494 <st25r3916StreamConfigure+0xd4>
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	789b      	ldrb	r3, [r3, #2]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d003      	beq.n	801144a <st25r3916StreamConfigure+0x8a>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	789b      	ldrb	r3, [r3, #2]
 8011446:	2b07      	cmp	r3, #7
 8011448:	d901      	bls.n	801144e <st25r3916StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 801144a:	2307      	movs	r3, #7
 801144c:	e022      	b.n	8011494 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	789b      	ldrb	r3, [r3, #2]
 8011452:	f1c3 0307 	rsb	r3, r3, #7
 8011456:	b2da      	uxtb	r2, r3
 8011458:	7bfb      	ldrb	r3, [r7, #15]
 801145a:	4313      	orrs	r3, r2
 801145c:	73fb      	strb	r3, [r7, #15]

    if( config->report_period_length > 3U )
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	78db      	ldrb	r3, [r3, #3]
 8011462:	2b03      	cmp	r3, #3
 8011464:	d901      	bls.n	801146a <st25r3916StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 8011466:	2307      	movs	r3, #7
 8011468:	e014      	b.n	8011494 <st25r3916StreamConfigure+0xd4>
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	78db      	ldrb	r3, [r3, #3]
 801146e:	00db      	lsls	r3, r3, #3
 8011470:	b25a      	sxtb	r2, r3
 8011472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011476:	4313      	orrs	r3, r2
 8011478:	b25b      	sxtb	r3, r3
 801147a:	73fb      	strb	r3, [r7, #15]

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 801147c:	7bfb      	ldrb	r3, [r7, #15]
 801147e:	4619      	mov	r1, r3
 8011480:	2009      	movs	r0, #9
 8011482:	f000 f90f 	bl	80116a4 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 8011486:	7bbb      	ldrb	r3, [r7, #14]
 8011488:	461a      	mov	r2, r3
 801148a:	2178      	movs	r1, #120	; 0x78
 801148c:	2003      	movs	r0, #3
 801148e:	f000 fabd 	bl	8011a0c <st25r3916ChangeRegisterBits>

    return ERR_NONE;
 8011492:	2300      	movs	r3, #0
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <__NVIC_EnableIRQ>:
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	4603      	mov	r3, r0
 80114a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	db0b      	blt.n	80114c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80114ae:	79fb      	ldrb	r3, [r7, #7]
 80114b0:	f003 021f 	and.w	r2, r3, #31
 80114b4:	4906      	ldr	r1, [pc, #24]	; (80114d0 <__NVIC_EnableIRQ+0x34>)
 80114b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114ba:	095b      	lsrs	r3, r3, #5
 80114bc:	2001      	movs	r0, #1
 80114be:	fa00 f202 	lsl.w	r2, r0, r2
 80114c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80114c6:	bf00      	nop
 80114c8:	370c      	adds	r7, #12
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bc80      	pop	{r7}
 80114ce:	4770      	bx	lr
 80114d0:	e000e100 	.word	0xe000e100

080114d4 <__NVIC_DisableIRQ>:
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	4603      	mov	r3, r0
 80114dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	db12      	blt.n	801150c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80114e6:	79fb      	ldrb	r3, [r7, #7]
 80114e8:	f003 021f 	and.w	r2, r3, #31
 80114ec:	490a      	ldr	r1, [pc, #40]	; (8011518 <__NVIC_DisableIRQ+0x44>)
 80114ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114f2:	095b      	lsrs	r3, r3, #5
 80114f4:	2001      	movs	r0, #1
 80114f6:	fa00 f202 	lsl.w	r2, r0, r2
 80114fa:	3320      	adds	r3, #32
 80114fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011500:	f3bf 8f4f 	dsb	sy
}
 8011504:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011506:	f3bf 8f6f 	isb	sy
}
 801150a:	bf00      	nop
}
 801150c:	bf00      	nop
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	bc80      	pop	{r7}
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop
 8011518:	e000e100 	.word	0xe000e100

0801151c <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 801151c:	b580      	push	{r7, lr}
 801151e:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25RComm();
 8011520:	4b0c      	ldr	r3, [pc, #48]	; (8011554 <st25r3916comStart+0x38>)
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	3301      	adds	r3, #1
 8011526:	b2da      	uxtb	r2, r3
 8011528:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <st25r3916comStart+0x38>)
 801152a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801152c:	f3bf 8f4f 	dsb	sy
}
 8011530:	bf00      	nop
 8011532:	200a      	movs	r0, #10
 8011534:	f7ff ffce 	bl	80114d4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011538:	f3bf 8f4f 	dsb	sy
}
 801153c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801153e:	f3bf 8f6f 	isb	sy
}
 8011542:	bf00      	nop
    /* I2C Start and send Slave Address */
    st25r3916I2CStart();
    st25r3916I2CSlaveAddrWR( ST25R3916_I2C_ADDR );
#else
    /* Perform the chip select */
    platformSpiSelect();
 8011544:	2200      	movs	r2, #0
 8011546:	2110      	movs	r1, #16
 8011548:	4803      	ldr	r0, [pc, #12]	; (8011558 <st25r3916comStart+0x3c>)
 801154a:	f7f0 fe10 	bl	800216e <HAL_GPIO_WritePin>
        comBufIt = 0;                                  /* reset local buffer position   */
    #endif /* ST25R_COM_SINGLETXRX */

#endif /* RFAL_USE_I2C */

}
 801154e:	bf00      	nop
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	200009d1 	.word	0x200009d1
 8011558:	40010800 	.word	0x40010800

0801155c <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	af00      	add	r7, sp, #0
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 8011560:	2201      	movs	r2, #1
 8011562:	2110      	movs	r1, #16
 8011564:	4808      	ldr	r0, [pc, #32]	; (8011588 <st25r3916comStop+0x2c>)
 8011566:	f7f0 fe02 	bl	800216e <HAL_GPIO_WritePin>
#endif /* RFAL_USE_I2C */

    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25RComm();
 801156a:	4b08      	ldr	r3, [pc, #32]	; (801158c <st25r3916comStop+0x30>)
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	3b01      	subs	r3, #1
 8011570:	b2da      	uxtb	r2, r3
 8011572:	4b06      	ldr	r3, [pc, #24]	; (801158c <st25r3916comStop+0x30>)
 8011574:	701a      	strb	r2, [r3, #0]
 8011576:	4b05      	ldr	r3, [pc, #20]	; (801158c <st25r3916comStop+0x30>)
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d102      	bne.n	8011584 <st25r3916comStop+0x28>
 801157e:	200a      	movs	r0, #10
 8011580:	f7ff ff8c 	bl	801149c <__NVIC_EnableIRQ>
}
 8011584:	bf00      	nop
 8011586:	bd80      	pop	{r7, pc}
 8011588:	40010800 	.word	0x40010800
 801158c:	200009d1 	.word	0x200009d1

08011590 <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	4608      	mov	r0, r1
 801159a:	4611      	mov	r1, r2
 801159c:	461a      	mov	r2, r3
 801159e:	4603      	mov	r3, r0
 80115a0:	807b      	strh	r3, [r7, #2]
 80115a2:	460b      	mov	r3, r1
 80115a4:	707b      	strb	r3, [r7, #1]
 80115a6:	4613      	mov	r3, r2
 80115a8:	703b      	strb	r3, [r7, #0]
    NO_WARNING(last);
    NO_WARNING(txOnly);

    if( txLen > 0U )
 80115aa:	887b      	ldrh	r3, [r7, #2]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d005      	beq.n	80115bc <st25r3916comTx+0x2c>
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
            }

        #else
            platformSpiTxRx( txBuf, NULL, txLen );
 80115b0:	887b      	ldrh	r3, [r7, #2]
 80115b2:	461a      	mov	r2, r3
 80115b4:	2100      	movs	r1, #0
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7ef ff42 	bl	8001440 <BSP_SPI_SendRecv>
        #endif /* ST25R_COM_SINGLETXRX */

#endif /* RFAL_USE_I2C */
    }
}
 80115bc:	bf00      	nop
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	460b      	mov	r3, r1
 80115ce:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 80115d0:	887b      	ldrh	r3, [r7, #2]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d00e      	beq.n	80115f4 <st25r3916comRx+0x30>
    #ifdef ST25R_COM_SINGLETXRX
        ST_MEMSET( &comBuf[comBufIt], 0x00, MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
        platformSpiTxRx( comBuf, comBuf, MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );        /* transceive as a single SPI call                        */
        ST_MEMCPY( rxBuf, &comBuf[comBufIt], MIN( rxLen, (ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
    #else
        if( rxBuf != NULL)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d005      	beq.n	80115e8 <st25r3916comRx+0x24>
        {
            ST_MEMSET( rxBuf, 0x00, rxLen );                                                    /* clear outgoing buffer                                  */
 80115dc:	887b      	ldrh	r3, [r7, #2]
 80115de:	461a      	mov	r2, r3
 80115e0:	2100      	movs	r1, #0
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f000 fdc2 	bl	801216c <memset>
        }
        platformSpiTxRx( NULL, rxBuf, rxLen );
 80115e8:	887b      	ldrh	r3, [r7, #2]
 80115ea:	461a      	mov	r2, r3
 80115ec:	6879      	ldr	r1, [r7, #4]
 80115ee:	2000      	movs	r0, #0
 80115f0:	f7ef ff26 	bl	8001440 <BSP_SPI_SendRecv>
    #endif /* ST25R_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 80115f4:	bf00      	nop
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	4603      	mov	r3, r0
 8011604:	71fb      	strb	r3, [r7, #7]
 8011606:	460b      	mov	r3, r1
 8011608:	71bb      	strb	r3, [r7, #6]
 801160a:	4613      	mov	r3, r2
 801160c:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 801160e:	79fb      	ldrb	r3, [r7, #7]
 8011610:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 8011612:	797b      	ldrb	r3, [r7, #5]
 8011614:	79ba      	ldrb	r2, [r7, #6]
 8011616:	f107 000f 	add.w	r0, r7, #15
 801161a:	2101      	movs	r1, #1
 801161c:	f7ff ffb8 	bl	8011590 <st25r3916comTx>
}
 8011620:	bf00      	nop
 8011622:	3710      	adds	r7, #16
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}

08011628 <st25r3916ReadRegister>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode st25r3916ReadRegister( uint8_t reg, uint8_t* val )
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	6039      	str	r1, [r7, #0]
 8011632:	71fb      	strb	r3, [r7, #7]
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
 8011634:	79fb      	ldrb	r3, [r7, #7]
 8011636:	2201      	movs	r2, #1
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	4618      	mov	r0, r3
 801163c:	f000 f805 	bl	801164a <st25r3916ReadMultipleRegisters>
 8011640:	4603      	mov	r3, r0
}
 8011642:	4618      	mov	r0, r3
 8011644:	3708      	adds	r7, #8
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <st25r3916ReadMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b082      	sub	sp, #8
 801164e:	af00      	add	r7, sp, #0
 8011650:	4603      	mov	r3, r0
 8011652:	6039      	str	r1, [r7, #0]
 8011654:	71fb      	strb	r3, [r7, #7]
 8011656:	4613      	mov	r3, r2
 8011658:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 801165a:	79bb      	ldrb	r3, [r7, #6]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d01c      	beq.n	801169a <st25r3916ReadMultipleRegisters+0x50>
    {
        st25r3916comStart();
 8011660:	f7ff ff5c 	bl	801151c <st25r3916comStart>

        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8011664:	79fb      	ldrb	r3, [r7, #7]
 8011666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	d004      	beq.n	8011678 <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 801166e:	2200      	movs	r2, #0
 8011670:	2100      	movs	r1, #0
 8011672:	20fb      	movs	r0, #251	; 0xfb
 8011674:	f7ff ffc2 	bl	80115fc <st25r3916comTxByte>
        }

        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 8011678:	79fb      	ldrb	r3, [r7, #7]
 801167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801167e:	b2db      	uxtb	r3, r3
 8011680:	2200      	movs	r2, #0
 8011682:	2101      	movs	r1, #1
 8011684:	4618      	mov	r0, r3
 8011686:	f7ff ffb9 	bl	80115fc <st25r3916comTxByte>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
 801168a:	79bb      	ldrb	r3, [r7, #6]
 801168c:	b29b      	uxth	r3, r3
 801168e:	4619      	mov	r1, r3
 8011690:	6838      	ldr	r0, [r7, #0]
 8011692:	f7ff ff97 	bl	80115c4 <st25r3916comRx>
        st25r3916comStop();
 8011696:	f7ff ff61 	bl	801155c <st25r3916comStop>
    }

    return ERR_NONE;
 801169a:	2300      	movs	r3, #0
}
 801169c:	4618      	mov	r0, r3
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <st25r3916WriteRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteRegister( uint8_t reg, uint8_t val )
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	4603      	mov	r3, r0
 80116ac:	460a      	mov	r2, r1
 80116ae:	71fb      	strb	r3, [r7, #7]
 80116b0:	4613      	mov	r3, r2
 80116b2:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 80116b4:	79bb      	ldrb	r3, [r7, #6]
 80116b6:	73fb      	strb	r3, [r7, #15]
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
 80116b8:	f107 010f 	add.w	r1, r7, #15
 80116bc:	79fb      	ldrb	r3, [r7, #7]
 80116be:	2201      	movs	r2, #1
 80116c0:	4618      	mov	r0, r3
 80116c2:	f000 f805 	bl	80116d0 <st25r3916WriteMultipleRegisters>
 80116c6:	4603      	mov	r3, r0
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3710      	adds	r7, #16
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <st25r3916WriteMultipleRegisters>:


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	4603      	mov	r3, r0
 80116d8:	6039      	str	r1, [r7, #0]
 80116da:	71fb      	strb	r3, [r7, #7]
 80116dc:	4613      	mov	r3, r2
 80116de:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 80116e0:	79bb      	ldrb	r3, [r7, #6]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d023      	beq.n	801172e <st25r3916WriteMultipleRegisters+0x5e>
    {
        st25r3916comStart();
 80116e6:	f7ff ff19 	bl	801151c <st25r3916comStart>

        if( (reg & ST25R3916_SPACE_B) != 0U )
 80116ea:	79fb      	ldrb	r3, [r7, #7]
 80116ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d004      	beq.n	80116fe <st25r3916WriteMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
 80116f4:	2201      	movs	r2, #1
 80116f6:	2100      	movs	r1, #0
 80116f8:	20fb      	movs	r0, #251	; 0xfb
 80116fa:	f7ff ff7f 	bl	80115fc <st25r3916comTxByte>
        }

        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 80116fe:	79fb      	ldrb	r3, [r7, #7]
 8011700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011704:	b2db      	uxtb	r3, r3
 8011706:	2201      	movs	r2, #1
 8011708:	2100      	movs	r1, #0
 801170a:	4618      	mov	r0, r3
 801170c:	f7ff ff76 	bl	80115fc <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8011710:	79bb      	ldrb	r3, [r7, #6]
 8011712:	b299      	uxth	r1, r3
 8011714:	2301      	movs	r3, #1
 8011716:	2201      	movs	r2, #1
 8011718:	6838      	ldr	r0, [r7, #0]
 801171a:	f7ff ff39 	bl	8011590 <st25r3916comTx>
        st25r3916comStop();
 801171e:	f7ff ff1d 	bl	801155c <st25r3916comStop>

        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 8011722:	79ba      	ldrb	r2, [r7, #6]
 8011724:	79fb      	ldrb	r3, [r7, #7]
 8011726:	6839      	ldr	r1, [r7, #0]
 8011728:	4618      	mov	r0, r3
 801172a:	f000 fc5b 	bl	8011fe4 <st25r3916ledEvtWrMultiReg>
    }

    return ERR_NONE;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3708      	adds	r7, #8
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	460b      	mov	r3, r1
 8011742:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_FIFO_DEPTH )
 8011744:	887b      	ldrh	r3, [r7, #2]
 8011746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801174a:	d901      	bls.n	8011750 <st25r3916WriteFifo+0x18>
    {
        return ERR_PARAM;
 801174c:	2307      	movs	r3, #7
 801174e:	e012      	b.n	8011776 <st25r3916WriteFifo+0x3e>
    }

    if( length > 0U )
 8011750:	887b      	ldrh	r3, [r7, #2]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00e      	beq.n	8011774 <st25r3916WriteFifo+0x3c>
    {
        st25r3916comStart();
 8011756:	f7ff fee1 	bl	801151c <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
 801175a:	2201      	movs	r2, #1
 801175c:	2100      	movs	r1, #0
 801175e:	2080      	movs	r0, #128	; 0x80
 8011760:	f7ff ff4c 	bl	80115fc <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8011764:	8879      	ldrh	r1, [r7, #2]
 8011766:	2301      	movs	r3, #1
 8011768:	2201      	movs	r2, #1
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f7ff ff10 	bl	8011590 <st25r3916comTx>
        st25r3916comStop();
 8011770:	f7ff fef4 	bl	801155c <st25r3916comStop>
    }

    return ERR_NONE;
 8011774:	2300      	movs	r3, #0
}
 8011776:	4618      	mov	r0, r3
 8011778:	3708      	adds	r7, #8
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b082      	sub	sp, #8
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	460b      	mov	r3, r1
 8011788:	807b      	strh	r3, [r7, #2]
    if( length > 0U )
 801178a:	887b      	ldrh	r3, [r7, #2]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d00d      	beq.n	80117ac <st25r3916ReadFifo+0x2e>
    {
        st25r3916comStart();
 8011790:	f7ff fec4 	bl	801151c <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
 8011794:	2200      	movs	r2, #0
 8011796:	2101      	movs	r1, #1
 8011798:	209f      	movs	r0, #159	; 0x9f
 801179a:	f7ff ff2f 	bl	80115fc <st25r3916comTxByte>

        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
 801179e:	887b      	ldrh	r3, [r7, #2]
 80117a0:	4619      	mov	r1, r3
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff ff0e 	bl	80115c4 <st25r3916comRx>
        st25r3916comStop();
 80117a8:	f7ff fed8 	bl	801155c <st25r3916comStop>
    }

    return ERR_NONE;
 80117ac:	2300      	movs	r3, #0
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <st25r3916WritePTMem>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMem( const uint8_t* values, uint16_t length )
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b082      	sub	sp, #8
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	460b      	mov	r3, r1
 80117c0:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_PTM_LEN )
 80117c2:	887b      	ldrh	r3, [r7, #2]
 80117c4:	2b30      	cmp	r3, #48	; 0x30
 80117c6:	d901      	bls.n	80117cc <st25r3916WritePTMem+0x16>
    {
        return ERR_PARAM;
 80117c8:	2307      	movs	r3, #7
 80117ca:	e012      	b.n	80117f2 <st25r3916WritePTMem+0x3c>
    }

    if( length > 0U )
 80117cc:	887b      	ldrh	r3, [r7, #2]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00e      	beq.n	80117f0 <st25r3916WritePTMem+0x3a>
    {
        st25r3916comStart();
 80117d2:	f7ff fea3 	bl	801151c <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_PT_A_CONFIG_LOAD, false, true );
 80117d6:	2201      	movs	r2, #1
 80117d8:	2100      	movs	r1, #0
 80117da:	20a0      	movs	r0, #160	; 0xa0
 80117dc:	f7ff ff0e 	bl	80115fc <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 80117e0:	8879      	ldrh	r1, [r7, #2]
 80117e2:	2301      	movs	r3, #1
 80117e4:	2201      	movs	r2, #1
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7ff fed2 	bl	8011590 <st25r3916comTx>
        st25r3916comStop();
 80117ec:	f7ff feb6 	bl	801155c <st25r3916comStop>
    }

    return ERR_NONE;
 80117f0:	2300      	movs	r3, #0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3708      	adds	r7, #8
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <st25r3916WritePTMemF>:
}


/*******************************************************************************/
ReturnCode st25r3916WritePTMemF( const uint8_t* values, uint16_t length )
{
 80117fa:	b580      	push	{r7, lr}
 80117fc:	b082      	sub	sp, #8
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	460b      	mov	r3, r1
 8011804:	807b      	strh	r3, [r7, #2]
    if( length > (ST25R3916_PTM_F_LEN + ST25R3916_PTM_TSN_LEN) )
 8011806:	887b      	ldrh	r3, [r7, #2]
 8011808:	2b21      	cmp	r3, #33	; 0x21
 801180a:	d901      	bls.n	8011810 <st25r3916WritePTMemF+0x16>
    {
        return ERR_PARAM;
 801180c:	2307      	movs	r3, #7
 801180e:	e012      	b.n	8011836 <st25r3916WritePTMemF+0x3c>
    }

    if( length > 0U )
 8011810:	887b      	ldrh	r3, [r7, #2]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d00e      	beq.n	8011834 <st25r3916WritePTMemF+0x3a>
    {
        st25r3916comStart();
 8011816:	f7ff fe81 	bl	801151c <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_PT_F_CONFIG_LOAD, false, true );
 801181a:	2201      	movs	r2, #1
 801181c:	2100      	movs	r1, #0
 801181e:	20a8      	movs	r0, #168	; 0xa8
 8011820:	f7ff feec 	bl	80115fc <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8011824:	8879      	ldrh	r1, [r7, #2]
 8011826:	2301      	movs	r3, #1
 8011828:	2201      	movs	r2, #1
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7ff feb0 	bl	8011590 <st25r3916comTx>
        st25r3916comStop();
 8011830:	f7ff fe94 	bl	801155c <st25r3916comStop>
    }

    return ERR_NONE;
 8011834:	2300      	movs	r3, #0
}
 8011836:	4618      	mov	r0, r3
 8011838:	3708      	adds	r7, #8
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}

0801183e <st25r3916WritePTMemTSN>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMemTSN( const uint8_t* values, uint16_t length )
{
 801183e:	b580      	push	{r7, lr}
 8011840:	b082      	sub	sp, #8
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	460b      	mov	r3, r1
 8011848:	807b      	strh	r3, [r7, #2]
    if( length > ST25R3916_PTM_TSN_LEN )
 801184a:	887b      	ldrh	r3, [r7, #2]
 801184c:	2b0c      	cmp	r3, #12
 801184e:	d901      	bls.n	8011854 <st25r3916WritePTMemTSN+0x16>
    {
        return ERR_PARAM;
 8011850:	2307      	movs	r3, #7
 8011852:	e012      	b.n	801187a <st25r3916WritePTMemTSN+0x3c>
    }

    if(length > 0U)
 8011854:	887b      	ldrh	r3, [r7, #2]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00e      	beq.n	8011878 <st25r3916WritePTMemTSN+0x3a>
    {
        st25r3916comStart();
 801185a:	f7ff fe5f 	bl	801151c <st25r3916comStart>
        st25r3916comTxByte( ST25R3916_PT_TSN_DATA_LOAD, false, true );
 801185e:	2201      	movs	r2, #1
 8011860:	2100      	movs	r1, #0
 8011862:	20ac      	movs	r0, #172	; 0xac
 8011864:	f7ff feca 	bl	80115fc <st25r3916comTxByte>
        st25r3916comTx( values, length, true, true );
 8011868:	8879      	ldrh	r1, [r7, #2]
 801186a:	2301      	movs	r3, #1
 801186c:	2201      	movs	r2, #1
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7ff fe8e 	bl	8011590 <st25r3916comTx>
        st25r3916comStop();
 8011874:	f7ff fe72 	bl	801155c <st25r3916comStop>
    }

    return ERR_NONE;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3708      	adds	r7, #8
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <st25r3916ExecuteCommand>:


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b082      	sub	sp, #8
 8011886:	af00      	add	r7, sp, #0
 8011888:	4603      	mov	r3, r0
 801188a:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 801188c:	f7ff fe46 	bl	801151c <st25r3916comStart>
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 8011890:	79fb      	ldrb	r3, [r7, #7]
 8011892:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2201      	movs	r2, #1
 801189a:	2101      	movs	r1, #1
 801189c:	4618      	mov	r0, r3
 801189e:	f7ff fead 	bl	80115fc <st25r3916comTxByte>
    st25r3916comStop();
 80118a2:	f7ff fe5b 	bl	801155c <st25r3916comStop>

    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 80118a6:	79fb      	ldrb	r3, [r7, #7]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f000 fbbd 	bl	8012028 <st25r3916ledEvtCmd>

    return ERR_NONE;
 80118ae:	2300      	movs	r3, #0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	4603      	mov	r3, r0
 80118c0:	6039      	str	r1, [r7, #0]
 80118c2:	71fb      	strb	r3, [r7, #7]
    st25r3916comStart();
 80118c4:	f7ff fe2a 	bl	801151c <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
 80118c8:	2200      	movs	r2, #0
 80118ca:	2100      	movs	r1, #0
 80118cc:	20fc      	movs	r0, #252	; 0xfc
 80118ce:	f7ff fe95 	bl	80115fc <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 80118d2:	79fb      	ldrb	r3, [r7, #7]
 80118d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	2200      	movs	r2, #0
 80118dc:	2101      	movs	r1, #1
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff fe8c 	bl	80115fc <st25r3916comTxByte>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
 80118e4:	2101      	movs	r1, #1
 80118e6:	6838      	ldr	r0, [r7, #0]
 80118e8:	f7ff fe6c 	bl	80115c4 <st25r3916comRx>
    st25r3916comStop();
 80118ec:	f7ff fe36 	bl	801155c <st25r3916comStop>

    return ERR_NONE;
 80118f0:	2300      	movs	r3, #0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3708      	adds	r7, #8
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b084      	sub	sp, #16
 80118fe:	af00      	add	r7, sp, #0
 8011900:	4603      	mov	r3, r0
 8011902:	460a      	mov	r2, r1
 8011904:	71fb      	strb	r3, [r7, #7]
 8011906:	4613      	mov	r3, r2
 8011908:	71bb      	strb	r3, [r7, #6]
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 801190a:	79bb      	ldrb	r3, [r7, #6]
 801190c:	73fb      	strb	r3, [r7, #15]

    st25r3916comStart();
 801190e:	f7ff fe05 	bl	801151c <st25r3916comStart>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
 8011912:	2201      	movs	r2, #1
 8011914:	2100      	movs	r1, #0
 8011916:	20fc      	movs	r0, #252	; 0xfc
 8011918:	f7ff fe70 	bl	80115fc <st25r3916comTxByte>
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
 801191c:	79fb      	ldrb	r3, [r7, #7]
 801191e:	2201      	movs	r2, #1
 8011920:	2100      	movs	r1, #0
 8011922:	4618      	mov	r0, r3
 8011924:	f7ff fe6a 	bl	80115fc <st25r3916comTxByte>
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
 8011928:	f107 000f 	add.w	r0, r7, #15
 801192c:	2301      	movs	r3, #1
 801192e:	2201      	movs	r2, #1
 8011930:	2101      	movs	r1, #1
 8011932:	f7ff fe2d 	bl	8011590 <st25r3916comTx>
    st25r3916comStop();
 8011936:	f7ff fe11 	bl	801155c <st25r3916comStop>

    return ERR_NONE;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	3710      	adds	r7, #16
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	4603      	mov	r3, r0
 801194c:	460a      	mov	r2, r1
 801194e:	71fb      	strb	r3, [r7, #7]
 8011950:	4613      	mov	r3, r2
 8011952:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8011954:	f107 020d 	add.w	r2, r7, #13
 8011958:	79fb      	ldrb	r3, [r7, #7]
 801195a:	4611      	mov	r1, r2
 801195c:	4618      	mov	r0, r3
 801195e:	f7ff fe63 	bl	8011628 <st25r3916ReadRegister>
 8011962:	4603      	mov	r3, r0
 8011964:	81fb      	strh	r3, [r7, #14]
 8011966:	89fb      	ldrh	r3, [r7, #14]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d001      	beq.n	8011970 <st25r3916ClrRegisterBits+0x2c>
 801196c:	89fb      	ldrh	r3, [r7, #14]
 801196e:	e01c      	b.n	80119aa <st25r3916ClrRegisterBits+0x66>

    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8011970:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011974:	43db      	mvns	r3, r3
 8011976:	b25a      	sxtb	r2, r3
 8011978:	7b7b      	ldrb	r3, [r7, #13]
 801197a:	b25b      	sxtb	r3, r3
 801197c:	4013      	ands	r3, r2
 801197e:	b25a      	sxtb	r2, r3
 8011980:	7b7b      	ldrb	r3, [r7, #13]
 8011982:	b25b      	sxtb	r3, r3
 8011984:	429a      	cmp	r2, r3
 8011986:	d101      	bne.n	801198c <st25r3916ClrRegisterBits+0x48>
    {
        return ERR_NONE;
 8011988:	2300      	movs	r3, #0
 801198a:	e00e      	b.n	80119aa <st25r3916ClrRegisterBits+0x66>
    }

    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 801198c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011990:	43db      	mvns	r3, r3
 8011992:	b25a      	sxtb	r2, r3
 8011994:	7b7b      	ldrb	r3, [r7, #13]
 8011996:	b25b      	sxtb	r3, r3
 8011998:	4013      	ands	r3, r2
 801199a:	b25b      	sxtb	r3, r3
 801199c:	b2da      	uxtb	r2, r3
 801199e:	79fb      	ldrb	r3, [r7, #7]
 80119a0:	4611      	mov	r1, r2
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ff fe7e 	bl	80116a4 <st25r3916WriteRegister>
 80119a8:	4603      	mov	r3, r0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	3710      	adds	r7, #16
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}

080119b2 <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 80119b2:	b580      	push	{r7, lr}
 80119b4:	b084      	sub	sp, #16
 80119b6:	af00      	add	r7, sp, #0
 80119b8:	4603      	mov	r3, r0
 80119ba:	460a      	mov	r2, r1
 80119bc:	71fb      	strb	r3, [r7, #7]
 80119be:	4613      	mov	r3, r2
 80119c0:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    uint8_t    rdVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 80119c2:	f107 020d 	add.w	r2, r7, #13
 80119c6:	79fb      	ldrb	r3, [r7, #7]
 80119c8:	4611      	mov	r1, r2
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7ff fe2c 	bl	8011628 <st25r3916ReadRegister>
 80119d0:	4603      	mov	r3, r0
 80119d2:	81fb      	strh	r3, [r7, #14]
 80119d4:	89fb      	ldrh	r3, [r7, #14]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d001      	beq.n	80119de <st25r3916SetRegisterBits+0x2c>
 80119da:	89fb      	ldrh	r3, [r7, #14]
 80119dc:	e012      	b.n	8011a04 <st25r3916SetRegisterBits+0x52>

    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 80119de:	7b7a      	ldrb	r2, [r7, #13]
 80119e0:	79bb      	ldrb	r3, [r7, #6]
 80119e2:	4313      	orrs	r3, r2
 80119e4:	b2da      	uxtb	r2, r3
 80119e6:	7b7b      	ldrb	r3, [r7, #13]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d101      	bne.n	80119f0 <st25r3916SetRegisterBits+0x3e>
    {
        return ERR_NONE;
 80119ec:	2300      	movs	r3, #0
 80119ee:	e009      	b.n	8011a04 <st25r3916SetRegisterBits+0x52>
    }

    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 80119f0:	7b7a      	ldrb	r2, [r7, #13]
 80119f2:	79bb      	ldrb	r3, [r7, #6]
 80119f4:	4313      	orrs	r3, r2
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	79fb      	ldrb	r3, [r7, #7]
 80119fa:	4611      	mov	r1, r2
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7ff fe51 	bl	80116a4 <st25r3916WriteRegister>
 8011a02:	4603      	mov	r3, r0
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <st25r3916ChangeRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	4603      	mov	r3, r0
 8011a14:	71fb      	strb	r3, [r7, #7]
 8011a16:	460b      	mov	r3, r1
 8011a18:	71bb      	strb	r3, [r7, #6]
 8011a1a:	4613      	mov	r3, r2
 8011a1c:	717b      	strb	r3, [r7, #5]
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 8011a1e:	79ba      	ldrb	r2, [r7, #6]
 8011a20:	797b      	ldrb	r3, [r7, #5]
 8011a22:	4013      	ands	r3, r2
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	79b9      	ldrb	r1, [r7, #6]
 8011a28:	79fb      	ldrb	r3, [r7, #7]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f000 f805 	bl	8011a3a <st25r3916ModifyRegister>
 8011a30:	4603      	mov	r3, r0
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3708      	adds	r7, #8
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <st25r3916ModifyRegister>:


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b084      	sub	sp, #16
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	4603      	mov	r3, r0
 8011a42:	71fb      	strb	r3, [r7, #7]
 8011a44:	460b      	mov	r3, r1
 8011a46:	71bb      	strb	r3, [r7, #6]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
 8011a4c:	f107 020c 	add.w	r2, r7, #12
 8011a50:	79fb      	ldrb	r3, [r7, #7]
 8011a52:	4611      	mov	r1, r2
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7ff fde7 	bl	8011628 <st25r3916ReadRegister>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	81fb      	strh	r3, [r7, #14]
 8011a5e:	89fb      	ldrh	r3, [r7, #14]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d001      	beq.n	8011a68 <st25r3916ModifyRegister+0x2e>
 8011a64:	89fb      	ldrh	r3, [r7, #14]
 8011a66:	e019      	b.n	8011a9c <st25r3916ModifyRegister+0x62>

    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8011a68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011a6c:	43db      	mvns	r3, r3
 8011a6e:	b25a      	sxtb	r2, r3
 8011a70:	7b3b      	ldrb	r3, [r7, #12]
 8011a72:	b25b      	sxtb	r3, r3
 8011a74:	4013      	ands	r3, r2
 8011a76:	b25b      	sxtb	r3, r3
 8011a78:	737b      	strb	r3, [r7, #13]
    wrVal |= set_mask;
 8011a7a:	7b7a      	ldrb	r2, [r7, #13]
 8011a7c:	797b      	ldrb	r3, [r7, #5]
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	737b      	strb	r3, [r7, #13]

    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8011a82:	7b3b      	ldrb	r3, [r7, #12]
 8011a84:	7b7a      	ldrb	r2, [r7, #13]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d101      	bne.n	8011a8e <st25r3916ModifyRegister+0x54>
    {
        return ERR_NONE;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	e006      	b.n	8011a9c <st25r3916ModifyRegister+0x62>
    }

    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 8011a8e:	7b7a      	ldrb	r2, [r7, #13]
 8011a90:	79fb      	ldrb	r3, [r7, #7]
 8011a92:	4611      	mov	r1, r2
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff fe05 	bl	80116a4 <st25r3916WriteRegister>
 8011a9a:	4603      	mov	r3, r0
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3710      	adds	r7, #16
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	4603      	mov	r3, r0
 8011aac:	71fb      	strb	r3, [r7, #7]
 8011aae:	460b      	mov	r3, r1
 8011ab0:	71bb      	strb	r3, [r7, #6]
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	717b      	strb	r3, [r7, #5]
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;

    /* Read current reg value */
    EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8011ab6:	f107 020c 	add.w	r2, r7, #12
 8011aba:	79fb      	ldrb	r3, [r7, #7]
 8011abc:	4611      	mov	r1, r2
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7ff fefa 	bl	80118b8 <st25r3916ReadTestRegister>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	81fb      	strh	r3, [r7, #14]
 8011ac8:	89fb      	ldrh	r3, [r7, #14]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d001      	beq.n	8011ad2 <st25r3916ChangeTestRegisterBits+0x2e>
 8011ace:	89fb      	ldrh	r3, [r7, #14]
 8011ad0:	e01c      	b.n	8011b0c <st25r3916ChangeTestRegisterBits+0x68>

    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 8011ad2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011ad6:	43db      	mvns	r3, r3
 8011ad8:	b25a      	sxtb	r2, r3
 8011ada:	7b3b      	ldrb	r3, [r7, #12]
 8011adc:	b25b      	sxtb	r3, r3
 8011ade:	4013      	ands	r3, r2
 8011ae0:	b25b      	sxtb	r3, r3
 8011ae2:	737b      	strb	r3, [r7, #13]
    wrVal |= (uint8_t)(value & valueMask);
 8011ae4:	797a      	ldrb	r2, [r7, #5]
 8011ae6:	79bb      	ldrb	r3, [r7, #6]
 8011ae8:	4013      	ands	r3, r2
 8011aea:	b2da      	uxtb	r2, r3
 8011aec:	7b7b      	ldrb	r3, [r7, #13]
 8011aee:	4313      	orrs	r3, r2
 8011af0:	737b      	strb	r3, [r7, #13]

    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8011af2:	7b3b      	ldrb	r3, [r7, #12]
 8011af4:	7b7a      	ldrb	r2, [r7, #13]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d101      	bne.n	8011afe <st25r3916ChangeTestRegisterBits+0x5a>
    {
        return ERR_NONE;
 8011afa:	2300      	movs	r3, #0
 8011afc:	e006      	b.n	8011b0c <st25r3916ChangeTestRegisterBits+0x68>
    }

    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 8011afe:	7b7a      	ldrb	r2, [r7, #13]
 8011b00:	79fb      	ldrb	r3, [r7, #7]
 8011b02:	4611      	mov	r1, r2
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7ff fef8 	bl	80118fa <st25r3916WriteTestRegister>
 8011b0a:	4603      	mov	r3, r0
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3710      	adds	r7, #16
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	71fb      	strb	r3, [r7, #7]
 8011b1e:	460b      	mov	r3, r1
 8011b20:	71bb      	strb	r3, [r7, #6]
 8011b22:	4613      	mov	r3, r2
 8011b24:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;

    regVal = 0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	73fb      	strb	r3, [r7, #15]
    st25r3916ReadRegister( reg, &regVal );
 8011b2a:	f107 020f 	add.w	r2, r7, #15
 8011b2e:	79fb      	ldrb	r3, [r7, #7]
 8011b30:	4611      	mov	r1, r2
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7ff fd78 	bl	8011628 <st25r3916ReadRegister>

    return ( (regVal & mask) == val );
 8011b38:	7bfa      	ldrb	r2, [r7, #15]
 8011b3a:	79bb      	ldrb	r3, [r7, #6]
 8011b3c:	4013      	ands	r3, r2
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	797a      	ldrb	r2, [r7, #5]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	bf0c      	ite	eq
 8011b46:	2301      	moveq	r3, #1
 8011b48:	2300      	movne	r3, #0
 8011b4a:	b2db      	uxtb	r3, r3
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3710      	adds	r7, #16
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	71fb      	strb	r3, [r7, #7]
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 8011b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	da01      	bge.n	8011b6a <st25r3916IsRegValid+0x16>
    {
        return false;
 8011b66:	2300      	movs	r3, #0
 8011b68:	e000      	b.n	8011b6c <st25r3916IsRegValid+0x18>
    }
    return true;
 8011b6a:	2301      	movs	r3, #1
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bc80      	pop	{r7}
 8011b74:	4770      	bx	lr
	...

08011b78 <__NVIC_EnableIRQ>:
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	4603      	mov	r3, r0
 8011b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	db0b      	blt.n	8011ba2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	f003 021f 	and.w	r2, r3, #31
 8011b90:	4906      	ldr	r1, [pc, #24]	; (8011bac <__NVIC_EnableIRQ+0x34>)
 8011b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b96:	095b      	lsrs	r3, r3, #5
 8011b98:	2001      	movs	r0, #1
 8011b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8011b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011ba2:	bf00      	nop
 8011ba4:	370c      	adds	r7, #12
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bc80      	pop	{r7}
 8011baa:	4770      	bx	lr
 8011bac:	e000e100 	.word	0xe000e100

08011bb0 <__NVIC_DisableIRQ>:
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	db12      	blt.n	8011be8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011bc2:	79fb      	ldrb	r3, [r7, #7]
 8011bc4:	f003 021f 	and.w	r2, r3, #31
 8011bc8:	490a      	ldr	r1, [pc, #40]	; (8011bf4 <__NVIC_DisableIRQ+0x44>)
 8011bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bce:	095b      	lsrs	r3, r3, #5
 8011bd0:	2001      	movs	r0, #1
 8011bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8011bd6:	3320      	adds	r3, #32
 8011bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011bdc:	f3bf 8f4f 	dsb	sy
}
 8011be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011be2:	f3bf 8f6f 	isb	sy
}
 8011be6:	bf00      	nop
}
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bc80      	pop	{r7}
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	e000e100 	.word	0xe000e100

08011bf8 <st25r3916InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3916InitInterrupts( void )
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	af00      	add	r7, sp, #0
    platformIrqST25RPinInitialize();
    platformIrqST25RSetCallback( st25r3916Isr );


    st25r3916interrupt.callback     = NULL;
 8011bfc:	4b07      	ldr	r3, [pc, #28]	; (8011c1c <st25r3916InitInterrupts+0x24>)
 8011bfe:	2200      	movs	r2, #0
 8011c00:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 8011c02:	4b06      	ldr	r3, [pc, #24]	; (8011c1c <st25r3916InitInterrupts+0x24>)
 8011c04:	2200      	movs	r2, #0
 8011c06:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 8011c08:	4b04      	ldr	r3, [pc, #16]	; (8011c1c <st25r3916InitInterrupts+0x24>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 8011c0e:	4b03      	ldr	r3, [pc, #12]	; (8011c1c <st25r3916InitInterrupts+0x24>)
 8011c10:	2200      	movs	r2, #0
 8011c12:	60da      	str	r2, [r3, #12]
}
 8011c14:	bf00      	nop
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bc80      	pop	{r7}
 8011c1a:	4770      	bx	lr
 8011c1c:	20001964 	.word	0x20001964

08011c20 <st25r3916Isr>:


/*******************************************************************************/
void st25r3916Isr( void )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 8011c24:	f000 f80c 	bl	8011c40 <st25r3916CheckForReceivedInterrupts>

    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 8011c28:	4b04      	ldr	r3, [pc, #16]	; (8011c3c <st25r3916Isr+0x1c>)
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d002      	beq.n	8011c36 <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 8011c30:	4b02      	ldr	r3, [pc, #8]	; (8011c3c <st25r3916Isr+0x1c>)
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	4798      	blx	r3
    }
}
 8011c36:	bf00      	nop
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	20001964 	.word	0x20001964

08011c40 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;

    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 8011c46:	2300      	movs	r3, #0
 8011c48:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 8011c4a:	463b      	mov	r3, r7
 8011c4c:	2204      	movs	r2, #4
 8011c4e:	21ff      	movs	r1, #255	; 0xff
 8011c50:	4618      	mov	r0, r3
 8011c52:	f000 fa8b 	bl	801216c <memset>


    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 8011c56:	e019      	b.n	8011c8c <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 8011c58:	463b      	mov	r3, r7
 8011c5a:	2204      	movs	r2, #4
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	201a      	movs	r0, #26
 8011c60:	f7ff fcf3 	bl	801164a <st25r3916ReadMultipleRegisters>

       irqStatus |= (uint32_t)iregs[0];
 8011c64:	783b      	ldrb	r3, [r7, #0]
 8011c66:	461a      	mov	r2, r3
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	4313      	orrs	r3, r2
 8011c6c:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 8011c6e:	787b      	ldrb	r3, [r7, #1]
 8011c70:	021b      	lsls	r3, r3, #8
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	4313      	orrs	r3, r2
 8011c76:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 8011c78:	78bb      	ldrb	r3, [r7, #2]
 8011c7a:	041b      	lsls	r3, r3, #16
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 8011c82:	78fb      	ldrb	r3, [r7, #3]
 8011c84:	061b      	lsls	r3, r3, #24
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 8011c8c:	2110      	movs	r1, #16
 8011c8e:	481a      	ldr	r0, [pc, #104]	; (8011cf8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 8011c90:	f7f0 fa56 	bl	8002140 <HAL_GPIO_ReadPin>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d0de      	beq.n	8011c58 <st25r3916CheckForReceivedInterrupts+0x18>
   }

   /* Forward all interrupts, even masked ones to application */
   platformProtectST25RIrqStatus();
 8011c9a:	4b18      	ldr	r3, [pc, #96]	; (8011cfc <st25r3916CheckForReceivedInterrupts+0xbc>)
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	4b16      	ldr	r3, [pc, #88]	; (8011cfc <st25r3916CheckForReceivedInterrupts+0xbc>)
 8011ca4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011ca6:	f3bf 8f4f 	dsb	sy
}
 8011caa:	bf00      	nop
 8011cac:	200a      	movs	r0, #10
 8011cae:	f7ff ff7f 	bl	8011bb0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011cb2:	f3bf 8f4f 	dsb	sy
}
 8011cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011cb8:	f3bf 8f6f 	isb	sy
}
 8011cbc:	bf00      	nop
   st25r3916interrupt.status |= irqStatus;
 8011cbe:	4b10      	ldr	r3, [pc, #64]	; (8011d00 <st25r3916CheckForReceivedInterrupts+0xc0>)
 8011cc0:	689a      	ldr	r2, [r3, #8]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	4a0e      	ldr	r2, [pc, #56]	; (8011d00 <st25r3916CheckForReceivedInterrupts+0xc0>)
 8011cc8:	6093      	str	r3, [r2, #8]
   platformUnprotectST25RIrqStatus();
 8011cca:	4b0c      	ldr	r3, [pc, #48]	; (8011cfc <st25r3916CheckForReceivedInterrupts+0xbc>)
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	3b01      	subs	r3, #1
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	4b0a      	ldr	r3, [pc, #40]	; (8011cfc <st25r3916CheckForReceivedInterrupts+0xbc>)
 8011cd4:	701a      	strb	r2, [r3, #0]
 8011cd6:	4b09      	ldr	r3, [pc, #36]	; (8011cfc <st25r3916CheckForReceivedInterrupts+0xbc>)
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d102      	bne.n	8011ce4 <st25r3916CheckForReceivedInterrupts+0xa4>
 8011cde:	200a      	movs	r0, #10
 8011ce0:	f7ff ff4a 	bl	8011b78 <__NVIC_EnableIRQ>

   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 8011ce4:	4b06      	ldr	r3, [pc, #24]	; (8011d00 <st25r3916CheckForReceivedInterrupts+0xc0>)
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f000 f945 	bl	8011f78 <st25r3916ledEvtIrq>
}
 8011cee:	bf00      	nop
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	40011000 	.word	0x40011000
 8011cfc:	200009d1 	.word	0x200009d1
 8011d00:	20001964 	.word	0x20001964

08011d04 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b086      	sub	sp, #24
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
    uint8_t  i;
    uint32_t old_mask;
    uint32_t new_mask;


    old_mask = st25r3916interrupt.mask;
 8011d0e:	4b1e      	ldr	r3, [pc, #120]	; (8011d88 <st25r3916ModifyInterrupts+0x84>)
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	613b      	str	r3, [r7, #16]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	43da      	mvns	r2, r3
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	401a      	ands	r2, r3
 8011d1c:	6939      	ldr	r1, [r7, #16]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	400b      	ands	r3, r1
 8011d22:	4313      	orrs	r3, r2
 8011d24:	60fb      	str	r3, [r7, #12]
    st25r3916interrupt.mask &= ~clr_mask;
 8011d26:	4b18      	ldr	r3, [pc, #96]	; (8011d88 <st25r3916ModifyInterrupts+0x84>)
 8011d28:	68da      	ldr	r2, [r3, #12]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	43db      	mvns	r3, r3
 8011d2e:	4013      	ands	r3, r2
 8011d30:	4a15      	ldr	r2, [pc, #84]	; (8011d88 <st25r3916ModifyInterrupts+0x84>)
 8011d32:	60d3      	str	r3, [r2, #12]
    st25r3916interrupt.mask |= set_mask;
 8011d34:	4b14      	ldr	r3, [pc, #80]	; (8011d88 <st25r3916ModifyInterrupts+0x84>)
 8011d36:	68da      	ldr	r2, [r3, #12]
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	4a12      	ldr	r2, [pc, #72]	; (8011d88 <st25r3916ModifyInterrupts+0x84>)
 8011d3e:	60d3      	str	r3, [r2, #12]

    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 8011d40:	2300      	movs	r3, #0
 8011d42:	75fb      	strb	r3, [r7, #23]
 8011d44:	e019      	b.n	8011d7a <st25r3916ModifyInterrupts+0x76>
    {
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 8011d46:	7dfb      	ldrb	r3, [r7, #23]
 8011d48:	00db      	lsls	r3, r3, #3
 8011d4a:	68fa      	ldr	r2, [r7, #12]
 8011d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00d      	beq.n	8011d72 <st25r3916ModifyInterrupts+0x6e>
        {
            continue;
        }

        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 8011d56:	7dfb      	ldrb	r3, [r7, #23]
 8011d58:	3316      	adds	r3, #22
 8011d5a:	b2d8      	uxtb	r0, r3
 8011d5c:	4b0a      	ldr	r3, [pc, #40]	; (8011d88 <st25r3916ModifyInterrupts+0x84>)
 8011d5e:	68da      	ldr	r2, [r3, #12]
 8011d60:	7dfb      	ldrb	r3, [r7, #23]
 8011d62:	00db      	lsls	r3, r3, #3
 8011d64:	fa22 f303 	lsr.w	r3, r2, r3
 8011d68:	b2db      	uxtb	r3, r3
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	f7ff fc9a 	bl	80116a4 <st25r3916WriteRegister>
 8011d70:	e000      	b.n	8011d74 <st25r3916ModifyInterrupts+0x70>
            continue;
 8011d72:	bf00      	nop
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 8011d74:	7dfb      	ldrb	r3, [r7, #23]
 8011d76:	3301      	adds	r3, #1
 8011d78:	75fb      	strb	r3, [r7, #23]
 8011d7a:	7dfb      	ldrb	r3, [r7, #23]
 8011d7c:	2b03      	cmp	r3, #3
 8011d7e:	d9e2      	bls.n	8011d46 <st25r3916ModifyInterrupts+0x42>
    }
    return;
 8011d80:	bf00      	nop
}
 8011d82:	3718      	adds	r7, #24
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	20001964 	.word	0x20001964

08011d8c <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	460b      	mov	r3, r1
 8011d96:	807b      	strh	r3, [r7, #2]
    uint32_t tmrDelay;
    uint32_t status;

    tmrDelay = platformTimerCreate( tmo );
 8011d98:	887b      	ldrh	r3, [r7, #2]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f000 f962 	bl	8012064 <timerCalculateTimer>
 8011da0:	60f8      	str	r0, [r7, #12]

    /* Run until specific interrupt has happen or the timer has expired */
    do
    {
        status = (st25r3916interrupt.status & mask);
 8011da2:	4b22      	ldr	r3, [pc, #136]	; (8011e2c <st25r3916WaitForInterruptsTimed+0xa0>)
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	4013      	ands	r3, r2
 8011daa:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmrDelay ) || (tmo == 0U)) && (status == 0U) );
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f000 f967 	bl	8012080 <timerIsExpired>
 8011db2:	4603      	mov	r3, r0
 8011db4:	f083 0301 	eor.w	r3, r3, #1
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d102      	bne.n	8011dc4 <st25r3916WaitForInterruptsTimed+0x38>
 8011dbe:	887b      	ldrh	r3, [r7, #2]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d102      	bne.n	8011dca <st25r3916WaitForInterruptsTimed+0x3e>
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d0eb      	beq.n	8011da2 <st25r3916WaitForInterruptsTimed+0x16>

    platformTimerDestroy( tmrDelay );

    status = st25r3916interrupt.status & mask;
 8011dca:	4b18      	ldr	r3, [pc, #96]	; (8011e2c <st25r3916WaitForInterruptsTimed+0xa0>)
 8011dcc:	689b      	ldr	r3, [r3, #8]
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	4013      	ands	r3, r2
 8011dd2:	60bb      	str	r3, [r7, #8]

    platformProtectST25RIrqStatus();
 8011dd4:	4b16      	ldr	r3, [pc, #88]	; (8011e30 <st25r3916WaitForInterruptsTimed+0xa4>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	3301      	adds	r3, #1
 8011dda:	b2da      	uxtb	r2, r3
 8011ddc:	4b14      	ldr	r3, [pc, #80]	; (8011e30 <st25r3916WaitForInterruptsTimed+0xa4>)
 8011dde:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011de0:	f3bf 8f4f 	dsb	sy
}
 8011de4:	bf00      	nop
 8011de6:	200a      	movs	r0, #10
 8011de8:	f7ff fee2 	bl	8011bb0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011dec:	f3bf 8f4f 	dsb	sy
}
 8011df0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011df2:	f3bf 8f6f 	isb	sy
}
 8011df6:	bf00      	nop
    st25r3916interrupt.status &= ~status;
 8011df8:	4b0c      	ldr	r3, [pc, #48]	; (8011e2c <st25r3916WaitForInterruptsTimed+0xa0>)
 8011dfa:	689a      	ldr	r2, [r3, #8]
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	43db      	mvns	r3, r3
 8011e00:	4013      	ands	r3, r2
 8011e02:	4a0a      	ldr	r2, [pc, #40]	; (8011e2c <st25r3916WaitForInterruptsTimed+0xa0>)
 8011e04:	6093      	str	r3, [r2, #8]
    platformUnprotectST25RIrqStatus();
 8011e06:	4b0a      	ldr	r3, [pc, #40]	; (8011e30 <st25r3916WaitForInterruptsTimed+0xa4>)
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	4b08      	ldr	r3, [pc, #32]	; (8011e30 <st25r3916WaitForInterruptsTimed+0xa4>)
 8011e10:	701a      	strb	r2, [r3, #0]
 8011e12:	4b07      	ldr	r3, [pc, #28]	; (8011e30 <st25r3916WaitForInterruptsTimed+0xa4>)
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d102      	bne.n	8011e20 <st25r3916WaitForInterruptsTimed+0x94>
 8011e1a:	200a      	movs	r0, #10
 8011e1c:	f7ff feac 	bl	8011b78 <__NVIC_EnableIRQ>

    return status;
 8011e20:	68bb      	ldr	r3, [r7, #8]
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3710      	adds	r7, #16
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}
 8011e2a:	bf00      	nop
 8011e2c:	20001964 	.word	0x20001964
 8011e30:	200009d1 	.word	0x200009d1

08011e34 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b084      	sub	sp, #16
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 8011e3c:	4b19      	ldr	r3, [pc, #100]	; (8011ea4 <st25r3916GetInterrupt+0x70>)
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	4013      	ands	r3, r2
 8011e44:	60fb      	str	r3, [r7, #12]
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d025      	beq.n	8011e98 <st25r3916GetInterrupt+0x64>
    {
        platformProtectST25RIrqStatus();
 8011e4c:	4b16      	ldr	r3, [pc, #88]	; (8011ea8 <st25r3916GetInterrupt+0x74>)
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	3301      	adds	r3, #1
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	4b14      	ldr	r3, [pc, #80]	; (8011ea8 <st25r3916GetInterrupt+0x74>)
 8011e56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e58:	f3bf 8f4f 	dsb	sy
}
 8011e5c:	bf00      	nop
 8011e5e:	200a      	movs	r0, #10
 8011e60:	f7ff fea6 	bl	8011bb0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011e64:	f3bf 8f4f 	dsb	sy
}
 8011e68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011e6a:	f3bf 8f6f 	isb	sy
}
 8011e6e:	bf00      	nop
        st25r3916interrupt.status &= ~irqs;
 8011e70:	4b0c      	ldr	r3, [pc, #48]	; (8011ea4 <st25r3916GetInterrupt+0x70>)
 8011e72:	689a      	ldr	r2, [r3, #8]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	43db      	mvns	r3, r3
 8011e78:	4013      	ands	r3, r2
 8011e7a:	4a0a      	ldr	r2, [pc, #40]	; (8011ea4 <st25r3916GetInterrupt+0x70>)
 8011e7c:	6093      	str	r3, [r2, #8]
        platformUnprotectST25RIrqStatus();
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	; (8011ea8 <st25r3916GetInterrupt+0x74>)
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	3b01      	subs	r3, #1
 8011e84:	b2da      	uxtb	r2, r3
 8011e86:	4b08      	ldr	r3, [pc, #32]	; (8011ea8 <st25r3916GetInterrupt+0x74>)
 8011e88:	701a      	strb	r2, [r3, #0]
 8011e8a:	4b07      	ldr	r3, [pc, #28]	; (8011ea8 <st25r3916GetInterrupt+0x74>)
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d102      	bne.n	8011e98 <st25r3916GetInterrupt+0x64>
 8011e92:	200a      	movs	r0, #10
 8011e94:	f7ff fe70 	bl	8011b78 <__NVIC_EnableIRQ>
    }

    return irqs;
 8011e98:	68fb      	ldr	r3, [r7, #12]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	20001964 	.word	0x20001964
 8011ea8:	200009d1 	.word	0x200009d1

08011eac <st25r3916ClearAndEnableInterrupts>:


/*******************************************************************************/
void st25r3916ClearAndEnableInterrupts( uint32_t mask )
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
    st25r3916GetInterrupt( mask );
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7ff ffbd 	bl	8011e34 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( mask );
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 f804 	bl	8011ec8 <st25r3916EnableInterrupts>
}
 8011ec0:	bf00      	nop
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <st25r3916EnableInterrupts>:


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(mask, 0);
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f7ff ff16 	bl	8011d04 <st25r3916ModifyInterrupts>
}
 8011ed8:	bf00      	nop
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
    st25r3916ModifyInterrupts(0, mask);
 8011ee8:	6879      	ldr	r1, [r7, #4]
 8011eea:	2000      	movs	r0, #0
 8011eec:	f7ff ff0a 	bl	8011d04 <st25r3916ModifyInterrupts>
}
 8011ef0:	bf00      	nop
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 8011efe:	1d3b      	adds	r3, r7, #4
 8011f00:	2204      	movs	r2, #4
 8011f02:	4619      	mov	r1, r3
 8011f04:	201a      	movs	r0, #26
 8011f06:	f7ff fba0 	bl	801164a <st25r3916ReadMultipleRegisters>

    platformProtectST25RIrqStatus();
 8011f0a:	4b13      	ldr	r3, [pc, #76]	; (8011f58 <st25r3916ClearInterrupts+0x60>)
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	b2da      	uxtb	r2, r3
 8011f12:	4b11      	ldr	r3, [pc, #68]	; (8011f58 <st25r3916ClearInterrupts+0x60>)
 8011f14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011f16:	f3bf 8f4f 	dsb	sy
}
 8011f1a:	bf00      	nop
 8011f1c:	200a      	movs	r0, #10
 8011f1e:	f7ff fe47 	bl	8011bb0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8011f22:	f3bf 8f4f 	dsb	sy
}
 8011f26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011f28:	f3bf 8f6f 	isb	sy
}
 8011f2c:	bf00      	nop
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 8011f2e:	4b0b      	ldr	r3, [pc, #44]	; (8011f5c <st25r3916ClearInterrupts+0x64>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	609a      	str	r2, [r3, #8]
    platformUnprotectST25RIrqStatus();
 8011f34:	4b08      	ldr	r3, [pc, #32]	; (8011f58 <st25r3916ClearInterrupts+0x60>)
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	4b06      	ldr	r3, [pc, #24]	; (8011f58 <st25r3916ClearInterrupts+0x60>)
 8011f3e:	701a      	strb	r2, [r3, #0]
 8011f40:	4b05      	ldr	r3, [pc, #20]	; (8011f58 <st25r3916ClearInterrupts+0x60>)
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d103      	bne.n	8011f50 <st25r3916ClearInterrupts+0x58>
 8011f48:	200a      	movs	r0, #10
 8011f4a:	f7ff fe15 	bl	8011b78 <__NVIC_EnableIRQ>
    return;
 8011f4e:	bf00      	nop
 8011f50:	bf00      	nop
}
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	200009d1 	.word	0x200009d1
 8011f5c:	20001964 	.word	0x20001964

08011f60 <st25r3916ledInit>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3916ledInit( void )
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	af00      	add	r7, sp, #0
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();

    st25r3916ledRxOff();
    st25r3916ledFieldOff();
 8011f64:	2200      	movs	r2, #0
 8011f66:	2180      	movs	r1, #128	; 0x80
 8011f68:	4802      	ldr	r0, [pc, #8]	; (8011f74 <st25r3916ledInit+0x14>)
 8011f6a:	f7f0 f900 	bl	800216e <HAL_GPIO_WritePin>
}
 8011f6e:	bf00      	nop
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	40012000 	.word	0x40012000

08011f78 <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
    if( (irqs & (ST25R3916_IRQ_MASK_TXE | ST25R3916_IRQ_MASK_CAT) ) != 0U )
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f403 7302 	and.w	r3, r3, #520	; 0x208
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d004      	beq.n	8011f94 <st25r3916ledEvtIrq+0x1c>
    {
        st25r3916ledFieldOn();
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	2180      	movs	r1, #128	; 0x80
 8011f8e:	4803      	ldr	r0, [pc, #12]	; (8011f9c <st25r3916ledEvtIrq+0x24>)
 8011f90:	f7f0 f8ed 	bl	800216e <HAL_GPIO_WritePin>
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U )
    {
        st25r3916ledRxOff();
    }
}
 8011f94:	bf00      	nop
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	40012000 	.word	0x40012000

08011fa0 <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	460a      	mov	r2, r1
 8011faa:	71fb      	strb	r3, [r7, #7]
 8011fac:	4613      	mov	r3, r2
 8011fae:	71bb      	strb	r3, [r7, #6]
    if( reg == ST25R3916_REG_OP_CONTROL )
 8011fb0:	79fb      	ldrb	r3, [r7, #7]
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d110      	bne.n	8011fd8 <st25r3916ledEvtWrReg+0x38>
    {
        if( (ST25R3916_REG_OP_CONTROL_tx_en & val) != 0U )
 8011fb6:	79bb      	ldrb	r3, [r7, #6]
 8011fb8:	f003 0308 	and.w	r3, r3, #8
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d005      	beq.n	8011fce <st25r3916ledEvtWrReg+0x2e>
        {
            st25r3916ledFieldOn();
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	2180      	movs	r1, #128	; 0x80
 8011fc6:	4806      	ldr	r0, [pc, #24]	; (8011fe0 <st25r3916ledEvtWrReg+0x40>)
 8011fc8:	f7f0 f8d1 	bl	800216e <HAL_GPIO_WritePin>
        else
        {
            st25r3916ledFieldOff();
        }
    }
}
 8011fcc:	e004      	b.n	8011fd8 <st25r3916ledEvtWrReg+0x38>
            st25r3916ledFieldOff();
 8011fce:	2200      	movs	r2, #0
 8011fd0:	2180      	movs	r1, #128	; 0x80
 8011fd2:	4803      	ldr	r0, [pc, #12]	; (8011fe0 <st25r3916ledEvtWrReg+0x40>)
 8011fd4:	f7f0 f8cb 	bl	800216e <HAL_GPIO_WritePin>
}
 8011fd8:	bf00      	nop
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	40012000 	.word	0x40012000

08011fe4 <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	4603      	mov	r3, r0
 8011fec:	6039      	str	r1, [r7, #0]
 8011fee:	71fb      	strb	r3, [r7, #7]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    for(i=0; i<(len); i++)
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	73fb      	strb	r3, [r7, #15]
 8011ff8:	e00d      	b.n	8012016 <st25r3916ledEvtWrMultiReg+0x32>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 8011ffa:	79fa      	ldrb	r2, [r7, #7]
 8011ffc:	7bfb      	ldrb	r3, [r7, #15]
 8011ffe:	4413      	add	r3, r2
 8012000:	b2d8      	uxtb	r0, r3
 8012002:	7bfb      	ldrb	r3, [r7, #15]
 8012004:	683a      	ldr	r2, [r7, #0]
 8012006:	4413      	add	r3, r2
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	4619      	mov	r1, r3
 801200c:	f7ff ffc8 	bl	8011fa0 <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 8012010:	7bfb      	ldrb	r3, [r7, #15]
 8012012:	3301      	adds	r3, #1
 8012014:	73fb      	strb	r3, [r7, #15]
 8012016:	7bfa      	ldrb	r2, [r7, #15]
 8012018:	79bb      	ldrb	r3, [r7, #6]
 801201a:	429a      	cmp	r2, r3
 801201c:	d3ed      	bcc.n	8011ffa <st25r3916ledEvtWrMultiReg+0x16>
    }
}
 801201e:	bf00      	nop
 8012020:	bf00      	nop
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	4603      	mov	r3, r0
 8012030:	71fb      	strb	r3, [r7, #7]
    if( (cmd >= ST25R3916_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8012032:	79fb      	ldrb	r3, [r7, #7]
 8012034:	2bc3      	cmp	r3, #195	; 0xc3
 8012036:	d907      	bls.n	8012048 <st25r3916ledEvtCmd+0x20>
 8012038:	79fb      	ldrb	r3, [r7, #7]
 801203a:	2bc9      	cmp	r3, #201	; 0xc9
 801203c:	d804      	bhi.n	8012048 <st25r3916ledEvtCmd+0x20>
    {
        st25r3916ledFieldOff();
 801203e:	2200      	movs	r2, #0
 8012040:	2180      	movs	r1, #128	; 0x80
 8012042:	4807      	ldr	r0, [pc, #28]	; (8012060 <st25r3916ledEvtCmd+0x38>)
 8012044:	f7f0 f893 	bl	800216e <HAL_GPIO_WritePin>
    if( cmd == ST25R3916_CMD_UNMASK_RECEIVE_DATA )
    {
        st25r3916ledRxOff();
    }

    if( cmd == ST25R3916_CMD_SET_DEFAULT )
 8012048:	79fb      	ldrb	r3, [r7, #7]
 801204a:	2bc1      	cmp	r3, #193	; 0xc1
 801204c:	d104      	bne.n	8012058 <st25r3916ledEvtCmd+0x30>
    {
        st25r3916ledFieldOff();
 801204e:	2200      	movs	r2, #0
 8012050:	2180      	movs	r1, #128	; 0x80
 8012052:	4803      	ldr	r0, [pc, #12]	; (8012060 <st25r3916ledEvtCmd+0x38>)
 8012054:	f7f0 f88b 	bl	800216e <HAL_GPIO_WritePin>
        st25r3916ledRxOff();
    }
}
 8012058:	bf00      	nop
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}
 8012060:	40012000 	.word	0x40012000

08012064 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	4603      	mov	r3, r0
 801206c:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 801206e:	f7ef fc75 	bl	800195c <HAL_GetTick>
 8012072:	4602      	mov	r2, r0
 8012074:	88fb      	ldrh	r3, [r7, #6]
 8012076:	4413      	add	r3, r2
}
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;

  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8012088:	f7ef fc68 	bl	800195c <HAL_GetTick>
 801208c:	4602      	mov	r2, r0
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	1a9b      	subs	r3, r3, r2
 8012092:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */

  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	2b00      	cmp	r3, #0
 801209c:	da01      	bge.n	80120a2 <timerIsExpired+0x22>
  {
    return true;
 801209e:	2301      	movs	r3, #1
 80120a0:	e000      	b.n	80120a4 <timerIsExpired+0x24>
  }

  return false;
 80120a2:	2300      	movs	r3, #0
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <__errno>:
 80120ac:	4b01      	ldr	r3, [pc, #4]	; (80120b4 <__errno+0x8>)
 80120ae:	6818      	ldr	r0, [r3, #0]
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	200000b8 	.word	0x200000b8

080120b8 <__libc_init_array>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	2600      	movs	r6, #0
 80120bc:	4d0c      	ldr	r5, [pc, #48]	; (80120f0 <__libc_init_array+0x38>)
 80120be:	4c0d      	ldr	r4, [pc, #52]	; (80120f4 <__libc_init_array+0x3c>)
 80120c0:	1b64      	subs	r4, r4, r5
 80120c2:	10a4      	asrs	r4, r4, #2
 80120c4:	42a6      	cmp	r6, r4
 80120c6:	d109      	bne.n	80120dc <__libc_init_array+0x24>
 80120c8:	f001 f82e 	bl	8013128 <_init>
 80120cc:	2600      	movs	r6, #0
 80120ce:	4d0a      	ldr	r5, [pc, #40]	; (80120f8 <__libc_init_array+0x40>)
 80120d0:	4c0a      	ldr	r4, [pc, #40]	; (80120fc <__libc_init_array+0x44>)
 80120d2:	1b64      	subs	r4, r4, r5
 80120d4:	10a4      	asrs	r4, r4, #2
 80120d6:	42a6      	cmp	r6, r4
 80120d8:	d105      	bne.n	80120e6 <__libc_init_array+0x2e>
 80120da:	bd70      	pop	{r4, r5, r6, pc}
 80120dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80120e0:	4798      	blx	r3
 80120e2:	3601      	adds	r6, #1
 80120e4:	e7ee      	b.n	80120c4 <__libc_init_array+0xc>
 80120e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80120ea:	4798      	blx	r3
 80120ec:	3601      	adds	r6, #1
 80120ee:	e7f2      	b.n	80120d6 <__libc_init_array+0x1e>
 80120f0:	080138d4 	.word	0x080138d4
 80120f4:	080138d4 	.word	0x080138d4
 80120f8:	080138d4 	.word	0x080138d4
 80120fc:	080138d8 	.word	0x080138d8

08012100 <memcmp>:
 8012100:	b530      	push	{r4, r5, lr}
 8012102:	2400      	movs	r4, #0
 8012104:	3901      	subs	r1, #1
 8012106:	42a2      	cmp	r2, r4
 8012108:	d101      	bne.n	801210e <memcmp+0xe>
 801210a:	2000      	movs	r0, #0
 801210c:	e005      	b.n	801211a <memcmp+0x1a>
 801210e:	5d03      	ldrb	r3, [r0, r4]
 8012110:	3401      	adds	r4, #1
 8012112:	5d0d      	ldrb	r5, [r1, r4]
 8012114:	42ab      	cmp	r3, r5
 8012116:	d0f6      	beq.n	8012106 <memcmp+0x6>
 8012118:	1b58      	subs	r0, r3, r5
 801211a:	bd30      	pop	{r4, r5, pc}

0801211c <memcpy>:
 801211c:	440a      	add	r2, r1
 801211e:	4291      	cmp	r1, r2
 8012120:	f100 33ff 	add.w	r3, r0, #4294967295
 8012124:	d100      	bne.n	8012128 <memcpy+0xc>
 8012126:	4770      	bx	lr
 8012128:	b510      	push	{r4, lr}
 801212a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801212e:	4291      	cmp	r1, r2
 8012130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012134:	d1f9      	bne.n	801212a <memcpy+0xe>
 8012136:	bd10      	pop	{r4, pc}

08012138 <memmove>:
 8012138:	4288      	cmp	r0, r1
 801213a:	b510      	push	{r4, lr}
 801213c:	eb01 0402 	add.w	r4, r1, r2
 8012140:	d902      	bls.n	8012148 <memmove+0x10>
 8012142:	4284      	cmp	r4, r0
 8012144:	4623      	mov	r3, r4
 8012146:	d807      	bhi.n	8012158 <memmove+0x20>
 8012148:	1e43      	subs	r3, r0, #1
 801214a:	42a1      	cmp	r1, r4
 801214c:	d008      	beq.n	8012160 <memmove+0x28>
 801214e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012156:	e7f8      	b.n	801214a <memmove+0x12>
 8012158:	4601      	mov	r1, r0
 801215a:	4402      	add	r2, r0
 801215c:	428a      	cmp	r2, r1
 801215e:	d100      	bne.n	8012162 <memmove+0x2a>
 8012160:	bd10      	pop	{r4, pc}
 8012162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801216a:	e7f7      	b.n	801215c <memmove+0x24>

0801216c <memset>:
 801216c:	4603      	mov	r3, r0
 801216e:	4402      	add	r2, r0
 8012170:	4293      	cmp	r3, r2
 8012172:	d100      	bne.n	8012176 <memset+0xa>
 8012174:	4770      	bx	lr
 8012176:	f803 1b01 	strb.w	r1, [r3], #1
 801217a:	e7f9      	b.n	8012170 <memset+0x4>

0801217c <iprintf>:
 801217c:	b40f      	push	{r0, r1, r2, r3}
 801217e:	4b0a      	ldr	r3, [pc, #40]	; (80121a8 <iprintf+0x2c>)
 8012180:	b513      	push	{r0, r1, r4, lr}
 8012182:	681c      	ldr	r4, [r3, #0]
 8012184:	b124      	cbz	r4, 8012190 <iprintf+0x14>
 8012186:	69a3      	ldr	r3, [r4, #24]
 8012188:	b913      	cbnz	r3, 8012190 <iprintf+0x14>
 801218a:	4620      	mov	r0, r4
 801218c:	f000 fa5e 	bl	801264c <__sinit>
 8012190:	ab05      	add	r3, sp, #20
 8012192:	4620      	mov	r0, r4
 8012194:	9a04      	ldr	r2, [sp, #16]
 8012196:	68a1      	ldr	r1, [r4, #8]
 8012198:	9301      	str	r3, [sp, #4]
 801219a:	f000 fc29 	bl	80129f0 <_vfiprintf_r>
 801219e:	b002      	add	sp, #8
 80121a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121a4:	b004      	add	sp, #16
 80121a6:	4770      	bx	lr
 80121a8:	200000b8 	.word	0x200000b8

080121ac <_puts_r>:
 80121ac:	b570      	push	{r4, r5, r6, lr}
 80121ae:	460e      	mov	r6, r1
 80121b0:	4605      	mov	r5, r0
 80121b2:	b118      	cbz	r0, 80121bc <_puts_r+0x10>
 80121b4:	6983      	ldr	r3, [r0, #24]
 80121b6:	b90b      	cbnz	r3, 80121bc <_puts_r+0x10>
 80121b8:	f000 fa48 	bl	801264c <__sinit>
 80121bc:	69ab      	ldr	r3, [r5, #24]
 80121be:	68ac      	ldr	r4, [r5, #8]
 80121c0:	b913      	cbnz	r3, 80121c8 <_puts_r+0x1c>
 80121c2:	4628      	mov	r0, r5
 80121c4:	f000 fa42 	bl	801264c <__sinit>
 80121c8:	4b2c      	ldr	r3, [pc, #176]	; (801227c <_puts_r+0xd0>)
 80121ca:	429c      	cmp	r4, r3
 80121cc:	d120      	bne.n	8012210 <_puts_r+0x64>
 80121ce:	686c      	ldr	r4, [r5, #4]
 80121d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121d2:	07db      	lsls	r3, r3, #31
 80121d4:	d405      	bmi.n	80121e2 <_puts_r+0x36>
 80121d6:	89a3      	ldrh	r3, [r4, #12]
 80121d8:	0598      	lsls	r0, r3, #22
 80121da:	d402      	bmi.n	80121e2 <_puts_r+0x36>
 80121dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121de:	f000 fad3 	bl	8012788 <__retarget_lock_acquire_recursive>
 80121e2:	89a3      	ldrh	r3, [r4, #12]
 80121e4:	0719      	lsls	r1, r3, #28
 80121e6:	d51d      	bpl.n	8012224 <_puts_r+0x78>
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	b1db      	cbz	r3, 8012224 <_puts_r+0x78>
 80121ec:	3e01      	subs	r6, #1
 80121ee:	68a3      	ldr	r3, [r4, #8]
 80121f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80121f4:	3b01      	subs	r3, #1
 80121f6:	60a3      	str	r3, [r4, #8]
 80121f8:	bb39      	cbnz	r1, 801224a <_puts_r+0x9e>
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	da38      	bge.n	8012270 <_puts_r+0xc4>
 80121fe:	4622      	mov	r2, r4
 8012200:	210a      	movs	r1, #10
 8012202:	4628      	mov	r0, r5
 8012204:	f000 f848 	bl	8012298 <__swbuf_r>
 8012208:	3001      	adds	r0, #1
 801220a:	d011      	beq.n	8012230 <_puts_r+0x84>
 801220c:	250a      	movs	r5, #10
 801220e:	e011      	b.n	8012234 <_puts_r+0x88>
 8012210:	4b1b      	ldr	r3, [pc, #108]	; (8012280 <_puts_r+0xd4>)
 8012212:	429c      	cmp	r4, r3
 8012214:	d101      	bne.n	801221a <_puts_r+0x6e>
 8012216:	68ac      	ldr	r4, [r5, #8]
 8012218:	e7da      	b.n	80121d0 <_puts_r+0x24>
 801221a:	4b1a      	ldr	r3, [pc, #104]	; (8012284 <_puts_r+0xd8>)
 801221c:	429c      	cmp	r4, r3
 801221e:	bf08      	it	eq
 8012220:	68ec      	ldreq	r4, [r5, #12]
 8012222:	e7d5      	b.n	80121d0 <_puts_r+0x24>
 8012224:	4621      	mov	r1, r4
 8012226:	4628      	mov	r0, r5
 8012228:	f000 f888 	bl	801233c <__swsetup_r>
 801222c:	2800      	cmp	r0, #0
 801222e:	d0dd      	beq.n	80121ec <_puts_r+0x40>
 8012230:	f04f 35ff 	mov.w	r5, #4294967295
 8012234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012236:	07da      	lsls	r2, r3, #31
 8012238:	d405      	bmi.n	8012246 <_puts_r+0x9a>
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	059b      	lsls	r3, r3, #22
 801223e:	d402      	bmi.n	8012246 <_puts_r+0x9a>
 8012240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012242:	f000 faa2 	bl	801278a <__retarget_lock_release_recursive>
 8012246:	4628      	mov	r0, r5
 8012248:	bd70      	pop	{r4, r5, r6, pc}
 801224a:	2b00      	cmp	r3, #0
 801224c:	da04      	bge.n	8012258 <_puts_r+0xac>
 801224e:	69a2      	ldr	r2, [r4, #24]
 8012250:	429a      	cmp	r2, r3
 8012252:	dc06      	bgt.n	8012262 <_puts_r+0xb6>
 8012254:	290a      	cmp	r1, #10
 8012256:	d004      	beq.n	8012262 <_puts_r+0xb6>
 8012258:	6823      	ldr	r3, [r4, #0]
 801225a:	1c5a      	adds	r2, r3, #1
 801225c:	6022      	str	r2, [r4, #0]
 801225e:	7019      	strb	r1, [r3, #0]
 8012260:	e7c5      	b.n	80121ee <_puts_r+0x42>
 8012262:	4622      	mov	r2, r4
 8012264:	4628      	mov	r0, r5
 8012266:	f000 f817 	bl	8012298 <__swbuf_r>
 801226a:	3001      	adds	r0, #1
 801226c:	d1bf      	bne.n	80121ee <_puts_r+0x42>
 801226e:	e7df      	b.n	8012230 <_puts_r+0x84>
 8012270:	250a      	movs	r5, #10
 8012272:	6823      	ldr	r3, [r4, #0]
 8012274:	1c5a      	adds	r2, r3, #1
 8012276:	6022      	str	r2, [r4, #0]
 8012278:	701d      	strb	r5, [r3, #0]
 801227a:	e7db      	b.n	8012234 <_puts_r+0x88>
 801227c:	08013860 	.word	0x08013860
 8012280:	08013880 	.word	0x08013880
 8012284:	08013840 	.word	0x08013840

08012288 <puts>:
 8012288:	4b02      	ldr	r3, [pc, #8]	; (8012294 <puts+0xc>)
 801228a:	4601      	mov	r1, r0
 801228c:	6818      	ldr	r0, [r3, #0]
 801228e:	f7ff bf8d 	b.w	80121ac <_puts_r>
 8012292:	bf00      	nop
 8012294:	200000b8 	.word	0x200000b8

08012298 <__swbuf_r>:
 8012298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229a:	460e      	mov	r6, r1
 801229c:	4614      	mov	r4, r2
 801229e:	4605      	mov	r5, r0
 80122a0:	b118      	cbz	r0, 80122aa <__swbuf_r+0x12>
 80122a2:	6983      	ldr	r3, [r0, #24]
 80122a4:	b90b      	cbnz	r3, 80122aa <__swbuf_r+0x12>
 80122a6:	f000 f9d1 	bl	801264c <__sinit>
 80122aa:	4b21      	ldr	r3, [pc, #132]	; (8012330 <__swbuf_r+0x98>)
 80122ac:	429c      	cmp	r4, r3
 80122ae:	d12b      	bne.n	8012308 <__swbuf_r+0x70>
 80122b0:	686c      	ldr	r4, [r5, #4]
 80122b2:	69a3      	ldr	r3, [r4, #24]
 80122b4:	60a3      	str	r3, [r4, #8]
 80122b6:	89a3      	ldrh	r3, [r4, #12]
 80122b8:	071a      	lsls	r2, r3, #28
 80122ba:	d52f      	bpl.n	801231c <__swbuf_r+0x84>
 80122bc:	6923      	ldr	r3, [r4, #16]
 80122be:	b36b      	cbz	r3, 801231c <__swbuf_r+0x84>
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	6820      	ldr	r0, [r4, #0]
 80122c4:	b2f6      	uxtb	r6, r6
 80122c6:	1ac0      	subs	r0, r0, r3
 80122c8:	6963      	ldr	r3, [r4, #20]
 80122ca:	4637      	mov	r7, r6
 80122cc:	4283      	cmp	r3, r0
 80122ce:	dc04      	bgt.n	80122da <__swbuf_r+0x42>
 80122d0:	4621      	mov	r1, r4
 80122d2:	4628      	mov	r0, r5
 80122d4:	f000 f926 	bl	8012524 <_fflush_r>
 80122d8:	bb30      	cbnz	r0, 8012328 <__swbuf_r+0x90>
 80122da:	68a3      	ldr	r3, [r4, #8]
 80122dc:	3001      	adds	r0, #1
 80122de:	3b01      	subs	r3, #1
 80122e0:	60a3      	str	r3, [r4, #8]
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	1c5a      	adds	r2, r3, #1
 80122e6:	6022      	str	r2, [r4, #0]
 80122e8:	701e      	strb	r6, [r3, #0]
 80122ea:	6963      	ldr	r3, [r4, #20]
 80122ec:	4283      	cmp	r3, r0
 80122ee:	d004      	beq.n	80122fa <__swbuf_r+0x62>
 80122f0:	89a3      	ldrh	r3, [r4, #12]
 80122f2:	07db      	lsls	r3, r3, #31
 80122f4:	d506      	bpl.n	8012304 <__swbuf_r+0x6c>
 80122f6:	2e0a      	cmp	r6, #10
 80122f8:	d104      	bne.n	8012304 <__swbuf_r+0x6c>
 80122fa:	4621      	mov	r1, r4
 80122fc:	4628      	mov	r0, r5
 80122fe:	f000 f911 	bl	8012524 <_fflush_r>
 8012302:	b988      	cbnz	r0, 8012328 <__swbuf_r+0x90>
 8012304:	4638      	mov	r0, r7
 8012306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012308:	4b0a      	ldr	r3, [pc, #40]	; (8012334 <__swbuf_r+0x9c>)
 801230a:	429c      	cmp	r4, r3
 801230c:	d101      	bne.n	8012312 <__swbuf_r+0x7a>
 801230e:	68ac      	ldr	r4, [r5, #8]
 8012310:	e7cf      	b.n	80122b2 <__swbuf_r+0x1a>
 8012312:	4b09      	ldr	r3, [pc, #36]	; (8012338 <__swbuf_r+0xa0>)
 8012314:	429c      	cmp	r4, r3
 8012316:	bf08      	it	eq
 8012318:	68ec      	ldreq	r4, [r5, #12]
 801231a:	e7ca      	b.n	80122b2 <__swbuf_r+0x1a>
 801231c:	4621      	mov	r1, r4
 801231e:	4628      	mov	r0, r5
 8012320:	f000 f80c 	bl	801233c <__swsetup_r>
 8012324:	2800      	cmp	r0, #0
 8012326:	d0cb      	beq.n	80122c0 <__swbuf_r+0x28>
 8012328:	f04f 37ff 	mov.w	r7, #4294967295
 801232c:	e7ea      	b.n	8012304 <__swbuf_r+0x6c>
 801232e:	bf00      	nop
 8012330:	08013860 	.word	0x08013860
 8012334:	08013880 	.word	0x08013880
 8012338:	08013840 	.word	0x08013840

0801233c <__swsetup_r>:
 801233c:	4b32      	ldr	r3, [pc, #200]	; (8012408 <__swsetup_r+0xcc>)
 801233e:	b570      	push	{r4, r5, r6, lr}
 8012340:	681d      	ldr	r5, [r3, #0]
 8012342:	4606      	mov	r6, r0
 8012344:	460c      	mov	r4, r1
 8012346:	b125      	cbz	r5, 8012352 <__swsetup_r+0x16>
 8012348:	69ab      	ldr	r3, [r5, #24]
 801234a:	b913      	cbnz	r3, 8012352 <__swsetup_r+0x16>
 801234c:	4628      	mov	r0, r5
 801234e:	f000 f97d 	bl	801264c <__sinit>
 8012352:	4b2e      	ldr	r3, [pc, #184]	; (801240c <__swsetup_r+0xd0>)
 8012354:	429c      	cmp	r4, r3
 8012356:	d10f      	bne.n	8012378 <__swsetup_r+0x3c>
 8012358:	686c      	ldr	r4, [r5, #4]
 801235a:	89a3      	ldrh	r3, [r4, #12]
 801235c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012360:	0719      	lsls	r1, r3, #28
 8012362:	d42c      	bmi.n	80123be <__swsetup_r+0x82>
 8012364:	06dd      	lsls	r5, r3, #27
 8012366:	d411      	bmi.n	801238c <__swsetup_r+0x50>
 8012368:	2309      	movs	r3, #9
 801236a:	6033      	str	r3, [r6, #0]
 801236c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012370:	f04f 30ff 	mov.w	r0, #4294967295
 8012374:	81a3      	strh	r3, [r4, #12]
 8012376:	e03e      	b.n	80123f6 <__swsetup_r+0xba>
 8012378:	4b25      	ldr	r3, [pc, #148]	; (8012410 <__swsetup_r+0xd4>)
 801237a:	429c      	cmp	r4, r3
 801237c:	d101      	bne.n	8012382 <__swsetup_r+0x46>
 801237e:	68ac      	ldr	r4, [r5, #8]
 8012380:	e7eb      	b.n	801235a <__swsetup_r+0x1e>
 8012382:	4b24      	ldr	r3, [pc, #144]	; (8012414 <__swsetup_r+0xd8>)
 8012384:	429c      	cmp	r4, r3
 8012386:	bf08      	it	eq
 8012388:	68ec      	ldreq	r4, [r5, #12]
 801238a:	e7e6      	b.n	801235a <__swsetup_r+0x1e>
 801238c:	0758      	lsls	r0, r3, #29
 801238e:	d512      	bpl.n	80123b6 <__swsetup_r+0x7a>
 8012390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012392:	b141      	cbz	r1, 80123a6 <__swsetup_r+0x6a>
 8012394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012398:	4299      	cmp	r1, r3
 801239a:	d002      	beq.n	80123a2 <__swsetup_r+0x66>
 801239c:	4630      	mov	r0, r6
 801239e:	f000 fa59 	bl	8012854 <_free_r>
 80123a2:	2300      	movs	r3, #0
 80123a4:	6363      	str	r3, [r4, #52]	; 0x34
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123ac:	81a3      	strh	r3, [r4, #12]
 80123ae:	2300      	movs	r3, #0
 80123b0:	6063      	str	r3, [r4, #4]
 80123b2:	6923      	ldr	r3, [r4, #16]
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	89a3      	ldrh	r3, [r4, #12]
 80123b8:	f043 0308 	orr.w	r3, r3, #8
 80123bc:	81a3      	strh	r3, [r4, #12]
 80123be:	6923      	ldr	r3, [r4, #16]
 80123c0:	b94b      	cbnz	r3, 80123d6 <__swsetup_r+0x9a>
 80123c2:	89a3      	ldrh	r3, [r4, #12]
 80123c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123cc:	d003      	beq.n	80123d6 <__swsetup_r+0x9a>
 80123ce:	4621      	mov	r1, r4
 80123d0:	4630      	mov	r0, r6
 80123d2:	f000 f9ff 	bl	80127d4 <__smakebuf_r>
 80123d6:	89a0      	ldrh	r0, [r4, #12]
 80123d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123dc:	f010 0301 	ands.w	r3, r0, #1
 80123e0:	d00a      	beq.n	80123f8 <__swsetup_r+0xbc>
 80123e2:	2300      	movs	r3, #0
 80123e4:	60a3      	str	r3, [r4, #8]
 80123e6:	6963      	ldr	r3, [r4, #20]
 80123e8:	425b      	negs	r3, r3
 80123ea:	61a3      	str	r3, [r4, #24]
 80123ec:	6923      	ldr	r3, [r4, #16]
 80123ee:	b943      	cbnz	r3, 8012402 <__swsetup_r+0xc6>
 80123f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123f4:	d1ba      	bne.n	801236c <__swsetup_r+0x30>
 80123f6:	bd70      	pop	{r4, r5, r6, pc}
 80123f8:	0781      	lsls	r1, r0, #30
 80123fa:	bf58      	it	pl
 80123fc:	6963      	ldrpl	r3, [r4, #20]
 80123fe:	60a3      	str	r3, [r4, #8]
 8012400:	e7f4      	b.n	80123ec <__swsetup_r+0xb0>
 8012402:	2000      	movs	r0, #0
 8012404:	e7f7      	b.n	80123f6 <__swsetup_r+0xba>
 8012406:	bf00      	nop
 8012408:	200000b8 	.word	0x200000b8
 801240c:	08013860 	.word	0x08013860
 8012410:	08013880 	.word	0x08013880
 8012414:	08013840 	.word	0x08013840

08012418 <__sflush_r>:
 8012418:	898a      	ldrh	r2, [r1, #12]
 801241a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801241e:	4605      	mov	r5, r0
 8012420:	0710      	lsls	r0, r2, #28
 8012422:	460c      	mov	r4, r1
 8012424:	d458      	bmi.n	80124d8 <__sflush_r+0xc0>
 8012426:	684b      	ldr	r3, [r1, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	dc05      	bgt.n	8012438 <__sflush_r+0x20>
 801242c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801242e:	2b00      	cmp	r3, #0
 8012430:	dc02      	bgt.n	8012438 <__sflush_r+0x20>
 8012432:	2000      	movs	r0, #0
 8012434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801243a:	2e00      	cmp	r6, #0
 801243c:	d0f9      	beq.n	8012432 <__sflush_r+0x1a>
 801243e:	2300      	movs	r3, #0
 8012440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012444:	682f      	ldr	r7, [r5, #0]
 8012446:	602b      	str	r3, [r5, #0]
 8012448:	d032      	beq.n	80124b0 <__sflush_r+0x98>
 801244a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801244c:	89a3      	ldrh	r3, [r4, #12]
 801244e:	075a      	lsls	r2, r3, #29
 8012450:	d505      	bpl.n	801245e <__sflush_r+0x46>
 8012452:	6863      	ldr	r3, [r4, #4]
 8012454:	1ac0      	subs	r0, r0, r3
 8012456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012458:	b10b      	cbz	r3, 801245e <__sflush_r+0x46>
 801245a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801245c:	1ac0      	subs	r0, r0, r3
 801245e:	2300      	movs	r3, #0
 8012460:	4602      	mov	r2, r0
 8012462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012464:	4628      	mov	r0, r5
 8012466:	6a21      	ldr	r1, [r4, #32]
 8012468:	47b0      	blx	r6
 801246a:	1c43      	adds	r3, r0, #1
 801246c:	89a3      	ldrh	r3, [r4, #12]
 801246e:	d106      	bne.n	801247e <__sflush_r+0x66>
 8012470:	6829      	ldr	r1, [r5, #0]
 8012472:	291d      	cmp	r1, #29
 8012474:	d82c      	bhi.n	80124d0 <__sflush_r+0xb8>
 8012476:	4a2a      	ldr	r2, [pc, #168]	; (8012520 <__sflush_r+0x108>)
 8012478:	40ca      	lsrs	r2, r1
 801247a:	07d6      	lsls	r6, r2, #31
 801247c:	d528      	bpl.n	80124d0 <__sflush_r+0xb8>
 801247e:	2200      	movs	r2, #0
 8012480:	6062      	str	r2, [r4, #4]
 8012482:	6922      	ldr	r2, [r4, #16]
 8012484:	04d9      	lsls	r1, r3, #19
 8012486:	6022      	str	r2, [r4, #0]
 8012488:	d504      	bpl.n	8012494 <__sflush_r+0x7c>
 801248a:	1c42      	adds	r2, r0, #1
 801248c:	d101      	bne.n	8012492 <__sflush_r+0x7a>
 801248e:	682b      	ldr	r3, [r5, #0]
 8012490:	b903      	cbnz	r3, 8012494 <__sflush_r+0x7c>
 8012492:	6560      	str	r0, [r4, #84]	; 0x54
 8012494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012496:	602f      	str	r7, [r5, #0]
 8012498:	2900      	cmp	r1, #0
 801249a:	d0ca      	beq.n	8012432 <__sflush_r+0x1a>
 801249c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124a0:	4299      	cmp	r1, r3
 80124a2:	d002      	beq.n	80124aa <__sflush_r+0x92>
 80124a4:	4628      	mov	r0, r5
 80124a6:	f000 f9d5 	bl	8012854 <_free_r>
 80124aa:	2000      	movs	r0, #0
 80124ac:	6360      	str	r0, [r4, #52]	; 0x34
 80124ae:	e7c1      	b.n	8012434 <__sflush_r+0x1c>
 80124b0:	6a21      	ldr	r1, [r4, #32]
 80124b2:	2301      	movs	r3, #1
 80124b4:	4628      	mov	r0, r5
 80124b6:	47b0      	blx	r6
 80124b8:	1c41      	adds	r1, r0, #1
 80124ba:	d1c7      	bne.n	801244c <__sflush_r+0x34>
 80124bc:	682b      	ldr	r3, [r5, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d0c4      	beq.n	801244c <__sflush_r+0x34>
 80124c2:	2b1d      	cmp	r3, #29
 80124c4:	d001      	beq.n	80124ca <__sflush_r+0xb2>
 80124c6:	2b16      	cmp	r3, #22
 80124c8:	d101      	bne.n	80124ce <__sflush_r+0xb6>
 80124ca:	602f      	str	r7, [r5, #0]
 80124cc:	e7b1      	b.n	8012432 <__sflush_r+0x1a>
 80124ce:	89a3      	ldrh	r3, [r4, #12]
 80124d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124d4:	81a3      	strh	r3, [r4, #12]
 80124d6:	e7ad      	b.n	8012434 <__sflush_r+0x1c>
 80124d8:	690f      	ldr	r7, [r1, #16]
 80124da:	2f00      	cmp	r7, #0
 80124dc:	d0a9      	beq.n	8012432 <__sflush_r+0x1a>
 80124de:	0793      	lsls	r3, r2, #30
 80124e0:	bf18      	it	ne
 80124e2:	2300      	movne	r3, #0
 80124e4:	680e      	ldr	r6, [r1, #0]
 80124e6:	bf08      	it	eq
 80124e8:	694b      	ldreq	r3, [r1, #20]
 80124ea:	eba6 0807 	sub.w	r8, r6, r7
 80124ee:	600f      	str	r7, [r1, #0]
 80124f0:	608b      	str	r3, [r1, #8]
 80124f2:	f1b8 0f00 	cmp.w	r8, #0
 80124f6:	dd9c      	ble.n	8012432 <__sflush_r+0x1a>
 80124f8:	4643      	mov	r3, r8
 80124fa:	463a      	mov	r2, r7
 80124fc:	4628      	mov	r0, r5
 80124fe:	6a21      	ldr	r1, [r4, #32]
 8012500:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012502:	47b0      	blx	r6
 8012504:	2800      	cmp	r0, #0
 8012506:	dc06      	bgt.n	8012516 <__sflush_r+0xfe>
 8012508:	89a3      	ldrh	r3, [r4, #12]
 801250a:	f04f 30ff 	mov.w	r0, #4294967295
 801250e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012512:	81a3      	strh	r3, [r4, #12]
 8012514:	e78e      	b.n	8012434 <__sflush_r+0x1c>
 8012516:	4407      	add	r7, r0
 8012518:	eba8 0800 	sub.w	r8, r8, r0
 801251c:	e7e9      	b.n	80124f2 <__sflush_r+0xda>
 801251e:	bf00      	nop
 8012520:	20400001 	.word	0x20400001

08012524 <_fflush_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	690b      	ldr	r3, [r1, #16]
 8012528:	4605      	mov	r5, r0
 801252a:	460c      	mov	r4, r1
 801252c:	b913      	cbnz	r3, 8012534 <_fflush_r+0x10>
 801252e:	2500      	movs	r5, #0
 8012530:	4628      	mov	r0, r5
 8012532:	bd38      	pop	{r3, r4, r5, pc}
 8012534:	b118      	cbz	r0, 801253e <_fflush_r+0x1a>
 8012536:	6983      	ldr	r3, [r0, #24]
 8012538:	b90b      	cbnz	r3, 801253e <_fflush_r+0x1a>
 801253a:	f000 f887 	bl	801264c <__sinit>
 801253e:	4b14      	ldr	r3, [pc, #80]	; (8012590 <_fflush_r+0x6c>)
 8012540:	429c      	cmp	r4, r3
 8012542:	d11b      	bne.n	801257c <_fflush_r+0x58>
 8012544:	686c      	ldr	r4, [r5, #4]
 8012546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d0ef      	beq.n	801252e <_fflush_r+0xa>
 801254e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012550:	07d0      	lsls	r0, r2, #31
 8012552:	d404      	bmi.n	801255e <_fflush_r+0x3a>
 8012554:	0599      	lsls	r1, r3, #22
 8012556:	d402      	bmi.n	801255e <_fflush_r+0x3a>
 8012558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801255a:	f000 f915 	bl	8012788 <__retarget_lock_acquire_recursive>
 801255e:	4628      	mov	r0, r5
 8012560:	4621      	mov	r1, r4
 8012562:	f7ff ff59 	bl	8012418 <__sflush_r>
 8012566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012568:	4605      	mov	r5, r0
 801256a:	07da      	lsls	r2, r3, #31
 801256c:	d4e0      	bmi.n	8012530 <_fflush_r+0xc>
 801256e:	89a3      	ldrh	r3, [r4, #12]
 8012570:	059b      	lsls	r3, r3, #22
 8012572:	d4dd      	bmi.n	8012530 <_fflush_r+0xc>
 8012574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012576:	f000 f908 	bl	801278a <__retarget_lock_release_recursive>
 801257a:	e7d9      	b.n	8012530 <_fflush_r+0xc>
 801257c:	4b05      	ldr	r3, [pc, #20]	; (8012594 <_fflush_r+0x70>)
 801257e:	429c      	cmp	r4, r3
 8012580:	d101      	bne.n	8012586 <_fflush_r+0x62>
 8012582:	68ac      	ldr	r4, [r5, #8]
 8012584:	e7df      	b.n	8012546 <_fflush_r+0x22>
 8012586:	4b04      	ldr	r3, [pc, #16]	; (8012598 <_fflush_r+0x74>)
 8012588:	429c      	cmp	r4, r3
 801258a:	bf08      	it	eq
 801258c:	68ec      	ldreq	r4, [r5, #12]
 801258e:	e7da      	b.n	8012546 <_fflush_r+0x22>
 8012590:	08013860 	.word	0x08013860
 8012594:	08013880 	.word	0x08013880
 8012598:	08013840 	.word	0x08013840

0801259c <std>:
 801259c:	2300      	movs	r3, #0
 801259e:	b510      	push	{r4, lr}
 80125a0:	4604      	mov	r4, r0
 80125a2:	e9c0 3300 	strd	r3, r3, [r0]
 80125a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125aa:	6083      	str	r3, [r0, #8]
 80125ac:	8181      	strh	r1, [r0, #12]
 80125ae:	6643      	str	r3, [r0, #100]	; 0x64
 80125b0:	81c2      	strh	r2, [r0, #14]
 80125b2:	6183      	str	r3, [r0, #24]
 80125b4:	4619      	mov	r1, r3
 80125b6:	2208      	movs	r2, #8
 80125b8:	305c      	adds	r0, #92	; 0x5c
 80125ba:	f7ff fdd7 	bl	801216c <memset>
 80125be:	4b05      	ldr	r3, [pc, #20]	; (80125d4 <std+0x38>)
 80125c0:	6224      	str	r4, [r4, #32]
 80125c2:	6263      	str	r3, [r4, #36]	; 0x24
 80125c4:	4b04      	ldr	r3, [pc, #16]	; (80125d8 <std+0x3c>)
 80125c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80125c8:	4b04      	ldr	r3, [pc, #16]	; (80125dc <std+0x40>)
 80125ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125cc:	4b04      	ldr	r3, [pc, #16]	; (80125e0 <std+0x44>)
 80125ce:	6323      	str	r3, [r4, #48]	; 0x30
 80125d0:	bd10      	pop	{r4, pc}
 80125d2:	bf00      	nop
 80125d4:	08012f9d 	.word	0x08012f9d
 80125d8:	08012fbf 	.word	0x08012fbf
 80125dc:	08012ff7 	.word	0x08012ff7
 80125e0:	0801301b 	.word	0x0801301b

080125e4 <_cleanup_r>:
 80125e4:	4901      	ldr	r1, [pc, #4]	; (80125ec <_cleanup_r+0x8>)
 80125e6:	f000 b8af 	b.w	8012748 <_fwalk_reent>
 80125ea:	bf00      	nop
 80125ec:	08012525 	.word	0x08012525

080125f0 <__sfmoreglue>:
 80125f0:	b570      	push	{r4, r5, r6, lr}
 80125f2:	2568      	movs	r5, #104	; 0x68
 80125f4:	1e4a      	subs	r2, r1, #1
 80125f6:	4355      	muls	r5, r2
 80125f8:	460e      	mov	r6, r1
 80125fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125fe:	f000 f975 	bl	80128ec <_malloc_r>
 8012602:	4604      	mov	r4, r0
 8012604:	b140      	cbz	r0, 8012618 <__sfmoreglue+0x28>
 8012606:	2100      	movs	r1, #0
 8012608:	e9c0 1600 	strd	r1, r6, [r0]
 801260c:	300c      	adds	r0, #12
 801260e:	60a0      	str	r0, [r4, #8]
 8012610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012614:	f7ff fdaa 	bl	801216c <memset>
 8012618:	4620      	mov	r0, r4
 801261a:	bd70      	pop	{r4, r5, r6, pc}

0801261c <__sfp_lock_acquire>:
 801261c:	4801      	ldr	r0, [pc, #4]	; (8012624 <__sfp_lock_acquire+0x8>)
 801261e:	f000 b8b3 	b.w	8012788 <__retarget_lock_acquire_recursive>
 8012622:	bf00      	nop
 8012624:	20001a20 	.word	0x20001a20

08012628 <__sfp_lock_release>:
 8012628:	4801      	ldr	r0, [pc, #4]	; (8012630 <__sfp_lock_release+0x8>)
 801262a:	f000 b8ae 	b.w	801278a <__retarget_lock_release_recursive>
 801262e:	bf00      	nop
 8012630:	20001a20 	.word	0x20001a20

08012634 <__sinit_lock_acquire>:
 8012634:	4801      	ldr	r0, [pc, #4]	; (801263c <__sinit_lock_acquire+0x8>)
 8012636:	f000 b8a7 	b.w	8012788 <__retarget_lock_acquire_recursive>
 801263a:	bf00      	nop
 801263c:	20001a1b 	.word	0x20001a1b

08012640 <__sinit_lock_release>:
 8012640:	4801      	ldr	r0, [pc, #4]	; (8012648 <__sinit_lock_release+0x8>)
 8012642:	f000 b8a2 	b.w	801278a <__retarget_lock_release_recursive>
 8012646:	bf00      	nop
 8012648:	20001a1b 	.word	0x20001a1b

0801264c <__sinit>:
 801264c:	b510      	push	{r4, lr}
 801264e:	4604      	mov	r4, r0
 8012650:	f7ff fff0 	bl	8012634 <__sinit_lock_acquire>
 8012654:	69a3      	ldr	r3, [r4, #24]
 8012656:	b11b      	cbz	r3, 8012660 <__sinit+0x14>
 8012658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801265c:	f7ff bff0 	b.w	8012640 <__sinit_lock_release>
 8012660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012664:	6523      	str	r3, [r4, #80]	; 0x50
 8012666:	4b13      	ldr	r3, [pc, #76]	; (80126b4 <__sinit+0x68>)
 8012668:	4a13      	ldr	r2, [pc, #76]	; (80126b8 <__sinit+0x6c>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	62a2      	str	r2, [r4, #40]	; 0x28
 801266e:	42a3      	cmp	r3, r4
 8012670:	bf08      	it	eq
 8012672:	2301      	moveq	r3, #1
 8012674:	4620      	mov	r0, r4
 8012676:	bf08      	it	eq
 8012678:	61a3      	streq	r3, [r4, #24]
 801267a:	f000 f81f 	bl	80126bc <__sfp>
 801267e:	6060      	str	r0, [r4, #4]
 8012680:	4620      	mov	r0, r4
 8012682:	f000 f81b 	bl	80126bc <__sfp>
 8012686:	60a0      	str	r0, [r4, #8]
 8012688:	4620      	mov	r0, r4
 801268a:	f000 f817 	bl	80126bc <__sfp>
 801268e:	2200      	movs	r2, #0
 8012690:	2104      	movs	r1, #4
 8012692:	60e0      	str	r0, [r4, #12]
 8012694:	6860      	ldr	r0, [r4, #4]
 8012696:	f7ff ff81 	bl	801259c <std>
 801269a:	2201      	movs	r2, #1
 801269c:	2109      	movs	r1, #9
 801269e:	68a0      	ldr	r0, [r4, #8]
 80126a0:	f7ff ff7c 	bl	801259c <std>
 80126a4:	2202      	movs	r2, #2
 80126a6:	2112      	movs	r1, #18
 80126a8:	68e0      	ldr	r0, [r4, #12]
 80126aa:	f7ff ff77 	bl	801259c <std>
 80126ae:	2301      	movs	r3, #1
 80126b0:	61a3      	str	r3, [r4, #24]
 80126b2:	e7d1      	b.n	8012658 <__sinit+0xc>
 80126b4:	0801383c 	.word	0x0801383c
 80126b8:	080125e5 	.word	0x080125e5

080126bc <__sfp>:
 80126bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126be:	4607      	mov	r7, r0
 80126c0:	f7ff ffac 	bl	801261c <__sfp_lock_acquire>
 80126c4:	4b1e      	ldr	r3, [pc, #120]	; (8012740 <__sfp+0x84>)
 80126c6:	681e      	ldr	r6, [r3, #0]
 80126c8:	69b3      	ldr	r3, [r6, #24]
 80126ca:	b913      	cbnz	r3, 80126d2 <__sfp+0x16>
 80126cc:	4630      	mov	r0, r6
 80126ce:	f7ff ffbd 	bl	801264c <__sinit>
 80126d2:	3648      	adds	r6, #72	; 0x48
 80126d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126d8:	3b01      	subs	r3, #1
 80126da:	d503      	bpl.n	80126e4 <__sfp+0x28>
 80126dc:	6833      	ldr	r3, [r6, #0]
 80126de:	b30b      	cbz	r3, 8012724 <__sfp+0x68>
 80126e0:	6836      	ldr	r6, [r6, #0]
 80126e2:	e7f7      	b.n	80126d4 <__sfp+0x18>
 80126e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126e8:	b9d5      	cbnz	r5, 8012720 <__sfp+0x64>
 80126ea:	4b16      	ldr	r3, [pc, #88]	; (8012744 <__sfp+0x88>)
 80126ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126f0:	60e3      	str	r3, [r4, #12]
 80126f2:	6665      	str	r5, [r4, #100]	; 0x64
 80126f4:	f000 f847 	bl	8012786 <__retarget_lock_init_recursive>
 80126f8:	f7ff ff96 	bl	8012628 <__sfp_lock_release>
 80126fc:	2208      	movs	r2, #8
 80126fe:	4629      	mov	r1, r5
 8012700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012708:	6025      	str	r5, [r4, #0]
 801270a:	61a5      	str	r5, [r4, #24]
 801270c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012710:	f7ff fd2c 	bl	801216c <memset>
 8012714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801271c:	4620      	mov	r0, r4
 801271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012720:	3468      	adds	r4, #104	; 0x68
 8012722:	e7d9      	b.n	80126d8 <__sfp+0x1c>
 8012724:	2104      	movs	r1, #4
 8012726:	4638      	mov	r0, r7
 8012728:	f7ff ff62 	bl	80125f0 <__sfmoreglue>
 801272c:	4604      	mov	r4, r0
 801272e:	6030      	str	r0, [r6, #0]
 8012730:	2800      	cmp	r0, #0
 8012732:	d1d5      	bne.n	80126e0 <__sfp+0x24>
 8012734:	f7ff ff78 	bl	8012628 <__sfp_lock_release>
 8012738:	230c      	movs	r3, #12
 801273a:	603b      	str	r3, [r7, #0]
 801273c:	e7ee      	b.n	801271c <__sfp+0x60>
 801273e:	bf00      	nop
 8012740:	0801383c 	.word	0x0801383c
 8012744:	ffff0001 	.word	0xffff0001

08012748 <_fwalk_reent>:
 8012748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801274c:	4606      	mov	r6, r0
 801274e:	4688      	mov	r8, r1
 8012750:	2700      	movs	r7, #0
 8012752:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801275a:	f1b9 0901 	subs.w	r9, r9, #1
 801275e:	d505      	bpl.n	801276c <_fwalk_reent+0x24>
 8012760:	6824      	ldr	r4, [r4, #0]
 8012762:	2c00      	cmp	r4, #0
 8012764:	d1f7      	bne.n	8012756 <_fwalk_reent+0xe>
 8012766:	4638      	mov	r0, r7
 8012768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276c:	89ab      	ldrh	r3, [r5, #12]
 801276e:	2b01      	cmp	r3, #1
 8012770:	d907      	bls.n	8012782 <_fwalk_reent+0x3a>
 8012772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012776:	3301      	adds	r3, #1
 8012778:	d003      	beq.n	8012782 <_fwalk_reent+0x3a>
 801277a:	4629      	mov	r1, r5
 801277c:	4630      	mov	r0, r6
 801277e:	47c0      	blx	r8
 8012780:	4307      	orrs	r7, r0
 8012782:	3568      	adds	r5, #104	; 0x68
 8012784:	e7e9      	b.n	801275a <_fwalk_reent+0x12>

08012786 <__retarget_lock_init_recursive>:
 8012786:	4770      	bx	lr

08012788 <__retarget_lock_acquire_recursive>:
 8012788:	4770      	bx	lr

0801278a <__retarget_lock_release_recursive>:
 801278a:	4770      	bx	lr

0801278c <__swhatbuf_r>:
 801278c:	b570      	push	{r4, r5, r6, lr}
 801278e:	460e      	mov	r6, r1
 8012790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012794:	4614      	mov	r4, r2
 8012796:	2900      	cmp	r1, #0
 8012798:	461d      	mov	r5, r3
 801279a:	b096      	sub	sp, #88	; 0x58
 801279c:	da07      	bge.n	80127ae <__swhatbuf_r+0x22>
 801279e:	2300      	movs	r3, #0
 80127a0:	602b      	str	r3, [r5, #0]
 80127a2:	89b3      	ldrh	r3, [r6, #12]
 80127a4:	061a      	lsls	r2, r3, #24
 80127a6:	d410      	bmi.n	80127ca <__swhatbuf_r+0x3e>
 80127a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127ac:	e00e      	b.n	80127cc <__swhatbuf_r+0x40>
 80127ae:	466a      	mov	r2, sp
 80127b0:	f000 fc5a 	bl	8013068 <_fstat_r>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	dbf2      	blt.n	801279e <__swhatbuf_r+0x12>
 80127b8:	9a01      	ldr	r2, [sp, #4]
 80127ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80127be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127c2:	425a      	negs	r2, r3
 80127c4:	415a      	adcs	r2, r3
 80127c6:	602a      	str	r2, [r5, #0]
 80127c8:	e7ee      	b.n	80127a8 <__swhatbuf_r+0x1c>
 80127ca:	2340      	movs	r3, #64	; 0x40
 80127cc:	2000      	movs	r0, #0
 80127ce:	6023      	str	r3, [r4, #0]
 80127d0:	b016      	add	sp, #88	; 0x58
 80127d2:	bd70      	pop	{r4, r5, r6, pc}

080127d4 <__smakebuf_r>:
 80127d4:	898b      	ldrh	r3, [r1, #12]
 80127d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127d8:	079d      	lsls	r5, r3, #30
 80127da:	4606      	mov	r6, r0
 80127dc:	460c      	mov	r4, r1
 80127de:	d507      	bpl.n	80127f0 <__smakebuf_r+0x1c>
 80127e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80127e4:	6023      	str	r3, [r4, #0]
 80127e6:	6123      	str	r3, [r4, #16]
 80127e8:	2301      	movs	r3, #1
 80127ea:	6163      	str	r3, [r4, #20]
 80127ec:	b002      	add	sp, #8
 80127ee:	bd70      	pop	{r4, r5, r6, pc}
 80127f0:	466a      	mov	r2, sp
 80127f2:	ab01      	add	r3, sp, #4
 80127f4:	f7ff ffca 	bl	801278c <__swhatbuf_r>
 80127f8:	9900      	ldr	r1, [sp, #0]
 80127fa:	4605      	mov	r5, r0
 80127fc:	4630      	mov	r0, r6
 80127fe:	f000 f875 	bl	80128ec <_malloc_r>
 8012802:	b948      	cbnz	r0, 8012818 <__smakebuf_r+0x44>
 8012804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012808:	059a      	lsls	r2, r3, #22
 801280a:	d4ef      	bmi.n	80127ec <__smakebuf_r+0x18>
 801280c:	f023 0303 	bic.w	r3, r3, #3
 8012810:	f043 0302 	orr.w	r3, r3, #2
 8012814:	81a3      	strh	r3, [r4, #12]
 8012816:	e7e3      	b.n	80127e0 <__smakebuf_r+0xc>
 8012818:	4b0d      	ldr	r3, [pc, #52]	; (8012850 <__smakebuf_r+0x7c>)
 801281a:	62b3      	str	r3, [r6, #40]	; 0x28
 801281c:	89a3      	ldrh	r3, [r4, #12]
 801281e:	6020      	str	r0, [r4, #0]
 8012820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012824:	81a3      	strh	r3, [r4, #12]
 8012826:	9b00      	ldr	r3, [sp, #0]
 8012828:	6120      	str	r0, [r4, #16]
 801282a:	6163      	str	r3, [r4, #20]
 801282c:	9b01      	ldr	r3, [sp, #4]
 801282e:	b15b      	cbz	r3, 8012848 <__smakebuf_r+0x74>
 8012830:	4630      	mov	r0, r6
 8012832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012836:	f000 fc29 	bl	801308c <_isatty_r>
 801283a:	b128      	cbz	r0, 8012848 <__smakebuf_r+0x74>
 801283c:	89a3      	ldrh	r3, [r4, #12]
 801283e:	f023 0303 	bic.w	r3, r3, #3
 8012842:	f043 0301 	orr.w	r3, r3, #1
 8012846:	81a3      	strh	r3, [r4, #12]
 8012848:	89a0      	ldrh	r0, [r4, #12]
 801284a:	4305      	orrs	r5, r0
 801284c:	81a5      	strh	r5, [r4, #12]
 801284e:	e7cd      	b.n	80127ec <__smakebuf_r+0x18>
 8012850:	080125e5 	.word	0x080125e5

08012854 <_free_r>:
 8012854:	b538      	push	{r3, r4, r5, lr}
 8012856:	4605      	mov	r5, r0
 8012858:	2900      	cmp	r1, #0
 801285a:	d043      	beq.n	80128e4 <_free_r+0x90>
 801285c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012860:	1f0c      	subs	r4, r1, #4
 8012862:	2b00      	cmp	r3, #0
 8012864:	bfb8      	it	lt
 8012866:	18e4      	addlt	r4, r4, r3
 8012868:	f000 fc40 	bl	80130ec <__malloc_lock>
 801286c:	4a1e      	ldr	r2, [pc, #120]	; (80128e8 <_free_r+0x94>)
 801286e:	6813      	ldr	r3, [r2, #0]
 8012870:	4610      	mov	r0, r2
 8012872:	b933      	cbnz	r3, 8012882 <_free_r+0x2e>
 8012874:	6063      	str	r3, [r4, #4]
 8012876:	6014      	str	r4, [r2, #0]
 8012878:	4628      	mov	r0, r5
 801287a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801287e:	f000 bc3b 	b.w	80130f8 <__malloc_unlock>
 8012882:	42a3      	cmp	r3, r4
 8012884:	d90a      	bls.n	801289c <_free_r+0x48>
 8012886:	6821      	ldr	r1, [r4, #0]
 8012888:	1862      	adds	r2, r4, r1
 801288a:	4293      	cmp	r3, r2
 801288c:	bf01      	itttt	eq
 801288e:	681a      	ldreq	r2, [r3, #0]
 8012890:	685b      	ldreq	r3, [r3, #4]
 8012892:	1852      	addeq	r2, r2, r1
 8012894:	6022      	streq	r2, [r4, #0]
 8012896:	6063      	str	r3, [r4, #4]
 8012898:	6004      	str	r4, [r0, #0]
 801289a:	e7ed      	b.n	8012878 <_free_r+0x24>
 801289c:	461a      	mov	r2, r3
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	b10b      	cbz	r3, 80128a6 <_free_r+0x52>
 80128a2:	42a3      	cmp	r3, r4
 80128a4:	d9fa      	bls.n	801289c <_free_r+0x48>
 80128a6:	6811      	ldr	r1, [r2, #0]
 80128a8:	1850      	adds	r0, r2, r1
 80128aa:	42a0      	cmp	r0, r4
 80128ac:	d10b      	bne.n	80128c6 <_free_r+0x72>
 80128ae:	6820      	ldr	r0, [r4, #0]
 80128b0:	4401      	add	r1, r0
 80128b2:	1850      	adds	r0, r2, r1
 80128b4:	4283      	cmp	r3, r0
 80128b6:	6011      	str	r1, [r2, #0]
 80128b8:	d1de      	bne.n	8012878 <_free_r+0x24>
 80128ba:	6818      	ldr	r0, [r3, #0]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4401      	add	r1, r0
 80128c0:	6011      	str	r1, [r2, #0]
 80128c2:	6053      	str	r3, [r2, #4]
 80128c4:	e7d8      	b.n	8012878 <_free_r+0x24>
 80128c6:	d902      	bls.n	80128ce <_free_r+0x7a>
 80128c8:	230c      	movs	r3, #12
 80128ca:	602b      	str	r3, [r5, #0]
 80128cc:	e7d4      	b.n	8012878 <_free_r+0x24>
 80128ce:	6820      	ldr	r0, [r4, #0]
 80128d0:	1821      	adds	r1, r4, r0
 80128d2:	428b      	cmp	r3, r1
 80128d4:	bf01      	itttt	eq
 80128d6:	6819      	ldreq	r1, [r3, #0]
 80128d8:	685b      	ldreq	r3, [r3, #4]
 80128da:	1809      	addeq	r1, r1, r0
 80128dc:	6021      	streq	r1, [r4, #0]
 80128de:	6063      	str	r3, [r4, #4]
 80128e0:	6054      	str	r4, [r2, #4]
 80128e2:	e7c9      	b.n	8012878 <_free_r+0x24>
 80128e4:	bd38      	pop	{r3, r4, r5, pc}
 80128e6:	bf00      	nop
 80128e8:	20001974 	.word	0x20001974

080128ec <_malloc_r>:
 80128ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ee:	1ccd      	adds	r5, r1, #3
 80128f0:	f025 0503 	bic.w	r5, r5, #3
 80128f4:	3508      	adds	r5, #8
 80128f6:	2d0c      	cmp	r5, #12
 80128f8:	bf38      	it	cc
 80128fa:	250c      	movcc	r5, #12
 80128fc:	2d00      	cmp	r5, #0
 80128fe:	4606      	mov	r6, r0
 8012900:	db01      	blt.n	8012906 <_malloc_r+0x1a>
 8012902:	42a9      	cmp	r1, r5
 8012904:	d903      	bls.n	801290e <_malloc_r+0x22>
 8012906:	230c      	movs	r3, #12
 8012908:	6033      	str	r3, [r6, #0]
 801290a:	2000      	movs	r0, #0
 801290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801290e:	f000 fbed 	bl	80130ec <__malloc_lock>
 8012912:	4921      	ldr	r1, [pc, #132]	; (8012998 <_malloc_r+0xac>)
 8012914:	680a      	ldr	r2, [r1, #0]
 8012916:	4614      	mov	r4, r2
 8012918:	b99c      	cbnz	r4, 8012942 <_malloc_r+0x56>
 801291a:	4f20      	ldr	r7, [pc, #128]	; (801299c <_malloc_r+0xb0>)
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	b923      	cbnz	r3, 801292a <_malloc_r+0x3e>
 8012920:	4621      	mov	r1, r4
 8012922:	4630      	mov	r0, r6
 8012924:	f000 fb2a 	bl	8012f7c <_sbrk_r>
 8012928:	6038      	str	r0, [r7, #0]
 801292a:	4629      	mov	r1, r5
 801292c:	4630      	mov	r0, r6
 801292e:	f000 fb25 	bl	8012f7c <_sbrk_r>
 8012932:	1c43      	adds	r3, r0, #1
 8012934:	d123      	bne.n	801297e <_malloc_r+0x92>
 8012936:	230c      	movs	r3, #12
 8012938:	4630      	mov	r0, r6
 801293a:	6033      	str	r3, [r6, #0]
 801293c:	f000 fbdc 	bl	80130f8 <__malloc_unlock>
 8012940:	e7e3      	b.n	801290a <_malloc_r+0x1e>
 8012942:	6823      	ldr	r3, [r4, #0]
 8012944:	1b5b      	subs	r3, r3, r5
 8012946:	d417      	bmi.n	8012978 <_malloc_r+0x8c>
 8012948:	2b0b      	cmp	r3, #11
 801294a:	d903      	bls.n	8012954 <_malloc_r+0x68>
 801294c:	6023      	str	r3, [r4, #0]
 801294e:	441c      	add	r4, r3
 8012950:	6025      	str	r5, [r4, #0]
 8012952:	e004      	b.n	801295e <_malloc_r+0x72>
 8012954:	6863      	ldr	r3, [r4, #4]
 8012956:	42a2      	cmp	r2, r4
 8012958:	bf0c      	ite	eq
 801295a:	600b      	streq	r3, [r1, #0]
 801295c:	6053      	strne	r3, [r2, #4]
 801295e:	4630      	mov	r0, r6
 8012960:	f000 fbca 	bl	80130f8 <__malloc_unlock>
 8012964:	f104 000b 	add.w	r0, r4, #11
 8012968:	1d23      	adds	r3, r4, #4
 801296a:	f020 0007 	bic.w	r0, r0, #7
 801296e:	1ac2      	subs	r2, r0, r3
 8012970:	d0cc      	beq.n	801290c <_malloc_r+0x20>
 8012972:	1a1b      	subs	r3, r3, r0
 8012974:	50a3      	str	r3, [r4, r2]
 8012976:	e7c9      	b.n	801290c <_malloc_r+0x20>
 8012978:	4622      	mov	r2, r4
 801297a:	6864      	ldr	r4, [r4, #4]
 801297c:	e7cc      	b.n	8012918 <_malloc_r+0x2c>
 801297e:	1cc4      	adds	r4, r0, #3
 8012980:	f024 0403 	bic.w	r4, r4, #3
 8012984:	42a0      	cmp	r0, r4
 8012986:	d0e3      	beq.n	8012950 <_malloc_r+0x64>
 8012988:	1a21      	subs	r1, r4, r0
 801298a:	4630      	mov	r0, r6
 801298c:	f000 faf6 	bl	8012f7c <_sbrk_r>
 8012990:	3001      	adds	r0, #1
 8012992:	d1dd      	bne.n	8012950 <_malloc_r+0x64>
 8012994:	e7cf      	b.n	8012936 <_malloc_r+0x4a>
 8012996:	bf00      	nop
 8012998:	20001974 	.word	0x20001974
 801299c:	20001978 	.word	0x20001978

080129a0 <__sfputc_r>:
 80129a0:	6893      	ldr	r3, [r2, #8]
 80129a2:	b410      	push	{r4}
 80129a4:	3b01      	subs	r3, #1
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	6093      	str	r3, [r2, #8]
 80129aa:	da07      	bge.n	80129bc <__sfputc_r+0x1c>
 80129ac:	6994      	ldr	r4, [r2, #24]
 80129ae:	42a3      	cmp	r3, r4
 80129b0:	db01      	blt.n	80129b6 <__sfputc_r+0x16>
 80129b2:	290a      	cmp	r1, #10
 80129b4:	d102      	bne.n	80129bc <__sfputc_r+0x1c>
 80129b6:	bc10      	pop	{r4}
 80129b8:	f7ff bc6e 	b.w	8012298 <__swbuf_r>
 80129bc:	6813      	ldr	r3, [r2, #0]
 80129be:	1c58      	adds	r0, r3, #1
 80129c0:	6010      	str	r0, [r2, #0]
 80129c2:	7019      	strb	r1, [r3, #0]
 80129c4:	4608      	mov	r0, r1
 80129c6:	bc10      	pop	{r4}
 80129c8:	4770      	bx	lr

080129ca <__sfputs_r>:
 80129ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129cc:	4606      	mov	r6, r0
 80129ce:	460f      	mov	r7, r1
 80129d0:	4614      	mov	r4, r2
 80129d2:	18d5      	adds	r5, r2, r3
 80129d4:	42ac      	cmp	r4, r5
 80129d6:	d101      	bne.n	80129dc <__sfputs_r+0x12>
 80129d8:	2000      	movs	r0, #0
 80129da:	e007      	b.n	80129ec <__sfputs_r+0x22>
 80129dc:	463a      	mov	r2, r7
 80129de:	4630      	mov	r0, r6
 80129e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129e4:	f7ff ffdc 	bl	80129a0 <__sfputc_r>
 80129e8:	1c43      	adds	r3, r0, #1
 80129ea:	d1f3      	bne.n	80129d4 <__sfputs_r+0xa>
 80129ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129f0 <_vfiprintf_r>:
 80129f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	460d      	mov	r5, r1
 80129f6:	4614      	mov	r4, r2
 80129f8:	4698      	mov	r8, r3
 80129fa:	4606      	mov	r6, r0
 80129fc:	b09d      	sub	sp, #116	; 0x74
 80129fe:	b118      	cbz	r0, 8012a08 <_vfiprintf_r+0x18>
 8012a00:	6983      	ldr	r3, [r0, #24]
 8012a02:	b90b      	cbnz	r3, 8012a08 <_vfiprintf_r+0x18>
 8012a04:	f7ff fe22 	bl	801264c <__sinit>
 8012a08:	4b89      	ldr	r3, [pc, #548]	; (8012c30 <_vfiprintf_r+0x240>)
 8012a0a:	429d      	cmp	r5, r3
 8012a0c:	d11b      	bne.n	8012a46 <_vfiprintf_r+0x56>
 8012a0e:	6875      	ldr	r5, [r6, #4]
 8012a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a12:	07d9      	lsls	r1, r3, #31
 8012a14:	d405      	bmi.n	8012a22 <_vfiprintf_r+0x32>
 8012a16:	89ab      	ldrh	r3, [r5, #12]
 8012a18:	059a      	lsls	r2, r3, #22
 8012a1a:	d402      	bmi.n	8012a22 <_vfiprintf_r+0x32>
 8012a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a1e:	f7ff feb3 	bl	8012788 <__retarget_lock_acquire_recursive>
 8012a22:	89ab      	ldrh	r3, [r5, #12]
 8012a24:	071b      	lsls	r3, r3, #28
 8012a26:	d501      	bpl.n	8012a2c <_vfiprintf_r+0x3c>
 8012a28:	692b      	ldr	r3, [r5, #16]
 8012a2a:	b9eb      	cbnz	r3, 8012a68 <_vfiprintf_r+0x78>
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7ff fc84 	bl	801233c <__swsetup_r>
 8012a34:	b1c0      	cbz	r0, 8012a68 <_vfiprintf_r+0x78>
 8012a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a38:	07dc      	lsls	r4, r3, #31
 8012a3a:	d50e      	bpl.n	8012a5a <_vfiprintf_r+0x6a>
 8012a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a40:	b01d      	add	sp, #116	; 0x74
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	4b7b      	ldr	r3, [pc, #492]	; (8012c34 <_vfiprintf_r+0x244>)
 8012a48:	429d      	cmp	r5, r3
 8012a4a:	d101      	bne.n	8012a50 <_vfiprintf_r+0x60>
 8012a4c:	68b5      	ldr	r5, [r6, #8]
 8012a4e:	e7df      	b.n	8012a10 <_vfiprintf_r+0x20>
 8012a50:	4b79      	ldr	r3, [pc, #484]	; (8012c38 <_vfiprintf_r+0x248>)
 8012a52:	429d      	cmp	r5, r3
 8012a54:	bf08      	it	eq
 8012a56:	68f5      	ldreq	r5, [r6, #12]
 8012a58:	e7da      	b.n	8012a10 <_vfiprintf_r+0x20>
 8012a5a:	89ab      	ldrh	r3, [r5, #12]
 8012a5c:	0598      	lsls	r0, r3, #22
 8012a5e:	d4ed      	bmi.n	8012a3c <_vfiprintf_r+0x4c>
 8012a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a62:	f7ff fe92 	bl	801278a <__retarget_lock_release_recursive>
 8012a66:	e7e9      	b.n	8012a3c <_vfiprintf_r+0x4c>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012a6c:	2320      	movs	r3, #32
 8012a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a72:	2330      	movs	r3, #48	; 0x30
 8012a74:	f04f 0901 	mov.w	r9, #1
 8012a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012c3c <_vfiprintf_r+0x24c>
 8012a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a84:	4623      	mov	r3, r4
 8012a86:	469a      	mov	sl, r3
 8012a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a8c:	b10a      	cbz	r2, 8012a92 <_vfiprintf_r+0xa2>
 8012a8e:	2a25      	cmp	r2, #37	; 0x25
 8012a90:	d1f9      	bne.n	8012a86 <_vfiprintf_r+0x96>
 8012a92:	ebba 0b04 	subs.w	fp, sl, r4
 8012a96:	d00b      	beq.n	8012ab0 <_vfiprintf_r+0xc0>
 8012a98:	465b      	mov	r3, fp
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	4629      	mov	r1, r5
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7ff ff93 	bl	80129ca <__sfputs_r>
 8012aa4:	3001      	adds	r0, #1
 8012aa6:	f000 80aa 	beq.w	8012bfe <_vfiprintf_r+0x20e>
 8012aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012aac:	445a      	add	r2, fp
 8012aae:	9209      	str	r2, [sp, #36]	; 0x24
 8012ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f000 80a2 	beq.w	8012bfe <_vfiprintf_r+0x20e>
 8012aba:	2300      	movs	r3, #0
 8012abc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ac4:	f10a 0a01 	add.w	sl, sl, #1
 8012ac8:	9304      	str	r3, [sp, #16]
 8012aca:	9307      	str	r3, [sp, #28]
 8012acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8012ad2:	4654      	mov	r4, sl
 8012ad4:	2205      	movs	r2, #5
 8012ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ada:	4858      	ldr	r0, [pc, #352]	; (8012c3c <_vfiprintf_r+0x24c>)
 8012adc:	f000 faf8 	bl	80130d0 <memchr>
 8012ae0:	9a04      	ldr	r2, [sp, #16]
 8012ae2:	b9d8      	cbnz	r0, 8012b1c <_vfiprintf_r+0x12c>
 8012ae4:	06d1      	lsls	r1, r2, #27
 8012ae6:	bf44      	itt	mi
 8012ae8:	2320      	movmi	r3, #32
 8012aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aee:	0713      	lsls	r3, r2, #28
 8012af0:	bf44      	itt	mi
 8012af2:	232b      	movmi	r3, #43	; 0x2b
 8012af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012af8:	f89a 3000 	ldrb.w	r3, [sl]
 8012afc:	2b2a      	cmp	r3, #42	; 0x2a
 8012afe:	d015      	beq.n	8012b2c <_vfiprintf_r+0x13c>
 8012b00:	4654      	mov	r4, sl
 8012b02:	2000      	movs	r0, #0
 8012b04:	f04f 0c0a 	mov.w	ip, #10
 8012b08:	9a07      	ldr	r2, [sp, #28]
 8012b0a:	4621      	mov	r1, r4
 8012b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b10:	3b30      	subs	r3, #48	; 0x30
 8012b12:	2b09      	cmp	r3, #9
 8012b14:	d94e      	bls.n	8012bb4 <_vfiprintf_r+0x1c4>
 8012b16:	b1b0      	cbz	r0, 8012b46 <_vfiprintf_r+0x156>
 8012b18:	9207      	str	r2, [sp, #28]
 8012b1a:	e014      	b.n	8012b46 <_vfiprintf_r+0x156>
 8012b1c:	eba0 0308 	sub.w	r3, r0, r8
 8012b20:	fa09 f303 	lsl.w	r3, r9, r3
 8012b24:	4313      	orrs	r3, r2
 8012b26:	46a2      	mov	sl, r4
 8012b28:	9304      	str	r3, [sp, #16]
 8012b2a:	e7d2      	b.n	8012ad2 <_vfiprintf_r+0xe2>
 8012b2c:	9b03      	ldr	r3, [sp, #12]
 8012b2e:	1d19      	adds	r1, r3, #4
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	9103      	str	r1, [sp, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	bfbb      	ittet	lt
 8012b38:	425b      	neglt	r3, r3
 8012b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8012b3e:	9307      	strge	r3, [sp, #28]
 8012b40:	9307      	strlt	r3, [sp, #28]
 8012b42:	bfb8      	it	lt
 8012b44:	9204      	strlt	r2, [sp, #16]
 8012b46:	7823      	ldrb	r3, [r4, #0]
 8012b48:	2b2e      	cmp	r3, #46	; 0x2e
 8012b4a:	d10c      	bne.n	8012b66 <_vfiprintf_r+0x176>
 8012b4c:	7863      	ldrb	r3, [r4, #1]
 8012b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8012b50:	d135      	bne.n	8012bbe <_vfiprintf_r+0x1ce>
 8012b52:	9b03      	ldr	r3, [sp, #12]
 8012b54:	3402      	adds	r4, #2
 8012b56:	1d1a      	adds	r2, r3, #4
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	9203      	str	r2, [sp, #12]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	bfb8      	it	lt
 8012b60:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b64:	9305      	str	r3, [sp, #20]
 8012b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012c4c <_vfiprintf_r+0x25c>
 8012b6a:	2203      	movs	r2, #3
 8012b6c:	4650      	mov	r0, sl
 8012b6e:	7821      	ldrb	r1, [r4, #0]
 8012b70:	f000 faae 	bl	80130d0 <memchr>
 8012b74:	b140      	cbz	r0, 8012b88 <_vfiprintf_r+0x198>
 8012b76:	2340      	movs	r3, #64	; 0x40
 8012b78:	eba0 000a 	sub.w	r0, r0, sl
 8012b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8012b80:	9b04      	ldr	r3, [sp, #16]
 8012b82:	3401      	adds	r4, #1
 8012b84:	4303      	orrs	r3, r0
 8012b86:	9304      	str	r3, [sp, #16]
 8012b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b8c:	2206      	movs	r2, #6
 8012b8e:	482c      	ldr	r0, [pc, #176]	; (8012c40 <_vfiprintf_r+0x250>)
 8012b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b94:	f000 fa9c 	bl	80130d0 <memchr>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d03f      	beq.n	8012c1c <_vfiprintf_r+0x22c>
 8012b9c:	4b29      	ldr	r3, [pc, #164]	; (8012c44 <_vfiprintf_r+0x254>)
 8012b9e:	bb1b      	cbnz	r3, 8012be8 <_vfiprintf_r+0x1f8>
 8012ba0:	9b03      	ldr	r3, [sp, #12]
 8012ba2:	3307      	adds	r3, #7
 8012ba4:	f023 0307 	bic.w	r3, r3, #7
 8012ba8:	3308      	adds	r3, #8
 8012baa:	9303      	str	r3, [sp, #12]
 8012bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bae:	443b      	add	r3, r7
 8012bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8012bb2:	e767      	b.n	8012a84 <_vfiprintf_r+0x94>
 8012bb4:	460c      	mov	r4, r1
 8012bb6:	2001      	movs	r0, #1
 8012bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bbc:	e7a5      	b.n	8012b0a <_vfiprintf_r+0x11a>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	f04f 0c0a 	mov.w	ip, #10
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	3401      	adds	r4, #1
 8012bc8:	9305      	str	r3, [sp, #20]
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bd0:	3a30      	subs	r2, #48	; 0x30
 8012bd2:	2a09      	cmp	r2, #9
 8012bd4:	d903      	bls.n	8012bde <_vfiprintf_r+0x1ee>
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d0c5      	beq.n	8012b66 <_vfiprintf_r+0x176>
 8012bda:	9105      	str	r1, [sp, #20]
 8012bdc:	e7c3      	b.n	8012b66 <_vfiprintf_r+0x176>
 8012bde:	4604      	mov	r4, r0
 8012be0:	2301      	movs	r3, #1
 8012be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012be6:	e7f0      	b.n	8012bca <_vfiprintf_r+0x1da>
 8012be8:	ab03      	add	r3, sp, #12
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	462a      	mov	r2, r5
 8012bee:	4630      	mov	r0, r6
 8012bf0:	4b15      	ldr	r3, [pc, #84]	; (8012c48 <_vfiprintf_r+0x258>)
 8012bf2:	a904      	add	r1, sp, #16
 8012bf4:	f3af 8000 	nop.w
 8012bf8:	4607      	mov	r7, r0
 8012bfa:	1c78      	adds	r0, r7, #1
 8012bfc:	d1d6      	bne.n	8012bac <_vfiprintf_r+0x1bc>
 8012bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c00:	07d9      	lsls	r1, r3, #31
 8012c02:	d405      	bmi.n	8012c10 <_vfiprintf_r+0x220>
 8012c04:	89ab      	ldrh	r3, [r5, #12]
 8012c06:	059a      	lsls	r2, r3, #22
 8012c08:	d402      	bmi.n	8012c10 <_vfiprintf_r+0x220>
 8012c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c0c:	f7ff fdbd 	bl	801278a <__retarget_lock_release_recursive>
 8012c10:	89ab      	ldrh	r3, [r5, #12]
 8012c12:	065b      	lsls	r3, r3, #25
 8012c14:	f53f af12 	bmi.w	8012a3c <_vfiprintf_r+0x4c>
 8012c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c1a:	e711      	b.n	8012a40 <_vfiprintf_r+0x50>
 8012c1c:	ab03      	add	r3, sp, #12
 8012c1e:	9300      	str	r3, [sp, #0]
 8012c20:	462a      	mov	r2, r5
 8012c22:	4630      	mov	r0, r6
 8012c24:	4b08      	ldr	r3, [pc, #32]	; (8012c48 <_vfiprintf_r+0x258>)
 8012c26:	a904      	add	r1, sp, #16
 8012c28:	f000 f882 	bl	8012d30 <_printf_i>
 8012c2c:	e7e4      	b.n	8012bf8 <_vfiprintf_r+0x208>
 8012c2e:	bf00      	nop
 8012c30:	08013860 	.word	0x08013860
 8012c34:	08013880 	.word	0x08013880
 8012c38:	08013840 	.word	0x08013840
 8012c3c:	080138a0 	.word	0x080138a0
 8012c40:	080138aa 	.word	0x080138aa
 8012c44:	00000000 	.word	0x00000000
 8012c48:	080129cb 	.word	0x080129cb
 8012c4c:	080138a6 	.word	0x080138a6

08012c50 <_printf_common>:
 8012c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c54:	4616      	mov	r6, r2
 8012c56:	4699      	mov	r9, r3
 8012c58:	688a      	ldr	r2, [r1, #8]
 8012c5a:	690b      	ldr	r3, [r1, #16]
 8012c5c:	4607      	mov	r7, r0
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	bfb8      	it	lt
 8012c62:	4613      	movlt	r3, r2
 8012c64:	6033      	str	r3, [r6, #0]
 8012c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c6a:	460c      	mov	r4, r1
 8012c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c70:	b10a      	cbz	r2, 8012c76 <_printf_common+0x26>
 8012c72:	3301      	adds	r3, #1
 8012c74:	6033      	str	r3, [r6, #0]
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	0699      	lsls	r1, r3, #26
 8012c7a:	bf42      	ittt	mi
 8012c7c:	6833      	ldrmi	r3, [r6, #0]
 8012c7e:	3302      	addmi	r3, #2
 8012c80:	6033      	strmi	r3, [r6, #0]
 8012c82:	6825      	ldr	r5, [r4, #0]
 8012c84:	f015 0506 	ands.w	r5, r5, #6
 8012c88:	d106      	bne.n	8012c98 <_printf_common+0x48>
 8012c8a:	f104 0a19 	add.w	sl, r4, #25
 8012c8e:	68e3      	ldr	r3, [r4, #12]
 8012c90:	6832      	ldr	r2, [r6, #0]
 8012c92:	1a9b      	subs	r3, r3, r2
 8012c94:	42ab      	cmp	r3, r5
 8012c96:	dc28      	bgt.n	8012cea <_printf_common+0x9a>
 8012c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012c9c:	1e13      	subs	r3, r2, #0
 8012c9e:	6822      	ldr	r2, [r4, #0]
 8012ca0:	bf18      	it	ne
 8012ca2:	2301      	movne	r3, #1
 8012ca4:	0692      	lsls	r2, r2, #26
 8012ca6:	d42d      	bmi.n	8012d04 <_printf_common+0xb4>
 8012ca8:	4649      	mov	r1, r9
 8012caa:	4638      	mov	r0, r7
 8012cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012cb0:	47c0      	blx	r8
 8012cb2:	3001      	adds	r0, #1
 8012cb4:	d020      	beq.n	8012cf8 <_printf_common+0xa8>
 8012cb6:	6823      	ldr	r3, [r4, #0]
 8012cb8:	68e5      	ldr	r5, [r4, #12]
 8012cba:	f003 0306 	and.w	r3, r3, #6
 8012cbe:	2b04      	cmp	r3, #4
 8012cc0:	bf18      	it	ne
 8012cc2:	2500      	movne	r5, #0
 8012cc4:	6832      	ldr	r2, [r6, #0]
 8012cc6:	f04f 0600 	mov.w	r6, #0
 8012cca:	68a3      	ldr	r3, [r4, #8]
 8012ccc:	bf08      	it	eq
 8012cce:	1aad      	subeq	r5, r5, r2
 8012cd0:	6922      	ldr	r2, [r4, #16]
 8012cd2:	bf08      	it	eq
 8012cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	bfc4      	itt	gt
 8012cdc:	1a9b      	subgt	r3, r3, r2
 8012cde:	18ed      	addgt	r5, r5, r3
 8012ce0:	341a      	adds	r4, #26
 8012ce2:	42b5      	cmp	r5, r6
 8012ce4:	d11a      	bne.n	8012d1c <_printf_common+0xcc>
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	e008      	b.n	8012cfc <_printf_common+0xac>
 8012cea:	2301      	movs	r3, #1
 8012cec:	4652      	mov	r2, sl
 8012cee:	4649      	mov	r1, r9
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	47c0      	blx	r8
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	d103      	bne.n	8012d00 <_printf_common+0xb0>
 8012cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d00:	3501      	adds	r5, #1
 8012d02:	e7c4      	b.n	8012c8e <_printf_common+0x3e>
 8012d04:	2030      	movs	r0, #48	; 0x30
 8012d06:	18e1      	adds	r1, r4, r3
 8012d08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d0c:	1c5a      	adds	r2, r3, #1
 8012d0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d12:	4422      	add	r2, r4
 8012d14:	3302      	adds	r3, #2
 8012d16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d1a:	e7c5      	b.n	8012ca8 <_printf_common+0x58>
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	4622      	mov	r2, r4
 8012d20:	4649      	mov	r1, r9
 8012d22:	4638      	mov	r0, r7
 8012d24:	47c0      	blx	r8
 8012d26:	3001      	adds	r0, #1
 8012d28:	d0e6      	beq.n	8012cf8 <_printf_common+0xa8>
 8012d2a:	3601      	adds	r6, #1
 8012d2c:	e7d9      	b.n	8012ce2 <_printf_common+0x92>
	...

08012d30 <_printf_i>:
 8012d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d34:	460c      	mov	r4, r1
 8012d36:	7e27      	ldrb	r7, [r4, #24]
 8012d38:	4691      	mov	r9, r2
 8012d3a:	2f78      	cmp	r7, #120	; 0x78
 8012d3c:	4680      	mov	r8, r0
 8012d3e:	469a      	mov	sl, r3
 8012d40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d46:	d807      	bhi.n	8012d58 <_printf_i+0x28>
 8012d48:	2f62      	cmp	r7, #98	; 0x62
 8012d4a:	d80a      	bhi.n	8012d62 <_printf_i+0x32>
 8012d4c:	2f00      	cmp	r7, #0
 8012d4e:	f000 80d9 	beq.w	8012f04 <_printf_i+0x1d4>
 8012d52:	2f58      	cmp	r7, #88	; 0x58
 8012d54:	f000 80a4 	beq.w	8012ea0 <_printf_i+0x170>
 8012d58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012d60:	e03a      	b.n	8012dd8 <_printf_i+0xa8>
 8012d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012d66:	2b15      	cmp	r3, #21
 8012d68:	d8f6      	bhi.n	8012d58 <_printf_i+0x28>
 8012d6a:	a001      	add	r0, pc, #4	; (adr r0, 8012d70 <_printf_i+0x40>)
 8012d6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012d70:	08012dc9 	.word	0x08012dc9
 8012d74:	08012ddd 	.word	0x08012ddd
 8012d78:	08012d59 	.word	0x08012d59
 8012d7c:	08012d59 	.word	0x08012d59
 8012d80:	08012d59 	.word	0x08012d59
 8012d84:	08012d59 	.word	0x08012d59
 8012d88:	08012ddd 	.word	0x08012ddd
 8012d8c:	08012d59 	.word	0x08012d59
 8012d90:	08012d59 	.word	0x08012d59
 8012d94:	08012d59 	.word	0x08012d59
 8012d98:	08012d59 	.word	0x08012d59
 8012d9c:	08012eeb 	.word	0x08012eeb
 8012da0:	08012e0d 	.word	0x08012e0d
 8012da4:	08012ecd 	.word	0x08012ecd
 8012da8:	08012d59 	.word	0x08012d59
 8012dac:	08012d59 	.word	0x08012d59
 8012db0:	08012f0d 	.word	0x08012f0d
 8012db4:	08012d59 	.word	0x08012d59
 8012db8:	08012e0d 	.word	0x08012e0d
 8012dbc:	08012d59 	.word	0x08012d59
 8012dc0:	08012d59 	.word	0x08012d59
 8012dc4:	08012ed5 	.word	0x08012ed5
 8012dc8:	680b      	ldr	r3, [r1, #0]
 8012dca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012dce:	1d1a      	adds	r2, r3, #4
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	600a      	str	r2, [r1, #0]
 8012dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dd8:	2301      	movs	r3, #1
 8012dda:	e0a4      	b.n	8012f26 <_printf_i+0x1f6>
 8012ddc:	6825      	ldr	r5, [r4, #0]
 8012dde:	6808      	ldr	r0, [r1, #0]
 8012de0:	062e      	lsls	r6, r5, #24
 8012de2:	f100 0304 	add.w	r3, r0, #4
 8012de6:	d50a      	bpl.n	8012dfe <_printf_i+0xce>
 8012de8:	6805      	ldr	r5, [r0, #0]
 8012dea:	600b      	str	r3, [r1, #0]
 8012dec:	2d00      	cmp	r5, #0
 8012dee:	da03      	bge.n	8012df8 <_printf_i+0xc8>
 8012df0:	232d      	movs	r3, #45	; 0x2d
 8012df2:	426d      	negs	r5, r5
 8012df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012df8:	230a      	movs	r3, #10
 8012dfa:	485e      	ldr	r0, [pc, #376]	; (8012f74 <_printf_i+0x244>)
 8012dfc:	e019      	b.n	8012e32 <_printf_i+0x102>
 8012dfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012e02:	6805      	ldr	r5, [r0, #0]
 8012e04:	600b      	str	r3, [r1, #0]
 8012e06:	bf18      	it	ne
 8012e08:	b22d      	sxthne	r5, r5
 8012e0a:	e7ef      	b.n	8012dec <_printf_i+0xbc>
 8012e0c:	680b      	ldr	r3, [r1, #0]
 8012e0e:	6825      	ldr	r5, [r4, #0]
 8012e10:	1d18      	adds	r0, r3, #4
 8012e12:	6008      	str	r0, [r1, #0]
 8012e14:	0628      	lsls	r0, r5, #24
 8012e16:	d501      	bpl.n	8012e1c <_printf_i+0xec>
 8012e18:	681d      	ldr	r5, [r3, #0]
 8012e1a:	e002      	b.n	8012e22 <_printf_i+0xf2>
 8012e1c:	0669      	lsls	r1, r5, #25
 8012e1e:	d5fb      	bpl.n	8012e18 <_printf_i+0xe8>
 8012e20:	881d      	ldrh	r5, [r3, #0]
 8012e22:	2f6f      	cmp	r7, #111	; 0x6f
 8012e24:	bf0c      	ite	eq
 8012e26:	2308      	moveq	r3, #8
 8012e28:	230a      	movne	r3, #10
 8012e2a:	4852      	ldr	r0, [pc, #328]	; (8012f74 <_printf_i+0x244>)
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e32:	6866      	ldr	r6, [r4, #4]
 8012e34:	2e00      	cmp	r6, #0
 8012e36:	bfa8      	it	ge
 8012e38:	6821      	ldrge	r1, [r4, #0]
 8012e3a:	60a6      	str	r6, [r4, #8]
 8012e3c:	bfa4      	itt	ge
 8012e3e:	f021 0104 	bicge.w	r1, r1, #4
 8012e42:	6021      	strge	r1, [r4, #0]
 8012e44:	b90d      	cbnz	r5, 8012e4a <_printf_i+0x11a>
 8012e46:	2e00      	cmp	r6, #0
 8012e48:	d04d      	beq.n	8012ee6 <_printf_i+0x1b6>
 8012e4a:	4616      	mov	r6, r2
 8012e4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8012e50:	fb03 5711 	mls	r7, r3, r1, r5
 8012e54:	5dc7      	ldrb	r7, [r0, r7]
 8012e56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012e5a:	462f      	mov	r7, r5
 8012e5c:	42bb      	cmp	r3, r7
 8012e5e:	460d      	mov	r5, r1
 8012e60:	d9f4      	bls.n	8012e4c <_printf_i+0x11c>
 8012e62:	2b08      	cmp	r3, #8
 8012e64:	d10b      	bne.n	8012e7e <_printf_i+0x14e>
 8012e66:	6823      	ldr	r3, [r4, #0]
 8012e68:	07df      	lsls	r7, r3, #31
 8012e6a:	d508      	bpl.n	8012e7e <_printf_i+0x14e>
 8012e6c:	6923      	ldr	r3, [r4, #16]
 8012e6e:	6861      	ldr	r1, [r4, #4]
 8012e70:	4299      	cmp	r1, r3
 8012e72:	bfde      	ittt	le
 8012e74:	2330      	movle	r3, #48	; 0x30
 8012e76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012e7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012e7e:	1b92      	subs	r2, r2, r6
 8012e80:	6122      	str	r2, [r4, #16]
 8012e82:	464b      	mov	r3, r9
 8012e84:	4621      	mov	r1, r4
 8012e86:	4640      	mov	r0, r8
 8012e88:	f8cd a000 	str.w	sl, [sp]
 8012e8c:	aa03      	add	r2, sp, #12
 8012e8e:	f7ff fedf 	bl	8012c50 <_printf_common>
 8012e92:	3001      	adds	r0, #1
 8012e94:	d14c      	bne.n	8012f30 <_printf_i+0x200>
 8012e96:	f04f 30ff 	mov.w	r0, #4294967295
 8012e9a:	b004      	add	sp, #16
 8012e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ea0:	4834      	ldr	r0, [pc, #208]	; (8012f74 <_printf_i+0x244>)
 8012ea2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012ea6:	680e      	ldr	r6, [r1, #0]
 8012ea8:	6823      	ldr	r3, [r4, #0]
 8012eaa:	f856 5b04 	ldr.w	r5, [r6], #4
 8012eae:	061f      	lsls	r7, r3, #24
 8012eb0:	600e      	str	r6, [r1, #0]
 8012eb2:	d514      	bpl.n	8012ede <_printf_i+0x1ae>
 8012eb4:	07d9      	lsls	r1, r3, #31
 8012eb6:	bf44      	itt	mi
 8012eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8012ebc:	6023      	strmi	r3, [r4, #0]
 8012ebe:	b91d      	cbnz	r5, 8012ec8 <_printf_i+0x198>
 8012ec0:	6823      	ldr	r3, [r4, #0]
 8012ec2:	f023 0320 	bic.w	r3, r3, #32
 8012ec6:	6023      	str	r3, [r4, #0]
 8012ec8:	2310      	movs	r3, #16
 8012eca:	e7af      	b.n	8012e2c <_printf_i+0xfc>
 8012ecc:	6823      	ldr	r3, [r4, #0]
 8012ece:	f043 0320 	orr.w	r3, r3, #32
 8012ed2:	6023      	str	r3, [r4, #0]
 8012ed4:	2378      	movs	r3, #120	; 0x78
 8012ed6:	4828      	ldr	r0, [pc, #160]	; (8012f78 <_printf_i+0x248>)
 8012ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012edc:	e7e3      	b.n	8012ea6 <_printf_i+0x176>
 8012ede:	065e      	lsls	r6, r3, #25
 8012ee0:	bf48      	it	mi
 8012ee2:	b2ad      	uxthmi	r5, r5
 8012ee4:	e7e6      	b.n	8012eb4 <_printf_i+0x184>
 8012ee6:	4616      	mov	r6, r2
 8012ee8:	e7bb      	b.n	8012e62 <_printf_i+0x132>
 8012eea:	680b      	ldr	r3, [r1, #0]
 8012eec:	6826      	ldr	r6, [r4, #0]
 8012eee:	1d1d      	adds	r5, r3, #4
 8012ef0:	6960      	ldr	r0, [r4, #20]
 8012ef2:	600d      	str	r5, [r1, #0]
 8012ef4:	0635      	lsls	r5, r6, #24
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	d501      	bpl.n	8012efe <_printf_i+0x1ce>
 8012efa:	6018      	str	r0, [r3, #0]
 8012efc:	e002      	b.n	8012f04 <_printf_i+0x1d4>
 8012efe:	0671      	lsls	r1, r6, #25
 8012f00:	d5fb      	bpl.n	8012efa <_printf_i+0x1ca>
 8012f02:	8018      	strh	r0, [r3, #0]
 8012f04:	2300      	movs	r3, #0
 8012f06:	4616      	mov	r6, r2
 8012f08:	6123      	str	r3, [r4, #16]
 8012f0a:	e7ba      	b.n	8012e82 <_printf_i+0x152>
 8012f0c:	680b      	ldr	r3, [r1, #0]
 8012f0e:	1d1a      	adds	r2, r3, #4
 8012f10:	600a      	str	r2, [r1, #0]
 8012f12:	681e      	ldr	r6, [r3, #0]
 8012f14:	2100      	movs	r1, #0
 8012f16:	4630      	mov	r0, r6
 8012f18:	6862      	ldr	r2, [r4, #4]
 8012f1a:	f000 f8d9 	bl	80130d0 <memchr>
 8012f1e:	b108      	cbz	r0, 8012f24 <_printf_i+0x1f4>
 8012f20:	1b80      	subs	r0, r0, r6
 8012f22:	6060      	str	r0, [r4, #4]
 8012f24:	6863      	ldr	r3, [r4, #4]
 8012f26:	6123      	str	r3, [r4, #16]
 8012f28:	2300      	movs	r3, #0
 8012f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f2e:	e7a8      	b.n	8012e82 <_printf_i+0x152>
 8012f30:	4632      	mov	r2, r6
 8012f32:	4649      	mov	r1, r9
 8012f34:	4640      	mov	r0, r8
 8012f36:	6923      	ldr	r3, [r4, #16]
 8012f38:	47d0      	blx	sl
 8012f3a:	3001      	adds	r0, #1
 8012f3c:	d0ab      	beq.n	8012e96 <_printf_i+0x166>
 8012f3e:	6823      	ldr	r3, [r4, #0]
 8012f40:	079b      	lsls	r3, r3, #30
 8012f42:	d413      	bmi.n	8012f6c <_printf_i+0x23c>
 8012f44:	68e0      	ldr	r0, [r4, #12]
 8012f46:	9b03      	ldr	r3, [sp, #12]
 8012f48:	4298      	cmp	r0, r3
 8012f4a:	bfb8      	it	lt
 8012f4c:	4618      	movlt	r0, r3
 8012f4e:	e7a4      	b.n	8012e9a <_printf_i+0x16a>
 8012f50:	2301      	movs	r3, #1
 8012f52:	4632      	mov	r2, r6
 8012f54:	4649      	mov	r1, r9
 8012f56:	4640      	mov	r0, r8
 8012f58:	47d0      	blx	sl
 8012f5a:	3001      	adds	r0, #1
 8012f5c:	d09b      	beq.n	8012e96 <_printf_i+0x166>
 8012f5e:	3501      	adds	r5, #1
 8012f60:	68e3      	ldr	r3, [r4, #12]
 8012f62:	9903      	ldr	r1, [sp, #12]
 8012f64:	1a5b      	subs	r3, r3, r1
 8012f66:	42ab      	cmp	r3, r5
 8012f68:	dcf2      	bgt.n	8012f50 <_printf_i+0x220>
 8012f6a:	e7eb      	b.n	8012f44 <_printf_i+0x214>
 8012f6c:	2500      	movs	r5, #0
 8012f6e:	f104 0619 	add.w	r6, r4, #25
 8012f72:	e7f5      	b.n	8012f60 <_printf_i+0x230>
 8012f74:	080138b1 	.word	0x080138b1
 8012f78:	080138c2 	.word	0x080138c2

08012f7c <_sbrk_r>:
 8012f7c:	b538      	push	{r3, r4, r5, lr}
 8012f7e:	2300      	movs	r3, #0
 8012f80:	4d05      	ldr	r5, [pc, #20]	; (8012f98 <_sbrk_r+0x1c>)
 8012f82:	4604      	mov	r4, r0
 8012f84:	4608      	mov	r0, r1
 8012f86:	602b      	str	r3, [r5, #0]
 8012f88:	f7ee fbb0 	bl	80016ec <_sbrk>
 8012f8c:	1c43      	adds	r3, r0, #1
 8012f8e:	d102      	bne.n	8012f96 <_sbrk_r+0x1a>
 8012f90:	682b      	ldr	r3, [r5, #0]
 8012f92:	b103      	cbz	r3, 8012f96 <_sbrk_r+0x1a>
 8012f94:	6023      	str	r3, [r4, #0]
 8012f96:	bd38      	pop	{r3, r4, r5, pc}
 8012f98:	20001a24 	.word	0x20001a24

08012f9c <__sread>:
 8012f9c:	b510      	push	{r4, lr}
 8012f9e:	460c      	mov	r4, r1
 8012fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa4:	f000 f8ae 	bl	8013104 <_read_r>
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	bfab      	itete	ge
 8012fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012fae:	89a3      	ldrhlt	r3, [r4, #12]
 8012fb0:	181b      	addge	r3, r3, r0
 8012fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012fb6:	bfac      	ite	ge
 8012fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8012fba:	81a3      	strhlt	r3, [r4, #12]
 8012fbc:	bd10      	pop	{r4, pc}

08012fbe <__swrite>:
 8012fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc2:	461f      	mov	r7, r3
 8012fc4:	898b      	ldrh	r3, [r1, #12]
 8012fc6:	4605      	mov	r5, r0
 8012fc8:	05db      	lsls	r3, r3, #23
 8012fca:	460c      	mov	r4, r1
 8012fcc:	4616      	mov	r6, r2
 8012fce:	d505      	bpl.n	8012fdc <__swrite+0x1e>
 8012fd0:	2302      	movs	r3, #2
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fd8:	f000 f868 	bl	80130ac <_lseek_r>
 8012fdc:	89a3      	ldrh	r3, [r4, #12]
 8012fde:	4632      	mov	r2, r6
 8012fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fe4:	81a3      	strh	r3, [r4, #12]
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	463b      	mov	r3, r7
 8012fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff2:	f000 b817 	b.w	8013024 <_write_r>

08012ff6 <__sseek>:
 8012ff6:	b510      	push	{r4, lr}
 8012ff8:	460c      	mov	r4, r1
 8012ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ffe:	f000 f855 	bl	80130ac <_lseek_r>
 8013002:	1c43      	adds	r3, r0, #1
 8013004:	89a3      	ldrh	r3, [r4, #12]
 8013006:	bf15      	itete	ne
 8013008:	6560      	strne	r0, [r4, #84]	; 0x54
 801300a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801300e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013012:	81a3      	strheq	r3, [r4, #12]
 8013014:	bf18      	it	ne
 8013016:	81a3      	strhne	r3, [r4, #12]
 8013018:	bd10      	pop	{r4, pc}

0801301a <__sclose>:
 801301a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801301e:	f000 b813 	b.w	8013048 <_close_r>
	...

08013024 <_write_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4604      	mov	r4, r0
 8013028:	4608      	mov	r0, r1
 801302a:	4611      	mov	r1, r2
 801302c:	2200      	movs	r2, #0
 801302e:	4d05      	ldr	r5, [pc, #20]	; (8013044 <_write_r+0x20>)
 8013030:	602a      	str	r2, [r5, #0]
 8013032:	461a      	mov	r2, r3
 8013034:	f7ee fb0e 	bl	8001654 <_write>
 8013038:	1c43      	adds	r3, r0, #1
 801303a:	d102      	bne.n	8013042 <_write_r+0x1e>
 801303c:	682b      	ldr	r3, [r5, #0]
 801303e:	b103      	cbz	r3, 8013042 <_write_r+0x1e>
 8013040:	6023      	str	r3, [r4, #0]
 8013042:	bd38      	pop	{r3, r4, r5, pc}
 8013044:	20001a24 	.word	0x20001a24

08013048 <_close_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	2300      	movs	r3, #0
 801304c:	4d05      	ldr	r5, [pc, #20]	; (8013064 <_close_r+0x1c>)
 801304e:	4604      	mov	r4, r0
 8013050:	4608      	mov	r0, r1
 8013052:	602b      	str	r3, [r5, #0]
 8013054:	f7ee fb1a 	bl	800168c <_close>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	d102      	bne.n	8013062 <_close_r+0x1a>
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	b103      	cbz	r3, 8013062 <_close_r+0x1a>
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	20001a24 	.word	0x20001a24

08013068 <_fstat_r>:
 8013068:	b538      	push	{r3, r4, r5, lr}
 801306a:	2300      	movs	r3, #0
 801306c:	4d06      	ldr	r5, [pc, #24]	; (8013088 <_fstat_r+0x20>)
 801306e:	4604      	mov	r4, r0
 8013070:	4608      	mov	r0, r1
 8013072:	4611      	mov	r1, r2
 8013074:	602b      	str	r3, [r5, #0]
 8013076:	f7ee fb14 	bl	80016a2 <_fstat>
 801307a:	1c43      	adds	r3, r0, #1
 801307c:	d102      	bne.n	8013084 <_fstat_r+0x1c>
 801307e:	682b      	ldr	r3, [r5, #0]
 8013080:	b103      	cbz	r3, 8013084 <_fstat_r+0x1c>
 8013082:	6023      	str	r3, [r4, #0]
 8013084:	bd38      	pop	{r3, r4, r5, pc}
 8013086:	bf00      	nop
 8013088:	20001a24 	.word	0x20001a24

0801308c <_isatty_r>:
 801308c:	b538      	push	{r3, r4, r5, lr}
 801308e:	2300      	movs	r3, #0
 8013090:	4d05      	ldr	r5, [pc, #20]	; (80130a8 <_isatty_r+0x1c>)
 8013092:	4604      	mov	r4, r0
 8013094:	4608      	mov	r0, r1
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	f7ee fb12 	bl	80016c0 <_isatty>
 801309c:	1c43      	adds	r3, r0, #1
 801309e:	d102      	bne.n	80130a6 <_isatty_r+0x1a>
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	b103      	cbz	r3, 80130a6 <_isatty_r+0x1a>
 80130a4:	6023      	str	r3, [r4, #0]
 80130a6:	bd38      	pop	{r3, r4, r5, pc}
 80130a8:	20001a24 	.word	0x20001a24

080130ac <_lseek_r>:
 80130ac:	b538      	push	{r3, r4, r5, lr}
 80130ae:	4604      	mov	r4, r0
 80130b0:	4608      	mov	r0, r1
 80130b2:	4611      	mov	r1, r2
 80130b4:	2200      	movs	r2, #0
 80130b6:	4d05      	ldr	r5, [pc, #20]	; (80130cc <_lseek_r+0x20>)
 80130b8:	602a      	str	r2, [r5, #0]
 80130ba:	461a      	mov	r2, r3
 80130bc:	f7ee fb0a 	bl	80016d4 <_lseek>
 80130c0:	1c43      	adds	r3, r0, #1
 80130c2:	d102      	bne.n	80130ca <_lseek_r+0x1e>
 80130c4:	682b      	ldr	r3, [r5, #0]
 80130c6:	b103      	cbz	r3, 80130ca <_lseek_r+0x1e>
 80130c8:	6023      	str	r3, [r4, #0]
 80130ca:	bd38      	pop	{r3, r4, r5, pc}
 80130cc:	20001a24 	.word	0x20001a24

080130d0 <memchr>:
 80130d0:	4603      	mov	r3, r0
 80130d2:	b510      	push	{r4, lr}
 80130d4:	b2c9      	uxtb	r1, r1
 80130d6:	4402      	add	r2, r0
 80130d8:	4293      	cmp	r3, r2
 80130da:	4618      	mov	r0, r3
 80130dc:	d101      	bne.n	80130e2 <memchr+0x12>
 80130de:	2000      	movs	r0, #0
 80130e0:	e003      	b.n	80130ea <memchr+0x1a>
 80130e2:	7804      	ldrb	r4, [r0, #0]
 80130e4:	3301      	adds	r3, #1
 80130e6:	428c      	cmp	r4, r1
 80130e8:	d1f6      	bne.n	80130d8 <memchr+0x8>
 80130ea:	bd10      	pop	{r4, pc}

080130ec <__malloc_lock>:
 80130ec:	4801      	ldr	r0, [pc, #4]	; (80130f4 <__malloc_lock+0x8>)
 80130ee:	f7ff bb4b 	b.w	8012788 <__retarget_lock_acquire_recursive>
 80130f2:	bf00      	nop
 80130f4:	20001a1c 	.word	0x20001a1c

080130f8 <__malloc_unlock>:
 80130f8:	4801      	ldr	r0, [pc, #4]	; (8013100 <__malloc_unlock+0x8>)
 80130fa:	f7ff bb46 	b.w	801278a <__retarget_lock_release_recursive>
 80130fe:	bf00      	nop
 8013100:	20001a1c 	.word	0x20001a1c

08013104 <_read_r>:
 8013104:	b538      	push	{r3, r4, r5, lr}
 8013106:	4604      	mov	r4, r0
 8013108:	4608      	mov	r0, r1
 801310a:	4611      	mov	r1, r2
 801310c:	2200      	movs	r2, #0
 801310e:	4d05      	ldr	r5, [pc, #20]	; (8013124 <_read_r+0x20>)
 8013110:	602a      	str	r2, [r5, #0]
 8013112:	461a      	mov	r2, r3
 8013114:	f7ee fa81 	bl	800161a <_read>
 8013118:	1c43      	adds	r3, r0, #1
 801311a:	d102      	bne.n	8013122 <_read_r+0x1e>
 801311c:	682b      	ldr	r3, [r5, #0]
 801311e:	b103      	cbz	r3, 8013122 <_read_r+0x1e>
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	bd38      	pop	{r3, r4, r5, pc}
 8013124:	20001a24 	.word	0x20001a24

08013128 <_init>:
 8013128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801312a:	bf00      	nop
 801312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801312e:	bc08      	pop	{r3}
 8013130:	469e      	mov	lr, r3
 8013132:	4770      	bx	lr

08013134 <_fini>:
 8013134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013136:	bf00      	nop
 8013138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801313a:	bc08      	pop	{r3}
 801313c:	469e      	mov	lr, r3
 801313e:	4770      	bx	lr
